
ProjectModuleV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063cc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08006568  08006568  00016568  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006608  08006608  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006608  08006608  00016608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006610  08006610  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006610  08006610  00016610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006614  08006614  00016614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000424  20000078  08006690  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  08006690  0002049c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec74  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000237e  00000000  00000000  0002ed1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d08  00000000  00000000  000310a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be0  00000000  00000000  00031da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e72  00000000  00000000  00032988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012615  00000000  00000000  0004a7fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fe41  00000000  00000000  0005ce0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ecc50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039f0  00000000  00000000  000ecca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000078 	.word	0x20000078
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800654c 	.word	0x0800654c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000007c 	.word	0x2000007c
 80001d4:	0800654c 	.word	0x0800654c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_uldivmod>:
 8000d6c:	b953      	cbnz	r3, 8000d84 <__aeabi_uldivmod+0x18>
 8000d6e:	b94a      	cbnz	r2, 8000d84 <__aeabi_uldivmod+0x18>
 8000d70:	2900      	cmp	r1, #0
 8000d72:	bf08      	it	eq
 8000d74:	2800      	cmpeq	r0, #0
 8000d76:	bf1c      	itt	ne
 8000d78:	f04f 31ff 	movne.w	r1, #4294967295
 8000d7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d80:	f000 b974 	b.w	800106c <__aeabi_idiv0>
 8000d84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d8c:	f000 f806 	bl	8000d9c <__udivmoddi4>
 8000d90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d98:	b004      	add	sp, #16
 8000d9a:	4770      	bx	lr

08000d9c <__udivmoddi4>:
 8000d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da0:	9d08      	ldr	r5, [sp, #32]
 8000da2:	4604      	mov	r4, r0
 8000da4:	468e      	mov	lr, r1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d14d      	bne.n	8000e46 <__udivmoddi4+0xaa>
 8000daa:	428a      	cmp	r2, r1
 8000dac:	4694      	mov	ip, r2
 8000dae:	d969      	bls.n	8000e84 <__udivmoddi4+0xe8>
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	b152      	cbz	r2, 8000dcc <__udivmoddi4+0x30>
 8000db6:	fa01 f302 	lsl.w	r3, r1, r2
 8000dba:	f1c2 0120 	rsb	r1, r2, #32
 8000dbe:	fa20 f101 	lsr.w	r1, r0, r1
 8000dc2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc6:	ea41 0e03 	orr.w	lr, r1, r3
 8000dca:	4094      	lsls	r4, r2
 8000dcc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd0:	0c21      	lsrs	r1, r4, #16
 8000dd2:	fbbe f6f8 	udiv	r6, lr, r8
 8000dd6:	fa1f f78c 	uxth.w	r7, ip
 8000dda:	fb08 e316 	mls	r3, r8, r6, lr
 8000dde:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000de2:	fb06 f107 	mul.w	r1, r6, r7
 8000de6:	4299      	cmp	r1, r3
 8000de8:	d90a      	bls.n	8000e00 <__udivmoddi4+0x64>
 8000dea:	eb1c 0303 	adds.w	r3, ip, r3
 8000dee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000df2:	f080 811f 	bcs.w	8001034 <__udivmoddi4+0x298>
 8000df6:	4299      	cmp	r1, r3
 8000df8:	f240 811c 	bls.w	8001034 <__udivmoddi4+0x298>
 8000dfc:	3e02      	subs	r6, #2
 8000dfe:	4463      	add	r3, ip
 8000e00:	1a5b      	subs	r3, r3, r1
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e08:	fb08 3310 	mls	r3, r8, r0, r3
 8000e0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e10:	fb00 f707 	mul.w	r7, r0, r7
 8000e14:	42a7      	cmp	r7, r4
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x92>
 8000e18:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e20:	f080 810a 	bcs.w	8001038 <__udivmoddi4+0x29c>
 8000e24:	42a7      	cmp	r7, r4
 8000e26:	f240 8107 	bls.w	8001038 <__udivmoddi4+0x29c>
 8000e2a:	4464      	add	r4, ip
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e32:	1be4      	subs	r4, r4, r7
 8000e34:	2600      	movs	r6, #0
 8000e36:	b11d      	cbz	r5, 8000e40 <__udivmoddi4+0xa4>
 8000e38:	40d4      	lsrs	r4, r2
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d909      	bls.n	8000e5e <__udivmoddi4+0xc2>
 8000e4a:	2d00      	cmp	r5, #0
 8000e4c:	f000 80ef 	beq.w	800102e <__udivmoddi4+0x292>
 8000e50:	2600      	movs	r6, #0
 8000e52:	e9c5 0100 	strd	r0, r1, [r5]
 8000e56:	4630      	mov	r0, r6
 8000e58:	4631      	mov	r1, r6
 8000e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5e:	fab3 f683 	clz	r6, r3
 8000e62:	2e00      	cmp	r6, #0
 8000e64:	d14a      	bne.n	8000efc <__udivmoddi4+0x160>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d302      	bcc.n	8000e70 <__udivmoddi4+0xd4>
 8000e6a:	4282      	cmp	r2, r0
 8000e6c:	f200 80f9 	bhi.w	8001062 <__udivmoddi4+0x2c6>
 8000e70:	1a84      	subs	r4, r0, r2
 8000e72:	eb61 0303 	sbc.w	r3, r1, r3
 8000e76:	2001      	movs	r0, #1
 8000e78:	469e      	mov	lr, r3
 8000e7a:	2d00      	cmp	r5, #0
 8000e7c:	d0e0      	beq.n	8000e40 <__udivmoddi4+0xa4>
 8000e7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e82:	e7dd      	b.n	8000e40 <__udivmoddi4+0xa4>
 8000e84:	b902      	cbnz	r2, 8000e88 <__udivmoddi4+0xec>
 8000e86:	deff      	udf	#255	; 0xff
 8000e88:	fab2 f282 	clz	r2, r2
 8000e8c:	2a00      	cmp	r2, #0
 8000e8e:	f040 8092 	bne.w	8000fb6 <__udivmoddi4+0x21a>
 8000e92:	eba1 010c 	sub.w	r1, r1, ip
 8000e96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e9a:	fa1f fe8c 	uxth.w	lr, ip
 8000e9e:	2601      	movs	r6, #1
 8000ea0:	0c20      	lsrs	r0, r4, #16
 8000ea2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ea6:	fb07 1113 	mls	r1, r7, r3, r1
 8000eaa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eae:	fb0e f003 	mul.w	r0, lr, r3
 8000eb2:	4288      	cmp	r0, r1
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x12c>
 8000eb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000eba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0x12a>
 8000ec0:	4288      	cmp	r0, r1
 8000ec2:	f200 80cb 	bhi.w	800105c <__udivmoddi4+0x2c0>
 8000ec6:	4643      	mov	r3, r8
 8000ec8:	1a09      	subs	r1, r1, r0
 8000eca:	b2a4      	uxth	r4, r4
 8000ecc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed0:	fb07 1110 	mls	r1, r7, r0, r1
 8000ed4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ed8:	fb0e fe00 	mul.w	lr, lr, r0
 8000edc:	45a6      	cmp	lr, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x156>
 8000ee0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee8:	d202      	bcs.n	8000ef0 <__udivmoddi4+0x154>
 8000eea:	45a6      	cmp	lr, r4
 8000eec:	f200 80bb 	bhi.w	8001066 <__udivmoddi4+0x2ca>
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	eba4 040e 	sub.w	r4, r4, lr
 8000ef6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000efa:	e79c      	b.n	8000e36 <__udivmoddi4+0x9a>
 8000efc:	f1c6 0720 	rsb	r7, r6, #32
 8000f00:	40b3      	lsls	r3, r6
 8000f02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000f0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000f12:	431c      	orrs	r4, r3
 8000f14:	40f9      	lsrs	r1, r7
 8000f16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000f1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f22:	0c20      	lsrs	r0, r4, #16
 8000f24:	fa1f fe8c 	uxth.w	lr, ip
 8000f28:	fb09 1118 	mls	r1, r9, r8, r1
 8000f2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f30:	fb08 f00e 	mul.w	r0, r8, lr
 8000f34:	4288      	cmp	r0, r1
 8000f36:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3a:	d90b      	bls.n	8000f54 <__udivmoddi4+0x1b8>
 8000f3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f44:	f080 8088 	bcs.w	8001058 <__udivmoddi4+0x2bc>
 8000f48:	4288      	cmp	r0, r1
 8000f4a:	f240 8085 	bls.w	8001058 <__udivmoddi4+0x2bc>
 8000f4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f52:	4461      	add	r1, ip
 8000f54:	1a09      	subs	r1, r1, r0
 8000f56:	b2a4      	uxth	r4, r4
 8000f58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000f60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f68:	458e      	cmp	lr, r1
 8000f6a:	d908      	bls.n	8000f7e <__udivmoddi4+0x1e2>
 8000f6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f74:	d26c      	bcs.n	8001050 <__udivmoddi4+0x2b4>
 8000f76:	458e      	cmp	lr, r1
 8000f78:	d96a      	bls.n	8001050 <__udivmoddi4+0x2b4>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4461      	add	r1, ip
 8000f7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f82:	fba0 9402 	umull	r9, r4, r0, r2
 8000f86:	eba1 010e 	sub.w	r1, r1, lr
 8000f8a:	42a1      	cmp	r1, r4
 8000f8c:	46c8      	mov	r8, r9
 8000f8e:	46a6      	mov	lr, r4
 8000f90:	d356      	bcc.n	8001040 <__udivmoddi4+0x2a4>
 8000f92:	d053      	beq.n	800103c <__udivmoddi4+0x2a0>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x212>
 8000f96:	ebb3 0208 	subs.w	r2, r3, r8
 8000f9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000f9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000fa2:	fa22 f306 	lsr.w	r3, r2, r6
 8000fa6:	40f1      	lsrs	r1, r6
 8000fa8:	431f      	orrs	r7, r3
 8000faa:	e9c5 7100 	strd	r7, r1, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	f1c2 0320 	rsb	r3, r2, #32
 8000fba:	40d8      	lsrs	r0, r3
 8000fbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000fc4:	4091      	lsls	r1, r2
 8000fc6:	4301      	orrs	r1, r0
 8000fc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fcc:	fa1f fe8c 	uxth.w	lr, ip
 8000fd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000fd8:	0c0b      	lsrs	r3, r1, #16
 8000fda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fde:	fb00 f60e 	mul.w	r6, r0, lr
 8000fe2:	429e      	cmp	r6, r3
 8000fe4:	fa04 f402 	lsl.w	r4, r4, r2
 8000fe8:	d908      	bls.n	8000ffc <__udivmoddi4+0x260>
 8000fea:	eb1c 0303 	adds.w	r3, ip, r3
 8000fee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ff2:	d22f      	bcs.n	8001054 <__udivmoddi4+0x2b8>
 8000ff4:	429e      	cmp	r6, r3
 8000ff6:	d92d      	bls.n	8001054 <__udivmoddi4+0x2b8>
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	1b9b      	subs	r3, r3, r6
 8000ffe:	b289      	uxth	r1, r1
 8001000:	fbb3 f6f7 	udiv	r6, r3, r7
 8001004:	fb07 3316 	mls	r3, r7, r6, r3
 8001008:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800100c:	fb06 f30e 	mul.w	r3, r6, lr
 8001010:	428b      	cmp	r3, r1
 8001012:	d908      	bls.n	8001026 <__udivmoddi4+0x28a>
 8001014:	eb1c 0101 	adds.w	r1, ip, r1
 8001018:	f106 38ff 	add.w	r8, r6, #4294967295
 800101c:	d216      	bcs.n	800104c <__udivmoddi4+0x2b0>
 800101e:	428b      	cmp	r3, r1
 8001020:	d914      	bls.n	800104c <__udivmoddi4+0x2b0>
 8001022:	3e02      	subs	r6, #2
 8001024:	4461      	add	r1, ip
 8001026:	1ac9      	subs	r1, r1, r3
 8001028:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800102c:	e738      	b.n	8000ea0 <__udivmoddi4+0x104>
 800102e:	462e      	mov	r6, r5
 8001030:	4628      	mov	r0, r5
 8001032:	e705      	b.n	8000e40 <__udivmoddi4+0xa4>
 8001034:	4606      	mov	r6, r0
 8001036:	e6e3      	b.n	8000e00 <__udivmoddi4+0x64>
 8001038:	4618      	mov	r0, r3
 800103a:	e6f8      	b.n	8000e2e <__udivmoddi4+0x92>
 800103c:	454b      	cmp	r3, r9
 800103e:	d2a9      	bcs.n	8000f94 <__udivmoddi4+0x1f8>
 8001040:	ebb9 0802 	subs.w	r8, r9, r2
 8001044:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001048:	3801      	subs	r0, #1
 800104a:	e7a3      	b.n	8000f94 <__udivmoddi4+0x1f8>
 800104c:	4646      	mov	r6, r8
 800104e:	e7ea      	b.n	8001026 <__udivmoddi4+0x28a>
 8001050:	4620      	mov	r0, r4
 8001052:	e794      	b.n	8000f7e <__udivmoddi4+0x1e2>
 8001054:	4640      	mov	r0, r8
 8001056:	e7d1      	b.n	8000ffc <__udivmoddi4+0x260>
 8001058:	46d0      	mov	r8, sl
 800105a:	e77b      	b.n	8000f54 <__udivmoddi4+0x1b8>
 800105c:	3b02      	subs	r3, #2
 800105e:	4461      	add	r1, ip
 8001060:	e732      	b.n	8000ec8 <__udivmoddi4+0x12c>
 8001062:	4630      	mov	r0, r6
 8001064:	e709      	b.n	8000e7a <__udivmoddi4+0xde>
 8001066:	4464      	add	r4, ip
 8001068:	3802      	subs	r0, #2
 800106a:	e742      	b.n	8000ef2 <__udivmoddi4+0x156>

0800106c <__aeabi_idiv0>:
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <InitKalmanStruct>:
extern arm_matrix_instance_f32 mat_P, mat_P_minus, mat_Q;
extern arm_matrix_instance_f32 mat_C, mat_R, mat_S, mat_K;
extern arm_matrix_instance_f32 mat_temp3x3A,mat_temp3x3B, mat_temp3x1,mat_temp1x3, mat_temp1x1;

void InitKalmanStruct(Kalman* KF,float q,float r)
{
 8001070:	b4b0      	push	{r4, r5, r7}
 8001072:	b0a1      	sub	sp, #132	; 0x84
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	ed87 0a02 	vstr	s0, [r7, #8]
 800107c:	edc7 0a01 	vstr	s1, [r7, #4]
	KF->R = r;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	655a      	str	r2, [r3, #84]	; 0x54
	KF->var_Q = q;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	68ba      	ldr	r2, [r7, #8]
 800108a:	659a      	str	r2, [r3, #88]	; 0x58
	KF->D = 0;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	float32_t a[9] = {
 8001096:	4b48      	ldr	r3, [pc, #288]	; (80011b8 <InitKalmanStruct+0x148>)
 8001098:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800109c:	461d      	mov	r5, r3
 800109e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a6:	682b      	ldr	r3, [r5, #0]
 80010a8:	6023      	str	r3, [r4, #0]
			1, 0.001, 0.0000005,
			0, 1, 0.001,
			0, 0, 1
	};
	float iden[9] = {
 80010aa:	4b44      	ldr	r3, [pc, #272]	; (80011bc <InitKalmanStruct+0x14c>)
 80010ac:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80010b0:	461d      	mov	r5, r3
 80010b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ba:	682b      	ldr	r3, [r5, #0]
 80010bc:	6023      	str	r3, [r4, #0]
			1, 0, 0,
			0, 1, 0,
			0, 0, 1
	};
	int i;
	for(i=0;i<9;i++)
 80010be:	2300      	movs	r3, #0
 80010c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80010c2:	e023      	b.n	800110c <InitKalmanStruct+0x9c>
	{
		KF->A[i] = a[i];
 80010c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	3380      	adds	r3, #128	; 0x80
 80010ca:	443b      	add	r3, r7
 80010cc:	3b28      	subs	r3, #40	; 0x28
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	68f9      	ldr	r1, [r7, #12]
 80010d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010d4:	3318      	adds	r3, #24
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	440b      	add	r3, r1
 80010da:	601a      	str	r2, [r3, #0]
		KF->I[i] = iden[i];
 80010dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	3380      	adds	r3, #128	; 0x80
 80010e2:	443b      	add	r3, r7
 80010e4:	3b4c      	subs	r3, #76	; 0x4c
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	68f9      	ldr	r1, [r7, #12]
 80010ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010ec:	332e      	adds	r3, #46	; 0x2e
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	440b      	add	r3, r1
 80010f2:	601a      	str	r2, [r3, #0]
		KF->P[i] = 0;
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010f8:	3302      	adds	r3, #2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	3304      	adds	r3, #4
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
	for(i=0;i<9;i++)
 8001106:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001108:	3301      	adds	r3, #1
 800110a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800110c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800110e:	2b08      	cmp	r3, #8
 8001110:	ddd8      	ble.n	80010c4 <InitKalmanStruct+0x54>
	}
	float32_t b[3] = {
 8001112:	f04f 0300 	mov.w	r3, #0
 8001116:	62bb      	str	r3, [r7, #40]	; 0x28
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800111e:	f04f 0300 	mov.w	r3, #0
 8001122:	633b      	str	r3, [r7, #48]	; 0x30
			0, 0, 0
	};
	float32_t c[3] = {
 8001124:	f04f 0300 	mov.w	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
 800112a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800112e:	623b      	str	r3, [r7, #32]
 8001130:	f04f 0300 	mov.w	r3, #0
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
//			0, 0, 0
//	};
//	float32_t p[3] = {
//				0, 0, 0
//		};
	float32_t g[3] = {
 8001136:	4a22      	ldr	r2, [pc, #136]	; (80011c0 <InitKalmanStruct+0x150>)
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	ca07      	ldmia	r2, {r0, r1, r2}
 800113e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
//	float32_t g[3] = {
//			0.0000005,
//			0.001,
//			0.0
//	};
	for(i=0;i<3;i++)
 8001142:	2300      	movs	r3, #0
 8001144:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001146:	e02e      	b.n	80011a6 <InitKalmanStruct+0x136>
	{
		KF->B[i] = b[i];
 8001148:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	3380      	adds	r3, #128	; 0x80
 800114e:	443b      	add	r3, r7
 8001150:	3b58      	subs	r3, #88	; 0x58
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	68f9      	ldr	r1, [r7, #12]
 8001156:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001158:	3320      	adds	r3, #32
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	440b      	add	r3, r1
 800115e:	3304      	adds	r3, #4
 8001160:	601a      	str	r2, [r3, #0]
		KF->C[i] = c[i];
 8001162:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	3380      	adds	r3, #128	; 0x80
 8001168:	443b      	add	r3, r7
 800116a:	3b64      	subs	r3, #100	; 0x64
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	68f9      	ldr	r1, [r7, #12]
 8001170:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001172:	3324      	adds	r3, #36	; 0x24
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	440b      	add	r3, r1
 8001178:	601a      	str	r2, [r3, #0]
		KF->G[i] = g[i];
 800117a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	3380      	adds	r3, #128	; 0x80
 8001180:	443b      	add	r3, r7
 8001182:	3b70      	subs	r3, #112	; 0x70
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	68f9      	ldr	r1, [r7, #12]
 8001188:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800118a:	3328      	adds	r3, #40	; 0x28
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	440b      	add	r3, r1
 8001190:	601a      	str	r2, [r3, #0]
		KF->x_hat[i] = 0;
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4413      	add	r3, r2
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
	for(i=0;i<3;i++)
 80011a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80011a2:	3301      	adds	r3, #1
 80011a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80011a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	ddcd      	ble.n	8001148 <InitKalmanStruct+0xd8>
	}
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3784      	adds	r7, #132	; 0x84
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bcb0      	pop	{r4, r5, r7}
 80011b6:	4770      	bx	lr
 80011b8:	08006568 	.word	0x08006568
 80011bc:	0800658c 	.word	0x0800658c
 80011c0:	080065b0 	.word	0x080065b0

080011c4 <kalman_filter>:

void kalman_filter()
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
    //Process model: x_hat_minus = mat_A*x_hat
    arm_mat_mult_f32(&mat_A, &mat_x_hat, &mat_x_hat_minus);			//A*X
 80011c8:	4a39      	ldr	r2, [pc, #228]	; (80012b0 <kalman_filter+0xec>)
 80011ca:	493a      	ldr	r1, [pc, #232]	; (80012b4 <kalman_filter+0xf0>)
 80011cc:	483a      	ldr	r0, [pc, #232]	; (80012b8 <kalman_filter+0xf4>)
 80011ce:	f001 fed6 	bl	8002f7e <arm_mat_mult_f32>
    // If an input control vector is used:
    // arm_mat_mult_f32(&mat_B, &mat_u, &mat_temp3x3A);
    // arm_mat_add_f32(&mat_x_hat_minus, &mat_temp3x3A, &mat_x_hat_minus);

    // Predict covariance matrix: P_minus = A * P * A^T + Q
    arm_mat_trans_f32(&mat_A, &mat_temp3x3A);					    //AT
 80011d2:	493a      	ldr	r1, [pc, #232]	; (80012bc <kalman_filter+0xf8>)
 80011d4:	4838      	ldr	r0, [pc, #224]	; (80012b8 <kalman_filter+0xf4>)
 80011d6:	f001 ffbd 	bl	8003154 <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_A, &mat_P, &mat_temp3x3B);			    //A*P
 80011da:	4a39      	ldr	r2, [pc, #228]	; (80012c0 <kalman_filter+0xfc>)
 80011dc:	4939      	ldr	r1, [pc, #228]	; (80012c4 <kalman_filter+0x100>)
 80011de:	4836      	ldr	r0, [pc, #216]	; (80012b8 <kalman_filter+0xf4>)
 80011e0:	f001 fecd 	bl	8002f7e <arm_mat_mult_f32>
    arm_mat_mult_f32(&mat_temp3x3B, &mat_temp3x3A, &mat_P_minus);	//A*P*AT
 80011e4:	4a38      	ldr	r2, [pc, #224]	; (80012c8 <kalman_filter+0x104>)
 80011e6:	4935      	ldr	r1, [pc, #212]	; (80012bc <kalman_filter+0xf8>)
 80011e8:	4835      	ldr	r0, [pc, #212]	; (80012c0 <kalman_filter+0xfc>)
 80011ea:	f001 fec8 	bl	8002f7e <arm_mat_mult_f32>
    arm_mat_trans_f32(&mat_G, &mat_GT);								//GT
 80011ee:	4937      	ldr	r1, [pc, #220]	; (80012cc <kalman_filter+0x108>)
 80011f0:	4837      	ldr	r0, [pc, #220]	; (80012d0 <kalman_filter+0x10c>)
 80011f2:	f001 ffaf 	bl	8003154 <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_G, &mat_GT, &mat_Q);						//G*GT
 80011f6:	4a37      	ldr	r2, [pc, #220]	; (80012d4 <kalman_filter+0x110>)
 80011f8:	4934      	ldr	r1, [pc, #208]	; (80012cc <kalman_filter+0x108>)
 80011fa:	4835      	ldr	r0, [pc, #212]	; (80012d0 <kalman_filter+0x10c>)
 80011fc:	f001 febf 	bl	8002f7e <arm_mat_mult_f32>
    arm_mat_scale_f32(&mat_Q,KF.var_Q, &mat_Q);						//G*GT*var_q
 8001200:	4b35      	ldr	r3, [pc, #212]	; (80012d8 <kalman_filter+0x114>)
 8001202:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001206:	4933      	ldr	r1, [pc, #204]	; (80012d4 <kalman_filter+0x110>)
 8001208:	eeb0 0a67 	vmov.f32	s0, s15
 800120c:	4831      	ldr	r0, [pc, #196]	; (80012d4 <kalman_filter+0x110>)
 800120e:	f001 ff30 	bl	8003072 <arm_mat_scale_f32>
    arm_mat_add_f32(&mat_P_minus, &mat_Q, &mat_P_minus);			//A * P * A^T + Q
 8001212:	4a2d      	ldr	r2, [pc, #180]	; (80012c8 <kalman_filter+0x104>)
 8001214:	492f      	ldr	r1, [pc, #188]	; (80012d4 <kalman_filter+0x110>)
 8001216:	482c      	ldr	r0, [pc, #176]	; (80012c8 <kalman_filter+0x104>)
 8001218:	f001 fae7 	bl	80027ea <arm_mat_add_f32>

    // Calculate innovation covariance: S = C * P_minus * C^T + R
    arm_mat_mult_f32(&mat_C, &mat_P_minus, &mat_temp1x3);			//C*P
 800121c:	4a2f      	ldr	r2, [pc, #188]	; (80012dc <kalman_filter+0x118>)
 800121e:	492a      	ldr	r1, [pc, #168]	; (80012c8 <kalman_filter+0x104>)
 8001220:	482f      	ldr	r0, [pc, #188]	; (80012e0 <kalman_filter+0x11c>)
 8001222:	f001 feac 	bl	8002f7e <arm_mat_mult_f32>
    arm_mat_trans_f32(&mat_C, &mat_temp3x1);						//CT
 8001226:	492f      	ldr	r1, [pc, #188]	; (80012e4 <kalman_filter+0x120>)
 8001228:	482d      	ldr	r0, [pc, #180]	; (80012e0 <kalman_filter+0x11c>)
 800122a:	f001 ff93 	bl	8003154 <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_temp1x3, &mat_temp3x1, &mat_temp1x1);		//C*P*C^T
 800122e:	4a2e      	ldr	r2, [pc, #184]	; (80012e8 <kalman_filter+0x124>)
 8001230:	492c      	ldr	r1, [pc, #176]	; (80012e4 <kalman_filter+0x120>)
 8001232:	482a      	ldr	r0, [pc, #168]	; (80012dc <kalman_filter+0x118>)
 8001234:	f001 fea3 	bl	8002f7e <arm_mat_mult_f32>
    arm_mat_add_f32(&mat_temp1x1, &mat_R, &mat_S);					//C*P*C^T + R
 8001238:	4a2c      	ldr	r2, [pc, #176]	; (80012ec <kalman_filter+0x128>)
 800123a:	492d      	ldr	r1, [pc, #180]	; (80012f0 <kalman_filter+0x12c>)
 800123c:	482a      	ldr	r0, [pc, #168]	; (80012e8 <kalman_filter+0x124>)
 800123e:	f001 fad4 	bl	80027ea <arm_mat_add_f32>

    //==> Calculate Kalman gain: K = P_minus * C^T * S^(-1)
    arm_mat_inverse_f32(&mat_S, &mat_temp1x1);						//inv(S)
 8001242:	4929      	ldr	r1, [pc, #164]	; (80012e8 <kalman_filter+0x124>)
 8001244:	4829      	ldr	r0, [pc, #164]	; (80012ec <kalman_filter+0x128>)
 8001246:	f001 fb23 	bl	8002890 <arm_mat_inverse_f32>
    arm_mat_mult_f32(&mat_P_minus, &mat_temp3x1, &mat_temp3x3A);	//P*CT
 800124a:	4a1c      	ldr	r2, [pc, #112]	; (80012bc <kalman_filter+0xf8>)
 800124c:	4925      	ldr	r1, [pc, #148]	; (80012e4 <kalman_filter+0x120>)
 800124e:	481e      	ldr	r0, [pc, #120]	; (80012c8 <kalman_filter+0x104>)
 8001250:	f001 fe95 	bl	8002f7e <arm_mat_mult_f32>
    arm_mat_mult_f32(&mat_temp3x3A, &mat_temp1x1, &mat_K);			//P*CT*inv(S)
 8001254:	4a27      	ldr	r2, [pc, #156]	; (80012f4 <kalman_filter+0x130>)
 8001256:	4924      	ldr	r1, [pc, #144]	; (80012e8 <kalman_filter+0x124>)
 8001258:	4818      	ldr	r0, [pc, #96]	; (80012bc <kalman_filter+0xf8>)
 800125a:	f001 fe90 	bl	8002f7e <arm_mat_mult_f32>

    //==> Update state estimate: x_hat = x_hat_minus + K * (z - C * x_hat_minus)
    arm_mat_mult_f32(&mat_C, &mat_x_hat_minus, &mat_temp1x1);		//C*X
 800125e:	4a22      	ldr	r2, [pc, #136]	; (80012e8 <kalman_filter+0x124>)
 8001260:	4913      	ldr	r1, [pc, #76]	; (80012b0 <kalman_filter+0xec>)
 8001262:	481f      	ldr	r0, [pc, #124]	; (80012e0 <kalman_filter+0x11c>)
 8001264:	f001 fe8b 	bl	8002f7e <arm_mat_mult_f32>
    //float32_t innovation = z - temp1x1;								//Z-C*X
    arm_mat_scale_f32(&mat_K, KF.z - KF.temp1x1, &mat_temp3x1);			//K*(Z-C*X)
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <kalman_filter+0x114>)
 800126a:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800126e:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <kalman_filter+0x114>)
 8001270:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
 8001274:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001278:	491a      	ldr	r1, [pc, #104]	; (80012e4 <kalman_filter+0x120>)
 800127a:	eeb0 0a67 	vmov.f32	s0, s15
 800127e:	481d      	ldr	r0, [pc, #116]	; (80012f4 <kalman_filter+0x130>)
 8001280:	f001 fef7 	bl	8003072 <arm_mat_scale_f32>
    arm_mat_add_f32(&mat_x_hat_minus, &mat_temp3x1, &mat_x_hat);	//X - K*(Z-C*X) ========> X estimate
 8001284:	4a0b      	ldr	r2, [pc, #44]	; (80012b4 <kalman_filter+0xf0>)
 8001286:	4917      	ldr	r1, [pc, #92]	; (80012e4 <kalman_filter+0x120>)
 8001288:	4809      	ldr	r0, [pc, #36]	; (80012b0 <kalman_filter+0xec>)
 800128a:	f001 faae 	bl	80027ea <arm_mat_add_f32>

    // Update covariance matrix: P = (I - K * C) * P_minus
    arm_mat_mult_f32(&mat_K, &mat_C, &mat_temp3x3B);				//K*C
 800128e:	4a0c      	ldr	r2, [pc, #48]	; (80012c0 <kalman_filter+0xfc>)
 8001290:	4913      	ldr	r1, [pc, #76]	; (80012e0 <kalman_filter+0x11c>)
 8001292:	4818      	ldr	r0, [pc, #96]	; (80012f4 <kalman_filter+0x130>)
 8001294:	f001 fe73 	bl	8002f7e <arm_mat_mult_f32>
    arm_mat_sub_f32(&eye, &mat_P_minus, &mat_temp3x3A);				//I - K*C
 8001298:	4a08      	ldr	r2, [pc, #32]	; (80012bc <kalman_filter+0xf8>)
 800129a:	490b      	ldr	r1, [pc, #44]	; (80012c8 <kalman_filter+0x104>)
 800129c:	4816      	ldr	r0, [pc, #88]	; (80012f8 <kalman_filter+0x134>)
 800129e:	f001 ff1e 	bl	80030de <arm_mat_sub_f32>
    arm_mat_mult_f32(&mat_temp3x3A, &mat_P_minus, &mat_P);			//(I - K*C)*P ===========> P estimate
 80012a2:	4a08      	ldr	r2, [pc, #32]	; (80012c4 <kalman_filter+0x100>)
 80012a4:	4908      	ldr	r1, [pc, #32]	; (80012c8 <kalman_filter+0x104>)
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <kalman_filter+0xf8>)
 80012a8:	f001 fe69 	bl	8002f7e <arm_mat_mult_f32>
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000388 	.word	0x20000388
 80012b4:	20000380 	.word	0x20000380
 80012b8:	20000378 	.word	0x20000378
 80012bc:	200003e8 	.word	0x200003e8
 80012c0:	200003f0 	.word	0x200003f0
 80012c4:	200003b0 	.word	0x200003b0
 80012c8:	200003b8 	.word	0x200003b8
 80012cc:	20000398 	.word	0x20000398
 80012d0:	200003a0 	.word	0x200003a0
 80012d4:	200003c0 	.word	0x200003c0
 80012d8:	200001f8 	.word	0x200001f8
 80012dc:	20000400 	.word	0x20000400
 80012e0:	200003c8 	.word	0x200003c8
 80012e4:	200003f8 	.word	0x200003f8
 80012e8:	20000408 	.word	0x20000408
 80012ec:	200003d8 	.word	0x200003d8
 80012f0:	200003d0 	.word	0x200003d0
 80012f4:	200003e0 	.word	0x200003e0
 80012f8:	200003a8 	.word	0x200003a8

080012fc <micros>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ //get time period
	if(htim == & htim5){
		ReadEncoderParam._micros += UINT32_MAX;
	}
}
uint64_t micros(){ //get time in micros
 80012fc:	b4b0      	push	{r4, r5, r7}
 80012fe:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+ ReadEncoderParam._micros;
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <micros+0x2c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001306:	2200      	movs	r2, #0
 8001308:	4618      	mov	r0, r3
 800130a:	4611      	mov	r1, r2
 800130c:	4b07      	ldr	r3, [pc, #28]	; (800132c <micros+0x30>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	1884      	adds	r4, r0, r2
 8001314:	eb41 0503 	adc.w	r5, r1, r3
 8001318:	4622      	mov	r2, r4
 800131a:	462b      	mov	r3, r5
}
 800131c:	4610      	mov	r0, r2
 800131e:	4619      	mov	r1, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	bcb0      	pop	{r4, r5, r7}
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	2000016c 	.word	0x2000016c
 800132c:	20000410 	.word	0x20000410

08001330 <InitReadEncoder>:

void InitReadEncoder(ReadEncoder* Read, uint32_t samplingtime)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
	Read->_micros = 0;
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	f04f 0300 	mov.w	r3, #0
 8001344:	e9c1 2300 	strd	r2, r3, [r1]
	Read->PPR = 8192;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800134e:	811a      	strh	r2, [r3, #8]
	Read->samplingTime = samplingtime;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	60da      	str	r2, [r3, #12]
	Read->MotorSetDuty = 0;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	741a      	strb	r2, [r3, #16]
	Read->Pulse_Compare = 0;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	825a      	strh	r2, [r3, #18]
	Read->DIR = 0;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	751a      	strb	r2, [r3, #20]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <QEIEncoderPositionVelocity_Update>:

void QEIEncoderPositionVelocity_Update(){
 8001374:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001378:	b084      	sub	sp, #16
 800137a:	af00      	add	r7, sp, #0
	//collect data
	QEIData.timestamp[0] = micros();
 800137c:	f7ff ffbe 	bl	80012fc <micros>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4937      	ldr	r1, [pc, #220]	; (8001464 <QEIEncoderPositionVelocity_Update+0xf0>)
 8001386:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uint32_t couterPosition = __HAL_TIM_GET_COUNTER(&htim2);
 800138a:	4b37      	ldr	r3, [pc, #220]	; (8001468 <QEIEncoderPositionVelocity_Update+0xf4>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001390:	60fb      	str	r3, [r7, #12]
	QEIData.data[0] = couterPosition;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2200      	movs	r2, #0
 8001396:	4698      	mov	r8, r3
 8001398:	4691      	mov	r9, r2
 800139a:	4b32      	ldr	r3, [pc, #200]	; (8001464 <QEIEncoderPositionVelocity_Update+0xf0>)
 800139c:	e9c3 8900 	strd	r8, r9, [r3]

	//calculation
	QEIData.QEIPosition = couterPosition % ReadEncoderParam.PPR;
 80013a0:	4b32      	ldr	r3, [pc, #200]	; (800146c <QEIEncoderPositionVelocity_Update+0xf8>)
 80013a2:	891b      	ldrh	r3, [r3, #8]
 80013a4:	461a      	mov	r2, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80013ac:	fb01 f202 	mul.w	r2, r1, r2
 80013b0:	1a9b      	subs	r3, r3, r2
 80013b2:	ee07 3a90 	vmov	s15, r3
 80013b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013ba:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <QEIEncoderPositionVelocity_Update+0xf0>)
 80013bc:	edc3 7a08 	vstr	s15, [r3, #32]

	int32_t diffPosition = QEIData.data[0] - QEIData.data[1];
 80013c0:	4b28      	ldr	r3, [pc, #160]	; (8001464 <QEIEncoderPositionVelocity_Update+0xf0>)
 80013c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c6:	4611      	mov	r1, r2
 80013c8:	4b26      	ldr	r3, [pc, #152]	; (8001464 <QEIEncoderPositionVelocity_Update+0xf0>)
 80013ca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80013ce:	4613      	mov	r3, r2
 80013d0:	1acb      	subs	r3, r1, r3
 80013d2:	60bb      	str	r3, [r7, #8]
	float difftime = (QEIData.timestamp[0] - QEIData.timestamp[1]);
 80013d4:	4b23      	ldr	r3, [pc, #140]	; (8001464 <QEIEncoderPositionVelocity_Update+0xf0>)
 80013d6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80013da:	4b22      	ldr	r3, [pc, #136]	; (8001464 <QEIEncoderPositionVelocity_Update+0xf0>)
 80013dc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80013e0:	1a84      	subs	r4, r0, r2
 80013e2:	eb61 0503 	sbc.w	r5, r1, r3
 80013e6:	4620      	mov	r0, r4
 80013e8:	4629      	mov	r1, r5
 80013ea:	f7ff fc79 	bl	8000ce0 <__aeabi_ul2f>
 80013ee:	4603      	mov	r3, r0
 80013f0:	607b      	str	r3, [r7, #4]


	//calculate
	QEIData.QEIVelocity = (diffPosition * 1000000*60.0)/(difftime*8192.0);
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	4a1e      	ldr	r2, [pc, #120]	; (8001470 <QEIEncoderPositionVelocity_Update+0xfc>)
 80013f6:	fb02 f303 	mul.w	r3, r2, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff f83e 	bl	800047c <__aeabi_i2d>
 8001400:	f04f 0200 	mov.w	r2, #0
 8001404:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <QEIEncoderPositionVelocity_Update+0x100>)
 8001406:	f7ff f8a3 	bl	8000550 <__aeabi_dmul>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4614      	mov	r4, r2
 8001410:	461d      	mov	r5, r3
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff f844 	bl	80004a0 <__aeabi_f2d>
 8001418:	f04f 0200 	mov.w	r2, #0
 800141c:	4b16      	ldr	r3, [pc, #88]	; (8001478 <QEIEncoderPositionVelocity_Update+0x104>)
 800141e:	f7ff f897 	bl	8000550 <__aeabi_dmul>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	4620      	mov	r0, r4
 8001428:	4629      	mov	r1, r5
 800142a:	f7ff f9bb 	bl	80007a4 <__aeabi_ddiv>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	f7ff fb3b 	bl	8000ab0 <__aeabi_d2f>
 800143a:	4603      	mov	r3, r0
 800143c:	4a09      	ldr	r2, [pc, #36]	; (8001464 <QEIEncoderPositionVelocity_Update+0xf0>)
 800143e:	6253      	str	r3, [r2, #36]	; 0x24

	//Delay
	QEIData.data[1] = QEIData.data[0];
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <QEIEncoderPositionVelocity_Update+0xf0>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	4907      	ldr	r1, [pc, #28]	; (8001464 <QEIEncoderPositionVelocity_Update+0xf0>)
 8001448:	e9c1 2302 	strd	r2, r3, [r1, #8]
	QEIData.timestamp[1] = QEIData.timestamp[0];
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <QEIEncoderPositionVelocity_Update+0xf0>)
 800144e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001452:	4904      	ldr	r1, [pc, #16]	; (8001464 <QEIEncoderPositionVelocity_Update+0xf0>)
 8001454:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8001458:	bf00      	nop
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001462:	bf00      	nop
 8001464:	20000428 	.word	0x20000428
 8001468:	200000dc 	.word	0x200000dc
 800146c:	20000410 	.word	0x20000410
 8001470:	000f4240 	.word	0x000f4240
 8001474:	404e0000 	.word	0x404e0000
 8001478:	40c00000 	.word	0x40c00000

0800147c <SetTrajectoryConstrainAndInit>:
 */
#include "Trajectory.h"
#include "math.h"

void SetTrajectoryConstrainAndInit(Trajectory* Tj, float32_t  vmax,float32_t  amax)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	ed87 0a02 	vstr	s0, [r7, #8]
 8001488:	edc7 0a01 	vstr	s1, [r7, #4]
	Tj->complete = 1;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2201      	movs	r2, #1
 8001490:	629a      	str	r2, [r3, #40]	; 0x28
	Tj->v_max = vmax;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	68ba      	ldr	r2, [r7, #8]
 8001496:	60da      	str	r2, [r3, #12]
	Tj->a_max = amax;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	611a      	str	r2, [r3, #16]
	Tj->final_pos = 800;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <SetTrajectoryConstrainAndInit+0x3c>)
 80014a2:	605a      	str	r2, [r3, #4]
	Tj->start_pos = 0;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f04f 0200 	mov.w	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	44480000 	.word	0x44480000

080014bc <TrajectoryGenerator>:

void TrajectoryGenerator(Trajectory* Tj)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	if(Tj->final_pos == Tj->start_pos)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	ed93 7a01 	vldr	s14, [r3, #4]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	edd3 7a00 	vldr	s15, [r3]
 80014d0:	eeb4 7a67 	vcmp.f32	s14, s15
 80014d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d8:	d103      	bne.n	80014e2 <TrajectoryGenerator+0x26>
	{
		Tj->complete = 2;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2202      	movs	r2, #2
 80014de:	629a      	str	r2, [r3, #40]	; 0x28
		}
		Tj->a_max = ncr*Tj->a_max;
	}


}
 80014e0:	e082      	b.n	80015e8 <TrajectoryGenerator+0x12c>
		Tj->complete = 0;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	629a      	str	r2, [r3, #40]	; 0x28
		Tj->displacement = Tj->final_pos - Tj->start_pos;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	ed93 7a01 	vldr	s14, [r3, #4]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	edd3 7a00 	vldr	s15, [r3]
 80014f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	edc3 7a02 	vstr	s15, [r3, #8]
		float32_t ncr = 1.0;
 80014fe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001502:	60fb      	str	r3, [r7, #12]
		if(Tj->displacement < 0)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	edd3 7a02 	vldr	s15, [r3, #8]
 800150a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800150e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001512:	d501      	bpl.n	8001518 <TrajectoryGenerator+0x5c>
			ncr = -1.0;
 8001514:	4b36      	ldr	r3, [pc, #216]	; (80015f0 <TrajectoryGenerator+0x134>)
 8001516:	60fb      	str	r3, [r7, #12]
		Tj->displacement = fabs(Tj->displacement);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	edd3 7a02 	vldr	s15, [r3, #8]
 800151e:	eef0 7ae7 	vabs.f32	s15, s15
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	edc3 7a02 	vstr	s15, [r3, #8]
		if(sqrtf(Tj->displacement/Tj->a_max) < Tj->v_max/Tj->a_max)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	ed93 7a02 	vldr	s14, [r3, #8]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	edd3 7a04 	vldr	s15, [r3, #16]
 8001534:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001538:	eeb0 0a66 	vmov.f32	s0, s13
 800153c:	f004 f93a 	bl	80057b4 <sqrtf>
 8001540:	eeb0 6a40 	vmov.f32	s12, s0
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	edd3 6a03 	vldr	s13, [r3, #12]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001550:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001554:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8001558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800155c:	d51c      	bpl.n	8001598 <TrajectoryGenerator+0xdc>
			Tj->TimeAcc = sqrtf(Tj->displacement/Tj->a_max);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	ed93 7a02 	vldr	s14, [r3, #8]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	edd3 7a04 	vldr	s15, [r3, #16]
 800156a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800156e:	eeb0 0a66 	vmov.f32	s0, s13
 8001572:	f004 f91f 	bl	80057b4 <sqrtf>
 8001576:	eef0 7a40 	vmov.f32	s15, s0
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			Tj->TotalTime = 2.0*Tj->TimeAcc;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001586:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	edc3 7a08 	vstr	s15, [r3, #32]
			Tj->profile = 0;	//Triangle
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	62da      	str	r2, [r3, #44]	; 0x2c
 8001596:	e01d      	b.n	80015d4 <TrajectoryGenerator+0x118>
			Tj->TimeAcc = Tj->v_max/Tj->a_max ;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	edd3 6a03 	vldr	s13, [r3, #12]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	ed93 7a04 	vldr	s14, [r3, #16]
 80015a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			Tj->TotalTime = Tj->TimeAcc + Tj->displacement/Tj->v_max ;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	ed93 6a02 	vldr	s12, [r3, #8]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	edd3 6a03 	vldr	s13, [r3, #12]
 80015c0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80015c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	edc3 7a08 	vstr	s15, [r3, #32]
			Tj->profile = 1;	//Trapizoid
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	62da      	str	r2, [r3, #44]	; 0x2c
		Tj->a_max = ncr*Tj->a_max;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	ed93 7a04 	vldr	s14, [r3, #16]
 80015da:	edd7 7a03 	vldr	s15, [r7, #12]
 80015de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	edc3 7a04 	vstr	s15, [r3, #16]
}
 80015e8:	bf00      	nop
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	bf800000 	.word	0xbf800000
 80015f4:	00000000 	.word	0x00000000

080015f8 <TrajectoryEvaluator>:

void TrajectoryEvaluator(Trajectory* Tj,float64_t time)
{
 80015f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015fc:	b084      	sub	sp, #16
 80015fe:	af00      	add	r7, sp, #0
 8001600:	60f8      	str	r0, [r7, #12]
 8001602:	ed87 0b00 	vstr	d0, [r7]
	switch(Tj->profile)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <TrajectoryEvaluator+0x1e>
 800160e:	2b01      	cmp	r3, #1
 8001610:	f000 8111 	beq.w	8001836 <TrajectoryEvaluator+0x23e>
 8001614:	e2de      	b.n	8001bd4 <TrajectoryEvaluator+0x5dc>
	{
	case 0:	//Triangle
		if( time <= Tj->TimeAcc)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe ff40 	bl	80004a0 <__aeabi_f2d>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001628:	f7ff fa0e 	bl	8000a48 <__aeabi_dcmple>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d046      	beq.n	80016c0 <TrajectoryEvaluator+0xc8>
		{
			Tj->current_pos = Tj->start_pos + 0.5*Tj->a_max*pow(time,2);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe ff32 	bl	80004a0 <__aeabi_f2d>
 800163c:	4604      	mov	r4, r0
 800163e:	460d      	mov	r5, r1
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe ff2b 	bl	80004a0 <__aeabi_f2d>
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	4ba6      	ldr	r3, [pc, #664]	; (80018e8 <TrajectoryEvaluator+0x2f0>)
 8001650:	f7fe ff7e 	bl	8000550 <__aeabi_dmul>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4690      	mov	r8, r2
 800165a:	4699      	mov	r9, r3
 800165c:	ed9f 1ba0 	vldr	d1, [pc, #640]	; 80018e0 <TrajectoryEvaluator+0x2e8>
 8001660:	ed97 0b00 	vldr	d0, [r7]
 8001664:	f004 f836 	bl	80056d4 <pow>
 8001668:	ec53 2b10 	vmov	r2, r3, d0
 800166c:	4640      	mov	r0, r8
 800166e:	4649      	mov	r1, r9
 8001670:	f7fe ff6e 	bl	8000550 <__aeabi_dmul>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4620      	mov	r0, r4
 800167a:	4629      	mov	r1, r5
 800167c:	f7fe fdb2 	bl	80001e4 <__adddf3>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4610      	mov	r0, r2
 8001686:	4619      	mov	r1, r3
 8001688:	f7ff fa12 	bl	8000ab0 <__aeabi_d2f>
 800168c:	4602      	mov	r2, r0
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	615a      	str	r2, [r3, #20]
			Tj->current_velo = Tj->a_max*time;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe ff02 	bl	80004a0 <__aeabi_f2d>
 800169c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016a0:	f7fe ff56 	bl	8000550 <__aeabi_dmul>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	f7ff fa00 	bl	8000ab0 <__aeabi_d2f>
 80016b0:	4602      	mov	r2, r0
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	619a      	str	r2, [r3, #24]
			Tj->current_acc = Tj->a_max;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	691a      	ldr	r2, [r3, #16]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	61da      	str	r2, [r3, #28]
			Tj->current_pos =
					Tj->start_pos + Tj->a_max*(Tj->TotalTime*Tj->TimeAcc + Tj->TotalTime*time - 0.5*pow(Tj->TotalTime,2)- pow(Tj->TimeAcc,2)-0.5*pow(time,2));
			Tj->current_velo = Tj->a_max*Tj->TotalTime - Tj->a_max*time;
			Tj->current_acc = -Tj->a_max;
		}
		break;
 80016be:	e289      	b.n	8001bd4 <TrajectoryEvaluator+0x5dc>
					Tj->start_pos + Tj->a_max*(Tj->TotalTime*Tj->TimeAcc + Tj->TotalTime*time - 0.5*pow(Tj->TotalTime,2)- pow(Tj->TimeAcc,2)-0.5*pow(time,2));
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe feeb 	bl	80004a0 <__aeabi_f2d>
 80016ca:	4604      	mov	r4, r0
 80016cc:	460d      	mov	r5, r1
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7fe fee4 	bl	80004a0 <__aeabi_f2d>
 80016d8:	4680      	mov	r8, r0
 80016da:	4689      	mov	r9, r1
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	ed93 7a08 	vldr	s14, [r3, #32]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80016e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ec:	ee17 0a90 	vmov	r0, s15
 80016f0:	f7fe fed6 	bl	80004a0 <__aeabi_f2d>
 80016f4:	4682      	mov	sl, r0
 80016f6:	468b      	mov	fp, r1
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe fecf 	bl	80004a0 <__aeabi_f2d>
 8001702:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001706:	f7fe ff23 	bl	8000550 <__aeabi_dmul>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4650      	mov	r0, sl
 8001710:	4659      	mov	r1, fp
 8001712:	f7fe fd67 	bl	80001e4 <__adddf3>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4692      	mov	sl, r2
 800171c:	469b      	mov	fp, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe febc 	bl	80004a0 <__aeabi_f2d>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	ed9f 1b6c 	vldr	d1, [pc, #432]	; 80018e0 <TrajectoryEvaluator+0x2e8>
 8001730:	ec43 2b10 	vmov	d0, r2, r3
 8001734:	f003 ffce 	bl	80056d4 <pow>
 8001738:	ec51 0b10 	vmov	r0, r1, d0
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	4b69      	ldr	r3, [pc, #420]	; (80018e8 <TrajectoryEvaluator+0x2f0>)
 8001742:	f7fe ff05 	bl	8000550 <__aeabi_dmul>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4650      	mov	r0, sl
 800174c:	4659      	mov	r1, fp
 800174e:	f7fe fd47 	bl	80001e0 <__aeabi_dsub>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4692      	mov	sl, r2
 8001758:	469b      	mov	fp, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fe9e 	bl	80004a0 <__aeabi_f2d>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	ed9f 1b5d 	vldr	d1, [pc, #372]	; 80018e0 <TrajectoryEvaluator+0x2e8>
 800176c:	ec43 2b10 	vmov	d0, r2, r3
 8001770:	f003 ffb0 	bl	80056d4 <pow>
 8001774:	ec53 2b10 	vmov	r2, r3, d0
 8001778:	4650      	mov	r0, sl
 800177a:	4659      	mov	r1, fp
 800177c:	f7fe fd30 	bl	80001e0 <__aeabi_dsub>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4692      	mov	sl, r2
 8001786:	469b      	mov	fp, r3
 8001788:	ed9f 1b55 	vldr	d1, [pc, #340]	; 80018e0 <TrajectoryEvaluator+0x2e8>
 800178c:	ed97 0b00 	vldr	d0, [r7]
 8001790:	f003 ffa0 	bl	80056d4 <pow>
 8001794:	ec51 0b10 	vmov	r0, r1, d0
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	4b52      	ldr	r3, [pc, #328]	; (80018e8 <TrajectoryEvaluator+0x2f0>)
 800179e:	f7fe fed7 	bl	8000550 <__aeabi_dmul>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4650      	mov	r0, sl
 80017a8:	4659      	mov	r1, fp
 80017aa:	f7fe fd19 	bl	80001e0 <__aeabi_dsub>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4640      	mov	r0, r8
 80017b4:	4649      	mov	r1, r9
 80017b6:	f7fe fecb 	bl	8000550 <__aeabi_dmul>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4620      	mov	r0, r4
 80017c0:	4629      	mov	r1, r5
 80017c2:	f7fe fd0f 	bl	80001e4 <__adddf3>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4610      	mov	r0, r2
 80017cc:	4619      	mov	r1, r3
 80017ce:	f7ff f96f 	bl	8000ab0 <__aeabi_d2f>
 80017d2:	4602      	mov	r2, r0
			Tj->current_pos =
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	615a      	str	r2, [r3, #20]
			Tj->current_velo = Tj->a_max*Tj->TotalTime - Tj->a_max*time;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	ed93 7a04 	vldr	s14, [r3, #16]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	edd3 7a08 	vldr	s15, [r3, #32]
 80017e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017e8:	ee17 0a90 	vmov	r0, s15
 80017ec:	f7fe fe58 	bl	80004a0 <__aeabi_f2d>
 80017f0:	4604      	mov	r4, r0
 80017f2:	460d      	mov	r5, r1
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fe51 	bl	80004a0 <__aeabi_f2d>
 80017fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001802:	f7fe fea5 	bl	8000550 <__aeabi_dmul>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4620      	mov	r0, r4
 800180c:	4629      	mov	r1, r5
 800180e:	f7fe fce7 	bl	80001e0 <__aeabi_dsub>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4610      	mov	r0, r2
 8001818:	4619      	mov	r1, r3
 800181a:	f7ff f949 	bl	8000ab0 <__aeabi_d2f>
 800181e:	4602      	mov	r2, r0
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	619a      	str	r2, [r3, #24]
			Tj->current_acc = -Tj->a_max;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	edd3 7a04 	vldr	s15, [r3, #16]
 800182a:	eef1 7a67 	vneg.f32	s15, s15
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	edc3 7a07 	vstr	s15, [r3, #28]
		break;
 8001834:	e1ce      	b.n	8001bd4 <TrajectoryEvaluator+0x5dc>

	case 1:	//Trapizoid
		if(time <= Tj->TimeAcc)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe fe30 	bl	80004a0 <__aeabi_f2d>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001848:	f7ff f8fe 	bl	8000a48 <__aeabi_dcmple>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d04c      	beq.n	80018ec <TrajectoryEvaluator+0x2f4>
		{
			Tj->current_pos = Tj->start_pos + 0.5*Tj->a_max*pow(time,2);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fe22 	bl	80004a0 <__aeabi_f2d>
 800185c:	4604      	mov	r4, r0
 800185e:	460d      	mov	r5, r1
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe fe1b 	bl	80004a0 <__aeabi_f2d>
 800186a:	f04f 0200 	mov.w	r2, #0
 800186e:	4b1e      	ldr	r3, [pc, #120]	; (80018e8 <TrajectoryEvaluator+0x2f0>)
 8001870:	f7fe fe6e 	bl	8000550 <__aeabi_dmul>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4690      	mov	r8, r2
 800187a:	4699      	mov	r9, r3
 800187c:	ed9f 1b18 	vldr	d1, [pc, #96]	; 80018e0 <TrajectoryEvaluator+0x2e8>
 8001880:	ed97 0b00 	vldr	d0, [r7]
 8001884:	f003 ff26 	bl	80056d4 <pow>
 8001888:	ec53 2b10 	vmov	r2, r3, d0
 800188c:	4640      	mov	r0, r8
 800188e:	4649      	mov	r1, r9
 8001890:	f7fe fe5e 	bl	8000550 <__aeabi_dmul>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4620      	mov	r0, r4
 800189a:	4629      	mov	r1, r5
 800189c:	f7fe fca2 	bl	80001e4 <__adddf3>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	f7ff f902 	bl	8000ab0 <__aeabi_d2f>
 80018ac:	4602      	mov	r2, r0
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	615a      	str	r2, [r3, #20]
			Tj->current_velo = Tj->a_max*time;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fdf2 	bl	80004a0 <__aeabi_f2d>
 80018bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018c0:	f7fe fe46 	bl	8000550 <__aeabi_dmul>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4610      	mov	r0, r2
 80018ca:	4619      	mov	r1, r3
 80018cc:	f7ff f8f0 	bl	8000ab0 <__aeabi_d2f>
 80018d0:	4602      	mov	r2, r0
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	619a      	str	r2, [r3, #24]
			Tj->current_acc = Tj->a_max;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	691a      	ldr	r2, [r3, #16]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	61da      	str	r2, [r3, #28]
			Tj->current_pos =
				Tj->start_pos + Tj->a_max*(Tj->TotalTime*Tj->TimeAcc + Tj->TotalTime*time - 0.5*pow(Tj->TotalTime,2)- pow(Tj->TimeAcc,2)-0.5*pow(time,2));
			Tj->current_velo = Tj->a_max*Tj->TotalTime - Tj->a_max*time;
			Tj->current_acc = -Tj->a_max;
		}
		break;
 80018de:	e178      	b.n	8001bd2 <TrajectoryEvaluator+0x5da>
 80018e0:	00000000 	.word	0x00000000
 80018e4:	40000000 	.word	0x40000000
 80018e8:	3fe00000 	.word	0x3fe00000
		else if ((Tj->TimeAcc < time) && (time < Tj->TotalTime - Tj->TimeAcc))
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fdd5 	bl	80004a0 <__aeabi_f2d>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018fe:	f7ff f8b7 	bl	8000a70 <__aeabi_dcmpgt>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 8085 	beq.w	8001a14 <TrajectoryEvaluator+0x41c>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001916:	ee77 7a67 	vsub.f32	s15, s14, s15
 800191a:	ee17 0a90 	vmov	r0, s15
 800191e:	f7fe fdbf 	bl	80004a0 <__aeabi_f2d>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	e9d7 0100 	ldrd	r0, r1, [r7]
 800192a:	f7ff f883 	bl	8000a34 <__aeabi_dcmplt>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d06f      	beq.n	8001a14 <TrajectoryEvaluator+0x41c>
			Tj->current_pos = Tj->start_pos + 0.5*Tj->a_max*pow(Tj->TimeAcc,2) + Tj->a_max*Tj->TimeAcc*(time - Tj->TimeAcc);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fdb1 	bl	80004a0 <__aeabi_f2d>
 800193e:	4604      	mov	r4, r0
 8001940:	460d      	mov	r5, r1
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fdaa 	bl	80004a0 <__aeabi_f2d>
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	4bb7      	ldr	r3, [pc, #732]	; (8001c30 <TrajectoryEvaluator+0x638>)
 8001952:	f7fe fdfd 	bl	8000550 <__aeabi_dmul>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4690      	mov	r8, r2
 800195c:	4699      	mov	r9, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fd9c 	bl	80004a0 <__aeabi_f2d>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	ed9f 1bae 	vldr	d1, [pc, #696]	; 8001c28 <TrajectoryEvaluator+0x630>
 8001970:	ec43 2b10 	vmov	d0, r2, r3
 8001974:	f003 feae 	bl	80056d4 <pow>
 8001978:	ec53 2b10 	vmov	r2, r3, d0
 800197c:	4640      	mov	r0, r8
 800197e:	4649      	mov	r1, r9
 8001980:	f7fe fde6 	bl	8000550 <__aeabi_dmul>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4620      	mov	r0, r4
 800198a:	4629      	mov	r1, r5
 800198c:	f7fe fc2a 	bl	80001e4 <__adddf3>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4690      	mov	r8, r2
 8001996:	4699      	mov	r9, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	ed93 7a04 	vldr	s14, [r3, #16]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80019a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a8:	ee17 0a90 	vmov	r0, s15
 80019ac:	f7fe fd78 	bl	80004a0 <__aeabi_f2d>
 80019b0:	4604      	mov	r4, r0
 80019b2:	460d      	mov	r5, r1
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fd71 	bl	80004a0 <__aeabi_f2d>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019c6:	f7fe fc0b 	bl	80001e0 <__aeabi_dsub>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	4620      	mov	r0, r4
 80019d0:	4629      	mov	r1, r5
 80019d2:	f7fe fdbd 	bl	8000550 <__aeabi_dmul>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4640      	mov	r0, r8
 80019dc:	4649      	mov	r1, r9
 80019de:	f7fe fc01 	bl	80001e4 <__adddf3>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	f7ff f861 	bl	8000ab0 <__aeabi_d2f>
 80019ee:	4602      	mov	r2, r0
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	615a      	str	r2, [r3, #20]
			Tj->current_velo = Tj->a_max*Tj->TimeAcc;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	ed93 7a04 	vldr	s14, [r3, #16]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	edc3 7a06 	vstr	s15, [r3, #24]
			Tj->current_acc = 0;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	61da      	str	r2, [r3, #28]
		break;
 8001a12:	e0de      	b.n	8001bd2 <TrajectoryEvaluator+0x5da>
		else if ((Tj->TotalTime - Tj->TimeAcc < time)&&(time < Tj->TotalTime))
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	ed93 7a08 	vldr	s14, [r3, #32]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001a20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a24:	ee17 0a90 	vmov	r0, s15
 8001a28:	f7fe fd3a 	bl	80004a0 <__aeabi_f2d>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a34:	f7ff f81c 	bl	8000a70 <__aeabi_dcmpgt>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d100      	bne.n	8001a40 <TrajectoryEvaluator+0x448>
		break;
 8001a3e:	e0c8      	b.n	8001bd2 <TrajectoryEvaluator+0x5da>
		else if ((Tj->TotalTime - Tj->TimeAcc < time)&&(time < Tj->TotalTime))
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fd2b 	bl	80004a0 <__aeabi_f2d>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a52:	f7fe ffef 	bl	8000a34 <__aeabi_dcmplt>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d100      	bne.n	8001a5e <TrajectoryEvaluator+0x466>
		break;
 8001a5c:	e0b9      	b.n	8001bd2 <TrajectoryEvaluator+0x5da>
				Tj->start_pos + Tj->a_max*(Tj->TotalTime*Tj->TimeAcc + Tj->TotalTime*time - 0.5*pow(Tj->TotalTime,2)- pow(Tj->TimeAcc,2)-0.5*pow(time,2));
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fd1c 	bl	80004a0 <__aeabi_f2d>
 8001a68:	4604      	mov	r4, r0
 8001a6a:	460d      	mov	r5, r1
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fd15 	bl	80004a0 <__aeabi_f2d>
 8001a76:	4680      	mov	r8, r0
 8001a78:	4689      	mov	r9, r1
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a8a:	ee17 0a90 	vmov	r0, s15
 8001a8e:	f7fe fd07 	bl	80004a0 <__aeabi_f2d>
 8001a92:	4682      	mov	sl, r0
 8001a94:	468b      	mov	fp, r1
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe fd00 	bl	80004a0 <__aeabi_f2d>
 8001aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001aa4:	f7fe fd54 	bl	8000550 <__aeabi_dmul>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4650      	mov	r0, sl
 8001aae:	4659      	mov	r1, fp
 8001ab0:	f7fe fb98 	bl	80001e4 <__adddf3>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4692      	mov	sl, r2
 8001aba:	469b      	mov	fp, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fced 	bl	80004a0 <__aeabi_f2d>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	ed9f 1b57 	vldr	d1, [pc, #348]	; 8001c28 <TrajectoryEvaluator+0x630>
 8001ace:	ec43 2b10 	vmov	d0, r2, r3
 8001ad2:	f003 fdff 	bl	80056d4 <pow>
 8001ad6:	ec51 0b10 	vmov	r0, r1, d0
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	4b54      	ldr	r3, [pc, #336]	; (8001c30 <TrajectoryEvaluator+0x638>)
 8001ae0:	f7fe fd36 	bl	8000550 <__aeabi_dmul>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4650      	mov	r0, sl
 8001aea:	4659      	mov	r1, fp
 8001aec:	f7fe fb78 	bl	80001e0 <__aeabi_dsub>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4692      	mov	sl, r2
 8001af6:	469b      	mov	fp, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe fccf 	bl	80004a0 <__aeabi_f2d>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	ed9f 1b48 	vldr	d1, [pc, #288]	; 8001c28 <TrajectoryEvaluator+0x630>
 8001b0a:	ec43 2b10 	vmov	d0, r2, r3
 8001b0e:	f003 fde1 	bl	80056d4 <pow>
 8001b12:	ec53 2b10 	vmov	r2, r3, d0
 8001b16:	4650      	mov	r0, sl
 8001b18:	4659      	mov	r1, fp
 8001b1a:	f7fe fb61 	bl	80001e0 <__aeabi_dsub>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	4692      	mov	sl, r2
 8001b24:	469b      	mov	fp, r3
 8001b26:	ed9f 1b40 	vldr	d1, [pc, #256]	; 8001c28 <TrajectoryEvaluator+0x630>
 8001b2a:	ed97 0b00 	vldr	d0, [r7]
 8001b2e:	f003 fdd1 	bl	80056d4 <pow>
 8001b32:	ec51 0b10 	vmov	r0, r1, d0
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	4b3d      	ldr	r3, [pc, #244]	; (8001c30 <TrajectoryEvaluator+0x638>)
 8001b3c:	f7fe fd08 	bl	8000550 <__aeabi_dmul>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4650      	mov	r0, sl
 8001b46:	4659      	mov	r1, fp
 8001b48:	f7fe fb4a 	bl	80001e0 <__aeabi_dsub>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4640      	mov	r0, r8
 8001b52:	4649      	mov	r1, r9
 8001b54:	f7fe fcfc 	bl	8000550 <__aeabi_dmul>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4620      	mov	r0, r4
 8001b5e:	4629      	mov	r1, r5
 8001b60:	f7fe fb40 	bl	80001e4 <__adddf3>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4610      	mov	r0, r2
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	f7fe ffa0 	bl	8000ab0 <__aeabi_d2f>
 8001b70:	4602      	mov	r2, r0
			Tj->current_pos =
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	615a      	str	r2, [r3, #20]
			Tj->current_velo = Tj->a_max*Tj->TotalTime - Tj->a_max*time;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b86:	ee17 0a90 	vmov	r0, s15
 8001b8a:	f7fe fc89 	bl	80004a0 <__aeabi_f2d>
 8001b8e:	4604      	mov	r4, r0
 8001b90:	460d      	mov	r5, r1
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fc82 	bl	80004a0 <__aeabi_f2d>
 8001b9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ba0:	f7fe fcd6 	bl	8000550 <__aeabi_dmul>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4620      	mov	r0, r4
 8001baa:	4629      	mov	r1, r5
 8001bac:	f7fe fb18 	bl	80001e0 <__aeabi_dsub>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f7fe ff7a 	bl	8000ab0 <__aeabi_d2f>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	619a      	str	r2, [r3, #24]
			Tj->current_acc = -Tj->a_max;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001bc8:	eef1 7a67 	vneg.f32	s15, s15
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	edc3 7a07 	vstr	s15, [r3, #28]
		break;
 8001bd2:	bf00      	nop
	}
	if(time >= Tj->TotalTime)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fc61 	bl	80004a0 <__aeabi_f2d>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001be6:	f7fe ff39 	bl	8000a5c <__aeabi_dcmpge>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d100      	bne.n	8001bf2 <TrajectoryEvaluator+0x5fa>
		Tj->start_pos = Tj->final_pos;
		Tj->current_pos = Tj->final_pos;
		Tj->current_velo = 0;
		Tj->current_acc = 0;
	}
}
 8001bf0:	e012      	b.n	8001c18 <TrajectoryEvaluator+0x620>
		Tj->complete = 2;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	629a      	str	r2, [r3, #40]	; 0x28
		Tj->start_pos = Tj->final_pos;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	601a      	str	r2, [r3, #0]
		Tj->current_pos = Tj->final_pos;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	615a      	str	r2, [r3, #20]
		Tj->current_velo = 0;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
		Tj->current_acc = 0;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	61da      	str	r2, [r3, #28]
}
 8001c18:	bf00      	nop
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c22:	bf00      	nop
 8001c24:	f3af 8000 	nop.w
 8001c28:	00000000 	.word	0x00000000
 8001c2c:	40000000 	.word	0x40000000
 8001c30:	3fe00000 	.word	0x3fe00000
 8001c34:	00000000 	.word	0x00000000

08001c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c40:	f001 faca 	bl	80031d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c44:	f000 f9a6 	bl	8001f94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c48:	f000 fbac 	bl	80023a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001c4c:	f000 fb80 	bl	8002350 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001c50:	f000 fa0a 	bl	8002068 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001c54:	f000 fa8c 	bl	8002170 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001c58:	f000 fb2c 	bl	80022b4 <MX_TIM5_Init>
  MX_TIM3_Init();-
 8001c5c:	f000 fadc 	bl	8002218 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);//Start PWM
 8001c60:	2100      	movs	r1, #0
 8001c62:	4897      	ldr	r0, [pc, #604]	; (8001ec0 <main+0x288>)
 8001c64:	f002 fb48 	bl	80042f8 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2); //Start QEI
 8001c68:	2104      	movs	r1, #4
 8001c6a:	4896      	ldr	r0, [pc, #600]	; (8001ec4 <main+0x28c>)
 8001c6c:	f002 fc9a 	bl	80045a4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8001c70:	4895      	ldr	r0, [pc, #596]	; (8001ec8 <main+0x290>)
 8001c72:	f002 fa8f 	bl	8004194 <HAL_TIM_Base_Start_IT>

  InitKalmanStruct(&KF,Var_Q,Var_R);
 8001c76:	4b95      	ldr	r3, [pc, #596]	; (8001ecc <main+0x294>)
 8001c78:	edd3 7a00 	vldr	s15, [r3]
 8001c7c:	4b94      	ldr	r3, [pc, #592]	; (8001ed0 <main+0x298>)
 8001c7e:	ed93 7a00 	vldr	s14, [r3]
 8001c82:	eef0 0a47 	vmov.f32	s1, s14
 8001c86:	eeb0 0a67 	vmov.f32	s0, s15
 8001c8a:	4892      	ldr	r0, [pc, #584]	; (8001ed4 <main+0x29c>)
 8001c8c:	f7ff f9f0 	bl	8001070 <InitKalmanStruct>
  InitReadEncoder(&ReadEncoderParam, 1000);
 8001c90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c94:	4890      	ldr	r0, [pc, #576]	; (8001ed8 <main+0x2a0>)
 8001c96:	f7ff fb4b 	bl	8001330 <InitReadEncoder>
  SetTrajectoryConstrainAndInit(&Traj, 900, 1400);
 8001c9a:	eddf 0a90 	vldr	s1, [pc, #576]	; 8001edc <main+0x2a4>
 8001c9e:	ed9f 0a90 	vldr	s0, [pc, #576]	; 8001ee0 <main+0x2a8>
 8001ca2:	4890      	ldr	r0, [pc, #576]	; (8001ee4 <main+0x2ac>)
 8001ca4:	f7ff fbea 	bl	800147c <SetTrajectoryConstrainAndInit>


  arm_mat_init_f32(&mat_A, 3, 3,KF.A);//3x3
 8001ca8:	4b8f      	ldr	r3, [pc, #572]	; (8001ee8 <main+0x2b0>)
 8001caa:	2203      	movs	r2, #3
 8001cac:	2103      	movs	r1, #3
 8001cae:	488f      	ldr	r0, [pc, #572]	; (8001eec <main+0x2b4>)
 8001cb0:	f000 fdd6 	bl	8002860 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_x_hat, 3, 1, KF.x_hat);
 8001cb4:	4b87      	ldr	r3, [pc, #540]	; (8001ed4 <main+0x29c>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	2103      	movs	r1, #3
 8001cba:	488d      	ldr	r0, [pc, #564]	; (8001ef0 <main+0x2b8>)
 8001cbc:	f000 fdd0 	bl	8002860 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_x_hat_minus, 3, 1, KF.x_hat_minus);
 8001cc0:	4b8c      	ldr	r3, [pc, #560]	; (8001ef4 <main+0x2bc>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	2103      	movs	r1, #3
 8001cc6:	488c      	ldr	r0, [pc, #560]	; (8001ef8 <main+0x2c0>)
 8001cc8:	f000 fdca 	bl	8002860 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_B, 3, 1, KF.B);
 8001ccc:	4b8b      	ldr	r3, [pc, #556]	; (8001efc <main+0x2c4>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	2103      	movs	r1, #3
 8001cd2:	488b      	ldr	r0, [pc, #556]	; (8001f00 <main+0x2c8>)
 8001cd4:	f000 fdc4 	bl	8002860 <arm_mat_init_f32>
  //arm_mat_init_f32(&mat_u, 1, 1, NULL);  // Set the input control vector if needed
  arm_mat_init_f32(&mat_P, 3, 3, KF.P);//3x3
 8001cd8:	4b8a      	ldr	r3, [pc, #552]	; (8001f04 <main+0x2cc>)
 8001cda:	2203      	movs	r2, #3
 8001cdc:	2103      	movs	r1, #3
 8001cde:	488a      	ldr	r0, [pc, #552]	; (8001f08 <main+0x2d0>)
 8001ce0:	f000 fdbe 	bl	8002860 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_P_minus, 3, 3, KF.P_minus);//3x3
 8001ce4:	4b89      	ldr	r3, [pc, #548]	; (8001f0c <main+0x2d4>)
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	2103      	movs	r1, #3
 8001cea:	4889      	ldr	r0, [pc, #548]	; (8001f10 <main+0x2d8>)
 8001cec:	f000 fdb8 	bl	8002860 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_Q, 3, 3,KF.Q);//3x3
 8001cf0:	4b88      	ldr	r3, [pc, #544]	; (8001f14 <main+0x2dc>)
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	2103      	movs	r1, #3
 8001cf6:	4888      	ldr	r0, [pc, #544]	; (8001f18 <main+0x2e0>)
 8001cf8:	f000 fdb2 	bl	8002860 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_C, 1, 3, KF.C);//1x3
 8001cfc:	4b87      	ldr	r3, [pc, #540]	; (8001f1c <main+0x2e4>)
 8001cfe:	2203      	movs	r2, #3
 8001d00:	2101      	movs	r1, #1
 8001d02:	4887      	ldr	r0, [pc, #540]	; (8001f20 <main+0x2e8>)
 8001d04:	f000 fdac 	bl	8002860 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_R, 1, 1, &KF.R);//1x1
 8001d08:	4b86      	ldr	r3, [pc, #536]	; (8001f24 <main+0x2ec>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	4886      	ldr	r0, [pc, #536]	; (8001f28 <main+0x2f0>)
 8001d10:	f000 fda6 	bl	8002860 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_S, 1, 1, KF.S);//1x1
 8001d14:	4b85      	ldr	r3, [pc, #532]	; (8001f2c <main+0x2f4>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	2101      	movs	r1, #1
 8001d1a:	4885      	ldr	r0, [pc, #532]	; (8001f30 <main+0x2f8>)
 8001d1c:	f000 fda0 	bl	8002860 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_K, 3, 1, KF.K);//3x1
 8001d20:	4b84      	ldr	r3, [pc, #528]	; (8001f34 <main+0x2fc>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	2103      	movs	r1, #3
 8001d26:	4884      	ldr	r0, [pc, #528]	; (8001f38 <main+0x300>)
 8001d28:	f000 fd9a 	bl	8002860 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_temp3x3A, 3, 3, KF.temp3x3A);//3x3
 8001d2c:	4b83      	ldr	r3, [pc, #524]	; (8001f3c <main+0x304>)
 8001d2e:	2203      	movs	r2, #3
 8001d30:	2103      	movs	r1, #3
 8001d32:	4883      	ldr	r0, [pc, #524]	; (8001f40 <main+0x308>)
 8001d34:	f000 fd94 	bl	8002860 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_temp3x3B, 3, 3, KF.temp3x3B);//3x3
 8001d38:	4b82      	ldr	r3, [pc, #520]	; (8001f44 <main+0x30c>)
 8001d3a:	2203      	movs	r2, #3
 8001d3c:	2103      	movs	r1, #3
 8001d3e:	4882      	ldr	r0, [pc, #520]	; (8001f48 <main+0x310>)
 8001d40:	f000 fd8e 	bl	8002860 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_temp3x1, 3, 1, KF.temp3x1);//3x1
 8001d44:	4b81      	ldr	r3, [pc, #516]	; (8001f4c <main+0x314>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	2103      	movs	r1, #3
 8001d4a:	4881      	ldr	r0, [pc, #516]	; (8001f50 <main+0x318>)
 8001d4c:	f000 fd88 	bl	8002860 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_temp1x3, 1, 3, KF.temp1x3);//1x3
 8001d50:	4b80      	ldr	r3, [pc, #512]	; (8001f54 <main+0x31c>)
 8001d52:	2203      	movs	r2, #3
 8001d54:	2101      	movs	r1, #1
 8001d56:	4880      	ldr	r0, [pc, #512]	; (8001f58 <main+0x320>)
 8001d58:	f000 fd82 	bl	8002860 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_temp1x1, 1, 1, &KF.temp1x1);//1x1
 8001d5c:	4b7f      	ldr	r3, [pc, #508]	; (8001f5c <main+0x324>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	2101      	movs	r1, #1
 8001d62:	487f      	ldr	r0, [pc, #508]	; (8001f60 <main+0x328>)
 8001d64:	f000 fd7c 	bl	8002860 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_G, 3, 1, KF.G);//3x1
 8001d68:	4b7e      	ldr	r3, [pc, #504]	; (8001f64 <main+0x32c>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	2103      	movs	r1, #3
 8001d6e:	487e      	ldr	r0, [pc, #504]	; (8001f68 <main+0x330>)
 8001d70:	f000 fd76 	bl	8002860 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_GT, 1, 3, KF.GT);//1x3
 8001d74:	4b7d      	ldr	r3, [pc, #500]	; (8001f6c <main+0x334>)
 8001d76:	2203      	movs	r2, #3
 8001d78:	2101      	movs	r1, #1
 8001d7a:	487d      	ldr	r0, [pc, #500]	; (8001f70 <main+0x338>)
 8001d7c:	f000 fd70 	bl	8002860 <arm_mat_init_f32>
  arm_mat_init_f32(&eye, 3, 3, KF.I);//1x3
 8001d80:	4b7c      	ldr	r3, [pc, #496]	; (8001f74 <main+0x33c>)
 8001d82:	2203      	movs	r2, #3
 8001d84:	2103      	movs	r1, #3
 8001d86:	487c      	ldr	r0, [pc, #496]	; (8001f78 <main+0x340>)
 8001d88:	f000 fd6a 	bl	8002860 <arm_mat_init_f32>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint64_t timestamp = 0;

	  int64_t currentTime = micros();
 8001d8c:	f7ff fab6 	bl	80012fc <micros>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	e9c7 2300 	strd	r2, r3, [r7]
	  if(currentTime > timestamp)
 8001d98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d9c:	4977      	ldr	r1, [pc, #476]	; (8001f7c <main+0x344>)
 8001d9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001da2:	4290      	cmp	r0, r2
 8001da4:	eb71 0303 	sbcs.w	r3, r1, r3
 8001da8:	d26c      	bcs.n	8001e84 <main+0x24c>
	  {
		  timestamp = currentTime + ReadEncoderParam.samplingTime;
 8001daa:	4b4b      	ldr	r3, [pc, #300]	; (8001ed8 <main+0x2a0>)
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	461c      	mov	r4, r3
 8001db2:	4615      	mov	r5, r2
 8001db4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001db8:	eb14 0802 	adds.w	r8, r4, r2
 8001dbc:	eb45 0903 	adc.w	r9, r5, r3
 8001dc0:	4642      	mov	r2, r8
 8001dc2:	464b      	mov	r3, r9
 8001dc4:	496d      	ldr	r1, [pc, #436]	; (8001f7c <main+0x344>)
 8001dc6:	e9c1 2300 	strd	r2, r3, [r1]
		  switch(Traj.complete)
 8001dca:	4b46      	ldr	r3, [pc, #280]	; (8001ee4 <main+0x2ac>)
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d033      	beq.n	8001e3a <main+0x202>
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	dc40      	bgt.n	8001e58 <main+0x220>
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00c      	beq.n	8001df4 <main+0x1bc>
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d13c      	bne.n	8001e58 <main+0x220>
		  {
		  case 1:	//complete
			  time = 0;
 8001dde:	4968      	ldr	r1, [pc, #416]	; (8001f80 <main+0x348>)
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	f04f 0300 	mov.w	r3, #0
 8001de8:	e9c1 2300 	strd	r2, r3, [r1]
			  TrajectoryGenerator(&Traj);
 8001dec:	483d      	ldr	r0, [pc, #244]	; (8001ee4 <main+0x2ac>)
 8001dee:	f7ff fb65 	bl	80014bc <TrajectoryGenerator>
			  break;
 8001df2:	e031      	b.n	8001e58 <main+0x220>
		  case 0:	//incomplete
			  TrajectoryEvaluator(&Traj,time);
 8001df4:	4b62      	ldr	r3, [pc, #392]	; (8001f80 <main+0x348>)
 8001df6:	ed93 7b00 	vldr	d7, [r3]
 8001dfa:	eeb0 0a47 	vmov.f32	s0, s14
 8001dfe:	eef0 0a67 	vmov.f32	s1, s15
 8001e02:	4838      	ldr	r0, [pc, #224]	; (8001ee4 <main+0x2ac>)
 8001e04:	f7ff fbf8 	bl	80015f8 <TrajectoryEvaluator>
			  time += ReadEncoderParam.samplingTime*0.000001;
 8001e08:	4b33      	ldr	r3, [pc, #204]	; (8001ed8 <main+0x2a0>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe fb25 	bl	800045c <__aeabi_ui2d>
 8001e12:	a329      	add	r3, pc, #164	; (adr r3, 8001eb8 <main+0x280>)
 8001e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e18:	f7fe fb9a 	bl	8000550 <__aeabi_dmul>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4610      	mov	r0, r2
 8001e22:	4619      	mov	r1, r3
 8001e24:	4b56      	ldr	r3, [pc, #344]	; (8001f80 <main+0x348>)
 8001e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2a:	f7fe f9db 	bl	80001e4 <__adddf3>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4953      	ldr	r1, [pc, #332]	; (8001f80 <main+0x348>)
 8001e34:	e9c1 2300 	strd	r2, r3, [r1]
			  break;
 8001e38:	e00e      	b.n	8001e58 <main+0x220>
		  case 2:	//idle
			  if(Traj.final_pos != Traj.start_pos)
 8001e3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ee4 <main+0x2ac>)
 8001e3c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e40:	4b28      	ldr	r3, [pc, #160]	; (8001ee4 <main+0x2ac>)
 8001e42:	edd3 7a00 	vldr	s15, [r3]
 8001e46:	eeb4 7a67 	vcmp.f32	s14, s15
 8001e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e4e:	d002      	beq.n	8001e56 <main+0x21e>
			  	{
				  Traj.complete = 1;
 8001e50:	4b24      	ldr	r3, [pc, #144]	; (8001ee4 <main+0x2ac>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	629a      	str	r2, [r3, #40]	; 0x28
			  	}
			  break;
 8001e56:	bf00      	nop
		  }
//		  TrajectoryGenerator(&Traj);
//		  TrajectoryEvaluator(&Traj,time);


		  QEIEncoderPositionVelocity_Update();
 8001e58:	f7ff fa8c 	bl	8001374 <QEIEncoderPositionVelocity_Update>
		  ReadPos = __HAL_TIM_GET_COUNTER(&htim2);
 8001e5c:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <main+0x28c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	ee07 3a90 	vmov	s15, r3
 8001e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e6a:	4b46      	ldr	r3, [pc, #280]	; (8001f84 <main+0x34c>)
 8001e6c:	edc3 7a00 	vstr	s15, [r3]
		  KF.z = QEIData.QEIVelocity;
 8001e70:	4b45      	ldr	r3, [pc, #276]	; (8001f88 <main+0x350>)
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	4a17      	ldr	r2, [pc, #92]	; (8001ed4 <main+0x29c>)
 8001e76:	65d3      	str	r3, [r2, #92]	; 0x5c
		  kalman_filter();
 8001e78:	f7ff f9a4 	bl	80011c4 <kalman_filter>
		  ZEstimateVelocity = KF.x_hat[1];
 8001e7c:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <main+0x29c>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	4a42      	ldr	r2, [pc, #264]	; (8001f8c <main+0x354>)
 8001e82:	6013      	str	r3, [r2, #0]
	  }
	  //--------------------------------------------------------------------PWM
	  ReadEncoderParam.Pulse_Compare = ReadEncoderParam.MotorSetDuty * 10;
 8001e84:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <main+0x2a0>)
 8001e86:	7c1b      	ldrb	r3, [r3, #16]
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	0092      	lsls	r2, r2, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <main+0x2a0>)
 8001e96:	825a      	strh	r2, [r3, #18]
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,ReadEncoderParam.Pulse_Compare);
 8001e98:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <main+0x2a0>)
 8001e9a:	8a5a      	ldrh	r2, [r3, #18]
 8001e9c:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <main+0x288>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, ReadEncoderParam.DIR);
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <main+0x2a0>)
 8001ea4:	7d1b      	ldrb	r3, [r3, #20]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eac:	4838      	ldr	r0, [pc, #224]	; (8001f90 <main+0x358>)
 8001eae:	f001 fc6f 	bl	8003790 <HAL_GPIO_WritePin>
  {
 8001eb2:	e76b      	b.n	8001d8c <main+0x154>
 8001eb4:	f3af 8000 	nop.w
 8001eb8:	a0b5ed8d 	.word	0xa0b5ed8d
 8001ebc:	3eb0c6f7 	.word	0x3eb0c6f7
 8001ec0:	20000094 	.word	0x20000094
 8001ec4:	200000dc 	.word	0x200000dc
 8001ec8:	2000016c 	.word	0x2000016c
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	20000004 	.word	0x20000004
 8001ed4:	200001f8 	.word	0x200001f8
 8001ed8:	20000410 	.word	0x20000410
 8001edc:	44af0000 	.word	0x44af0000
 8001ee0:	44610000 	.word	0x44610000
 8001ee4:	20000458 	.word	0x20000458
 8001ee8:	20000258 	.word	0x20000258
 8001eec:	20000378 	.word	0x20000378
 8001ef0:	20000380 	.word	0x20000380
 8001ef4:	200002d4 	.word	0x200002d4
 8001ef8:	20000388 	.word	0x20000388
 8001efc:	2000027c 	.word	0x2000027c
 8001f00:	20000390 	.word	0x20000390
 8001f04:	20000204 	.word	0x20000204
 8001f08:	200003b0 	.word	0x200003b0
 8001f0c:	200002e0 	.word	0x200002e0
 8001f10:	200003b8 	.word	0x200003b8
 8001f14:	20000228 	.word	0x20000228
 8001f18:	200003c0 	.word	0x200003c0
 8001f1c:	20000288 	.word	0x20000288
 8001f20:	200003c8 	.word	0x200003c8
 8001f24:	2000024c 	.word	0x2000024c
 8001f28:	200003d0 	.word	0x200003d0
 8001f2c:	20000304 	.word	0x20000304
 8001f30:	200003d8 	.word	0x200003d8
 8001f34:	20000308 	.word	0x20000308
 8001f38:	200003e0 	.word	0x200003e0
 8001f3c:	20000314 	.word	0x20000314
 8001f40:	200003e8 	.word	0x200003e8
 8001f44:	20000338 	.word	0x20000338
 8001f48:	200003f0 	.word	0x200003f0
 8001f4c:	2000035c 	.word	0x2000035c
 8001f50:	200003f8 	.word	0x200003f8
 8001f54:	20000368 	.word	0x20000368
 8001f58:	20000400 	.word	0x20000400
 8001f5c:	20000374 	.word	0x20000374
 8001f60:	20000408 	.word	0x20000408
 8001f64:	20000298 	.word	0x20000298
 8001f68:	200003a0 	.word	0x200003a0
 8001f6c:	200002a4 	.word	0x200002a4
 8001f70:	20000398 	.word	0x20000398
 8001f74:	200002b0 	.word	0x200002b0
 8001f78:	200003a8 	.word	0x200003a8
 8001f7c:	20000490 	.word	0x20000490
 8001f80:	20000488 	.word	0x20000488
 8001f84:	20000450 	.word	0x20000450
 8001f88:	20000428 	.word	0x20000428
 8001f8c:	20000454 	.word	0x20000454
 8001f90:	40020400 	.word	0x40020400

08001f94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b094      	sub	sp, #80	; 0x50
 8001f98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f9a:	f107 0320 	add.w	r3, r7, #32
 8001f9e:	2230      	movs	r2, #48	; 0x30
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f003 fb8e 	bl	80056c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fa8:	f107 030c 	add.w	r3, r7, #12
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	4b28      	ldr	r3, [pc, #160]	; (8002060 <SystemClock_Config+0xcc>)
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	4a27      	ldr	r2, [pc, #156]	; (8002060 <SystemClock_Config+0xcc>)
 8001fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc8:	4b25      	ldr	r3, [pc, #148]	; (8002060 <SystemClock_Config+0xcc>)
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	607b      	str	r3, [r7, #4]
 8001fd8:	4b22      	ldr	r3, [pc, #136]	; (8002064 <SystemClock_Config+0xd0>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a21      	ldr	r2, [pc, #132]	; (8002064 <SystemClock_Config+0xd0>)
 8001fde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fe2:	6013      	str	r3, [r2, #0]
 8001fe4:	4b1f      	ldr	r3, [pc, #124]	; (8002064 <SystemClock_Config+0xd0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fec:	607b      	str	r3, [r7, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ff8:	2310      	movs	r3, #16
 8001ffa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002000:	2300      	movs	r3, #0
 8002002:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002004:	2310      	movs	r3, #16
 8002006:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002008:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800200c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800200e:	2304      	movs	r3, #4
 8002010:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002012:	2304      	movs	r3, #4
 8002014:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002016:	f107 0320 	add.w	r3, r7, #32
 800201a:	4618      	mov	r0, r3
 800201c:	f001 fbd2 	bl	80037c4 <HAL_RCC_OscConfig>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002026:	f000 fa2b 	bl	8002480 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800202a:	230f      	movs	r3, #15
 800202c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800202e:	2302      	movs	r3, #2
 8002030:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002036:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800203a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800203c:	2300      	movs	r3, #0
 800203e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002040:	f107 030c 	add.w	r3, r7, #12
 8002044:	2102      	movs	r1, #2
 8002046:	4618      	mov	r0, r3
 8002048:	f001 fe34 	bl	8003cb4 <HAL_RCC_ClockConfig>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002052:	f000 fa15 	bl	8002480 <Error_Handler>
  }
}
 8002056:	bf00      	nop
 8002058:	3750      	adds	r7, #80	; 0x50
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800
 8002064:	40007000 	.word	0x40007000

08002068 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b092      	sub	sp, #72	; 0x48
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800206e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
 8002088:	615a      	str	r2, [r3, #20]
 800208a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800208c:	1d3b      	adds	r3, r7, #4
 800208e:	2220      	movs	r2, #32
 8002090:	2100      	movs	r1, #0
 8002092:	4618      	mov	r0, r3
 8002094:	f003 fb16 	bl	80056c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002098:	4b33      	ldr	r3, [pc, #204]	; (8002168 <MX_TIM1_Init+0x100>)
 800209a:	4a34      	ldr	r2, [pc, #208]	; (800216c <MX_TIM1_Init+0x104>)
 800209c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 800209e:	4b32      	ldr	r3, [pc, #200]	; (8002168 <MX_TIM1_Init+0x100>)
 80020a0:	2253      	movs	r2, #83	; 0x53
 80020a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a4:	4b30      	ldr	r3, [pc, #192]	; (8002168 <MX_TIM1_Init+0x100>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80020aa:	4b2f      	ldr	r3, [pc, #188]	; (8002168 <MX_TIM1_Init+0x100>)
 80020ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b2:	4b2d      	ldr	r3, [pc, #180]	; (8002168 <MX_TIM1_Init+0x100>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020b8:	4b2b      	ldr	r3, [pc, #172]	; (8002168 <MX_TIM1_Init+0x100>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020be:	4b2a      	ldr	r3, [pc, #168]	; (8002168 <MX_TIM1_Init+0x100>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020c4:	4828      	ldr	r0, [pc, #160]	; (8002168 <MX_TIM1_Init+0x100>)
 80020c6:	f002 f8c7 	bl	8004258 <HAL_TIM_PWM_Init>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80020d0:	f000 f9d6 	bl	8002480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d4:	2300      	movs	r3, #0
 80020d6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d8:	2300      	movs	r3, #0
 80020da:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020e0:	4619      	mov	r1, r3
 80020e2:	4821      	ldr	r0, [pc, #132]	; (8002168 <MX_TIM1_Init+0x100>)
 80020e4:	f002 ff42 	bl	8004f6c <HAL_TIMEx_MasterConfigSynchronization>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80020ee:	f000 f9c7 	bl	8002480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020f2:	2360      	movs	r3, #96	; 0x60
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 80020f6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80020fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020fc:	2300      	movs	r3, #0
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002100:	2300      	movs	r3, #0
 8002102:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002104:	2300      	movs	r3, #0
 8002106:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002108:	2300      	movs	r3, #0
 800210a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800210c:	2300      	movs	r3, #0
 800210e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002114:	2200      	movs	r2, #0
 8002116:	4619      	mov	r1, r3
 8002118:	4813      	ldr	r0, [pc, #76]	; (8002168 <MX_TIM1_Init+0x100>)
 800211a:	f002 fad1 	bl	80046c0 <HAL_TIM_PWM_ConfigChannel>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8002124:	f000 f9ac 	bl	8002480 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002128:	2300      	movs	r3, #0
 800212a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800212c:	2300      	movs	r3, #0
 800212e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002130:	2300      	movs	r3, #0
 8002132:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800213c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002140:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002142:	2300      	movs	r3, #0
 8002144:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002146:	1d3b      	adds	r3, r7, #4
 8002148:	4619      	mov	r1, r3
 800214a:	4807      	ldr	r0, [pc, #28]	; (8002168 <MX_TIM1_Init+0x100>)
 800214c:	f002 ff7c 	bl	8005048 <HAL_TIMEx_ConfigBreakDeadTime>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8002156:	f000 f993 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800215a:	4803      	ldr	r0, [pc, #12]	; (8002168 <MX_TIM1_Init+0x100>)
 800215c:	f000 fa5e 	bl	800261c <HAL_TIM_MspPostInit>

}
 8002160:	bf00      	nop
 8002162:	3748      	adds	r7, #72	; 0x48
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20000094 	.word	0x20000094
 800216c:	40010000 	.word	0x40010000

08002170 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08c      	sub	sp, #48	; 0x30
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002176:	f107 030c 	add.w	r3, r7, #12
 800217a:	2224      	movs	r2, #36	; 0x24
 800217c:	2100      	movs	r1, #0
 800217e:	4618      	mov	r0, r3
 8002180:	f003 faa0 	bl	80056c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002184:	1d3b      	adds	r3, r7, #4
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800218c:	4b21      	ldr	r3, [pc, #132]	; (8002214 <MX_TIM2_Init+0xa4>)
 800218e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002192:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002194:	4b1f      	ldr	r3, [pc, #124]	; (8002214 <MX_TIM2_Init+0xa4>)
 8002196:	2200      	movs	r2, #0
 8002198:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800219a:	4b1e      	ldr	r3, [pc, #120]	; (8002214 <MX_TIM2_Init+0xa4>)
 800219c:	2200      	movs	r2, #0
 800219e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80021a0:	4b1c      	ldr	r3, [pc, #112]	; (8002214 <MX_TIM2_Init+0xa4>)
 80021a2:	f04f 32ff 	mov.w	r2, #4294967295
 80021a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a8:	4b1a      	ldr	r3, [pc, #104]	; (8002214 <MX_TIM2_Init+0xa4>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ae:	4b19      	ldr	r3, [pc, #100]	; (8002214 <MX_TIM2_Init+0xa4>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80021b4:	2303      	movs	r3, #3
 80021b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021b8:	2300      	movs	r3, #0
 80021ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021bc:	2301      	movs	r3, #1
 80021be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021c0:	2300      	movs	r3, #0
 80021c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80021c8:	2300      	movs	r3, #0
 80021ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021cc:	2301      	movs	r3, #1
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021d0:	2300      	movs	r3, #0
 80021d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80021d8:	f107 030c 	add.w	r3, r7, #12
 80021dc:	4619      	mov	r1, r3
 80021de:	480d      	ldr	r0, [pc, #52]	; (8002214 <MX_TIM2_Init+0xa4>)
 80021e0:	f002 f93a 	bl	8004458 <HAL_TIM_Encoder_Init>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80021ea:	f000 f949 	bl	8002480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ee:	2300      	movs	r3, #0
 80021f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f2:	2300      	movs	r3, #0
 80021f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021f6:	1d3b      	adds	r3, r7, #4
 80021f8:	4619      	mov	r1, r3
 80021fa:	4806      	ldr	r0, [pc, #24]	; (8002214 <MX_TIM2_Init+0xa4>)
 80021fc:	f002 feb6 	bl	8004f6c <HAL_TIMEx_MasterConfigSynchronization>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002206:	f000 f93b 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800220a:	bf00      	nop
 800220c:	3730      	adds	r7, #48	; 0x30
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	200000dc 	.word	0x200000dc

08002218 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800221e:	f107 0308 	add.w	r3, r7, #8
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	605a      	str	r2, [r3, #4]
 8002228:	609a      	str	r2, [r3, #8]
 800222a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800222c:	463b      	mov	r3, r7
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <MX_TIM3_Init+0x94>)
 8002236:	4a1e      	ldr	r2, [pc, #120]	; (80022b0 <MX_TIM3_Init+0x98>)
 8002238:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 800223a:	4b1c      	ldr	r3, [pc, #112]	; (80022ac <MX_TIM3_Init+0x94>)
 800223c:	2253      	movs	r2, #83	; 0x53
 800223e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002240:	4b1a      	ldr	r3, [pc, #104]	; (80022ac <MX_TIM3_Init+0x94>)
 8002242:	2200      	movs	r2, #0
 8002244:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002246:	4b19      	ldr	r3, [pc, #100]	; (80022ac <MX_TIM3_Init+0x94>)
 8002248:	f240 32e7 	movw	r2, #999	; 0x3e7
 800224c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800224e:	4b17      	ldr	r3, [pc, #92]	; (80022ac <MX_TIM3_Init+0x94>)
 8002250:	2200      	movs	r2, #0
 8002252:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002254:	4b15      	ldr	r3, [pc, #84]	; (80022ac <MX_TIM3_Init+0x94>)
 8002256:	2200      	movs	r2, #0
 8002258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800225a:	4814      	ldr	r0, [pc, #80]	; (80022ac <MX_TIM3_Init+0x94>)
 800225c:	f001 ff4a 	bl	80040f4 <HAL_TIM_Base_Init>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002266:	f000 f90b 	bl	8002480 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800226a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800226e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002270:	f107 0308 	add.w	r3, r7, #8
 8002274:	4619      	mov	r1, r3
 8002276:	480d      	ldr	r0, [pc, #52]	; (80022ac <MX_TIM3_Init+0x94>)
 8002278:	f002 fae4 	bl	8004844 <HAL_TIM_ConfigClockSource>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002282:	f000 f8fd 	bl	8002480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002286:	2300      	movs	r3, #0
 8002288:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800228a:	2300      	movs	r3, #0
 800228c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800228e:	463b      	mov	r3, r7
 8002290:	4619      	mov	r1, r3
 8002292:	4806      	ldr	r0, [pc, #24]	; (80022ac <MX_TIM3_Init+0x94>)
 8002294:	f002 fe6a 	bl	8004f6c <HAL_TIMEx_MasterConfigSynchronization>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800229e:	f000 f8ef 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80022a2:	bf00      	nop
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000124 	.word	0x20000124
 80022b0:	40000400 	.word	0x40000400

080022b4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ba:	f107 0308 	add.w	r3, r7, #8
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	605a      	str	r2, [r3, #4]
 80022c4:	609a      	str	r2, [r3, #8]
 80022c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022c8:	463b      	mov	r3, r7
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80022d0:	4b1d      	ldr	r3, [pc, #116]	; (8002348 <MX_TIM5_Init+0x94>)
 80022d2:	4a1e      	ldr	r2, [pc, #120]	; (800234c <MX_TIM5_Init+0x98>)
 80022d4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 80022d6:	4b1c      	ldr	r3, [pc, #112]	; (8002348 <MX_TIM5_Init+0x94>)
 80022d8:	2253      	movs	r2, #83	; 0x53
 80022da:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022dc:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <MX_TIM5_Init+0x94>)
 80022de:	2200      	movs	r2, #0
 80022e0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80022e2:	4b19      	ldr	r3, [pc, #100]	; (8002348 <MX_TIM5_Init+0x94>)
 80022e4:	f04f 32ff 	mov.w	r2, #4294967295
 80022e8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ea:	4b17      	ldr	r3, [pc, #92]	; (8002348 <MX_TIM5_Init+0x94>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022f0:	4b15      	ldr	r3, [pc, #84]	; (8002348 <MX_TIM5_Init+0x94>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80022f6:	4814      	ldr	r0, [pc, #80]	; (8002348 <MX_TIM5_Init+0x94>)
 80022f8:	f001 fefc 	bl	80040f4 <HAL_TIM_Base_Init>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002302:	f000 f8bd 	bl	8002480 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800230a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800230c:	f107 0308 	add.w	r3, r7, #8
 8002310:	4619      	mov	r1, r3
 8002312:	480d      	ldr	r0, [pc, #52]	; (8002348 <MX_TIM5_Init+0x94>)
 8002314:	f002 fa96 	bl	8004844 <HAL_TIM_ConfigClockSource>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800231e:	f000 f8af 	bl	8002480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002322:	2300      	movs	r3, #0
 8002324:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002326:	2300      	movs	r3, #0
 8002328:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800232a:	463b      	mov	r3, r7
 800232c:	4619      	mov	r1, r3
 800232e:	4806      	ldr	r0, [pc, #24]	; (8002348 <MX_TIM5_Init+0x94>)
 8002330:	f002 fe1c 	bl	8004f6c <HAL_TIMEx_MasterConfigSynchronization>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800233a:	f000 f8a1 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800233e:	bf00      	nop
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	2000016c 	.word	0x2000016c
 800234c:	40000c00 	.word	0x40000c00

08002350 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <MX_USART2_UART_Init+0x4c>)
 8002356:	4a12      	ldr	r2, [pc, #72]	; (80023a0 <MX_USART2_UART_Init+0x50>)
 8002358:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800235a:	4b10      	ldr	r3, [pc, #64]	; (800239c <MX_USART2_UART_Init+0x4c>)
 800235c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002360:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002362:	4b0e      	ldr	r3, [pc, #56]	; (800239c <MX_USART2_UART_Init+0x4c>)
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <MX_USART2_UART_Init+0x4c>)
 800236a:	2200      	movs	r2, #0
 800236c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800236e:	4b0b      	ldr	r3, [pc, #44]	; (800239c <MX_USART2_UART_Init+0x4c>)
 8002370:	2200      	movs	r2, #0
 8002372:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002374:	4b09      	ldr	r3, [pc, #36]	; (800239c <MX_USART2_UART_Init+0x4c>)
 8002376:	220c      	movs	r2, #12
 8002378:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800237a:	4b08      	ldr	r3, [pc, #32]	; (800239c <MX_USART2_UART_Init+0x4c>)
 800237c:	2200      	movs	r2, #0
 800237e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002380:	4b06      	ldr	r3, [pc, #24]	; (800239c <MX_USART2_UART_Init+0x4c>)
 8002382:	2200      	movs	r2, #0
 8002384:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002386:	4805      	ldr	r0, [pc, #20]	; (800239c <MX_USART2_UART_Init+0x4c>)
 8002388:	f002 feb0 	bl	80050ec <HAL_UART_Init>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002392:	f000 f875 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	200001b4 	.word	0x200001b4
 80023a0:	40004400 	.word	0x40004400

080023a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	; 0x28
 80023a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023aa:	f107 0314 	add.w	r3, r7, #20
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	605a      	str	r2, [r3, #4]
 80023b4:	609a      	str	r2, [r3, #8]
 80023b6:	60da      	str	r2, [r3, #12]
 80023b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	4b2d      	ldr	r3, [pc, #180]	; (8002474 <MX_GPIO_Init+0xd0>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	4a2c      	ldr	r2, [pc, #176]	; (8002474 <MX_GPIO_Init+0xd0>)
 80023c4:	f043 0304 	orr.w	r3, r3, #4
 80023c8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ca:	4b2a      	ldr	r3, [pc, #168]	; (8002474 <MX_GPIO_Init+0xd0>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	613b      	str	r3, [r7, #16]
 80023d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	4b26      	ldr	r3, [pc, #152]	; (8002474 <MX_GPIO_Init+0xd0>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	4a25      	ldr	r2, [pc, #148]	; (8002474 <MX_GPIO_Init+0xd0>)
 80023e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e4:	6313      	str	r3, [r2, #48]	; 0x30
 80023e6:	4b23      	ldr	r3, [pc, #140]	; (8002474 <MX_GPIO_Init+0xd0>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	4b1f      	ldr	r3, [pc, #124]	; (8002474 <MX_GPIO_Init+0xd0>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	4a1e      	ldr	r2, [pc, #120]	; (8002474 <MX_GPIO_Init+0xd0>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	6313      	str	r3, [r2, #48]	; 0x30
 8002402:	4b1c      	ldr	r3, [pc, #112]	; (8002474 <MX_GPIO_Init+0xd0>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	607b      	str	r3, [r7, #4]
 8002412:	4b18      	ldr	r3, [pc, #96]	; (8002474 <MX_GPIO_Init+0xd0>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	4a17      	ldr	r2, [pc, #92]	; (8002474 <MX_GPIO_Init+0xd0>)
 8002418:	f043 0302 	orr.w	r3, r3, #2
 800241c:	6313      	str	r3, [r2, #48]	; 0x30
 800241e:	4b15      	ldr	r3, [pc, #84]	; (8002474 <MX_GPIO_Init+0xd0>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	607b      	str	r3, [r7, #4]
 8002428:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800242a:	2200      	movs	r2, #0
 800242c:	2120      	movs	r1, #32
 800242e:	4812      	ldr	r0, [pc, #72]	; (8002478 <MX_GPIO_Init+0xd4>)
 8002430:	f001 f9ae 	bl	8003790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002434:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800243a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800243e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002444:	f107 0314 	add.w	r3, r7, #20
 8002448:	4619      	mov	r1, r3
 800244a:	480c      	ldr	r0, [pc, #48]	; (800247c <MX_GPIO_Init+0xd8>)
 800244c:	f001 f81c 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002450:	2320      	movs	r3, #32
 8002452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002454:	2301      	movs	r3, #1
 8002456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245c:	2300      	movs	r3, #0
 800245e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	4619      	mov	r1, r3
 8002466:	4804      	ldr	r0, [pc, #16]	; (8002478 <MX_GPIO_Init+0xd4>)
 8002468:	f001 f80e 	bl	8003488 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800246c:	bf00      	nop
 800246e:	3728      	adds	r7, #40	; 0x28
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40023800 	.word	0x40023800
 8002478:	40020000 	.word	0x40020000
 800247c:	40020800 	.word	0x40020800

08002480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002484:	b672      	cpsid	i
}
 8002486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002488:	e7fe      	b.n	8002488 <Error_Handler+0x8>
	...

0800248c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	607b      	str	r3, [r7, #4]
 8002496:	4b10      	ldr	r3, [pc, #64]	; (80024d8 <HAL_MspInit+0x4c>)
 8002498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249a:	4a0f      	ldr	r2, [pc, #60]	; (80024d8 <HAL_MspInit+0x4c>)
 800249c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a0:	6453      	str	r3, [r2, #68]	; 0x44
 80024a2:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <HAL_MspInit+0x4c>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024aa:	607b      	str	r3, [r7, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	603b      	str	r3, [r7, #0]
 80024b2:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <HAL_MspInit+0x4c>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	4a08      	ldr	r2, [pc, #32]	; (80024d8 <HAL_MspInit+0x4c>)
 80024b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024bc:	6413      	str	r3, [r2, #64]	; 0x40
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_MspInit+0x4c>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c6:	603b      	str	r3, [r7, #0]
 80024c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80024ca:	2007      	movs	r0, #7
 80024cc:	f000 ffa8 	bl	8003420 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40023800 	.word	0x40023800

080024dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a0b      	ldr	r2, [pc, #44]	; (8002518 <HAL_TIM_PWM_MspInit+0x3c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d10d      	bne.n	800250a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	4b0a      	ldr	r3, [pc, #40]	; (800251c <HAL_TIM_PWM_MspInit+0x40>)
 80024f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f6:	4a09      	ldr	r2, [pc, #36]	; (800251c <HAL_TIM_PWM_MspInit+0x40>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	6453      	str	r3, [r2, #68]	; 0x44
 80024fe:	4b07      	ldr	r3, [pc, #28]	; (800251c <HAL_TIM_PWM_MspInit+0x40>)
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800250a:	bf00      	nop
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	40010000 	.word	0x40010000
 800251c:	40023800 	.word	0x40023800

08002520 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08a      	sub	sp, #40	; 0x28
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002528:	f107 0314 	add.w	r3, r7, #20
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	60da      	str	r2, [r3, #12]
 8002536:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002540:	d12b      	bne.n	800259a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	4b17      	ldr	r3, [pc, #92]	; (80025a4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	4a16      	ldr	r2, [pc, #88]	; (80025a4 <HAL_TIM_Encoder_MspInit+0x84>)
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	6413      	str	r3, [r2, #64]	; 0x40
 8002552:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	4a0f      	ldr	r2, [pc, #60]	; (80025a4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	6313      	str	r3, [r2, #48]	; 0x30
 800256e:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800257a:	2303      	movs	r3, #3
 800257c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257e:	2302      	movs	r3, #2
 8002580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002586:	2300      	movs	r3, #0
 8002588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800258a:	2301      	movs	r3, #1
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258e:	f107 0314 	add.w	r3, r7, #20
 8002592:	4619      	mov	r1, r3
 8002594:	4804      	ldr	r0, [pc, #16]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002596:	f000 ff77 	bl	8003488 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800259a:	bf00      	nop
 800259c:	3728      	adds	r7, #40	; 0x28
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40020000 	.word	0x40020000

080025ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a15      	ldr	r2, [pc, #84]	; (8002610 <HAL_TIM_Base_MspInit+0x64>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d10e      	bne.n	80025dc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	4b14      	ldr	r3, [pc, #80]	; (8002614 <HAL_TIM_Base_MspInit+0x68>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	4a13      	ldr	r2, [pc, #76]	; (8002614 <HAL_TIM_Base_MspInit+0x68>)
 80025c8:	f043 0302 	orr.w	r3, r3, #2
 80025cc:	6413      	str	r3, [r2, #64]	; 0x40
 80025ce:	4b11      	ldr	r3, [pc, #68]	; (8002614 <HAL_TIM_Base_MspInit+0x68>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80025da:	e012      	b.n	8002602 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM5)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a0d      	ldr	r2, [pc, #52]	; (8002618 <HAL_TIM_Base_MspInit+0x6c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d10d      	bne.n	8002602 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <HAL_TIM_Base_MspInit+0x68>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	4a09      	ldr	r2, [pc, #36]	; (8002614 <HAL_TIM_Base_MspInit+0x68>)
 80025f0:	f043 0308 	orr.w	r3, r3, #8
 80025f4:	6413      	str	r3, [r2, #64]	; 0x40
 80025f6:	4b07      	ldr	r3, [pc, #28]	; (8002614 <HAL_TIM_Base_MspInit+0x68>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	68bb      	ldr	r3, [r7, #8]
}
 8002602:	bf00      	nop
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40000400 	.word	0x40000400
 8002614:	40023800 	.word	0x40023800
 8002618:	40000c00 	.word	0x40000c00

0800261c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002624:	f107 030c 	add.w	r3, r7, #12
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a12      	ldr	r2, [pc, #72]	; (8002684 <HAL_TIM_MspPostInit+0x68>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d11e      	bne.n	800267c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	4b11      	ldr	r3, [pc, #68]	; (8002688 <HAL_TIM_MspPostInit+0x6c>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	4a10      	ldr	r2, [pc, #64]	; (8002688 <HAL_TIM_MspPostInit+0x6c>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	6313      	str	r3, [r2, #48]	; 0x30
 800264e:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <HAL_TIM_MspPostInit+0x6c>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	60bb      	str	r3, [r7, #8]
 8002658:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800265a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800265e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002660:	2302      	movs	r3, #2
 8002662:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002668:	2300      	movs	r3, #0
 800266a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800266c:	2301      	movs	r3, #1
 800266e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002670:	f107 030c 	add.w	r3, r7, #12
 8002674:	4619      	mov	r1, r3
 8002676:	4805      	ldr	r0, [pc, #20]	; (800268c <HAL_TIM_MspPostInit+0x70>)
 8002678:	f000 ff06 	bl	8003488 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800267c:	bf00      	nop
 800267e:	3720      	adds	r7, #32
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40010000 	.word	0x40010000
 8002688:	40023800 	.word	0x40023800
 800268c:	40020000 	.word	0x40020000

08002690 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08a      	sub	sp, #40	; 0x28
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002698:	f107 0314 	add.w	r3, r7, #20
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a19      	ldr	r2, [pc, #100]	; (8002714 <HAL_UART_MspInit+0x84>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d12b      	bne.n	800270a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	4b18      	ldr	r3, [pc, #96]	; (8002718 <HAL_UART_MspInit+0x88>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	4a17      	ldr	r2, [pc, #92]	; (8002718 <HAL_UART_MspInit+0x88>)
 80026bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c0:	6413      	str	r3, [r2, #64]	; 0x40
 80026c2:	4b15      	ldr	r3, [pc, #84]	; (8002718 <HAL_UART_MspInit+0x88>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	4b11      	ldr	r3, [pc, #68]	; (8002718 <HAL_UART_MspInit+0x88>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	4a10      	ldr	r2, [pc, #64]	; (8002718 <HAL_UART_MspInit+0x88>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	6313      	str	r3, [r2, #48]	; 0x30
 80026de:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <HAL_UART_MspInit+0x88>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80026ea:	230c      	movs	r3, #12
 80026ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ee:	2302      	movs	r3, #2
 80026f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f6:	2303      	movs	r3, #3
 80026f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026fa:	2307      	movs	r3, #7
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fe:	f107 0314 	add.w	r3, r7, #20
 8002702:	4619      	mov	r1, r3
 8002704:	4805      	ldr	r0, [pc, #20]	; (800271c <HAL_UART_MspInit+0x8c>)
 8002706:	f000 febf 	bl	8003488 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800270a:	bf00      	nop
 800270c:	3728      	adds	r7, #40	; 0x28
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40004400 	.word	0x40004400
 8002718:	40023800 	.word	0x40023800
 800271c:	40020000 	.word	0x40020000

08002720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002724:	e7fe      	b.n	8002724 <NMI_Handler+0x4>

08002726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002726:	b480      	push	{r7}
 8002728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800272a:	e7fe      	b.n	800272a <HardFault_Handler+0x4>

0800272c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002730:	e7fe      	b.n	8002730 <MemManage_Handler+0x4>

08002732 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002732:	b480      	push	{r7}
 8002734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002736:	e7fe      	b.n	8002736 <BusFault_Handler+0x4>

08002738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800273c:	e7fe      	b.n	800273c <UsageFault_Handler+0x4>

0800273e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800273e:	b480      	push	{r7}
 8002740:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800276c:	f000 fd86 	bl	800327c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002770:	bf00      	nop
 8002772:	bd80      	pop	{r7, pc}

08002774 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <SystemInit+0x20>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277e:	4a05      	ldr	r2, [pc, #20]	; (8002794 <SystemInit+0x20>)
 8002780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002798:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800279c:	480d      	ldr	r0, [pc, #52]	; (80027d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800279e:	490e      	ldr	r1, [pc, #56]	; (80027d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027a0:	4a0e      	ldr	r2, [pc, #56]	; (80027dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027a4:	e002      	b.n	80027ac <LoopCopyDataInit>

080027a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027aa:	3304      	adds	r3, #4

080027ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027b0:	d3f9      	bcc.n	80027a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027b2:	4a0b      	ldr	r2, [pc, #44]	; (80027e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027b4:	4c0b      	ldr	r4, [pc, #44]	; (80027e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027b8:	e001      	b.n	80027be <LoopFillZerobss>

080027ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027bc:	3204      	adds	r2, #4

080027be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027c0:	d3fb      	bcc.n	80027ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027c2:	f7ff ffd7 	bl	8002774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027c6:	f002 ff59 	bl	800567c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027ca:	f7ff fa35 	bl	8001c38 <main>
  bx  lr    
 80027ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80027d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027d8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80027dc:	08006618 	.word	0x08006618
  ldr r2, =_sbss
 80027e0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80027e4:	2000049c 	.word	0x2000049c

080027e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027e8:	e7fe      	b.n	80027e8 <ADC_IRQHandler>

080027ea <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b08b      	sub	sp, #44	; 0x2c
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	60f8      	str	r0, [r7, #12]
 80027f2:	60b9      	str	r1, [r7, #8]
 80027f4:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	461a      	mov	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	885b      	ldrh	r3, [r3, #2]
 8002812:	fb02 f303 	mul.w	r3, r2, r3
 8002816:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800281c:	e013      	b.n	8002846 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	1d1a      	adds	r2, r3, #4
 8002822:	627a      	str	r2, [r7, #36]	; 0x24
 8002824:	ed93 7a00 	vldr	s14, [r3]
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	1d1a      	adds	r2, r3, #4
 800282c:	623a      	str	r2, [r7, #32]
 800282e:	edd3 7a00 	vldr	s15, [r3]
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	1d1a      	adds	r2, r3, #4
 8002836:	61fa      	str	r2, [r7, #28]
 8002838:	ee77 7a27 	vadd.f32	s15, s14, s15
 800283c:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	3b01      	subs	r3, #1
 8002844:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1e8      	bne.n	800281e <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800284c:	2300      	movs	r3, #0
 800284e:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8002850:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8002854:	4618      	mov	r0, r3
 8002856:	372c      	adds	r7, #44	; 0x2c
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	607b      	str	r3, [r7, #4]
 800286a:	460b      	mov	r3, r1
 800286c:	817b      	strh	r3, [r7, #10]
 800286e:	4613      	mov	r3, r2
 8002870:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	897a      	ldrh	r2, [r7, #10]
 8002876:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	893a      	ldrh	r2, [r7, #8]
 800287c:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	605a      	str	r2, [r3, #4]
}
 8002884:	bf00      	nop
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8002890:	b480      	push	{r7}
 8002892:	b0bb      	sub	sp, #236	; 0xec
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	667b      	str	r3, [r7, #100]	; 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	663b      	str	r3, [r7, #96]	; 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	885b      	ldrh	r3, [r3, #2]
 80028b0:	65bb      	str	r3, [r7, #88]	; 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 80028b2:	f04f 0300 	mov.w	r3, #0
 80028b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80028ba:	f04f 0300 	mov.w	r3, #0
 80028be:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 80028c0:	2300      	movs	r3, #0
 80028c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 80028c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 80028cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 80028d2:	e03b      	b.n	800294c <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 80028d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80028d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 80028e0:	e00c      	b.n	80028fc <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 80028e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028e6:	1d1a      	adds	r2, r3, #4
 80028e8:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
        j--;
 80028f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028f6:	3b01      	subs	r3, #1
 80028f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 80028fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1ee      	bne.n	80028e2 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 8002904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002908:	1d1a      	adds	r2, r3, #4
 800290a:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800290e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002912:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 8002914:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002918:	3b01      	subs	r3, #1
 800291a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 800291e:	e00c      	b.n	800293a <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 8002920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002924:	1d1a      	adds	r2, r3, #4
 8002926:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
        j--;
 8002930:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002934:	3b01      	subs	r3, #1
 8002936:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 800293a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1ee      	bne.n	8002920 <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 8002942:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002946:	3b01      	subs	r3, #1
 8002948:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    while (rowCnt > 0U)
 800294c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1bf      	bne.n	80028d4 <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 8002954:	2300      	movs	r3, #0
 8002956:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800295a:	e2c7      	b.n	8002eec <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800295c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002960:	653b      	str	r3, [r7, #80]	; 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	885b      	ldrh	r3, [r3, #2]
 800296a:	3301      	adds	r3, #1
 800296c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      pivot = *pTmp;
 800297c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      selectedRow = column;
 8002986:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800298a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800298e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002992:	3301      	adds	r3, #1
 8002994:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002998:	e02c      	b.n	80029f4 <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	885b      	ldrh	r3, [r3, #2]
 80029a2:	4619      	mov	r1, r3
 80029a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029a8:	fb03 f101 	mul.w	r1, r3, r1
 80029ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029b0:	440b      	add	r3, r1
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
          newPivot = *pTmp;
 80029ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	657b      	str	r3, [r7, #84]	; 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 80029c2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80029c6:	eeb0 7ae7 	vabs.f32	s14, s15
 80029ca:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80029ce:	eef0 7ae7 	vabs.f32	s15, s15
 80029d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029da:	dd06      	ble.n	80029ea <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 80029dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            pivot = newPivot;
 80029e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 80029ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029ee:	3301      	adds	r3, #1
 80029f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80029f4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80029f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d3cd      	bcc.n	800299a <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 80029fe:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002a02:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a0a:	f000 809b 	beq.w	8002b44 <arm_mat_inverse_f32+0x2b4>
 8002a0e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002a12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a16:	429a      	cmp	r2, r3
 8002a18:	f000 8094 	beq.w	8002b44 <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	885b      	ldrh	r3, [r3, #2]
 8002a30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002a40:	fb03 f202 	mul.w	r2, r3, r2
 8002a44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a48:	4413      	add	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002a50:	4413      	add	r3, r2
 8002a52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a58:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002a5c:	fb03 f202 	mul.w	r2, r3, r2
 8002a60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a64:	4413      	add	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a72:	2300      	movs	r3, #0
 8002a74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002a78:	e018      	b.n	8002aac <arm_mat_inverse_f32+0x21c>
 8002a7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a86:	1d1a      	adds	r2, r3, #4
 8002a88:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8002a8c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a90:	6812      	ldr	r2, [r2, #0]
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a98:	1d1a      	adds	r2, r3, #4
 8002a9a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002a9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002aac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	dbe1      	blt.n	8002a7a <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	885b      	ldrh	r3, [r3, #2]
 8002aca:	647b      	str	r3, [r7, #68]	; 0x44
 8002acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ace:	643b      	str	r3, [r7, #64]	; 0x40
 8002ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ad2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002ad4:	fb02 f303 	mul.w	r3, r2, r3
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002ade:	4413      	add	r3, r2
 8002ae0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ae6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002aea:	fb02 f303 	mul.w	r3, r2, r3
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002af4:	4413      	add	r3, r2
 8002af6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002afa:	2300      	movs	r3, #0
 8002afc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b00:	e018      	b.n	8002b34 <arm_mat_inverse_f32+0x2a4>
 8002b02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b0e:	1d1a      	adds	r2, r3, #4
 8002b10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002b14:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b18:	6812      	ldr	r2, [r2, #0]
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b20:	1d1a      	adds	r2, r3, #4
 8002b22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b2e:	3301      	adds	r3, #1
 8002b30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b34:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	dbe1      	blt.n	8002b02 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 8002b44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d009      	beq.n	8002b60 <arm_mat_inverse_f32+0x2d0>
 8002b4c:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002b50:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b58:	d102      	bne.n	8002b60 <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 8002b5a:	f06f 0304 	mvn.w	r3, #4
 8002b5e:	e208      	b.n	8002f72 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 8002b60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b64:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 8002b68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b6c:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	885b      	ldrh	r3, [r3, #2]
 8002b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	633b      	str	r3, [r7, #48]	; 0x30
 8002b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002b8c:	fb03 f202 	mul.w	r2, r3, r2
 8002b90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002ba8:	e011      	b.n	8002bce <arm_mat_inverse_f32+0x33e>
 8002baa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002bae:	1d1a      	adds	r2, r3, #4
 8002bb0:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8002bb4:	ed93 7a00 	vldr	s14, [r3]
 8002bb8:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bc0:	edc3 7a00 	vstr	s15, [r3]
 8002bc4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002bc8:	3301      	adds	r3, #1
 8002bca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002bce:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	dbe8      	blt.n	8002baa <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	885b      	ldrh	r3, [r3, #2]
 8002be4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002bee:	fb02 f303 	mul.w	r3, r2, r3
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c04:	e011      	b.n	8002c2a <arm_mat_inverse_f32+0x39a>
 8002c06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c0a:	1d1a      	adds	r2, r3, #4
 8002c0c:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8002c10:	ed93 7a00 	vldr	s14, [r3]
 8002c14:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002c18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c1c:	edc3 7a00 	vstr	s15, [r3]
 8002c20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c24:	3301      	adds	r3, #1
 8002c26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c2a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c30:	429a      	cmp	r2, r3
 8002c32:	dbe8      	blt.n	8002c06 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 8002c34:	2300      	movs	r3, #0
 8002c36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      for (;rowNb < pivotRow; rowNb++)
 8002c3a:	e0ae      	b.n	8002d9a <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	885b      	ldrh	r3, [r3, #2]
 8002c44:	4619      	mov	r1, r3
 8002c46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c4a:	fb03 f101 	mul.w	r1, r3, r1
 8002c4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c52:	440b      	add	r3, r1
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           pivot = *pTmp;
 8002c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	885b      	ldrh	r3, [r3, #2]
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	613b      	str	r3, [r7, #16]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002c8c:	fb03 f202 	mul.w	r2, r3, r2
 8002c90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002ca6:	fb03 f202 	mul.w	r2, r3, r2
 8002caa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cae:	4413      	add	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002cc2:	e01a      	b.n	8002cfa <arm_mat_inverse_f32+0x46a>
 8002cc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cc8:	1d1a      	adds	r2, r3, #4
 8002cca:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002cce:	ed93 7a00 	vldr	s14, [r3]
 8002cd2:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002cde:	1d1a      	adds	r2, r3, #4
 8002ce0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002ce4:	ed93 7a00 	vldr	s14, [r3]
 8002ce8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cec:	edc3 7a00 	vstr	s15, [r3]
 8002cf0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002cfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	dbdf      	blt.n	8002cc4 <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	885b      	ldrh	r3, [r3, #2]
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	60bb      	str	r3, [r7, #8]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002d24:	fb02 f303 	mul.w	r3, r2, r3
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002d2e:	4413      	add	r3, r2
 8002d30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002d38:	fb02 f303 	mul.w	r3, r2, r3
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d42:	4413      	add	r3, r2
 8002d44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d4e:	e01a      	b.n	8002d86 <arm_mat_inverse_f32+0x4f6>
 8002d50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d54:	1d1a      	adds	r2, r3, #4
 8002d56:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d5a:	ed93 7a00 	vldr	s14, [r3]
 8002d5e:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d6a:	1d1a      	adds	r2, r3, #4
 8002d6c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002d70:	ed93 7a00 	vldr	s14, [r3]
 8002d74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d78:	edc3 7a00 	vstr	s15, [r3]
 8002d7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d80:	3301      	adds	r3, #1
 8002d82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d86:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	dbdf      	blt.n	8002d50 <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 8002d90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d94:	3301      	adds	r3, #1
 8002d96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002d9a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002da0:	429a      	cmp	r2, r3
 8002da2:	f4ff af4b 	bcc.w	8002c3c <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8002da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002da8:	3301      	adds	r3, #1
 8002daa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002dae:	e092      	b.n	8002ed6 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	885b      	ldrh	r3, [r3, #2]
 8002db8:	4619      	mov	r1, r3
 8002dba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002dbe:	fb03 f101 	mul.w	r1, r3, r1
 8002dc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dc6:	440b      	add	r3, r1
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           pivot = *pTmp;
 8002dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	67bb      	str	r3, [r7, #120]	; 0x78
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	677b      	str	r3, [r7, #116]	; 0x74
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	885b      	ldrh	r3, [r3, #2]
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
 8002dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	623b      	str	r3, [r7, #32]
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002dfc:	fb03 f202 	mul.w	r2, r3, r2
 8002e00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e04:	4413      	add	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002e0a:	4413      	add	r3, r2
 8002e0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e12:	fb03 f202 	mul.w	r2, r3, r2
 8002e16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002e20:	4413      	add	r3, r2
 8002e22:	677b      	str	r3, [r7, #116]	; 0x74
 8002e24:	2300      	movs	r3, #0
 8002e26:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e28:	e014      	b.n	8002e54 <arm_mat_inverse_f32+0x5c4>
 8002e2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e2c:	1d1a      	adds	r2, r3, #4
 8002e2e:	677a      	str	r2, [r7, #116]	; 0x74
 8002e30:	ed93 7a00 	vldr	s14, [r3]
 8002e34:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e3e:	1d1a      	adds	r2, r3, #4
 8002e40:	67ba      	str	r2, [r7, #120]	; 0x78
 8002e42:	ed93 7a00 	vldr	s14, [r3]
 8002e46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e4a:	edc3 7a00 	vstr	s15, [r3]
 8002e4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e50:	3301      	adds	r3, #1
 8002e52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e54:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	dbe6      	blt.n	8002e2a <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	885b      	ldrh	r3, [r3, #2]
 8002e6c:	61fb      	str	r3, [r7, #28]
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	61bb      	str	r3, [r7, #24]
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002e78:	fb02 f303 	mul.w	r3, r2, r3
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e80:	4413      	add	r3, r2
 8002e82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e88:	fb02 f303 	mul.w	r3, r2, r3
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002e90:	4413      	add	r3, r2
 8002e92:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e94:	2300      	movs	r3, #0
 8002e96:	673b      	str	r3, [r7, #112]	; 0x70
 8002e98:	e014      	b.n	8002ec4 <arm_mat_inverse_f32+0x634>
 8002e9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e9c:	1d1a      	adds	r2, r3, #4
 8002e9e:	66ba      	str	r2, [r7, #104]	; 0x68
 8002ea0:	ed93 7a00 	vldr	s14, [r3]
 8002ea4:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eae:	1d1a      	adds	r2, r3, #4
 8002eb0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002eb2:	ed93 7a00 	vldr	s14, [r3]
 8002eb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eba:	edc3 7a00 	vstr	s15, [r3]
 8002ebe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	673b      	str	r3, [r7, #112]	; 0x70
 8002ec4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	dbe6      	blt.n	8002e9a <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8002ecc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002ed6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002edc:	429a      	cmp	r2, r3
 8002ede:	f4ff af67 	bcc.w	8002db0 <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 8002ee2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002eec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ef0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	f4ff ad32 	bcc.w	800295c <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 8002efe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d033      	beq.n	8002f6e <arm_mat_inverse_f32+0x6de>
 8002f06:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002f0a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f12:	d12c      	bne.n	8002f6e <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	667b      	str	r3, [r7, #100]	; 0x64
      for (i = 0; i < numRows * numCols; i++)
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f20:	e010      	b.n	8002f44 <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 8002f22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002f2a:	4413      	add	r3, r2
 8002f2c:	edd3 7a00 	vldr	s15, [r3]
 8002f30:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f38:	d10d      	bne.n	8002f56 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 8002f3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f3e:	3301      	adds	r3, #1
 8002f40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f48:	fb02 f303 	mul.w	r3, r2, r3
 8002f4c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d3e6      	bcc.n	8002f22 <arm_mat_inverse_f32+0x692>
 8002f54:	e000      	b.n	8002f58 <arm_mat_inverse_f32+0x6c8>
            break;
 8002f56:	bf00      	nop
      }

      if (i == numRows * numCols)
 8002f58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f5c:	fb02 f303 	mul.w	r3, r2, r3
 8002f60:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d102      	bne.n	8002f6e <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 8002f68:	23fb      	movs	r3, #251	; 0xfb
 8002f6a:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
    }
  }

  /* Return to application */
  return (status);
 8002f6e:	f997 30c3 	ldrsb.w	r3, [r7, #195]	; 0xc3
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	37ec      	adds	r7, #236	; 0xec
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b093      	sub	sp, #76	; 0x4c
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	60f8      	str	r0, [r7, #12]
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	643b      	str	r3, [r7, #64]	; 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	885b      	ldrh	r3, [r3, #2]
 8002fb2:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	885b      	ldrh	r3, [r3, #2]
 8002fb8:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 8002fba:	2300      	movs	r3, #0
 8002fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fbe:	8b7b      	ldrh	r3, [r7, #26]
 8002fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 8002fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	69fa      	ldr	r2, [r7, #28]
 8002fc8:	4413      	add	r3, r2
 8002fca:	63bb      	str	r3, [r7, #56]	; 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 8002fcc:	8b3b      	ldrh	r3, [r7, #24]
 8002fce:	633b      	str	r3, [r7, #48]	; 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	643b      	str	r3, [r7, #64]	; 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	637b      	str	r3, [r7, #52]	; 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 8002fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fde:	647b      	str	r3, [r7, #68]	; 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 8002fe0:	8afb      	ldrh	r3, [r7, #22]
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 8002fe4:	e017      	b.n	8003016 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 8002fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fe8:	1d1a      	adds	r2, r3, #4
 8002fea:	647a      	str	r2, [r7, #68]	; 0x44
 8002fec:	ed93 7a00 	vldr	s14, [r3]
 8002ff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ff2:	edd3 7a00 	vldr	s15, [r3]
 8002ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ffa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002ffe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003002:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
          pIn2 += numColsB;
 8003006:	8b3b      	ldrh	r3, [r7, #24]
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800300c:	4413      	add	r3, r2
 800300e:	643b      	str	r3, [r7, #64]	; 0x40

          /* Decrement loop counter */
          colCnt--;
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	3b01      	subs	r3, #1
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
        while (colCnt > 0U)
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1e4      	bne.n	8002fe6 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800301c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301e:	1d1a      	adds	r2, r3, #4
 8003020:	63ba      	str	r2, [r7, #56]	; 0x38
 8003022:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003024:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 8003026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003028:	3b01      	subs	r3, #1
 800302a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800302c:	8b3a      	ldrh	r2, [r7, #24]
 800302e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	6a3a      	ldr	r2, [r7, #32]
 8003036:	4413      	add	r3, r2
 8003038:	643b      	str	r3, [r7, #64]	; 0x40

      } while (col > 0U);
 800303a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1ca      	bne.n	8002fd6 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 8003040:	8b3b      	ldrh	r3, [r7, #24]
 8003042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003044:	4413      	add	r3, r2
 8003046:	62fb      	str	r3, [r7, #44]	; 0x2c
      pInA = pInA + numColsA;
 8003048:	8afb      	ldrh	r3, [r7, #22]
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800304e:	4413      	add	r3, r2
 8003050:	63fb      	str	r3, [r7, #60]	; 0x3c

      /* Decrement row loop counter */
      row--;
 8003052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003054:	3b01      	subs	r3, #1
 8003056:	62bb      	str	r3, [r7, #40]	; 0x28

    } while (row > 0U);
 8003058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1b1      	bne.n	8002fc2 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800305e:	2300      	movs	r3, #0
 8003060:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 8003062:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8003066:	4618      	mov	r0, r3
 8003068:	374c      	adds	r7, #76	; 0x4c
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 8003072:	b480      	push	{r7}
 8003074:	b08b      	sub	sp, #44	; 0x2c
 8003076:	af00      	add	r7, sp, #0
 8003078:	60f8      	str	r0, [r7, #12]
 800307a:	ed87 0a02 	vstr	s0, [r7, #8]
 800307e:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	461a      	mov	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	885b      	ldrh	r3, [r3, #2]
 8003096:	fb02 f303 	mul.w	r3, r2, r3
 800309a:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 80030a0:	e010      	b.n	80030c4 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	1d1a      	adds	r2, r3, #4
 80030a6:	627a      	str	r2, [r7, #36]	; 0x24
 80030a8:	ed93 7a00 	vldr	s14, [r3]
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	1d1a      	adds	r2, r3, #4
 80030b0:	623a      	str	r2, [r7, #32]
 80030b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80030b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ba:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	3b01      	subs	r3, #1
 80030c2:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1eb      	bne.n	80030a2 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80030ca:	2300      	movs	r3, #0
 80030cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 80030ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	372c      	adds	r7, #44	; 0x2c
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 80030de:	b480      	push	{r7}
 80030e0:	b08b      	sub	sp, #44	; 0x2c
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	461a      	mov	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	885b      	ldrh	r3, [r3, #2]
 8003106:	fb02 f303 	mul.w	r3, r2, r3
 800310a:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8003110:	e013      	b.n	800313a <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	1d1a      	adds	r2, r3, #4
 8003116:	627a      	str	r2, [r7, #36]	; 0x24
 8003118:	ed93 7a00 	vldr	s14, [r3]
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	1d1a      	adds	r2, r3, #4
 8003120:	623a      	str	r2, [r7, #32]
 8003122:	edd3 7a00 	vldr	s15, [r3]
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	1d1a      	adds	r2, r3, #4
 800312a:	61fa      	str	r2, [r7, #28]
 800312c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003130:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	3b01      	subs	r3, #1
 8003138:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1e8      	bne.n	8003112 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8003140:	2300      	movs	r3, #0
 8003142:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8003144:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003148:	4618      	mov	r0, r3
 800314a:	372c      	adds	r7, #44	; 0x2c
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8003154:	b480      	push	{r7}
 8003156:	b08b      	sub	sp, #44	; 0x2c
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	885b      	ldrh	r3, [r3, #2]
 8003174:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8003176:	89fb      	ldrh	r3, [r7, #14]
 8003178:	61bb      	str	r3, [r7, #24]
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	4413      	add	r3, r2
 8003186:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8003188:	89bb      	ldrh	r3, [r7, #12]
 800318a:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800318c:	e00d      	b.n	80031aa <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	1d1a      	adds	r2, r3, #4
 8003192:	627a      	str	r2, [r7, #36]	; 0x24
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800319a:	89fb      	ldrh	r3, [r7, #14]
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	6a3a      	ldr	r2, [r7, #32]
 80031a0:	4413      	add	r3, r2
 80031a2:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1ee      	bne.n	800318e <arm_mat_trans_f32+0x3a>
      }

      i++;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	3301      	adds	r3, #1
 80031b4:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	3b01      	subs	r3, #1
 80031ba:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1dd      	bne.n	800317e <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80031c2:	2300      	movs	r3, #0
 80031c4:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 80031c6:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	372c      	adds	r7, #44	; 0x2c
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
	...

080031d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031dc:	4b0e      	ldr	r3, [pc, #56]	; (8003218 <HAL_Init+0x40>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a0d      	ldr	r2, [pc, #52]	; (8003218 <HAL_Init+0x40>)
 80031e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031e8:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <HAL_Init+0x40>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a0a      	ldr	r2, [pc, #40]	; (8003218 <HAL_Init+0x40>)
 80031ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031f4:	4b08      	ldr	r3, [pc, #32]	; (8003218 <HAL_Init+0x40>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a07      	ldr	r2, [pc, #28]	; (8003218 <HAL_Init+0x40>)
 80031fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003200:	2003      	movs	r0, #3
 8003202:	f000 f90d 	bl	8003420 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003206:	2000      	movs	r0, #0
 8003208:	f000 f808 	bl	800321c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800320c:	f7ff f93e 	bl	800248c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40023c00 	.word	0x40023c00

0800321c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003224:	4b12      	ldr	r3, [pc, #72]	; (8003270 <HAL_InitTick+0x54>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4b12      	ldr	r3, [pc, #72]	; (8003274 <HAL_InitTick+0x58>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	4619      	mov	r1, r3
 800322e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003232:	fbb3 f3f1 	udiv	r3, r3, r1
 8003236:	fbb2 f3f3 	udiv	r3, r2, r3
 800323a:	4618      	mov	r0, r3
 800323c:	f000 f917 	bl	800346e <HAL_SYSTICK_Config>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e00e      	b.n	8003268 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b0f      	cmp	r3, #15
 800324e:	d80a      	bhi.n	8003266 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003250:	2200      	movs	r2, #0
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	f04f 30ff 	mov.w	r0, #4294967295
 8003258:	f000 f8ed 	bl	8003436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800325c:	4a06      	ldr	r2, [pc, #24]	; (8003278 <HAL_InitTick+0x5c>)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003262:	2300      	movs	r3, #0
 8003264:	e000      	b.n	8003268 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
}
 8003268:	4618      	mov	r0, r3
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	20000008 	.word	0x20000008
 8003274:	20000010 	.word	0x20000010
 8003278:	2000000c 	.word	0x2000000c

0800327c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003280:	4b06      	ldr	r3, [pc, #24]	; (800329c <HAL_IncTick+0x20>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	461a      	mov	r2, r3
 8003286:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <HAL_IncTick+0x24>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4413      	add	r3, r2
 800328c:	4a04      	ldr	r2, [pc, #16]	; (80032a0 <HAL_IncTick+0x24>)
 800328e:	6013      	str	r3, [r2, #0]
}
 8003290:	bf00      	nop
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	20000010 	.word	0x20000010
 80032a0:	20000498 	.word	0x20000498

080032a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  return uwTick;
 80032a8:	4b03      	ldr	r3, [pc, #12]	; (80032b8 <HAL_GetTick+0x14>)
 80032aa:	681b      	ldr	r3, [r3, #0]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	20000498 	.word	0x20000498

080032bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032cc:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <__NVIC_SetPriorityGrouping+0x44>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032d8:	4013      	ands	r3, r2
 80032da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032ee:	4a04      	ldr	r2, [pc, #16]	; (8003300 <__NVIC_SetPriorityGrouping+0x44>)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	60d3      	str	r3, [r2, #12]
}
 80032f4:	bf00      	nop
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	e000ed00 	.word	0xe000ed00

08003304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003308:	4b04      	ldr	r3, [pc, #16]	; (800331c <__NVIC_GetPriorityGrouping+0x18>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	0a1b      	lsrs	r3, r3, #8
 800330e:	f003 0307 	and.w	r3, r3, #7
}
 8003312:	4618      	mov	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	e000ed00 	.word	0xe000ed00

08003320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	6039      	str	r1, [r7, #0]
 800332a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800332c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003330:	2b00      	cmp	r3, #0
 8003332:	db0a      	blt.n	800334a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	b2da      	uxtb	r2, r3
 8003338:	490c      	ldr	r1, [pc, #48]	; (800336c <__NVIC_SetPriority+0x4c>)
 800333a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333e:	0112      	lsls	r2, r2, #4
 8003340:	b2d2      	uxtb	r2, r2
 8003342:	440b      	add	r3, r1
 8003344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003348:	e00a      	b.n	8003360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	b2da      	uxtb	r2, r3
 800334e:	4908      	ldr	r1, [pc, #32]	; (8003370 <__NVIC_SetPriority+0x50>)
 8003350:	79fb      	ldrb	r3, [r7, #7]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	3b04      	subs	r3, #4
 8003358:	0112      	lsls	r2, r2, #4
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	440b      	add	r3, r1
 800335e:	761a      	strb	r2, [r3, #24]
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	e000e100 	.word	0xe000e100
 8003370:	e000ed00 	.word	0xe000ed00

08003374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003374:	b480      	push	{r7}
 8003376:	b089      	sub	sp, #36	; 0x24
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f1c3 0307 	rsb	r3, r3, #7
 800338e:	2b04      	cmp	r3, #4
 8003390:	bf28      	it	cs
 8003392:	2304      	movcs	r3, #4
 8003394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	3304      	adds	r3, #4
 800339a:	2b06      	cmp	r3, #6
 800339c:	d902      	bls.n	80033a4 <NVIC_EncodePriority+0x30>
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	3b03      	subs	r3, #3
 80033a2:	e000      	b.n	80033a6 <NVIC_EncodePriority+0x32>
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a8:	f04f 32ff 	mov.w	r2, #4294967295
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43da      	mvns	r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	401a      	ands	r2, r3
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033bc:	f04f 31ff 	mov.w	r1, #4294967295
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	fa01 f303 	lsl.w	r3, r1, r3
 80033c6:	43d9      	mvns	r1, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033cc:	4313      	orrs	r3, r2
         );
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3724      	adds	r7, #36	; 0x24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
	...

080033dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033ec:	d301      	bcc.n	80033f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033ee:	2301      	movs	r3, #1
 80033f0:	e00f      	b.n	8003412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033f2:	4a0a      	ldr	r2, [pc, #40]	; (800341c <SysTick_Config+0x40>)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3b01      	subs	r3, #1
 80033f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033fa:	210f      	movs	r1, #15
 80033fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003400:	f7ff ff8e 	bl	8003320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003404:	4b05      	ldr	r3, [pc, #20]	; (800341c <SysTick_Config+0x40>)
 8003406:	2200      	movs	r2, #0
 8003408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800340a:	4b04      	ldr	r3, [pc, #16]	; (800341c <SysTick_Config+0x40>)
 800340c:	2207      	movs	r2, #7
 800340e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	e000e010 	.word	0xe000e010

08003420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7ff ff47 	bl	80032bc <__NVIC_SetPriorityGrouping>
}
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003436:	b580      	push	{r7, lr}
 8003438:	b086      	sub	sp, #24
 800343a:	af00      	add	r7, sp, #0
 800343c:	4603      	mov	r3, r0
 800343e:	60b9      	str	r1, [r7, #8]
 8003440:	607a      	str	r2, [r7, #4]
 8003442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003448:	f7ff ff5c 	bl	8003304 <__NVIC_GetPriorityGrouping>
 800344c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	68b9      	ldr	r1, [r7, #8]
 8003452:	6978      	ldr	r0, [r7, #20]
 8003454:	f7ff ff8e 	bl	8003374 <NVIC_EncodePriority>
 8003458:	4602      	mov	r2, r0
 800345a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800345e:	4611      	mov	r1, r2
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff ff5d 	bl	8003320 <__NVIC_SetPriority>
}
 8003466:	bf00      	nop
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b082      	sub	sp, #8
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7ff ffb0 	bl	80033dc <SysTick_Config>
 800347c:	4603      	mov	r3, r0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
	...

08003488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003488:	b480      	push	{r7}
 800348a:	b089      	sub	sp, #36	; 0x24
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003492:	2300      	movs	r3, #0
 8003494:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003496:	2300      	movs	r3, #0
 8003498:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800349a:	2300      	movs	r3, #0
 800349c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800349e:	2300      	movs	r3, #0
 80034a0:	61fb      	str	r3, [r7, #28]
 80034a2:	e159      	b.n	8003758 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034a4:	2201      	movs	r2, #1
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	4013      	ands	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	429a      	cmp	r2, r3
 80034be:	f040 8148 	bne.w	8003752 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d005      	beq.n	80034da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d130      	bne.n	800353c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	2203      	movs	r2, #3
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	43db      	mvns	r3, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4013      	ands	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4313      	orrs	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003510:	2201      	movs	r2, #1
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	43db      	mvns	r3, r3
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4013      	ands	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	091b      	lsrs	r3, r3, #4
 8003526:	f003 0201 	and.w	r2, r3, #1
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4313      	orrs	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 0303 	and.w	r3, r3, #3
 8003544:	2b03      	cmp	r3, #3
 8003546:	d017      	beq.n	8003578 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	2203      	movs	r2, #3
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	43db      	mvns	r3, r3
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4013      	ands	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4313      	orrs	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 0303 	and.w	r3, r3, #3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d123      	bne.n	80035cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	08da      	lsrs	r2, r3, #3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3208      	adds	r2, #8
 800358c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003590:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	220f      	movs	r2, #15
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	43db      	mvns	r3, r3
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4013      	ands	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	691a      	ldr	r2, [r3, #16]
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	08da      	lsrs	r2, r3, #3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	3208      	adds	r2, #8
 80035c6:	69b9      	ldr	r1, [r7, #24]
 80035c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	2203      	movs	r2, #3
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	43db      	mvns	r3, r3
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	4013      	ands	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f003 0203 	and.w	r2, r3, #3
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 80a2 	beq.w	8003752 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800360e:	2300      	movs	r3, #0
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	4b57      	ldr	r3, [pc, #348]	; (8003770 <HAL_GPIO_Init+0x2e8>)
 8003614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003616:	4a56      	ldr	r2, [pc, #344]	; (8003770 <HAL_GPIO_Init+0x2e8>)
 8003618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800361c:	6453      	str	r3, [r2, #68]	; 0x44
 800361e:	4b54      	ldr	r3, [pc, #336]	; (8003770 <HAL_GPIO_Init+0x2e8>)
 8003620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800362a:	4a52      	ldr	r2, [pc, #328]	; (8003774 <HAL_GPIO_Init+0x2ec>)
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	089b      	lsrs	r3, r3, #2
 8003630:	3302      	adds	r3, #2
 8003632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003636:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	220f      	movs	r2, #15
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	43db      	mvns	r3, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4013      	ands	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a49      	ldr	r2, [pc, #292]	; (8003778 <HAL_GPIO_Init+0x2f0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d019      	beq.n	800368a <HAL_GPIO_Init+0x202>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a48      	ldr	r2, [pc, #288]	; (800377c <HAL_GPIO_Init+0x2f4>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d013      	beq.n	8003686 <HAL_GPIO_Init+0x1fe>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a47      	ldr	r2, [pc, #284]	; (8003780 <HAL_GPIO_Init+0x2f8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d00d      	beq.n	8003682 <HAL_GPIO_Init+0x1fa>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a46      	ldr	r2, [pc, #280]	; (8003784 <HAL_GPIO_Init+0x2fc>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d007      	beq.n	800367e <HAL_GPIO_Init+0x1f6>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a45      	ldr	r2, [pc, #276]	; (8003788 <HAL_GPIO_Init+0x300>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d101      	bne.n	800367a <HAL_GPIO_Init+0x1f2>
 8003676:	2304      	movs	r3, #4
 8003678:	e008      	b.n	800368c <HAL_GPIO_Init+0x204>
 800367a:	2307      	movs	r3, #7
 800367c:	e006      	b.n	800368c <HAL_GPIO_Init+0x204>
 800367e:	2303      	movs	r3, #3
 8003680:	e004      	b.n	800368c <HAL_GPIO_Init+0x204>
 8003682:	2302      	movs	r3, #2
 8003684:	e002      	b.n	800368c <HAL_GPIO_Init+0x204>
 8003686:	2301      	movs	r3, #1
 8003688:	e000      	b.n	800368c <HAL_GPIO_Init+0x204>
 800368a:	2300      	movs	r3, #0
 800368c:	69fa      	ldr	r2, [r7, #28]
 800368e:	f002 0203 	and.w	r2, r2, #3
 8003692:	0092      	lsls	r2, r2, #2
 8003694:	4093      	lsls	r3, r2
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4313      	orrs	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800369c:	4935      	ldr	r1, [pc, #212]	; (8003774 <HAL_GPIO_Init+0x2ec>)
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	089b      	lsrs	r3, r3, #2
 80036a2:	3302      	adds	r3, #2
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036aa:	4b38      	ldr	r3, [pc, #224]	; (800378c <HAL_GPIO_Init+0x304>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	43db      	mvns	r3, r3
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4013      	ands	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036ce:	4a2f      	ldr	r2, [pc, #188]	; (800378c <HAL_GPIO_Init+0x304>)
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036d4:	4b2d      	ldr	r3, [pc, #180]	; (800378c <HAL_GPIO_Init+0x304>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	43db      	mvns	r3, r3
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4013      	ands	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036f8:	4a24      	ldr	r2, [pc, #144]	; (800378c <HAL_GPIO_Init+0x304>)
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036fe:	4b23      	ldr	r3, [pc, #140]	; (800378c <HAL_GPIO_Init+0x304>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	43db      	mvns	r3, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4013      	ands	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4313      	orrs	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003722:	4a1a      	ldr	r2, [pc, #104]	; (800378c <HAL_GPIO_Init+0x304>)
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003728:	4b18      	ldr	r3, [pc, #96]	; (800378c <HAL_GPIO_Init+0x304>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	43db      	mvns	r3, r3
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4013      	ands	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	4313      	orrs	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800374c:	4a0f      	ldr	r2, [pc, #60]	; (800378c <HAL_GPIO_Init+0x304>)
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	3301      	adds	r3, #1
 8003756:	61fb      	str	r3, [r7, #28]
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	2b0f      	cmp	r3, #15
 800375c:	f67f aea2 	bls.w	80034a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003760:	bf00      	nop
 8003762:	bf00      	nop
 8003764:	3724      	adds	r7, #36	; 0x24
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40023800 	.word	0x40023800
 8003774:	40013800 	.word	0x40013800
 8003778:	40020000 	.word	0x40020000
 800377c:	40020400 	.word	0x40020400
 8003780:	40020800 	.word	0x40020800
 8003784:	40020c00 	.word	0x40020c00
 8003788:	40021000 	.word	0x40021000
 800378c:	40013c00 	.word	0x40013c00

08003790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	460b      	mov	r3, r1
 800379a:	807b      	strh	r3, [r7, #2]
 800379c:	4613      	mov	r3, r2
 800379e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037a0:	787b      	ldrb	r3, [r7, #1]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037a6:	887a      	ldrh	r2, [r7, #2]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037ac:	e003      	b.n	80037b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037ae:	887b      	ldrh	r3, [r7, #2]
 80037b0:	041a      	lsls	r2, r3, #16
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	619a      	str	r2, [r3, #24]
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
	...

080037c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e267      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d075      	beq.n	80038ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037e2:	4b88      	ldr	r3, [pc, #544]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 030c 	and.w	r3, r3, #12
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d00c      	beq.n	8003808 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ee:	4b85      	ldr	r3, [pc, #532]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037f6:	2b08      	cmp	r3, #8
 80037f8:	d112      	bne.n	8003820 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037fa:	4b82      	ldr	r3, [pc, #520]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003802:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003806:	d10b      	bne.n	8003820 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003808:	4b7e      	ldr	r3, [pc, #504]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d05b      	beq.n	80038cc <HAL_RCC_OscConfig+0x108>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d157      	bne.n	80038cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e242      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003828:	d106      	bne.n	8003838 <HAL_RCC_OscConfig+0x74>
 800382a:	4b76      	ldr	r3, [pc, #472]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a75      	ldr	r2, [pc, #468]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 8003830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	e01d      	b.n	8003874 <HAL_RCC_OscConfig+0xb0>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003840:	d10c      	bne.n	800385c <HAL_RCC_OscConfig+0x98>
 8003842:	4b70      	ldr	r3, [pc, #448]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a6f      	ldr	r2, [pc, #444]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 8003848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	4b6d      	ldr	r3, [pc, #436]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a6c      	ldr	r2, [pc, #432]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 8003854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	e00b      	b.n	8003874 <HAL_RCC_OscConfig+0xb0>
 800385c:	4b69      	ldr	r3, [pc, #420]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a68      	ldr	r2, [pc, #416]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 8003862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003866:	6013      	str	r3, [r2, #0]
 8003868:	4b66      	ldr	r3, [pc, #408]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a65      	ldr	r2, [pc, #404]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 800386e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d013      	beq.n	80038a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387c:	f7ff fd12 	bl	80032a4 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003884:	f7ff fd0e 	bl	80032a4 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b64      	cmp	r3, #100	; 0x64
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e207      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003896:	4b5b      	ldr	r3, [pc, #364]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0f0      	beq.n	8003884 <HAL_RCC_OscConfig+0xc0>
 80038a2:	e014      	b.n	80038ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a4:	f7ff fcfe 	bl	80032a4 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038ac:	f7ff fcfa 	bl	80032a4 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b64      	cmp	r3, #100	; 0x64
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e1f3      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038be:	4b51      	ldr	r3, [pc, #324]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f0      	bne.n	80038ac <HAL_RCC_OscConfig+0xe8>
 80038ca:	e000      	b.n	80038ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d063      	beq.n	80039a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038da:	4b4a      	ldr	r3, [pc, #296]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 030c 	and.w	r3, r3, #12
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00b      	beq.n	80038fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038e6:	4b47      	ldr	r3, [pc, #284]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d11c      	bne.n	800392c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038f2:	4b44      	ldr	r3, [pc, #272]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d116      	bne.n	800392c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038fe:	4b41      	ldr	r3, [pc, #260]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d005      	beq.n	8003916 <HAL_RCC_OscConfig+0x152>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d001      	beq.n	8003916 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e1c7      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003916:	4b3b      	ldr	r3, [pc, #236]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	4937      	ldr	r1, [pc, #220]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 8003926:	4313      	orrs	r3, r2
 8003928:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800392a:	e03a      	b.n	80039a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d020      	beq.n	8003976 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003934:	4b34      	ldr	r3, [pc, #208]	; (8003a08 <HAL_RCC_OscConfig+0x244>)
 8003936:	2201      	movs	r2, #1
 8003938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393a:	f7ff fcb3 	bl	80032a4 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003942:	f7ff fcaf 	bl	80032a4 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e1a8      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003954:	4b2b      	ldr	r3, [pc, #172]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0f0      	beq.n	8003942 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003960:	4b28      	ldr	r3, [pc, #160]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	4925      	ldr	r1, [pc, #148]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 8003970:	4313      	orrs	r3, r2
 8003972:	600b      	str	r3, [r1, #0]
 8003974:	e015      	b.n	80039a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003976:	4b24      	ldr	r3, [pc, #144]	; (8003a08 <HAL_RCC_OscConfig+0x244>)
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397c:	f7ff fc92 	bl	80032a4 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003984:	f7ff fc8e 	bl	80032a4 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e187      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003996:	4b1b      	ldr	r3, [pc, #108]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1f0      	bne.n	8003984 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d036      	beq.n	8003a1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d016      	beq.n	80039e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039b6:	4b15      	ldr	r3, [pc, #84]	; (8003a0c <HAL_RCC_OscConfig+0x248>)
 80039b8:	2201      	movs	r2, #1
 80039ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039bc:	f7ff fc72 	bl	80032a4 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039c4:	f7ff fc6e 	bl	80032a4 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e167      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039d6:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 80039d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0f0      	beq.n	80039c4 <HAL_RCC_OscConfig+0x200>
 80039e2:	e01b      	b.n	8003a1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039e4:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <HAL_RCC_OscConfig+0x248>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ea:	f7ff fc5b 	bl	80032a4 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f0:	e00e      	b.n	8003a10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039f2:	f7ff fc57 	bl	80032a4 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d907      	bls.n	8003a10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e150      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
 8003a04:	40023800 	.word	0x40023800
 8003a08:	42470000 	.word	0x42470000
 8003a0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a10:	4b88      	ldr	r3, [pc, #544]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1ea      	bne.n	80039f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 8097 	beq.w	8003b58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a2e:	4b81      	ldr	r3, [pc, #516]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10f      	bne.n	8003a5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60bb      	str	r3, [r7, #8]
 8003a3e:	4b7d      	ldr	r3, [pc, #500]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	4a7c      	ldr	r2, [pc, #496]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a48:	6413      	str	r3, [r2, #64]	; 0x40
 8003a4a:	4b7a      	ldr	r3, [pc, #488]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a52:	60bb      	str	r3, [r7, #8]
 8003a54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a56:	2301      	movs	r3, #1
 8003a58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5a:	4b77      	ldr	r3, [pc, #476]	; (8003c38 <HAL_RCC_OscConfig+0x474>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d118      	bne.n	8003a98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a66:	4b74      	ldr	r3, [pc, #464]	; (8003c38 <HAL_RCC_OscConfig+0x474>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a73      	ldr	r2, [pc, #460]	; (8003c38 <HAL_RCC_OscConfig+0x474>)
 8003a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a72:	f7ff fc17 	bl	80032a4 <HAL_GetTick>
 8003a76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a78:	e008      	b.n	8003a8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a7a:	f7ff fc13 	bl	80032a4 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e10c      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a8c:	4b6a      	ldr	r3, [pc, #424]	; (8003c38 <HAL_RCC_OscConfig+0x474>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0f0      	beq.n	8003a7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d106      	bne.n	8003aae <HAL_RCC_OscConfig+0x2ea>
 8003aa0:	4b64      	ldr	r3, [pc, #400]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa4:	4a63      	ldr	r2, [pc, #396]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003aa6:	f043 0301 	orr.w	r3, r3, #1
 8003aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8003aac:	e01c      	b.n	8003ae8 <HAL_RCC_OscConfig+0x324>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	2b05      	cmp	r3, #5
 8003ab4:	d10c      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x30c>
 8003ab6:	4b5f      	ldr	r3, [pc, #380]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aba:	4a5e      	ldr	r2, [pc, #376]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003abc:	f043 0304 	orr.w	r3, r3, #4
 8003ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac2:	4b5c      	ldr	r3, [pc, #368]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac6:	4a5b      	ldr	r2, [pc, #364]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ace:	e00b      	b.n	8003ae8 <HAL_RCC_OscConfig+0x324>
 8003ad0:	4b58      	ldr	r3, [pc, #352]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad4:	4a57      	ldr	r2, [pc, #348]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003ad6:	f023 0301 	bic.w	r3, r3, #1
 8003ada:	6713      	str	r3, [r2, #112]	; 0x70
 8003adc:	4b55      	ldr	r3, [pc, #340]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae0:	4a54      	ldr	r2, [pc, #336]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003ae2:	f023 0304 	bic.w	r3, r3, #4
 8003ae6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d015      	beq.n	8003b1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af0:	f7ff fbd8 	bl	80032a4 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af6:	e00a      	b.n	8003b0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003af8:	f7ff fbd4 	bl	80032a4 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e0cb      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b0e:	4b49      	ldr	r3, [pc, #292]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d0ee      	beq.n	8003af8 <HAL_RCC_OscConfig+0x334>
 8003b1a:	e014      	b.n	8003b46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b1c:	f7ff fbc2 	bl	80032a4 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b22:	e00a      	b.n	8003b3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b24:	f7ff fbbe 	bl	80032a4 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e0b5      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b3a:	4b3e      	ldr	r3, [pc, #248]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1ee      	bne.n	8003b24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b46:	7dfb      	ldrb	r3, [r7, #23]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d105      	bne.n	8003b58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b4c:	4b39      	ldr	r3, [pc, #228]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	4a38      	ldr	r2, [pc, #224]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003b52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 80a1 	beq.w	8003ca4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b62:	4b34      	ldr	r3, [pc, #208]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 030c 	and.w	r3, r3, #12
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d05c      	beq.n	8003c28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d141      	bne.n	8003bfa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b76:	4b31      	ldr	r3, [pc, #196]	; (8003c3c <HAL_RCC_OscConfig+0x478>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7c:	f7ff fb92 	bl	80032a4 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b84:	f7ff fb8e 	bl	80032a4 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e087      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b96:	4b27      	ldr	r3, [pc, #156]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1f0      	bne.n	8003b84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69da      	ldr	r2, [r3, #28]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	019b      	lsls	r3, r3, #6
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb8:	085b      	lsrs	r3, r3, #1
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	041b      	lsls	r3, r3, #16
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc4:	061b      	lsls	r3, r3, #24
 8003bc6:	491b      	ldr	r1, [pc, #108]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bcc:	4b1b      	ldr	r3, [pc, #108]	; (8003c3c <HAL_RCC_OscConfig+0x478>)
 8003bce:	2201      	movs	r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd2:	f7ff fb67 	bl	80032a4 <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd8:	e008      	b.n	8003bec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bda:	f7ff fb63 	bl	80032a4 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e05c      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bec:	4b11      	ldr	r3, [pc, #68]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0f0      	beq.n	8003bda <HAL_RCC_OscConfig+0x416>
 8003bf8:	e054      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bfa:	4b10      	ldr	r3, [pc, #64]	; (8003c3c <HAL_RCC_OscConfig+0x478>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c00:	f7ff fb50 	bl	80032a4 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c08:	f7ff fb4c 	bl	80032a4 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e045      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c1a:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1f0      	bne.n	8003c08 <HAL_RCC_OscConfig+0x444>
 8003c26:	e03d      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d107      	bne.n	8003c40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e038      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
 8003c34:	40023800 	.word	0x40023800
 8003c38:	40007000 	.word	0x40007000
 8003c3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c40:	4b1b      	ldr	r3, [pc, #108]	; (8003cb0 <HAL_RCC_OscConfig+0x4ec>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d028      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d121      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d11a      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c70:	4013      	ands	r3, r2
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d111      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c86:	085b      	lsrs	r3, r3, #1
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d107      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e000      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40023800 	.word	0x40023800

08003cb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e0cc      	b.n	8003e62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cc8:	4b68      	ldr	r3, [pc, #416]	; (8003e6c <HAL_RCC_ClockConfig+0x1b8>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0307 	and.w	r3, r3, #7
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d90c      	bls.n	8003cf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cd6:	4b65      	ldr	r3, [pc, #404]	; (8003e6c <HAL_RCC_ClockConfig+0x1b8>)
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cde:	4b63      	ldr	r3, [pc, #396]	; (8003e6c <HAL_RCC_ClockConfig+0x1b8>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d001      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e0b8      	b.n	8003e62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d020      	beq.n	8003d3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d005      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d08:	4b59      	ldr	r3, [pc, #356]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	4a58      	ldr	r2, [pc, #352]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0308 	and.w	r3, r3, #8
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d005      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d20:	4b53      	ldr	r3, [pc, #332]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	4a52      	ldr	r2, [pc, #328]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d2c:	4b50      	ldr	r3, [pc, #320]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	494d      	ldr	r1, [pc, #308]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d044      	beq.n	8003dd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d107      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d52:	4b47      	ldr	r3, [pc, #284]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d119      	bne.n	8003d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e07f      	b.n	8003e62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d003      	beq.n	8003d72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d6e:	2b03      	cmp	r3, #3
 8003d70:	d107      	bne.n	8003d82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d72:	4b3f      	ldr	r3, [pc, #252]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d109      	bne.n	8003d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e06f      	b.n	8003e62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d82:	4b3b      	ldr	r3, [pc, #236]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e067      	b.n	8003e62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d92:	4b37      	ldr	r3, [pc, #220]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f023 0203 	bic.w	r2, r3, #3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	4934      	ldr	r1, [pc, #208]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003da4:	f7ff fa7e 	bl	80032a4 <HAL_GetTick>
 8003da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003daa:	e00a      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dac:	f7ff fa7a 	bl	80032a4 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e04f      	b.n	8003e62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dc2:	4b2b      	ldr	r3, [pc, #172]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 020c 	and.w	r2, r3, #12
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d1eb      	bne.n	8003dac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dd4:	4b25      	ldr	r3, [pc, #148]	; (8003e6c <HAL_RCC_ClockConfig+0x1b8>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d20c      	bcs.n	8003dfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de2:	4b22      	ldr	r3, [pc, #136]	; (8003e6c <HAL_RCC_ClockConfig+0x1b8>)
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dea:	4b20      	ldr	r3, [pc, #128]	; (8003e6c <HAL_RCC_ClockConfig+0x1b8>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d001      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e032      	b.n	8003e62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d008      	beq.n	8003e1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e08:	4b19      	ldr	r3, [pc, #100]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	4916      	ldr	r1, [pc, #88]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d009      	beq.n	8003e3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e26:	4b12      	ldr	r3, [pc, #72]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	490e      	ldr	r1, [pc, #56]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e3a:	f000 f821 	bl	8003e80 <HAL_RCC_GetSysClockFreq>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	091b      	lsrs	r3, r3, #4
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	490a      	ldr	r1, [pc, #40]	; (8003e74 <HAL_RCC_ClockConfig+0x1c0>)
 8003e4c:	5ccb      	ldrb	r3, [r1, r3]
 8003e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e52:	4a09      	ldr	r2, [pc, #36]	; (8003e78 <HAL_RCC_ClockConfig+0x1c4>)
 8003e54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e56:	4b09      	ldr	r3, [pc, #36]	; (8003e7c <HAL_RCC_ClockConfig+0x1c8>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff f9de 	bl	800321c <HAL_InitTick>

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40023c00 	.word	0x40023c00
 8003e70:	40023800 	.word	0x40023800
 8003e74:	080065bc 	.word	0x080065bc
 8003e78:	20000008 	.word	0x20000008
 8003e7c:	2000000c 	.word	0x2000000c

08003e80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e84:	b094      	sub	sp, #80	; 0x50
 8003e86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e90:	2300      	movs	r3, #0
 8003e92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e98:	4b79      	ldr	r3, [pc, #484]	; (8004080 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f003 030c 	and.w	r3, r3, #12
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d00d      	beq.n	8003ec0 <HAL_RCC_GetSysClockFreq+0x40>
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	f200 80e1 	bhi.w	800406c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x34>
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d003      	beq.n	8003eba <HAL_RCC_GetSysClockFreq+0x3a>
 8003eb2:	e0db      	b.n	800406c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003eb4:	4b73      	ldr	r3, [pc, #460]	; (8004084 <HAL_RCC_GetSysClockFreq+0x204>)
 8003eb6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003eb8:	e0db      	b.n	8004072 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003eba:	4b73      	ldr	r3, [pc, #460]	; (8004088 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ebc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ebe:	e0d8      	b.n	8004072 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ec0:	4b6f      	ldr	r3, [pc, #444]	; (8004080 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ec8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eca:	4b6d      	ldr	r3, [pc, #436]	; (8004080 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d063      	beq.n	8003f9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ed6:	4b6a      	ldr	r3, [pc, #424]	; (8004080 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	099b      	lsrs	r3, r3, #6
 8003edc:	2200      	movs	r2, #0
 8003ede:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ee0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ee8:	633b      	str	r3, [r7, #48]	; 0x30
 8003eea:	2300      	movs	r3, #0
 8003eec:	637b      	str	r3, [r7, #52]	; 0x34
 8003eee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ef2:	4622      	mov	r2, r4
 8003ef4:	462b      	mov	r3, r5
 8003ef6:	f04f 0000 	mov.w	r0, #0
 8003efa:	f04f 0100 	mov.w	r1, #0
 8003efe:	0159      	lsls	r1, r3, #5
 8003f00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f04:	0150      	lsls	r0, r2, #5
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4621      	mov	r1, r4
 8003f0c:	1a51      	subs	r1, r2, r1
 8003f0e:	6139      	str	r1, [r7, #16]
 8003f10:	4629      	mov	r1, r5
 8003f12:	eb63 0301 	sbc.w	r3, r3, r1
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	f04f 0300 	mov.w	r3, #0
 8003f20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f24:	4659      	mov	r1, fp
 8003f26:	018b      	lsls	r3, r1, #6
 8003f28:	4651      	mov	r1, sl
 8003f2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f2e:	4651      	mov	r1, sl
 8003f30:	018a      	lsls	r2, r1, #6
 8003f32:	4651      	mov	r1, sl
 8003f34:	ebb2 0801 	subs.w	r8, r2, r1
 8003f38:	4659      	mov	r1, fp
 8003f3a:	eb63 0901 	sbc.w	r9, r3, r1
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f52:	4690      	mov	r8, r2
 8003f54:	4699      	mov	r9, r3
 8003f56:	4623      	mov	r3, r4
 8003f58:	eb18 0303 	adds.w	r3, r8, r3
 8003f5c:	60bb      	str	r3, [r7, #8]
 8003f5e:	462b      	mov	r3, r5
 8003f60:	eb49 0303 	adc.w	r3, r9, r3
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	f04f 0200 	mov.w	r2, #0
 8003f6a:	f04f 0300 	mov.w	r3, #0
 8003f6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f72:	4629      	mov	r1, r5
 8003f74:	024b      	lsls	r3, r1, #9
 8003f76:	4621      	mov	r1, r4
 8003f78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f7c:	4621      	mov	r1, r4
 8003f7e:	024a      	lsls	r2, r1, #9
 8003f80:	4610      	mov	r0, r2
 8003f82:	4619      	mov	r1, r3
 8003f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f86:	2200      	movs	r2, #0
 8003f88:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f90:	f7fc feec 	bl	8000d6c <__aeabi_uldivmod>
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	4613      	mov	r3, r2
 8003f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f9c:	e058      	b.n	8004050 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f9e:	4b38      	ldr	r3, [pc, #224]	; (8004080 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	099b      	lsrs	r3, r3, #6
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	4611      	mov	r1, r2
 8003faa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fae:	623b      	str	r3, [r7, #32]
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fb8:	4642      	mov	r2, r8
 8003fba:	464b      	mov	r3, r9
 8003fbc:	f04f 0000 	mov.w	r0, #0
 8003fc0:	f04f 0100 	mov.w	r1, #0
 8003fc4:	0159      	lsls	r1, r3, #5
 8003fc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fca:	0150      	lsls	r0, r2, #5
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4641      	mov	r1, r8
 8003fd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fd6:	4649      	mov	r1, r9
 8003fd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fdc:	f04f 0200 	mov.w	r2, #0
 8003fe0:	f04f 0300 	mov.w	r3, #0
 8003fe4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fe8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ff0:	ebb2 040a 	subs.w	r4, r2, sl
 8003ff4:	eb63 050b 	sbc.w	r5, r3, fp
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	00eb      	lsls	r3, r5, #3
 8004002:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004006:	00e2      	lsls	r2, r4, #3
 8004008:	4614      	mov	r4, r2
 800400a:	461d      	mov	r5, r3
 800400c:	4643      	mov	r3, r8
 800400e:	18e3      	adds	r3, r4, r3
 8004010:	603b      	str	r3, [r7, #0]
 8004012:	464b      	mov	r3, r9
 8004014:	eb45 0303 	adc.w	r3, r5, r3
 8004018:	607b      	str	r3, [r7, #4]
 800401a:	f04f 0200 	mov.w	r2, #0
 800401e:	f04f 0300 	mov.w	r3, #0
 8004022:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004026:	4629      	mov	r1, r5
 8004028:	028b      	lsls	r3, r1, #10
 800402a:	4621      	mov	r1, r4
 800402c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004030:	4621      	mov	r1, r4
 8004032:	028a      	lsls	r2, r1, #10
 8004034:	4610      	mov	r0, r2
 8004036:	4619      	mov	r1, r3
 8004038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800403a:	2200      	movs	r2, #0
 800403c:	61bb      	str	r3, [r7, #24]
 800403e:	61fa      	str	r2, [r7, #28]
 8004040:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004044:	f7fc fe92 	bl	8000d6c <__aeabi_uldivmod>
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	4613      	mov	r3, r2
 800404e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004050:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <HAL_RCC_GetSysClockFreq+0x200>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	0c1b      	lsrs	r3, r3, #16
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	3301      	adds	r3, #1
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004060:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004064:	fbb2 f3f3 	udiv	r3, r2, r3
 8004068:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800406a:	e002      	b.n	8004072 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800406c:	4b05      	ldr	r3, [pc, #20]	; (8004084 <HAL_RCC_GetSysClockFreq+0x204>)
 800406e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004070:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004074:	4618      	mov	r0, r3
 8004076:	3750      	adds	r7, #80	; 0x50
 8004078:	46bd      	mov	sp, r7
 800407a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800407e:	bf00      	nop
 8004080:	40023800 	.word	0x40023800
 8004084:	00f42400 	.word	0x00f42400
 8004088:	007a1200 	.word	0x007a1200

0800408c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004090:	4b03      	ldr	r3, [pc, #12]	; (80040a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004092:	681b      	ldr	r3, [r3, #0]
}
 8004094:	4618      	mov	r0, r3
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	20000008 	.word	0x20000008

080040a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040a8:	f7ff fff0 	bl	800408c <HAL_RCC_GetHCLKFreq>
 80040ac:	4602      	mov	r2, r0
 80040ae:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	0a9b      	lsrs	r3, r3, #10
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	4903      	ldr	r1, [pc, #12]	; (80040c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040ba:	5ccb      	ldrb	r3, [r1, r3]
 80040bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40023800 	.word	0x40023800
 80040c8:	080065cc 	.word	0x080065cc

080040cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040d0:	f7ff ffdc 	bl	800408c <HAL_RCC_GetHCLKFreq>
 80040d4:	4602      	mov	r2, r0
 80040d6:	4b05      	ldr	r3, [pc, #20]	; (80040ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	0b5b      	lsrs	r3, r3, #13
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	4903      	ldr	r1, [pc, #12]	; (80040f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040e2:	5ccb      	ldrb	r3, [r1, r3]
 80040e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40023800 	.word	0x40023800
 80040f0:	080065cc 	.word	0x080065cc

080040f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e041      	b.n	800418a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d106      	bne.n	8004120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fe fa46 	bl	80025ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3304      	adds	r3, #4
 8004130:	4619      	mov	r1, r3
 8004132:	4610      	mov	r0, r2
 8004134:	f000 fc4e 	bl	80049d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d001      	beq.n	80041ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e044      	b.n	8004236 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a1e      	ldr	r2, [pc, #120]	; (8004244 <HAL_TIM_Base_Start_IT+0xb0>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d018      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x6c>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d6:	d013      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x6c>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a1a      	ldr	r2, [pc, #104]	; (8004248 <HAL_TIM_Base_Start_IT+0xb4>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d00e      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x6c>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a19      	ldr	r2, [pc, #100]	; (800424c <HAL_TIM_Base_Start_IT+0xb8>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d009      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x6c>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a17      	ldr	r2, [pc, #92]	; (8004250 <HAL_TIM_Base_Start_IT+0xbc>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d004      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x6c>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a16      	ldr	r2, [pc, #88]	; (8004254 <HAL_TIM_Base_Start_IT+0xc0>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d111      	bne.n	8004224 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2b06      	cmp	r3, #6
 8004210:	d010      	beq.n	8004234 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f042 0201 	orr.w	r2, r2, #1
 8004220:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004222:	e007      	b.n	8004234 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0201 	orr.w	r2, r2, #1
 8004232:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40010000 	.word	0x40010000
 8004248:	40000400 	.word	0x40000400
 800424c:	40000800 	.word	0x40000800
 8004250:	40000c00 	.word	0x40000c00
 8004254:	40014000 	.word	0x40014000

08004258 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e041      	b.n	80042ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d106      	bne.n	8004284 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7fe f92c 	bl	80024dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3304      	adds	r3, #4
 8004294:	4619      	mov	r1, r3
 8004296:	4610      	mov	r0, r2
 8004298:	f000 fb9c 	bl	80049d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
	...

080042f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d109      	bne.n	800431c <HAL_TIM_PWM_Start+0x24>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b01      	cmp	r3, #1
 8004312:	bf14      	ite	ne
 8004314:	2301      	movne	r3, #1
 8004316:	2300      	moveq	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	e022      	b.n	8004362 <HAL_TIM_PWM_Start+0x6a>
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2b04      	cmp	r3, #4
 8004320:	d109      	bne.n	8004336 <HAL_TIM_PWM_Start+0x3e>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b01      	cmp	r3, #1
 800432c:	bf14      	ite	ne
 800432e:	2301      	movne	r3, #1
 8004330:	2300      	moveq	r3, #0
 8004332:	b2db      	uxtb	r3, r3
 8004334:	e015      	b.n	8004362 <HAL_TIM_PWM_Start+0x6a>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b08      	cmp	r3, #8
 800433a:	d109      	bne.n	8004350 <HAL_TIM_PWM_Start+0x58>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b01      	cmp	r3, #1
 8004346:	bf14      	ite	ne
 8004348:	2301      	movne	r3, #1
 800434a:	2300      	moveq	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	e008      	b.n	8004362 <HAL_TIM_PWM_Start+0x6a>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b01      	cmp	r3, #1
 800435a:	bf14      	ite	ne
 800435c:	2301      	movne	r3, #1
 800435e:	2300      	moveq	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e068      	b.n	800443c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d104      	bne.n	800437a <HAL_TIM_PWM_Start+0x82>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004378:	e013      	b.n	80043a2 <HAL_TIM_PWM_Start+0xaa>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b04      	cmp	r3, #4
 800437e:	d104      	bne.n	800438a <HAL_TIM_PWM_Start+0x92>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004388:	e00b      	b.n	80043a2 <HAL_TIM_PWM_Start+0xaa>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	2b08      	cmp	r3, #8
 800438e:	d104      	bne.n	800439a <HAL_TIM_PWM_Start+0xa2>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004398:	e003      	b.n	80043a2 <HAL_TIM_PWM_Start+0xaa>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2202      	movs	r2, #2
 800439e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2201      	movs	r2, #1
 80043a8:	6839      	ldr	r1, [r7, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 fdb8 	bl	8004f20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a23      	ldr	r2, [pc, #140]	; (8004444 <HAL_TIM_PWM_Start+0x14c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d107      	bne.n	80043ca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a1d      	ldr	r2, [pc, #116]	; (8004444 <HAL_TIM_PWM_Start+0x14c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d018      	beq.n	8004406 <HAL_TIM_PWM_Start+0x10e>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043dc:	d013      	beq.n	8004406 <HAL_TIM_PWM_Start+0x10e>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a19      	ldr	r2, [pc, #100]	; (8004448 <HAL_TIM_PWM_Start+0x150>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d00e      	beq.n	8004406 <HAL_TIM_PWM_Start+0x10e>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a17      	ldr	r2, [pc, #92]	; (800444c <HAL_TIM_PWM_Start+0x154>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d009      	beq.n	8004406 <HAL_TIM_PWM_Start+0x10e>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a16      	ldr	r2, [pc, #88]	; (8004450 <HAL_TIM_PWM_Start+0x158>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d004      	beq.n	8004406 <HAL_TIM_PWM_Start+0x10e>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a14      	ldr	r2, [pc, #80]	; (8004454 <HAL_TIM_PWM_Start+0x15c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d111      	bne.n	800442a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f003 0307 	and.w	r3, r3, #7
 8004410:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2b06      	cmp	r3, #6
 8004416:	d010      	beq.n	800443a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0201 	orr.w	r2, r2, #1
 8004426:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004428:	e007      	b.n	800443a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f042 0201 	orr.w	r2, r2, #1
 8004438:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40010000 	.word	0x40010000
 8004448:	40000400 	.word	0x40000400
 800444c:	40000800 	.word	0x40000800
 8004450:	40000c00 	.word	0x40000c00
 8004454:	40014000 	.word	0x40014000

08004458 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e097      	b.n	800459c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d106      	bne.n	8004486 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7fe f84d 	bl	8002520 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2202      	movs	r2, #2
 800448a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6812      	ldr	r2, [r2, #0]
 8004498:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800449c:	f023 0307 	bic.w	r3, r3, #7
 80044a0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	3304      	adds	r3, #4
 80044aa:	4619      	mov	r1, r3
 80044ac:	4610      	mov	r0, r2
 80044ae:	f000 fa91 	bl	80049d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044da:	f023 0303 	bic.w	r3, r3, #3
 80044de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	021b      	lsls	r3, r3, #8
 80044ea:	4313      	orrs	r3, r2
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80044f8:	f023 030c 	bic.w	r3, r3, #12
 80044fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004504:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004508:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	68da      	ldr	r2, [r3, #12]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	021b      	lsls	r3, r3, #8
 8004514:	4313      	orrs	r3, r2
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	4313      	orrs	r3, r2
 800451a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	011a      	lsls	r2, r3, #4
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	031b      	lsls	r3, r3, #12
 8004528:	4313      	orrs	r3, r2
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4313      	orrs	r3, r2
 800452e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004536:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800453e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	4313      	orrs	r3, r2
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	4313      	orrs	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045bc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045c4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80045cc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d110      	bne.n	80045f6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d102      	bne.n	80045e0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80045da:	7b7b      	ldrb	r3, [r7, #13]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d001      	beq.n	80045e4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e069      	b.n	80046b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2202      	movs	r2, #2
 80045f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045f4:	e031      	b.n	800465a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b04      	cmp	r3, #4
 80045fa:	d110      	bne.n	800461e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80045fc:	7bbb      	ldrb	r3, [r7, #14]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d102      	bne.n	8004608 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004602:	7b3b      	ldrb	r3, [r7, #12]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d001      	beq.n	800460c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e055      	b.n	80046b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800461c:	e01d      	b.n	800465a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800461e:	7bfb      	ldrb	r3, [r7, #15]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d108      	bne.n	8004636 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004624:	7bbb      	ldrb	r3, [r7, #14]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d105      	bne.n	8004636 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800462a:	7b7b      	ldrb	r3, [r7, #13]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d102      	bne.n	8004636 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004630:	7b3b      	ldrb	r3, [r7, #12]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d001      	beq.n	800463a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e03e      	b.n	80046b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2202      	movs	r2, #2
 800463e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2202      	movs	r2, #2
 8004646:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2202      	movs	r2, #2
 800464e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2202      	movs	r2, #2
 8004656:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d003      	beq.n	8004668 <HAL_TIM_Encoder_Start+0xc4>
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	2b04      	cmp	r3, #4
 8004664:	d008      	beq.n	8004678 <HAL_TIM_Encoder_Start+0xd4>
 8004666:	e00f      	b.n	8004688 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2201      	movs	r2, #1
 800466e:	2100      	movs	r1, #0
 8004670:	4618      	mov	r0, r3
 8004672:	f000 fc55 	bl	8004f20 <TIM_CCxChannelCmd>
      break;
 8004676:	e016      	b.n	80046a6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2201      	movs	r2, #1
 800467e:	2104      	movs	r1, #4
 8004680:	4618      	mov	r0, r3
 8004682:	f000 fc4d 	bl	8004f20 <TIM_CCxChannelCmd>
      break;
 8004686:	e00e      	b.n	80046a6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2201      	movs	r2, #1
 800468e:	2100      	movs	r1, #0
 8004690:	4618      	mov	r0, r3
 8004692:	f000 fc45 	bl	8004f20 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2201      	movs	r2, #1
 800469c:	2104      	movs	r1, #4
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 fc3e 	bl	8004f20 <TIM_CCxChannelCmd>
      break;
 80046a4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0201 	orr.w	r2, r2, #1
 80046b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d101      	bne.n	80046de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046da:	2302      	movs	r3, #2
 80046dc:	e0ae      	b.n	800483c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b0c      	cmp	r3, #12
 80046ea:	f200 809f 	bhi.w	800482c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80046ee:	a201      	add	r2, pc, #4	; (adr r2, 80046f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f4:	08004729 	.word	0x08004729
 80046f8:	0800482d 	.word	0x0800482d
 80046fc:	0800482d 	.word	0x0800482d
 8004700:	0800482d 	.word	0x0800482d
 8004704:	08004769 	.word	0x08004769
 8004708:	0800482d 	.word	0x0800482d
 800470c:	0800482d 	.word	0x0800482d
 8004710:	0800482d 	.word	0x0800482d
 8004714:	080047ab 	.word	0x080047ab
 8004718:	0800482d 	.word	0x0800482d
 800471c:	0800482d 	.word	0x0800482d
 8004720:	0800482d 	.word	0x0800482d
 8004724:	080047eb 	.word	0x080047eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68b9      	ldr	r1, [r7, #8]
 800472e:	4618      	mov	r0, r3
 8004730:	f000 f9d0 	bl	8004ad4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699a      	ldr	r2, [r3, #24]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f042 0208 	orr.w	r2, r2, #8
 8004742:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	699a      	ldr	r2, [r3, #24]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 0204 	bic.w	r2, r2, #4
 8004752:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6999      	ldr	r1, [r3, #24]
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	691a      	ldr	r2, [r3, #16]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	619a      	str	r2, [r3, #24]
      break;
 8004766:	e064      	b.n	8004832 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68b9      	ldr	r1, [r7, #8]
 800476e:	4618      	mov	r0, r3
 8004770:	f000 fa16 	bl	8004ba0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	699a      	ldr	r2, [r3, #24]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004782:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	699a      	ldr	r2, [r3, #24]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004792:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6999      	ldr	r1, [r3, #24]
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	021a      	lsls	r2, r3, #8
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	619a      	str	r2, [r3, #24]
      break;
 80047a8:	e043      	b.n	8004832 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68b9      	ldr	r1, [r7, #8]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f000 fa61 	bl	8004c78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	69da      	ldr	r2, [r3, #28]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f042 0208 	orr.w	r2, r2, #8
 80047c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	69da      	ldr	r2, [r3, #28]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0204 	bic.w	r2, r2, #4
 80047d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	69d9      	ldr	r1, [r3, #28]
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	691a      	ldr	r2, [r3, #16]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	430a      	orrs	r2, r1
 80047e6:	61da      	str	r2, [r3, #28]
      break;
 80047e8:	e023      	b.n	8004832 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68b9      	ldr	r1, [r7, #8]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 faab 	bl	8004d4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69da      	ldr	r2, [r3, #28]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004804:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	69da      	ldr	r2, [r3, #28]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004814:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	69d9      	ldr	r1, [r3, #28]
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	021a      	lsls	r2, r3, #8
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	61da      	str	r2, [r3, #28]
      break;
 800482a:	e002      	b.n	8004832 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	75fb      	strb	r3, [r7, #23]
      break;
 8004830:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800483a:	7dfb      	ldrb	r3, [r7, #23]
}
 800483c:	4618      	mov	r0, r3
 800483e:	3718      	adds	r7, #24
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800484e:	2300      	movs	r3, #0
 8004850:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004858:	2b01      	cmp	r3, #1
 800485a:	d101      	bne.n	8004860 <HAL_TIM_ConfigClockSource+0x1c>
 800485c:	2302      	movs	r3, #2
 800485e:	e0b4      	b.n	80049ca <HAL_TIM_ConfigClockSource+0x186>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800487e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004886:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004898:	d03e      	beq.n	8004918 <HAL_TIM_ConfigClockSource+0xd4>
 800489a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800489e:	f200 8087 	bhi.w	80049b0 <HAL_TIM_ConfigClockSource+0x16c>
 80048a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a6:	f000 8086 	beq.w	80049b6 <HAL_TIM_ConfigClockSource+0x172>
 80048aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ae:	d87f      	bhi.n	80049b0 <HAL_TIM_ConfigClockSource+0x16c>
 80048b0:	2b70      	cmp	r3, #112	; 0x70
 80048b2:	d01a      	beq.n	80048ea <HAL_TIM_ConfigClockSource+0xa6>
 80048b4:	2b70      	cmp	r3, #112	; 0x70
 80048b6:	d87b      	bhi.n	80049b0 <HAL_TIM_ConfigClockSource+0x16c>
 80048b8:	2b60      	cmp	r3, #96	; 0x60
 80048ba:	d050      	beq.n	800495e <HAL_TIM_ConfigClockSource+0x11a>
 80048bc:	2b60      	cmp	r3, #96	; 0x60
 80048be:	d877      	bhi.n	80049b0 <HAL_TIM_ConfigClockSource+0x16c>
 80048c0:	2b50      	cmp	r3, #80	; 0x50
 80048c2:	d03c      	beq.n	800493e <HAL_TIM_ConfigClockSource+0xfa>
 80048c4:	2b50      	cmp	r3, #80	; 0x50
 80048c6:	d873      	bhi.n	80049b0 <HAL_TIM_ConfigClockSource+0x16c>
 80048c8:	2b40      	cmp	r3, #64	; 0x40
 80048ca:	d058      	beq.n	800497e <HAL_TIM_ConfigClockSource+0x13a>
 80048cc:	2b40      	cmp	r3, #64	; 0x40
 80048ce:	d86f      	bhi.n	80049b0 <HAL_TIM_ConfigClockSource+0x16c>
 80048d0:	2b30      	cmp	r3, #48	; 0x30
 80048d2:	d064      	beq.n	800499e <HAL_TIM_ConfigClockSource+0x15a>
 80048d4:	2b30      	cmp	r3, #48	; 0x30
 80048d6:	d86b      	bhi.n	80049b0 <HAL_TIM_ConfigClockSource+0x16c>
 80048d8:	2b20      	cmp	r3, #32
 80048da:	d060      	beq.n	800499e <HAL_TIM_ConfigClockSource+0x15a>
 80048dc:	2b20      	cmp	r3, #32
 80048de:	d867      	bhi.n	80049b0 <HAL_TIM_ConfigClockSource+0x16c>
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d05c      	beq.n	800499e <HAL_TIM_ConfigClockSource+0x15a>
 80048e4:	2b10      	cmp	r3, #16
 80048e6:	d05a      	beq.n	800499e <HAL_TIM_ConfigClockSource+0x15a>
 80048e8:	e062      	b.n	80049b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6818      	ldr	r0, [r3, #0]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	6899      	ldr	r1, [r3, #8]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f000 faf1 	bl	8004ee0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800490c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	609a      	str	r2, [r3, #8]
      break;
 8004916:	e04f      	b.n	80049b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6818      	ldr	r0, [r3, #0]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	6899      	ldr	r1, [r3, #8]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f000 fada 	bl	8004ee0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800493a:	609a      	str	r2, [r3, #8]
      break;
 800493c:	e03c      	b.n	80049b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6818      	ldr	r0, [r3, #0]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	6859      	ldr	r1, [r3, #4]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	461a      	mov	r2, r3
 800494c:	f000 fa4e 	bl	8004dec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2150      	movs	r1, #80	; 0x50
 8004956:	4618      	mov	r0, r3
 8004958:	f000 faa7 	bl	8004eaa <TIM_ITRx_SetConfig>
      break;
 800495c:	e02c      	b.n	80049b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6818      	ldr	r0, [r3, #0]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	6859      	ldr	r1, [r3, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	461a      	mov	r2, r3
 800496c:	f000 fa6d 	bl	8004e4a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2160      	movs	r1, #96	; 0x60
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fa97 	bl	8004eaa <TIM_ITRx_SetConfig>
      break;
 800497c:	e01c      	b.n	80049b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6818      	ldr	r0, [r3, #0]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	6859      	ldr	r1, [r3, #4]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	461a      	mov	r2, r3
 800498c:	f000 fa2e 	bl	8004dec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2140      	movs	r1, #64	; 0x40
 8004996:	4618      	mov	r0, r3
 8004998:	f000 fa87 	bl	8004eaa <TIM_ITRx_SetConfig>
      break;
 800499c:	e00c      	b.n	80049b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4619      	mov	r1, r3
 80049a8:	4610      	mov	r0, r2
 80049aa:	f000 fa7e 	bl	8004eaa <TIM_ITRx_SetConfig>
      break;
 80049ae:	e003      	b.n	80049b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	73fb      	strb	r3, [r7, #15]
      break;
 80049b4:	e000      	b.n	80049b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
	...

080049d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a34      	ldr	r2, [pc, #208]	; (8004ab8 <TIM_Base_SetConfig+0xe4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d00f      	beq.n	8004a0c <TIM_Base_SetConfig+0x38>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f2:	d00b      	beq.n	8004a0c <TIM_Base_SetConfig+0x38>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a31      	ldr	r2, [pc, #196]	; (8004abc <TIM_Base_SetConfig+0xe8>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d007      	beq.n	8004a0c <TIM_Base_SetConfig+0x38>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a30      	ldr	r2, [pc, #192]	; (8004ac0 <TIM_Base_SetConfig+0xec>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d003      	beq.n	8004a0c <TIM_Base_SetConfig+0x38>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a2f      	ldr	r2, [pc, #188]	; (8004ac4 <TIM_Base_SetConfig+0xf0>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d108      	bne.n	8004a1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a25      	ldr	r2, [pc, #148]	; (8004ab8 <TIM_Base_SetConfig+0xe4>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d01b      	beq.n	8004a5e <TIM_Base_SetConfig+0x8a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a2c:	d017      	beq.n	8004a5e <TIM_Base_SetConfig+0x8a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a22      	ldr	r2, [pc, #136]	; (8004abc <TIM_Base_SetConfig+0xe8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d013      	beq.n	8004a5e <TIM_Base_SetConfig+0x8a>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a21      	ldr	r2, [pc, #132]	; (8004ac0 <TIM_Base_SetConfig+0xec>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d00f      	beq.n	8004a5e <TIM_Base_SetConfig+0x8a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a20      	ldr	r2, [pc, #128]	; (8004ac4 <TIM_Base_SetConfig+0xf0>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d00b      	beq.n	8004a5e <TIM_Base_SetConfig+0x8a>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a1f      	ldr	r2, [pc, #124]	; (8004ac8 <TIM_Base_SetConfig+0xf4>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d007      	beq.n	8004a5e <TIM_Base_SetConfig+0x8a>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a1e      	ldr	r2, [pc, #120]	; (8004acc <TIM_Base_SetConfig+0xf8>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d003      	beq.n	8004a5e <TIM_Base_SetConfig+0x8a>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a1d      	ldr	r2, [pc, #116]	; (8004ad0 <TIM_Base_SetConfig+0xfc>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d108      	bne.n	8004a70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a08      	ldr	r2, [pc, #32]	; (8004ab8 <TIM_Base_SetConfig+0xe4>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d103      	bne.n	8004aa4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	691a      	ldr	r2, [r3, #16]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	615a      	str	r2, [r3, #20]
}
 8004aaa:	bf00      	nop
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	40010000 	.word	0x40010000
 8004abc:	40000400 	.word	0x40000400
 8004ac0:	40000800 	.word	0x40000800
 8004ac4:	40000c00 	.word	0x40000c00
 8004ac8:	40014000 	.word	0x40014000
 8004acc:	40014400 	.word	0x40014400
 8004ad0:	40014800 	.word	0x40014800

08004ad4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	f023 0201 	bic.w	r2, r3, #1
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 0303 	bic.w	r3, r3, #3
 8004b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f023 0302 	bic.w	r3, r3, #2
 8004b1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a1c      	ldr	r2, [pc, #112]	; (8004b9c <TIM_OC1_SetConfig+0xc8>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d10c      	bne.n	8004b4a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f023 0308 	bic.w	r3, r3, #8
 8004b36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f023 0304 	bic.w	r3, r3, #4
 8004b48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a13      	ldr	r2, [pc, #76]	; (8004b9c <TIM_OC1_SetConfig+0xc8>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d111      	bne.n	8004b76 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	621a      	str	r2, [r3, #32]
}
 8004b90:	bf00      	nop
 8004b92:	371c      	adds	r7, #28
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	40010000 	.word	0x40010000

08004ba0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	f023 0210 	bic.w	r2, r3, #16
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	021b      	lsls	r3, r3, #8
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f023 0320 	bic.w	r3, r3, #32
 8004bea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	011b      	lsls	r3, r3, #4
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a1e      	ldr	r2, [pc, #120]	; (8004c74 <TIM_OC2_SetConfig+0xd4>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d10d      	bne.n	8004c1c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	011b      	lsls	r3, r3, #4
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a15      	ldr	r2, [pc, #84]	; (8004c74 <TIM_OC2_SetConfig+0xd4>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d113      	bne.n	8004c4c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	621a      	str	r2, [r3, #32]
}
 8004c66:	bf00      	nop
 8004c68:	371c      	adds	r7, #28
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	40010000 	.word	0x40010000

08004c78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b087      	sub	sp, #28
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f023 0303 	bic.w	r3, r3, #3
 8004cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	021b      	lsls	r3, r3, #8
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a1d      	ldr	r2, [pc, #116]	; (8004d48 <TIM_OC3_SetConfig+0xd0>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d10d      	bne.n	8004cf2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	021b      	lsls	r3, r3, #8
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a14      	ldr	r2, [pc, #80]	; (8004d48 <TIM_OC3_SetConfig+0xd0>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d113      	bne.n	8004d22 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	011b      	lsls	r3, r3, #4
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	011b      	lsls	r3, r3, #4
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	621a      	str	r2, [r3, #32]
}
 8004d3c:	bf00      	nop
 8004d3e:	371c      	adds	r7, #28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	40010000 	.word	0x40010000

08004d4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	021b      	lsls	r3, r3, #8
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	031b      	lsls	r3, r3, #12
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a10      	ldr	r2, [pc, #64]	; (8004de8 <TIM_OC4_SetConfig+0x9c>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d109      	bne.n	8004dc0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004db2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	019b      	lsls	r3, r3, #6
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	621a      	str	r2, [r3, #32]
}
 8004dda:	bf00      	nop
 8004ddc:	371c      	adds	r7, #28
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	40010000 	.word	0x40010000

08004dec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	f023 0201 	bic.w	r2, r3, #1
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	011b      	lsls	r3, r3, #4
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f023 030a 	bic.w	r3, r3, #10
 8004e28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	621a      	str	r2, [r3, #32]
}
 8004e3e:	bf00      	nop
 8004e40:	371c      	adds	r7, #28
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b087      	sub	sp, #28
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	60f8      	str	r0, [r7, #12]
 8004e52:	60b9      	str	r1, [r7, #8]
 8004e54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	f023 0210 	bic.w	r2, r3, #16
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	031b      	lsls	r3, r3, #12
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	621a      	str	r2, [r3, #32]
}
 8004e9e:	bf00      	nop
 8004ea0:	371c      	adds	r7, #28
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b085      	sub	sp, #20
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
 8004eb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f043 0307 	orr.w	r3, r3, #7
 8004ecc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	609a      	str	r2, [r3, #8]
}
 8004ed4:	bf00      	nop
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
 8004eec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004efa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	021a      	lsls	r2, r3, #8
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	431a      	orrs	r2, r3
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	609a      	str	r2, [r3, #8]
}
 8004f14:	bf00      	nop
 8004f16:	371c      	adds	r7, #28
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	f003 031f 	and.w	r3, r3, #31
 8004f32:	2201      	movs	r2, #1
 8004f34:	fa02 f303 	lsl.w	r3, r2, r3
 8004f38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6a1a      	ldr	r2, [r3, #32]
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	43db      	mvns	r3, r3
 8004f42:	401a      	ands	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a1a      	ldr	r2, [r3, #32]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	f003 031f 	and.w	r3, r3, #31
 8004f52:	6879      	ldr	r1, [r7, #4]
 8004f54:	fa01 f303 	lsl.w	r3, r1, r3
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	621a      	str	r2, [r3, #32]
}
 8004f5e:	bf00      	nop
 8004f60:	371c      	adds	r7, #28
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
	...

08004f6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d101      	bne.n	8004f84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f80:	2302      	movs	r3, #2
 8004f82:	e050      	b.n	8005026 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004faa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a1c      	ldr	r2, [pc, #112]	; (8005034 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d018      	beq.n	8004ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd0:	d013      	beq.n	8004ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a18      	ldr	r2, [pc, #96]	; (8005038 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d00e      	beq.n	8004ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a16      	ldr	r2, [pc, #88]	; (800503c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d009      	beq.n	8004ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a15      	ldr	r2, [pc, #84]	; (8005040 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d004      	beq.n	8004ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a13      	ldr	r2, [pc, #76]	; (8005044 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d10c      	bne.n	8005014 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005000:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	4313      	orrs	r3, r2
 800500a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	40010000 	.word	0x40010000
 8005038:	40000400 	.word	0x40000400
 800503c:	40000800 	.word	0x40000800
 8005040:	40000c00 	.word	0x40000c00
 8005044:	40014000 	.word	0x40014000

08005048 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005052:	2300      	movs	r3, #0
 8005054:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800505c:	2b01      	cmp	r3, #1
 800505e:	d101      	bne.n	8005064 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005060:	2302      	movs	r3, #2
 8005062:	e03d      	b.n	80050e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	4313      	orrs	r3, r2
 8005086:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	4313      	orrs	r3, r2
 8005094:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	4313      	orrs	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e03f      	b.n	800517e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d106      	bne.n	8005118 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7fd fabc 	bl	8002690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2224      	movs	r2, #36	; 0x24
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68da      	ldr	r2, [r3, #12]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800512e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f829 	bl	8005188 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	691a      	ldr	r2, [r3, #16]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005144:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	695a      	ldr	r2, [r3, #20]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005154:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68da      	ldr	r2, [r3, #12]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005164:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2220      	movs	r2, #32
 8005178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
	...

08005188 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800518c:	b0c0      	sub	sp, #256	; 0x100
 800518e:	af00      	add	r7, sp, #0
 8005190:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80051a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a4:	68d9      	ldr	r1, [r3, #12]
 80051a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	ea40 0301 	orr.w	r3, r0, r1
 80051b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b6:	689a      	ldr	r2, [r3, #8]
 80051b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	431a      	orrs	r2, r3
 80051c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	431a      	orrs	r2, r3
 80051c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80051d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80051e0:	f021 010c 	bic.w	r1, r1, #12
 80051e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051ee:	430b      	orrs	r3, r1
 80051f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80051fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005202:	6999      	ldr	r1, [r3, #24]
 8005204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	ea40 0301 	orr.w	r3, r0, r1
 800520e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	4b8f      	ldr	r3, [pc, #572]	; (8005454 <UART_SetConfig+0x2cc>)
 8005218:	429a      	cmp	r2, r3
 800521a:	d005      	beq.n	8005228 <UART_SetConfig+0xa0>
 800521c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	4b8d      	ldr	r3, [pc, #564]	; (8005458 <UART_SetConfig+0x2d0>)
 8005224:	429a      	cmp	r2, r3
 8005226:	d104      	bne.n	8005232 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005228:	f7fe ff50 	bl	80040cc <HAL_RCC_GetPCLK2Freq>
 800522c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005230:	e003      	b.n	800523a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005232:	f7fe ff37 	bl	80040a4 <HAL_RCC_GetPCLK1Freq>
 8005236:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800523a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800523e:	69db      	ldr	r3, [r3, #28]
 8005240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005244:	f040 810c 	bne.w	8005460 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005248:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800524c:	2200      	movs	r2, #0
 800524e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005252:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005256:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800525a:	4622      	mov	r2, r4
 800525c:	462b      	mov	r3, r5
 800525e:	1891      	adds	r1, r2, r2
 8005260:	65b9      	str	r1, [r7, #88]	; 0x58
 8005262:	415b      	adcs	r3, r3
 8005264:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005266:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800526a:	4621      	mov	r1, r4
 800526c:	eb12 0801 	adds.w	r8, r2, r1
 8005270:	4629      	mov	r1, r5
 8005272:	eb43 0901 	adc.w	r9, r3, r1
 8005276:	f04f 0200 	mov.w	r2, #0
 800527a:	f04f 0300 	mov.w	r3, #0
 800527e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005282:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005286:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800528a:	4690      	mov	r8, r2
 800528c:	4699      	mov	r9, r3
 800528e:	4623      	mov	r3, r4
 8005290:	eb18 0303 	adds.w	r3, r8, r3
 8005294:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005298:	462b      	mov	r3, r5
 800529a:	eb49 0303 	adc.w	r3, r9, r3
 800529e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80052a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80052b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80052b6:	460b      	mov	r3, r1
 80052b8:	18db      	adds	r3, r3, r3
 80052ba:	653b      	str	r3, [r7, #80]	; 0x50
 80052bc:	4613      	mov	r3, r2
 80052be:	eb42 0303 	adc.w	r3, r2, r3
 80052c2:	657b      	str	r3, [r7, #84]	; 0x54
 80052c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80052c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80052cc:	f7fb fd4e 	bl	8000d6c <__aeabi_uldivmod>
 80052d0:	4602      	mov	r2, r0
 80052d2:	460b      	mov	r3, r1
 80052d4:	4b61      	ldr	r3, [pc, #388]	; (800545c <UART_SetConfig+0x2d4>)
 80052d6:	fba3 2302 	umull	r2, r3, r3, r2
 80052da:	095b      	lsrs	r3, r3, #5
 80052dc:	011c      	lsls	r4, r3, #4
 80052de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052e2:	2200      	movs	r2, #0
 80052e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80052ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80052f0:	4642      	mov	r2, r8
 80052f2:	464b      	mov	r3, r9
 80052f4:	1891      	adds	r1, r2, r2
 80052f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80052f8:	415b      	adcs	r3, r3
 80052fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005300:	4641      	mov	r1, r8
 8005302:	eb12 0a01 	adds.w	sl, r2, r1
 8005306:	4649      	mov	r1, r9
 8005308:	eb43 0b01 	adc.w	fp, r3, r1
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	f04f 0300 	mov.w	r3, #0
 8005314:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005318:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800531c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005320:	4692      	mov	sl, r2
 8005322:	469b      	mov	fp, r3
 8005324:	4643      	mov	r3, r8
 8005326:	eb1a 0303 	adds.w	r3, sl, r3
 800532a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800532e:	464b      	mov	r3, r9
 8005330:	eb4b 0303 	adc.w	r3, fp, r3
 8005334:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005344:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005348:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800534c:	460b      	mov	r3, r1
 800534e:	18db      	adds	r3, r3, r3
 8005350:	643b      	str	r3, [r7, #64]	; 0x40
 8005352:	4613      	mov	r3, r2
 8005354:	eb42 0303 	adc.w	r3, r2, r3
 8005358:	647b      	str	r3, [r7, #68]	; 0x44
 800535a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800535e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005362:	f7fb fd03 	bl	8000d6c <__aeabi_uldivmod>
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	4611      	mov	r1, r2
 800536c:	4b3b      	ldr	r3, [pc, #236]	; (800545c <UART_SetConfig+0x2d4>)
 800536e:	fba3 2301 	umull	r2, r3, r3, r1
 8005372:	095b      	lsrs	r3, r3, #5
 8005374:	2264      	movs	r2, #100	; 0x64
 8005376:	fb02 f303 	mul.w	r3, r2, r3
 800537a:	1acb      	subs	r3, r1, r3
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005382:	4b36      	ldr	r3, [pc, #216]	; (800545c <UART_SetConfig+0x2d4>)
 8005384:	fba3 2302 	umull	r2, r3, r3, r2
 8005388:	095b      	lsrs	r3, r3, #5
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005390:	441c      	add	r4, r3
 8005392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005396:	2200      	movs	r2, #0
 8005398:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800539c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80053a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80053a4:	4642      	mov	r2, r8
 80053a6:	464b      	mov	r3, r9
 80053a8:	1891      	adds	r1, r2, r2
 80053aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80053ac:	415b      	adcs	r3, r3
 80053ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80053b4:	4641      	mov	r1, r8
 80053b6:	1851      	adds	r1, r2, r1
 80053b8:	6339      	str	r1, [r7, #48]	; 0x30
 80053ba:	4649      	mov	r1, r9
 80053bc:	414b      	adcs	r3, r1
 80053be:	637b      	str	r3, [r7, #52]	; 0x34
 80053c0:	f04f 0200 	mov.w	r2, #0
 80053c4:	f04f 0300 	mov.w	r3, #0
 80053c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80053cc:	4659      	mov	r1, fp
 80053ce:	00cb      	lsls	r3, r1, #3
 80053d0:	4651      	mov	r1, sl
 80053d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053d6:	4651      	mov	r1, sl
 80053d8:	00ca      	lsls	r2, r1, #3
 80053da:	4610      	mov	r0, r2
 80053dc:	4619      	mov	r1, r3
 80053de:	4603      	mov	r3, r0
 80053e0:	4642      	mov	r2, r8
 80053e2:	189b      	adds	r3, r3, r2
 80053e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053e8:	464b      	mov	r3, r9
 80053ea:	460a      	mov	r2, r1
 80053ec:	eb42 0303 	adc.w	r3, r2, r3
 80053f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005400:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005404:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005408:	460b      	mov	r3, r1
 800540a:	18db      	adds	r3, r3, r3
 800540c:	62bb      	str	r3, [r7, #40]	; 0x28
 800540e:	4613      	mov	r3, r2
 8005410:	eb42 0303 	adc.w	r3, r2, r3
 8005414:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005416:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800541a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800541e:	f7fb fca5 	bl	8000d6c <__aeabi_uldivmod>
 8005422:	4602      	mov	r2, r0
 8005424:	460b      	mov	r3, r1
 8005426:	4b0d      	ldr	r3, [pc, #52]	; (800545c <UART_SetConfig+0x2d4>)
 8005428:	fba3 1302 	umull	r1, r3, r3, r2
 800542c:	095b      	lsrs	r3, r3, #5
 800542e:	2164      	movs	r1, #100	; 0x64
 8005430:	fb01 f303 	mul.w	r3, r1, r3
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	00db      	lsls	r3, r3, #3
 8005438:	3332      	adds	r3, #50	; 0x32
 800543a:	4a08      	ldr	r2, [pc, #32]	; (800545c <UART_SetConfig+0x2d4>)
 800543c:	fba2 2303 	umull	r2, r3, r2, r3
 8005440:	095b      	lsrs	r3, r3, #5
 8005442:	f003 0207 	and.w	r2, r3, #7
 8005446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4422      	add	r2, r4
 800544e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005450:	e105      	b.n	800565e <UART_SetConfig+0x4d6>
 8005452:	bf00      	nop
 8005454:	40011000 	.word	0x40011000
 8005458:	40011400 	.word	0x40011400
 800545c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005460:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005464:	2200      	movs	r2, #0
 8005466:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800546a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800546e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005472:	4642      	mov	r2, r8
 8005474:	464b      	mov	r3, r9
 8005476:	1891      	adds	r1, r2, r2
 8005478:	6239      	str	r1, [r7, #32]
 800547a:	415b      	adcs	r3, r3
 800547c:	627b      	str	r3, [r7, #36]	; 0x24
 800547e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005482:	4641      	mov	r1, r8
 8005484:	1854      	adds	r4, r2, r1
 8005486:	4649      	mov	r1, r9
 8005488:	eb43 0501 	adc.w	r5, r3, r1
 800548c:	f04f 0200 	mov.w	r2, #0
 8005490:	f04f 0300 	mov.w	r3, #0
 8005494:	00eb      	lsls	r3, r5, #3
 8005496:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800549a:	00e2      	lsls	r2, r4, #3
 800549c:	4614      	mov	r4, r2
 800549e:	461d      	mov	r5, r3
 80054a0:	4643      	mov	r3, r8
 80054a2:	18e3      	adds	r3, r4, r3
 80054a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80054a8:	464b      	mov	r3, r9
 80054aa:	eb45 0303 	adc.w	r3, r5, r3
 80054ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80054b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80054be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054c2:	f04f 0200 	mov.w	r2, #0
 80054c6:	f04f 0300 	mov.w	r3, #0
 80054ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80054ce:	4629      	mov	r1, r5
 80054d0:	008b      	lsls	r3, r1, #2
 80054d2:	4621      	mov	r1, r4
 80054d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054d8:	4621      	mov	r1, r4
 80054da:	008a      	lsls	r2, r1, #2
 80054dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80054e0:	f7fb fc44 	bl	8000d6c <__aeabi_uldivmod>
 80054e4:	4602      	mov	r2, r0
 80054e6:	460b      	mov	r3, r1
 80054e8:	4b60      	ldr	r3, [pc, #384]	; (800566c <UART_SetConfig+0x4e4>)
 80054ea:	fba3 2302 	umull	r2, r3, r3, r2
 80054ee:	095b      	lsrs	r3, r3, #5
 80054f0:	011c      	lsls	r4, r3, #4
 80054f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054f6:	2200      	movs	r2, #0
 80054f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80054fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005500:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005504:	4642      	mov	r2, r8
 8005506:	464b      	mov	r3, r9
 8005508:	1891      	adds	r1, r2, r2
 800550a:	61b9      	str	r1, [r7, #24]
 800550c:	415b      	adcs	r3, r3
 800550e:	61fb      	str	r3, [r7, #28]
 8005510:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005514:	4641      	mov	r1, r8
 8005516:	1851      	adds	r1, r2, r1
 8005518:	6139      	str	r1, [r7, #16]
 800551a:	4649      	mov	r1, r9
 800551c:	414b      	adcs	r3, r1
 800551e:	617b      	str	r3, [r7, #20]
 8005520:	f04f 0200 	mov.w	r2, #0
 8005524:	f04f 0300 	mov.w	r3, #0
 8005528:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800552c:	4659      	mov	r1, fp
 800552e:	00cb      	lsls	r3, r1, #3
 8005530:	4651      	mov	r1, sl
 8005532:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005536:	4651      	mov	r1, sl
 8005538:	00ca      	lsls	r2, r1, #3
 800553a:	4610      	mov	r0, r2
 800553c:	4619      	mov	r1, r3
 800553e:	4603      	mov	r3, r0
 8005540:	4642      	mov	r2, r8
 8005542:	189b      	adds	r3, r3, r2
 8005544:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005548:	464b      	mov	r3, r9
 800554a:	460a      	mov	r2, r1
 800554c:	eb42 0303 	adc.w	r3, r2, r3
 8005550:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	67bb      	str	r3, [r7, #120]	; 0x78
 800555e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005560:	f04f 0200 	mov.w	r2, #0
 8005564:	f04f 0300 	mov.w	r3, #0
 8005568:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800556c:	4649      	mov	r1, r9
 800556e:	008b      	lsls	r3, r1, #2
 8005570:	4641      	mov	r1, r8
 8005572:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005576:	4641      	mov	r1, r8
 8005578:	008a      	lsls	r2, r1, #2
 800557a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800557e:	f7fb fbf5 	bl	8000d6c <__aeabi_uldivmod>
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	4b39      	ldr	r3, [pc, #228]	; (800566c <UART_SetConfig+0x4e4>)
 8005588:	fba3 1302 	umull	r1, r3, r3, r2
 800558c:	095b      	lsrs	r3, r3, #5
 800558e:	2164      	movs	r1, #100	; 0x64
 8005590:	fb01 f303 	mul.w	r3, r1, r3
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	011b      	lsls	r3, r3, #4
 8005598:	3332      	adds	r3, #50	; 0x32
 800559a:	4a34      	ldr	r2, [pc, #208]	; (800566c <UART_SetConfig+0x4e4>)
 800559c:	fba2 2303 	umull	r2, r3, r2, r3
 80055a0:	095b      	lsrs	r3, r3, #5
 80055a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055a6:	441c      	add	r4, r3
 80055a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055ac:	2200      	movs	r2, #0
 80055ae:	673b      	str	r3, [r7, #112]	; 0x70
 80055b0:	677a      	str	r2, [r7, #116]	; 0x74
 80055b2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80055b6:	4642      	mov	r2, r8
 80055b8:	464b      	mov	r3, r9
 80055ba:	1891      	adds	r1, r2, r2
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	415b      	adcs	r3, r3
 80055c0:	60fb      	str	r3, [r7, #12]
 80055c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055c6:	4641      	mov	r1, r8
 80055c8:	1851      	adds	r1, r2, r1
 80055ca:	6039      	str	r1, [r7, #0]
 80055cc:	4649      	mov	r1, r9
 80055ce:	414b      	adcs	r3, r1
 80055d0:	607b      	str	r3, [r7, #4]
 80055d2:	f04f 0200 	mov.w	r2, #0
 80055d6:	f04f 0300 	mov.w	r3, #0
 80055da:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80055de:	4659      	mov	r1, fp
 80055e0:	00cb      	lsls	r3, r1, #3
 80055e2:	4651      	mov	r1, sl
 80055e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055e8:	4651      	mov	r1, sl
 80055ea:	00ca      	lsls	r2, r1, #3
 80055ec:	4610      	mov	r0, r2
 80055ee:	4619      	mov	r1, r3
 80055f0:	4603      	mov	r3, r0
 80055f2:	4642      	mov	r2, r8
 80055f4:	189b      	adds	r3, r3, r2
 80055f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80055f8:	464b      	mov	r3, r9
 80055fa:	460a      	mov	r2, r1
 80055fc:	eb42 0303 	adc.w	r3, r2, r3
 8005600:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	663b      	str	r3, [r7, #96]	; 0x60
 800560c:	667a      	str	r2, [r7, #100]	; 0x64
 800560e:	f04f 0200 	mov.w	r2, #0
 8005612:	f04f 0300 	mov.w	r3, #0
 8005616:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800561a:	4649      	mov	r1, r9
 800561c:	008b      	lsls	r3, r1, #2
 800561e:	4641      	mov	r1, r8
 8005620:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005624:	4641      	mov	r1, r8
 8005626:	008a      	lsls	r2, r1, #2
 8005628:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800562c:	f7fb fb9e 	bl	8000d6c <__aeabi_uldivmod>
 8005630:	4602      	mov	r2, r0
 8005632:	460b      	mov	r3, r1
 8005634:	4b0d      	ldr	r3, [pc, #52]	; (800566c <UART_SetConfig+0x4e4>)
 8005636:	fba3 1302 	umull	r1, r3, r3, r2
 800563a:	095b      	lsrs	r3, r3, #5
 800563c:	2164      	movs	r1, #100	; 0x64
 800563e:	fb01 f303 	mul.w	r3, r1, r3
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	011b      	lsls	r3, r3, #4
 8005646:	3332      	adds	r3, #50	; 0x32
 8005648:	4a08      	ldr	r2, [pc, #32]	; (800566c <UART_SetConfig+0x4e4>)
 800564a:	fba2 2303 	umull	r2, r3, r2, r3
 800564e:	095b      	lsrs	r3, r3, #5
 8005650:	f003 020f 	and.w	r2, r3, #15
 8005654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4422      	add	r2, r4
 800565c:	609a      	str	r2, [r3, #8]
}
 800565e:	bf00      	nop
 8005660:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005664:	46bd      	mov	sp, r7
 8005666:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800566a:	bf00      	nop
 800566c:	51eb851f 	.word	0x51eb851f

08005670 <__errno>:
 8005670:	4b01      	ldr	r3, [pc, #4]	; (8005678 <__errno+0x8>)
 8005672:	6818      	ldr	r0, [r3, #0]
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	20000014 	.word	0x20000014

0800567c <__libc_init_array>:
 800567c:	b570      	push	{r4, r5, r6, lr}
 800567e:	4d0d      	ldr	r5, [pc, #52]	; (80056b4 <__libc_init_array+0x38>)
 8005680:	4c0d      	ldr	r4, [pc, #52]	; (80056b8 <__libc_init_array+0x3c>)
 8005682:	1b64      	subs	r4, r4, r5
 8005684:	10a4      	asrs	r4, r4, #2
 8005686:	2600      	movs	r6, #0
 8005688:	42a6      	cmp	r6, r4
 800568a:	d109      	bne.n	80056a0 <__libc_init_array+0x24>
 800568c:	4d0b      	ldr	r5, [pc, #44]	; (80056bc <__libc_init_array+0x40>)
 800568e:	4c0c      	ldr	r4, [pc, #48]	; (80056c0 <__libc_init_array+0x44>)
 8005690:	f000 ff5c 	bl	800654c <_init>
 8005694:	1b64      	subs	r4, r4, r5
 8005696:	10a4      	asrs	r4, r4, #2
 8005698:	2600      	movs	r6, #0
 800569a:	42a6      	cmp	r6, r4
 800569c:	d105      	bne.n	80056aa <__libc_init_array+0x2e>
 800569e:	bd70      	pop	{r4, r5, r6, pc}
 80056a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80056a4:	4798      	blx	r3
 80056a6:	3601      	adds	r6, #1
 80056a8:	e7ee      	b.n	8005688 <__libc_init_array+0xc>
 80056aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80056ae:	4798      	blx	r3
 80056b0:	3601      	adds	r6, #1
 80056b2:	e7f2      	b.n	800569a <__libc_init_array+0x1e>
 80056b4:	08006610 	.word	0x08006610
 80056b8:	08006610 	.word	0x08006610
 80056bc:	08006610 	.word	0x08006610
 80056c0:	08006614 	.word	0x08006614

080056c4 <memset>:
 80056c4:	4402      	add	r2, r0
 80056c6:	4603      	mov	r3, r0
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d100      	bne.n	80056ce <memset+0xa>
 80056cc:	4770      	bx	lr
 80056ce:	f803 1b01 	strb.w	r1, [r3], #1
 80056d2:	e7f9      	b.n	80056c8 <memset+0x4>

080056d4 <pow>:
 80056d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d6:	ed2d 8b02 	vpush	{d8}
 80056da:	eeb0 8a40 	vmov.f32	s16, s0
 80056de:	eef0 8a60 	vmov.f32	s17, s1
 80056e2:	ec55 4b11 	vmov	r4, r5, d1
 80056e6:	f000 f883 	bl	80057f0 <__ieee754_pow>
 80056ea:	4622      	mov	r2, r4
 80056ec:	462b      	mov	r3, r5
 80056ee:	4620      	mov	r0, r4
 80056f0:	4629      	mov	r1, r5
 80056f2:	ec57 6b10 	vmov	r6, r7, d0
 80056f6:	f7fb f9c5 	bl	8000a84 <__aeabi_dcmpun>
 80056fa:	2800      	cmp	r0, #0
 80056fc:	d13b      	bne.n	8005776 <pow+0xa2>
 80056fe:	ec51 0b18 	vmov	r0, r1, d8
 8005702:	2200      	movs	r2, #0
 8005704:	2300      	movs	r3, #0
 8005706:	f7fb f98b 	bl	8000a20 <__aeabi_dcmpeq>
 800570a:	b1b8      	cbz	r0, 800573c <pow+0x68>
 800570c:	2200      	movs	r2, #0
 800570e:	2300      	movs	r3, #0
 8005710:	4620      	mov	r0, r4
 8005712:	4629      	mov	r1, r5
 8005714:	f7fb f984 	bl	8000a20 <__aeabi_dcmpeq>
 8005718:	2800      	cmp	r0, #0
 800571a:	d146      	bne.n	80057aa <pow+0xd6>
 800571c:	ec45 4b10 	vmov	d0, r4, r5
 8005720:	f000 fe82 	bl	8006428 <finite>
 8005724:	b338      	cbz	r0, 8005776 <pow+0xa2>
 8005726:	2200      	movs	r2, #0
 8005728:	2300      	movs	r3, #0
 800572a:	4620      	mov	r0, r4
 800572c:	4629      	mov	r1, r5
 800572e:	f7fb f981 	bl	8000a34 <__aeabi_dcmplt>
 8005732:	b300      	cbz	r0, 8005776 <pow+0xa2>
 8005734:	f7ff ff9c 	bl	8005670 <__errno>
 8005738:	2322      	movs	r3, #34	; 0x22
 800573a:	e01b      	b.n	8005774 <pow+0xa0>
 800573c:	ec47 6b10 	vmov	d0, r6, r7
 8005740:	f000 fe72 	bl	8006428 <finite>
 8005744:	b9e0      	cbnz	r0, 8005780 <pow+0xac>
 8005746:	eeb0 0a48 	vmov.f32	s0, s16
 800574a:	eef0 0a68 	vmov.f32	s1, s17
 800574e:	f000 fe6b 	bl	8006428 <finite>
 8005752:	b1a8      	cbz	r0, 8005780 <pow+0xac>
 8005754:	ec45 4b10 	vmov	d0, r4, r5
 8005758:	f000 fe66 	bl	8006428 <finite>
 800575c:	b180      	cbz	r0, 8005780 <pow+0xac>
 800575e:	4632      	mov	r2, r6
 8005760:	463b      	mov	r3, r7
 8005762:	4630      	mov	r0, r6
 8005764:	4639      	mov	r1, r7
 8005766:	f7fb f98d 	bl	8000a84 <__aeabi_dcmpun>
 800576a:	2800      	cmp	r0, #0
 800576c:	d0e2      	beq.n	8005734 <pow+0x60>
 800576e:	f7ff ff7f 	bl	8005670 <__errno>
 8005772:	2321      	movs	r3, #33	; 0x21
 8005774:	6003      	str	r3, [r0, #0]
 8005776:	ecbd 8b02 	vpop	{d8}
 800577a:	ec47 6b10 	vmov	d0, r6, r7
 800577e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005780:	2200      	movs	r2, #0
 8005782:	2300      	movs	r3, #0
 8005784:	4630      	mov	r0, r6
 8005786:	4639      	mov	r1, r7
 8005788:	f7fb f94a 	bl	8000a20 <__aeabi_dcmpeq>
 800578c:	2800      	cmp	r0, #0
 800578e:	d0f2      	beq.n	8005776 <pow+0xa2>
 8005790:	eeb0 0a48 	vmov.f32	s0, s16
 8005794:	eef0 0a68 	vmov.f32	s1, s17
 8005798:	f000 fe46 	bl	8006428 <finite>
 800579c:	2800      	cmp	r0, #0
 800579e:	d0ea      	beq.n	8005776 <pow+0xa2>
 80057a0:	ec45 4b10 	vmov	d0, r4, r5
 80057a4:	f000 fe40 	bl	8006428 <finite>
 80057a8:	e7c3      	b.n	8005732 <pow+0x5e>
 80057aa:	4f01      	ldr	r7, [pc, #4]	; (80057b0 <pow+0xdc>)
 80057ac:	2600      	movs	r6, #0
 80057ae:	e7e2      	b.n	8005776 <pow+0xa2>
 80057b0:	3ff00000 	.word	0x3ff00000

080057b4 <sqrtf>:
 80057b4:	b508      	push	{r3, lr}
 80057b6:	ed2d 8b02 	vpush	{d8}
 80057ba:	eeb0 8a40 	vmov.f32	s16, s0
 80057be:	f000 fdf7 	bl	80063b0 <__ieee754_sqrtf>
 80057c2:	eeb4 8a48 	vcmp.f32	s16, s16
 80057c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ca:	d60c      	bvs.n	80057e6 <sqrtf+0x32>
 80057cc:	eddf 8a07 	vldr	s17, [pc, #28]	; 80057ec <sqrtf+0x38>
 80057d0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80057d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057d8:	d505      	bpl.n	80057e6 <sqrtf+0x32>
 80057da:	f7ff ff49 	bl	8005670 <__errno>
 80057de:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80057e2:	2321      	movs	r3, #33	; 0x21
 80057e4:	6003      	str	r3, [r0, #0]
 80057e6:	ecbd 8b02 	vpop	{d8}
 80057ea:	bd08      	pop	{r3, pc}
 80057ec:	00000000 	.word	0x00000000

080057f0 <__ieee754_pow>:
 80057f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f4:	ed2d 8b06 	vpush	{d8-d10}
 80057f8:	b089      	sub	sp, #36	; 0x24
 80057fa:	ed8d 1b00 	vstr	d1, [sp]
 80057fe:	e9dd 2900 	ldrd	r2, r9, [sp]
 8005802:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005806:	ea58 0102 	orrs.w	r1, r8, r2
 800580a:	ec57 6b10 	vmov	r6, r7, d0
 800580e:	d115      	bne.n	800583c <__ieee754_pow+0x4c>
 8005810:	19b3      	adds	r3, r6, r6
 8005812:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8005816:	4152      	adcs	r2, r2
 8005818:	4299      	cmp	r1, r3
 800581a:	4b89      	ldr	r3, [pc, #548]	; (8005a40 <__ieee754_pow+0x250>)
 800581c:	4193      	sbcs	r3, r2
 800581e:	f080 84d2 	bcs.w	80061c6 <__ieee754_pow+0x9d6>
 8005822:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005826:	4630      	mov	r0, r6
 8005828:	4639      	mov	r1, r7
 800582a:	f7fa fcdb 	bl	80001e4 <__adddf3>
 800582e:	ec41 0b10 	vmov	d0, r0, r1
 8005832:	b009      	add	sp, #36	; 0x24
 8005834:	ecbd 8b06 	vpop	{d8-d10}
 8005838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800583c:	4b81      	ldr	r3, [pc, #516]	; (8005a44 <__ieee754_pow+0x254>)
 800583e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8005842:	429c      	cmp	r4, r3
 8005844:	ee10 aa10 	vmov	sl, s0
 8005848:	463d      	mov	r5, r7
 800584a:	dc06      	bgt.n	800585a <__ieee754_pow+0x6a>
 800584c:	d101      	bne.n	8005852 <__ieee754_pow+0x62>
 800584e:	2e00      	cmp	r6, #0
 8005850:	d1e7      	bne.n	8005822 <__ieee754_pow+0x32>
 8005852:	4598      	cmp	r8, r3
 8005854:	dc01      	bgt.n	800585a <__ieee754_pow+0x6a>
 8005856:	d10f      	bne.n	8005878 <__ieee754_pow+0x88>
 8005858:	b172      	cbz	r2, 8005878 <__ieee754_pow+0x88>
 800585a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800585e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005862:	ea55 050a 	orrs.w	r5, r5, sl
 8005866:	d1dc      	bne.n	8005822 <__ieee754_pow+0x32>
 8005868:	e9dd 3200 	ldrd	r3, r2, [sp]
 800586c:	18db      	adds	r3, r3, r3
 800586e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005872:	4152      	adcs	r2, r2
 8005874:	429d      	cmp	r5, r3
 8005876:	e7d0      	b.n	800581a <__ieee754_pow+0x2a>
 8005878:	2d00      	cmp	r5, #0
 800587a:	da3b      	bge.n	80058f4 <__ieee754_pow+0x104>
 800587c:	4b72      	ldr	r3, [pc, #456]	; (8005a48 <__ieee754_pow+0x258>)
 800587e:	4598      	cmp	r8, r3
 8005880:	dc51      	bgt.n	8005926 <__ieee754_pow+0x136>
 8005882:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005886:	4598      	cmp	r8, r3
 8005888:	f340 84ac 	ble.w	80061e4 <__ieee754_pow+0x9f4>
 800588c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005890:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005894:	2b14      	cmp	r3, #20
 8005896:	dd0f      	ble.n	80058b8 <__ieee754_pow+0xc8>
 8005898:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800589c:	fa22 f103 	lsr.w	r1, r2, r3
 80058a0:	fa01 f303 	lsl.w	r3, r1, r3
 80058a4:	4293      	cmp	r3, r2
 80058a6:	f040 849d 	bne.w	80061e4 <__ieee754_pow+0x9f4>
 80058aa:	f001 0101 	and.w	r1, r1, #1
 80058ae:	f1c1 0302 	rsb	r3, r1, #2
 80058b2:	9304      	str	r3, [sp, #16]
 80058b4:	b182      	cbz	r2, 80058d8 <__ieee754_pow+0xe8>
 80058b6:	e05f      	b.n	8005978 <__ieee754_pow+0x188>
 80058b8:	2a00      	cmp	r2, #0
 80058ba:	d15b      	bne.n	8005974 <__ieee754_pow+0x184>
 80058bc:	f1c3 0314 	rsb	r3, r3, #20
 80058c0:	fa48 f103 	asr.w	r1, r8, r3
 80058c4:	fa01 f303 	lsl.w	r3, r1, r3
 80058c8:	4543      	cmp	r3, r8
 80058ca:	f040 8488 	bne.w	80061de <__ieee754_pow+0x9ee>
 80058ce:	f001 0101 	and.w	r1, r1, #1
 80058d2:	f1c1 0302 	rsb	r3, r1, #2
 80058d6:	9304      	str	r3, [sp, #16]
 80058d8:	4b5c      	ldr	r3, [pc, #368]	; (8005a4c <__ieee754_pow+0x25c>)
 80058da:	4598      	cmp	r8, r3
 80058dc:	d132      	bne.n	8005944 <__ieee754_pow+0x154>
 80058de:	f1b9 0f00 	cmp.w	r9, #0
 80058e2:	f280 8478 	bge.w	80061d6 <__ieee754_pow+0x9e6>
 80058e6:	4959      	ldr	r1, [pc, #356]	; (8005a4c <__ieee754_pow+0x25c>)
 80058e8:	4632      	mov	r2, r6
 80058ea:	463b      	mov	r3, r7
 80058ec:	2000      	movs	r0, #0
 80058ee:	f7fa ff59 	bl	80007a4 <__aeabi_ddiv>
 80058f2:	e79c      	b.n	800582e <__ieee754_pow+0x3e>
 80058f4:	2300      	movs	r3, #0
 80058f6:	9304      	str	r3, [sp, #16]
 80058f8:	2a00      	cmp	r2, #0
 80058fa:	d13d      	bne.n	8005978 <__ieee754_pow+0x188>
 80058fc:	4b51      	ldr	r3, [pc, #324]	; (8005a44 <__ieee754_pow+0x254>)
 80058fe:	4598      	cmp	r8, r3
 8005900:	d1ea      	bne.n	80058d8 <__ieee754_pow+0xe8>
 8005902:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005906:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800590a:	ea53 030a 	orrs.w	r3, r3, sl
 800590e:	f000 845a 	beq.w	80061c6 <__ieee754_pow+0x9d6>
 8005912:	4b4f      	ldr	r3, [pc, #316]	; (8005a50 <__ieee754_pow+0x260>)
 8005914:	429c      	cmp	r4, r3
 8005916:	dd08      	ble.n	800592a <__ieee754_pow+0x13a>
 8005918:	f1b9 0f00 	cmp.w	r9, #0
 800591c:	f2c0 8457 	blt.w	80061ce <__ieee754_pow+0x9de>
 8005920:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005924:	e783      	b.n	800582e <__ieee754_pow+0x3e>
 8005926:	2302      	movs	r3, #2
 8005928:	e7e5      	b.n	80058f6 <__ieee754_pow+0x106>
 800592a:	f1b9 0f00 	cmp.w	r9, #0
 800592e:	f04f 0000 	mov.w	r0, #0
 8005932:	f04f 0100 	mov.w	r1, #0
 8005936:	f6bf af7a 	bge.w	800582e <__ieee754_pow+0x3e>
 800593a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800593e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005942:	e774      	b.n	800582e <__ieee754_pow+0x3e>
 8005944:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005948:	d106      	bne.n	8005958 <__ieee754_pow+0x168>
 800594a:	4632      	mov	r2, r6
 800594c:	463b      	mov	r3, r7
 800594e:	4630      	mov	r0, r6
 8005950:	4639      	mov	r1, r7
 8005952:	f7fa fdfd 	bl	8000550 <__aeabi_dmul>
 8005956:	e76a      	b.n	800582e <__ieee754_pow+0x3e>
 8005958:	4b3e      	ldr	r3, [pc, #248]	; (8005a54 <__ieee754_pow+0x264>)
 800595a:	4599      	cmp	r9, r3
 800595c:	d10c      	bne.n	8005978 <__ieee754_pow+0x188>
 800595e:	2d00      	cmp	r5, #0
 8005960:	db0a      	blt.n	8005978 <__ieee754_pow+0x188>
 8005962:	ec47 6b10 	vmov	d0, r6, r7
 8005966:	b009      	add	sp, #36	; 0x24
 8005968:	ecbd 8b06 	vpop	{d8-d10}
 800596c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005970:	f000 bc6c 	b.w	800624c <__ieee754_sqrt>
 8005974:	2300      	movs	r3, #0
 8005976:	9304      	str	r3, [sp, #16]
 8005978:	ec47 6b10 	vmov	d0, r6, r7
 800597c:	f000 fd4b 	bl	8006416 <fabs>
 8005980:	ec51 0b10 	vmov	r0, r1, d0
 8005984:	f1ba 0f00 	cmp.w	sl, #0
 8005988:	d129      	bne.n	80059de <__ieee754_pow+0x1ee>
 800598a:	b124      	cbz	r4, 8005996 <__ieee754_pow+0x1a6>
 800598c:	4b2f      	ldr	r3, [pc, #188]	; (8005a4c <__ieee754_pow+0x25c>)
 800598e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005992:	429a      	cmp	r2, r3
 8005994:	d123      	bne.n	80059de <__ieee754_pow+0x1ee>
 8005996:	f1b9 0f00 	cmp.w	r9, #0
 800599a:	da05      	bge.n	80059a8 <__ieee754_pow+0x1b8>
 800599c:	4602      	mov	r2, r0
 800599e:	460b      	mov	r3, r1
 80059a0:	2000      	movs	r0, #0
 80059a2:	492a      	ldr	r1, [pc, #168]	; (8005a4c <__ieee754_pow+0x25c>)
 80059a4:	f7fa fefe 	bl	80007a4 <__aeabi_ddiv>
 80059a8:	2d00      	cmp	r5, #0
 80059aa:	f6bf af40 	bge.w	800582e <__ieee754_pow+0x3e>
 80059ae:	9b04      	ldr	r3, [sp, #16]
 80059b0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80059b4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80059b8:	4323      	orrs	r3, r4
 80059ba:	d108      	bne.n	80059ce <__ieee754_pow+0x1de>
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	4610      	mov	r0, r2
 80059c2:	4619      	mov	r1, r3
 80059c4:	f7fa fc0c 	bl	80001e0 <__aeabi_dsub>
 80059c8:	4602      	mov	r2, r0
 80059ca:	460b      	mov	r3, r1
 80059cc:	e78f      	b.n	80058ee <__ieee754_pow+0xfe>
 80059ce:	9b04      	ldr	r3, [sp, #16]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	f47f af2c 	bne.w	800582e <__ieee754_pow+0x3e>
 80059d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80059da:	4619      	mov	r1, r3
 80059dc:	e727      	b.n	800582e <__ieee754_pow+0x3e>
 80059de:	0feb      	lsrs	r3, r5, #31
 80059e0:	3b01      	subs	r3, #1
 80059e2:	9306      	str	r3, [sp, #24]
 80059e4:	9a06      	ldr	r2, [sp, #24]
 80059e6:	9b04      	ldr	r3, [sp, #16]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	d102      	bne.n	80059f2 <__ieee754_pow+0x202>
 80059ec:	4632      	mov	r2, r6
 80059ee:	463b      	mov	r3, r7
 80059f0:	e7e6      	b.n	80059c0 <__ieee754_pow+0x1d0>
 80059f2:	4b19      	ldr	r3, [pc, #100]	; (8005a58 <__ieee754_pow+0x268>)
 80059f4:	4598      	cmp	r8, r3
 80059f6:	f340 80fb 	ble.w	8005bf0 <__ieee754_pow+0x400>
 80059fa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80059fe:	4598      	cmp	r8, r3
 8005a00:	4b13      	ldr	r3, [pc, #76]	; (8005a50 <__ieee754_pow+0x260>)
 8005a02:	dd0c      	ble.n	8005a1e <__ieee754_pow+0x22e>
 8005a04:	429c      	cmp	r4, r3
 8005a06:	dc0f      	bgt.n	8005a28 <__ieee754_pow+0x238>
 8005a08:	f1b9 0f00 	cmp.w	r9, #0
 8005a0c:	da0f      	bge.n	8005a2e <__ieee754_pow+0x23e>
 8005a0e:	2000      	movs	r0, #0
 8005a10:	b009      	add	sp, #36	; 0x24
 8005a12:	ecbd 8b06 	vpop	{d8-d10}
 8005a16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a1a:	f000 bcf3 	b.w	8006404 <__math_oflow>
 8005a1e:	429c      	cmp	r4, r3
 8005a20:	dbf2      	blt.n	8005a08 <__ieee754_pow+0x218>
 8005a22:	4b0a      	ldr	r3, [pc, #40]	; (8005a4c <__ieee754_pow+0x25c>)
 8005a24:	429c      	cmp	r4, r3
 8005a26:	dd19      	ble.n	8005a5c <__ieee754_pow+0x26c>
 8005a28:	f1b9 0f00 	cmp.w	r9, #0
 8005a2c:	dcef      	bgt.n	8005a0e <__ieee754_pow+0x21e>
 8005a2e:	2000      	movs	r0, #0
 8005a30:	b009      	add	sp, #36	; 0x24
 8005a32:	ecbd 8b06 	vpop	{d8-d10}
 8005a36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a3a:	f000 bcda 	b.w	80063f2 <__math_uflow>
 8005a3e:	bf00      	nop
 8005a40:	fff00000 	.word	0xfff00000
 8005a44:	7ff00000 	.word	0x7ff00000
 8005a48:	433fffff 	.word	0x433fffff
 8005a4c:	3ff00000 	.word	0x3ff00000
 8005a50:	3fefffff 	.word	0x3fefffff
 8005a54:	3fe00000 	.word	0x3fe00000
 8005a58:	41e00000 	.word	0x41e00000
 8005a5c:	4b60      	ldr	r3, [pc, #384]	; (8005be0 <__ieee754_pow+0x3f0>)
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f7fa fbbe 	bl	80001e0 <__aeabi_dsub>
 8005a64:	a354      	add	r3, pc, #336	; (adr r3, 8005bb8 <__ieee754_pow+0x3c8>)
 8005a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6a:	4604      	mov	r4, r0
 8005a6c:	460d      	mov	r5, r1
 8005a6e:	f7fa fd6f 	bl	8000550 <__aeabi_dmul>
 8005a72:	a353      	add	r3, pc, #332	; (adr r3, 8005bc0 <__ieee754_pow+0x3d0>)
 8005a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a78:	4606      	mov	r6, r0
 8005a7a:	460f      	mov	r7, r1
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	4629      	mov	r1, r5
 8005a80:	f7fa fd66 	bl	8000550 <__aeabi_dmul>
 8005a84:	4b57      	ldr	r3, [pc, #348]	; (8005be4 <__ieee754_pow+0x3f4>)
 8005a86:	4682      	mov	sl, r0
 8005a88:	468b      	mov	fp, r1
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	4629      	mov	r1, r5
 8005a90:	f7fa fd5e 	bl	8000550 <__aeabi_dmul>
 8005a94:	4602      	mov	r2, r0
 8005a96:	460b      	mov	r3, r1
 8005a98:	a14b      	add	r1, pc, #300	; (adr r1, 8005bc8 <__ieee754_pow+0x3d8>)
 8005a9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a9e:	f7fa fb9f 	bl	80001e0 <__aeabi_dsub>
 8005aa2:	4622      	mov	r2, r4
 8005aa4:	462b      	mov	r3, r5
 8005aa6:	f7fa fd53 	bl	8000550 <__aeabi_dmul>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	460b      	mov	r3, r1
 8005aae:	2000      	movs	r0, #0
 8005ab0:	494d      	ldr	r1, [pc, #308]	; (8005be8 <__ieee754_pow+0x3f8>)
 8005ab2:	f7fa fb95 	bl	80001e0 <__aeabi_dsub>
 8005ab6:	4622      	mov	r2, r4
 8005ab8:	4680      	mov	r8, r0
 8005aba:	4689      	mov	r9, r1
 8005abc:	462b      	mov	r3, r5
 8005abe:	4620      	mov	r0, r4
 8005ac0:	4629      	mov	r1, r5
 8005ac2:	f7fa fd45 	bl	8000550 <__aeabi_dmul>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	460b      	mov	r3, r1
 8005aca:	4640      	mov	r0, r8
 8005acc:	4649      	mov	r1, r9
 8005ace:	f7fa fd3f 	bl	8000550 <__aeabi_dmul>
 8005ad2:	a33f      	add	r3, pc, #252	; (adr r3, 8005bd0 <__ieee754_pow+0x3e0>)
 8005ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad8:	f7fa fd3a 	bl	8000550 <__aeabi_dmul>
 8005adc:	4602      	mov	r2, r0
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4650      	mov	r0, sl
 8005ae2:	4659      	mov	r1, fp
 8005ae4:	f7fa fb7c 	bl	80001e0 <__aeabi_dsub>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	460b      	mov	r3, r1
 8005aec:	4680      	mov	r8, r0
 8005aee:	4689      	mov	r9, r1
 8005af0:	4630      	mov	r0, r6
 8005af2:	4639      	mov	r1, r7
 8005af4:	f7fa fb76 	bl	80001e4 <__adddf3>
 8005af8:	2000      	movs	r0, #0
 8005afa:	4632      	mov	r2, r6
 8005afc:	463b      	mov	r3, r7
 8005afe:	4604      	mov	r4, r0
 8005b00:	460d      	mov	r5, r1
 8005b02:	f7fa fb6d 	bl	80001e0 <__aeabi_dsub>
 8005b06:	4602      	mov	r2, r0
 8005b08:	460b      	mov	r3, r1
 8005b0a:	4640      	mov	r0, r8
 8005b0c:	4649      	mov	r1, r9
 8005b0e:	f7fa fb67 	bl	80001e0 <__aeabi_dsub>
 8005b12:	9b04      	ldr	r3, [sp, #16]
 8005b14:	9a06      	ldr	r2, [sp, #24]
 8005b16:	3b01      	subs	r3, #1
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	4682      	mov	sl, r0
 8005b1c:	468b      	mov	fp, r1
 8005b1e:	f040 81e7 	bne.w	8005ef0 <__ieee754_pow+0x700>
 8005b22:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005bd8 <__ieee754_pow+0x3e8>
 8005b26:	eeb0 8a47 	vmov.f32	s16, s14
 8005b2a:	eef0 8a67 	vmov.f32	s17, s15
 8005b2e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005b32:	2600      	movs	r6, #0
 8005b34:	4632      	mov	r2, r6
 8005b36:	463b      	mov	r3, r7
 8005b38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b3c:	f7fa fb50 	bl	80001e0 <__aeabi_dsub>
 8005b40:	4622      	mov	r2, r4
 8005b42:	462b      	mov	r3, r5
 8005b44:	f7fa fd04 	bl	8000550 <__aeabi_dmul>
 8005b48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b4c:	4680      	mov	r8, r0
 8005b4e:	4689      	mov	r9, r1
 8005b50:	4650      	mov	r0, sl
 8005b52:	4659      	mov	r1, fp
 8005b54:	f7fa fcfc 	bl	8000550 <__aeabi_dmul>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	4640      	mov	r0, r8
 8005b5e:	4649      	mov	r1, r9
 8005b60:	f7fa fb40 	bl	80001e4 <__adddf3>
 8005b64:	4632      	mov	r2, r6
 8005b66:	463b      	mov	r3, r7
 8005b68:	4680      	mov	r8, r0
 8005b6a:	4689      	mov	r9, r1
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	4629      	mov	r1, r5
 8005b70:	f7fa fcee 	bl	8000550 <__aeabi_dmul>
 8005b74:	460b      	mov	r3, r1
 8005b76:	4604      	mov	r4, r0
 8005b78:	460d      	mov	r5, r1
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	4649      	mov	r1, r9
 8005b7e:	4640      	mov	r0, r8
 8005b80:	f7fa fb30 	bl	80001e4 <__adddf3>
 8005b84:	4b19      	ldr	r3, [pc, #100]	; (8005bec <__ieee754_pow+0x3fc>)
 8005b86:	4299      	cmp	r1, r3
 8005b88:	ec45 4b19 	vmov	d9, r4, r5
 8005b8c:	4606      	mov	r6, r0
 8005b8e:	460f      	mov	r7, r1
 8005b90:	468b      	mov	fp, r1
 8005b92:	f340 82f1 	ble.w	8006178 <__ieee754_pow+0x988>
 8005b96:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005b9a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005b9e:	4303      	orrs	r3, r0
 8005ba0:	f000 81e4 	beq.w	8005f6c <__ieee754_pow+0x77c>
 8005ba4:	ec51 0b18 	vmov	r0, r1, d8
 8005ba8:	2200      	movs	r2, #0
 8005baa:	2300      	movs	r3, #0
 8005bac:	f7fa ff42 	bl	8000a34 <__aeabi_dcmplt>
 8005bb0:	3800      	subs	r0, #0
 8005bb2:	bf18      	it	ne
 8005bb4:	2001      	movne	r0, #1
 8005bb6:	e72b      	b.n	8005a10 <__ieee754_pow+0x220>
 8005bb8:	60000000 	.word	0x60000000
 8005bbc:	3ff71547 	.word	0x3ff71547
 8005bc0:	f85ddf44 	.word	0xf85ddf44
 8005bc4:	3e54ae0b 	.word	0x3e54ae0b
 8005bc8:	55555555 	.word	0x55555555
 8005bcc:	3fd55555 	.word	0x3fd55555
 8005bd0:	652b82fe 	.word	0x652b82fe
 8005bd4:	3ff71547 	.word	0x3ff71547
 8005bd8:	00000000 	.word	0x00000000
 8005bdc:	bff00000 	.word	0xbff00000
 8005be0:	3ff00000 	.word	0x3ff00000
 8005be4:	3fd00000 	.word	0x3fd00000
 8005be8:	3fe00000 	.word	0x3fe00000
 8005bec:	408fffff 	.word	0x408fffff
 8005bf0:	4bd5      	ldr	r3, [pc, #852]	; (8005f48 <__ieee754_pow+0x758>)
 8005bf2:	402b      	ands	r3, r5
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	b92b      	cbnz	r3, 8005c04 <__ieee754_pow+0x414>
 8005bf8:	4bd4      	ldr	r3, [pc, #848]	; (8005f4c <__ieee754_pow+0x75c>)
 8005bfa:	f7fa fca9 	bl	8000550 <__aeabi_dmul>
 8005bfe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005c02:	460c      	mov	r4, r1
 8005c04:	1523      	asrs	r3, r4, #20
 8005c06:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005c0a:	4413      	add	r3, r2
 8005c0c:	9305      	str	r3, [sp, #20]
 8005c0e:	4bd0      	ldr	r3, [pc, #832]	; (8005f50 <__ieee754_pow+0x760>)
 8005c10:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005c14:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005c18:	429c      	cmp	r4, r3
 8005c1a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005c1e:	dd08      	ble.n	8005c32 <__ieee754_pow+0x442>
 8005c20:	4bcc      	ldr	r3, [pc, #816]	; (8005f54 <__ieee754_pow+0x764>)
 8005c22:	429c      	cmp	r4, r3
 8005c24:	f340 8162 	ble.w	8005eec <__ieee754_pow+0x6fc>
 8005c28:	9b05      	ldr	r3, [sp, #20]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	9305      	str	r3, [sp, #20]
 8005c2e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005c32:	2400      	movs	r4, #0
 8005c34:	00e3      	lsls	r3, r4, #3
 8005c36:	9307      	str	r3, [sp, #28]
 8005c38:	4bc7      	ldr	r3, [pc, #796]	; (8005f58 <__ieee754_pow+0x768>)
 8005c3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c3e:	ed93 7b00 	vldr	d7, [r3]
 8005c42:	4629      	mov	r1, r5
 8005c44:	ec53 2b17 	vmov	r2, r3, d7
 8005c48:	eeb0 9a47 	vmov.f32	s18, s14
 8005c4c:	eef0 9a67 	vmov.f32	s19, s15
 8005c50:	4682      	mov	sl, r0
 8005c52:	f7fa fac5 	bl	80001e0 <__aeabi_dsub>
 8005c56:	4652      	mov	r2, sl
 8005c58:	4606      	mov	r6, r0
 8005c5a:	460f      	mov	r7, r1
 8005c5c:	462b      	mov	r3, r5
 8005c5e:	ec51 0b19 	vmov	r0, r1, d9
 8005c62:	f7fa fabf 	bl	80001e4 <__adddf3>
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	49bb      	ldr	r1, [pc, #748]	; (8005f5c <__ieee754_pow+0x76c>)
 8005c6e:	f7fa fd99 	bl	80007a4 <__aeabi_ddiv>
 8005c72:	ec41 0b1a 	vmov	d10, r0, r1
 8005c76:	4602      	mov	r2, r0
 8005c78:	460b      	mov	r3, r1
 8005c7a:	4630      	mov	r0, r6
 8005c7c:	4639      	mov	r1, r7
 8005c7e:	f7fa fc67 	bl	8000550 <__aeabi_dmul>
 8005c82:	2300      	movs	r3, #0
 8005c84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c88:	9302      	str	r3, [sp, #8]
 8005c8a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005c8e:	46ab      	mov	fp, r5
 8005c90:	106d      	asrs	r5, r5, #1
 8005c92:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005c96:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005c9a:	ec41 0b18 	vmov	d8, r0, r1
 8005c9e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	4640      	mov	r0, r8
 8005ca6:	4649      	mov	r1, r9
 8005ca8:	4614      	mov	r4, r2
 8005caa:	461d      	mov	r5, r3
 8005cac:	f7fa fc50 	bl	8000550 <__aeabi_dmul>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	4630      	mov	r0, r6
 8005cb6:	4639      	mov	r1, r7
 8005cb8:	f7fa fa92 	bl	80001e0 <__aeabi_dsub>
 8005cbc:	ec53 2b19 	vmov	r2, r3, d9
 8005cc0:	4606      	mov	r6, r0
 8005cc2:	460f      	mov	r7, r1
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	4629      	mov	r1, r5
 8005cc8:	f7fa fa8a 	bl	80001e0 <__aeabi_dsub>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	460b      	mov	r3, r1
 8005cd0:	4650      	mov	r0, sl
 8005cd2:	4659      	mov	r1, fp
 8005cd4:	f7fa fa84 	bl	80001e0 <__aeabi_dsub>
 8005cd8:	4642      	mov	r2, r8
 8005cda:	464b      	mov	r3, r9
 8005cdc:	f7fa fc38 	bl	8000550 <__aeabi_dmul>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	4630      	mov	r0, r6
 8005ce6:	4639      	mov	r1, r7
 8005ce8:	f7fa fa7a 	bl	80001e0 <__aeabi_dsub>
 8005cec:	ec53 2b1a 	vmov	r2, r3, d10
 8005cf0:	f7fa fc2e 	bl	8000550 <__aeabi_dmul>
 8005cf4:	ec53 2b18 	vmov	r2, r3, d8
 8005cf8:	ec41 0b19 	vmov	d9, r0, r1
 8005cfc:	ec51 0b18 	vmov	r0, r1, d8
 8005d00:	f7fa fc26 	bl	8000550 <__aeabi_dmul>
 8005d04:	a37c      	add	r3, pc, #496	; (adr r3, 8005ef8 <__ieee754_pow+0x708>)
 8005d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0a:	4604      	mov	r4, r0
 8005d0c:	460d      	mov	r5, r1
 8005d0e:	f7fa fc1f 	bl	8000550 <__aeabi_dmul>
 8005d12:	a37b      	add	r3, pc, #492	; (adr r3, 8005f00 <__ieee754_pow+0x710>)
 8005d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d18:	f7fa fa64 	bl	80001e4 <__adddf3>
 8005d1c:	4622      	mov	r2, r4
 8005d1e:	462b      	mov	r3, r5
 8005d20:	f7fa fc16 	bl	8000550 <__aeabi_dmul>
 8005d24:	a378      	add	r3, pc, #480	; (adr r3, 8005f08 <__ieee754_pow+0x718>)
 8005d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2a:	f7fa fa5b 	bl	80001e4 <__adddf3>
 8005d2e:	4622      	mov	r2, r4
 8005d30:	462b      	mov	r3, r5
 8005d32:	f7fa fc0d 	bl	8000550 <__aeabi_dmul>
 8005d36:	a376      	add	r3, pc, #472	; (adr r3, 8005f10 <__ieee754_pow+0x720>)
 8005d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3c:	f7fa fa52 	bl	80001e4 <__adddf3>
 8005d40:	4622      	mov	r2, r4
 8005d42:	462b      	mov	r3, r5
 8005d44:	f7fa fc04 	bl	8000550 <__aeabi_dmul>
 8005d48:	a373      	add	r3, pc, #460	; (adr r3, 8005f18 <__ieee754_pow+0x728>)
 8005d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4e:	f7fa fa49 	bl	80001e4 <__adddf3>
 8005d52:	4622      	mov	r2, r4
 8005d54:	462b      	mov	r3, r5
 8005d56:	f7fa fbfb 	bl	8000550 <__aeabi_dmul>
 8005d5a:	a371      	add	r3, pc, #452	; (adr r3, 8005f20 <__ieee754_pow+0x730>)
 8005d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d60:	f7fa fa40 	bl	80001e4 <__adddf3>
 8005d64:	4622      	mov	r2, r4
 8005d66:	4606      	mov	r6, r0
 8005d68:	460f      	mov	r7, r1
 8005d6a:	462b      	mov	r3, r5
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	4629      	mov	r1, r5
 8005d70:	f7fa fbee 	bl	8000550 <__aeabi_dmul>
 8005d74:	4602      	mov	r2, r0
 8005d76:	460b      	mov	r3, r1
 8005d78:	4630      	mov	r0, r6
 8005d7a:	4639      	mov	r1, r7
 8005d7c:	f7fa fbe8 	bl	8000550 <__aeabi_dmul>
 8005d80:	4642      	mov	r2, r8
 8005d82:	4604      	mov	r4, r0
 8005d84:	460d      	mov	r5, r1
 8005d86:	464b      	mov	r3, r9
 8005d88:	ec51 0b18 	vmov	r0, r1, d8
 8005d8c:	f7fa fa2a 	bl	80001e4 <__adddf3>
 8005d90:	ec53 2b19 	vmov	r2, r3, d9
 8005d94:	f7fa fbdc 	bl	8000550 <__aeabi_dmul>
 8005d98:	4622      	mov	r2, r4
 8005d9a:	462b      	mov	r3, r5
 8005d9c:	f7fa fa22 	bl	80001e4 <__adddf3>
 8005da0:	4642      	mov	r2, r8
 8005da2:	4682      	mov	sl, r0
 8005da4:	468b      	mov	fp, r1
 8005da6:	464b      	mov	r3, r9
 8005da8:	4640      	mov	r0, r8
 8005daa:	4649      	mov	r1, r9
 8005dac:	f7fa fbd0 	bl	8000550 <__aeabi_dmul>
 8005db0:	4b6b      	ldr	r3, [pc, #428]	; (8005f60 <__ieee754_pow+0x770>)
 8005db2:	2200      	movs	r2, #0
 8005db4:	4606      	mov	r6, r0
 8005db6:	460f      	mov	r7, r1
 8005db8:	f7fa fa14 	bl	80001e4 <__adddf3>
 8005dbc:	4652      	mov	r2, sl
 8005dbe:	465b      	mov	r3, fp
 8005dc0:	f7fa fa10 	bl	80001e4 <__adddf3>
 8005dc4:	2000      	movs	r0, #0
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	460d      	mov	r5, r1
 8005dca:	4602      	mov	r2, r0
 8005dcc:	460b      	mov	r3, r1
 8005dce:	4640      	mov	r0, r8
 8005dd0:	4649      	mov	r1, r9
 8005dd2:	f7fa fbbd 	bl	8000550 <__aeabi_dmul>
 8005dd6:	4b62      	ldr	r3, [pc, #392]	; (8005f60 <__ieee754_pow+0x770>)
 8005dd8:	4680      	mov	r8, r0
 8005dda:	4689      	mov	r9, r1
 8005ddc:	2200      	movs	r2, #0
 8005dde:	4620      	mov	r0, r4
 8005de0:	4629      	mov	r1, r5
 8005de2:	f7fa f9fd 	bl	80001e0 <__aeabi_dsub>
 8005de6:	4632      	mov	r2, r6
 8005de8:	463b      	mov	r3, r7
 8005dea:	f7fa f9f9 	bl	80001e0 <__aeabi_dsub>
 8005dee:	4602      	mov	r2, r0
 8005df0:	460b      	mov	r3, r1
 8005df2:	4650      	mov	r0, sl
 8005df4:	4659      	mov	r1, fp
 8005df6:	f7fa f9f3 	bl	80001e0 <__aeabi_dsub>
 8005dfa:	ec53 2b18 	vmov	r2, r3, d8
 8005dfe:	f7fa fba7 	bl	8000550 <__aeabi_dmul>
 8005e02:	4622      	mov	r2, r4
 8005e04:	4606      	mov	r6, r0
 8005e06:	460f      	mov	r7, r1
 8005e08:	462b      	mov	r3, r5
 8005e0a:	ec51 0b19 	vmov	r0, r1, d9
 8005e0e:	f7fa fb9f 	bl	8000550 <__aeabi_dmul>
 8005e12:	4602      	mov	r2, r0
 8005e14:	460b      	mov	r3, r1
 8005e16:	4630      	mov	r0, r6
 8005e18:	4639      	mov	r1, r7
 8005e1a:	f7fa f9e3 	bl	80001e4 <__adddf3>
 8005e1e:	4606      	mov	r6, r0
 8005e20:	460f      	mov	r7, r1
 8005e22:	4602      	mov	r2, r0
 8005e24:	460b      	mov	r3, r1
 8005e26:	4640      	mov	r0, r8
 8005e28:	4649      	mov	r1, r9
 8005e2a:	f7fa f9db 	bl	80001e4 <__adddf3>
 8005e2e:	a33e      	add	r3, pc, #248	; (adr r3, 8005f28 <__ieee754_pow+0x738>)
 8005e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e34:	2000      	movs	r0, #0
 8005e36:	4604      	mov	r4, r0
 8005e38:	460d      	mov	r5, r1
 8005e3a:	f7fa fb89 	bl	8000550 <__aeabi_dmul>
 8005e3e:	4642      	mov	r2, r8
 8005e40:	ec41 0b18 	vmov	d8, r0, r1
 8005e44:	464b      	mov	r3, r9
 8005e46:	4620      	mov	r0, r4
 8005e48:	4629      	mov	r1, r5
 8005e4a:	f7fa f9c9 	bl	80001e0 <__aeabi_dsub>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	460b      	mov	r3, r1
 8005e52:	4630      	mov	r0, r6
 8005e54:	4639      	mov	r1, r7
 8005e56:	f7fa f9c3 	bl	80001e0 <__aeabi_dsub>
 8005e5a:	a335      	add	r3, pc, #212	; (adr r3, 8005f30 <__ieee754_pow+0x740>)
 8005e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e60:	f7fa fb76 	bl	8000550 <__aeabi_dmul>
 8005e64:	a334      	add	r3, pc, #208	; (adr r3, 8005f38 <__ieee754_pow+0x748>)
 8005e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6a:	4606      	mov	r6, r0
 8005e6c:	460f      	mov	r7, r1
 8005e6e:	4620      	mov	r0, r4
 8005e70:	4629      	mov	r1, r5
 8005e72:	f7fa fb6d 	bl	8000550 <__aeabi_dmul>
 8005e76:	4602      	mov	r2, r0
 8005e78:	460b      	mov	r3, r1
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	4639      	mov	r1, r7
 8005e7e:	f7fa f9b1 	bl	80001e4 <__adddf3>
 8005e82:	9a07      	ldr	r2, [sp, #28]
 8005e84:	4b37      	ldr	r3, [pc, #220]	; (8005f64 <__ieee754_pow+0x774>)
 8005e86:	4413      	add	r3, r2
 8005e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8c:	f7fa f9aa 	bl	80001e4 <__adddf3>
 8005e90:	4682      	mov	sl, r0
 8005e92:	9805      	ldr	r0, [sp, #20]
 8005e94:	468b      	mov	fp, r1
 8005e96:	f7fa faf1 	bl	800047c <__aeabi_i2d>
 8005e9a:	9a07      	ldr	r2, [sp, #28]
 8005e9c:	4b32      	ldr	r3, [pc, #200]	; (8005f68 <__ieee754_pow+0x778>)
 8005e9e:	4413      	add	r3, r2
 8005ea0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ea4:	4606      	mov	r6, r0
 8005ea6:	460f      	mov	r7, r1
 8005ea8:	4652      	mov	r2, sl
 8005eaa:	465b      	mov	r3, fp
 8005eac:	ec51 0b18 	vmov	r0, r1, d8
 8005eb0:	f7fa f998 	bl	80001e4 <__adddf3>
 8005eb4:	4642      	mov	r2, r8
 8005eb6:	464b      	mov	r3, r9
 8005eb8:	f7fa f994 	bl	80001e4 <__adddf3>
 8005ebc:	4632      	mov	r2, r6
 8005ebe:	463b      	mov	r3, r7
 8005ec0:	f7fa f990 	bl	80001e4 <__adddf3>
 8005ec4:	2000      	movs	r0, #0
 8005ec6:	4632      	mov	r2, r6
 8005ec8:	463b      	mov	r3, r7
 8005eca:	4604      	mov	r4, r0
 8005ecc:	460d      	mov	r5, r1
 8005ece:	f7fa f987 	bl	80001e0 <__aeabi_dsub>
 8005ed2:	4642      	mov	r2, r8
 8005ed4:	464b      	mov	r3, r9
 8005ed6:	f7fa f983 	bl	80001e0 <__aeabi_dsub>
 8005eda:	ec53 2b18 	vmov	r2, r3, d8
 8005ede:	f7fa f97f 	bl	80001e0 <__aeabi_dsub>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	4650      	mov	r0, sl
 8005ee8:	4659      	mov	r1, fp
 8005eea:	e610      	b.n	8005b0e <__ieee754_pow+0x31e>
 8005eec:	2401      	movs	r4, #1
 8005eee:	e6a1      	b.n	8005c34 <__ieee754_pow+0x444>
 8005ef0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8005f40 <__ieee754_pow+0x750>
 8005ef4:	e617      	b.n	8005b26 <__ieee754_pow+0x336>
 8005ef6:	bf00      	nop
 8005ef8:	4a454eef 	.word	0x4a454eef
 8005efc:	3fca7e28 	.word	0x3fca7e28
 8005f00:	93c9db65 	.word	0x93c9db65
 8005f04:	3fcd864a 	.word	0x3fcd864a
 8005f08:	a91d4101 	.word	0xa91d4101
 8005f0c:	3fd17460 	.word	0x3fd17460
 8005f10:	518f264d 	.word	0x518f264d
 8005f14:	3fd55555 	.word	0x3fd55555
 8005f18:	db6fabff 	.word	0xdb6fabff
 8005f1c:	3fdb6db6 	.word	0x3fdb6db6
 8005f20:	33333303 	.word	0x33333303
 8005f24:	3fe33333 	.word	0x3fe33333
 8005f28:	e0000000 	.word	0xe0000000
 8005f2c:	3feec709 	.word	0x3feec709
 8005f30:	dc3a03fd 	.word	0xdc3a03fd
 8005f34:	3feec709 	.word	0x3feec709
 8005f38:	145b01f5 	.word	0x145b01f5
 8005f3c:	be3e2fe0 	.word	0xbe3e2fe0
 8005f40:	00000000 	.word	0x00000000
 8005f44:	3ff00000 	.word	0x3ff00000
 8005f48:	7ff00000 	.word	0x7ff00000
 8005f4c:	43400000 	.word	0x43400000
 8005f50:	0003988e 	.word	0x0003988e
 8005f54:	000bb679 	.word	0x000bb679
 8005f58:	080065d8 	.word	0x080065d8
 8005f5c:	3ff00000 	.word	0x3ff00000
 8005f60:	40080000 	.word	0x40080000
 8005f64:	080065f8 	.word	0x080065f8
 8005f68:	080065e8 	.word	0x080065e8
 8005f6c:	a3b5      	add	r3, pc, #724	; (adr r3, 8006244 <__ieee754_pow+0xa54>)
 8005f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f72:	4640      	mov	r0, r8
 8005f74:	4649      	mov	r1, r9
 8005f76:	f7fa f935 	bl	80001e4 <__adddf3>
 8005f7a:	4622      	mov	r2, r4
 8005f7c:	ec41 0b1a 	vmov	d10, r0, r1
 8005f80:	462b      	mov	r3, r5
 8005f82:	4630      	mov	r0, r6
 8005f84:	4639      	mov	r1, r7
 8005f86:	f7fa f92b 	bl	80001e0 <__aeabi_dsub>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	ec51 0b1a 	vmov	r0, r1, d10
 8005f92:	f7fa fd6d 	bl	8000a70 <__aeabi_dcmpgt>
 8005f96:	2800      	cmp	r0, #0
 8005f98:	f47f ae04 	bne.w	8005ba4 <__ieee754_pow+0x3b4>
 8005f9c:	4aa4      	ldr	r2, [pc, #656]	; (8006230 <__ieee754_pow+0xa40>)
 8005f9e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	f340 8108 	ble.w	80061b8 <__ieee754_pow+0x9c8>
 8005fa8:	151b      	asrs	r3, r3, #20
 8005faa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005fae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005fb2:	fa4a f303 	asr.w	r3, sl, r3
 8005fb6:	445b      	add	r3, fp
 8005fb8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005fbc:	4e9d      	ldr	r6, [pc, #628]	; (8006234 <__ieee754_pow+0xa44>)
 8005fbe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005fc2:	4116      	asrs	r6, r2
 8005fc4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005fc8:	2000      	movs	r0, #0
 8005fca:	ea23 0106 	bic.w	r1, r3, r6
 8005fce:	f1c2 0214 	rsb	r2, r2, #20
 8005fd2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005fd6:	fa4a fa02 	asr.w	sl, sl, r2
 8005fda:	f1bb 0f00 	cmp.w	fp, #0
 8005fde:	4602      	mov	r2, r0
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	4629      	mov	r1, r5
 8005fe6:	bfb8      	it	lt
 8005fe8:	f1ca 0a00 	rsblt	sl, sl, #0
 8005fec:	f7fa f8f8 	bl	80001e0 <__aeabi_dsub>
 8005ff0:	ec41 0b19 	vmov	d9, r0, r1
 8005ff4:	4642      	mov	r2, r8
 8005ff6:	464b      	mov	r3, r9
 8005ff8:	ec51 0b19 	vmov	r0, r1, d9
 8005ffc:	f7fa f8f2 	bl	80001e4 <__adddf3>
 8006000:	a37b      	add	r3, pc, #492	; (adr r3, 80061f0 <__ieee754_pow+0xa00>)
 8006002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006006:	2000      	movs	r0, #0
 8006008:	4604      	mov	r4, r0
 800600a:	460d      	mov	r5, r1
 800600c:	f7fa faa0 	bl	8000550 <__aeabi_dmul>
 8006010:	ec53 2b19 	vmov	r2, r3, d9
 8006014:	4606      	mov	r6, r0
 8006016:	460f      	mov	r7, r1
 8006018:	4620      	mov	r0, r4
 800601a:	4629      	mov	r1, r5
 800601c:	f7fa f8e0 	bl	80001e0 <__aeabi_dsub>
 8006020:	4602      	mov	r2, r0
 8006022:	460b      	mov	r3, r1
 8006024:	4640      	mov	r0, r8
 8006026:	4649      	mov	r1, r9
 8006028:	f7fa f8da 	bl	80001e0 <__aeabi_dsub>
 800602c:	a372      	add	r3, pc, #456	; (adr r3, 80061f8 <__ieee754_pow+0xa08>)
 800602e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006032:	f7fa fa8d 	bl	8000550 <__aeabi_dmul>
 8006036:	a372      	add	r3, pc, #456	; (adr r3, 8006200 <__ieee754_pow+0xa10>)
 8006038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603c:	4680      	mov	r8, r0
 800603e:	4689      	mov	r9, r1
 8006040:	4620      	mov	r0, r4
 8006042:	4629      	mov	r1, r5
 8006044:	f7fa fa84 	bl	8000550 <__aeabi_dmul>
 8006048:	4602      	mov	r2, r0
 800604a:	460b      	mov	r3, r1
 800604c:	4640      	mov	r0, r8
 800604e:	4649      	mov	r1, r9
 8006050:	f7fa f8c8 	bl	80001e4 <__adddf3>
 8006054:	4604      	mov	r4, r0
 8006056:	460d      	mov	r5, r1
 8006058:	4602      	mov	r2, r0
 800605a:	460b      	mov	r3, r1
 800605c:	4630      	mov	r0, r6
 800605e:	4639      	mov	r1, r7
 8006060:	f7fa f8c0 	bl	80001e4 <__adddf3>
 8006064:	4632      	mov	r2, r6
 8006066:	463b      	mov	r3, r7
 8006068:	4680      	mov	r8, r0
 800606a:	4689      	mov	r9, r1
 800606c:	f7fa f8b8 	bl	80001e0 <__aeabi_dsub>
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	4620      	mov	r0, r4
 8006076:	4629      	mov	r1, r5
 8006078:	f7fa f8b2 	bl	80001e0 <__aeabi_dsub>
 800607c:	4642      	mov	r2, r8
 800607e:	4606      	mov	r6, r0
 8006080:	460f      	mov	r7, r1
 8006082:	464b      	mov	r3, r9
 8006084:	4640      	mov	r0, r8
 8006086:	4649      	mov	r1, r9
 8006088:	f7fa fa62 	bl	8000550 <__aeabi_dmul>
 800608c:	a35e      	add	r3, pc, #376	; (adr r3, 8006208 <__ieee754_pow+0xa18>)
 800608e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006092:	4604      	mov	r4, r0
 8006094:	460d      	mov	r5, r1
 8006096:	f7fa fa5b 	bl	8000550 <__aeabi_dmul>
 800609a:	a35d      	add	r3, pc, #372	; (adr r3, 8006210 <__ieee754_pow+0xa20>)
 800609c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a0:	f7fa f89e 	bl	80001e0 <__aeabi_dsub>
 80060a4:	4622      	mov	r2, r4
 80060a6:	462b      	mov	r3, r5
 80060a8:	f7fa fa52 	bl	8000550 <__aeabi_dmul>
 80060ac:	a35a      	add	r3, pc, #360	; (adr r3, 8006218 <__ieee754_pow+0xa28>)
 80060ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b2:	f7fa f897 	bl	80001e4 <__adddf3>
 80060b6:	4622      	mov	r2, r4
 80060b8:	462b      	mov	r3, r5
 80060ba:	f7fa fa49 	bl	8000550 <__aeabi_dmul>
 80060be:	a358      	add	r3, pc, #352	; (adr r3, 8006220 <__ieee754_pow+0xa30>)
 80060c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c4:	f7fa f88c 	bl	80001e0 <__aeabi_dsub>
 80060c8:	4622      	mov	r2, r4
 80060ca:	462b      	mov	r3, r5
 80060cc:	f7fa fa40 	bl	8000550 <__aeabi_dmul>
 80060d0:	a355      	add	r3, pc, #340	; (adr r3, 8006228 <__ieee754_pow+0xa38>)
 80060d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d6:	f7fa f885 	bl	80001e4 <__adddf3>
 80060da:	4622      	mov	r2, r4
 80060dc:	462b      	mov	r3, r5
 80060de:	f7fa fa37 	bl	8000550 <__aeabi_dmul>
 80060e2:	4602      	mov	r2, r0
 80060e4:	460b      	mov	r3, r1
 80060e6:	4640      	mov	r0, r8
 80060e8:	4649      	mov	r1, r9
 80060ea:	f7fa f879 	bl	80001e0 <__aeabi_dsub>
 80060ee:	4604      	mov	r4, r0
 80060f0:	460d      	mov	r5, r1
 80060f2:	4602      	mov	r2, r0
 80060f4:	460b      	mov	r3, r1
 80060f6:	4640      	mov	r0, r8
 80060f8:	4649      	mov	r1, r9
 80060fa:	f7fa fa29 	bl	8000550 <__aeabi_dmul>
 80060fe:	2200      	movs	r2, #0
 8006100:	ec41 0b19 	vmov	d9, r0, r1
 8006104:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006108:	4620      	mov	r0, r4
 800610a:	4629      	mov	r1, r5
 800610c:	f7fa f868 	bl	80001e0 <__aeabi_dsub>
 8006110:	4602      	mov	r2, r0
 8006112:	460b      	mov	r3, r1
 8006114:	ec51 0b19 	vmov	r0, r1, d9
 8006118:	f7fa fb44 	bl	80007a4 <__aeabi_ddiv>
 800611c:	4632      	mov	r2, r6
 800611e:	4604      	mov	r4, r0
 8006120:	460d      	mov	r5, r1
 8006122:	463b      	mov	r3, r7
 8006124:	4640      	mov	r0, r8
 8006126:	4649      	mov	r1, r9
 8006128:	f7fa fa12 	bl	8000550 <__aeabi_dmul>
 800612c:	4632      	mov	r2, r6
 800612e:	463b      	mov	r3, r7
 8006130:	f7fa f858 	bl	80001e4 <__adddf3>
 8006134:	4602      	mov	r2, r0
 8006136:	460b      	mov	r3, r1
 8006138:	4620      	mov	r0, r4
 800613a:	4629      	mov	r1, r5
 800613c:	f7fa f850 	bl	80001e0 <__aeabi_dsub>
 8006140:	4642      	mov	r2, r8
 8006142:	464b      	mov	r3, r9
 8006144:	f7fa f84c 	bl	80001e0 <__aeabi_dsub>
 8006148:	460b      	mov	r3, r1
 800614a:	4602      	mov	r2, r0
 800614c:	493a      	ldr	r1, [pc, #232]	; (8006238 <__ieee754_pow+0xa48>)
 800614e:	2000      	movs	r0, #0
 8006150:	f7fa f846 	bl	80001e0 <__aeabi_dsub>
 8006154:	ec41 0b10 	vmov	d0, r0, r1
 8006158:	ee10 3a90 	vmov	r3, s1
 800615c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006160:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006164:	da2b      	bge.n	80061be <__ieee754_pow+0x9ce>
 8006166:	4650      	mov	r0, sl
 8006168:	f000 f96a 	bl	8006440 <scalbn>
 800616c:	ec51 0b10 	vmov	r0, r1, d0
 8006170:	ec53 2b18 	vmov	r2, r3, d8
 8006174:	f7ff bbed 	b.w	8005952 <__ieee754_pow+0x162>
 8006178:	4b30      	ldr	r3, [pc, #192]	; (800623c <__ieee754_pow+0xa4c>)
 800617a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800617e:	429e      	cmp	r6, r3
 8006180:	f77f af0c 	ble.w	8005f9c <__ieee754_pow+0x7ac>
 8006184:	4b2e      	ldr	r3, [pc, #184]	; (8006240 <__ieee754_pow+0xa50>)
 8006186:	440b      	add	r3, r1
 8006188:	4303      	orrs	r3, r0
 800618a:	d009      	beq.n	80061a0 <__ieee754_pow+0x9b0>
 800618c:	ec51 0b18 	vmov	r0, r1, d8
 8006190:	2200      	movs	r2, #0
 8006192:	2300      	movs	r3, #0
 8006194:	f7fa fc4e 	bl	8000a34 <__aeabi_dcmplt>
 8006198:	3800      	subs	r0, #0
 800619a:	bf18      	it	ne
 800619c:	2001      	movne	r0, #1
 800619e:	e447      	b.n	8005a30 <__ieee754_pow+0x240>
 80061a0:	4622      	mov	r2, r4
 80061a2:	462b      	mov	r3, r5
 80061a4:	f7fa f81c 	bl	80001e0 <__aeabi_dsub>
 80061a8:	4642      	mov	r2, r8
 80061aa:	464b      	mov	r3, r9
 80061ac:	f7fa fc56 	bl	8000a5c <__aeabi_dcmpge>
 80061b0:	2800      	cmp	r0, #0
 80061b2:	f43f aef3 	beq.w	8005f9c <__ieee754_pow+0x7ac>
 80061b6:	e7e9      	b.n	800618c <__ieee754_pow+0x99c>
 80061b8:	f04f 0a00 	mov.w	sl, #0
 80061bc:	e71a      	b.n	8005ff4 <__ieee754_pow+0x804>
 80061be:	ec51 0b10 	vmov	r0, r1, d0
 80061c2:	4619      	mov	r1, r3
 80061c4:	e7d4      	b.n	8006170 <__ieee754_pow+0x980>
 80061c6:	491c      	ldr	r1, [pc, #112]	; (8006238 <__ieee754_pow+0xa48>)
 80061c8:	2000      	movs	r0, #0
 80061ca:	f7ff bb30 	b.w	800582e <__ieee754_pow+0x3e>
 80061ce:	2000      	movs	r0, #0
 80061d0:	2100      	movs	r1, #0
 80061d2:	f7ff bb2c 	b.w	800582e <__ieee754_pow+0x3e>
 80061d6:	4630      	mov	r0, r6
 80061d8:	4639      	mov	r1, r7
 80061da:	f7ff bb28 	b.w	800582e <__ieee754_pow+0x3e>
 80061de:	9204      	str	r2, [sp, #16]
 80061e0:	f7ff bb7a 	b.w	80058d8 <__ieee754_pow+0xe8>
 80061e4:	2300      	movs	r3, #0
 80061e6:	f7ff bb64 	b.w	80058b2 <__ieee754_pow+0xc2>
 80061ea:	bf00      	nop
 80061ec:	f3af 8000 	nop.w
 80061f0:	00000000 	.word	0x00000000
 80061f4:	3fe62e43 	.word	0x3fe62e43
 80061f8:	fefa39ef 	.word	0xfefa39ef
 80061fc:	3fe62e42 	.word	0x3fe62e42
 8006200:	0ca86c39 	.word	0x0ca86c39
 8006204:	be205c61 	.word	0xbe205c61
 8006208:	72bea4d0 	.word	0x72bea4d0
 800620c:	3e663769 	.word	0x3e663769
 8006210:	c5d26bf1 	.word	0xc5d26bf1
 8006214:	3ebbbd41 	.word	0x3ebbbd41
 8006218:	af25de2c 	.word	0xaf25de2c
 800621c:	3f11566a 	.word	0x3f11566a
 8006220:	16bebd93 	.word	0x16bebd93
 8006224:	3f66c16c 	.word	0x3f66c16c
 8006228:	5555553e 	.word	0x5555553e
 800622c:	3fc55555 	.word	0x3fc55555
 8006230:	3fe00000 	.word	0x3fe00000
 8006234:	000fffff 	.word	0x000fffff
 8006238:	3ff00000 	.word	0x3ff00000
 800623c:	4090cbff 	.word	0x4090cbff
 8006240:	3f6f3400 	.word	0x3f6f3400
 8006244:	652b82fe 	.word	0x652b82fe
 8006248:	3c971547 	.word	0x3c971547

0800624c <__ieee754_sqrt>:
 800624c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006250:	ec55 4b10 	vmov	r4, r5, d0
 8006254:	4e55      	ldr	r6, [pc, #340]	; (80063ac <__ieee754_sqrt+0x160>)
 8006256:	43ae      	bics	r6, r5
 8006258:	ee10 0a10 	vmov	r0, s0
 800625c:	ee10 3a10 	vmov	r3, s0
 8006260:	462a      	mov	r2, r5
 8006262:	4629      	mov	r1, r5
 8006264:	d110      	bne.n	8006288 <__ieee754_sqrt+0x3c>
 8006266:	ee10 2a10 	vmov	r2, s0
 800626a:	462b      	mov	r3, r5
 800626c:	f7fa f970 	bl	8000550 <__aeabi_dmul>
 8006270:	4602      	mov	r2, r0
 8006272:	460b      	mov	r3, r1
 8006274:	4620      	mov	r0, r4
 8006276:	4629      	mov	r1, r5
 8006278:	f7f9 ffb4 	bl	80001e4 <__adddf3>
 800627c:	4604      	mov	r4, r0
 800627e:	460d      	mov	r5, r1
 8006280:	ec45 4b10 	vmov	d0, r4, r5
 8006284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006288:	2d00      	cmp	r5, #0
 800628a:	dc10      	bgt.n	80062ae <__ieee754_sqrt+0x62>
 800628c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006290:	4330      	orrs	r0, r6
 8006292:	d0f5      	beq.n	8006280 <__ieee754_sqrt+0x34>
 8006294:	b15d      	cbz	r5, 80062ae <__ieee754_sqrt+0x62>
 8006296:	ee10 2a10 	vmov	r2, s0
 800629a:	462b      	mov	r3, r5
 800629c:	ee10 0a10 	vmov	r0, s0
 80062a0:	f7f9 ff9e 	bl	80001e0 <__aeabi_dsub>
 80062a4:	4602      	mov	r2, r0
 80062a6:	460b      	mov	r3, r1
 80062a8:	f7fa fa7c 	bl	80007a4 <__aeabi_ddiv>
 80062ac:	e7e6      	b.n	800627c <__ieee754_sqrt+0x30>
 80062ae:	1512      	asrs	r2, r2, #20
 80062b0:	d074      	beq.n	800639c <__ieee754_sqrt+0x150>
 80062b2:	07d4      	lsls	r4, r2, #31
 80062b4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80062b8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80062bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80062c0:	bf5e      	ittt	pl
 80062c2:	0fda      	lsrpl	r2, r3, #31
 80062c4:	005b      	lslpl	r3, r3, #1
 80062c6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80062ca:	2400      	movs	r4, #0
 80062cc:	0fda      	lsrs	r2, r3, #31
 80062ce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80062d2:	107f      	asrs	r7, r7, #1
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	2516      	movs	r5, #22
 80062d8:	4620      	mov	r0, r4
 80062da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80062de:	1886      	adds	r6, r0, r2
 80062e0:	428e      	cmp	r6, r1
 80062e2:	bfde      	ittt	le
 80062e4:	1b89      	suble	r1, r1, r6
 80062e6:	18b0      	addle	r0, r6, r2
 80062e8:	18a4      	addle	r4, r4, r2
 80062ea:	0049      	lsls	r1, r1, #1
 80062ec:	3d01      	subs	r5, #1
 80062ee:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80062f2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80062f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80062fa:	d1f0      	bne.n	80062de <__ieee754_sqrt+0x92>
 80062fc:	462a      	mov	r2, r5
 80062fe:	f04f 0e20 	mov.w	lr, #32
 8006302:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006306:	4281      	cmp	r1, r0
 8006308:	eb06 0c05 	add.w	ip, r6, r5
 800630c:	dc02      	bgt.n	8006314 <__ieee754_sqrt+0xc8>
 800630e:	d113      	bne.n	8006338 <__ieee754_sqrt+0xec>
 8006310:	459c      	cmp	ip, r3
 8006312:	d811      	bhi.n	8006338 <__ieee754_sqrt+0xec>
 8006314:	f1bc 0f00 	cmp.w	ip, #0
 8006318:	eb0c 0506 	add.w	r5, ip, r6
 800631c:	da43      	bge.n	80063a6 <__ieee754_sqrt+0x15a>
 800631e:	2d00      	cmp	r5, #0
 8006320:	db41      	blt.n	80063a6 <__ieee754_sqrt+0x15a>
 8006322:	f100 0801 	add.w	r8, r0, #1
 8006326:	1a09      	subs	r1, r1, r0
 8006328:	459c      	cmp	ip, r3
 800632a:	bf88      	it	hi
 800632c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8006330:	eba3 030c 	sub.w	r3, r3, ip
 8006334:	4432      	add	r2, r6
 8006336:	4640      	mov	r0, r8
 8006338:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800633c:	f1be 0e01 	subs.w	lr, lr, #1
 8006340:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8006344:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006348:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800634c:	d1db      	bne.n	8006306 <__ieee754_sqrt+0xba>
 800634e:	430b      	orrs	r3, r1
 8006350:	d006      	beq.n	8006360 <__ieee754_sqrt+0x114>
 8006352:	1c50      	adds	r0, r2, #1
 8006354:	bf13      	iteet	ne
 8006356:	3201      	addne	r2, #1
 8006358:	3401      	addeq	r4, #1
 800635a:	4672      	moveq	r2, lr
 800635c:	f022 0201 	bicne.w	r2, r2, #1
 8006360:	1063      	asrs	r3, r4, #1
 8006362:	0852      	lsrs	r2, r2, #1
 8006364:	07e1      	lsls	r1, r4, #31
 8006366:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800636a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800636e:	bf48      	it	mi
 8006370:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006374:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006378:	4614      	mov	r4, r2
 800637a:	e781      	b.n	8006280 <__ieee754_sqrt+0x34>
 800637c:	0ad9      	lsrs	r1, r3, #11
 800637e:	3815      	subs	r0, #21
 8006380:	055b      	lsls	r3, r3, #21
 8006382:	2900      	cmp	r1, #0
 8006384:	d0fa      	beq.n	800637c <__ieee754_sqrt+0x130>
 8006386:	02cd      	lsls	r5, r1, #11
 8006388:	d50a      	bpl.n	80063a0 <__ieee754_sqrt+0x154>
 800638a:	f1c2 0420 	rsb	r4, r2, #32
 800638e:	fa23 f404 	lsr.w	r4, r3, r4
 8006392:	1e55      	subs	r5, r2, #1
 8006394:	4093      	lsls	r3, r2
 8006396:	4321      	orrs	r1, r4
 8006398:	1b42      	subs	r2, r0, r5
 800639a:	e78a      	b.n	80062b2 <__ieee754_sqrt+0x66>
 800639c:	4610      	mov	r0, r2
 800639e:	e7f0      	b.n	8006382 <__ieee754_sqrt+0x136>
 80063a0:	0049      	lsls	r1, r1, #1
 80063a2:	3201      	adds	r2, #1
 80063a4:	e7ef      	b.n	8006386 <__ieee754_sqrt+0x13a>
 80063a6:	4680      	mov	r8, r0
 80063a8:	e7bd      	b.n	8006326 <__ieee754_sqrt+0xda>
 80063aa:	bf00      	nop
 80063ac:	7ff00000 	.word	0x7ff00000

080063b0 <__ieee754_sqrtf>:
 80063b0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80063b4:	4770      	bx	lr

080063b6 <with_errno>:
 80063b6:	b570      	push	{r4, r5, r6, lr}
 80063b8:	4604      	mov	r4, r0
 80063ba:	460d      	mov	r5, r1
 80063bc:	4616      	mov	r6, r2
 80063be:	f7ff f957 	bl	8005670 <__errno>
 80063c2:	4629      	mov	r1, r5
 80063c4:	6006      	str	r6, [r0, #0]
 80063c6:	4620      	mov	r0, r4
 80063c8:	bd70      	pop	{r4, r5, r6, pc}

080063ca <xflow>:
 80063ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063cc:	4614      	mov	r4, r2
 80063ce:	461d      	mov	r5, r3
 80063d0:	b108      	cbz	r0, 80063d6 <xflow+0xc>
 80063d2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80063d6:	e9cd 2300 	strd	r2, r3, [sp]
 80063da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063de:	4620      	mov	r0, r4
 80063e0:	4629      	mov	r1, r5
 80063e2:	f7fa f8b5 	bl	8000550 <__aeabi_dmul>
 80063e6:	2222      	movs	r2, #34	; 0x22
 80063e8:	b003      	add	sp, #12
 80063ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063ee:	f7ff bfe2 	b.w	80063b6 <with_errno>

080063f2 <__math_uflow>:
 80063f2:	b508      	push	{r3, lr}
 80063f4:	2200      	movs	r2, #0
 80063f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80063fa:	f7ff ffe6 	bl	80063ca <xflow>
 80063fe:	ec41 0b10 	vmov	d0, r0, r1
 8006402:	bd08      	pop	{r3, pc}

08006404 <__math_oflow>:
 8006404:	b508      	push	{r3, lr}
 8006406:	2200      	movs	r2, #0
 8006408:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800640c:	f7ff ffdd 	bl	80063ca <xflow>
 8006410:	ec41 0b10 	vmov	d0, r0, r1
 8006414:	bd08      	pop	{r3, pc}

08006416 <fabs>:
 8006416:	ec51 0b10 	vmov	r0, r1, d0
 800641a:	ee10 2a10 	vmov	r2, s0
 800641e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006422:	ec43 2b10 	vmov	d0, r2, r3
 8006426:	4770      	bx	lr

08006428 <finite>:
 8006428:	b082      	sub	sp, #8
 800642a:	ed8d 0b00 	vstr	d0, [sp]
 800642e:	9801      	ldr	r0, [sp, #4]
 8006430:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006434:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006438:	0fc0      	lsrs	r0, r0, #31
 800643a:	b002      	add	sp, #8
 800643c:	4770      	bx	lr
	...

08006440 <scalbn>:
 8006440:	b570      	push	{r4, r5, r6, lr}
 8006442:	ec55 4b10 	vmov	r4, r5, d0
 8006446:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800644a:	4606      	mov	r6, r0
 800644c:	462b      	mov	r3, r5
 800644e:	b99a      	cbnz	r2, 8006478 <scalbn+0x38>
 8006450:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006454:	4323      	orrs	r3, r4
 8006456:	d036      	beq.n	80064c6 <scalbn+0x86>
 8006458:	4b39      	ldr	r3, [pc, #228]	; (8006540 <scalbn+0x100>)
 800645a:	4629      	mov	r1, r5
 800645c:	ee10 0a10 	vmov	r0, s0
 8006460:	2200      	movs	r2, #0
 8006462:	f7fa f875 	bl	8000550 <__aeabi_dmul>
 8006466:	4b37      	ldr	r3, [pc, #220]	; (8006544 <scalbn+0x104>)
 8006468:	429e      	cmp	r6, r3
 800646a:	4604      	mov	r4, r0
 800646c:	460d      	mov	r5, r1
 800646e:	da10      	bge.n	8006492 <scalbn+0x52>
 8006470:	a32b      	add	r3, pc, #172	; (adr r3, 8006520 <scalbn+0xe0>)
 8006472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006476:	e03a      	b.n	80064ee <scalbn+0xae>
 8006478:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800647c:	428a      	cmp	r2, r1
 800647e:	d10c      	bne.n	800649a <scalbn+0x5a>
 8006480:	ee10 2a10 	vmov	r2, s0
 8006484:	4620      	mov	r0, r4
 8006486:	4629      	mov	r1, r5
 8006488:	f7f9 feac 	bl	80001e4 <__adddf3>
 800648c:	4604      	mov	r4, r0
 800648e:	460d      	mov	r5, r1
 8006490:	e019      	b.n	80064c6 <scalbn+0x86>
 8006492:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006496:	460b      	mov	r3, r1
 8006498:	3a36      	subs	r2, #54	; 0x36
 800649a:	4432      	add	r2, r6
 800649c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80064a0:	428a      	cmp	r2, r1
 80064a2:	dd08      	ble.n	80064b6 <scalbn+0x76>
 80064a4:	2d00      	cmp	r5, #0
 80064a6:	a120      	add	r1, pc, #128	; (adr r1, 8006528 <scalbn+0xe8>)
 80064a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064ac:	da1c      	bge.n	80064e8 <scalbn+0xa8>
 80064ae:	a120      	add	r1, pc, #128	; (adr r1, 8006530 <scalbn+0xf0>)
 80064b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064b4:	e018      	b.n	80064e8 <scalbn+0xa8>
 80064b6:	2a00      	cmp	r2, #0
 80064b8:	dd08      	ble.n	80064cc <scalbn+0x8c>
 80064ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80064be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80064c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80064c6:	ec45 4b10 	vmov	d0, r4, r5
 80064ca:	bd70      	pop	{r4, r5, r6, pc}
 80064cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80064d0:	da19      	bge.n	8006506 <scalbn+0xc6>
 80064d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80064d6:	429e      	cmp	r6, r3
 80064d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80064dc:	dd0a      	ble.n	80064f4 <scalbn+0xb4>
 80064de:	a112      	add	r1, pc, #72	; (adr r1, 8006528 <scalbn+0xe8>)
 80064e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1e2      	bne.n	80064ae <scalbn+0x6e>
 80064e8:	a30f      	add	r3, pc, #60	; (adr r3, 8006528 <scalbn+0xe8>)
 80064ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ee:	f7fa f82f 	bl	8000550 <__aeabi_dmul>
 80064f2:	e7cb      	b.n	800648c <scalbn+0x4c>
 80064f4:	a10a      	add	r1, pc, #40	; (adr r1, 8006520 <scalbn+0xe0>)
 80064f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d0b8      	beq.n	8006470 <scalbn+0x30>
 80064fe:	a10e      	add	r1, pc, #56	; (adr r1, 8006538 <scalbn+0xf8>)
 8006500:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006504:	e7b4      	b.n	8006470 <scalbn+0x30>
 8006506:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800650a:	3236      	adds	r2, #54	; 0x36
 800650c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006510:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006514:	4620      	mov	r0, r4
 8006516:	4b0c      	ldr	r3, [pc, #48]	; (8006548 <scalbn+0x108>)
 8006518:	2200      	movs	r2, #0
 800651a:	e7e8      	b.n	80064ee <scalbn+0xae>
 800651c:	f3af 8000 	nop.w
 8006520:	c2f8f359 	.word	0xc2f8f359
 8006524:	01a56e1f 	.word	0x01a56e1f
 8006528:	8800759c 	.word	0x8800759c
 800652c:	7e37e43c 	.word	0x7e37e43c
 8006530:	8800759c 	.word	0x8800759c
 8006534:	fe37e43c 	.word	0xfe37e43c
 8006538:	c2f8f359 	.word	0xc2f8f359
 800653c:	81a56e1f 	.word	0x81a56e1f
 8006540:	43500000 	.word	0x43500000
 8006544:	ffff3cb0 	.word	0xffff3cb0
 8006548:	3c900000 	.word	0x3c900000

0800654c <_init>:
 800654c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800654e:	bf00      	nop
 8006550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006552:	bc08      	pop	{r3}
 8006554:	469e      	mov	lr, r3
 8006556:	4770      	bx	lr

08006558 <_fini>:
 8006558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800655a:	bf00      	nop
 800655c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800655e:	bc08      	pop	{r3}
 8006560:	469e      	mov	lr, r3
 8006562:	4770      	bx	lr
