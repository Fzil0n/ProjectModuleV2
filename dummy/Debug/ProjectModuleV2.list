
ProjectModuleV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f3c8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  0800f560  0800f560  0001f560  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f850  0800f850  000202a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f850  0800f850  0001f850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f858  0800f858  000202a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f858  0800f858  0001f858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f85c  0800f85c  0001f85c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a4  20000000  0800f860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001038  200002a4  0800fb04  000202a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012dc  0800fb04  000212dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bf07  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004359  00000000  00000000  0003c1db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  00040538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001278  00000000  00000000  00041990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c357  00000000  00000000  00042c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021bed  00000000  00000000  0005ef5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a00d2  00000000  00000000  00080b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00120c1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059b4  00000000  00000000  00120c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200002a4 	.word	0x200002a4
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800f548 	.word	0x0800f548

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200002a8 	.word	0x200002a8
 80001d4:	0800f548 	.word	0x0800f548

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b974 	b.w	8000ee0 <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9d08      	ldr	r5, [sp, #32]
 8000c16:	4604      	mov	r4, r0
 8000c18:	468e      	mov	lr, r1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d14d      	bne.n	8000cba <__udivmoddi4+0xaa>
 8000c1e:	428a      	cmp	r2, r1
 8000c20:	4694      	mov	ip, r2
 8000c22:	d969      	bls.n	8000cf8 <__udivmoddi4+0xe8>
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	b152      	cbz	r2, 8000c40 <__udivmoddi4+0x30>
 8000c2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2e:	f1c2 0120 	rsb	r1, r2, #32
 8000c32:	fa20 f101 	lsr.w	r1, r0, r1
 8000c36:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c3a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c3e:	4094      	lsls	r4, r2
 8000c40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c44:	0c21      	lsrs	r1, r4, #16
 8000c46:	fbbe f6f8 	udiv	r6, lr, r8
 8000c4a:	fa1f f78c 	uxth.w	r7, ip
 8000c4e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c52:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c56:	fb06 f107 	mul.w	r1, r6, r7
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	d90a      	bls.n	8000c74 <__udivmoddi4+0x64>
 8000c5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c62:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c66:	f080 811f 	bcs.w	8000ea8 <__udivmoddi4+0x298>
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	f240 811c 	bls.w	8000ea8 <__udivmoddi4+0x298>
 8000c70:	3e02      	subs	r6, #2
 8000c72:	4463      	add	r3, ip
 8000c74:	1a5b      	subs	r3, r3, r1
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c7c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c84:	fb00 f707 	mul.w	r7, r0, r7
 8000c88:	42a7      	cmp	r7, r4
 8000c8a:	d90a      	bls.n	8000ca2 <__udivmoddi4+0x92>
 8000c8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c90:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c94:	f080 810a 	bcs.w	8000eac <__udivmoddi4+0x29c>
 8000c98:	42a7      	cmp	r7, r4
 8000c9a:	f240 8107 	bls.w	8000eac <__udivmoddi4+0x29c>
 8000c9e:	4464      	add	r4, ip
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca6:	1be4      	subs	r4, r4, r7
 8000ca8:	2600      	movs	r6, #0
 8000caa:	b11d      	cbz	r5, 8000cb4 <__udivmoddi4+0xa4>
 8000cac:	40d4      	lsrs	r4, r2
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	d909      	bls.n	8000cd2 <__udivmoddi4+0xc2>
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	f000 80ef 	beq.w	8000ea2 <__udivmoddi4+0x292>
 8000cc4:	2600      	movs	r6, #0
 8000cc6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cca:	4630      	mov	r0, r6
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	fab3 f683 	clz	r6, r3
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	d14a      	bne.n	8000d70 <__udivmoddi4+0x160>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xd4>
 8000cde:	4282      	cmp	r2, r0
 8000ce0:	f200 80f9 	bhi.w	8000ed6 <__udivmoddi4+0x2c6>
 8000ce4:	1a84      	subs	r4, r0, r2
 8000ce6:	eb61 0303 	sbc.w	r3, r1, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	469e      	mov	lr, r3
 8000cee:	2d00      	cmp	r5, #0
 8000cf0:	d0e0      	beq.n	8000cb4 <__udivmoddi4+0xa4>
 8000cf2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cf6:	e7dd      	b.n	8000cb4 <__udivmoddi4+0xa4>
 8000cf8:	b902      	cbnz	r2, 8000cfc <__udivmoddi4+0xec>
 8000cfa:	deff      	udf	#255	; 0xff
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f040 8092 	bne.w	8000e2a <__udivmoddi4+0x21a>
 8000d06:	eba1 010c 	sub.w	r1, r1, ip
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2601      	movs	r6, #1
 8000d14:	0c20      	lsrs	r0, r4, #16
 8000d16:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d1a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d1e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d22:	fb0e f003 	mul.w	r0, lr, r3
 8000d26:	4288      	cmp	r0, r1
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x12c>
 8000d2a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d2e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x12a>
 8000d34:	4288      	cmp	r0, r1
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2c0>
 8000d3a:	4643      	mov	r3, r8
 8000d3c:	1a09      	subs	r1, r1, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d44:	fb07 1110 	mls	r1, r7, r0, r1
 8000d48:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x156>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x154>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2ca>
 8000d64:	4608      	mov	r0, r1
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d6e:	e79c      	b.n	8000caa <__udivmoddi4+0x9a>
 8000d70:	f1c6 0720 	rsb	r7, r6, #32
 8000d74:	40b3      	lsls	r3, r6
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d82:	fa01 f306 	lsl.w	r3, r1, r6
 8000d86:	431c      	orrs	r4, r3
 8000d88:	40f9      	lsrs	r1, r7
 8000d8a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d92:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d96:	0c20      	lsrs	r0, r4, #16
 8000d98:	fa1f fe8c 	uxth.w	lr, ip
 8000d9c:	fb09 1118 	mls	r1, r9, r8, r1
 8000da0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000da4:	fb08 f00e 	mul.w	r0, r8, lr
 8000da8:	4288      	cmp	r0, r1
 8000daa:	fa02 f206 	lsl.w	r2, r2, r6
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b8>
 8000db0:	eb1c 0101 	adds.w	r1, ip, r1
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2bc>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2bc>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4461      	add	r1, ip
 8000dc8:	1a09      	subs	r1, r1, r0
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd0:	fb09 1110 	mls	r1, r9, r0, r1
 8000dd4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ddc:	458e      	cmp	lr, r1
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1e2>
 8000de0:	eb1c 0101 	adds.w	r1, ip, r1
 8000de4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2b4>
 8000dea:	458e      	cmp	lr, r1
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2b4>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4461      	add	r1, ip
 8000df2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000df6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dfa:	eba1 010e 	sub.w	r1, r1, lr
 8000dfe:	42a1      	cmp	r1, r4
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46a6      	mov	lr, r4
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x2a4>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x2a0>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x212>
 8000e0a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e0e:	eb61 010e 	sbc.w	r1, r1, lr
 8000e12:	fa01 f707 	lsl.w	r7, r1, r7
 8000e16:	fa22 f306 	lsr.w	r3, r2, r6
 8000e1a:	40f1      	lsrs	r1, r6
 8000e1c:	431f      	orrs	r7, r3
 8000e1e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e22:	2600      	movs	r6, #0
 8000e24:	4631      	mov	r1, r6
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	f1c2 0320 	rsb	r3, r2, #32
 8000e2e:	40d8      	lsrs	r0, r3
 8000e30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e34:	fa21 f303 	lsr.w	r3, r1, r3
 8000e38:	4091      	lsls	r1, r2
 8000e3a:	4301      	orrs	r1, r0
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e48:	fb07 3610 	mls	r6, r7, r0, r3
 8000e4c:	0c0b      	lsrs	r3, r1, #16
 8000e4e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e52:	fb00 f60e 	mul.w	r6, r0, lr
 8000e56:	429e      	cmp	r6, r3
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x260>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b8>
 8000e68:	429e      	cmp	r6, r3
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b8>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4463      	add	r3, ip
 8000e70:	1b9b      	subs	r3, r3, r6
 8000e72:	b289      	uxth	r1, r1
 8000e74:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e78:	fb07 3316 	mls	r3, r7, r6, r3
 8000e7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e80:	fb06 f30e 	mul.w	r3, r6, lr
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x28a>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2b0>
 8000e92:	428b      	cmp	r3, r1
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2b0>
 8000e96:	3e02      	subs	r6, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	1ac9      	subs	r1, r1, r3
 8000e9c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0x104>
 8000ea2:	462e      	mov	r6, r5
 8000ea4:	4628      	mov	r0, r5
 8000ea6:	e705      	b.n	8000cb4 <__udivmoddi4+0xa4>
 8000ea8:	4606      	mov	r6, r0
 8000eaa:	e6e3      	b.n	8000c74 <__udivmoddi4+0x64>
 8000eac:	4618      	mov	r0, r3
 8000eae:	e6f8      	b.n	8000ca2 <__udivmoddi4+0x92>
 8000eb0:	454b      	cmp	r3, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f8>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ebc:	3801      	subs	r0, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f8>
 8000ec0:	4646      	mov	r6, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x28a>
 8000ec4:	4620      	mov	r0, r4
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1e2>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x260>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b8>
 8000ed0:	3b02      	subs	r3, #2
 8000ed2:	4461      	add	r1, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x12c>
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	e709      	b.n	8000cee <__udivmoddi4+0xde>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x156>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <Endeffector_Update_Status>:
uint8_t Emergency_Status;
uint8_t TestMode_Status;
uint8_t RunMode_Status;
uint8_t GripperMode_Status;

void Endeffector_Update_Status(){
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
	Error_Status = (ReadData >> 5) & 0b00000111;
 8000ee8:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <Endeffector_Update_Status+0x60>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	095b      	lsrs	r3, r3, #5
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <Endeffector_Update_Status+0x64>)
 8000ef2:	701a      	strb	r2, [r3, #0]
	Emergency_Status = (ReadData >> 4) & 0b00000001;
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <Endeffector_Update_Status+0x60>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	091b      	lsrs	r3, r3, #4
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <Endeffector_Update_Status+0x68>)
 8000f04:	701a      	strb	r2, [r3, #0]
	TestMode_Status = (ReadData >> 3) & 0b00000001;
 8000f06:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <Endeffector_Update_Status+0x60>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	08db      	lsrs	r3, r3, #3
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <Endeffector_Update_Status+0x6c>)
 8000f16:	701a      	strb	r2, [r3, #0]
	RunMode_Status = (ReadData >> 2) & 0b00000001;
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <Endeffector_Update_Status+0x60>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	089b      	lsrs	r3, r3, #2
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <Endeffector_Update_Status+0x70>)
 8000f28:	701a      	strb	r2, [r3, #0]
	GripperMode_Status = ReadData & 0b00000011;
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <Endeffector_Update_Status+0x60>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <Endeffector_Update_Status+0x74>)
 8000f36:	701a      	strb	r2, [r3, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	200002c5 	.word	0x200002c5
 8000f48:	200002c8 	.word	0x200002c8
 8000f4c:	200002c9 	.word	0x200002c9
 8000f50:	200002ca 	.word	0x200002ca
 8000f54:	200002cb 	.word	0x200002cb
 8000f58:	200002cc 	.word	0x200002cc

08000f5c <Endeffector_Read_Status>:

void Endeffector_Read_Status(){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 8000f60:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <Endeffector_Read_Status+0x74>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d125      	bne.n	8000fb4 <Endeffector_Read_Status+0x58>
 8000f68:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <Endeffector_Read_Status+0x78>)
 8000f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b20      	cmp	r3, #32
 8000f72:	d11f      	bne.n	8000fb4 <Endeffector_Read_Status+0x58>
		HAL_I2C_Master_Receive_IT(&hi2c1, SlaveAddr, &ReadData, sizeof(ReadData));
 8000f74:	2301      	movs	r3, #1
 8000f76:	4a18      	ldr	r2, [pc, #96]	; (8000fd8 <Endeffector_Read_Status+0x7c>)
 8000f78:	212a      	movs	r1, #42	; 0x2a
 8000f7a:	4816      	ldr	r0, [pc, #88]	; (8000fd4 <Endeffector_Read_Status+0x78>)
 8000f7c:	f006 fdf2 	bl	8007b64 <HAL_I2C_Master_Receive_IT>
		count++;
 8000f80:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <Endeffector_Read_Status+0x80>)
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	3301      	adds	r3, #1
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <Endeffector_Read_Status+0x80>)
 8000f8a:	801a      	strh	r2, [r3, #0]
	}

	static uint32_t timestamp = 0;
	while(i < 150){
 8000f8c:	e012      	b.n	8000fb4 <Endeffector_Read_Status+0x58>
		if(HAL_GetTick() >= timestamp){
 8000f8e:	f005 f8f5 	bl	800617c <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <Endeffector_Read_Status+0x84>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d30b      	bcc.n	8000fb4 <Endeffector_Read_Status+0x58>
			timestamp = HAL_GetTick() + 10;
 8000f9c:	f005 f8ee 	bl	800617c <HAL_GetTick>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	330a      	adds	r3, #10
 8000fa4:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <Endeffector_Read_Status+0x84>)
 8000fa6:	6013      	str	r3, [r2, #0]
			i++;
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <Endeffector_Read_Status+0x88>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <Endeffector_Read_Status+0x88>)
 8000fb2:	801a      	strh	r2, [r3, #0]
	while(i < 150){
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <Endeffector_Read_Status+0x88>)
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	2b95      	cmp	r3, #149	; 0x95
 8000fba:	d9e8      	bls.n	8000f8e <Endeffector_Read_Status+0x32>
		}
	}

	Endeffector_Update_Status();
 8000fbc:	f7ff ff92 	bl	8000ee4 <Endeffector_Update_Status>
	Stamp = 0;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <Endeffector_Read_Status+0x74>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
	i = 0;
 8000fc6:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <Endeffector_Read_Status+0x88>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	801a      	strh	r2, [r3, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	200002c0 	.word	0x200002c0
 8000fd4:	200003b8 	.word	0x200003b8
 8000fd8:	200002c5 	.word	0x200002c5
 8000fdc:	200002c6 	.word	0x200002c6
 8000fe0:	200002d0 	.word	0x200002d0
 8000fe4:	200002c2 	.word	0x200002c2

08000fe8 <Endeffector_SoftReset>:

void Endeffector_SoftReset(){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	static uint8_t CommandSeq[4] = {SoftReset_Seq1, SoftReset_Seq2, SoftReset_Seq3, SoftReset_Seq4};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 8000fec:	4b18      	ldr	r3, [pc, #96]	; (8001050 <Endeffector_SoftReset+0x68>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d11f      	bne.n	8001034 <Endeffector_SoftReset+0x4c>
 8000ff4:	4b17      	ldr	r3, [pc, #92]	; (8001054 <Endeffector_SoftReset+0x6c>)
 8000ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b20      	cmp	r3, #32
 8000ffe:	d119      	bne.n	8001034 <Endeffector_SoftReset+0x4c>
		HAL_I2C_Master_Transmit_IT(&hi2c1, SlaveAddr, CommandSeq, sizeof(CommandSeq));
 8001000:	2304      	movs	r3, #4
 8001002:	4a15      	ldr	r2, [pc, #84]	; (8001058 <Endeffector_SoftReset+0x70>)
 8001004:	212a      	movs	r1, #42	; 0x2a
 8001006:	4813      	ldr	r0, [pc, #76]	; (8001054 <Endeffector_SoftReset+0x6c>)
 8001008:	f006 fd06 	bl	8007a18 <HAL_I2C_Master_Transmit_IT>
	}

	static uint32_t timestamp = 0;
	while(i < 150){
 800100c:	e012      	b.n	8001034 <Endeffector_SoftReset+0x4c>
		if(HAL_GetTick() >= timestamp){
 800100e:	f005 f8b5 	bl	800617c <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <Endeffector_SoftReset+0x74>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	429a      	cmp	r2, r3
 800101a:	d30b      	bcc.n	8001034 <Endeffector_SoftReset+0x4c>
			timestamp = HAL_GetTick() + 10;
 800101c:	f005 f8ae 	bl	800617c <HAL_GetTick>
 8001020:	4603      	mov	r3, r0
 8001022:	330a      	adds	r3, #10
 8001024:	4a0d      	ldr	r2, [pc, #52]	; (800105c <Endeffector_SoftReset+0x74>)
 8001026:	6013      	str	r3, [r2, #0]
			i++;
 8001028:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <Endeffector_SoftReset+0x78>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	3301      	adds	r3, #1
 800102e:	b29a      	uxth	r2, r3
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <Endeffector_SoftReset+0x78>)
 8001032:	801a      	strh	r2, [r3, #0]
	while(i < 150){
 8001034:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <Endeffector_SoftReset+0x78>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	2b95      	cmp	r3, #149	; 0x95
 800103a:	d9e8      	bls.n	800100e <Endeffector_SoftReset+0x26>
		}
	}
	Endeffector_Read_Status();
 800103c:	f7ff ff8e 	bl	8000f5c <Endeffector_Read_Status>
	Stamp = 0;
 8001040:	4b03      	ldr	r3, [pc, #12]	; (8001050 <Endeffector_SoftReset+0x68>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
	i = 0;
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <Endeffector_SoftReset+0x78>)
 8001048:	2200      	movs	r2, #0
 800104a:	801a      	strh	r2, [r3, #0]
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200002c0 	.word	0x200002c0
 8001054:	200003b8 	.word	0x200003b8
 8001058:	20000000 	.word	0x20000000
 800105c:	200002d4 	.word	0x200002d4
 8001060:	200002c2 	.word	0x200002c2

08001064 <Endeffector_EmergencyTrigger>:

void Endeffector_EmergencyTrigger(){
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	static uint8_t EmergencyCommand[1] = {EmergencyTrigger};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 8001068:	4b18      	ldr	r3, [pc, #96]	; (80010cc <Endeffector_EmergencyTrigger+0x68>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d11f      	bne.n	80010b0 <Endeffector_EmergencyTrigger+0x4c>
 8001070:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <Endeffector_EmergencyTrigger+0x6c>)
 8001072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b20      	cmp	r3, #32
 800107a:	d119      	bne.n	80010b0 <Endeffector_EmergencyTrigger+0x4c>
		HAL_I2C_Master_Transmit_IT(&hi2c1, SlaveAddr, EmergencyCommand, sizeof(EmergencyCommand));
 800107c:	2301      	movs	r3, #1
 800107e:	4a15      	ldr	r2, [pc, #84]	; (80010d4 <Endeffector_EmergencyTrigger+0x70>)
 8001080:	212a      	movs	r1, #42	; 0x2a
 8001082:	4813      	ldr	r0, [pc, #76]	; (80010d0 <Endeffector_EmergencyTrigger+0x6c>)
 8001084:	f006 fcc8 	bl	8007a18 <HAL_I2C_Master_Transmit_IT>
	}

	static uint32_t timestamp = 0;
	while(i < 150){
 8001088:	e012      	b.n	80010b0 <Endeffector_EmergencyTrigger+0x4c>
		if(HAL_GetTick() >= timestamp){
 800108a:	f005 f877 	bl	800617c <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <Endeffector_EmergencyTrigger+0x74>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	429a      	cmp	r2, r3
 8001096:	d30b      	bcc.n	80010b0 <Endeffector_EmergencyTrigger+0x4c>
			timestamp = HAL_GetTick() + 10;
 8001098:	f005 f870 	bl	800617c <HAL_GetTick>
 800109c:	4603      	mov	r3, r0
 800109e:	330a      	adds	r3, #10
 80010a0:	4a0d      	ldr	r2, [pc, #52]	; (80010d8 <Endeffector_EmergencyTrigger+0x74>)
 80010a2:	6013      	str	r3, [r2, #0]
			i++;
 80010a4:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <Endeffector_EmergencyTrigger+0x78>)
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	3301      	adds	r3, #1
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <Endeffector_EmergencyTrigger+0x78>)
 80010ae:	801a      	strh	r2, [r3, #0]
	while(i < 150){
 80010b0:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <Endeffector_EmergencyTrigger+0x78>)
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	2b95      	cmp	r3, #149	; 0x95
 80010b6:	d9e8      	bls.n	800108a <Endeffector_EmergencyTrigger+0x26>
		}
	}

	Endeffector_Read_Status();
 80010b8:	f7ff ff50 	bl	8000f5c <Endeffector_Read_Status>
	Stamp = 0;
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <Endeffector_EmergencyTrigger+0x68>)
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
	i = 0;
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <Endeffector_EmergencyTrigger+0x78>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	801a      	strh	r2, [r3, #0]
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200002c0 	.word	0x200002c0
 80010d0:	200003b8 	.word	0x200003b8
 80010d4:	20000004 	.word	0x20000004
 80010d8:	200002d8 	.word	0x200002d8
 80010dc:	200002c2 	.word	0x200002c2

080010e0 <Endeffector_EmergencyExit>:

void Endeffector_EmergencyExit(){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	static uint8_t EmergencySeq[4] = {EmergencyOut_Seq1, EmergencyOut_Seq2, EmergencyOut_Seq3, EmergencyOut_Seq4};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <Endeffector_EmergencyExit+0x68>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d11f      	bne.n	800112c <Endeffector_EmergencyExit+0x4c>
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <Endeffector_EmergencyExit+0x6c>)
 80010ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b20      	cmp	r3, #32
 80010f6:	d119      	bne.n	800112c <Endeffector_EmergencyExit+0x4c>
		HAL_I2C_Master_Transmit_IT(&hi2c1, SlaveAddr, EmergencySeq, sizeof(EmergencySeq));
 80010f8:	2304      	movs	r3, #4
 80010fa:	4a15      	ldr	r2, [pc, #84]	; (8001150 <Endeffector_EmergencyExit+0x70>)
 80010fc:	212a      	movs	r1, #42	; 0x2a
 80010fe:	4813      	ldr	r0, [pc, #76]	; (800114c <Endeffector_EmergencyExit+0x6c>)
 8001100:	f006 fc8a 	bl	8007a18 <HAL_I2C_Master_Transmit_IT>
	}

	static uint32_t timestamp = 0;
	while(i < 150){
 8001104:	e012      	b.n	800112c <Endeffector_EmergencyExit+0x4c>
		if(HAL_GetTick() >= timestamp){
 8001106:	f005 f839 	bl	800617c <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <Endeffector_EmergencyExit+0x74>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d30b      	bcc.n	800112c <Endeffector_EmergencyExit+0x4c>
			timestamp = HAL_GetTick() + 10;
 8001114:	f005 f832 	bl	800617c <HAL_GetTick>
 8001118:	4603      	mov	r3, r0
 800111a:	330a      	adds	r3, #10
 800111c:	4a0d      	ldr	r2, [pc, #52]	; (8001154 <Endeffector_EmergencyExit+0x74>)
 800111e:	6013      	str	r3, [r2, #0]
			i++;
 8001120:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <Endeffector_EmergencyExit+0x78>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	3301      	adds	r3, #1
 8001126:	b29a      	uxth	r2, r3
 8001128:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <Endeffector_EmergencyExit+0x78>)
 800112a:	801a      	strh	r2, [r3, #0]
	while(i < 150){
 800112c:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <Endeffector_EmergencyExit+0x78>)
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	2b95      	cmp	r3, #149	; 0x95
 8001132:	d9e8      	bls.n	8001106 <Endeffector_EmergencyExit+0x26>
		}
	}

	Endeffector_Read_Status();
 8001134:	f7ff ff12 	bl	8000f5c <Endeffector_Read_Status>
	Stamp = 0;
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <Endeffector_EmergencyExit+0x68>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
	i = 0;
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <Endeffector_EmergencyExit+0x78>)
 8001140:	2200      	movs	r2, #0
 8001142:	801a      	strh	r2, [r3, #0]
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200002c0 	.word	0x200002c0
 800114c:	200003b8 	.word	0x200003b8
 8001150:	20000008 	.word	0x20000008
 8001154:	200002dc 	.word	0x200002dc
 8001158:	200002c2 	.word	0x200002c2

0800115c <Endeffector_TestModeOn>:

void Endeffector_TestModeOn(){
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	static uint8_t TestModeON[2] = {TestMode_Command, TestMode_On};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 8001160:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <Endeffector_TestModeOn+0x68>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d11f      	bne.n	80011a8 <Endeffector_TestModeOn+0x4c>
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <Endeffector_TestModeOn+0x6c>)
 800116a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b20      	cmp	r3, #32
 8001172:	d119      	bne.n	80011a8 <Endeffector_TestModeOn+0x4c>
		HAL_I2C_Master_Transmit_IT(&hi2c1, SlaveAddr, TestModeON, sizeof(TestModeON));
 8001174:	2302      	movs	r3, #2
 8001176:	4a15      	ldr	r2, [pc, #84]	; (80011cc <Endeffector_TestModeOn+0x70>)
 8001178:	212a      	movs	r1, #42	; 0x2a
 800117a:	4813      	ldr	r0, [pc, #76]	; (80011c8 <Endeffector_TestModeOn+0x6c>)
 800117c:	f006 fc4c 	bl	8007a18 <HAL_I2C_Master_Transmit_IT>
	}

	static uint32_t timestamp = 0;
	while(i < 150){
 8001180:	e012      	b.n	80011a8 <Endeffector_TestModeOn+0x4c>
		if(HAL_GetTick() >= timestamp){
 8001182:	f004 fffb 	bl	800617c <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <Endeffector_TestModeOn+0x74>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	429a      	cmp	r2, r3
 800118e:	d30b      	bcc.n	80011a8 <Endeffector_TestModeOn+0x4c>
			timestamp = HAL_GetTick() + 10;
 8001190:	f004 fff4 	bl	800617c <HAL_GetTick>
 8001194:	4603      	mov	r3, r0
 8001196:	330a      	adds	r3, #10
 8001198:	4a0d      	ldr	r2, [pc, #52]	; (80011d0 <Endeffector_TestModeOn+0x74>)
 800119a:	6013      	str	r3, [r2, #0]
			i++;
 800119c:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <Endeffector_TestModeOn+0x78>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	3301      	adds	r3, #1
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <Endeffector_TestModeOn+0x78>)
 80011a6:	801a      	strh	r2, [r3, #0]
	while(i < 150){
 80011a8:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <Endeffector_TestModeOn+0x78>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	2b95      	cmp	r3, #149	; 0x95
 80011ae:	d9e8      	bls.n	8001182 <Endeffector_TestModeOn+0x26>
		}
	}

	Endeffector_Read_Status();
 80011b0:	f7ff fed4 	bl	8000f5c <Endeffector_Read_Status>
	Stamp = 0;
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <Endeffector_TestModeOn+0x68>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
	i = 0;
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <Endeffector_TestModeOn+0x78>)
 80011bc:	2200      	movs	r2, #0
 80011be:	801a      	strh	r2, [r3, #0]
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200002c0 	.word	0x200002c0
 80011c8:	200003b8 	.word	0x200003b8
 80011cc:	2000000c 	.word	0x2000000c
 80011d0:	200002e0 	.word	0x200002e0
 80011d4:	200002c2 	.word	0x200002c2

080011d8 <Endeffector_TestModeOff>:

void Endeffector_TestModeOff(){
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	static uint8_t TestModeOff[2] = {TestMode_Command, TestMode_Off};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 80011dc:	4b18      	ldr	r3, [pc, #96]	; (8001240 <Endeffector_TestModeOff+0x68>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d11f      	bne.n	8001224 <Endeffector_TestModeOff+0x4c>
 80011e4:	4b17      	ldr	r3, [pc, #92]	; (8001244 <Endeffector_TestModeOff+0x6c>)
 80011e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b20      	cmp	r3, #32
 80011ee:	d119      	bne.n	8001224 <Endeffector_TestModeOff+0x4c>
		HAL_I2C_Master_Transmit_IT(&hi2c1, SlaveAddr, TestModeOff, sizeof(TestModeOff));
 80011f0:	2302      	movs	r3, #2
 80011f2:	4a15      	ldr	r2, [pc, #84]	; (8001248 <Endeffector_TestModeOff+0x70>)
 80011f4:	212a      	movs	r1, #42	; 0x2a
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <Endeffector_TestModeOff+0x6c>)
 80011f8:	f006 fc0e 	bl	8007a18 <HAL_I2C_Master_Transmit_IT>
	}

	static uint32_t timestamp = 0;
	while(i < 150){
 80011fc:	e012      	b.n	8001224 <Endeffector_TestModeOff+0x4c>
		if(HAL_GetTick() >= timestamp){
 80011fe:	f004 ffbd 	bl	800617c <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <Endeffector_TestModeOff+0x74>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	429a      	cmp	r2, r3
 800120a:	d30b      	bcc.n	8001224 <Endeffector_TestModeOff+0x4c>
			timestamp = HAL_GetTick() + 10;
 800120c:	f004 ffb6 	bl	800617c <HAL_GetTick>
 8001210:	4603      	mov	r3, r0
 8001212:	330a      	adds	r3, #10
 8001214:	4a0d      	ldr	r2, [pc, #52]	; (800124c <Endeffector_TestModeOff+0x74>)
 8001216:	6013      	str	r3, [r2, #0]
			i++;
 8001218:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <Endeffector_TestModeOff+0x78>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	3301      	adds	r3, #1
 800121e:	b29a      	uxth	r2, r3
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <Endeffector_TestModeOff+0x78>)
 8001222:	801a      	strh	r2, [r3, #0]
	while(i < 150){
 8001224:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <Endeffector_TestModeOff+0x78>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	2b95      	cmp	r3, #149	; 0x95
 800122a:	d9e8      	bls.n	80011fe <Endeffector_TestModeOff+0x26>
		}
	}

	Endeffector_Read_Status();
 800122c:	f7ff fe96 	bl	8000f5c <Endeffector_Read_Status>
	Stamp = 0;
 8001230:	4b03      	ldr	r3, [pc, #12]	; (8001240 <Endeffector_TestModeOff+0x68>)
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
	i = 0;
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <Endeffector_TestModeOff+0x78>)
 8001238:	2200      	movs	r2, #0
 800123a:	801a      	strh	r2, [r3, #0]
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	200002c0 	.word	0x200002c0
 8001244:	200003b8 	.word	0x200003b8
 8001248:	20000010 	.word	0x20000010
 800124c:	200002e4 	.word	0x200002e4
 8001250:	200002c2 	.word	0x200002c2

08001254 <Endeffector_GripperModeOn>:

void Endeffector_GripperModeOn(){
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	static uint8_t GripperOn[2] = {GripperMode_Command, GripperMode_On};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 8001258:	4b18      	ldr	r3, [pc, #96]	; (80012bc <Endeffector_GripperModeOn+0x68>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d11f      	bne.n	80012a0 <Endeffector_GripperModeOn+0x4c>
 8001260:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <Endeffector_GripperModeOn+0x6c>)
 8001262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b20      	cmp	r3, #32
 800126a:	d119      	bne.n	80012a0 <Endeffector_GripperModeOn+0x4c>
		HAL_I2C_Master_Transmit_IT(&hi2c1, SlaveAddr, GripperOn, sizeof(GripperOn));
 800126c:	2302      	movs	r3, #2
 800126e:	4a15      	ldr	r2, [pc, #84]	; (80012c4 <Endeffector_GripperModeOn+0x70>)
 8001270:	212a      	movs	r1, #42	; 0x2a
 8001272:	4813      	ldr	r0, [pc, #76]	; (80012c0 <Endeffector_GripperModeOn+0x6c>)
 8001274:	f006 fbd0 	bl	8007a18 <HAL_I2C_Master_Transmit_IT>
	}

	static uint32_t timestamp = 0;
	while(i < 150){
 8001278:	e012      	b.n	80012a0 <Endeffector_GripperModeOn+0x4c>
		if(HAL_GetTick() >= timestamp){
 800127a:	f004 ff7f 	bl	800617c <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <Endeffector_GripperModeOn+0x74>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	429a      	cmp	r2, r3
 8001286:	d30b      	bcc.n	80012a0 <Endeffector_GripperModeOn+0x4c>
			timestamp = HAL_GetTick() + 10;
 8001288:	f004 ff78 	bl	800617c <HAL_GetTick>
 800128c:	4603      	mov	r3, r0
 800128e:	330a      	adds	r3, #10
 8001290:	4a0d      	ldr	r2, [pc, #52]	; (80012c8 <Endeffector_GripperModeOn+0x74>)
 8001292:	6013      	str	r3, [r2, #0]
			i++;
 8001294:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <Endeffector_GripperModeOn+0x78>)
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	3301      	adds	r3, #1
 800129a:	b29a      	uxth	r2, r3
 800129c:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <Endeffector_GripperModeOn+0x78>)
 800129e:	801a      	strh	r2, [r3, #0]
	while(i < 150){
 80012a0:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <Endeffector_GripperModeOn+0x78>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	2b95      	cmp	r3, #149	; 0x95
 80012a6:	d9e8      	bls.n	800127a <Endeffector_GripperModeOn+0x26>
		}
	}

	Endeffector_Read_Status();
 80012a8:	f7ff fe58 	bl	8000f5c <Endeffector_Read_Status>
	Stamp = 0;
 80012ac:	4b03      	ldr	r3, [pc, #12]	; (80012bc <Endeffector_GripperModeOn+0x68>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
	i = 0;
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <Endeffector_GripperModeOn+0x78>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	801a      	strh	r2, [r3, #0]
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	200002c0 	.word	0x200002c0
 80012c0:	200003b8 	.word	0x200003b8
 80012c4:	20000014 	.word	0x20000014
 80012c8:	200002e8 	.word	0x200002e8
 80012cc:	200002c2 	.word	0x200002c2

080012d0 <Endeffector_GripperModeOff>:

void Endeffector_GripperModeOff(){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	static uint8_t GripperOff[2] = {GripperMode_Command, GripperMode_Off};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 80012d4:	4b18      	ldr	r3, [pc, #96]	; (8001338 <Endeffector_GripperModeOff+0x68>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d11f      	bne.n	800131c <Endeffector_GripperModeOff+0x4c>
 80012dc:	4b17      	ldr	r3, [pc, #92]	; (800133c <Endeffector_GripperModeOff+0x6c>)
 80012de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b20      	cmp	r3, #32
 80012e6:	d119      	bne.n	800131c <Endeffector_GripperModeOff+0x4c>
		HAL_I2C_Master_Transmit_IT(&hi2c1, SlaveAddr, GripperOff, sizeof(GripperOff));
 80012e8:	2302      	movs	r3, #2
 80012ea:	4a15      	ldr	r2, [pc, #84]	; (8001340 <Endeffector_GripperModeOff+0x70>)
 80012ec:	212a      	movs	r1, #42	; 0x2a
 80012ee:	4813      	ldr	r0, [pc, #76]	; (800133c <Endeffector_GripperModeOff+0x6c>)
 80012f0:	f006 fb92 	bl	8007a18 <HAL_I2C_Master_Transmit_IT>
	}

	static uint32_t timestamp = 0;
	while(i < 150){
 80012f4:	e012      	b.n	800131c <Endeffector_GripperModeOff+0x4c>
		if(HAL_GetTick() >= timestamp){
 80012f6:	f004 ff41 	bl	800617c <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	4b11      	ldr	r3, [pc, #68]	; (8001344 <Endeffector_GripperModeOff+0x74>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	429a      	cmp	r2, r3
 8001302:	d30b      	bcc.n	800131c <Endeffector_GripperModeOff+0x4c>
			timestamp = HAL_GetTick() + 10;
 8001304:	f004 ff3a 	bl	800617c <HAL_GetTick>
 8001308:	4603      	mov	r3, r0
 800130a:	330a      	adds	r3, #10
 800130c:	4a0d      	ldr	r2, [pc, #52]	; (8001344 <Endeffector_GripperModeOff+0x74>)
 800130e:	6013      	str	r3, [r2, #0]
			i++;
 8001310:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <Endeffector_GripperModeOff+0x78>)
 8001312:	881b      	ldrh	r3, [r3, #0]
 8001314:	3301      	adds	r3, #1
 8001316:	b29a      	uxth	r2, r3
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <Endeffector_GripperModeOff+0x78>)
 800131a:	801a      	strh	r2, [r3, #0]
	while(i < 150){
 800131c:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <Endeffector_GripperModeOff+0x78>)
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	2b95      	cmp	r3, #149	; 0x95
 8001322:	d9e8      	bls.n	80012f6 <Endeffector_GripperModeOff+0x26>
		}
	}

	Endeffector_Read_Status();
 8001324:	f7ff fe1a 	bl	8000f5c <Endeffector_Read_Status>
	Stamp = 0;
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <Endeffector_GripperModeOff+0x68>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
	i = 0;
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <Endeffector_GripperModeOff+0x78>)
 8001330:	2200      	movs	r2, #0
 8001332:	801a      	strh	r2, [r3, #0]
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	200002c0 	.word	0x200002c0
 800133c:	200003b8 	.word	0x200003b8
 8001340:	20000018 	.word	0x20000018
 8001344:	200002ec 	.word	0x200002ec
 8001348:	200002c2 	.word	0x200002c2

0800134c <Endeffector_PickUp>:

void Endeffector_PickUp(){
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	static uint8_t PickUp[2] = {GripperMode_Command, GripperMode_PickUp};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 8001350:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <Endeffector_PickUp+0x68>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d11f      	bne.n	8001398 <Endeffector_PickUp+0x4c>
 8001358:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <Endeffector_PickUp+0x6c>)
 800135a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b20      	cmp	r3, #32
 8001362:	d119      	bne.n	8001398 <Endeffector_PickUp+0x4c>
		HAL_I2C_Master_Transmit_IT(&hi2c1, SlaveAddr, PickUp, sizeof(PickUp));
 8001364:	2302      	movs	r3, #2
 8001366:	4a15      	ldr	r2, [pc, #84]	; (80013bc <Endeffector_PickUp+0x70>)
 8001368:	212a      	movs	r1, #42	; 0x2a
 800136a:	4813      	ldr	r0, [pc, #76]	; (80013b8 <Endeffector_PickUp+0x6c>)
 800136c:	f006 fb54 	bl	8007a18 <HAL_I2C_Master_Transmit_IT>
	}

	static uint32_t timestamp = 0;
	while(i < 150){
 8001370:	e012      	b.n	8001398 <Endeffector_PickUp+0x4c>
		if(HAL_GetTick() >= timestamp){
 8001372:	f004 ff03 	bl	800617c <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <Endeffector_PickUp+0x74>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	429a      	cmp	r2, r3
 800137e:	d30b      	bcc.n	8001398 <Endeffector_PickUp+0x4c>
			timestamp = HAL_GetTick() + 10;
 8001380:	f004 fefc 	bl	800617c <HAL_GetTick>
 8001384:	4603      	mov	r3, r0
 8001386:	330a      	adds	r3, #10
 8001388:	4a0d      	ldr	r2, [pc, #52]	; (80013c0 <Endeffector_PickUp+0x74>)
 800138a:	6013      	str	r3, [r2, #0]
			i++;
 800138c:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <Endeffector_PickUp+0x78>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	3301      	adds	r3, #1
 8001392:	b29a      	uxth	r2, r3
 8001394:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <Endeffector_PickUp+0x78>)
 8001396:	801a      	strh	r2, [r3, #0]
	while(i < 150){
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <Endeffector_PickUp+0x78>)
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	2b95      	cmp	r3, #149	; 0x95
 800139e:	d9e8      	bls.n	8001372 <Endeffector_PickUp+0x26>
		}
	}

	Endeffector_Read_Status();
 80013a0:	f7ff fddc 	bl	8000f5c <Endeffector_Read_Status>
	Stamp = 0;
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <Endeffector_PickUp+0x68>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
	i = 0;
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <Endeffector_PickUp+0x78>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	801a      	strh	r2, [r3, #0]
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200002c0 	.word	0x200002c0
 80013b8:	200003b8 	.word	0x200003b8
 80013bc:	2000001c 	.word	0x2000001c
 80013c0:	200002f0 	.word	0x200002f0
 80013c4:	200002c2 	.word	0x200002c2

080013c8 <Endeffector_PlaceDown>:

void Endeffector_PlaceDown(){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	static uint8_t PlaceDown[2] = {GripperMode_Command, GripperMode_PlaceDown};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 80013cc:	4b18      	ldr	r3, [pc, #96]	; (8001430 <Endeffector_PlaceDown+0x68>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d11f      	bne.n	8001414 <Endeffector_PlaceDown+0x4c>
 80013d4:	4b17      	ldr	r3, [pc, #92]	; (8001434 <Endeffector_PlaceDown+0x6c>)
 80013d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b20      	cmp	r3, #32
 80013de:	d119      	bne.n	8001414 <Endeffector_PlaceDown+0x4c>
		HAL_I2C_Master_Transmit_IT(&hi2c1, SlaveAddr, PlaceDown, sizeof(PlaceDown));
 80013e0:	2302      	movs	r3, #2
 80013e2:	4a15      	ldr	r2, [pc, #84]	; (8001438 <Endeffector_PlaceDown+0x70>)
 80013e4:	212a      	movs	r1, #42	; 0x2a
 80013e6:	4813      	ldr	r0, [pc, #76]	; (8001434 <Endeffector_PlaceDown+0x6c>)
 80013e8:	f006 fb16 	bl	8007a18 <HAL_I2C_Master_Transmit_IT>
	}

	static uint32_t timestamp = 0;
	while(i < 150){
 80013ec:	e012      	b.n	8001414 <Endeffector_PlaceDown+0x4c>
		if(HAL_GetTick() >= timestamp){
 80013ee:	f004 fec5 	bl	800617c <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <Endeffector_PlaceDown+0x74>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d30b      	bcc.n	8001414 <Endeffector_PlaceDown+0x4c>
			timestamp = HAL_GetTick() + 10;
 80013fc:	f004 febe 	bl	800617c <HAL_GetTick>
 8001400:	4603      	mov	r3, r0
 8001402:	330a      	adds	r3, #10
 8001404:	4a0d      	ldr	r2, [pc, #52]	; (800143c <Endeffector_PlaceDown+0x74>)
 8001406:	6013      	str	r3, [r2, #0]
			i++;
 8001408:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <Endeffector_PlaceDown+0x78>)
 800140a:	881b      	ldrh	r3, [r3, #0]
 800140c:	3301      	adds	r3, #1
 800140e:	b29a      	uxth	r2, r3
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <Endeffector_PlaceDown+0x78>)
 8001412:	801a      	strh	r2, [r3, #0]
	while(i < 150){
 8001414:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <Endeffector_PlaceDown+0x78>)
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	2b95      	cmp	r3, #149	; 0x95
 800141a:	d9e8      	bls.n	80013ee <Endeffector_PlaceDown+0x26>
		}
	}
	Endeffector_Read_Status();
 800141c:	f7ff fd9e 	bl	8000f5c <Endeffector_Read_Status>
	Stamp = 0;
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <Endeffector_PlaceDown+0x68>)
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]
	i = 0;
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <Endeffector_PlaceDown+0x78>)
 8001428:	2200      	movs	r2, #0
 800142a:	801a      	strh	r2, [r3, #0]
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	200002c0 	.word	0x200002c0
 8001434:	200003b8 	.word	0x200003b8
 8001438:	20000020 	.word	0x20000020
 800143c:	200002f4 	.word	0x200002f4
 8001440:	200002c2 	.word	0x200002c2

08001444 <TestMode>:

void TestMode(){
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
	switch(TestState){
 8001448:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <TestMode+0x7c>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b09      	cmp	r3, #9
 800144e:	d835      	bhi.n	80014bc <TestMode+0x78>
 8001450:	a201      	add	r2, pc, #4	; (adr r2, 8001458 <TestMode+0x14>)
 8001452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001456:	bf00      	nop
 8001458:	08001481 	.word	0x08001481
 800145c:	08001487 	.word	0x08001487
 8001460:	0800148d 	.word	0x0800148d
 8001464:	08001493 	.word	0x08001493
 8001468:	08001499 	.word	0x08001499
 800146c:	0800149f 	.word	0x0800149f
 8001470:	080014a5 	.word	0x080014a5
 8001474:	080014ab 	.word	0x080014ab
 8001478:	080014b1 	.word	0x080014b1
 800147c:	080014b7 	.word	0x080014b7
	case Read_Status:
		Endeffector_Read_Status();
 8001480:	f7ff fd6c 	bl	8000f5c <Endeffector_Read_Status>
		break;
 8001484:	e01a      	b.n	80014bc <TestMode+0x78>
	case SoftReset:
		Endeffector_SoftReset();
 8001486:	f7ff fdaf 	bl	8000fe8 <Endeffector_SoftReset>
		break;
 800148a:	e017      	b.n	80014bc <TestMode+0x78>
	case TestModeOn:
		Endeffector_TestModeOn();
 800148c:	f7ff fe66 	bl	800115c <Endeffector_TestModeOn>
		break;
 8001490:	e014      	b.n	80014bc <TestMode+0x78>
	case TestModeOff:
		Endeffector_TestModeOff();
 8001492:	f7ff fea1 	bl	80011d8 <Endeffector_TestModeOff>
		break;
 8001496:	e011      	b.n	80014bc <TestMode+0x78>
	case GripperModeOn:
		Endeffector_GripperModeOn();
 8001498:	f7ff fedc 	bl	8001254 <Endeffector_GripperModeOn>
		break;
 800149c:	e00e      	b.n	80014bc <TestMode+0x78>
	case PickUp:
		Endeffector_PickUp();
 800149e:	f7ff ff55 	bl	800134c <Endeffector_PickUp>
		break;
 80014a2:	e00b      	b.n	80014bc <TestMode+0x78>
	case PlaceDown:
		Endeffector_PlaceDown();
 80014a4:	f7ff ff90 	bl	80013c8 <Endeffector_PlaceDown>
		break;
 80014a8:	e008      	b.n	80014bc <TestMode+0x78>
	case GripperModeOff:
		Endeffector_GripperModeOff();
 80014aa:	f7ff ff11 	bl	80012d0 <Endeffector_GripperModeOff>
		break;
 80014ae:	e005      	b.n	80014bc <TestMode+0x78>
	case GripperEmerTrigger:
		Endeffector_EmergencyTrigger();
 80014b0:	f7ff fdd8 	bl	8001064 <Endeffector_EmergencyTrigger>
		break;
 80014b4:	e002      	b.n	80014bc <TestMode+0x78>
	case GripperEmerExit:
		Endeffector_EmergencyExit();
 80014b6:	f7ff fe13 	bl	80010e0 <Endeffector_EmergencyExit>
		break;
 80014ba:	bf00      	nop
	}
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	200002c4 	.word	0x200002c4

080014c4 <CheckJoystick>:
uint32_t VR[2] = {0};
int8_t flag = 0;
int16_t counter = 0;

void CheckJoystick()
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
	if ((VR[0] >= 1800) && (VR[0] <= 2200) && (VR[1] >= 1800) && (VR[1] <= 2200))
 80014c8:	4b36      	ldr	r3, [pc, #216]	; (80015a4 <CheckJoystick+0xe0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80014d0:	d317      	bcc.n	8001502 <CheckJoystick+0x3e>
 80014d2:	4b34      	ldr	r3, [pc, #208]	; (80015a4 <CheckJoystick+0xe0>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f640 0298 	movw	r2, #2200	; 0x898
 80014da:	4293      	cmp	r3, r2
 80014dc:	d811      	bhi.n	8001502 <CheckJoystick+0x3e>
 80014de:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <CheckJoystick+0xe0>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80014e6:	d30c      	bcc.n	8001502 <CheckJoystick+0x3e>
 80014e8:	4b2e      	ldr	r3, [pc, #184]	; (80015a4 <CheckJoystick+0xe0>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f640 0298 	movw	r2, #2200	; 0x898
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d806      	bhi.n	8001502 <CheckJoystick+0x3e>
	{
	Joy.X = 0;
 80014f4:	4b2c      	ldr	r3, [pc, #176]	; (80015a8 <CheckJoystick+0xe4>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	801a      	strh	r2, [r3, #0]
	Joy.Y = 0;
 80014fa:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <CheckJoystick+0xe4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	805a      	strh	r2, [r3, #2]
 8001500:	e04b      	b.n	800159a <CheckJoystick+0xd6>
   }

  // down
	else if ((VR[0] <= 100) && (VR[1] <= 2200))
 8001502:	4b28      	ldr	r3, [pc, #160]	; (80015a4 <CheckJoystick+0xe0>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b64      	cmp	r3, #100	; 0x64
 8001508:	d80d      	bhi.n	8001526 <CheckJoystick+0x62>
 800150a:	4b26      	ldr	r3, [pc, #152]	; (80015a4 <CheckJoystick+0xe0>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f640 0298 	movw	r2, #2200	; 0x898
 8001512:	4293      	cmp	r3, r2
 8001514:	d807      	bhi.n	8001526 <CheckJoystick+0x62>
	{
	Joy.X = 0;
 8001516:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <CheckJoystick+0xe4>)
 8001518:	2200      	movs	r2, #0
 800151a:	801a      	strh	r2, [r3, #0]
	Joy.Y = -1;
 800151c:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <CheckJoystick+0xe4>)
 800151e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001522:	805a      	strh	r2, [r3, #2]
 8001524:	e039      	b.n	800159a <CheckJoystick+0xd6>
   }
 // up
  else if ((VR[0] >= 3900) && (VR[1] >= 2100))
 8001526:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <CheckJoystick+0xe0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f640 723b 	movw	r2, #3899	; 0xf3b
 800152e:	4293      	cmp	r3, r2
 8001530:	d90c      	bls.n	800154c <CheckJoystick+0x88>
 8001532:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <CheckJoystick+0xe0>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f640 0233 	movw	r2, #2099	; 0x833
 800153a:	4293      	cmp	r3, r2
 800153c:	d906      	bls.n	800154c <CheckJoystick+0x88>
	{
	Joy.X = 0;
 800153e:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <CheckJoystick+0xe4>)
 8001540:	2200      	movs	r2, #0
 8001542:	801a      	strh	r2, [r3, #0]
	Joy.Y = 1;
 8001544:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <CheckJoystick+0xe4>)
 8001546:	2201      	movs	r2, #1
 8001548:	805a      	strh	r2, [r3, #2]
 800154a:	e026      	b.n	800159a <CheckJoystick+0xd6>
   }

  // left
  else if ((VR[0] <= 2100) && (VR[1] <= 1500))
 800154c:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <CheckJoystick+0xe0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f640 0234 	movw	r2, #2100	; 0x834
 8001554:	4293      	cmp	r3, r2
 8001556:	d80d      	bhi.n	8001574 <CheckJoystick+0xb0>
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <CheckJoystick+0xe0>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001560:	4293      	cmp	r3, r2
 8001562:	d807      	bhi.n	8001574 <CheckJoystick+0xb0>
	{
	Joy.X = -1;
 8001564:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <CheckJoystick+0xe4>)
 8001566:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800156a:	801a      	strh	r2, [r3, #0]
	Joy.Y = 0;
 800156c:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <CheckJoystick+0xe4>)
 800156e:	2200      	movs	r2, #0
 8001570:	805a      	strh	r2, [r3, #2]
 8001572:	e012      	b.n	800159a <CheckJoystick+0xd6>
   }

  // right
  else if ((VR[0] >= 1900) && (VR[1] >= 2100))
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <CheckJoystick+0xe0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f240 726b 	movw	r2, #1899	; 0x76b
 800157c:	4293      	cmp	r3, r2
 800157e:	d90c      	bls.n	800159a <CheckJoystick+0xd6>
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <CheckJoystick+0xe0>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f640 0233 	movw	r2, #2099	; 0x833
 8001588:	4293      	cmp	r3, r2
 800158a:	d906      	bls.n	800159a <CheckJoystick+0xd6>
   {
	Joy.X = 1;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <CheckJoystick+0xe4>)
 800158e:	2201      	movs	r2, #1
 8001590:	801a      	strh	r2, [r3, #0]
	Joy.Y = 0;
 8001592:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <CheckJoystick+0xe4>)
 8001594:	2200      	movs	r2, #0
 8001596:	805a      	strh	r2, [r3, #2]
   }
}
 8001598:	e7ff      	b.n	800159a <CheckJoystick+0xd6>
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	20000304 	.word	0x20000304
 80015a8:	200002f8 	.word	0x200002f8

080015ac <CheckButton>:

int CheckButton()
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	// Button 1
		if(Joy.B1Log == 0 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0){
 80015b0:	4b39      	ldr	r3, [pc, #228]	; (8001698 <CheckButton+0xec>)
 80015b2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10d      	bne.n	80015d6 <CheckButton+0x2a>
 80015ba:	2110      	movs	r1, #16
 80015bc:	4837      	ldr	r0, [pc, #220]	; (800169c <CheckButton+0xf0>)
 80015be:	f006 f89d 	bl	80076fc <HAL_GPIO_ReadPin>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d106      	bne.n	80015d6 <CheckButton+0x2a>
			Joy.status = 1;
 80015c8:	4b33      	ldr	r3, [pc, #204]	; (8001698 <CheckButton+0xec>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	809a      	strh	r2, [r3, #4]
			Joy.B1Log = 1;
 80015ce:	4b32      	ldr	r3, [pc, #200]	; (8001698 <CheckButton+0xec>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	80da      	strh	r2, [r3, #6]
 80015d4:	e024      	b.n	8001620 <CheckButton+0x74>
		}
		// Button 2
		else if(Joy.B2Log ==  0 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 0){
 80015d6:	4b30      	ldr	r3, [pc, #192]	; (8001698 <CheckButton+0xec>)
 80015d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d10d      	bne.n	80015fc <CheckButton+0x50>
 80015e0:	2101      	movs	r1, #1
 80015e2:	482f      	ldr	r0, [pc, #188]	; (80016a0 <CheckButton+0xf4>)
 80015e4:	f006 f88a 	bl	80076fc <HAL_GPIO_ReadPin>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d106      	bne.n	80015fc <CheckButton+0x50>
			Joy.status = 2;
 80015ee:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <CheckButton+0xec>)
 80015f0:	2202      	movs	r2, #2
 80015f2:	809a      	strh	r2, [r3, #4]
			Joy.B2Log = 1;
 80015f4:	4b28      	ldr	r3, [pc, #160]	; (8001698 <CheckButton+0xec>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	811a      	strh	r2, [r3, #8]
 80015fa:	e011      	b.n	8001620 <CheckButton+0x74>
	//		UpdatePosition();

		}
		// Button 3
		else if(Joy.B3Log ==  0 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == 0){
 80015fc:	4b26      	ldr	r3, [pc, #152]	; (8001698 <CheckButton+0xec>)
 80015fe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10c      	bne.n	8001620 <CheckButton+0x74>
 8001606:	2104      	movs	r1, #4
 8001608:	4826      	ldr	r0, [pc, #152]	; (80016a4 <CheckButton+0xf8>)
 800160a:	f006 f877 	bl	80076fc <HAL_GPIO_ReadPin>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d105      	bne.n	8001620 <CheckButton+0x74>
			Joy.status = 3;
 8001614:	4b20      	ldr	r3, [pc, #128]	; (8001698 <CheckButton+0xec>)
 8001616:	2203      	movs	r2, #3
 8001618:	809a      	strh	r2, [r3, #4]
			Joy.B3Log = 1;
 800161a:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <CheckButton+0xec>)
 800161c:	2201      	movs	r2, #1
 800161e:	815a      	strh	r2, [r3, #10]
		}

		// Check log
		if(Joy.B1Log == 1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)){
 8001620:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <CheckButton+0xec>)
 8001622:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d10d      	bne.n	8001646 <CheckButton+0x9a>
 800162a:	2110      	movs	r1, #16
 800162c:	481b      	ldr	r0, [pc, #108]	; (800169c <CheckButton+0xf0>)
 800162e:	f006 f865 	bl	80076fc <HAL_GPIO_ReadPin>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d006      	beq.n	8001646 <CheckButton+0x9a>
			Joy.status = 0;
 8001638:	4b17      	ldr	r3, [pc, #92]	; (8001698 <CheckButton+0xec>)
 800163a:	2200      	movs	r2, #0
 800163c:	809a      	strh	r2, [r3, #4]
			Joy.B1Log = 0;
 800163e:	4b16      	ldr	r3, [pc, #88]	; (8001698 <CheckButton+0xec>)
 8001640:	2200      	movs	r2, #0
 8001642:	80da      	strh	r2, [r3, #6]
 8001644:	e024      	b.n	8001690 <CheckButton+0xe4>
			// start
		}
		else if(Joy.B2Log == 1 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)){
 8001646:	4b14      	ldr	r3, [pc, #80]	; (8001698 <CheckButton+0xec>)
 8001648:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d10d      	bne.n	800166c <CheckButton+0xc0>
 8001650:	2101      	movs	r1, #1
 8001652:	4813      	ldr	r0, [pc, #76]	; (80016a0 <CheckButton+0xf4>)
 8001654:	f006 f852 	bl	80076fc <HAL_GPIO_ReadPin>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d006      	beq.n	800166c <CheckButton+0xc0>
			Joy.status = 0;
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <CheckButton+0xec>)
 8001660:	2200      	movs	r2, #0
 8001662:	809a      	strh	r2, [r3, #4]
			Joy.B2Log = 0;
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <CheckButton+0xec>)
 8001666:	2200      	movs	r2, #0
 8001668:	811a      	strh	r2, [r3, #8]
 800166a:	e011      	b.n	8001690 <CheckButton+0xe4>
		}
		else if(Joy.B3Log == 1 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)){
 800166c:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <CheckButton+0xec>)
 800166e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d10c      	bne.n	8001690 <CheckButton+0xe4>
 8001676:	2104      	movs	r1, #4
 8001678:	480a      	ldr	r0, [pc, #40]	; (80016a4 <CheckButton+0xf8>)
 800167a:	f006 f83f 	bl	80076fc <HAL_GPIO_ReadPin>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <CheckButton+0xe4>
			Joy.status = 0;
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <CheckButton+0xec>)
 8001686:	2200      	movs	r2, #0
 8001688:	809a      	strh	r2, [r3, #4]
			Joy.B3Log = 0;
 800168a:	4b03      	ldr	r3, [pc, #12]	; (8001698 <CheckButton+0xec>)
 800168c:	2200      	movs	r2, #0
 800168e:	815a      	strh	r2, [r3, #10]
		}

	return Joy.status;
 8001690:	4b01      	ldr	r3, [pc, #4]	; (8001698 <CheckButton+0xec>)
 8001692:	889b      	ldrh	r3, [r3, #4]
}
 8001694:	4618      	mov	r0, r3
 8001696:	bd80      	pop	{r7, pc}
 8001698:	200002f8 	.word	0x200002f8
 800169c:	40020000 	.word	0x40020000
 80016a0:	40020400 	.word	0x40020400
 80016a4:	40020800 	.word	0x40020800

080016a8 <InitKalmanStruct>:
extern arm_matrix_instance_f32 mat_P, mat_P_minus, mat_Q;
extern arm_matrix_instance_f32 mat_C, mat_R, mat_S, mat_K;
extern arm_matrix_instance_f32 mat_temp3x3A,mat_temp3x3B, mat_temp3x1,mat_temp1x3, mat_temp1x1;

void InitKalmanStruct(Kalman* KF,float32_t q,float32_t r)
{
 80016a8:	b5b0      	push	{r4, r5, r7, lr}
 80016aa:	b0a0      	sub	sp, #128	; 0x80
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80016b4:	edc7 0a01 	vstr	s1, [r7, #4]
	KF->R = r;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	655a      	str	r2, [r3, #84]	; 0x54
	KF->var_Q = q;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	68ba      	ldr	r2, [r7, #8]
 80016c2:	659a      	str	r2, [r3, #88]	; 0x58
	KF->D = 0;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	float32_t a[9] = {
 80016ce:	4b8d      	ldr	r3, [pc, #564]	; (8001904 <InitKalmanStruct+0x25c>)
 80016d0:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80016d4:	461d      	mov	r5, r3
 80016d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016de:	682b      	ldr	r3, [r5, #0]
 80016e0:	6023      	str	r3, [r4, #0]
			1.0, 0.001/2.5, 0.0000005/(2.5*2.5),
			0  , 1.0      , 0.001/2.5,
			0  , 0        , 1.0
	};
	float iden[9] = {
 80016e2:	4b89      	ldr	r3, [pc, #548]	; (8001908 <InitKalmanStruct+0x260>)
 80016e4:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80016e8:	461d      	mov	r5, r3
 80016ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016f2:	682b      	ldr	r3, [r5, #0]
 80016f4:	6023      	str	r3, [r4, #0]
			1.0, 0  , 0,
			0  , 1.0, 0,
			0  , 0  , 1.0
	};
	int i;
	for(i=0;i<9;i++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80016fa:	e023      	b.n	8001744 <InitKalmanStruct+0x9c>
	{
		KF->A[i] = a[i];
 80016fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	3380      	adds	r3, #128	; 0x80
 8001702:	443b      	add	r3, r7
 8001704:	3b28      	subs	r3, #40	; 0x28
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	68f9      	ldr	r1, [r7, #12]
 800170a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800170c:	3318      	adds	r3, #24
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	601a      	str	r2, [r3, #0]
		KF->I[i] = iden[i];
 8001714:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	3380      	adds	r3, #128	; 0x80
 800171a:	443b      	add	r3, r7
 800171c:	3b4c      	subs	r3, #76	; 0x4c
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	68f9      	ldr	r1, [r7, #12]
 8001722:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001724:	332e      	adds	r3, #46	; 0x2e
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	601a      	str	r2, [r3, #0]
		KF->P[i] = 0;
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001730:	3302      	adds	r3, #2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	3304      	adds	r3, #4
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
	for(i=0;i<9;i++)
 800173e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001740:	3301      	adds	r3, #1
 8001742:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001744:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001746:	2b08      	cmp	r3, #8
 8001748:	ddd8      	ble.n	80016fc <InitKalmanStruct+0x54>
	}
	float32_t b[3] = {
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001756:	f04f 0300 	mov.w	r3, #0
 800175a:	633b      	str	r3, [r7, #48]	; 0x30
			0, 0, 0
	};
	float32_t c[3] = {
 800175c:	f04f 0300 	mov.w	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
 8001762:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001766:	623b      	str	r3, [r7, #32]
 8001768:	f04f 0300 	mov.w	r3, #0
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
			0, 1, 0
	};
	float32_t g[3] = {
 800176e:	4a67      	ldr	r2, [pc, #412]	; (800190c <InitKalmanStruct+0x264>)
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	ca07      	ldmia	r2, {r0, r1, r2}
 8001776:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0.001 * 0.001 * 0.001 / (6*2.5*2.5*2.5),
			0.0000005/(2.5*2.5),
			0.001/2.5
	};

	for(i=0;i<3;i++)
 800177a:	2300      	movs	r3, #0
 800177c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800177e:	e02e      	b.n	80017de <InitKalmanStruct+0x136>
	{
		KF->B[i] = b[i];
 8001780:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	3380      	adds	r3, #128	; 0x80
 8001786:	443b      	add	r3, r7
 8001788:	3b58      	subs	r3, #88	; 0x58
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68f9      	ldr	r1, [r7, #12]
 800178e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001790:	3320      	adds	r3, #32
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	440b      	add	r3, r1
 8001796:	3304      	adds	r3, #4
 8001798:	601a      	str	r2, [r3, #0]
		KF->C[i] = c[i];
 800179a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	3380      	adds	r3, #128	; 0x80
 80017a0:	443b      	add	r3, r7
 80017a2:	3b64      	subs	r3, #100	; 0x64
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	68f9      	ldr	r1, [r7, #12]
 80017a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017aa:	3324      	adds	r3, #36	; 0x24
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	440b      	add	r3, r1
 80017b0:	601a      	str	r2, [r3, #0]
		KF->G[i] = g[i];
 80017b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	3380      	adds	r3, #128	; 0x80
 80017b8:	443b      	add	r3, r7
 80017ba:	3b70      	subs	r3, #112	; 0x70
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	68f9      	ldr	r1, [r7, #12]
 80017c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017c2:	3328      	adds	r3, #40	; 0x28
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	440b      	add	r3, r1
 80017c8:	601a      	str	r2, [r3, #0]
		KF->x_hat[i] = 0;
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
	for(i=0;i<3;i++)
 80017d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017da:	3301      	adds	r3, #1
 80017dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	ddcd      	ble.n	8001780 <InitKalmanStruct+0xd8>
	}

	  arm_mat_init_f32(&mat_A, 3, 3,KF->A);//3x3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	3360      	adds	r3, #96	; 0x60
 80017e8:	2203      	movs	r2, #3
 80017ea:	2103      	movs	r1, #3
 80017ec:	4848      	ldr	r0, [pc, #288]	; (8001910 <InitKalmanStruct+0x268>)
 80017ee:	f003 ffa4 	bl	800573a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_x_hat, 3, 1, KF->x_hat);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2201      	movs	r2, #1
 80017f6:	2103      	movs	r1, #3
 80017f8:	4846      	ldr	r0, [pc, #280]	; (8001914 <InitKalmanStruct+0x26c>)
 80017fa:	f003 ff9e 	bl	800573a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_x_hat_minus, 3, 1, KF->x_hat_minus);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	33dc      	adds	r3, #220	; 0xdc
 8001802:	2201      	movs	r2, #1
 8001804:	2103      	movs	r1, #3
 8001806:	4844      	ldr	r0, [pc, #272]	; (8001918 <InitKalmanStruct+0x270>)
 8001808:	f003 ff97 	bl	800573a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_B, 3, 1, KF->B);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	3384      	adds	r3, #132	; 0x84
 8001810:	2201      	movs	r2, #1
 8001812:	2103      	movs	r1, #3
 8001814:	4841      	ldr	r0, [pc, #260]	; (800191c <InitKalmanStruct+0x274>)
 8001816:	f003 ff90 	bl	800573a <arm_mat_init_f32>
	  //arm_mat_init_f32(&mat_u, 1, 1, NULL);  // Set the input control vector if needed
	  arm_mat_init_f32(&mat_P, 3, 3, KF->P);//3x3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	330c      	adds	r3, #12
 800181e:	2203      	movs	r2, #3
 8001820:	2103      	movs	r1, #3
 8001822:	483f      	ldr	r0, [pc, #252]	; (8001920 <InitKalmanStruct+0x278>)
 8001824:	f003 ff89 	bl	800573a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_P_minus, 3, 3, KF->P_minus);//3x3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	33e8      	adds	r3, #232	; 0xe8
 800182c:	2203      	movs	r2, #3
 800182e:	2103      	movs	r1, #3
 8001830:	483c      	ldr	r0, [pc, #240]	; (8001924 <InitKalmanStruct+0x27c>)
 8001832:	f003 ff82 	bl	800573a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_Q, 3, 3,KF->Q);//3x3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	3330      	adds	r3, #48	; 0x30
 800183a:	2203      	movs	r2, #3
 800183c:	2103      	movs	r1, #3
 800183e:	483a      	ldr	r0, [pc, #232]	; (8001928 <InitKalmanStruct+0x280>)
 8001840:	f003 ff7b 	bl	800573a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_C, 1, 3, KF->C);//1x3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	3390      	adds	r3, #144	; 0x90
 8001848:	2203      	movs	r2, #3
 800184a:	2101      	movs	r1, #1
 800184c:	4837      	ldr	r0, [pc, #220]	; (800192c <InitKalmanStruct+0x284>)
 800184e:	f003 ff74 	bl	800573a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_R, 1, 1, &KF->R);//1x1
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	3354      	adds	r3, #84	; 0x54
 8001856:	2201      	movs	r2, #1
 8001858:	2101      	movs	r1, #1
 800185a:	4835      	ldr	r0, [pc, #212]	; (8001930 <InitKalmanStruct+0x288>)
 800185c:	f003 ff6d 	bl	800573a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_S, 1, 1, KF->S);//1x1
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001866:	2201      	movs	r2, #1
 8001868:	2101      	movs	r1, #1
 800186a:	4832      	ldr	r0, [pc, #200]	; (8001934 <InitKalmanStruct+0x28c>)
 800186c:	f003 ff65 	bl	800573a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_K, 3, 1, KF->K);//3x1
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001876:	2201      	movs	r2, #1
 8001878:	2103      	movs	r1, #3
 800187a:	482f      	ldr	r0, [pc, #188]	; (8001938 <InitKalmanStruct+0x290>)
 800187c:	f003 ff5d 	bl	800573a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp3x3A, 3, 3, KF->temp3x3A);//3x3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8001886:	2203      	movs	r2, #3
 8001888:	2103      	movs	r1, #3
 800188a:	482c      	ldr	r0, [pc, #176]	; (800193c <InitKalmanStruct+0x294>)
 800188c:	f003 ff55 	bl	800573a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp3x3B, 3, 3, KF->temp3x3B);//3x3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001896:	2203      	movs	r2, #3
 8001898:	2103      	movs	r1, #3
 800189a:	4829      	ldr	r0, [pc, #164]	; (8001940 <InitKalmanStruct+0x298>)
 800189c:	f003 ff4d 	bl	800573a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp3x1, 3, 1, KF->temp3x1);//3x1
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80018a6:	2201      	movs	r2, #1
 80018a8:	2103      	movs	r1, #3
 80018aa:	4826      	ldr	r0, [pc, #152]	; (8001944 <InitKalmanStruct+0x29c>)
 80018ac:	f003 ff45 	bl	800573a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp1x3, 1, 3, KF->temp1x3);//1x3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 80018b6:	2203      	movs	r2, #3
 80018b8:	2101      	movs	r1, #1
 80018ba:	4823      	ldr	r0, [pc, #140]	; (8001948 <InitKalmanStruct+0x2a0>)
 80018bc:	f003 ff3d 	bl	800573a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp1x1, 1, 1, &KF->temp1x1);//1x1
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80018c6:	2201      	movs	r2, #1
 80018c8:	2101      	movs	r1, #1
 80018ca:	4820      	ldr	r0, [pc, #128]	; (800194c <InitKalmanStruct+0x2a4>)
 80018cc:	f003 ff35 	bl	800573a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_G, 3, 1, KF->G);//3x1
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	33a0      	adds	r3, #160	; 0xa0
 80018d4:	2201      	movs	r2, #1
 80018d6:	2103      	movs	r1, #3
 80018d8:	481d      	ldr	r0, [pc, #116]	; (8001950 <InitKalmanStruct+0x2a8>)
 80018da:	f003 ff2e 	bl	800573a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_GT, 1, 3, KF->GT);//1x3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	33ac      	adds	r3, #172	; 0xac
 80018e2:	2203      	movs	r2, #3
 80018e4:	2101      	movs	r1, #1
 80018e6:	481b      	ldr	r0, [pc, #108]	; (8001954 <InitKalmanStruct+0x2ac>)
 80018e8:	f003 ff27 	bl	800573a <arm_mat_init_f32>
	  arm_mat_init_f32(&eye, 3, 3, KF->I);//1x3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	33b8      	adds	r3, #184	; 0xb8
 80018f0:	2203      	movs	r2, #3
 80018f2:	2103      	movs	r1, #3
 80018f4:	4818      	ldr	r0, [pc, #96]	; (8001958 <InitKalmanStruct+0x2b0>)
 80018f6:	f003 ff20 	bl	800573a <arm_mat_init_f32>

}
 80018fa:	bf00      	nop
 80018fc:	3780      	adds	r7, #128	; 0x80
 80018fe:	46bd      	mov	sp, r7
 8001900:	bdb0      	pop	{r4, r5, r7, pc}
 8001902:	bf00      	nop
 8001904:	0800f560 	.word	0x0800f560
 8001908:	0800f584 	.word	0x0800f584
 800190c:	0800f5a8 	.word	0x0800f5a8
 8001910:	20000674 	.word	0x20000674
 8001914:	2000067c 	.word	0x2000067c
 8001918:	20000684 	.word	0x20000684
 800191c:	2000068c 	.word	0x2000068c
 8001920:	2000069c 	.word	0x2000069c
 8001924:	200006a4 	.word	0x200006a4
 8001928:	200006ac 	.word	0x200006ac
 800192c:	200006c4 	.word	0x200006c4
 8001930:	200006cc 	.word	0x200006cc
 8001934:	200006d4 	.word	0x200006d4
 8001938:	200006dc 	.word	0x200006dc
 800193c:	200006e4 	.word	0x200006e4
 8001940:	200006ec 	.word	0x200006ec
 8001944:	200006f4 	.word	0x200006f4
 8001948:	200006fc 	.word	0x200006fc
 800194c:	20000704 	.word	0x20000704
 8001950:	200006bc 	.word	0x200006bc
 8001954:	200006b4 	.word	0x200006b4
 8001958:	20000694 	.word	0x20000694

0800195c <kalman_filter>:

void kalman_filter()
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
    //Process model: x_hat_minus = mat_A*x_hat
    arm_mat_mult_f32(&mat_A, &mat_x_hat, &mat_x_hat_minus);			//A*X
 8001960:	4a39      	ldr	r2, [pc, #228]	; (8001a48 <kalman_filter+0xec>)
 8001962:	493a      	ldr	r1, [pc, #232]	; (8001a4c <kalman_filter+0xf0>)
 8001964:	483a      	ldr	r0, [pc, #232]	; (8001a50 <kalman_filter+0xf4>)
 8001966:	f004 fa77 	bl	8005e58 <arm_mat_mult_f32>
    // If an input control vector is used:
    // arm_mat_mult_f32(&mat_B, &mat_u, &mat_temp3x3A);
    // arm_mat_add_f32(&mat_x_hat_minus, &mat_temp3x3A, &mat_x_hat_minus);

    // Predict covariance matrix: P_minus = A * P * A^T + Q
    arm_mat_trans_f32(&mat_A, &mat_temp3x3A);					    //AT
 800196a:	493a      	ldr	r1, [pc, #232]	; (8001a54 <kalman_filter+0xf8>)
 800196c:	4838      	ldr	r0, [pc, #224]	; (8001a50 <kalman_filter+0xf4>)
 800196e:	f004 fb5e 	bl	800602e <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_A, &mat_P, &mat_temp3x3B);			    //A*P
 8001972:	4a39      	ldr	r2, [pc, #228]	; (8001a58 <kalman_filter+0xfc>)
 8001974:	4939      	ldr	r1, [pc, #228]	; (8001a5c <kalman_filter+0x100>)
 8001976:	4836      	ldr	r0, [pc, #216]	; (8001a50 <kalman_filter+0xf4>)
 8001978:	f004 fa6e 	bl	8005e58 <arm_mat_mult_f32>
    arm_mat_mult_f32(&mat_temp3x3B, &mat_temp3x3A, &mat_P_minus);	//A*P*AT
 800197c:	4a38      	ldr	r2, [pc, #224]	; (8001a60 <kalman_filter+0x104>)
 800197e:	4935      	ldr	r1, [pc, #212]	; (8001a54 <kalman_filter+0xf8>)
 8001980:	4835      	ldr	r0, [pc, #212]	; (8001a58 <kalman_filter+0xfc>)
 8001982:	f004 fa69 	bl	8005e58 <arm_mat_mult_f32>
    arm_mat_trans_f32(&mat_G, &mat_GT);								//GT
 8001986:	4937      	ldr	r1, [pc, #220]	; (8001a64 <kalman_filter+0x108>)
 8001988:	4837      	ldr	r0, [pc, #220]	; (8001a68 <kalman_filter+0x10c>)
 800198a:	f004 fb50 	bl	800602e <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_G, &mat_GT, &mat_Q);						//G*GT
 800198e:	4a37      	ldr	r2, [pc, #220]	; (8001a6c <kalman_filter+0x110>)
 8001990:	4934      	ldr	r1, [pc, #208]	; (8001a64 <kalman_filter+0x108>)
 8001992:	4835      	ldr	r0, [pc, #212]	; (8001a68 <kalman_filter+0x10c>)
 8001994:	f004 fa60 	bl	8005e58 <arm_mat_mult_f32>
    arm_mat_scale_f32(&mat_Q,KF.var_Q, &mat_Q);						//G*GT*var_q
 8001998:	4b35      	ldr	r3, [pc, #212]	; (8001a70 <kalman_filter+0x114>)
 800199a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800199e:	4933      	ldr	r1, [pc, #204]	; (8001a6c <kalman_filter+0x110>)
 80019a0:	eeb0 0a67 	vmov.f32	s0, s15
 80019a4:	4831      	ldr	r0, [pc, #196]	; (8001a6c <kalman_filter+0x110>)
 80019a6:	f004 fad1 	bl	8005f4c <arm_mat_scale_f32>
    arm_mat_add_f32(&mat_P_minus, &mat_Q, &mat_P_minus);			//A * P * A^T + Q
 80019aa:	4a2d      	ldr	r2, [pc, #180]	; (8001a60 <kalman_filter+0x104>)
 80019ac:	492f      	ldr	r1, [pc, #188]	; (8001a6c <kalman_filter+0x110>)
 80019ae:	482c      	ldr	r0, [pc, #176]	; (8001a60 <kalman_filter+0x104>)
 80019b0:	f003 fe88 	bl	80056c4 <arm_mat_add_f32>

    // Calculate innovation covariance: S = C * P_minus * C^T + R
    arm_mat_mult_f32(&mat_C, &mat_P_minus, &mat_temp1x3);			//C*P
 80019b4:	4a2f      	ldr	r2, [pc, #188]	; (8001a74 <kalman_filter+0x118>)
 80019b6:	492a      	ldr	r1, [pc, #168]	; (8001a60 <kalman_filter+0x104>)
 80019b8:	482f      	ldr	r0, [pc, #188]	; (8001a78 <kalman_filter+0x11c>)
 80019ba:	f004 fa4d 	bl	8005e58 <arm_mat_mult_f32>
    arm_mat_trans_f32(&mat_C, &mat_temp3x1);						//CT
 80019be:	492f      	ldr	r1, [pc, #188]	; (8001a7c <kalman_filter+0x120>)
 80019c0:	482d      	ldr	r0, [pc, #180]	; (8001a78 <kalman_filter+0x11c>)
 80019c2:	f004 fb34 	bl	800602e <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_temp1x3, &mat_temp3x1, &mat_temp1x1);		//C*P*C^T
 80019c6:	4a2e      	ldr	r2, [pc, #184]	; (8001a80 <kalman_filter+0x124>)
 80019c8:	492c      	ldr	r1, [pc, #176]	; (8001a7c <kalman_filter+0x120>)
 80019ca:	482a      	ldr	r0, [pc, #168]	; (8001a74 <kalman_filter+0x118>)
 80019cc:	f004 fa44 	bl	8005e58 <arm_mat_mult_f32>
    arm_mat_add_f32(&mat_temp1x1, &mat_R, &mat_S);					//C*P*C^T + R
 80019d0:	4a2c      	ldr	r2, [pc, #176]	; (8001a84 <kalman_filter+0x128>)
 80019d2:	492d      	ldr	r1, [pc, #180]	; (8001a88 <kalman_filter+0x12c>)
 80019d4:	482a      	ldr	r0, [pc, #168]	; (8001a80 <kalman_filter+0x124>)
 80019d6:	f003 fe75 	bl	80056c4 <arm_mat_add_f32>

    //==> Calculate Kalman gain: K = P_minus * C^T * S^(-1)
    arm_mat_inverse_f32(&mat_S, &mat_temp1x1);						//inv(S)
 80019da:	4929      	ldr	r1, [pc, #164]	; (8001a80 <kalman_filter+0x124>)
 80019dc:	4829      	ldr	r0, [pc, #164]	; (8001a84 <kalman_filter+0x128>)
 80019de:	f003 fec4 	bl	800576a <arm_mat_inverse_f32>
    arm_mat_mult_f32(&mat_P_minus, &mat_temp3x1, &mat_temp3x3A);	//P*CT
 80019e2:	4a1c      	ldr	r2, [pc, #112]	; (8001a54 <kalman_filter+0xf8>)
 80019e4:	4925      	ldr	r1, [pc, #148]	; (8001a7c <kalman_filter+0x120>)
 80019e6:	481e      	ldr	r0, [pc, #120]	; (8001a60 <kalman_filter+0x104>)
 80019e8:	f004 fa36 	bl	8005e58 <arm_mat_mult_f32>
    arm_mat_mult_f32(&mat_temp3x3A, &mat_temp1x1, &mat_K);			//P*CT*inv(S)
 80019ec:	4a27      	ldr	r2, [pc, #156]	; (8001a8c <kalman_filter+0x130>)
 80019ee:	4924      	ldr	r1, [pc, #144]	; (8001a80 <kalman_filter+0x124>)
 80019f0:	4818      	ldr	r0, [pc, #96]	; (8001a54 <kalman_filter+0xf8>)
 80019f2:	f004 fa31 	bl	8005e58 <arm_mat_mult_f32>

    //==> Update state estimate: x_hat = x_hat_minus + K * (z - C * x_hat_minus)
    arm_mat_mult_f32(&mat_C, &mat_x_hat_minus, &mat_temp1x1);		//C*X
 80019f6:	4a22      	ldr	r2, [pc, #136]	; (8001a80 <kalman_filter+0x124>)
 80019f8:	4913      	ldr	r1, [pc, #76]	; (8001a48 <kalman_filter+0xec>)
 80019fa:	481f      	ldr	r0, [pc, #124]	; (8001a78 <kalman_filter+0x11c>)
 80019fc:	f004 fa2c 	bl	8005e58 <arm_mat_mult_f32>
    //float32_t innovation = z - temp1x1;								//Z-C*X
    arm_mat_scale_f32(&mat_K, KF.z - KF.temp1x1, &mat_temp3x1);			//K*(Z-C*X)
 8001a00:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <kalman_filter+0x114>)
 8001a02:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8001a06:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <kalman_filter+0x114>)
 8001a08:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
 8001a0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a10:	491a      	ldr	r1, [pc, #104]	; (8001a7c <kalman_filter+0x120>)
 8001a12:	eeb0 0a67 	vmov.f32	s0, s15
 8001a16:	481d      	ldr	r0, [pc, #116]	; (8001a8c <kalman_filter+0x130>)
 8001a18:	f004 fa98 	bl	8005f4c <arm_mat_scale_f32>
    arm_mat_add_f32(&mat_x_hat_minus, &mat_temp3x1, &mat_x_hat);	//X - K*(Z-C*X) ========> X estimate
 8001a1c:	4a0b      	ldr	r2, [pc, #44]	; (8001a4c <kalman_filter+0xf0>)
 8001a1e:	4917      	ldr	r1, [pc, #92]	; (8001a7c <kalman_filter+0x120>)
 8001a20:	4809      	ldr	r0, [pc, #36]	; (8001a48 <kalman_filter+0xec>)
 8001a22:	f003 fe4f 	bl	80056c4 <arm_mat_add_f32>

    // Update covariance matrix: P = (I - K * C) * P_minus
    arm_mat_mult_f32(&mat_K, &mat_C, &mat_temp3x3B);				//K*C
 8001a26:	4a0c      	ldr	r2, [pc, #48]	; (8001a58 <kalman_filter+0xfc>)
 8001a28:	4913      	ldr	r1, [pc, #76]	; (8001a78 <kalman_filter+0x11c>)
 8001a2a:	4818      	ldr	r0, [pc, #96]	; (8001a8c <kalman_filter+0x130>)
 8001a2c:	f004 fa14 	bl	8005e58 <arm_mat_mult_f32>
    arm_mat_sub_f32(&eye, &mat_P_minus, &mat_temp3x3A);				//I - K*C
 8001a30:	4a08      	ldr	r2, [pc, #32]	; (8001a54 <kalman_filter+0xf8>)
 8001a32:	490b      	ldr	r1, [pc, #44]	; (8001a60 <kalman_filter+0x104>)
 8001a34:	4816      	ldr	r0, [pc, #88]	; (8001a90 <kalman_filter+0x134>)
 8001a36:	f004 fabf 	bl	8005fb8 <arm_mat_sub_f32>
    arm_mat_mult_f32(&mat_temp3x3A, &mat_P_minus, &mat_P);			//(I - K*C)*P ===========> P estimate
 8001a3a:	4a08      	ldr	r2, [pc, #32]	; (8001a5c <kalman_filter+0x100>)
 8001a3c:	4908      	ldr	r1, [pc, #32]	; (8001a60 <kalman_filter+0x104>)
 8001a3e:	4805      	ldr	r0, [pc, #20]	; (8001a54 <kalman_filter+0xf8>)
 8001a40:	f004 fa0a 	bl	8005e58 <arm_mat_mult_f32>
}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000684 	.word	0x20000684
 8001a4c:	2000067c 	.word	0x2000067c
 8001a50:	20000674 	.word	0x20000674
 8001a54:	200006e4 	.word	0x200006e4
 8001a58:	200006ec 	.word	0x200006ec
 8001a5c:	2000069c 	.word	0x2000069c
 8001a60:	200006a4 	.word	0x200006a4
 8001a64:	200006b4 	.word	0x200006b4
 8001a68:	200006bc 	.word	0x200006bc
 8001a6c:	200006ac 	.word	0x200006ac
 8001a70:	200004f4 	.word	0x200004f4
 8001a74:	200006fc 	.word	0x200006fc
 8001a78:	200006c4 	.word	0x200006c4
 8001a7c:	200006f4 	.word	0x200006f4
 8001a80:	20000704 	.word	0x20000704
 8001a84:	200006d4 	.word	0x200006d4
 8001a88:	200006cc 	.word	0x200006cc
 8001a8c:	200006dc 	.word	0x200006dc
 8001a90:	20000694 	.word	0x20000694

08001a94 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001a9c:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <modbus_1t5_Timeout+0x1c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	751a      	strb	r2, [r3, #20]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	2000030c 	.word	0x2000030c

08001ab4 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001abc:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <modbus_3t5_Timeout+0x1c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	755a      	strb	r2, [r3, #21]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	2000030c 	.word	0x2000030c

08001ad4 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <modbus_UART_Recived+0x60>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8001ae6:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <modbus_UART_Recived+0x60>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8001aee:	1c59      	adds	r1, r3, #1
 8001af0:	b289      	uxth	r1, r1
 8001af2:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 8001af6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001afa:	d210      	bcs.n	8001b1e <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001afc:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <modbus_UART_Recived+0x60>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68d8      	ldr	r0, [r3, #12]
 8001b02:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <modbus_UART_Recived+0x60>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <modbus_UART_Recived+0x60>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001b0e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001b12:	4413      	add	r3, r2
 8001b14:	3302      	adds	r3, #2
 8001b16:	2201      	movs	r2, #1
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f009 fff3 	bl	800bb04 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001b1e:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <modbus_UART_Recived+0x60>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2200      	movs	r2, #0
 8001b28:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	2000030c 	.word	0x2000030c

08001b38 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001b42:	4a24      	ldr	r2, [pc, #144]	; (8001bd4 <Modbus_init+0x9c>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8001b48:	4b22      	ldr	r3, [pc, #136]	; (8001bd4 <Modbus_init+0x9c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8001b50:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <Modbus_init+0x9c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	4a20      	ldr	r2, [pc, #128]	; (8001bd8 <Modbus_init+0xa0>)
 8001b58:	2114      	movs	r1, #20
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f009 f9d6 	bl	800af0c <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001b60:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <Modbus_init+0x9c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	4a1d      	ldr	r2, [pc, #116]	; (8001bdc <Modbus_init+0xa4>)
 8001b68:	210e      	movs	r1, #14
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f009 f9ce 	bl	800af0c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8001b70:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <Modbus_init+0x9c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	4a1a      	ldr	r2, [pc, #104]	; (8001be0 <Modbus_init+0xa8>)
 8001b78:	2103      	movs	r1, #3
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f009 ff1a 	bl	800b9b4 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001b80:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <Modbus_init+0x9c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68d8      	ldr	r0, [r3, #12]
 8001b86:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <Modbus_init+0x9c>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <Modbus_init+0x9c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001b92:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001b96:	4413      	add	r3, r2
 8001b98:	3302      	adds	r3, #2
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f009 ffb1 	bl	800bb04 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <Modbus_init+0x9c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d10c      	bne.n	8001bcc <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001bb2:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <Modbus_init+0x9c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f008 fa51 	bl	800a060 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001bbe:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <Modbus_init+0x9c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f008 fc90 	bl	800a4ec <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	2000030c 	.word	0x2000030c
 8001bd8:	08001a95 	.word	0x08001a95
 8001bdc:	08001ab5 	.word	0x08001ab5
 8001be0:	08001ad5 	.word	0x08001ad5

08001be4 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001bf0:	23ff      	movs	r3, #255	; 0xff
 8001bf2:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001bf4:	23ff      	movs	r3, #255	; 0xff
 8001bf6:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001bf8:	e013      	b.n	8001c22 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	607a      	str	r2, [r7, #4]
 8001c00:	781a      	ldrb	r2, [r3, #0]
 8001c02:	7bbb      	ldrb	r3, [r7, #14]
 8001c04:	4053      	eors	r3, r2
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001c0a:	4a0f      	ldr	r2, [pc, #60]	; (8001c48 <CRC16+0x64>)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4413      	add	r3, r2
 8001c10:	781a      	ldrb	r2, [r3, #0]
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	4053      	eors	r3, r2
 8001c16:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001c18:	4a0c      	ldr	r2, [pc, #48]	; (8001c4c <CRC16+0x68>)
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001c22:	883b      	ldrh	r3, [r7, #0]
 8001c24:	1e5a      	subs	r2, r3, #1
 8001c26:	803a      	strh	r2, [r7, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1e6      	bne.n	8001bfa <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	021b      	lsls	r3, r3, #8
 8001c30:	b21a      	sxth	r2, r3
 8001c32:	7bbb      	ldrb	r3, [r7, #14]
 8001c34:	b21b      	sxth	r3, r3
 8001c36:	4313      	orrs	r3, r2
 8001c38:	b21b      	sxth	r3, r3
 8001c3a:	b29b      	uxth	r3, r3
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	20000124 	.word	0x20000124
 8001c4c:	20000024 	.word	0x20000024

08001c50 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8001c56:	4b81      	ldr	r3, [pc, #516]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	7e1b      	ldrb	r3, [r3, #24]
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d80a      	bhi.n	8001c78 <Modbus_Protocal_Worker+0x28>
 8001c62:	a201      	add	r2, pc, #4	; (adr r2, 8001c68 <Modbus_Protocal_Worker+0x18>)
 8001c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c68:	08001c83 	.word	0x08001c83
 8001c6c:	08001e23 	.word	0x08001e23
 8001c70:	08001d0f 	.word	0x08001d0f
 8001c74:	08001d35 	.word	0x08001d35
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001c78:	4b78      	ldr	r3, [pc, #480]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	761a      	strb	r2, [r3, #24]
		break;
 8001c80:	e0e8      	b.n	8001e54 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8001c82:	4b76      	ldr	r3, [pc, #472]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8001c8e:	f000 f9dd 	bl	800204c <Modbus_Emission>
 8001c92:	e01c      	b.n	8001cce <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8001c94:	4b71      	ldr	r3, [pc, #452]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	7d9b      	ldrb	r3, [r3, #22]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d017      	beq.n	8001cce <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001c9e:	4b6f      	ldr	r3, [pc, #444]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001ca6:	4b6d      	ldr	r3, [pc, #436]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2200      	movs	r2, #0
 8001cac:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8001cae:	4b6b      	ldr	r3, [pc, #428]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b68      	ldr	r3, [pc, #416]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f042 0201 	orr.w	r2, r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8001cc6:	4b65      	ldr	r3, [pc, #404]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2203      	movs	r2, #3
 8001ccc:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001cce:	4b63      	ldr	r3, [pc, #396]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b20      	cmp	r3, #32
 8001cdc:	f040 80b3 	bne.w	8001e46 <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001ce0:	4b5e      	ldr	r3, [pc, #376]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001cea:	4b5c      	ldr	r3, [pc, #368]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68d8      	ldr	r0, [r3, #12]
 8001cf0:	4b5a      	ldr	r3, [pc, #360]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b59      	ldr	r3, [pc, #356]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001cfc:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001d00:	4413      	add	r3, r2
 8001d02:	3302      	adds	r3, #2
 8001d04:	2201      	movs	r2, #1
 8001d06:	4619      	mov	r1, r3
 8001d08:	f009 fefc 	bl	800bb04 <HAL_UART_Receive_IT>
		}
		break;
 8001d0c:	e09b      	b.n	8001e46 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001d0e:	4b53      	ldr	r3, [pc, #332]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	7d1b      	ldrb	r3, [r3, #20]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 8098 	beq.w	8001e4a <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8001d1a:	4b50      	ldr	r3, [pc, #320]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001d22:	4b4e      	ldr	r3, [pc, #312]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	22fe      	movs	r2, #254	; 0xfe
 8001d28:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001d2a:	4b4c      	ldr	r3, [pc, #304]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2204      	movs	r2, #4
 8001d30:	761a      	strb	r2, [r3, #24]
		}
		break;
 8001d32:	e08a      	b.n	8001e4a <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8001d34:	4b49      	ldr	r3, [pc, #292]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	7d9b      	ldrb	r3, [r3, #22]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d009      	beq.n	8001d52 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 8001d3e:	4b47      	ldr	r3, [pc, #284]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d103      	bne.n	8001d52 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001d4a:	4b44      	ldr	r3, [pc, #272]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	22ff      	movs	r2, #255	; 0xff
 8001d50:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001d52:	4b42      	ldr	r3, [pc, #264]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001d5a:	f113 0f02 	cmn.w	r3, #2
 8001d5e:	d150      	bne.n	8001e02 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001d60:	4b3e      	ldr	r3, [pc, #248]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2200      	movs	r2, #0
 8001d66:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001d68:	4b3c      	ldr	r3, [pc, #240]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f203 2272 	addw	r2, r3, #626	; 0x272
 8001d70:	4b3a      	ldr	r3, [pc, #232]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001d78:	3b02      	subs	r3, #2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	f7ff ff31 	bl	8001be4 <CRC16>
 8001d82:	4603      	mov	r3, r0
 8001d84:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001d86:	793a      	ldrb	r2, [r7, #4]
 8001d88:	4b34      	ldr	r3, [pc, #208]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d8a:	6819      	ldr	r1, [r3, #0]
 8001d8c:	4b33      	ldr	r3, [pc, #204]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001d94:	3b02      	subs	r3, #2
 8001d96:	440b      	add	r3, r1
 8001d98:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d10c      	bne.n	8001dba <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001da0:	797a      	ldrb	r2, [r7, #5]
 8001da2:	4b2e      	ldr	r3, [pc, #184]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001da4:	6819      	ldr	r1, [r3, #0]
 8001da6:	4b2d      	ldr	r3, [pc, #180]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001dae:	3b01      	subs	r3, #1
 8001db0:	440b      	add	r3, r1
 8001db2:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d004      	beq.n	8001dc4 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001dba:	4b28      	ldr	r3, [pc, #160]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	22ff      	movs	r2, #255	; 0xff
 8001dc0:	75da      	strb	r2, [r3, #23]
				break;
 8001dc2:	e047      	b.n	8001e54 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001dc4:	4b25      	ldr	r3, [pc, #148]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001dcc:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d113      	bne.n	8001dfe <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001dd6:	4b21      	ldr	r3, [pc, #132]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001dde:	4b1f      	ldr	r3, [pc, #124]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 8001de6:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001de8:	4b1c      	ldr	r3, [pc, #112]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001df0:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001df2:	461a      	mov	r2, r3
 8001df4:	f00b f848 	bl	800ce88 <memcpy>

			//execute command
			Modbus_frame_response();
 8001df8:	f000 f910 	bl	800201c <Modbus_frame_response>
 8001dfc:	e001      	b.n	8001e02 <Modbus_Protocal_Worker+0x1b2>
				break;
 8001dfe:	bf00      	nop
					}
		break;


	}
}
 8001e00:	e028      	b.n	8001e54 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8001e02:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	7d5b      	ldrb	r3, [r3, #21]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d020      	beq.n	8001e4e <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001e0c:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2201      	movs	r2, #1
 8001e12:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001e14:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f009 ff20 	bl	800bc60 <HAL_UART_AbortReceive>
		break;
 8001e20:	e015      	b.n	8001e4e <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b20      	cmp	r3, #32
 8001e30:	d10f      	bne.n	8001e52 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8001e3c:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2201      	movs	r2, #1
 8001e42:	761a      	strb	r2, [r3, #24]
		break;
 8001e44:	e005      	b.n	8001e52 <Modbus_Protocal_Worker+0x202>
		break;
 8001e46:	bf00      	nop
 8001e48:	e004      	b.n	8001e54 <Modbus_Protocal_Worker+0x204>
		break;
 8001e4a:	bf00      	nop
 8001e4c:	e002      	b.n	8001e54 <Modbus_Protocal_Worker+0x204>
		break;
 8001e4e:	bf00      	nop
 8001e50:	e000      	b.n	8001e54 <Modbus_Protocal_Worker+0x204>
		break;
 8001e52:	bf00      	nop
}
 8001e54:	bf00      	nop
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	2000030c 	.word	0x2000030c

08001e60 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001e66:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <modbusWrite1Register+0x80>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	7e9b      	ldrb	r3, [r3, #26]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <modbusWrite1Register+0x80>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	7edb      	ldrb	r3, [r3, #27]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8001e7e:	88fa      	ldrh	r2, [r7, #6]
 8001e80:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <modbusWrite1Register+0x80>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d903      	bls.n	8001e92 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001e8a:	2002      	movs	r0, #2
 8001e8c:	f000 f8a4 	bl	8001fd8 <ModbusErrorReply>
			 return;
 8001e90:	e023      	b.n	8001eda <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001e92:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <modbusWrite1Register+0x80>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <modbusWrite1Register+0x80>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6859      	ldr	r1, [r3, #4]
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	440b      	add	r3, r1
 8001ea2:	7f12      	ldrb	r2, [r2, #28]
 8001ea4:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <modbusWrite1Register+0x80>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <modbusWrite1Register+0x80>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6859      	ldr	r1, [r3, #4]
 8001eb0:	88fb      	ldrh	r3, [r7, #6]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	440b      	add	r3, r1
 8001eb6:	7f52      	ldrb	r2, [r2, #29]
 8001eb8:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001eba:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <modbusWrite1Register+0x80>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 8001ec2:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <modbusWrite1Register+0x80>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8001ec8:	2208      	movs	r2, #8
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f00a ffdc 	bl	800ce88 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001ed0:	4b03      	ldr	r3, [pc, #12]	; (8001ee0 <modbusWrite1Register+0x80>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2205      	movs	r2, #5
 8001ed6:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	2000030c 	.word	0x2000030c

08001ee4 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001ee4:	b590      	push	{r4, r7, lr}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001eea:	4b3a      	ldr	r3, [pc, #232]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	7f1b      	ldrb	r3, [r3, #28]
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	021b      	lsls	r3, r3, #8
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	4b37      	ldr	r3, [pc, #220]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	7f5b      	ldrb	r3, [r3, #29]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	4413      	add	r3, r2
 8001f00:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001f02:	4b34      	ldr	r3, [pc, #208]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	7e9b      	ldrb	r3, [r3, #26]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	021b      	lsls	r3, r3, #8
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	4b31      	ldr	r3, [pc, #196]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	7edb      	ldrb	r3, [r3, #27]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	4413      	add	r3, r2
 8001f18:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001f1a:	88fb      	ldrh	r3, [r7, #6]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <modbusRead1Register+0x42>
 8001f20:	88fb      	ldrh	r3, [r7, #6]
 8001f22:	2b7d      	cmp	r3, #125	; 0x7d
 8001f24:	d903      	bls.n	8001f2e <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001f26:	2003      	movs	r0, #3
 8001f28:	f000 f856 	bl	8001fd8 <ModbusErrorReply>
		 return;
 8001f2c:	e04e      	b.n	8001fcc <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8001f2e:	88ba      	ldrh	r2, [r7, #4]
 8001f30:	4b28      	ldr	r3, [pc, #160]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d808      	bhi.n	8001f4c <modbusRead1Register+0x68>
 8001f3a:	88ba      	ldrh	r2, [r7, #4]
 8001f3c:	88fb      	ldrh	r3, [r7, #6]
 8001f3e:	4413      	add	r3, r2
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d903      	bls.n	8001f54 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001f4c:	2002      	movs	r0, #2
 8001f4e:	f000 f843 	bl	8001fd8 <ModbusErrorReply>
		 return;
 8001f52:	e03b      	b.n	8001fcc <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001f54:	4b1f      	ldr	r3, [pc, #124]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2203      	movs	r2, #3
 8001f5a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001f5e:	88fb      	ldrh	r3, [r7, #6]
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4b1c      	ldr	r3, [pc, #112]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	0052      	lsls	r2, r2, #1
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001f6e:	2400      	movs	r4, #0
 8001f70:	e020      	b.n	8001fb4 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001f72:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	88bb      	ldrh	r3, [r7, #4]
 8001f7a:	4423      	add	r3, r4
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	18d1      	adds	r1, r2, r3
 8001f80:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	1c63      	adds	r3, r4, #1
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	7849      	ldrb	r1, [r1, #1]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	460a      	mov	r2, r1
 8001f8e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001f92:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	88bb      	ldrh	r3, [r7, #4]
 8001f9a:	4423      	add	r3, r4
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	18d1      	adds	r1, r2, r3
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	0063      	lsls	r3, r4, #1
 8001fa6:	3303      	adds	r3, #3
 8001fa8:	7809      	ldrb	r1, [r1, #0]
 8001faa:	4413      	add	r3, r2
 8001fac:	460a      	mov	r2, r1
 8001fae:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8001fb2:	3401      	adds	r4, #1
 8001fb4:	88fb      	ldrh	r3, [r7, #6]
 8001fb6:	429c      	cmp	r4, r3
 8001fb8:	dbdb      	blt.n	8001f72 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001fba:	88fb      	ldrh	r3, [r7, #6]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	0052      	lsls	r2, r2, #1
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd90      	pop	{r4, r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	2000030c 	.word	0x2000030c

08001fd8 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <ModbusErrorReply+0x40>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	7e5a      	ldrb	r2, [r3, #25]
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <ModbusErrorReply+0x40>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001ff6:	4b08      	ldr	r3, [pc, #32]	; (8002018 <ModbusErrorReply+0x40>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	79fa      	ldrb	r2, [r7, #7]
 8001ffc:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 8002000:	4b05      	ldr	r3, [pc, #20]	; (8002018 <ModbusErrorReply+0x40>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2202      	movs	r2, #2
 8002006:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	2000030c 	.word	0x2000030c

0800201c <Modbus_frame_response>:

void Modbus_frame_response()
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8002020:	4b09      	ldr	r3, [pc, #36]	; (8002048 <Modbus_frame_response+0x2c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	7e5b      	ldrb	r3, [r3, #25]
 8002026:	2b03      	cmp	r3, #3
 8002028:	d004      	beq.n	8002034 <Modbus_frame_response+0x18>
 800202a:	2b06      	cmp	r3, #6
 800202c:	d105      	bne.n	800203a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800202e:	f7ff ff17 	bl	8001e60 <modbusWrite1Register>
		break;
 8002032:	e006      	b.n	8002042 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8002034:	f7ff ff56 	bl	8001ee4 <modbusRead1Register>
		break;
 8002038:	e003      	b.n	8002042 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800203a:	2001      	movs	r0, #1
 800203c:	f7ff ffcc 	bl	8001fd8 <ModbusErrorReply>
		break;
 8002040:	bf00      	nop

	}
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	2000030c 	.word	0x2000030c

0800204c <Modbus_Emission>:

void Modbus_Emission()
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002052:	4b3d      	ldr	r3, [pc, #244]	; (8002148 <Modbus_Emission+0xfc>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b20      	cmp	r3, #32
 8002060:	d15e      	bne.n	8002120 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8002062:	4b39      	ldr	r3, [pc, #228]	; (8002148 <Modbus_Emission+0xfc>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	4b38      	ldr	r3, [pc, #224]	; (8002148 <Modbus_Emission+0xfc>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	7812      	ldrb	r2, [r2, #0]
 800206c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8002070:	4b35      	ldr	r3, [pc, #212]	; (8002148 <Modbus_Emission+0xfc>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8002078:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 800207a:	4b33      	ldr	r3, [pc, #204]	; (8002148 <Modbus_Emission+0xfc>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 8002082:	4b31      	ldr	r3, [pc, #196]	; (8002148 <Modbus_Emission+0xfc>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 800208a:	461a      	mov	r2, r3
 800208c:	f00a fefc 	bl	800ce88 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8002090:	4b2d      	ldr	r3, [pc, #180]	; (8002148 <Modbus_Emission+0xfc>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8002098:	b29a      	uxth	r2, r3
 800209a:	4b2b      	ldr	r3, [pc, #172]	; (8002148 <Modbus_Emission+0xfc>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	3203      	adds	r2, #3
 80020a0:	b292      	uxth	r2, r2
 80020a2:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80020a6:	4b28      	ldr	r3, [pc, #160]	; (8002148 <Modbus_Emission+0xfc>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80020ae:	4b26      	ldr	r3, [pc, #152]	; (8002148 <Modbus_Emission+0xfc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80020b6:	3b02      	subs	r3, #2
 80020b8:	4619      	mov	r1, r3
 80020ba:	4610      	mov	r0, r2
 80020bc:	f7ff fd92 	bl	8001be4 <CRC16>
 80020c0:	4603      	mov	r3, r0
 80020c2:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80020c4:	4b20      	ldr	r3, [pc, #128]	; (8002148 <Modbus_Emission+0xfc>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4b1f      	ldr	r3, [pc, #124]	; (8002148 <Modbus_Emission+0xfc>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80020d0:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80020d2:	7939      	ldrb	r1, [r7, #4]
 80020d4:	4413      	add	r3, r2
 80020d6:	460a      	mov	r2, r1
 80020d8:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80020dc:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <Modbus_Emission+0xfc>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	4b19      	ldr	r3, [pc, #100]	; (8002148 <Modbus_Emission+0xfc>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80020e8:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80020ea:	7979      	ldrb	r1, [r7, #5]
 80020ec:	4413      	add	r3, r2
 80020ee:	460a      	mov	r2, r1
 80020f0:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80020f4:	4b14      	ldr	r3, [pc, #80]	; (8002148 <Modbus_Emission+0xfc>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b20      	cmp	r3, #32
 8002102:	d10d      	bne.n	8002120 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8002104:	4b10      	ldr	r3, [pc, #64]	; (8002148 <Modbus_Emission+0xfc>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 800210a:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <Modbus_Emission+0xfc>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8002112:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <Modbus_Emission+0xfc>)
 8002114:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8002116:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800211a:	461a      	mov	r2, r3
 800211c:	f009 fd22 	bl	800bb64 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8002120:	4b09      	ldr	r3, [pc, #36]	; (8002148 <Modbus_Emission+0xfc>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2200      	movs	r2, #0
 8002126:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8002128:	4b07      	ldr	r3, [pc, #28]	; (8002148 <Modbus_Emission+0xfc>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2200      	movs	r2, #0
 800212e:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <Modbus_Emission+0xfc>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2200      	movs	r2, #0
 8002136:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8002138:	4b03      	ldr	r3, [pc, #12]	; (8002148 <Modbus_Emission+0xfc>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2202      	movs	r2, #2
 800213e:	761a      	strb	r2, [r3, #24]
}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	2000030c 	.word	0x2000030c

0800214c <PIDSetup>:
 */

#include "PIDController.h"

void PIDSetup(PID* temp,float32_t Kp, float32_t Ki, float32_t Kd, float32_t tolerance)
{
 800214c:	b480      	push	{r7}
 800214e:	b087      	sub	sp, #28
 8002150:	af00      	add	r7, sp, #0
 8002152:	6178      	str	r0, [r7, #20]
 8002154:	ed87 0a04 	vstr	s0, [r7, #16]
 8002158:	edc7 0a03 	vstr	s1, [r7, #12]
 800215c:	ed87 1a02 	vstr	s2, [r7, #8]
 8002160:	edc7 1a01 	vstr	s3, [r7, #4]
	temp->Kp = Kp;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	601a      	str	r2, [r3, #0]
	temp->Ki = Ki;
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	605a      	str	r2, [r3, #4]
	temp->Kd = Kd;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	609a      	str	r2, [r3, #8]
	temp->tolerance = tolerance;
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	629a      	str	r2, [r3, #40]	; 0x28
	temp->U = 0;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	2200      	movs	r2, #0
 8002180:	60da      	str	r2, [r3, #12]
	temp->Delta_U = 0;
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	2200      	movs	r2, #0
 8002186:	611a      	str	r2, [r3, #16]
	temp->U_minus = 0;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	2200      	movs	r2, #0
 800218c:	615a      	str	r2, [r3, #20]
	temp->Error = 0;
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	2200      	movs	r2, #0
 8002192:	619a      	str	r2, [r3, #24]
	temp->Error_minus = 0;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	2200      	movs	r2, #0
 8002198:	61da      	str	r2, [r3, #28]
	temp->Error_minus2 = 0;
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	2200      	movs	r2, #0
 800219e:	621a      	str	r2, [r3, #32]
}
 80021a0:	bf00      	nop
 80021a2:	371c      	adds	r7, #28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <PIDRun>:

void PIDRun(PID* temp, float32_t Feedback, float32_t Ref)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80021b8:	edc7 0a01 	vstr	s1, [r7, #4]
	temp->Error = Ref - Feedback;
 80021bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80021c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80021c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021cc:	ee17 2a90 	vmov	r2, s15
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	619a      	str	r2, [r3, #24]
	if(temp->Error > 0)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	dd04      	ble.n	80021e6 <PIDRun+0x3a>
	{
		temp->MotorDir = 0;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80021e4:	e007      	b.n	80021f6 <PIDRun+0x4a>
	}
	else if (temp->Error < 0)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	da03      	bge.n	80021f6 <PIDRun+0x4a>
	{
		temp->MotorDir = 1;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
	//U Update
	temp->Delta_U = (temp->Kp + temp->Ki + temp->Kd) * temp->Error
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	ed93 7a00 	vldr	s14, [r3]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8002202:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	edd3 7a02 	vldr	s15, [r3, #8]
 800220c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	ee07 3a90 	vmov	s15, r3
 8002218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800221c:	ee27 7a27 	vmul.f32	s14, s14, s15
			  - (temp->Kp + 2*temp->Kd) * temp->Error_minus
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	edd3 6a00 	vldr	s13, [r3]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	edd3 7a02 	vldr	s15, [r3, #8]
 800222c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002230:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	ee07 3a90 	vmov	s15, r3
 800223c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002240:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002244:	ee37 7a67 	vsub.f32	s14, s14, s15
			  + temp->Kd * temp->Error_minus2;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	edd3 6a02 	vldr	s13, [r3, #8]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	ee07 3a90 	vmov	s15, r3
 8002256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800225a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800225e:	ee77 7a27 	vadd.f32	s15, s14, s15
	temp->Delta_U = (temp->Kp + temp->Ki + temp->Kd) * temp->Error
 8002262:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002266:	ee17 2a90 	vmov	r2, s15
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	611a      	str	r2, [r3, #16]
	temp->U = temp->Delta_U + temp->U_minus;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	691a      	ldr	r2, [r3, #16]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	441a      	add	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	60da      	str	r2, [r3, #12]
	temp->U_minus = temp->U;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	615a      	str	r2, [r3, #20]
	//Error Update
	temp->Error_minus2 = temp->Error_minus;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	69da      	ldr	r2, [r3, #28]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	621a      	str	r2, [r3, #32]
	temp->Error_minus = temp->Error;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	699a      	ldr	r2, [r3, #24]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	61da      	str	r2, [r3, #28]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <CascadeLoop>:

void CascadeLoop(PID* Pos, PID* Velo, float32_t xPosFeedback, float32_t VeloFeedback, QuinticTraj* TrajReference, float32_t tolerance)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6178      	str	r0, [r7, #20]
 80022a8:	6139      	str	r1, [r7, #16]
 80022aa:	ed87 0a03 	vstr	s0, [r7, #12]
 80022ae:	edc7 0a02 	vstr	s1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
 80022b4:	ed87 1a00 	vstr	s2, [r7]
	int32_t PosFeedback = __HAL_TIM_GET_COUNTER(&htim2);
 80022b8:	4b3a      	ldr	r3, [pc, #232]	; (80023a4 <CascadeLoop+0x104>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	61fb      	str	r3, [r7, #28]
	if(TrajReference->time >= TrajReference->TotalTime)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80022cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d4:	db27      	blt.n	8002326 <CascadeLoop+0x86>
	{
		//int32_t CurrentError = TrajReference->current_pos - PosFeedback;
		if((TrajReference->final_pos - __HAL_TIM_GET_COUNTER(&htim2) <= 13) || (TrajReference->final_pos - __HAL_TIM_GET_COUNTER(&htim2) >= -13))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	461a      	mov	r2, r3
 80022dc:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <CascadeLoop+0x104>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b0d      	cmp	r3, #13
 80022e6:	d909      	bls.n	80022fc <CascadeLoop+0x5c>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	461a      	mov	r2, r3
 80022ee:	4b2d      	ldr	r3, [pc, #180]	; (80023a4 <CascadeLoop+0x104>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	f113 0f0e 	cmn.w	r3, #14
 80022fa:	d93c      	bls.n	8002376 <CascadeLoop+0xd6>
		{
				Pos->IsSteady = 1;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				Velo->U = 0;
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	2200      	movs	r2, #0
 8002308:	60da      	str	r2, [r3, #12]
				Pos->ESS = TrajReference->final_pos - __HAL_TIM_GET_COUNTER(&htim2);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	b2da      	uxtb	r2, r3
 8002310:	4b24      	ldr	r3, [pc, #144]	; (80023a4 <CascadeLoop+0x104>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	b2db      	uxtb	r3, r3
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	b2db      	uxtb	r3, r3
 800231c:	b25a      	sxtb	r2, r3
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8002324:	e027      	b.n	8002376 <CascadeLoop+0xd6>
		}
	}
	else
	{
		Pos->IsSteady = 0;
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		PIDRun(Pos, PosFeedback, TrajReference->current_pos);
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	ee07 3a90 	vmov	s15, r3
 8002334:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	ee07 3a10 	vmov	s14, r3
 8002340:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002344:	eef0 0a47 	vmov.f32	s1, s14
 8002348:	eeb0 0a67 	vmov.f32	s0, s15
 800234c:	6978      	ldr	r0, [r7, #20]
 800234e:	f7ff ff2d 	bl	80021ac <PIDRun>
		float32_t veloRef = Pos->U + TrajReference->current_velo;
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	4413      	add	r3, r2
 800235c:	ee07 3a90 	vmov	s15, r3
 8002360:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002364:	edc7 7a06 	vstr	s15, [r7, #24]
		PIDRun(Velo, VeloFeedback, veloRef);
 8002368:	edd7 0a06 	vldr	s1, [r7, #24]
 800236c:	ed97 0a02 	vldr	s0, [r7, #8]
 8002370:	6938      	ldr	r0, [r7, #16]
 8002372:	f7ff ff1b 	bl	80021ac <PIDRun>
	}
	if(Velo->U > 40000)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	f649 4240 	movw	r2, #40000	; 0x9c40
 800237e:	4293      	cmp	r3, r2
 8002380:	dd04      	ble.n	800238c <CascadeLoop+0xec>
	{
		Velo->U = 40000;
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002388:	60da      	str	r2, [r3, #12]
	{
		Velo->U = -40000;
	}


}
 800238a:	e007      	b.n	800239c <CascadeLoop+0xfc>
	else if (Velo->U < -40000)
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4a05      	ldr	r2, [pc, #20]	; (80023a8 <CascadeLoop+0x108>)
 8002392:	4293      	cmp	r3, r2
 8002394:	da02      	bge.n	800239c <CascadeLoop+0xfc>
		Velo->U = -40000;
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4a03      	ldr	r2, [pc, #12]	; (80023a8 <CascadeLoop+0x108>)
 800239a:	60da      	str	r2, [r3, #12]
}
 800239c:	bf00      	nop
 800239e:	3720      	adds	r7, #32
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20000e80 	.word	0x20000e80
 80023a8:	ffff63c0 	.word	0xffff63c0

080023ac <QuinticSetup>:
 *      Author: tanawatp
 */
#include "QuinticTrajectory.h"

void QuinticSetup(QuinticTraj* temp, float32_t vmax, float32_t amax)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80023b8:	edc7 0a01 	vstr	s1, [r7, #4]
	temp->v_max = vmax;
 80023bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80023c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023c4:	ee17 2a90 	vmov	r2, s15
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	619a      	str	r2, [r3, #24]
	temp->a_max = amax;
 80023cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80023d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023d4:	ee17 2a90 	vmov	r2, s15
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	61da      	str	r2, [r3, #28]
	temp->State = Ready;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	//temp->final_pos = 300;
}
 80023e4:	bf00      	nop
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <QuinticGenerator>:
void QuinticGenerator(QuinticTraj* temp,int8_t ess)
{
 80023f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023f4:	b082      	sub	sp, #8
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	460b      	mov	r3, r1
 80023fc:	70fb      	strb	r3, [r7, #3]
	//temp->final_pos = temp->final_pos * 8192/120;
	temp->displacement = temp->final_pos - temp->start_pos;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	1ad2      	subs	r2, r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	609a      	str	r2, [r3, #8]
	if(temp->displacement<0)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	da04      	bge.n	800241e <QuinticGenerator+0x2e>
	{
		temp->Dir = 1;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2020 	strb.w	r2, [r3, #32]
 800241c:	e007      	b.n	800242e <QuinticGenerator+0x3e>
	}
	else if (temp->displacement>0)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	dd03      	ble.n	800242e <QuinticGenerator+0x3e>
	{
		temp->Dir = 0;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2020 	strb.w	r2, [r3, #32]
	}
	temp->timeAcc = 0.5*sqrtf(23.094*fabs(temp->displacement)/temp->a_max);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe f822 	bl	800047c <__aeabi_i2d>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4690      	mov	r8, r2
 800243e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002442:	a388      	add	r3, pc, #544	; (adr r3, 8002664 <QuinticGenerator+0x274>)
 8002444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002448:	4640      	mov	r0, r8
 800244a:	4649      	mov	r1, r9
 800244c:	f7fe f880 	bl	8000550 <__aeabi_dmul>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4690      	mov	r8, r2
 8002456:	4699      	mov	r9, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe f80d 	bl	800047c <__aeabi_i2d>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4640      	mov	r0, r8
 8002468:	4649      	mov	r1, r9
 800246a:	f7fe f99b 	bl	80007a4 <__aeabi_ddiv>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4610      	mov	r0, r2
 8002474:	4619      	mov	r1, r3
 8002476:	f7fe fb63 	bl	8000b40 <__aeabi_d2f>
 800247a:	4603      	mov	r3, r0
 800247c:	ee00 3a10 	vmov	s0, r3
 8002480:	f00a feba 	bl	800d1f8 <sqrtf>
 8002484:	ee10 3a10 	vmov	r3, s0
 8002488:	4618      	mov	r0, r3
 800248a:	f7fe f809 	bl	80004a0 <__aeabi_f2d>
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	4b6f      	ldr	r3, [pc, #444]	; (8002650 <QuinticGenerator+0x260>)
 8002494:	f7fe f85c 	bl	8000550 <__aeabi_dmul>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4610      	mov	r0, r2
 800249e:	4619      	mov	r1, r3
 80024a0:	f7fe fb4e 	bl	8000b40 <__aeabi_d2f>
 80024a4:	4602      	mov	r2, r0
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	645a      	str	r2, [r3, #68]	; 0x44
	temp->timeVelo = 1.875*fabs(temp->displacement)/temp->v_max;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fd ffe4 	bl	800047c <__aeabi_i2d>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	4614      	mov	r4, r2
 80024ba:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	4b64      	ldr	r3, [pc, #400]	; (8002654 <QuinticGenerator+0x264>)
 80024c4:	4620      	mov	r0, r4
 80024c6:	4629      	mov	r1, r5
 80024c8:	f7fe f842 	bl	8000550 <__aeabi_dmul>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4614      	mov	r4, r2
 80024d2:	461d      	mov	r5, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fd ffcf 	bl	800047c <__aeabi_i2d>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4620      	mov	r0, r4
 80024e4:	4629      	mov	r1, r5
 80024e6:	f7fe f95d 	bl	80007a4 <__aeabi_ddiv>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4610      	mov	r0, r2
 80024f0:	4619      	mov	r1, r3
 80024f2:	f7fe fb25 	bl	8000b40 <__aeabi_d2f>
 80024f6:	4602      	mov	r2, r0
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	649a      	str	r2, [r3, #72]	; 0x48
	temp->TotalTime = MAX(temp->timeAcc,temp->timeVelo);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002508:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800250c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002510:	dd02      	ble.n	8002518 <QuinticGenerator+0x128>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	e001      	b.n	800251c <QuinticGenerator+0x12c>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	63d3      	str	r3, [r2, #60]	; 0x3c
	temp->coeff[0] = temp->start_pos;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	ee07 3a90 	vmov	s15, r3
 8002528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	temp->coeff[1] = 0;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	629a      	str	r2, [r3, #40]	; 0x28
	temp->coeff[2] = 0;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	62da      	str	r2, [r3, #44]	; 0x2c
	temp->coeff[3] = 10.0*temp->displacement/powf(temp->TotalTime,3);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	4618      	mov	r0, r3
 8002548:	f7fd ff98 	bl	800047c <__aeabi_i2d>
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	4b41      	ldr	r3, [pc, #260]	; (8002658 <QuinticGenerator+0x268>)
 8002552:	f7fd fffd 	bl	8000550 <__aeabi_dmul>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	4614      	mov	r4, r2
 800255c:	461d      	mov	r5, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002564:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8002568:	eeb0 0a67 	vmov.f32	s0, s15
 800256c:	f00a fdec 	bl	800d148 <powf>
 8002570:	ee10 3a10 	vmov	r3, s0
 8002574:	4618      	mov	r0, r3
 8002576:	f7fd ff93 	bl	80004a0 <__aeabi_f2d>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	4620      	mov	r0, r4
 8002580:	4629      	mov	r1, r5
 8002582:	f7fe f90f 	bl	80007a4 <__aeabi_ddiv>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4610      	mov	r0, r2
 800258c:	4619      	mov	r1, r3
 800258e:	f7fe fad7 	bl	8000b40 <__aeabi_d2f>
 8002592:	4602      	mov	r2, r0
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	631a      	str	r2, [r3, #48]	; 0x30
	temp->coeff[4] = -15.0*temp->displacement/powf(temp->TotalTime,4);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd ff6d 	bl	800047c <__aeabi_i2d>
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	4b2d      	ldr	r3, [pc, #180]	; (800265c <QuinticGenerator+0x26c>)
 80025a8:	f7fd ffd2 	bl	8000550 <__aeabi_dmul>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4614      	mov	r4, r2
 80025b2:	461d      	mov	r5, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80025ba:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80025be:	eeb0 0a67 	vmov.f32	s0, s15
 80025c2:	f00a fdc1 	bl	800d148 <powf>
 80025c6:	ee10 3a10 	vmov	r3, s0
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fd ff68 	bl	80004a0 <__aeabi_f2d>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4620      	mov	r0, r4
 80025d6:	4629      	mov	r1, r5
 80025d8:	f7fe f8e4 	bl	80007a4 <__aeabi_ddiv>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4610      	mov	r0, r2
 80025e2:	4619      	mov	r1, r3
 80025e4:	f7fe faac 	bl	8000b40 <__aeabi_d2f>
 80025e8:	4602      	mov	r2, r0
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	635a      	str	r2, [r3, #52]	; 0x34
	temp->coeff[5] = 6.0*temp->displacement/powf(temp->TotalTime,5);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fd ff42 	bl	800047c <__aeabi_i2d>
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	4b18      	ldr	r3, [pc, #96]	; (8002660 <QuinticGenerator+0x270>)
 80025fe:	f7fd ffa7 	bl	8000550 <__aeabi_dmul>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4614      	mov	r4, r2
 8002608:	461d      	mov	r5, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002610:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8002614:	eeb0 0a67 	vmov.f32	s0, s15
 8002618:	f00a fd96 	bl	800d148 <powf>
 800261c:	ee10 3a10 	vmov	r3, s0
 8002620:	4618      	mov	r0, r3
 8002622:	f7fd ff3d 	bl	80004a0 <__aeabi_f2d>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4620      	mov	r0, r4
 800262c:	4629      	mov	r1, r5
 800262e:	f7fe f8b9 	bl	80007a4 <__aeabi_ddiv>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	4610      	mov	r0, r2
 8002638:	4619      	mov	r1, r3
 800263a:	f7fe fa81 	bl	8000b40 <__aeabi_d2f>
 800263e:	4602      	mov	r2, r0
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002644:	bf00      	nop
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800264e:	bf00      	nop
 8002650:	3fe00000 	.word	0x3fe00000
 8002654:	3ffe0000 	.word	0x3ffe0000
 8002658:	40240000 	.word	0x40240000
 800265c:	c02e0000 	.word	0xc02e0000
 8002660:	40180000 	.word	0x40180000
 8002664:	624dd2f2 	.word	0x624dd2f2
 8002668:	40371810 	.word	0x40371810

0800266c <QuinticEvaluator>:
void QuinticEvaluator(QuinticTraj* temp)
{
 800266c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002670:	ed2d 8b02 	vpush	{d8}
 8002674:	b084      	sub	sp, #16
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
	float32_t time = temp->time;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	60fb      	str	r3, [r7, #12]
	temp->current_pos = temp->coeff[0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
						+ temp->coeff[1]*time
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800268c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002690:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002694:	ee37 8a27 	vadd.f32	s16, s14, s15
						+ temp->coeff[2]*powf(time,2)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	edd3 8a0b 	vldr	s17, [r3, #44]	; 0x2c
 800269e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80026a2:	ed97 0a03 	vldr	s0, [r7, #12]
 80026a6:	f00a fd4f 	bl	800d148 <powf>
 80026aa:	eef0 7a40 	vmov.f32	s15, s0
 80026ae:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80026b2:	ee38 8a27 	vadd.f32	s16, s16, s15
						+ temp->coeff[3]*powf(time,3)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	edd3 8a0c 	vldr	s17, [r3, #48]	; 0x30
 80026bc:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80026c0:	ed97 0a03 	vldr	s0, [r7, #12]
 80026c4:	f00a fd40 	bl	800d148 <powf>
 80026c8:	eef0 7a40 	vmov.f32	s15, s0
 80026cc:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80026d0:	ee38 8a27 	vadd.f32	s16, s16, s15
						+ temp->coeff[4]*powf(time,4)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	edd3 8a0d 	vldr	s17, [r3, #52]	; 0x34
 80026da:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80026de:	ed97 0a03 	vldr	s0, [r7, #12]
 80026e2:	f00a fd31 	bl	800d148 <powf>
 80026e6:	eef0 7a40 	vmov.f32	s15, s0
 80026ea:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80026ee:	ee38 8a27 	vadd.f32	s16, s16, s15
						+ temp->coeff[5]*powf(time,5);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	edd3 8a0e 	vldr	s17, [r3, #56]	; 0x38
 80026f8:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80026fc:	ed97 0a03 	vldr	s0, [r7, #12]
 8002700:	f00a fd22 	bl	800d148 <powf>
 8002704:	eef0 7a40 	vmov.f32	s15, s0
 8002708:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800270c:	ee78 7a27 	vadd.f32	s15, s16, s15
	temp->current_pos = temp->coeff[0]
 8002710:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002714:	ee17 2a90 	vmov	r2, s15
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	60da      	str	r2, [r3, #12]

	temp->current_velo = temp->coeff[1]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002720:	4618      	mov	r0, r3
 8002722:	f7fd febd 	bl	80004a0 <__aeabi_f2d>
 8002726:	4604      	mov	r4, r0
 8002728:	460d      	mov	r5, r1
						+ 2.0*temp->coeff[2]*time
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272e:	4618      	mov	r0, r3
 8002730:	f7fd feb6 	bl	80004a0 <__aeabi_f2d>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	f7fd fd54 	bl	80001e4 <__adddf3>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4690      	mov	r8, r2
 8002742:	4699      	mov	r9, r3
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f7fd feab 	bl	80004a0 <__aeabi_f2d>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4640      	mov	r0, r8
 8002750:	4649      	mov	r1, r9
 8002752:	f7fd fefd 	bl	8000550 <__aeabi_dmul>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4620      	mov	r0, r4
 800275c:	4629      	mov	r1, r5
 800275e:	f7fd fd41 	bl	80001e4 <__adddf3>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4614      	mov	r4, r2
 8002768:	461d      	mov	r5, r3
						+ 3.0*temp->coeff[3]*powf(time,2)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	4618      	mov	r0, r3
 8002770:	f7fd fe96 	bl	80004a0 <__aeabi_f2d>
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	4b8e      	ldr	r3, [pc, #568]	; (80029b4 <QuinticEvaluator+0x348>)
 800277a:	f7fd fee9 	bl	8000550 <__aeabi_dmul>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4690      	mov	r8, r2
 8002784:	4699      	mov	r9, r3
 8002786:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800278a:	ed97 0a03 	vldr	s0, [r7, #12]
 800278e:	f00a fcdb 	bl	800d148 <powf>
 8002792:	ee10 3a10 	vmov	r3, s0
 8002796:	4618      	mov	r0, r3
 8002798:	f7fd fe82 	bl	80004a0 <__aeabi_f2d>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	4640      	mov	r0, r8
 80027a2:	4649      	mov	r1, r9
 80027a4:	f7fd fed4 	bl	8000550 <__aeabi_dmul>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	4620      	mov	r0, r4
 80027ae:	4629      	mov	r1, r5
 80027b0:	f7fd fd18 	bl	80001e4 <__adddf3>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4614      	mov	r4, r2
 80027ba:	461d      	mov	r5, r3
						+ 4.0*temp->coeff[4]*powf(time,3)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fd fe6d 	bl	80004a0 <__aeabi_f2d>
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	4b7b      	ldr	r3, [pc, #492]	; (80029b8 <QuinticEvaluator+0x34c>)
 80027cc:	f7fd fec0 	bl	8000550 <__aeabi_dmul>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4690      	mov	r8, r2
 80027d6:	4699      	mov	r9, r3
 80027d8:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80027dc:	ed97 0a03 	vldr	s0, [r7, #12]
 80027e0:	f00a fcb2 	bl	800d148 <powf>
 80027e4:	ee10 3a10 	vmov	r3, s0
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fd fe59 	bl	80004a0 <__aeabi_f2d>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4640      	mov	r0, r8
 80027f4:	4649      	mov	r1, r9
 80027f6:	f7fd feab 	bl	8000550 <__aeabi_dmul>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	4620      	mov	r0, r4
 8002800:	4629      	mov	r1, r5
 8002802:	f7fd fcef 	bl	80001e4 <__adddf3>
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	4614      	mov	r4, r2
 800280c:	461d      	mov	r5, r3
						+ 5.0*temp->coeff[5]*powf(time,4);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002812:	4618      	mov	r0, r3
 8002814:	f7fd fe44 	bl	80004a0 <__aeabi_f2d>
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	4b67      	ldr	r3, [pc, #412]	; (80029bc <QuinticEvaluator+0x350>)
 800281e:	f7fd fe97 	bl	8000550 <__aeabi_dmul>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4690      	mov	r8, r2
 8002828:	4699      	mov	r9, r3
 800282a:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800282e:	ed97 0a03 	vldr	s0, [r7, #12]
 8002832:	f00a fc89 	bl	800d148 <powf>
 8002836:	ee10 3a10 	vmov	r3, s0
 800283a:	4618      	mov	r0, r3
 800283c:	f7fd fe30 	bl	80004a0 <__aeabi_f2d>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4640      	mov	r0, r8
 8002846:	4649      	mov	r1, r9
 8002848:	f7fd fe82 	bl	8000550 <__aeabi_dmul>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4620      	mov	r0, r4
 8002852:	4629      	mov	r1, r5
 8002854:	f7fd fcc6 	bl	80001e4 <__adddf3>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
	temp->current_velo = temp->coeff[1]
 800285c:	4610      	mov	r0, r2
 800285e:	4619      	mov	r1, r3
 8002860:	f7fe f926 	bl	8000ab0 <__aeabi_d2iz>
 8002864:	4602      	mov	r2, r0
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	611a      	str	r2, [r3, #16]

	temp->current_acc = 2.0*temp->coeff[2]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286e:	4618      	mov	r0, r3
 8002870:	f7fd fe16 	bl	80004a0 <__aeabi_f2d>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	f7fd fcb4 	bl	80001e4 <__adddf3>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4614      	mov	r4, r2
 8002882:	461d      	mov	r5, r3
						+ 6.0*temp->coeff[3]*time
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	4618      	mov	r0, r3
 800288a:	f7fd fe09 	bl	80004a0 <__aeabi_f2d>
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	4b4b      	ldr	r3, [pc, #300]	; (80029c0 <QuinticEvaluator+0x354>)
 8002894:	f7fd fe5c 	bl	8000550 <__aeabi_dmul>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4690      	mov	r8, r2
 800289e:	4699      	mov	r9, r3
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f7fd fdfd 	bl	80004a0 <__aeabi_f2d>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	4640      	mov	r0, r8
 80028ac:	4649      	mov	r1, r9
 80028ae:	f7fd fe4f 	bl	8000550 <__aeabi_dmul>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4620      	mov	r0, r4
 80028b8:	4629      	mov	r1, r5
 80028ba:	f7fd fc93 	bl	80001e4 <__adddf3>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	4614      	mov	r4, r2
 80028c4:	461d      	mov	r5, r3
						+ 12.0*temp->coeff[4]*powf(time,2)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fd fde8 	bl	80004a0 <__aeabi_f2d>
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	4b3b      	ldr	r3, [pc, #236]	; (80029c4 <QuinticEvaluator+0x358>)
 80028d6:	f7fd fe3b 	bl	8000550 <__aeabi_dmul>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4690      	mov	r8, r2
 80028e0:	4699      	mov	r9, r3
 80028e2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80028e6:	ed97 0a03 	vldr	s0, [r7, #12]
 80028ea:	f00a fc2d 	bl	800d148 <powf>
 80028ee:	ee10 3a10 	vmov	r3, s0
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fd fdd4 	bl	80004a0 <__aeabi_f2d>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	4640      	mov	r0, r8
 80028fe:	4649      	mov	r1, r9
 8002900:	f7fd fe26 	bl	8000550 <__aeabi_dmul>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4620      	mov	r0, r4
 800290a:	4629      	mov	r1, r5
 800290c:	f7fd fc6a 	bl	80001e4 <__adddf3>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4614      	mov	r4, r2
 8002916:	461d      	mov	r5, r3
						+ 20.0*temp->coeff[5]*powf(time,3);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291c:	4618      	mov	r0, r3
 800291e:	f7fd fdbf 	bl	80004a0 <__aeabi_f2d>
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	4b28      	ldr	r3, [pc, #160]	; (80029c8 <QuinticEvaluator+0x35c>)
 8002928:	f7fd fe12 	bl	8000550 <__aeabi_dmul>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4690      	mov	r8, r2
 8002932:	4699      	mov	r9, r3
 8002934:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8002938:	ed97 0a03 	vldr	s0, [r7, #12]
 800293c:	f00a fc04 	bl	800d148 <powf>
 8002940:	ee10 3a10 	vmov	r3, s0
 8002944:	4618      	mov	r0, r3
 8002946:	f7fd fdab 	bl	80004a0 <__aeabi_f2d>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4640      	mov	r0, r8
 8002950:	4649      	mov	r1, r9
 8002952:	f7fd fdfd 	bl	8000550 <__aeabi_dmul>
 8002956:	4602      	mov	r2, r0
 8002958:	460b      	mov	r3, r1
 800295a:	4620      	mov	r0, r4
 800295c:	4629      	mov	r1, r5
 800295e:	f7fd fc41 	bl	80001e4 <__adddf3>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
	temp->current_acc = 2.0*temp->coeff[2]
 8002966:	4610      	mov	r0, r2
 8002968:	4619      	mov	r1, r3
 800296a:	f7fe f8a1 	bl	8000ab0 <__aeabi_d2iz>
 800296e:	4602      	mov	r2, r0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	615a      	str	r2, [r3, #20]
	if(time >= temp->TotalTime)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800297a:	ed97 7a03 	vldr	s14, [r7, #12]
 800297e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002986:	da00      	bge.n	800298a <QuinticEvaluator+0x31e>
		temp->start_pos = temp->final_pos;
		temp->current_pos = temp->start_pos;
		temp->current_velo = 0;
		temp->current_acc = 0;
	}
}
 8002988:	e00d      	b.n	80029a6 <QuinticEvaluator+0x33a>
		temp->start_pos = temp->final_pos;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	601a      	str	r2, [r3, #0]
		temp->current_pos = temp->start_pos;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	60da      	str	r2, [r3, #12]
		temp->current_velo = 0;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	611a      	str	r2, [r3, #16]
		temp->current_acc = 0;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	615a      	str	r2, [r3, #20]
}
 80029a6:	bf00      	nop
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	ecbd 8b02 	vpop	{d8}
 80029b0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80029b4:	40080000 	.word	0x40080000
 80029b8:	40100000 	.word	0x40100000
 80029bc:	40140000 	.word	0x40140000
 80029c0:	40180000 	.word	0x40180000
 80029c4:	40280000 	.word	0x40280000
 80029c8:	40340000 	.word	0x40340000

080029cc <QuinticRun>:
void QuinticRun(QuinticTraj* temp, int8_t ess, float32_t dt)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	460b      	mov	r3, r1
 80029d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80029da:	72fb      	strb	r3, [r7, #11]
	switch(temp->State)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d020      	beq.n	8002a28 <QuinticRun+0x5c>
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	dc3d      	bgt.n	8002a66 <QuinticRun+0x9a>
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <QuinticRun+0x28>
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d00b      	beq.n	8002a0a <QuinticRun+0x3e>
		{
			temp->State = Ready;
		}
		break;
	}
}
 80029f2:	e038      	b.n	8002a66 <QuinticRun+0x9a>
		if(temp->start_pos != temp->final_pos)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d031      	beq.n	8002a64 <QuinticRun+0x98>
			temp->State = PreCal;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8002a08:	e02c      	b.n	8002a64 <QuinticRun+0x98>
		temp->time = 0;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	641a      	str	r2, [r3, #64]	; 0x40
		QuinticGenerator(temp,ess);
 8002a12:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002a16:	4619      	mov	r1, r3
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f7ff fce9 	bl	80023f0 <QuinticGenerator>
		temp->State = Run;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2202      	movs	r2, #2
 8002a22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8002a26:	e01e      	b.n	8002a66 <QuinticRun+0x9a>
		temp->time = temp->time + dt;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002a2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		QuinticEvaluator(temp);
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f7ff fe15 	bl	800266c <QuinticEvaluator>
		if(temp->time > temp->TotalTime)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002a4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a56:	dc00      	bgt.n	8002a5a <QuinticRun+0x8e>
		break;
 8002a58:	e005      	b.n	8002a66 <QuinticRun+0x9a>
			temp->State = Ready;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8002a62:	e000      	b.n	8002a66 <QuinticRun+0x9a>
		break;
 8002a64:	bf00      	nop
}
 8002a66:	bf00      	nop
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <InitReadEncoder>:
//{ //get time in micros
//	return __HAL_TIM_GET_COUNTER(&htim5)+ ReadEncoderParam._micros;
//}

void InitReadEncoder(ReadEncoder* Read, uint32_t samplingtime)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
 8002a76:	6039      	str	r1, [r7, #0]
	Read->MotorSetDuty = 0;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	701a      	strb	r2, [r3, #0]
	Read->Pulse_Compare = 0;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	805a      	strh	r2, [r3, #2]
	Read->DIR = 0;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	711a      	strb	r2, [r3, #4]
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
	...

08002a98 <QEIGetFeedback>:
//	//Delay
//	QEIData.data[1] = QEIData.data[0];
//	QEIData.timestamp[1] = QEIData.timestamp[0];
//}
void QEIGetFeedback(QEI* temp, uint16_t Hz)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	807b      	strh	r3, [r7, #2]
	temp->QEIPosition = __HAL_TIM_GET_COUNTER(&htim2);
 8002aa4:	4b0f      	ldr	r3, [pc, #60]	; (8002ae4 <QEIGetFeedback+0x4c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	461a      	mov	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	605a      	str	r2, [r3, #4]
	temp->QEIVelocity = (temp->QEIPosition - temp->QEIPosition_minus) * Hz;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	887a      	ldrh	r2, [r7, #2]
 8002abc:	fb02 f303 	mul.w	r3, r2, r3
 8002ac0:	ee07 3a90 	vmov	s15, r3
 8002ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	edc3 7a02 	vstr	s15, [r3, #8]
	temp->QEIPosition_minus = temp->QEIPosition;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	601a      	str	r2, [r3, #0]
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	20000e80 	.word	0x20000e80

08002ae8 <SetHome>:
 */
#include "Storage.h"
extern u16u8_t registerFrame[200];

void SetHome(OperationVar* temp)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
	temp->HomingKey = 1;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	721a      	strb	r2, [r3, #8]
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,35*500);
 8002af6:	4b07      	ldr	r3, [pc, #28]	; (8002b14 <SetHome+0x2c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f244 425c 	movw	r2, #17500	; 0x445c
 8002afe:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 8002b00:	2201      	movs	r2, #1
 8002b02:	2140      	movs	r1, #64	; 0x40
 8002b04:	4804      	ldr	r0, [pc, #16]	; (8002b18 <SetHome+0x30>)
 8002b06:	f004 fe11 	bl	800772c <HAL_GPIO_WritePin>
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20000f34 	.word	0x20000f34
 8002b18:	40020800 	.word	0x40020800

08002b1c <RunX_Axis>:

void RunX_Axis(int32_t XFinalPos, uint16_t velo, uint16_t accel)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	807b      	strh	r3, [r7, #2]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	803b      	strh	r3, [r7, #0]
	registerFrame[0x41].U16 = XFinalPos;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <RunX_Axis+0x40>)
 8002b32:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	registerFrame[0x42].U16 = velo;	//250 mm/s
 8002b36:	4a09      	ldr	r2, [pc, #36]	; (8002b5c <RunX_Axis+0x40>)
 8002b38:	887b      	ldrh	r3, [r7, #2]
 8002b3a:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
	registerFrame[0x43].U16 = accel;	//1000 mm/s^2
 8002b3e:	4a07      	ldr	r2, [pc, #28]	; (8002b5c <RunX_Axis+0x40>)
 8002b40:	883b      	ldrh	r3, [r7, #0]
 8002b42:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
	registerFrame[0x40].U16 = 0b0010;	//Run
 8002b46:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <RunX_Axis+0x40>)
 8002b48:	2202      	movs	r2, #2
 8002b4a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	20000cb8 	.word	0x20000cb8

08002b60 <TraySetup>:
 */
#include "TrayLocalization.h"
#include "arm_math.h"
#include  "math.h"
void TraySetup(Tray* temp, float32_t x1, float32_t y1, float32_t x2, float32_t y2)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6178      	str	r0, [r7, #20]
 8002b68:	ed87 0a04 	vstr	s0, [r7, #16]
 8002b6c:	edc7 0a03 	vstr	s1, [r7, #12]
 8002b70:	ed87 1a02 	vstr	s2, [r7, #8]
 8002b74:	edc7 1a01 	vstr	s3, [r7, #4]
	temp->Edge1_X = x1;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	601a      	str	r2, [r3, #0]
	temp->Edge1_Y = y1;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	605a      	str	r2, [r3, #4]
	temp->Edge2_X = x2;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	609a      	str	r2, [r3, #8]
	temp->Edge2_Y = y2;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	60da      	str	r2, [r3, #12]

	float32_t Cal_OriginX = x2 * 10;
 8002b90:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b94:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b9c:	edc7 7a07 	vstr	s15, [r7, #28]
	float32_t Cal_OriginY = ( (y2*120.0/8192.0) - 350) * 10;
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7fd fc7d 	bl	80004a0 <__aeabi_f2d>
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	4b31      	ldr	r3, [pc, #196]	; (8002c70 <TraySetup+0x110>)
 8002bac:	f7fd fcd0 	bl	8000550 <__aeabi_dmul>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4610      	mov	r0, r2
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	4b2d      	ldr	r3, [pc, #180]	; (8002c74 <TraySetup+0x114>)
 8002bbe:	f7fd fdf1 	bl	80007a4 <__aeabi_ddiv>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	4619      	mov	r1, r3
 8002bca:	a327      	add	r3, pc, #156	; (adr r3, 8002c68 <TraySetup+0x108>)
 8002bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd0:	f7fd fb06 	bl	80001e0 <__aeabi_dsub>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	4b25      	ldr	r3, [pc, #148]	; (8002c78 <TraySetup+0x118>)
 8002be2:	f7fd fcb5 	bl	8000550 <__aeabi_dmul>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4610      	mov	r0, r2
 8002bec:	4619      	mov	r1, r3
 8002bee:	f7fd ffa7 	bl	8000b40 <__aeabi_d2f>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	61bb      	str	r3, [r7, #24]
	if(Cal_OriginX < 0){
 8002bf6:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bfa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c02:	d507      	bpl.n	8002c14 <TraySetup+0xb4>
		Cal_OriginX = 65536 + Cal_OriginX;
 8002c04:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c08:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002c7c <TraySetup+0x11c>
 8002c0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c10:	edc7 7a07 	vstr	s15, [r7, #28]
	}
	if(Cal_OriginY < 0){
 8002c14:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c20:	d507      	bpl.n	8002c32 <TraySetup+0xd2>
		Cal_OriginY = 65536 + Cal_OriginY;
 8002c22:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c26:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002c7c <TraySetup+0x11c>
 8002c2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c2e:	edc7 7a06 	vstr	s15, [r7, #24]
	}
	temp->ForBaseOriginX = Cal_OriginX ;
 8002c32:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c3a:	ee17 3a90 	vmov	r3, s15
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	821a      	strh	r2, [r3, #16]
	temp->ForBaseOriginY = Cal_OriginY - 100 ;
 8002c44:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c48:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002c80 <TraySetup+0x120>
 8002c4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c54:	ee17 3a90 	vmov	r3, s15
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	825a      	strh	r2, [r3, #18]
}
 8002c5e:	bf00      	nop
 8002c60:	3720      	adds	r7, #32
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	00000000 	.word	0x00000000
 8002c6c:	4075e000 	.word	0x4075e000
 8002c70:	405e0000 	.word	0x405e0000
 8002c74:	40c00000 	.word	0x40c00000
 8002c78:	40240000 	.word	0x40240000
 8002c7c:	47800000 	.word	0x47800000
 8002c80:	42c80000 	.word	0x42c80000
 8002c84:	00000000 	.word	0x00000000

08002c88 <TrayLocalization>:
void TrayLocalization(Tray* temp)
{
 8002c88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c8c:	b094      	sub	sp, #80	; 0x50
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
	float32_t RefX_case1[3] = {10.0,30.0,50.0};
 8002c92:	4a7d      	ldr	r2, [pc, #500]	; (8002e88 <TrayLocalization+0x200>)
 8002c94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c98:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float32_t RefY_case1[3] = {40*8192.0/120.0,25*8192.0/120.0,10*8192.0/120.0};
 8002c9e:	4a7b      	ldr	r2, [pc, #492]	; (8002e8c <TrayLocalization+0x204>)
 8002ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ca4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ca6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	float32_t RefX_case2[3] = {10.0,25.0,40.0};
 8002caa:	4a79      	ldr	r2, [pc, #484]	; (8002e90 <TrayLocalization+0x208>)
 8002cac:	f107 0318 	add.w	r3, r7, #24
 8002cb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float32_t RefY_case2[3] = {50*8192.0/120.0,30*8192.0/120.0,10*8192.0/120.0};
 8002cb6:	4a77      	ldr	r2, [pc, #476]	; (8002e94 <TrayLocalization+0x20c>)
 8002cb8:	f107 030c 	add.w	r3, r7, #12
 8002cbc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cbe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float32_t deltaX = (temp->Edge2_X - temp->Edge1_X)*8192.0/120.0;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	ed93 7a02 	vldr	s14, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	edd3 7a00 	vldr	s15, [r3]
 8002cce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cd2:	ee17 0a90 	vmov	r0, s15
 8002cd6:	f7fd fbe3 	bl	80004a0 <__aeabi_f2d>
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	4b6e      	ldr	r3, [pc, #440]	; (8002e98 <TrayLocalization+0x210>)
 8002ce0:	f7fd fc36 	bl	8000550 <__aeabi_dmul>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	4610      	mov	r0, r2
 8002cea:	4619      	mov	r1, r3
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	4b6a      	ldr	r3, [pc, #424]	; (8002e9c <TrayLocalization+0x214>)
 8002cf2:	f7fd fd57 	bl	80007a4 <__aeabi_ddiv>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	f7fd ff1f 	bl	8000b40 <__aeabi_d2f>
 8002d02:	4603      	mov	r3, r0
 8002d04:	647b      	str	r3, [r7, #68]	; 0x44
	float32_t deltaY = temp->Edge2_Y - temp->Edge1_Y;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	ed93 7a03 	vldr	s14, [r3, #12]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d16:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	float32_t lengh = sqrt(pow(deltaX,2) + pow(deltaY,2));
 8002d1a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002d1c:	f7fd fbc0 	bl	80004a0 <__aeabi_f2d>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8002e80 <TrayLocalization+0x1f8>
 8002d28:	ec43 2b10 	vmov	d0, r2, r3
 8002d2c:	f00a f970 	bl	800d010 <pow>
 8002d30:	ec55 4b10 	vmov	r4, r5, d0
 8002d34:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002d36:	f7fd fbb3 	bl	80004a0 <__aeabi_f2d>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	ed9f 1b50 	vldr	d1, [pc, #320]	; 8002e80 <TrayLocalization+0x1f8>
 8002d42:	ec43 2b10 	vmov	d0, r2, r3
 8002d46:	f00a f963 	bl	800d010 <pow>
 8002d4a:	ec53 2b10 	vmov	r2, r3, d0
 8002d4e:	4620      	mov	r0, r4
 8002d50:	4629      	mov	r1, r5
 8002d52:	f7fd fa47 	bl	80001e4 <__adddf3>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	ec43 2b17 	vmov	d7, r2, r3
 8002d5e:	eeb0 0a47 	vmov.f32	s0, s14
 8002d62:	eef0 0a67 	vmov.f32	s1, s15
 8002d66:	f00a f9c3 	bl	800d0f0 <sqrt>
 8002d6a:	ec53 2b10 	vmov	r2, r3, d0
 8002d6e:	4610      	mov	r0, r2
 8002d70:	4619      	mov	r1, r3
 8002d72:	f7fd fee5 	bl	8000b40 <__aeabi_d2f>
 8002d76:	4603      	mov	r3, r0
 8002d78:	63fb      	str	r3, [r7, #60]	; 0x3c

	if((3276 <= lengh)&&(lengh <= 3550))
 8002d7a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002d7e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002ea0 <TrayLocalization+0x218>
 8002d82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8a:	db0d      	blt.n	8002da8 <TrayLocalization+0x120>
 8002d8c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002d90:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002ea4 <TrayLocalization+0x21c>
 8002d94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9c:	d804      	bhi.n	8002da8 <TrayLocalization+0x120>
	{
		temp->Flag = 2; //swap case
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2202      	movs	r2, #2
 8002da2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8002da6:	e01a      	b.n	8002dde <TrayLocalization+0x156>
	}
	else if ((3960 <= lengh)&&(lengh <= 4233))
 8002da8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002dac:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002ea8 <TrayLocalization+0x220>
 8002db0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db8:	db0d      	blt.n	8002dd6 <TrayLocalization+0x14e>
 8002dba:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002dbe:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002eac <TrayLocalization+0x224>
 8002dc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dca:	d804      	bhi.n	8002dd6 <TrayLocalization+0x14e>
	{
		temp->Flag = 1;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8002dd4:	e003      	b.n	8002dde <TrayLocalization+0x156>
	}
	else
	{
		temp->Flag = 0;//Lenght Error!!
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	}
	float32_t theta;
	arm_atan2_f32(deltaY,deltaX,&theta);
 8002dde:	f107 0308 	add.w	r3, r7, #8
 8002de2:	4618      	mov	r0, r3
 8002de4:	edd7 0a11 	vldr	s1, [r7, #68]	; 0x44
 8002de8:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8002dec:	f002 fa44 	bl	8005278 <arm_atan2_f32>
	temp->angle = theta;
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	665a      	str	r2, [r3, #100]	; 0x64

	float32_t Cal_Orientation = -(theta * (180/PI) ) - 90;
 8002df6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002dfa:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002eb0 <TrayLocalization+0x228>
 8002dfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e02:	eef1 7a67 	vneg.f32	s15, s15
 8002e06:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002eb4 <TrayLocalization+0x22c>
 8002e0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e0e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	if(Cal_Orientation < 0){
 8002e12:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002e16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e1e:	d507      	bpl.n	8002e30 <TrayLocalization+0x1a8>
		Cal_Orientation = Cal_Orientation + 360;
 8002e20:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002e24:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002eb8 <TrayLocalization+0x230>
 8002e28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e2c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	}
	temp->ForBaseOrientation = Cal_Orientation * 100;
 8002e30:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002e34:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002ebc <TrayLocalization+0x234>
 8002e38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e40:	ee17 3a90 	vmov	r3, s15
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	829a      	strh	r2, [r3, #20]

	int8_t i;
	int8_t j;
	uint8_t ind = 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	switch(temp->Flag)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f993 3061 	ldrsb.w	r3, [r3, #97]	; 0x61
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	f000 8130 	beq.w	80030bc <TrayLocalization+0x434>
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	f300 8238 	bgt.w	80032d2 <TrayLocalization+0x64a>
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 8234 	beq.w	80032d0 <TrayLocalization+0x648>
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	f040 8232 	bne.w	80032d2 <TrayLocalization+0x64a>
	{
	case 1:
		for(i=0;i<3;i++)
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8002e74:	e11c      	b.n	80030b0 <TrayLocalization+0x428>
		{
			for(j=0;j<3;j++)
 8002e76:	2300      	movs	r3, #0
 8002e78:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8002e7c:	e10c      	b.n	8003098 <TrayLocalization+0x410>
 8002e7e:	bf00      	nop
 8002e80:	00000000 	.word	0x00000000
 8002e84:	40000000 	.word	0x40000000
 8002e88:	0800f5b4 	.word	0x0800f5b4
 8002e8c:	0800f5c0 	.word	0x0800f5c0
 8002e90:	0800f5cc 	.word	0x0800f5cc
 8002e94:	0800f5d8 	.word	0x0800f5d8
 8002e98:	40c00000 	.word	0x40c00000
 8002e9c:	405e0000 	.word	0x405e0000
 8002ea0:	454cc000 	.word	0x454cc000
 8002ea4:	455de000 	.word	0x455de000
 8002ea8:	45778000 	.word	0x45778000
 8002eac:	45844800 	.word	0x45844800
 8002eb0:	42652ee0 	.word	0x42652ee0
 8002eb4:	42b40000 	.word	0x42b40000
 8002eb8:	43b40000 	.word	0x43b40000
 8002ebc:	42c80000 	.word	0x42c80000
			{
				temp->Holes_X[ind] = temp->Edge1_X
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7fd faeb 	bl	80004a0 <__aeabi_f2d>
 8002eca:	4604      	mov	r4, r0
 8002ecc:	460d      	mov	r5, r1
								+ (cos(theta)*RefX_case1[i])
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fd fae5 	bl	80004a0 <__aeabi_f2d>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	ec43 2b10 	vmov	d0, r2, r3
 8002ede:	f009 ffeb 	bl	800ceb8 <cos>
 8002ee2:	ec59 8b10 	vmov	r8, r9, d0
 8002ee6:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	3350      	adds	r3, #80	; 0x50
 8002eee:	443b      	add	r3, r7
 8002ef0:	3b20      	subs	r3, #32
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fd fad3 	bl	80004a0 <__aeabi_f2d>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4640      	mov	r0, r8
 8002f00:	4649      	mov	r1, r9
 8002f02:	f7fd fb25 	bl	8000550 <__aeabi_dmul>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	4629      	mov	r1, r5
 8002f0e:	f7fd f969 	bl	80001e4 <__adddf3>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	4614      	mov	r4, r2
 8002f18:	461d      	mov	r5, r3
								- (sin(theta)*RefY_case1[j]*120.0/8192.0);
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fd fabf 	bl	80004a0 <__aeabi_f2d>
 8002f22:	4602      	mov	r2, r0
 8002f24:	460b      	mov	r3, r1
 8002f26:	ec43 2b10 	vmov	d0, r2, r3
 8002f2a:	f00a f819 	bl	800cf60 <sin>
 8002f2e:	ec59 8b10 	vmov	r8, r9, d0
 8002f32:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	3350      	adds	r3, #80	; 0x50
 8002f3a:	443b      	add	r3, r7
 8002f3c:	3b2c      	subs	r3, #44	; 0x2c
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fd faad 	bl	80004a0 <__aeabi_f2d>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4640      	mov	r0, r8
 8002f4c:	4649      	mov	r1, r9
 8002f4e:	f7fd faff 	bl	8000550 <__aeabi_dmul>
 8002f52:	4602      	mov	r2, r0
 8002f54:	460b      	mov	r3, r1
 8002f56:	4610      	mov	r0, r2
 8002f58:	4619      	mov	r1, r3
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	4bda      	ldr	r3, [pc, #872]	; (80032c8 <TrayLocalization+0x640>)
 8002f60:	f7fd faf6 	bl	8000550 <__aeabi_dmul>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4610      	mov	r0, r2
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	4bd6      	ldr	r3, [pc, #856]	; (80032cc <TrayLocalization+0x644>)
 8002f72:	f7fd fc17 	bl	80007a4 <__aeabi_ddiv>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4620      	mov	r0, r4
 8002f7c:	4629      	mov	r1, r5
 8002f7e:	f7fd f92f 	bl	80001e0 <__aeabi_dsub>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
				temp->Holes_X[ind] = temp->Edge1_X
 8002f86:	f897 4049 	ldrb.w	r4, [r7, #73]	; 0x49
								- (sin(theta)*RefY_case1[j]*120.0/8192.0);
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	f7fd fdd7 	bl	8000b40 <__aeabi_d2f>
 8002f92:	4601      	mov	r1, r0
				temp->Holes_X[ind] = temp->Edge1_X
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	1da3      	adds	r3, r4, #6
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	6019      	str	r1, [r3, #0]
				temp->Holes_Y[ind] = temp->Edge1_Y
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fd fa7c 	bl	80004a0 <__aeabi_f2d>
 8002fa8:	4604      	mov	r4, r0
 8002faa:	460d      	mov	r5, r1
								+ (cos(theta)*RefY_case1[j])
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fd fa76 	bl	80004a0 <__aeabi_f2d>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	ec43 2b10 	vmov	d0, r2, r3
 8002fbc:	f009 ff7c 	bl	800ceb8 <cos>
 8002fc0:	ec59 8b10 	vmov	r8, r9, d0
 8002fc4:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	3350      	adds	r3, #80	; 0x50
 8002fcc:	443b      	add	r3, r7
 8002fce:	3b2c      	subs	r3, #44	; 0x2c
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fd fa64 	bl	80004a0 <__aeabi_f2d>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4640      	mov	r0, r8
 8002fde:	4649      	mov	r1, r9
 8002fe0:	f7fd fab6 	bl	8000550 <__aeabi_dmul>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4620      	mov	r0, r4
 8002fea:	4629      	mov	r1, r5
 8002fec:	f7fd f8fa 	bl	80001e4 <__adddf3>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4614      	mov	r4, r2
 8002ff6:	461d      	mov	r5, r3
								+ (sin(theta)*RefX_case1[i]*8192.0/120.0);
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fd fa50 	bl	80004a0 <__aeabi_f2d>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	ec43 2b10 	vmov	d0, r2, r3
 8003008:	f009 ffaa 	bl	800cf60 <sin>
 800300c:	ec59 8b10 	vmov	r8, r9, d0
 8003010:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	3350      	adds	r3, #80	; 0x50
 8003018:	443b      	add	r3, r7
 800301a:	3b20      	subs	r3, #32
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f7fd fa3e 	bl	80004a0 <__aeabi_f2d>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4640      	mov	r0, r8
 800302a:	4649      	mov	r1, r9
 800302c:	f7fd fa90 	bl	8000550 <__aeabi_dmul>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4610      	mov	r0, r2
 8003036:	4619      	mov	r1, r3
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	4ba3      	ldr	r3, [pc, #652]	; (80032cc <TrayLocalization+0x644>)
 800303e:	f7fd fa87 	bl	8000550 <__aeabi_dmul>
 8003042:	4602      	mov	r2, r0
 8003044:	460b      	mov	r3, r1
 8003046:	4610      	mov	r0, r2
 8003048:	4619      	mov	r1, r3
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	4b9e      	ldr	r3, [pc, #632]	; (80032c8 <TrayLocalization+0x640>)
 8003050:	f7fd fba8 	bl	80007a4 <__aeabi_ddiv>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4620      	mov	r0, r4
 800305a:	4629      	mov	r1, r5
 800305c:	f7fd f8c2 	bl	80001e4 <__adddf3>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
				temp->Holes_Y[ind] = temp->Edge1_Y
 8003064:	f897 4049 	ldrb.w	r4, [r7, #73]	; 0x49
								+ (sin(theta)*RefX_case1[i]*8192.0/120.0);
 8003068:	4610      	mov	r0, r2
 800306a:	4619      	mov	r1, r3
 800306c:	f7fd fd68 	bl	8000b40 <__aeabi_d2f>
 8003070:	4601      	mov	r1, r0
				temp->Holes_Y[ind] = temp->Edge1_Y
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	f104 030e 	add.w	r3, r4, #14
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	3304      	adds	r3, #4
 800307e:	6019      	str	r1, [r3, #0]
				ind += 1;
 8003080:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003084:	3301      	adds	r3, #1
 8003086:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
			for(j=0;j<3;j++)
 800308a:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 800308e:	b2db      	uxtb	r3, r3
 8003090:	3301      	adds	r3, #1
 8003092:	b2db      	uxtb	r3, r3
 8003094:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8003098:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 800309c:	2b02      	cmp	r3, #2
 800309e:	f77f af0f 	ble.w	8002ec0 <TrayLocalization+0x238>
		for(i=0;i<3;i++)
 80030a2:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	3301      	adds	r3, #1
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80030b0:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	f77f aede 	ble.w	8002e76 <TrayLocalization+0x1ee>
			}
		}
		break;
 80030ba:	e10a      	b.n	80032d2 <TrayLocalization+0x64a>
	case 2:
		for(i=0;i<3;i++)
 80030bc:	2300      	movs	r3, #0
 80030be:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80030c2:	e0fb      	b.n	80032bc <TrayLocalization+0x634>
		{
			for(j=0;j<3;j++)
 80030c4:	2300      	movs	r3, #0
 80030c6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80030ca:	e0eb      	b.n	80032a4 <TrayLocalization+0x61c>
			{
				temp->Holes_X[ind] = temp->Edge1_X
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fd f9e5 	bl	80004a0 <__aeabi_f2d>
 80030d6:	4604      	mov	r4, r0
 80030d8:	460d      	mov	r5, r1
								+ (cos(theta)*RefX_case2[i])
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7fd f9df 	bl	80004a0 <__aeabi_f2d>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	ec43 2b10 	vmov	d0, r2, r3
 80030ea:	f009 fee5 	bl	800ceb8 <cos>
 80030ee:	ec59 8b10 	vmov	r8, r9, d0
 80030f2:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	3350      	adds	r3, #80	; 0x50
 80030fa:	443b      	add	r3, r7
 80030fc:	3b38      	subs	r3, #56	; 0x38
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f7fd f9cd 	bl	80004a0 <__aeabi_f2d>
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	4640      	mov	r0, r8
 800310c:	4649      	mov	r1, r9
 800310e:	f7fd fa1f 	bl	8000550 <__aeabi_dmul>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4620      	mov	r0, r4
 8003118:	4629      	mov	r1, r5
 800311a:	f7fd f863 	bl	80001e4 <__adddf3>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	4614      	mov	r4, r2
 8003124:	461d      	mov	r5, r3
								- (sin(theta)*RefY_case2[j]*120.0/8192.0);
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	4618      	mov	r0, r3
 800312a:	f7fd f9b9 	bl	80004a0 <__aeabi_f2d>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	ec43 2b10 	vmov	d0, r2, r3
 8003136:	f009 ff13 	bl	800cf60 <sin>
 800313a:	ec59 8b10 	vmov	r8, r9, d0
 800313e:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	3350      	adds	r3, #80	; 0x50
 8003146:	443b      	add	r3, r7
 8003148:	3b44      	subs	r3, #68	; 0x44
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f7fd f9a7 	bl	80004a0 <__aeabi_f2d>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	4640      	mov	r0, r8
 8003158:	4649      	mov	r1, r9
 800315a:	f7fd f9f9 	bl	8000550 <__aeabi_dmul>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	4610      	mov	r0, r2
 8003164:	4619      	mov	r1, r3
 8003166:	f04f 0200 	mov.w	r2, #0
 800316a:	4b57      	ldr	r3, [pc, #348]	; (80032c8 <TrayLocalization+0x640>)
 800316c:	f7fd f9f0 	bl	8000550 <__aeabi_dmul>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4610      	mov	r0, r2
 8003176:	4619      	mov	r1, r3
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	4b53      	ldr	r3, [pc, #332]	; (80032cc <TrayLocalization+0x644>)
 800317e:	f7fd fb11 	bl	80007a4 <__aeabi_ddiv>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	4620      	mov	r0, r4
 8003188:	4629      	mov	r1, r5
 800318a:	f7fd f829 	bl	80001e0 <__aeabi_dsub>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
				temp->Holes_X[ind] = temp->Edge1_X
 8003192:	f897 4049 	ldrb.w	r4, [r7, #73]	; 0x49
								- (sin(theta)*RefY_case2[j]*120.0/8192.0);
 8003196:	4610      	mov	r0, r2
 8003198:	4619      	mov	r1, r3
 800319a:	f7fd fcd1 	bl	8000b40 <__aeabi_d2f>
 800319e:	4601      	mov	r1, r0
				temp->Holes_X[ind] = temp->Edge1_X
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	1da3      	adds	r3, r4, #6
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	6019      	str	r1, [r3, #0]
				temp->Holes_Y[ind] = temp->Edge1_Y
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fd f976 	bl	80004a0 <__aeabi_f2d>
 80031b4:	4604      	mov	r4, r0
 80031b6:	460d      	mov	r5, r1
								+ (cos(theta)*RefY_case2[j])
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fd f970 	bl	80004a0 <__aeabi_f2d>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	ec43 2b10 	vmov	d0, r2, r3
 80031c8:	f009 fe76 	bl	800ceb8 <cos>
 80031cc:	ec59 8b10 	vmov	r8, r9, d0
 80031d0:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	3350      	adds	r3, #80	; 0x50
 80031d8:	443b      	add	r3, r7
 80031da:	3b44      	subs	r3, #68	; 0x44
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fd f95e 	bl	80004a0 <__aeabi_f2d>
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	4640      	mov	r0, r8
 80031ea:	4649      	mov	r1, r9
 80031ec:	f7fd f9b0 	bl	8000550 <__aeabi_dmul>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4620      	mov	r0, r4
 80031f6:	4629      	mov	r1, r5
 80031f8:	f7fc fff4 	bl	80001e4 <__adddf3>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4614      	mov	r4, r2
 8003202:	461d      	mov	r5, r3
								+ (sin(theta)*RefX_case2[i]*8192.0/120.0);
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	4618      	mov	r0, r3
 8003208:	f7fd f94a 	bl	80004a0 <__aeabi_f2d>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	ec43 2b10 	vmov	d0, r2, r3
 8003214:	f009 fea4 	bl	800cf60 <sin>
 8003218:	ec59 8b10 	vmov	r8, r9, d0
 800321c:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	3350      	adds	r3, #80	; 0x50
 8003224:	443b      	add	r3, r7
 8003226:	3b38      	subs	r3, #56	; 0x38
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f7fd f938 	bl	80004a0 <__aeabi_f2d>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4640      	mov	r0, r8
 8003236:	4649      	mov	r1, r9
 8003238:	f7fd f98a 	bl	8000550 <__aeabi_dmul>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4610      	mov	r0, r2
 8003242:	4619      	mov	r1, r3
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	4b20      	ldr	r3, [pc, #128]	; (80032cc <TrayLocalization+0x644>)
 800324a:	f7fd f981 	bl	8000550 <__aeabi_dmul>
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	4610      	mov	r0, r2
 8003254:	4619      	mov	r1, r3
 8003256:	f04f 0200 	mov.w	r2, #0
 800325a:	4b1b      	ldr	r3, [pc, #108]	; (80032c8 <TrayLocalization+0x640>)
 800325c:	f7fd faa2 	bl	80007a4 <__aeabi_ddiv>
 8003260:	4602      	mov	r2, r0
 8003262:	460b      	mov	r3, r1
 8003264:	4620      	mov	r0, r4
 8003266:	4629      	mov	r1, r5
 8003268:	f7fc ffbc 	bl	80001e4 <__adddf3>
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
				temp->Holes_Y[ind] = temp->Edge1_Y
 8003270:	f897 4049 	ldrb.w	r4, [r7, #73]	; 0x49
								+ (sin(theta)*RefX_case2[i]*8192.0/120.0);
 8003274:	4610      	mov	r0, r2
 8003276:	4619      	mov	r1, r3
 8003278:	f7fd fc62 	bl	8000b40 <__aeabi_d2f>
 800327c:	4601      	mov	r1, r0
				temp->Holes_Y[ind] = temp->Edge1_Y
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	f104 030e 	add.w	r3, r4, #14
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	3304      	adds	r3, #4
 800328a:	6019      	str	r1, [r3, #0]
				ind += 1;
 800328c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003290:	3301      	adds	r3, #1
 8003292:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
			for(j=0;j<3;j++)
 8003296:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 800329a:	b2db      	uxtb	r3, r3
 800329c:	3301      	adds	r3, #1
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80032a4:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	f77f af0f 	ble.w	80030cc <TrayLocalization+0x444>
		for(i=0;i<3;i++)
 80032ae:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	3301      	adds	r3, #1
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80032bc:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	f77f aeff 	ble.w	80030c4 <TrayLocalization+0x43c>
			}
		}
		break;
 80032c6:	e004      	b.n	80032d2 <TrayLocalization+0x64a>
 80032c8:	405e0000 	.word	0x405e0000
 80032cc:	40c00000 	.word	0x40c00000
	case 0:
		break;
 80032d0:	bf00      	nop
	}
}
 80032d2:	bf00      	nop
 80032d4:	3750      	adds	r7, #80	; 0x50
 80032d6:	46bd      	mov	sp, r7
 80032d8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080032dc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80032e2:	463b      	mov	r3, r7
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	605a      	str	r2, [r3, #4]
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80032ee:	4b28      	ldr	r3, [pc, #160]	; (8003390 <MX_ADC1_Init+0xb4>)
 80032f0:	4a28      	ldr	r2, [pc, #160]	; (8003394 <MX_ADC1_Init+0xb8>)
 80032f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80032f4:	4b26      	ldr	r3, [pc, #152]	; (8003390 <MX_ADC1_Init+0xb4>)
 80032f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80032fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80032fc:	4b24      	ldr	r3, [pc, #144]	; (8003390 <MX_ADC1_Init+0xb4>)
 80032fe:	2200      	movs	r2, #0
 8003300:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003302:	4b23      	ldr	r3, [pc, #140]	; (8003390 <MX_ADC1_Init+0xb4>)
 8003304:	2201      	movs	r2, #1
 8003306:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003308:	4b21      	ldr	r3, [pc, #132]	; (8003390 <MX_ADC1_Init+0xb4>)
 800330a:	2201      	movs	r2, #1
 800330c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800330e:	4b20      	ldr	r3, [pc, #128]	; (8003390 <MX_ADC1_Init+0xb4>)
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003316:	4b1e      	ldr	r3, [pc, #120]	; (8003390 <MX_ADC1_Init+0xb4>)
 8003318:	2200      	movs	r2, #0
 800331a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800331c:	4b1c      	ldr	r3, [pc, #112]	; (8003390 <MX_ADC1_Init+0xb4>)
 800331e:	4a1e      	ldr	r2, [pc, #120]	; (8003398 <MX_ADC1_Init+0xbc>)
 8003320:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003322:	4b1b      	ldr	r3, [pc, #108]	; (8003390 <MX_ADC1_Init+0xb4>)
 8003324:	2200      	movs	r2, #0
 8003326:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8003328:	4b19      	ldr	r3, [pc, #100]	; (8003390 <MX_ADC1_Init+0xb4>)
 800332a:	2202      	movs	r2, #2
 800332c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800332e:	4b18      	ldr	r3, [pc, #96]	; (8003390 <MX_ADC1_Init+0xb4>)
 8003330:	2201      	movs	r2, #1
 8003332:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003336:	4b16      	ldr	r3, [pc, #88]	; (8003390 <MX_ADC1_Init+0xb4>)
 8003338:	2201      	movs	r2, #1
 800333a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800333c:	4814      	ldr	r0, [pc, #80]	; (8003390 <MX_ADC1_Init+0xb4>)
 800333e:	f002 ff29 	bl	8006194 <HAL_ADC_Init>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003348:	f001 fb26 	bl	8004998 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800334c:	230a      	movs	r3, #10
 800334e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003350:	2301      	movs	r3, #1
 8003352:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8003354:	2306      	movs	r3, #6
 8003356:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003358:	463b      	mov	r3, r7
 800335a:	4619      	mov	r1, r3
 800335c:	480c      	ldr	r0, [pc, #48]	; (8003390 <MX_ADC1_Init+0xb4>)
 800335e:	f003 f86b 	bl	8006438 <HAL_ADC_ConfigChannel>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003368:	f001 fb16 	bl	8004998 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800336c:	230b      	movs	r3, #11
 800336e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003370:	2302      	movs	r3, #2
 8003372:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003374:	463b      	mov	r3, r7
 8003376:	4619      	mov	r1, r3
 8003378:	4805      	ldr	r0, [pc, #20]	; (8003390 <MX_ADC1_Init+0xb4>)
 800337a:	f003 f85d 	bl	8006438 <HAL_ADC_ConfigChannel>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003384:	f001 fb08 	bl	8004998 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003388:	bf00      	nop
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	20000310 	.word	0x20000310
 8003394:	40012000 	.word	0x40012000
 8003398:	0f000001 	.word	0x0f000001

0800339c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08a      	sub	sp, #40	; 0x28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a4:	f107 0314 	add.w	r3, r7, #20
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	605a      	str	r2, [r3, #4]
 80033ae:	609a      	str	r2, [r3, #8]
 80033b0:	60da      	str	r2, [r3, #12]
 80033b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a2f      	ldr	r2, [pc, #188]	; (8003478 <HAL_ADC_MspInit+0xdc>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d157      	bne.n	800346e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	613b      	str	r3, [r7, #16]
 80033c2:	4b2e      	ldr	r3, [pc, #184]	; (800347c <HAL_ADC_MspInit+0xe0>)
 80033c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c6:	4a2d      	ldr	r2, [pc, #180]	; (800347c <HAL_ADC_MspInit+0xe0>)
 80033c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033cc:	6453      	str	r3, [r2, #68]	; 0x44
 80033ce:	4b2b      	ldr	r3, [pc, #172]	; (800347c <HAL_ADC_MspInit+0xe0>)
 80033d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d6:	613b      	str	r3, [r7, #16]
 80033d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	4b27      	ldr	r3, [pc, #156]	; (800347c <HAL_ADC_MspInit+0xe0>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	4a26      	ldr	r2, [pc, #152]	; (800347c <HAL_ADC_MspInit+0xe0>)
 80033e4:	f043 0304 	orr.w	r3, r3, #4
 80033e8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ea:	4b24      	ldr	r3, [pc, #144]	; (800347c <HAL_ADC_MspInit+0xe0>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80033f6:	2303      	movs	r3, #3
 80033f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033fa:	2303      	movs	r3, #3
 80033fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003402:	f107 0314 	add.w	r3, r7, #20
 8003406:	4619      	mov	r1, r3
 8003408:	481d      	ldr	r0, [pc, #116]	; (8003480 <HAL_ADC_MspInit+0xe4>)
 800340a:	f003 fff3 	bl	80073f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800340e:	4b1d      	ldr	r3, [pc, #116]	; (8003484 <HAL_ADC_MspInit+0xe8>)
 8003410:	4a1d      	ldr	r2, [pc, #116]	; (8003488 <HAL_ADC_MspInit+0xec>)
 8003412:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003414:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <HAL_ADC_MspInit+0xe8>)
 8003416:	2200      	movs	r2, #0
 8003418:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800341a:	4b1a      	ldr	r3, [pc, #104]	; (8003484 <HAL_ADC_MspInit+0xe8>)
 800341c:	2200      	movs	r2, #0
 800341e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003420:	4b18      	ldr	r3, [pc, #96]	; (8003484 <HAL_ADC_MspInit+0xe8>)
 8003422:	2200      	movs	r2, #0
 8003424:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003426:	4b17      	ldr	r3, [pc, #92]	; (8003484 <HAL_ADC_MspInit+0xe8>)
 8003428:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800342c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800342e:	4b15      	ldr	r3, [pc, #84]	; (8003484 <HAL_ADC_MspInit+0xe8>)
 8003430:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003434:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003436:	4b13      	ldr	r3, [pc, #76]	; (8003484 <HAL_ADC_MspInit+0xe8>)
 8003438:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800343c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800343e:	4b11      	ldr	r3, [pc, #68]	; (8003484 <HAL_ADC_MspInit+0xe8>)
 8003440:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003444:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003446:	4b0f      	ldr	r3, [pc, #60]	; (8003484 <HAL_ADC_MspInit+0xe8>)
 8003448:	2200      	movs	r2, #0
 800344a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800344c:	4b0d      	ldr	r3, [pc, #52]	; (8003484 <HAL_ADC_MspInit+0xe8>)
 800344e:	2200      	movs	r2, #0
 8003450:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003452:	480c      	ldr	r0, [pc, #48]	; (8003484 <HAL_ADC_MspInit+0xe8>)
 8003454:	f003 fbb2 	bl	8006bbc <HAL_DMA_Init>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800345e:	f001 fa9b 	bl	8004998 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a07      	ldr	r2, [pc, #28]	; (8003484 <HAL_ADC_MspInit+0xe8>)
 8003466:	639a      	str	r2, [r3, #56]	; 0x38
 8003468:	4a06      	ldr	r2, [pc, #24]	; (8003484 <HAL_ADC_MspInit+0xe8>)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800346e:	bf00      	nop
 8003470:	3728      	adds	r7, #40	; 0x28
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40012000 	.word	0x40012000
 800347c:	40023800 	.word	0x40023800
 8003480:	40020800 	.word	0x40020800
 8003484:	20000358 	.word	0x20000358
 8003488:	40026410 	.word	0x40026410

0800348c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003492:	2300      	movs	r3, #0
 8003494:	607b      	str	r3, [r7, #4]
 8003496:	4b17      	ldr	r3, [pc, #92]	; (80034f4 <MX_DMA_Init+0x68>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	4a16      	ldr	r2, [pc, #88]	; (80034f4 <MX_DMA_Init+0x68>)
 800349c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034a0:	6313      	str	r3, [r2, #48]	; 0x30
 80034a2:	4b14      	ldr	r3, [pc, #80]	; (80034f4 <MX_DMA_Init+0x68>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034aa:	607b      	str	r3, [r7, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80034ae:	2300      	movs	r3, #0
 80034b0:	603b      	str	r3, [r7, #0]
 80034b2:	4b10      	ldr	r3, [pc, #64]	; (80034f4 <MX_DMA_Init+0x68>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	4a0f      	ldr	r2, [pc, #60]	; (80034f4 <MX_DMA_Init+0x68>)
 80034b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034bc:	6313      	str	r3, [r2, #48]	; 0x30
 80034be:	4b0d      	ldr	r3, [pc, #52]	; (80034f4 <MX_DMA_Init+0x68>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c6:	603b      	str	r3, [r7, #0]
 80034c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80034ca:	2200      	movs	r2, #0
 80034cc:	2100      	movs	r1, #0
 80034ce:	2011      	movs	r0, #17
 80034d0:	f003 fb3d 	bl	8006b4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80034d4:	2011      	movs	r0, #17
 80034d6:	f003 fb56 	bl	8006b86 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80034da:	2200      	movs	r2, #0
 80034dc:	2100      	movs	r1, #0
 80034de:	2038      	movs	r0, #56	; 0x38
 80034e0:	f003 fb35 	bl	8006b4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80034e4:	2038      	movs	r0, #56	; 0x38
 80034e6:	f003 fb4e 	bl	8006b86 <HAL_NVIC_EnableIRQ>

}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40023800 	.word	0x40023800

080034f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08a      	sub	sp, #40	; 0x28
 80034fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034fe:	f107 0314 	add.w	r3, r7, #20
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	605a      	str	r2, [r3, #4]
 8003508:	609a      	str	r2, [r3, #8]
 800350a:	60da      	str	r2, [r3, #12]
 800350c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800350e:	2300      	movs	r3, #0
 8003510:	613b      	str	r3, [r7, #16]
 8003512:	4b7a      	ldr	r3, [pc, #488]	; (80036fc <MX_GPIO_Init+0x204>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	4a79      	ldr	r2, [pc, #484]	; (80036fc <MX_GPIO_Init+0x204>)
 8003518:	f043 0304 	orr.w	r3, r3, #4
 800351c:	6313      	str	r3, [r2, #48]	; 0x30
 800351e:	4b77      	ldr	r3, [pc, #476]	; (80036fc <MX_GPIO_Init+0x204>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	f003 0304 	and.w	r3, r3, #4
 8003526:	613b      	str	r3, [r7, #16]
 8003528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800352a:	2300      	movs	r3, #0
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	4b73      	ldr	r3, [pc, #460]	; (80036fc <MX_GPIO_Init+0x204>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	4a72      	ldr	r2, [pc, #456]	; (80036fc <MX_GPIO_Init+0x204>)
 8003534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003538:	6313      	str	r3, [r2, #48]	; 0x30
 800353a:	4b70      	ldr	r3, [pc, #448]	; (80036fc <MX_GPIO_Init+0x204>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003546:	2300      	movs	r3, #0
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	4b6c      	ldr	r3, [pc, #432]	; (80036fc <MX_GPIO_Init+0x204>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	4a6b      	ldr	r2, [pc, #428]	; (80036fc <MX_GPIO_Init+0x204>)
 8003550:	f043 0301 	orr.w	r3, r3, #1
 8003554:	6313      	str	r3, [r2, #48]	; 0x30
 8003556:	4b69      	ldr	r3, [pc, #420]	; (80036fc <MX_GPIO_Init+0x204>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	60bb      	str	r3, [r7, #8]
 8003560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	607b      	str	r3, [r7, #4]
 8003566:	4b65      	ldr	r3, [pc, #404]	; (80036fc <MX_GPIO_Init+0x204>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	4a64      	ldr	r2, [pc, #400]	; (80036fc <MX_GPIO_Init+0x204>)
 800356c:	f043 0302 	orr.w	r3, r3, #2
 8003570:	6313      	str	r3, [r2, #48]	; 0x30
 8003572:	4b62      	ldr	r3, [pc, #392]	; (80036fc <MX_GPIO_Init+0x204>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	607b      	str	r3, [r7, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800357e:	2300      	movs	r3, #0
 8003580:	603b      	str	r3, [r7, #0]
 8003582:	4b5e      	ldr	r3, [pc, #376]	; (80036fc <MX_GPIO_Init+0x204>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	4a5d      	ldr	r2, [pc, #372]	; (80036fc <MX_GPIO_Init+0x204>)
 8003588:	f043 0308 	orr.w	r3, r3, #8
 800358c:	6313      	str	r3, [r2, #48]	; 0x30
 800358e:	4b5b      	ldr	r3, [pc, #364]	; (80036fc <MX_GPIO_Init+0x204>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	f003 0308 	and.w	r3, r3, #8
 8003596:	603b      	str	r3, [r7, #0]
 8003598:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800359a:	2200      	movs	r2, #0
 800359c:	2120      	movs	r1, #32
 800359e:	4858      	ldr	r0, [pc, #352]	; (8003700 <MX_GPIO_Init+0x208>)
 80035a0:	f004 f8c4 	bl	800772c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80035a4:	2200      	movs	r2, #0
 80035a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80035aa:	4856      	ldr	r0, [pc, #344]	; (8003704 <MX_GPIO_Init+0x20c>)
 80035ac:	f004 f8be 	bl	800772c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80035b0:	2200      	movs	r2, #0
 80035b2:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
 80035b6:	4854      	ldr	r0, [pc, #336]	; (8003708 <MX_GPIO_Init+0x210>)
 80035b8:	f004 f8b8 	bl	800772c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80035bc:	2200      	movs	r2, #0
 80035be:	2104      	movs	r1, #4
 80035c0:	4852      	ldr	r0, [pc, #328]	; (800370c <MX_GPIO_Init+0x214>)
 80035c2:	f004 f8b3 	bl	800772c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80035c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80035cc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80035d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80035d6:	f107 0314 	add.w	r3, r7, #20
 80035da:	4619      	mov	r1, r3
 80035dc:	484a      	ldr	r0, [pc, #296]	; (8003708 <MX_GPIO_Init+0x210>)
 80035de:	f003 ff09 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80035e2:	2304      	movs	r3, #4
 80035e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035e6:	2300      	movs	r3, #0
 80035e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035ee:	f107 0314 	add.w	r3, r7, #20
 80035f2:	4619      	mov	r1, r3
 80035f4:	4844      	ldr	r0, [pc, #272]	; (8003708 <MX_GPIO_Init+0x210>)
 80035f6:	f003 fefd 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80035fa:	2310      	movs	r3, #16
 80035fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035fe:	2300      	movs	r3, #0
 8003600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003602:	2300      	movs	r3, #0
 8003604:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003606:	f107 0314 	add.w	r3, r7, #20
 800360a:	4619      	mov	r1, r3
 800360c:	483c      	ldr	r0, [pc, #240]	; (8003700 <MX_GPIO_Init+0x208>)
 800360e:	f003 fef1 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003612:	2320      	movs	r3, #32
 8003614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003616:	2301      	movs	r3, #1
 8003618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361a:	2300      	movs	r3, #0
 800361c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800361e:	2300      	movs	r3, #0
 8003620:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003622:	f107 0314 	add.w	r3, r7, #20
 8003626:	4619      	mov	r1, r3
 8003628:	4835      	ldr	r0, [pc, #212]	; (8003700 <MX_GPIO_Init+0x208>)
 800362a:	f003 fee3 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800362e:	2301      	movs	r3, #1
 8003630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003632:	2300      	movs	r3, #0
 8003634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003636:	2300      	movs	r3, #0
 8003638:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800363a:	f107 0314 	add.w	r3, r7, #20
 800363e:	4619      	mov	r1, r3
 8003640:	4830      	ldr	r0, [pc, #192]	; (8003704 <MX_GPIO_Init+0x20c>)
 8003642:	f003 fed7 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003646:	2304      	movs	r3, #4
 8003648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800364a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800364e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003650:	2300      	movs	r3, #0
 8003652:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003654:	f107 0314 	add.w	r3, r7, #20
 8003658:	4619      	mov	r1, r3
 800365a:	482a      	ldr	r0, [pc, #168]	; (8003704 <MX_GPIO_Init+0x20c>)
 800365c:	f003 feca 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003660:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003666:	2301      	movs	r3, #1
 8003668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366a:	2300      	movs	r3, #0
 800366c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800366e:	2300      	movs	r3, #0
 8003670:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003672:	f107 0314 	add.w	r3, r7, #20
 8003676:	4619      	mov	r1, r3
 8003678:	4822      	ldr	r0, [pc, #136]	; (8003704 <MX_GPIO_Init+0x20c>)
 800367a:	f003 febb 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800367e:	f44f 53e2 	mov.w	r3, #7232	; 0x1c40
 8003682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003684:	2301      	movs	r3, #1
 8003686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003688:	2300      	movs	r3, #0
 800368a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800368c:	2300      	movs	r3, #0
 800368e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003690:	f107 0314 	add.w	r3, r7, #20
 8003694:	4619      	mov	r1, r3
 8003696:	481c      	ldr	r0, [pc, #112]	; (8003708 <MX_GPIO_Init+0x210>)
 8003698:	f003 feac 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800369c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80036a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80036a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80036a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ac:	f107 0314 	add.w	r3, r7, #20
 80036b0:	4619      	mov	r1, r3
 80036b2:	4813      	ldr	r0, [pc, #76]	; (8003700 <MX_GPIO_Init+0x208>)
 80036b4:	f003 fe9e 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80036b8:	2304      	movs	r3, #4
 80036ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036bc:	2301      	movs	r3, #1
 80036be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c0:	2300      	movs	r3, #0
 80036c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c4:	2300      	movs	r3, #0
 80036c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036c8:	f107 0314 	add.w	r3, r7, #20
 80036cc:	4619      	mov	r1, r3
 80036ce:	480f      	ldr	r0, [pc, #60]	; (800370c <MX_GPIO_Init+0x214>)
 80036d0:	f003 fe90 	bl	80073f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80036d4:	2200      	movs	r2, #0
 80036d6:	2100      	movs	r1, #0
 80036d8:	2008      	movs	r0, #8
 80036da:	f003 fa38 	bl	8006b4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80036de:	2008      	movs	r0, #8
 80036e0:	f003 fa51 	bl	8006b86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80036e4:	2200      	movs	r2, #0
 80036e6:	2100      	movs	r1, #0
 80036e8:	2028      	movs	r0, #40	; 0x28
 80036ea:	f003 fa30 	bl	8006b4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80036ee:	2028      	movs	r0, #40	; 0x28
 80036f0:	f003 fa49 	bl	8006b86 <HAL_NVIC_EnableIRQ>

}
 80036f4:	bf00      	nop
 80036f6:	3728      	adds	r7, #40	; 0x28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40023800 	.word	0x40023800
 8003700:	40020000 	.word	0x40020000
 8003704:	40020400 	.word	0x40020400
 8003708:	40020800 	.word	0x40020800
 800370c:	40020c00 	.word	0x40020c00

08003710 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003714:	4b12      	ldr	r3, [pc, #72]	; (8003760 <MX_I2C1_Init+0x50>)
 8003716:	4a13      	ldr	r2, [pc, #76]	; (8003764 <MX_I2C1_Init+0x54>)
 8003718:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800371a:	4b11      	ldr	r3, [pc, #68]	; (8003760 <MX_I2C1_Init+0x50>)
 800371c:	4a12      	ldr	r2, [pc, #72]	; (8003768 <MX_I2C1_Init+0x58>)
 800371e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003720:	4b0f      	ldr	r3, [pc, #60]	; (8003760 <MX_I2C1_Init+0x50>)
 8003722:	2200      	movs	r2, #0
 8003724:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003726:	4b0e      	ldr	r3, [pc, #56]	; (8003760 <MX_I2C1_Init+0x50>)
 8003728:	2200      	movs	r2, #0
 800372a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800372c:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <MX_I2C1_Init+0x50>)
 800372e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003732:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003734:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <MX_I2C1_Init+0x50>)
 8003736:	2200      	movs	r2, #0
 8003738:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800373a:	4b09      	ldr	r3, [pc, #36]	; (8003760 <MX_I2C1_Init+0x50>)
 800373c:	2200      	movs	r2, #0
 800373e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003740:	4b07      	ldr	r3, [pc, #28]	; (8003760 <MX_I2C1_Init+0x50>)
 8003742:	2200      	movs	r2, #0
 8003744:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003746:	4b06      	ldr	r3, [pc, #24]	; (8003760 <MX_I2C1_Init+0x50>)
 8003748:	2200      	movs	r2, #0
 800374a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800374c:	4804      	ldr	r0, [pc, #16]	; (8003760 <MX_I2C1_Init+0x50>)
 800374e:	f004 f81f 	bl	8007790 <HAL_I2C_Init>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003758:	f001 f91e 	bl	8004998 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800375c:	bf00      	nop
 800375e:	bd80      	pop	{r7, pc}
 8003760:	200003b8 	.word	0x200003b8
 8003764:	40005400 	.word	0x40005400
 8003768:	000186a0 	.word	0x000186a0

0800376c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b08a      	sub	sp, #40	; 0x28
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003774:	f107 0314 	add.w	r3, r7, #20
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	605a      	str	r2, [r3, #4]
 800377e:	609a      	str	r2, [r3, #8]
 8003780:	60da      	str	r2, [r3, #12]
 8003782:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a21      	ldr	r2, [pc, #132]	; (8003810 <HAL_I2C_MspInit+0xa4>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d13c      	bne.n	8003808 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800378e:	2300      	movs	r3, #0
 8003790:	613b      	str	r3, [r7, #16]
 8003792:	4b20      	ldr	r3, [pc, #128]	; (8003814 <HAL_I2C_MspInit+0xa8>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	4a1f      	ldr	r2, [pc, #124]	; (8003814 <HAL_I2C_MspInit+0xa8>)
 8003798:	f043 0302 	orr.w	r3, r3, #2
 800379c:	6313      	str	r3, [r2, #48]	; 0x30
 800379e:	4b1d      	ldr	r3, [pc, #116]	; (8003814 <HAL_I2C_MspInit+0xa8>)
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	613b      	str	r3, [r7, #16]
 80037a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80037aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80037ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037b0:	2312      	movs	r3, #18
 80037b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b4:	2300      	movs	r3, #0
 80037b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037b8:	2303      	movs	r3, #3
 80037ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80037bc:	2304      	movs	r3, #4
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037c0:	f107 0314 	add.w	r3, r7, #20
 80037c4:	4619      	mov	r1, r3
 80037c6:	4814      	ldr	r0, [pc, #80]	; (8003818 <HAL_I2C_MspInit+0xac>)
 80037c8:	f003 fe14 	bl	80073f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80037cc:	2300      	movs	r3, #0
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	4b10      	ldr	r3, [pc, #64]	; (8003814 <HAL_I2C_MspInit+0xa8>)
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	4a0f      	ldr	r2, [pc, #60]	; (8003814 <HAL_I2C_MspInit+0xa8>)
 80037d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80037da:	6413      	str	r3, [r2, #64]	; 0x40
 80037dc:	4b0d      	ldr	r3, [pc, #52]	; (8003814 <HAL_I2C_MspInit+0xa8>)
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80037e8:	2200      	movs	r2, #0
 80037ea:	2100      	movs	r1, #0
 80037ec:	201f      	movs	r0, #31
 80037ee:	f003 f9ae 	bl	8006b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80037f2:	201f      	movs	r0, #31
 80037f4:	f003 f9c7 	bl	8006b86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80037f8:	2200      	movs	r2, #0
 80037fa:	2100      	movs	r1, #0
 80037fc:	2020      	movs	r0, #32
 80037fe:	f003 f9a6 	bl	8006b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003802:	2020      	movs	r0, #32
 8003804:	f003 f9bf 	bl	8006b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003808:	bf00      	nop
 800380a:	3728      	adds	r7, #40	; 0x28
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40005400 	.word	0x40005400
 8003814:	40023800 	.word	0x40023800
 8003818:	40020400 	.word	0x40020400

0800381c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800381c:	b590      	push	{r4, r7, lr}
 800381e:	ed2d 8b02 	vpush	{d8}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003826:	f002 fc43 	bl	80060b0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800382a:	f000 fdf1 	bl	8004410 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800382e:	f7ff fe63 	bl	80034f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003832:	f7ff fe2b 	bl	800348c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003836:	f001 fc47 	bl	80050c8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800383a:	f001 f989 	bl	8004b50 <MX_TIM2_Init>
  MX_TIM5_Init();
 800383e:	f001 fa9f 	bl	8004d80 <MX_TIM5_Init>
  MX_TIM3_Init();
 8003842:	f001 f9d9 	bl	8004bf8 <MX_TIM3_Init>
  MX_I2C1_Init();
 8003846:	f7ff ff63 	bl	8003710 <MX_I2C1_Init>
  MX_TIM4_Init();
 800384a:	f001 fa4b 	bl	8004ce4 <MX_TIM4_Init>
  MX_TIM11_Init();
 800384e:	f001 fae5 	bl	8004e1c <MX_TIM11_Init>
  MX_ADC1_Init();
 8003852:	f7ff fd43 	bl	80032dc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  //Setup Initial vaules
  InitKalmanStruct(&KF,Var_Q,Var_R);
 8003856:	4bba      	ldr	r3, [pc, #744]	; (8003b40 <main+0x324>)
 8003858:	edd3 7a00 	vldr	s15, [r3]
 800385c:	4bb9      	ldr	r3, [pc, #740]	; (8003b44 <main+0x328>)
 800385e:	ed93 7a00 	vldr	s14, [r3]
 8003862:	eef0 0a47 	vmov.f32	s1, s14
 8003866:	eeb0 0a67 	vmov.f32	s0, s15
 800386a:	48b7      	ldr	r0, [pc, #732]	; (8003b48 <main+0x32c>)
 800386c:	f7fd ff1c 	bl	80016a8 <InitKalmanStruct>

  InitReadEncoder(&ReadEncoderParam, 1000);
 8003870:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003874:	48b5      	ldr	r0, [pc, #724]	; (8003b4c <main+0x330>)
 8003876:	f7ff f8fa 	bl	8002a6e <InitReadEncoder>

  QuinticSetup(&QuinticVar, vmax, amax);
 800387a:	4bb5      	ldr	r3, [pc, #724]	; (8003b50 <main+0x334>)
 800387c:	edd3 7a00 	vldr	s15, [r3]
 8003880:	4bb4      	ldr	r3, [pc, #720]	; (8003b54 <main+0x338>)
 8003882:	ed93 7a00 	vldr	s14, [r3]
 8003886:	eef0 0a47 	vmov.f32	s1, s14
 800388a:	eeb0 0a67 	vmov.f32	s0, s15
 800388e:	48b2      	ldr	r0, [pc, #712]	; (8003b58 <main+0x33c>)
 8003890:	f7fe fd8c 	bl	80023ac <QuinticSetup>

  PIDSetup(&PositionLoop, 15, 2.5, 0.00001, 10);
 8003894:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8003898:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 8003b5c <main+0x340>
 800389c:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
 80038a0:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 80038a4:	48ae      	ldr	r0, [pc, #696]	; (8003b60 <main+0x344>)
 80038a6:	f7fe fc51 	bl	800214c <PIDSetup>
  PIDSetup(&VelocityLoop, 5.0, 0.00000001, 0, 0.00003);
 80038aa:	eddf 1aae 	vldr	s3, [pc, #696]	; 8003b64 <main+0x348>
 80038ae:	ed9f 1aae 	vldr	s2, [pc, #696]	; 8003b68 <main+0x34c>
 80038b2:	eddf 0aae 	vldr	s1, [pc, #696]	; 8003b6c <main+0x350>
 80038b6:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80038ba:	48ad      	ldr	r0, [pc, #692]	; (8003b70 <main+0x354>)
 80038bc:	f7fe fc46 	bl	800214c <PIDSetup>


  //Timers Start
  HAL_TIM_Base_Start_IT(&htim4);
 80038c0:	48ac      	ldr	r0, [pc, #688]	; (8003b74 <main+0x358>)
 80038c2:	f006 fbcd 	bl	800a060 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2);  //Start QEI
 80038c6:	2104      	movs	r1, #4
 80038c8:	48ab      	ldr	r0, [pc, #684]	; (8003b78 <main+0x35c>)
 80038ca:	f006 ff29 	bl	800a720 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);//Start PWM
 80038ce:	2108      	movs	r1, #8
 80038d0:	48aa      	ldr	r0, [pc, #680]	; (8003b7c <main+0x360>)
 80038d2:	f006 fcf3 	bl	800a2bc <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 80038d6:	48aa      	ldr	r0, [pc, #680]	; (8003b80 <main+0x364>)
 80038d8:	f006 fbc2 	bl	800a060 <HAL_TIM_Base_Start_IT>

  hmodbus.huart = &huart2;
 80038dc:	4ba9      	ldr	r3, [pc, #676]	; (8003b84 <main+0x368>)
 80038de:	4aaa      	ldr	r2, [pc, #680]	; (8003b88 <main+0x36c>)
 80038e0:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim11;
 80038e2:	4ba8      	ldr	r3, [pc, #672]	; (8003b84 <main+0x368>)
 80038e4:	4aa9      	ldr	r2, [pc, #676]	; (8003b8c <main+0x370>)
 80038e6:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80038e8:	4ba6      	ldr	r3, [pc, #664]	; (8003b84 <main+0x368>)
 80038ea:	2215      	movs	r2, #21
 80038ec:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize = 200;
 80038ee:	4ba5      	ldr	r3, [pc, #660]	; (8003b84 <main+0x368>)
 80038f0:	22c8      	movs	r2, #200	; 0xc8
 80038f2:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 80038f4:	49a6      	ldr	r1, [pc, #664]	; (8003b90 <main+0x374>)
 80038f6:	48a3      	ldr	r0, [pc, #652]	; (8003b84 <main+0x368>)
 80038f8:	f7fe f91e 	bl	8001b38 <Modbus_init>

  HAL_ADC_Start_DMA(&hadc1, VR, 2); // Start ADC
 80038fc:	2202      	movs	r2, #2
 80038fe:	49a5      	ldr	r1, [pc, #660]	; (8003b94 <main+0x378>)
 8003900:	48a5      	ldr	r0, [pc, #660]	; (8003b98 <main+0x37c>)
 8003902:	f002 fc8b 	bl	800621c <HAL_ADC_Start_DMA>

//	//EndEff
	TestState = SoftReset;
 8003906:	4ba5      	ldr	r3, [pc, #660]	; (8003b9c <main+0x380>)
 8003908:	2201      	movs	r2, #1
 800390a:	701a      	strb	r2, [r3, #0]
	Stamp = 1;
 800390c:	4ba4      	ldr	r3, [pc, #656]	; (8003ba0 <main+0x384>)
 800390e:	2201      	movs	r2, #1
 8003910:	701a      	strb	r2, [r3, #0]
	TestMode();
 8003912:	f7fd fd97 	bl	8001444 <TestMode>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	Modbus_Protocal_Worker();
 8003916:	f7fe f99b 	bl	8001c50 <Modbus_Protocal_Worker>
	static uint32_t timestamp =0;
	static uint32_t Modbustimestamp = 0;
	if((KF.x_hat[1] >= 1000) || (KF.x_hat[1] <= -1000))
 800391a:	4b8b      	ldr	r3, [pc, #556]	; (8003b48 <main+0x32c>)
 800391c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003920:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8003ba4 <main+0x388>
 8003924:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800392c:	da09      	bge.n	8003942 <main+0x126>
 800392e:	4b86      	ldr	r3, [pc, #536]	; (8003b48 <main+0x32c>)
 8003930:	edd3 7a01 	vldr	s15, [r3, #4]
 8003934:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8003ba8 <main+0x38c>
 8003938:	eef4 7ac7 	vcmpe.f32	s15, s14
 800393c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003940:	d806      	bhi.n	8003950 <main+0x134>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 8003942:	2201      	movs	r2, #1
 8003944:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003948:	4898      	ldr	r0, [pc, #608]	; (8003bac <main+0x390>)
 800394a:	f003 feef 	bl	800772c <HAL_GPIO_WritePin>
 800394e:	e005      	b.n	800395c <main+0x140>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
 8003950:	2200      	movs	r2, #0
 8003952:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003956:	4895      	ldr	r0, [pc, #596]	; (8003bac <main+0x390>)
 8003958:	f003 fee8 	bl	800772c <HAL_GPIO_WritePin>
	}

	if (HAL_GetTick() >= Modbustimestamp)
 800395c:	f002 fc0e 	bl	800617c <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	4b93      	ldr	r3, [pc, #588]	; (8003bb0 <main+0x394>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	f0c0 80b1 	bcc.w	8003ace <main+0x2b2>
	{
	  Modbustimestamp = HAL_GetTick() + 200;
 800396c:	f002 fc06 	bl	800617c <HAL_GetTick>
 8003970:	4603      	mov	r3, r0
 8003972:	33c8      	adds	r3, #200	; 0xc8
 8003974:	4a8e      	ldr	r2, [pc, #568]	; (8003bb0 <main+0x394>)
 8003976:	6013      	str	r3, [r2, #0]
	  registerFrame[0x00].U16 = 0b0101100101100001;
 8003978:	4b85      	ldr	r3, [pc, #532]	; (8003b90 <main+0x374>)
 800397a:	f645 1261 	movw	r2, #22881	; 0x5961
 800397e:	801a      	strh	r2, [r3, #0]
	  //Update y axis position to basesystem
	  registerFrame[0x11].U16 = ((((QEIData.QEIPosition-OpVar.HomePosOffset) * 120) / 8192 ) + 1) * 10;
 8003980:	4b8c      	ldr	r3, [pc, #560]	; (8003bb4 <main+0x398>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	461a      	mov	r2, r3
 8003986:	4b8c      	ldr	r3, [pc, #560]	; (8003bb8 <main+0x39c>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	1ad2      	subs	r2, r2, r3
 800398c:	4613      	mov	r3, r2
 800398e:	011b      	lsls	r3, r3, #4
 8003990:	1a9b      	subs	r3, r3, r2
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	0b5b      	lsrs	r3, r3, #13
 8003996:	3301      	adds	r3, #1
 8003998:	b29b      	uxth	r3, r3
 800399a:	461a      	mov	r2, r3
 800399c:	0092      	lsls	r2, r2, #2
 800399e:	4413      	add	r3, r2
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	4b7a      	ldr	r3, [pc, #488]	; (8003b90 <main+0x374>)
 80039a6:	845a      	strh	r2, [r3, #34]	; 0x22
	  registerFrame[0x12].U16 = (KF.x_hat[1] * 120/8192) * 10;
 80039a8:	4b67      	ldr	r3, [pc, #412]	; (8003b48 <main+0x32c>)
 80039aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80039ae:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8003bbc <main+0x3a0>
 80039b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80039b6:	eddf 6a82 	vldr	s13, [pc, #520]	; 8003bc0 <main+0x3a4>
 80039ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039be:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80039c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039ca:	ee17 3a90 	vmov	r3, s15
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	4b6f      	ldr	r3, [pc, #444]	; (8003b90 <main+0x374>)
 80039d2:	849a      	strh	r2, [r3, #36]	; 0x24
	  registerFrame[0x13].U16 =	((KF.x_hat[1] - KF.x_hat_minus[1])* 120/8192) * 2500 * 10;
 80039d4:	4b5c      	ldr	r3, [pc, #368]	; (8003b48 <main+0x32c>)
 80039d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80039da:	4b5b      	ldr	r3, [pc, #364]	; (8003b48 <main+0x32c>)
 80039dc:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 80039e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039e4:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8003bbc <main+0x3a0>
 80039e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80039ec:	eddf 6a74 	vldr	s13, [pc, #464]	; 8003bc0 <main+0x3a4>
 80039f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039f4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8003bc4 <main+0x3a8>
 80039f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039fc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003a00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a08:	ee17 3a90 	vmov	r3, s15
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	4b60      	ldr	r3, [pc, #384]	; (8003b90 <main+0x374>)
 8003a10:	84da      	strh	r2, [r3, #38]	; 0x26
		static uint32_t Tray_Delay = 0; // Tray delay counter
		//Set Pick Tray
		if(registerFrame[0x01].U16 == 1)
 8003a12:	4b5f      	ldr	r3, [pc, #380]	; (8003b90 <main+0x374>)
 8003a14:	885b      	ldrh	r3, [r3, #2]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d11e      	bne.n	8003a58 <main+0x23c>
		{
			registerFrame[0x20].U16 = PickTray.ForBaseOriginX;
 8003a1a:	4b6b      	ldr	r3, [pc, #428]	; (8003bc8 <main+0x3ac>)
 8003a1c:	8a1a      	ldrh	r2, [r3, #16]
 8003a1e:	4b5c      	ldr	r3, [pc, #368]	; (8003b90 <main+0x374>)
 8003a20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			registerFrame[0x21].U16 = PickTray.ForBaseOriginY;
 8003a24:	4b68      	ldr	r3, [pc, #416]	; (8003bc8 <main+0x3ac>)
 8003a26:	8a5a      	ldrh	r2, [r3, #18]
 8003a28:	4b59      	ldr	r3, [pc, #356]	; (8003b90 <main+0x374>)
 8003a2a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			registerFrame[0x22].U16 = PickTray.ForBaseOrientation;
 8003a2e:	4b66      	ldr	r3, [pc, #408]	; (8003bc8 <main+0x3ac>)
 8003a30:	8a9a      	ldrh	r2, [r3, #20]
 8003a32:	4b57      	ldr	r3, [pc, #348]	; (8003b90 <main+0x374>)
 8003a34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			registerFrame[0x01].U16 = 0;
 8003a38:	4b55      	ldr	r3, [pc, #340]	; (8003b90 <main+0x374>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	805a      	strh	r2, [r3, #2]
			OpVar.Tray_SetTo = 1;
 8003a3e:	4b5e      	ldr	r3, [pc, #376]	; (8003bb8 <main+0x39c>)
 8003a40:	2201      	movs	r2, #1
 8003a42:	771a      	strb	r2, [r3, #28]
			Tray_Delay = HAL_GetTick() + 350; // Add delay
 8003a44:	f002 fb9a 	bl	800617c <HAL_GetTick>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 8003a4e:	4a5f      	ldr	r2, [pc, #380]	; (8003bcc <main+0x3b0>)
 8003a50:	6013      	str	r3, [r2, #0]
			registerFrame[0x10].U16 = 1; //Jog Pick Set
 8003a52:	4b4f      	ldr	r3, [pc, #316]	; (8003b90 <main+0x374>)
 8003a54:	2201      	movs	r2, #1
 8003a56:	841a      	strh	r2, [r3, #32]
			//registerFrame[0x10].U16 = 0; //Jog Pick Reset
		}
		//Set Place Tray
		if(registerFrame[0x01].U16 == 2)
 8003a58:	4b4d      	ldr	r3, [pc, #308]	; (8003b90 <main+0x374>)
 8003a5a:	885b      	ldrh	r3, [r3, #2]
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d11e      	bne.n	8003a9e <main+0x282>
		{
			registerFrame[0x23].U16 = PlaceTray.ForBaseOriginX;
 8003a60:	4b5b      	ldr	r3, [pc, #364]	; (8003bd0 <main+0x3b4>)
 8003a62:	8a1a      	ldrh	r2, [r3, #16]
 8003a64:	4b4a      	ldr	r3, [pc, #296]	; (8003b90 <main+0x374>)
 8003a66:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			registerFrame[0x24].U16 = PlaceTray.ForBaseOriginY;
 8003a6a:	4b59      	ldr	r3, [pc, #356]	; (8003bd0 <main+0x3b4>)
 8003a6c:	8a5a      	ldrh	r2, [r3, #18]
 8003a6e:	4b48      	ldr	r3, [pc, #288]	; (8003b90 <main+0x374>)
 8003a70:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			registerFrame[0x25].U16 = PlaceTray.ForBaseOrientation;
 8003a74:	4b56      	ldr	r3, [pc, #344]	; (8003bd0 <main+0x3b4>)
 8003a76:	8a9a      	ldrh	r2, [r3, #20]
 8003a78:	4b45      	ldr	r3, [pc, #276]	; (8003b90 <main+0x374>)
 8003a7a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			registerFrame[0x01].U16 = 0;
 8003a7e:	4b44      	ldr	r3, [pc, #272]	; (8003b90 <main+0x374>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	805a      	strh	r2, [r3, #2]
			OpVar.Tray_SetTo = 1;
 8003a84:	4b4c      	ldr	r3, [pc, #304]	; (8003bb8 <main+0x39c>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	771a      	strb	r2, [r3, #28]
			Tray_Delay = HAL_GetTick() + 350; // Add delay
 8003a8a:	f002 fb77 	bl	800617c <HAL_GetTick>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 8003a94:	4a4d      	ldr	r2, [pc, #308]	; (8003bcc <main+0x3b0>)
 8003a96:	6013      	str	r3, [r2, #0]
			registerFrame[0x10].U16 = 2; //Jog Place Set
 8003a98:	4b3d      	ldr	r3, [pc, #244]	; (8003b90 <main+0x374>)
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	841a      	strh	r2, [r3, #32]
			//registerFrame[0x10].U16 = 0; //Jog Place Reset
		}
		//Delay for Jog
		if (HAL_GetTick() >= Tray_Delay && OpVar.Tray_SetTo != 0){
 8003a9e:	f002 fb6d 	bl	800617c <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	4b49      	ldr	r3, [pc, #292]	; (8003bcc <main+0x3b0>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d310      	bcc.n	8003ace <main+0x2b2>
 8003aac:	4b42      	ldr	r3, [pc, #264]	; (8003bb8 <main+0x39c>)
 8003aae:	7f1b      	ldrb	r3, [r3, #28]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00c      	beq.n	8003ace <main+0x2b2>
			Tray_Delay = HAL_GetTick() + 350; // Add delay
 8003ab4:	f002 fb62 	bl	800617c <HAL_GetTick>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 8003abe:	4a43      	ldr	r2, [pc, #268]	; (8003bcc <main+0x3b0>)
 8003ac0:	6013      	str	r3, [r2, #0]
			registerFrame[0x10].U16 = 0;
 8003ac2:	4b33      	ldr	r3, [pc, #204]	; (8003b90 <main+0x374>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	841a      	strh	r2, [r3, #32]
			OpVar.Tray_SetTo = 0;
 8003ac8:	4b3b      	ldr	r3, [pc, #236]	; (8003bb8 <main+0x39c>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	771a      	strb	r2, [r3, #28]
		}
	}
	if(OpVar.ProxStop == 0)
 8003ace:	4b3a      	ldr	r3, [pc, #232]	; (8003bb8 <main+0x39c>)
 8003ad0:	79db      	ldrb	r3, [r3, #7]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f040 8475 	bne.w	80043c2 <main+0xba6>
	{
		switch(OpState)
 8003ad8:	4b3e      	ldr	r3, [pc, #248]	; (8003bd4 <main+0x3b8>)
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2b0a      	cmp	r3, #10
 8003ade:	f63f af1a 	bhi.w	8003916 <main+0xfa>
 8003ae2:	a201      	add	r2, pc, #4	; (adr r2, 8003ae8 <main+0x2cc>)
 8003ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae8:	08003b15 	.word	0x08003b15
 8003aec:	08003bd9 	.word	0x08003bd9
 8003af0:	08003ca9 	.word	0x08003ca9
 8003af4:	08003cd7 	.word	0x08003cd7
 8003af8:	08003d65 	.word	0x08003d65
 8003afc:	08003917 	.word	0x08003917
 8003b00:	08003917 	.word	0x08003917
 8003b04:	080040bf 	.word	0x080040bf
 8003b08:	08004157 	.word	0x08004157
 8003b0c:	08004259 	.word	0x08004259
 8003b10:	0800439b 	.word	0x0800439b
			{
			case Init:
				OpVar.ControllerEnable = 0;
 8003b14:	4b28      	ldr	r3, [pc, #160]	; (8003bb8 <main+0x39c>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	745a      	strb	r2, [r3, #17]
				OpVar.JoyEnable = 0;
 8003b1a:	4b27      	ldr	r3, [pc, #156]	; (8003bb8 <main+0x39c>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	749a      	strb	r2, [r3, #18]
				PositionLoop.IsSteady = 0;
 8003b20:	4b0f      	ldr	r3, [pc, #60]	; (8003b60 <main+0x344>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET);
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b2e:	481f      	ldr	r0, [pc, #124]	; (8003bac <main+0x390>)
 8003b30:	f003 fdfc 	bl	800772c <HAL_GPIO_WritePin>
				SetHome(&OpVar);
 8003b34:	4820      	ldr	r0, [pc, #128]	; (8003bb8 <main+0x39c>)
 8003b36:	f7fe ffd7 	bl	8002ae8 <SetHome>
			break;
 8003b3a:	f000 bc5a 	b.w	80043f2 <main+0xbd6>
 8003b3e:	bf00      	nop
 8003b40:	2000022c 	.word	0x2000022c
 8003b44:	20000230 	.word	0x20000230
 8003b48:	200004f4 	.word	0x200004f4
 8003b4c:	20000430 	.word	0x20000430
 8003b50:	20000224 	.word	0x20000224
 8003b54:	20000228 	.word	0x20000228
 8003b58:	20000444 	.word	0x20000444
 8003b5c:	3727c5ac 	.word	0x3727c5ac
 8003b60:	20000494 	.word	0x20000494
 8003b64:	37fba882 	.word	0x37fba882
 8003b68:	00000000 	.word	0x00000000
 8003b6c:	322bcc77 	.word	0x322bcc77
 8003b70:	200004c4 	.word	0x200004c4
 8003b74:	20000fe8 	.word	0x20000fe8
 8003b78:	20000e80 	.word	0x20000e80
 8003b7c:	20000f34 	.word	0x20000f34
 8003b80:	2000109c 	.word	0x2000109c
 8003b84:	200007e0 	.word	0x200007e0
 8003b88:	20001204 	.word	0x20001204
 8003b8c:	20001150 	.word	0x20001150
 8003b90:	20000cb8 	.word	0x20000cb8
 8003b94:	20000304 	.word	0x20000304
 8003b98:	20000310 	.word	0x20000310
 8003b9c:	200002c4 	.word	0x200002c4
 8003ba0:	200002c0 	.word	0x200002c0
 8003ba4:	447a0000 	.word	0x447a0000
 8003ba8:	c47a0000 	.word	0xc47a0000
 8003bac:	40020800 	.word	0x40020800
 8003bb0:	20000e70 	.word	0x20000e70
 8003bb4:	20000438 	.word	0x20000438
 8003bb8:	20000410 	.word	0x20000410
 8003bbc:	42f00000 	.word	0x42f00000
 8003bc0:	46000000 	.word	0x46000000
 8003bc4:	451c4000 	.word	0x451c4000
 8003bc8:	20000710 	.word	0x20000710
 8003bcc:	20000e74 	.word	0x20000e74
 8003bd0:	20000778 	.word	0x20000778
 8003bd4:	2000040c 	.word	0x2000040c
			case PreHoming:
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8003bd8:	4b50      	ldr	r3, [pc, #320]	; (8003d1c <main+0x500>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	63da      	str	r2, [r3, #60]	; 0x3c
				OpVar.ControllerEnable = 1;
 8003be0:	4b4f      	ldr	r3, [pc, #316]	; (8003d20 <main+0x504>)
 8003be2:	2201      	movs	r2, #1
 8003be4:	745a      	strb	r2, [r3, #17]
				QuinticVar.current_velo = 0;
 8003be6:	4b4f      	ldr	r3, [pc, #316]	; (8003d24 <main+0x508>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	611a      	str	r2, [r3, #16]
				OpVar.HomingKey = 0;
 8003bec:	4b4c      	ldr	r3, [pc, #304]	; (8003d20 <main+0x504>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	721a      	strb	r2, [r3, #8]
				if(HAL_GetTick() >= OpVar.waitTime)
 8003bf2:	f002 fac3 	bl	800617c <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	4b49      	ldr	r3, [pc, #292]	; (8003d20 <main+0x504>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d34e      	bcc.n	8003c9e <main+0x482>
				{
					OpVar.waitTime = 0;
 8003c00:	4b47      	ldr	r3, [pc, #284]	; (8003d20 <main+0x504>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
					InitKalmanStruct(&KF,Var_Q,Var_R);
 8003c06:	4b48      	ldr	r3, [pc, #288]	; (8003d28 <main+0x50c>)
 8003c08:	edd3 7a00 	vldr	s15, [r3]
 8003c0c:	4b47      	ldr	r3, [pc, #284]	; (8003d2c <main+0x510>)
 8003c0e:	ed93 7a00 	vldr	s14, [r3]
 8003c12:	eef0 0a47 	vmov.f32	s1, s14
 8003c16:	eeb0 0a67 	vmov.f32	s0, s15
 8003c1a:	4845      	ldr	r0, [pc, #276]	; (8003d30 <main+0x514>)
 8003c1c:	f7fd fd44 	bl	80016a8 <InitKalmanStruct>
					PIDSetup(&PositionLoop, 15, 2.2, 0.00001, 10);
 8003c20:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8003c24:	ed9f 1a43 	vldr	s2, [pc, #268]	; 8003d34 <main+0x518>
 8003c28:	eddf 0a43 	vldr	s1, [pc, #268]	; 8003d38 <main+0x51c>
 8003c2c:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8003c30:	4842      	ldr	r0, [pc, #264]	; (8003d3c <main+0x520>)
 8003c32:	f7fe fa8b 	bl	800214c <PIDSetup>
					PIDSetup(&VelocityLoop, 5.0, 0.00000001, 0, 0.00003);
 8003c36:	eddf 1a42 	vldr	s3, [pc, #264]	; 8003d40 <main+0x524>
 8003c3a:	ed9f 1a42 	vldr	s2, [pc, #264]	; 8003d44 <main+0x528>
 8003c3e:	eddf 0a42 	vldr	s1, [pc, #264]	; 8003d48 <main+0x52c>
 8003c42:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8003c46:	4841      	ldr	r0, [pc, #260]	; (8003d4c <main+0x530>)
 8003c48:	f7fe fa80 	bl	800214c <PIDSetup>

					QuinticVar.start_pos = __HAL_TIM_GET_COUNTER(&htim2);
 8003c4c:	4b40      	ldr	r3, [pc, #256]	; (8003d50 <main+0x534>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	461a      	mov	r2, r3
 8003c54:	4b33      	ldr	r3, [pc, #204]	; (8003d24 <main+0x508>)
 8003c56:	601a      	str	r2, [r3, #0]
					QuinticVar.final_pos = OpVar.MaxWorkspace*0.5 - 5;
 8003c58:	4b31      	ldr	r3, [pc, #196]	; (8003d20 <main+0x504>)
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fc fc0d 	bl	800047c <__aeabi_i2d>
 8003c62:	f04f 0200 	mov.w	r2, #0
 8003c66:	4b3b      	ldr	r3, [pc, #236]	; (8003d54 <main+0x538>)
 8003c68:	f7fc fc72 	bl	8000550 <__aeabi_dmul>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4610      	mov	r0, r2
 8003c72:	4619      	mov	r1, r3
 8003c74:	f04f 0200 	mov.w	r2, #0
 8003c78:	4b37      	ldr	r3, [pc, #220]	; (8003d58 <main+0x53c>)
 8003c7a:	f7fc fab1 	bl	80001e0 <__aeabi_dsub>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	460b      	mov	r3, r1
 8003c82:	4610      	mov	r0, r2
 8003c84:	4619      	mov	r1, r3
 8003c86:	f7fc ff13 	bl	8000ab0 <__aeabi_d2iz>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	4a25      	ldr	r2, [pc, #148]	; (8003d24 <main+0x508>)
 8003c8e:	6053      	str	r3, [r2, #4]
					OpVar.HomingKey = 0;	//Turn off Proximety
 8003c90:	4b23      	ldr	r3, [pc, #140]	; (8003d20 <main+0x504>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	721a      	strb	r2, [r3, #8]
					OpState = Homing;
 8003c96:	4b31      	ldr	r3, [pc, #196]	; (8003d5c <main+0x540>)
 8003c98:	2202      	movs	r2, #2
 8003c9a:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
				}
			break;
 8003c9c:	e3a9      	b.n	80043f2 <main+0xbd6>
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8003c9e:	4b1f      	ldr	r3, [pc, #124]	; (8003d1c <main+0x500>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8003ca6:	e3a4      	b.n	80043f2 <main+0xbd6>
			case Homing:
					OpVar.ControllerEnable = 1;
 8003ca8:	4b1d      	ldr	r3, [pc, #116]	; (8003d20 <main+0x504>)
 8003caa:	2201      	movs	r2, #1
 8003cac:	745a      	strb	r2, [r3, #17]
					if(PositionLoop.IsSteady == 1)
 8003cae:	4b23      	ldr	r3, [pc, #140]	; (8003d3c <main+0x520>)
 8003cb0:	f993 302d 	ldrsb.w	r3, [r3, #45]	; 0x2d
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	f040 838f 	bne.w	80043d8 <main+0xbbc>
					{
						OpVar.HomingKey = 0;
 8003cba:	4b19      	ldr	r3, [pc, #100]	; (8003d20 <main+0x504>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	721a      	strb	r2, [r3, #8]
						OpState = Buffer;
 8003cc0:	4b26      	ldr	r3, [pc, #152]	; (8003d5c <main+0x540>)
 8003cc2:	2203      	movs	r2, #3
 8003cc4:	701a      	strb	r2, [r3, #0]
						OpVar.waitTime = HAL_GetTick() + 1000;
 8003cc6:	f002 fa59 	bl	800617c <HAL_GetTick>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8003cd0:	4a13      	ldr	r2, [pc, #76]	; (8003d20 <main+0x504>)
 8003cd2:	6013      	str	r3, [r2, #0]
					}
			break;
 8003cd4:	e380      	b.n	80043d8 <main+0xbbc>
			case Buffer:
				if(HAL_GetTick() >= OpVar.waitTime)
 8003cd6:	f002 fa51 	bl	800617c <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	4b10      	ldr	r3, [pc, #64]	; (8003d20 <main+0x504>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	f0c0 837c 	bcc.w	80043de <main+0xbc2>
				{
					if(OpVar.RunTrayMode == 1)
 8003ce6:	4b0e      	ldr	r3, [pc, #56]	; (8003d20 <main+0x504>)
 8003ce8:	7f5b      	ldrb	r3, [r3, #29]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d106      	bne.n	8003cfc <main+0x4e0>
					{
						OpState = PreProcess;
 8003cee:	4b1b      	ldr	r3, [pc, #108]	; (8003d5c <main+0x540>)
 8003cf0:	2207      	movs	r2, #7
 8003cf2:	701a      	strb	r2, [r3, #0]
						OpVar.RunTrayMode = 0;
 8003cf4:	4b0a      	ldr	r3, [pc, #40]	; (8003d20 <main+0x504>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	775a      	strb	r2, [r3, #29]
						OpState = Home_Ok;
						registerFrame[0x10].U16 = 0;
						OpVar.ControllerEnable = 0;
					}
				}
				break;
 8003cfa:	e370      	b.n	80043de <main+0xbc2>
					else if(OpVar.RunTrayMode == 0)
 8003cfc:	4b08      	ldr	r3, [pc, #32]	; (8003d20 <main+0x504>)
 8003cfe:	7f5b      	ldrb	r3, [r3, #29]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f040 836c 	bne.w	80043de <main+0xbc2>
						OpState = Home_Ok;
 8003d06:	4b15      	ldr	r3, [pc, #84]	; (8003d5c <main+0x540>)
 8003d08:	2204      	movs	r2, #4
 8003d0a:	701a      	strb	r2, [r3, #0]
						registerFrame[0x10].U16 = 0;
 8003d0c:	4b14      	ldr	r3, [pc, #80]	; (8003d60 <main+0x544>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	841a      	strh	r2, [r3, #32]
						OpVar.ControllerEnable = 0;
 8003d12:	4b03      	ldr	r3, [pc, #12]	; (8003d20 <main+0x504>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	745a      	strb	r2, [r3, #17]
				break;
 8003d18:	e361      	b.n	80043de <main+0xbc2>
 8003d1a:	bf00      	nop
 8003d1c:	20000f34 	.word	0x20000f34
 8003d20:	20000410 	.word	0x20000410
 8003d24:	20000444 	.word	0x20000444
 8003d28:	2000022c 	.word	0x2000022c
 8003d2c:	20000230 	.word	0x20000230
 8003d30:	200004f4 	.word	0x200004f4
 8003d34:	3727c5ac 	.word	0x3727c5ac
 8003d38:	400ccccd 	.word	0x400ccccd
 8003d3c:	20000494 	.word	0x20000494
 8003d40:	37fba882 	.word	0x37fba882
 8003d44:	00000000 	.word	0x00000000
 8003d48:	322bcc77 	.word	0x322bcc77
 8003d4c:	200004c4 	.word	0x200004c4
 8003d50:	20000e80 	.word	0x20000e80
 8003d54:	3fe00000 	.word	0x3fe00000
 8003d58:	40140000 	.word	0x40140000
 8003d5c:	2000040c 	.word	0x2000040c
 8003d60:	20000cb8 	.word	0x20000cb8
			case Home_Ok:
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET);  // turn off point mode pilot lamp
 8003d64:	2200      	movs	r2, #0
 8003d66:	2104      	movs	r1, #4
 8003d68:	48b3      	ldr	r0, [pc, #716]	; (8004038 <main+0x81c>)
 8003d6a:	f003 fcdf 	bl	800772c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RESET); // turn off tray mode pilot lamp
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d74:	48b1      	ldr	r0, [pc, #708]	; (800403c <main+0x820>)
 8003d76:	f003 fcd9 	bl	800772c <HAL_GPIO_WritePin>

				if(registerFrame[0x10].U16 == 32){
 8003d7a:	4bb1      	ldr	r3, [pc, #708]	; (8004040 <main+0x824>)
 8003d7c:	8c1b      	ldrh	r3, [r3, #32]
 8003d7e:	2b20      	cmp	r3, #32
 8003d80:	d102      	bne.n	8003d88 <main+0x56c>
					registerFrame[0x10].U16 = 0;
 8003d82:	4baf      	ldr	r3, [pc, #700]	; (8004040 <main+0x824>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	841a      	strh	r2, [r3, #32]
				}
				OpVar.ControllerEnable = 0;	//Disable Controller
 8003d88:	4bae      	ldr	r3, [pc, #696]	; (8004044 <main+0x828>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	745a      	strb	r2, [r3, #17]
				OpVar.JoyEnable = 1;
 8003d8e:	4bad      	ldr	r3, [pc, #692]	; (8004044 <main+0x828>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	749a      	strb	r2, [r3, #18]
				if(registerFrame[0x44].U16 == 0)
 8003d94:	4baa      	ldr	r3, [pc, #680]	; (8004040 <main+0x824>)
 8003d96:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d103      	bne.n	8003da6 <main+0x58a>
				{
					registerFrame[0x40].U16 = 0b0000;	//ResetState
 8003d9e:	4ba8      	ldr	r3, [pc, #672]	; (8004040 <main+0x824>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
				}
				if(HAL_GetTick() >= timestamp)
 8003da6:	f002 f9e9 	bl	800617c <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	4ba6      	ldr	r3, [pc, #664]	; (8004048 <main+0x82c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	f0c0 8317 	bcc.w	80043e4 <main+0xbc8>
				{
					timestamp = HAL_GetTick() + 10;
 8003db6:	f002 f9e1 	bl	800617c <HAL_GetTick>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	330a      	adds	r3, #10
 8003dbe:	4aa2      	ldr	r2, [pc, #648]	; (8004048 <main+0x82c>)
 8003dc0:	6013      	str	r3, [r2, #0]

					//JoyStick
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);	//Open Joy Pilot lamp
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003dc8:	489c      	ldr	r0, [pc, #624]	; (800403c <main+0x820>)
 8003dca:	f003 fcaf 	bl	800772c <HAL_GPIO_WritePin>

					//set home from UI
					if(registerFrame[0x01].U16 == 4)
 8003dce:	4b9c      	ldr	r3, [pc, #624]	; (8004040 <main+0x824>)
 8003dd0:	885b      	ldrh	r3, [r3, #2]
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d10c      	bne.n	8003df0 <main+0x5d4>
					{
						registerFrame[0x10].U16 = 4;
 8003dd6:	4b9a      	ldr	r3, [pc, #616]	; (8004040 <main+0x824>)
 8003dd8:	2204      	movs	r2, #4
 8003dda:	841a      	strh	r2, [r3, #32]
						registerFrame[0x40].U16 = 1; //sethome x axis
 8003ddc:	4b98      	ldr	r3, [pc, #608]	; (8004040 <main+0x824>)
 8003dde:	2201      	movs	r2, #1
 8003de0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
						OpState = Init;
 8003de4:	4b99      	ldr	r3, [pc, #612]	; (800404c <main+0x830>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	701a      	strb	r2, [r3, #0]

						registerFrame[0x01].U16 = 0; //reset state
 8003dea:	4b95      	ldr	r3, [pc, #596]	; (8004040 <main+0x824>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	805a      	strh	r2, [r3, #2]
					}

					//PointMode from UI After press RUN
					if(registerFrame[0x01].U16 == 16)
 8003df0:	4b93      	ldr	r3, [pc, #588]	; (8004040 <main+0x824>)
 8003df2:	885b      	ldrh	r3, [r3, #2]
 8003df4:	2b10      	cmp	r3, #16
 8003df6:	d126      	bne.n	8003e46 <main+0x62a>
					{
						registerFrame[0x10].U16 = 32;	//Update Y axis Status(Gopoint)
 8003df8:	4b91      	ldr	r3, [pc, #580]	; (8004040 <main+0x824>)
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	841a      	strh	r2, [r3, #32]
					   //start run status of x axis
						RunX_Axis(registerFrame[0x30].U16, 2500, 2);
 8003dfe:	4b90      	ldr	r3, [pc, #576]	; (8004040 <main+0x824>)
 8003e00:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003e04:	2202      	movs	r2, #2
 8003e06:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fe fe86 	bl	8002b1c <RunX_Axis>
						//(Code here)    //assign goal point y to trajectory y axis and PID
						OpVar.SetPointY_Axis = (Uint2Int(registerFrame[0x31].U16)*8192/(120*10)) + OpVar.HomePosOffset;
 8003e10:	4b8b      	ldr	r3, [pc, #556]	; (8004040 <main+0x824>)
 8003e12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 fd9e 	bl	8004958 <Uint2Int>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	035b      	lsls	r3, r3, #13
 8003e20:	4a8b      	ldr	r2, [pc, #556]	; (8004050 <main+0x834>)
 8003e22:	fb82 1203 	smull	r1, r2, r2, r3
 8003e26:	11d2      	asrs	r2, r2, #7
 8003e28:	17db      	asrs	r3, r3, #31
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	4b85      	ldr	r3, [pc, #532]	; (8004044 <main+0x828>)
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	4413      	add	r3, r2
 8003e34:	461a      	mov	r2, r3
 8003e36:	4b83      	ldr	r3, [pc, #524]	; (8004044 <main+0x828>)
 8003e38:	615a      	str	r2, [r3, #20]
						OpVar.BaseMode = 1;
 8003e3a:	4b82      	ldr	r3, [pc, #520]	; (8004044 <main+0x828>)
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	741a      	strb	r2, [r3, #16]
						OpState = PreProcess;
 8003e40:	4b82      	ldr	r3, [pc, #520]	; (800404c <main+0x830>)
 8003e42:	2207      	movs	r2, #7
 8003e44:	701a      	strb	r2, [r3, #0]
					}

					//TrayMode from UI After press RUN
					if(registerFrame[0x01].U16 == 8)
 8003e46:	4b7e      	ldr	r3, [pc, #504]	; (8004040 <main+0x824>)
 8003e48:	885b      	ldrh	r3, [r3, #2]
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	d110      	bne.n	8003e70 <main+0x654>
					{
						Stamp = 1;
 8003e4e:	4b81      	ldr	r3, [pc, #516]	; (8004054 <main+0x838>)
 8003e50:	2201      	movs	r2, #1
 8003e52:	701a      	strb	r2, [r3, #0]
						TestState = GripperModeOn;
 8003e54:	4b80      	ldr	r3, [pc, #512]	; (8004058 <main+0x83c>)
 8003e56:	2204      	movs	r2, #4
 8003e58:	701a      	strb	r2, [r3, #0]
						TestMode();
 8003e5a:	f7fd faf3 	bl	8001444 <TestMode>

						OpVar.BaseMode = 0;
 8003e5e:	4b79      	ldr	r3, [pc, #484]	; (8004044 <main+0x828>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	741a      	strb	r2, [r3, #16]
						OpState = Init;
 8003e64:	4b79      	ldr	r3, [pc, #484]	; (800404c <main+0x830>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	701a      	strb	r2, [r3, #0]
						OpVar.RunTrayMode = 1;
 8003e6a:	4b76      	ldr	r3, [pc, #472]	; (8004044 <main+0x828>)
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	775a      	strb	r2, [r3, #29]

					}
					if(TrayPoint[7] != 0)
 8003e70:	4b7a      	ldr	r3, [pc, #488]	; (800405c <main+0x840>)
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 8089 	beq.w	8003f8c <main+0x770>
					{
						TraySetup(&PickTray,TrayPoint[0]/10.0, TrayPoint[1], TrayPoint[2]/10.0, TrayPoint[3]);
 8003e7a:	4b78      	ldr	r3, [pc, #480]	; (800405c <main+0x840>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fc fafc 	bl	800047c <__aeabi_i2d>
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	4b75      	ldr	r3, [pc, #468]	; (8004060 <main+0x844>)
 8003e8a:	f7fc fc8b 	bl	80007a4 <__aeabi_ddiv>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	4610      	mov	r0, r2
 8003e94:	4619      	mov	r1, r3
 8003e96:	f7fc fe53 	bl	8000b40 <__aeabi_d2f>
 8003e9a:	4604      	mov	r4, r0
 8003e9c:	4b6f      	ldr	r3, [pc, #444]	; (800405c <main+0x840>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	ee07 3a90 	vmov	s15, r3
 8003ea4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003ea8:	4b6c      	ldr	r3, [pc, #432]	; (800405c <main+0x840>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7fc fae5 	bl	800047c <__aeabi_i2d>
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	4b6a      	ldr	r3, [pc, #424]	; (8004060 <main+0x844>)
 8003eb8:	f7fc fc74 	bl	80007a4 <__aeabi_ddiv>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	f7fc fe3c 	bl	8000b40 <__aeabi_d2f>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	4b64      	ldr	r3, [pc, #400]	; (800405c <main+0x840>)
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	ee07 3a90 	vmov	s15, r3
 8003ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ed6:	eef0 1a67 	vmov.f32	s3, s15
 8003eda:	ee01 2a10 	vmov	s2, r2
 8003ede:	eef0 0a48 	vmov.f32	s1, s16
 8003ee2:	ee00 4a10 	vmov	s0, r4
 8003ee6:	485f      	ldr	r0, [pc, #380]	; (8004064 <main+0x848>)
 8003ee8:	f7fe fe3a 	bl	8002b60 <TraySetup>
						TraySetup(&PlaceTray,TrayPoint[4]/10.0, TrayPoint[5], TrayPoint[6]/10.0, TrayPoint[7]);
 8003eec:	4b5b      	ldr	r3, [pc, #364]	; (800405c <main+0x840>)
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7fc fac3 	bl	800047c <__aeabi_i2d>
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	4b59      	ldr	r3, [pc, #356]	; (8004060 <main+0x844>)
 8003efc:	f7fc fc52 	bl	80007a4 <__aeabi_ddiv>
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	4610      	mov	r0, r2
 8003f06:	4619      	mov	r1, r3
 8003f08:	f7fc fe1a 	bl	8000b40 <__aeabi_d2f>
 8003f0c:	4604      	mov	r4, r0
 8003f0e:	4b53      	ldr	r3, [pc, #332]	; (800405c <main+0x840>)
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	ee07 3a90 	vmov	s15, r3
 8003f16:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003f1a:	4b50      	ldr	r3, [pc, #320]	; (800405c <main+0x840>)
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fc faac 	bl	800047c <__aeabi_i2d>
 8003f24:	f04f 0200 	mov.w	r2, #0
 8003f28:	4b4d      	ldr	r3, [pc, #308]	; (8004060 <main+0x844>)
 8003f2a:	f7fc fc3b 	bl	80007a4 <__aeabi_ddiv>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	4610      	mov	r0, r2
 8003f34:	4619      	mov	r1, r3
 8003f36:	f7fc fe03 	bl	8000b40 <__aeabi_d2f>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	4b47      	ldr	r3, [pc, #284]	; (800405c <main+0x840>)
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	ee07 3a90 	vmov	s15, r3
 8003f44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f48:	eef0 1a67 	vmov.f32	s3, s15
 8003f4c:	ee01 2a10 	vmov	s2, r2
 8003f50:	eef0 0a48 	vmov.f32	s1, s16
 8003f54:	ee00 4a10 	vmov	s0, r4
 8003f58:	4843      	ldr	r0, [pc, #268]	; (8004068 <main+0x84c>)
 8003f5a:	f7fe fe01 	bl	8002b60 <TraySetup>
						TrayLocalization(&PickTray);
 8003f5e:	4841      	ldr	r0, [pc, #260]	; (8004064 <main+0x848>)
 8003f60:	f7fe fe92 	bl	8002c88 <TrayLocalization>
						TrayLocalization(&PlaceTray);
 8003f64:	4840      	ldr	r0, [pc, #256]	; (8004068 <main+0x84c>)
 8003f66:	f7fe fe8f 	bl	8002c88 <TrayLocalization>
						SubState = TrayP1;
 8003f6a:	4b40      	ldr	r3, [pc, #256]	; (800406c <main+0x850>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	701a      	strb	r2, [r3, #0]
						for (uint8_t i = 0; i <= 7; i++)
 8003f70:	2300      	movs	r3, #0
 8003f72:	71fb      	strb	r3, [r7, #7]
 8003f74:	e007      	b.n	8003f86 <main+0x76a>
						{
							TrayPoint[i] = 0;
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	4a38      	ldr	r2, [pc, #224]	; (800405c <main+0x840>)
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						for (uint8_t i = 0; i <= 7; i++)
 8003f80:	79fb      	ldrb	r3, [r7, #7]
 8003f82:	3301      	adds	r3, #1
 8003f84:	71fb      	strb	r3, [r7, #7]
 8003f86:	79fb      	ldrb	r3, [r7, #7]
 8003f88:	2b07      	cmp	r3, #7
 8003f8a:	d9f4      	bls.n	8003f76 <main+0x75a>
						}
					}

					//Endeffector control from UI
					if(registerFrame[0x02].U16 == 1 && PreGripper != 1){
 8003f8c:	4b2c      	ldr	r3, [pc, #176]	; (8004040 <main+0x824>)
 8003f8e:	889b      	ldrh	r3, [r3, #4]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d10c      	bne.n	8003fae <main+0x792>
 8003f94:	4b36      	ldr	r3, [pc, #216]	; (8004070 <main+0x854>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d008      	beq.n	8003fae <main+0x792>
						Stamp = 1;
 8003f9c:	4b2d      	ldr	r3, [pc, #180]	; (8004054 <main+0x838>)
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	701a      	strb	r2, [r3, #0]
						TestState = TestModeOn;
 8003fa2:	4b2d      	ldr	r3, [pc, #180]	; (8004058 <main+0x83c>)
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	701a      	strb	r2, [r3, #0]
						TestMode();
 8003fa8:	f7fd fa4c 	bl	8001444 <TestMode>
 8003fac:	e072      	b.n	8004094 <main+0x878>
					}

					else if(registerFrame[0x02].U16 == 0 && PreGripper == 2){
 8003fae:	4b24      	ldr	r3, [pc, #144]	; (8004040 <main+0x824>)
 8003fb0:	889b      	ldrh	r3, [r3, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10c      	bne.n	8003fd0 <main+0x7b4>
 8003fb6:	4b2e      	ldr	r3, [pc, #184]	; (8004070 <main+0x854>)
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d108      	bne.n	8003fd0 <main+0x7b4>
						Stamp = 1;
 8003fbe:	4b25      	ldr	r3, [pc, #148]	; (8004054 <main+0x838>)
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	701a      	strb	r2, [r3, #0]
						TestState = GripperModeOff;
 8003fc4:	4b24      	ldr	r3, [pc, #144]	; (8004058 <main+0x83c>)
 8003fc6:	2207      	movs	r2, #7
 8003fc8:	701a      	strb	r2, [r3, #0]
						TestMode();
 8003fca:	f7fd fa3b 	bl	8001444 <TestMode>
 8003fce:	e061      	b.n	8004094 <main+0x878>
					}

					else if(registerFrame[0x02].U16 == 0 && PreGripper == 1){
 8003fd0:	4b1b      	ldr	r3, [pc, #108]	; (8004040 <main+0x824>)
 8003fd2:	889b      	ldrh	r3, [r3, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10c      	bne.n	8003ff2 <main+0x7d6>
 8003fd8:	4b25      	ldr	r3, [pc, #148]	; (8004070 <main+0x854>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d108      	bne.n	8003ff2 <main+0x7d6>
						Stamp = 1;
 8003fe0:	4b1c      	ldr	r3, [pc, #112]	; (8004054 <main+0x838>)
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	701a      	strb	r2, [r3, #0]
						TestState = TestModeOff;
 8003fe6:	4b1c      	ldr	r3, [pc, #112]	; (8004058 <main+0x83c>)
 8003fe8:	2203      	movs	r2, #3
 8003fea:	701a      	strb	r2, [r3, #0]
						TestMode();
 8003fec:	f7fd fa2a 	bl	8001444 <TestMode>
 8003ff0:	e050      	b.n	8004094 <main+0x878>
					}

					else if(registerFrame[0x02].U16 == 2 && PreGripper != 2){
 8003ff2:	4b13      	ldr	r3, [pc, #76]	; (8004040 <main+0x824>)
 8003ff4:	889b      	ldrh	r3, [r3, #4]
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d10c      	bne.n	8004014 <main+0x7f8>
 8003ffa:	4b1d      	ldr	r3, [pc, #116]	; (8004070 <main+0x854>)
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d008      	beq.n	8004014 <main+0x7f8>
						Stamp = 1;
 8004002:	4b14      	ldr	r3, [pc, #80]	; (8004054 <main+0x838>)
 8004004:	2201      	movs	r2, #1
 8004006:	701a      	strb	r2, [r3, #0]
						TestState = GripperModeOn;
 8004008:	4b13      	ldr	r3, [pc, #76]	; (8004058 <main+0x83c>)
 800400a:	2204      	movs	r2, #4
 800400c:	701a      	strb	r2, [r3, #0]
						TestMode();
 800400e:	f7fd fa19 	bl	8001444 <TestMode>
 8004012:	e03f      	b.n	8004094 <main+0x878>
					}

					//Gripper Pick
					else if(registerFrame[0x02].U16 == 6 && PreGripper != 6 ){
 8004014:	4b0a      	ldr	r3, [pc, #40]	; (8004040 <main+0x824>)
 8004016:	889b      	ldrh	r3, [r3, #4]
 8004018:	2b06      	cmp	r3, #6
 800401a:	d12b      	bne.n	8004074 <main+0x858>
 800401c:	4b14      	ldr	r3, [pc, #80]	; (8004070 <main+0x854>)
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b06      	cmp	r3, #6
 8004022:	d027      	beq.n	8004074 <main+0x858>
						Stamp = 1;
 8004024:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <main+0x838>)
 8004026:	2201      	movs	r2, #1
 8004028:	701a      	strb	r2, [r3, #0]
						TestState = PickUp;
 800402a:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <main+0x83c>)
 800402c:	2205      	movs	r2, #5
 800402e:	701a      	strb	r2, [r3, #0]
						TestMode();
 8004030:	f7fd fa08 	bl	8001444 <TestMode>
 8004034:	e02e      	b.n	8004094 <main+0x878>
 8004036:	bf00      	nop
 8004038:	40020c00 	.word	0x40020c00
 800403c:	40020800 	.word	0x40020800
 8004040:	20000cb8 	.word	0x20000cb8
 8004044:	20000410 	.word	0x20000410
 8004048:	20000e78 	.word	0x20000e78
 800404c:	2000040c 	.word	0x2000040c
 8004050:	1b4e81b5 	.word	0x1b4e81b5
 8004054:	200002c0 	.word	0x200002c0
 8004058:	200002c4 	.word	0x200002c4
 800405c:	20000e4c 	.word	0x20000e4c
 8004060:	40240000 	.word	0x40240000
 8004064:	20000710 	.word	0x20000710
 8004068:	20000778 	.word	0x20000778
 800406c:	20000e48 	.word	0x20000e48
 8004070:	20000e6c 	.word	0x20000e6c

					}

					//Gripper Place
					else if(registerFrame[0x02].U16 == 10 && PreGripper != 10){
 8004074:	4ba3      	ldr	r3, [pc, #652]	; (8004304 <main+0xae8>)
 8004076:	889b      	ldrh	r3, [r3, #4]
 8004078:	2b0a      	cmp	r3, #10
 800407a:	d10b      	bne.n	8004094 <main+0x878>
 800407c:	4ba2      	ldr	r3, [pc, #648]	; (8004308 <main+0xaec>)
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2b0a      	cmp	r3, #10
 8004082:	d007      	beq.n	8004094 <main+0x878>
						Stamp = 1;
 8004084:	4ba1      	ldr	r3, [pc, #644]	; (800430c <main+0xaf0>)
 8004086:	2201      	movs	r2, #1
 8004088:	701a      	strb	r2, [r3, #0]
						TestState = PlaceDown;
 800408a:	4ba1      	ldr	r3, [pc, #644]	; (8004310 <main+0xaf4>)
 800408c:	2206      	movs	r2, #6
 800408e:	701a      	strb	r2, [r3, #0]
						TestMode();
 8004090:	f7fd f9d8 	bl	8001444 <TestMode>

					}

					PreGripper = registerFrame[0x02].U16;
 8004094:	4b9b      	ldr	r3, [pc, #620]	; (8004304 <main+0xae8>)
 8004096:	889b      	ldrh	r3, [r3, #4]
 8004098:	b2da      	uxtb	r2, r3
 800409a:	4b9b      	ldr	r3, [pc, #620]	; (8004308 <main+0xaec>)
 800409c:	701a      	strb	r2, [r3, #0]
					if(PreGripper == 6 || PreGripper == 10){
 800409e:	4b9a      	ldr	r3, [pc, #616]	; (8004308 <main+0xaec>)
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2b06      	cmp	r3, #6
 80040a4:	d004      	beq.n	80040b0 <main+0x894>
 80040a6:	4b98      	ldr	r3, [pc, #608]	; (8004308 <main+0xaec>)
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b0a      	cmp	r3, #10
 80040ac:	f040 819a 	bne.w	80043e4 <main+0xbc8>
						registerFrame[0x02].U16 = 0;
 80040b0:	4b94      	ldr	r3, [pc, #592]	; (8004304 <main+0xae8>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	809a      	strh	r2, [r3, #4]
						PreGripper = 0;
 80040b6:	4b94      	ldr	r3, [pc, #592]	; (8004308 <main+0xaec>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	701a      	strb	r2, [r3, #0]
					}
				}
			break;
 80040bc:	e192      	b.n	80043e4 <main+0xbc8>
			case TrayMode:
				//OpVar.ControllerEnable = 0;
			break;

			case PreProcess:
				OpVar.ControllerEnable = 0;
 80040be:	4b95      	ldr	r3, [pc, #596]	; (8004314 <main+0xaf8>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	745a      	strb	r2, [r3, #17]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET);
 80040c4:	2200      	movs	r2, #0
 80040c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80040ca:	4893      	ldr	r0, [pc, #588]	; (8004318 <main+0xafc>)
 80040cc:	f003 fb2e 	bl	800772c <HAL_GPIO_WritePin>
				if(OpVar.BaseMode == 0)	//TrayMode
 80040d0:	4b90      	ldr	r3, [pc, #576]	; (8004314 <main+0xaf8>)
 80040d2:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d126      	bne.n	8004128 <main+0x90c>
				{
					QuinticVar.final_pos = PickTray.Holes_Y[0];
 80040da:	4b90      	ldr	r3, [pc, #576]	; (800431c <main+0xb00>)
 80040dc:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80040e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040e4:	ee17 2a90 	vmov	r2, s15
 80040e8:	4b8d      	ldr	r3, [pc, #564]	; (8004320 <main+0xb04>)
 80040ea:	605a      	str	r2, [r3, #4]
					RunX_Axis(PickTray.Holes_X[0]*10, 2500, 3);
 80040ec:	4b8b      	ldr	r3, [pc, #556]	; (800431c <main+0xb00>)
 80040ee:	edd3 7a06 	vldr	s15, [r3, #24]
 80040f2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80040f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040fe:	2203      	movs	r2, #3
 8004100:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8004104:	ee17 0a90 	vmov	r0, s15
 8004108:	f7fe fd08 	bl	8002b1c <RunX_Axis>
					OpVar.task = GoPick;	//current task.
 800410c:	4b81      	ldr	r3, [pc, #516]	; (8004314 <main+0xaf8>)
 800410e:	2200      	movs	r2, #0
 8004110:	715a      	strb	r2, [r3, #5]
					OpVar.holeInd = 0;
 8004112:	4b80      	ldr	r3, [pc, #512]	; (8004314 <main+0xaf8>)
 8004114:	2200      	movs	r2, #0
 8004116:	719a      	strb	r2, [r3, #6]
					PositionLoop.IsSteady = 0;
 8004118:	4b82      	ldr	r3, [pc, #520]	; (8004324 <main+0xb08>)
 800411a:	2200      	movs	r2, #0
 800411c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
					OpState = ControlLoop;
 8004120:	4b81      	ldr	r3, [pc, #516]	; (8004328 <main+0xb0c>)
 8004122:	2208      	movs	r2, #8
 8004124:	701a      	strb	r2, [r3, #0]
					QuinticVar.final_pos = OpVar.SetPointY_Axis; //Point from Basesystem
					PositionLoop.IsSteady = 0;
					OpState = ControlLoop;

				}
			break;
 8004126:	e160      	b.n	80043ea <main+0xbce>
				else if (OpVar.BaseMode == 1)	//PointMode
 8004128:	4b7a      	ldr	r3, [pc, #488]	; (8004314 <main+0xaf8>)
 800412a:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800412e:	2b01      	cmp	r3, #1
 8004130:	f040 815b 	bne.w	80043ea <main+0xbce>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 8004134:	2201      	movs	r2, #1
 8004136:	2104      	movs	r1, #4
 8004138:	487c      	ldr	r0, [pc, #496]	; (800432c <main+0xb10>)
 800413a:	f003 faf7 	bl	800772c <HAL_GPIO_WritePin>
					QuinticVar.final_pos = OpVar.SetPointY_Axis; //Point from Basesystem
 800413e:	4b75      	ldr	r3, [pc, #468]	; (8004314 <main+0xaf8>)
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	4a77      	ldr	r2, [pc, #476]	; (8004320 <main+0xb04>)
 8004144:	6053      	str	r3, [r2, #4]
					PositionLoop.IsSteady = 0;
 8004146:	4b77      	ldr	r3, [pc, #476]	; (8004324 <main+0xb08>)
 8004148:	2200      	movs	r2, #0
 800414a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
					OpState = ControlLoop;
 800414e:	4b76      	ldr	r3, [pc, #472]	; (8004328 <main+0xb0c>)
 8004150:	2208      	movs	r2, #8
 8004152:	701a      	strb	r2, [r3, #0]
			break;
 8004154:	e149      	b.n	80043ea <main+0xbce>

			case ControlLoop:
				OpVar.ControllerEnable = 1;
 8004156:	4b6f      	ldr	r3, [pc, #444]	; (8004314 <main+0xaf8>)
 8004158:	2201      	movs	r2, #1
 800415a:	745a      	strb	r2, [r3, #17]
				OpVar.JoyEnable = 0;
 800415c:	4b6d      	ldr	r3, [pc, #436]	; (8004314 <main+0xaf8>)
 800415e:	2200      	movs	r2, #0
 8004160:	749a      	strb	r2, [r3, #18]
				OpVar.HomingKey = 2;
 8004162:	4b6c      	ldr	r3, [pc, #432]	; (8004314 <main+0xaf8>)
 8004164:	2202      	movs	r2, #2
 8004166:	721a      	strb	r2, [r3, #8]
				if(PositionLoop.IsSteady == 1)
 8004168:	4b6e      	ldr	r3, [pc, #440]	; (8004324 <main+0xb08>)
 800416a:	f993 302d 	ldrsb.w	r3, [r3, #45]	; 0x2d
 800416e:	2b01      	cmp	r3, #1
 8004170:	f040 813e 	bne.w	80043f0 <main+0xbd4>
				{
					float32_t refX_Axis;
					if(OpVar.BaseMode == 0)
 8004174:	4b67      	ldr	r3, [pc, #412]	; (8004314 <main+0xaf8>)
 8004176:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d124      	bne.n	80041c8 <main+0x9ac>
					{
						switch(OpVar.task)
 800417e:	4b65      	ldr	r3, [pc, #404]	; (8004314 <main+0xaf8>)
 8004180:	795b      	ldrb	r3, [r3, #5]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <main+0x970>
 8004186:	2b01      	cmp	r3, #1
 8004188:	d00f      	beq.n	80041aa <main+0x98e>
 800418a:	e02f      	b.n	80041ec <main+0x9d0>
						{
						case GoPick:
							refX_Axis = PickTray.Holes_X[OpVar.holeInd] * 10;
 800418c:	4b61      	ldr	r3, [pc, #388]	; (8004314 <main+0xaf8>)
 800418e:	799b      	ldrb	r3, [r3, #6]
 8004190:	4a62      	ldr	r2, [pc, #392]	; (800431c <main+0xb00>)
 8004192:	3306      	adds	r3, #6
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	edd3 7a00 	vldr	s15, [r3]
 800419c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80041a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041a4:	edc7 7a00 	vstr	s15, [r7]
							break;
 80041a8:	e020      	b.n	80041ec <main+0x9d0>
						case GoPlace:
							refX_Axis = PlaceTray.Holes_X[OpVar.holeInd] * 10;
 80041aa:	4b5a      	ldr	r3, [pc, #360]	; (8004314 <main+0xaf8>)
 80041ac:	799b      	ldrb	r3, [r3, #6]
 80041ae:	4a60      	ldr	r2, [pc, #384]	; (8004330 <main+0xb14>)
 80041b0:	3306      	adds	r3, #6
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	edd3 7a00 	vldr	s15, [r3]
 80041ba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80041be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041c2:	edc7 7a00 	vstr	s15, [r7]
							break;
 80041c6:	e011      	b.n	80041ec <main+0x9d0>
						}
					}
					else if (OpVar.BaseMode == 1)
 80041c8:	4b52      	ldr	r3, [pc, #328]	; (8004314 <main+0xaf8>)
 80041ca:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d10c      	bne.n	80041ec <main+0x9d0>
					{
						refX_Axis = Uint2Int(registerFrame[0x30].U16);
 80041d2:	4b4c      	ldr	r3, [pc, #304]	; (8004304 <main+0xae8>)
 80041d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 fbbd 	bl	8004958 <Uint2Int>
 80041de:	4603      	mov	r3, r0
 80041e0:	ee07 3a90 	vmov	s15, r3
 80041e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041e8:	edc7 7a00 	vstr	s15, [r7]
					}
					if(abs(Uint2Int(registerFrame[0x44].U16) - refX_Axis) <= 0.1)
 80041ec:	4b45      	ldr	r3, [pc, #276]	; (8004304 <main+0xae8>)
 80041ee:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fbb0 	bl	8004958 <Uint2Int>
 80041f8:	4603      	mov	r3, r0
 80041fa:	ee07 3a90 	vmov	s15, r3
 80041fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004202:	edd7 7a00 	vldr	s15, [r7]
 8004206:	ee77 7a67 	vsub.f32	s15, s14, s15
 800420a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800420e:	ee17 3a90 	vmov	r3, s15
 8004212:	2b00      	cmp	r3, #0
 8004214:	bfb8      	it	lt
 8004216:	425b      	neglt	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	f300 80e9 	bgt.w	80043f0 <main+0xbd4>
					{
						if(OpVar.BaseMode == 0)	//Tray
 800421e:	4b3d      	ldr	r3, [pc, #244]	; (8004314 <main+0xaf8>)
 8004220:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10a      	bne.n	800423e <main+0xa22>
						{
							OpVar.waitTime = HAL_GetTick() + 2000;
 8004228:	f001 ffa8 	bl	800617c <HAL_GetTick>
 800422c:	4603      	mov	r3, r0
 800422e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004232:	4a38      	ldr	r2, [pc, #224]	; (8004314 <main+0xaf8>)
 8004234:	6013      	str	r3, [r2, #0]
							//EndEffectorToggle();
							OpState = GripperWaiting;
 8004236:	4b3c      	ldr	r3, [pc, #240]	; (8004328 <main+0xb0c>)
 8004238:	2209      	movs	r2, #9
 800423a:	701a      	strb	r2, [r3, #0]
							registerFrame[0x01].U16 = 0;

						}
					}
				}
			break;
 800423c:	e0d8      	b.n	80043f0 <main+0xbd4>
						else if (OpVar.BaseMode == 1)	//Point
 800423e:	4b35      	ldr	r3, [pc, #212]	; (8004314 <main+0xaf8>)
 8004240:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8004244:	2b01      	cmp	r3, #1
 8004246:	f040 80d3 	bne.w	80043f0 <main+0xbd4>
							OpState = Home_Ok;
 800424a:	4b37      	ldr	r3, [pc, #220]	; (8004328 <main+0xb0c>)
 800424c:	2204      	movs	r2, #4
 800424e:	701a      	strb	r2, [r3, #0]
							registerFrame[0x01].U16 = 0;
 8004250:	4b2c      	ldr	r3, [pc, #176]	; (8004304 <main+0xae8>)
 8004252:	2200      	movs	r2, #0
 8004254:	805a      	strh	r2, [r3, #2]
			break;
 8004256:	e0cb      	b.n	80043f0 <main+0xbd4>

			case GripperWaiting:
				OpVar.ControllerEnable = 1;
 8004258:	4b2e      	ldr	r3, [pc, #184]	; (8004314 <main+0xaf8>)
 800425a:	2201      	movs	r2, #1
 800425c:	745a      	strb	r2, [r3, #17]
				if( HAL_GetTick() >= OpVar.waitTime)
 800425e:	f001 ff8d 	bl	800617c <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	4b2b      	ldr	r3, [pc, #172]	; (8004314 <main+0xaf8>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	f0c0 8094 	bcc.w	8004396 <main+0xb7a>
				{
					OpVar.waitTime = 0;
 800426e:	4b29      	ldr	r3, [pc, #164]	; (8004314 <main+0xaf8>)
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]
					switch(OpVar.task)
 8004274:	4b27      	ldr	r3, [pc, #156]	; (8004314 <main+0xaf8>)
 8004276:	795b      	ldrb	r3, [r3, #5]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d002      	beq.n	8004282 <main+0xa66>
 800427c:	2b01      	cmp	r3, #1
 800427e:	d02b      	beq.n	80042d8 <main+0xabc>
							OpState = ControlLoop;
						}
					break;
					}
				}
			break;
 8004280:	e0b7      	b.n	80043f2 <main+0xbd6>
						QuinticVar.final_pos = PlaceTray.Holes_Y[OpVar.holeInd];
 8004282:	4b24      	ldr	r3, [pc, #144]	; (8004314 <main+0xaf8>)
 8004284:	799b      	ldrb	r3, [r3, #6]
 8004286:	4a2a      	ldr	r2, [pc, #168]	; (8004330 <main+0xb14>)
 8004288:	330e      	adds	r3, #14
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	3304      	adds	r3, #4
 8004290:	edd3 7a00 	vldr	s15, [r3]
 8004294:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004298:	ee17 2a90 	vmov	r2, s15
 800429c:	4b20      	ldr	r3, [pc, #128]	; (8004320 <main+0xb04>)
 800429e:	605a      	str	r2, [r3, #4]
						RunX_Axis(PlaceTray.Holes_X[OpVar.holeInd]*10, 2500, 3);
 80042a0:	4b1c      	ldr	r3, [pc, #112]	; (8004314 <main+0xaf8>)
 80042a2:	799b      	ldrb	r3, [r3, #6]
 80042a4:	4a22      	ldr	r2, [pc, #136]	; (8004330 <main+0xb14>)
 80042a6:	3306      	adds	r3, #6
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	edd3 7a00 	vldr	s15, [r3]
 80042b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80042b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042bc:	2203      	movs	r2, #3
 80042be:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80042c2:	ee17 0a90 	vmov	r0, s15
 80042c6:	f7fe fc29 	bl	8002b1c <RunX_Axis>
						OpVar.task = GoPlace;
 80042ca:	4b12      	ldr	r3, [pc, #72]	; (8004314 <main+0xaf8>)
 80042cc:	2201      	movs	r2, #1
 80042ce:	715a      	strb	r2, [r3, #5]
						OpState = ControlLoop;
 80042d0:	4b15      	ldr	r3, [pc, #84]	; (8004328 <main+0xb0c>)
 80042d2:	2208      	movs	r2, #8
 80042d4:	701a      	strb	r2, [r3, #0]
					break;
 80042d6:	e05f      	b.n	8004398 <main+0xb7c>
						if(OpVar.holeInd >= 8)
 80042d8:	4b0e      	ldr	r3, [pc, #56]	; (8004314 <main+0xaf8>)
 80042da:	799b      	ldrb	r3, [r3, #6]
 80042dc:	2b07      	cmp	r3, #7
 80042de:	d929      	bls.n	8004334 <main+0xb18>
							OpState = Init;
 80042e0:	4b11      	ldr	r3, [pc, #68]	; (8004328 <main+0xb0c>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	701a      	strb	r2, [r3, #0]
							registerFrame[0x40].U16 = 0b0001;	//Home
 80042e6:	4b07      	ldr	r3, [pc, #28]	; (8004304 <main+0xae8>)
 80042e8:	2201      	movs	r2, #1
 80042ea:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
							OpVar.ControllerEnable = 0;
 80042ee:	4b09      	ldr	r3, [pc, #36]	; (8004314 <main+0xaf8>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	745a      	strb	r2, [r3, #17]
							OpVar.RunTrayMode = 0;
 80042f4:	4b07      	ldr	r3, [pc, #28]	; (8004314 <main+0xaf8>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	775a      	strb	r2, [r3, #29]
							registerFrame[0x01].U16 = 0;
 80042fa:	4b02      	ldr	r3, [pc, #8]	; (8004304 <main+0xae8>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	805a      	strh	r2, [r3, #2]
					break;
 8004300:	e04a      	b.n	8004398 <main+0xb7c>
 8004302:	bf00      	nop
 8004304:	20000cb8 	.word	0x20000cb8
 8004308:	20000e6c 	.word	0x20000e6c
 800430c:	200002c0 	.word	0x200002c0
 8004310:	200002c4 	.word	0x200002c4
 8004314:	20000410 	.word	0x20000410
 8004318:	40020800 	.word	0x40020800
 800431c:	20000710 	.word	0x20000710
 8004320:	20000444 	.word	0x20000444
 8004324:	20000494 	.word	0x20000494
 8004328:	2000040c 	.word	0x2000040c
 800432c:	40020c00 	.word	0x40020c00
 8004330:	20000778 	.word	0x20000778
							OpVar.holeInd += 1;
 8004334:	4b30      	ldr	r3, [pc, #192]	; (80043f8 <main+0xbdc>)
 8004336:	799b      	ldrb	r3, [r3, #6]
 8004338:	3301      	adds	r3, #1
 800433a:	b2da      	uxtb	r2, r3
 800433c:	4b2e      	ldr	r3, [pc, #184]	; (80043f8 <main+0xbdc>)
 800433e:	719a      	strb	r2, [r3, #6]
							QuinticVar.final_pos = PickTray.Holes_Y[OpVar.holeInd];
 8004340:	4b2d      	ldr	r3, [pc, #180]	; (80043f8 <main+0xbdc>)
 8004342:	799b      	ldrb	r3, [r3, #6]
 8004344:	4a2d      	ldr	r2, [pc, #180]	; (80043fc <main+0xbe0>)
 8004346:	330e      	adds	r3, #14
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	3304      	adds	r3, #4
 800434e:	edd3 7a00 	vldr	s15, [r3]
 8004352:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004356:	ee17 2a90 	vmov	r2, s15
 800435a:	4b29      	ldr	r3, [pc, #164]	; (8004400 <main+0xbe4>)
 800435c:	605a      	str	r2, [r3, #4]
							RunX_Axis(PickTray.Holes_X[OpVar.holeInd]*10, 2500, 3);
 800435e:	4b26      	ldr	r3, [pc, #152]	; (80043f8 <main+0xbdc>)
 8004360:	799b      	ldrb	r3, [r3, #6]
 8004362:	4a26      	ldr	r2, [pc, #152]	; (80043fc <main+0xbe0>)
 8004364:	3306      	adds	r3, #6
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	edd3 7a00 	vldr	s15, [r3]
 800436e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004372:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004376:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800437a:	2203      	movs	r2, #3
 800437c:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8004380:	ee17 0a90 	vmov	r0, s15
 8004384:	f7fe fbca 	bl	8002b1c <RunX_Axis>
							OpVar.task = GoPick;
 8004388:	4b1b      	ldr	r3, [pc, #108]	; (80043f8 <main+0xbdc>)
 800438a:	2200      	movs	r2, #0
 800438c:	715a      	strb	r2, [r3, #5]
							OpState = ControlLoop;
 800438e:	4b1d      	ldr	r3, [pc, #116]	; (8004404 <main+0xbe8>)
 8004390:	2208      	movs	r2, #8
 8004392:	701a      	strb	r2, [r3, #0]
					break;
 8004394:	e000      	b.n	8004398 <main+0xb7c>
				}
 8004396:	bf00      	nop
			break;
 8004398:	e02b      	b.n	80043f2 <main+0xbd6>

			case WaitingHome:
				OpVar.ControllerEnable = 0;
 800439a:	4b17      	ldr	r3, [pc, #92]	; (80043f8 <main+0xbdc>)
 800439c:	2200      	movs	r2, #0
 800439e:	745a      	strb	r2, [r3, #17]
				OpVar.HomingKey = 1;
 80043a0:	4b15      	ldr	r3, [pc, #84]	; (80043f8 <main+0xbdc>)
 80043a2:	2201      	movs	r2, #1
 80043a4:	721a      	strb	r2, [r3, #8]
				OpState = WaitingHome;
 80043a6:	4b17      	ldr	r3, [pc, #92]	; (8004404 <main+0xbe8>)
 80043a8:	220a      	movs	r2, #10
 80043aa:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);
 80043ac:	2200      	movs	r2, #0
 80043ae:	2140      	movs	r1, #64	; 0x40
 80043b0:	4815      	ldr	r0, [pc, #84]	; (8004408 <main+0xbec>)
 80043b2:	f003 f9bb 	bl	800772c <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,30*500);
 80043b6:	4b15      	ldr	r3, [pc, #84]	; (800440c <main+0xbf0>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f643 2298 	movw	r2, #15000	; 0x3a98
 80043be:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80043c0:	e017      	b.n	80043f2 <main+0xbd6>
			}
		}
	  else if (OpVar.ProxStop == 1)
 80043c2:	4b0d      	ldr	r3, [pc, #52]	; (80043f8 <main+0xbdc>)
 80043c4:	79db      	ldrb	r3, [r3, #7]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	f47f aaa5 	bne.w	8003916 <main+0xfa>
	  {
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 80043cc:	4b0f      	ldr	r3, [pc, #60]	; (800440c <main+0xbf0>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2200      	movs	r2, #0
 80043d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80043d4:	f7ff ba9f 	b.w	8003916 <main+0xfa>
			break;
 80043d8:	bf00      	nop
 80043da:	f7ff ba9c 	b.w	8003916 <main+0xfa>
				break;
 80043de:	bf00      	nop
 80043e0:	f7ff ba99 	b.w	8003916 <main+0xfa>
			break;
 80043e4:	bf00      	nop
 80043e6:	f7ff ba96 	b.w	8003916 <main+0xfa>
			break;
 80043ea:	bf00      	nop
 80043ec:	f7ff ba93 	b.w	8003916 <main+0xfa>
			break;
 80043f0:	bf00      	nop
  {
 80043f2:	f7ff ba90 	b.w	8003916 <main+0xfa>
 80043f6:	bf00      	nop
 80043f8:	20000410 	.word	0x20000410
 80043fc:	20000710 	.word	0x20000710
 8004400:	20000444 	.word	0x20000444
 8004404:	2000040c 	.word	0x2000040c
 8004408:	40020800 	.word	0x40020800
 800440c:	20000f34 	.word	0x20000f34

08004410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b094      	sub	sp, #80	; 0x50
 8004414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004416:	f107 0320 	add.w	r3, r7, #32
 800441a:	2230      	movs	r2, #48	; 0x30
 800441c:	2100      	movs	r1, #0
 800441e:	4618      	mov	r0, r3
 8004420:	f008 fd40 	bl	800cea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004424:	f107 030c 	add.w	r3, r7, #12
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	605a      	str	r2, [r3, #4]
 800442e:	609a      	str	r2, [r3, #8]
 8004430:	60da      	str	r2, [r3, #12]
 8004432:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004434:	2300      	movs	r3, #0
 8004436:	60bb      	str	r3, [r7, #8]
 8004438:	4b27      	ldr	r3, [pc, #156]	; (80044d8 <SystemClock_Config+0xc8>)
 800443a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443c:	4a26      	ldr	r2, [pc, #152]	; (80044d8 <SystemClock_Config+0xc8>)
 800443e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004442:	6413      	str	r3, [r2, #64]	; 0x40
 8004444:	4b24      	ldr	r3, [pc, #144]	; (80044d8 <SystemClock_Config+0xc8>)
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444c:	60bb      	str	r3, [r7, #8]
 800444e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004450:	2300      	movs	r3, #0
 8004452:	607b      	str	r3, [r7, #4]
 8004454:	4b21      	ldr	r3, [pc, #132]	; (80044dc <SystemClock_Config+0xcc>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a20      	ldr	r2, [pc, #128]	; (80044dc <SystemClock_Config+0xcc>)
 800445a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800445e:	6013      	str	r3, [r2, #0]
 8004460:	4b1e      	ldr	r3, [pc, #120]	; (80044dc <SystemClock_Config+0xcc>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004468:	607b      	str	r3, [r7, #4]
 800446a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800446c:	2302      	movs	r3, #2
 800446e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004470:	2301      	movs	r3, #1
 8004472:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004474:	2310      	movs	r3, #16
 8004476:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004478:	2302      	movs	r3, #2
 800447a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800447c:	2300      	movs	r3, #0
 800447e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004480:	2308      	movs	r3, #8
 8004482:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8004484:	2364      	movs	r3, #100	; 0x64
 8004486:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004488:	2302      	movs	r3, #2
 800448a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800448c:	2304      	movs	r3, #4
 800448e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004490:	f107 0320 	add.w	r3, r7, #32
 8004494:	4618      	mov	r0, r3
 8004496:	f005 f8ef 	bl	8009678 <HAL_RCC_OscConfig>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80044a0:	f000 fa7a 	bl	8004998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80044a4:	230f      	movs	r3, #15
 80044a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80044a8:	2302      	movs	r3, #2
 80044aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80044ac:	2300      	movs	r3, #0
 80044ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80044b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80044b6:	2300      	movs	r3, #0
 80044b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80044ba:	f107 030c 	add.w	r3, r7, #12
 80044be:	2103      	movs	r1, #3
 80044c0:	4618      	mov	r0, r3
 80044c2:	f005 fb51 	bl	8009b68 <HAL_RCC_ClockConfig>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80044cc:	f000 fa64 	bl	8004998 <Error_Handler>
  }
}
 80044d0:	bf00      	nop
 80044d2:	3750      	adds	r7, #80	; 0x50
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40023800 	.word	0x40023800
 80044dc:	40007000 	.word	0x40007000

080044e0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	4603      	mov	r3, r0
 80044e8:	80fb      	strh	r3, [r7, #6]
		if(GPIO_Pin == GPIO_PIN_11)
 80044ea:	88fb      	ldrh	r3, [r7, #6]
 80044ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044f0:	d12d      	bne.n	800454e <HAL_GPIO_EXTI_Callback+0x6e>
		{
			if(OpVar.HomingKey == 1)
 80044f2:	4b5d      	ldr	r3, [pc, #372]	; (8004668 <HAL_GPIO_EXTI_Callback+0x188>)
 80044f4:	7a1b      	ldrb	r3, [r3, #8]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d11e      	bne.n	8004538 <HAL_GPIO_EXTI_Callback+0x58>
			{
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 80044fa:	4b5c      	ldr	r3, [pc, #368]	; (800466c <HAL_GPIO_EXTI_Callback+0x18c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2200      	movs	r2, #0
 8004500:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COUNTER(&htim2,0);
 8004502:	4b5b      	ldr	r3, [pc, #364]	; (8004670 <HAL_GPIO_EXTI_Callback+0x190>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2200      	movs	r2, #0
 8004508:	625a      	str	r2, [r3, #36]	; 0x24
				QEIData.QEIPosition = __HAL_TIM_GET_COUNTER(&htim2);
 800450a:	4b59      	ldr	r3, [pc, #356]	; (8004670 <HAL_GPIO_EXTI_Callback+0x190>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004510:	461a      	mov	r2, r3
 8004512:	4b58      	ldr	r3, [pc, #352]	; (8004674 <HAL_GPIO_EXTI_Callback+0x194>)
 8004514:	605a      	str	r2, [r3, #4]
				OpVar.ProxStop = 0;
 8004516:	4b54      	ldr	r3, [pc, #336]	; (8004668 <HAL_GPIO_EXTI_Callback+0x188>)
 8004518:	2200      	movs	r2, #0
 800451a:	71da      	strb	r2, [r3, #7]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);
 800451c:	2200      	movs	r2, #0
 800451e:	2140      	movs	r1, #64	; 0x40
 8004520:	4855      	ldr	r0, [pc, #340]	; (8004678 <HAL_GPIO_EXTI_Callback+0x198>)
 8004522:	f003 f903 	bl	800772c <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,30*500);
 8004526:	4b51      	ldr	r3, [pc, #324]	; (800466c <HAL_GPIO_EXTI_Callback+0x18c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f643 2298 	movw	r2, #15000	; 0x3a98
 800452e:	63da      	str	r2, [r3, #60]	; 0x3c
				OpState = WaitingHome;
 8004530:	4b52      	ldr	r3, [pc, #328]	; (800467c <HAL_GPIO_EXTI_Callback+0x19c>)
 8004532:	220a      	movs	r2, #10
 8004534:	701a      	strb	r2, [r3, #0]
 8004536:	e00a      	b.n	800454e <HAL_GPIO_EXTI_Callback+0x6e>
			}
			else if(OpVar.HomingKey == 2)
 8004538:	4b4b      	ldr	r3, [pc, #300]	; (8004668 <HAL_GPIO_EXTI_Callback+0x188>)
 800453a:	7a1b      	ldrb	r3, [r3, #8]
 800453c:	2b02      	cmp	r3, #2
 800453e:	d106      	bne.n	800454e <HAL_GPIO_EXTI_Callback+0x6e>
			{
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8004540:	4b4a      	ldr	r3, [pc, #296]	; (800466c <HAL_GPIO_EXTI_Callback+0x18c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2200      	movs	r2, #0
 8004546:	63da      	str	r2, [r3, #60]	; 0x3c
				OpVar.ProxStop = 1;
 8004548:	4b47      	ldr	r3, [pc, #284]	; (8004668 <HAL_GPIO_EXTI_Callback+0x188>)
 800454a:	2201      	movs	r2, #1
 800454c:	71da      	strb	r2, [r3, #7]
			}
		}
		if (GPIO_Pin == GPIO_PIN_12)
 800454e:	88fb      	ldrh	r3, [r7, #6]
 8004550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004554:	d158      	bne.n	8004608 <HAL_GPIO_EXTI_Callback+0x128>
		{
			if(OpVar.HomingKey == 1)
 8004556:	4b44      	ldr	r3, [pc, #272]	; (8004668 <HAL_GPIO_EXTI_Callback+0x188>)
 8004558:	7a1b      	ldrb	r3, [r3, #8]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d149      	bne.n	80045f2 <HAL_GPIO_EXTI_Callback+0x112>
			{
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 800455e:	4b43      	ldr	r3, [pc, #268]	; (800466c <HAL_GPIO_EXTI_Callback+0x18c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2200      	movs	r2, #0
 8004564:	63da      	str	r2, [r3, #60]	; 0x3c
				OpVar.HomingKey = 0;		//Disable Proximety Homing
 8004566:	4b40      	ldr	r3, [pc, #256]	; (8004668 <HAL_GPIO_EXTI_Callback+0x188>)
 8004568:	2200      	movs	r2, #0
 800456a:	721a      	strb	r2, [r3, #8]
				OpVar.ProxStop = 0;
 800456c:	4b3e      	ldr	r3, [pc, #248]	; (8004668 <HAL_GPIO_EXTI_Callback+0x188>)
 800456e:	2200      	movs	r2, #0
 8004570:	71da      	strb	r2, [r3, #7]
				if(OpState == WaitingHome)
 8004572:	4b42      	ldr	r3, [pc, #264]	; (800467c <HAL_GPIO_EXTI_Callback+0x19c>)
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	2b0a      	cmp	r3, #10
 8004578:	d146      	bne.n	8004608 <HAL_GPIO_EXTI_Callback+0x128>
				{
					OpVar.waitTime = HAL_GetTick() + 1000;
 800457a:	f001 fdff 	bl	800617c <HAL_GetTick>
 800457e:	4603      	mov	r3, r0
 8004580:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004584:	4a38      	ldr	r2, [pc, #224]	; (8004668 <HAL_GPIO_EXTI_Callback+0x188>)
 8004586:	6013      	str	r3, [r2, #0]
					QuinticVar.current_pos = __HAL_TIM_GET_COUNTER(&htim2);	//Dummy PID
 8004588:	4b39      	ldr	r3, [pc, #228]	; (8004670 <HAL_GPIO_EXTI_Callback+0x190>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	461a      	mov	r2, r3
 8004590:	4b3b      	ldr	r3, [pc, #236]	; (8004680 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8004592:	60da      	str	r2, [r3, #12]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 8004594:	2201      	movs	r2, #1
 8004596:	2140      	movs	r1, #64	; 0x40
 8004598:	4837      	ldr	r0, [pc, #220]	; (8004678 <HAL_GPIO_EXTI_Callback+0x198>)
 800459a:	f003 f8c7 	bl	800772c <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, 50*500);
 800459e:	4b33      	ldr	r3, [pc, #204]	; (800466c <HAL_GPIO_EXTI_Callback+0x18c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80045a6:	63da      	str	r2, [r3, #60]	; 0x3c
					OpState = PreHoming;
 80045a8:	4b34      	ldr	r3, [pc, #208]	; (800467c <HAL_GPIO_EXTI_Callback+0x19c>)
 80045aa:	2201      	movs	r2, #1
 80045ac:	701a      	strb	r2, [r3, #0]
					OpVar.MaxWorkspace = __HAL_TIM_GET_COUNTER(&htim2);
 80045ae:	4b30      	ldr	r3, [pc, #192]	; (8004670 <HAL_GPIO_EXTI_Callback+0x190>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	461a      	mov	r2, r3
 80045b6:	4b2c      	ldr	r3, [pc, #176]	; (8004668 <HAL_GPIO_EXTI_Callback+0x188>)
 80045b8:	619a      	str	r2, [r3, #24]
					OpVar.HomePosOffset = __HAL_TIM_GET_COUNTER(&htim2) * 0.5;
 80045ba:	4b2d      	ldr	r3, [pc, #180]	; (8004670 <HAL_GPIO_EXTI_Callback+0x190>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fb ff4b 	bl	800045c <__aeabi_ui2d>
 80045c6:	f04f 0200 	mov.w	r2, #0
 80045ca:	4b2e      	ldr	r3, [pc, #184]	; (8004684 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80045cc:	f7fb ffc0 	bl	8000550 <__aeabi_dmul>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4610      	mov	r0, r2
 80045d6:	4619      	mov	r1, r3
 80045d8:	f7fc fa92 	bl	8000b00 <__aeabi_d2uiz>
 80045dc:	4603      	mov	r3, r0
 80045de:	4a22      	ldr	r2, [pc, #136]	; (8004668 <HAL_GPIO_EXTI_Callback+0x188>)
 80045e0:	60d3      	str	r3, [r2, #12]
					OpVar.ControllerEnable = 1;	//Enable Controller
 80045e2:	4b21      	ldr	r3, [pc, #132]	; (8004668 <HAL_GPIO_EXTI_Callback+0x188>)
 80045e4:	2201      	movs	r2, #1
 80045e6:	745a      	strb	r2, [r3, #17]
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, 0);
 80045e8:	4b20      	ldr	r3, [pc, #128]	; (800466c <HAL_GPIO_EXTI_Callback+0x18c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2200      	movs	r2, #0
 80045ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80045f0:	e00a      	b.n	8004608 <HAL_GPIO_EXTI_Callback+0x128>
				}
			}
			else if(OpVar.HomingKey == 2)
 80045f2:	4b1d      	ldr	r3, [pc, #116]	; (8004668 <HAL_GPIO_EXTI_Callback+0x188>)
 80045f4:	7a1b      	ldrb	r3, [r3, #8]
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d106      	bne.n	8004608 <HAL_GPIO_EXTI_Callback+0x128>
			{
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 80045fa:	4b1c      	ldr	r3, [pc, #112]	; (800466c <HAL_GPIO_EXTI_Callback+0x18c>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2200      	movs	r2, #0
 8004600:	63da      	str	r2, [r3, #60]	; 0x3c
				OpVar.ProxStop = 1;
 8004602:	4b19      	ldr	r3, [pc, #100]	; (8004668 <HAL_GPIO_EXTI_Callback+0x188>)
 8004604:	2201      	movs	r2, #1
 8004606:	71da      	strb	r2, [r3, #7]
			}
		}

		if (GPIO_Pin == GPIO_PIN_2){
 8004608:	88fb      	ldrh	r3, [r7, #6]
 800460a:	2b04      	cmp	r3, #4
 800460c:	d127      	bne.n	800465e <HAL_GPIO_EXTI_Callback+0x17e>
			static uint8_t count = 0;

			if(count == 0){
 800460e:	4b1e      	ldr	r3, [pc, #120]	; (8004688 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10e      	bne.n	8004634 <HAL_GPIO_EXTI_Callback+0x154>
				Stamp = 1;
 8004616:	4b1d      	ldr	r3, [pc, #116]	; (800468c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8004618:	2201      	movs	r2, #1
 800461a:	701a      	strb	r2, [r3, #0]
				TestState = GripperEmerTrigger;
 800461c:	4b1c      	ldr	r3, [pc, #112]	; (8004690 <HAL_GPIO_EXTI_Callback+0x1b0>)
 800461e:	2208      	movs	r2, #8
 8004620:	701a      	strb	r2, [r3, #0]
				TestMode();
 8004622:	f7fc ff0f 	bl	8001444 <TestMode>
				count = 1;
 8004626:	4b18      	ldr	r3, [pc, #96]	; (8004688 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8004628:	2201      	movs	r2, #1
 800462a:	701a      	strb	r2, [r3, #0]
				OpVar.ProxStop = 1;
 800462c:	4b0e      	ldr	r3, [pc, #56]	; (8004668 <HAL_GPIO_EXTI_Callback+0x188>)
 800462e:	2201      	movs	r2, #1
 8004630:	71da      	strb	r2, [r3, #7]
				count = 0;
				OpVar.ProxStop = 0;
				OpState = Init;
			}
		}
}
 8004632:	e014      	b.n	800465e <HAL_GPIO_EXTI_Callback+0x17e>
			else if(count == 1){
 8004634:	4b14      	ldr	r3, [pc, #80]	; (8004688 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d110      	bne.n	800465e <HAL_GPIO_EXTI_Callback+0x17e>
				Stamp = 1;
 800463c:	4b13      	ldr	r3, [pc, #76]	; (800468c <HAL_GPIO_EXTI_Callback+0x1ac>)
 800463e:	2201      	movs	r2, #1
 8004640:	701a      	strb	r2, [r3, #0]
				TestState = GripperEmerExit;
 8004642:	4b13      	ldr	r3, [pc, #76]	; (8004690 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8004644:	2209      	movs	r2, #9
 8004646:	701a      	strb	r2, [r3, #0]
				TestMode();
 8004648:	f7fc fefc 	bl	8001444 <TestMode>
				count = 0;
 800464c:	4b0e      	ldr	r3, [pc, #56]	; (8004688 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800464e:	2200      	movs	r2, #0
 8004650:	701a      	strb	r2, [r3, #0]
				OpVar.ProxStop = 0;
 8004652:	4b05      	ldr	r3, [pc, #20]	; (8004668 <HAL_GPIO_EXTI_Callback+0x188>)
 8004654:	2200      	movs	r2, #0
 8004656:	71da      	strb	r2, [r3, #7]
				OpState = Init;
 8004658:	4b08      	ldr	r3, [pc, #32]	; (800467c <HAL_GPIO_EXTI_Callback+0x19c>)
 800465a:	2200      	movs	r2, #0
 800465c:	701a      	strb	r2, [r3, #0]
}
 800465e:	bf00      	nop
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	20000410 	.word	0x20000410
 800466c:	20000f34 	.word	0x20000f34
 8004670:	20000e80 	.word	0x20000e80
 8004674:	20000438 	.word	0x20000438
 8004678:	40020800 	.word	0x40020800
 800467c:	2000040c 	.word	0x2000040c
 8004680:	20000444 	.word	0x20000444
 8004684:	3fe00000 	.word	0x3fe00000
 8004688:	20000e7c 	.word	0x20000e7c
 800468c:	200002c0 	.word	0x200002c0
 8004690:	200002c4 	.word	0x200002c4

08004694 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a2b      	ldr	r2, [pc, #172]	; (800474c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d14f      	bne.n	8004744 <HAL_TIM_PeriodElapsedCallback+0xb0>
	{
		QEIGetFeedback(&QEIData, 2500);
 80046a4:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80046a8:	4829      	ldr	r0, [pc, #164]	; (8004750 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80046aa:	f7fe f9f5 	bl	8002a98 <QEIGetFeedback>
		KF.z = QEIData.QEIVelocity;
 80046ae:	4b28      	ldr	r3, [pc, #160]	; (8004750 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	4a28      	ldr	r2, [pc, #160]	; (8004754 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80046b4:	65d3      	str	r3, [r2, #92]	; 0x5c
		kalman_filter();
 80046b6:	f7fd f951 	bl	800195c <kalman_filter>
		ZEstimateVelocity = KF.x_hat[1];
 80046ba:	4b26      	ldr	r3, [pc, #152]	; (8004754 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	4a26      	ldr	r2, [pc, #152]	; (8004758 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80046c0:	6013      	str	r3, [r2, #0]

		if(OpVar.ControllerEnable == 1)
 80046c2:	4b26      	ldr	r3, [pc, #152]	; (800475c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80046c4:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d12e      	bne.n	800472a <HAL_TIM_PeriodElapsedCallback+0x96>
		{
			QuinticRun(&QuinticVar,PositionLoop.ESS,0.0004);
 80046cc:	4b24      	ldr	r3, [pc, #144]	; (8004760 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80046ce:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 80046d2:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8004764 <HAL_TIM_PeriodElapsedCallback+0xd0>
 80046d6:	4619      	mov	r1, r3
 80046d8:	4823      	ldr	r0, [pc, #140]	; (8004768 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80046da:	f7fe f977 	bl	80029cc <QuinticRun>
			CascadeLoop(&PositionLoop, &VelocityLoop, QEIData.QEIPosition, KF.x_hat[1],&QuinticVar, 3);
 80046de:	4b1c      	ldr	r3, [pc, #112]	; (8004750 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	ee07 3a90 	vmov	s15, r3
 80046e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046ea:	4b1a      	ldr	r3, [pc, #104]	; (8004754 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80046ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80046f0:	eeb0 1a08 	vmov.f32	s2, #8	; 0x40400000  3.0
 80046f4:	4a1c      	ldr	r2, [pc, #112]	; (8004768 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80046f6:	eef0 0a47 	vmov.f32	s1, s14
 80046fa:	eeb0 0a67 	vmov.f32	s0, s15
 80046fe:	491b      	ldr	r1, [pc, #108]	; (800476c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8004700:	4817      	ldr	r0, [pc, #92]	; (8004760 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8004702:	f7fd fdcd 	bl	80022a0 <CascadeLoop>
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,abs(VelocityLoop.U));
 8004706:	4b19      	ldr	r3, [pc, #100]	; (800476c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800470e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004712:	4b17      	ldr	r3, [pc, #92]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, VelocityLoop.MotorDir);
 8004718:	4b14      	ldr	r3, [pc, #80]	; (800476c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800471a:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 800471e:	b2db      	uxtb	r3, r3
 8004720:	461a      	mov	r2, r3
 8004722:	2140      	movs	r1, #64	; 0x40
 8004724:	4813      	ldr	r0, [pc, #76]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004726:	f003 f801 	bl	800772c <HAL_GPIO_WritePin>
		}

		if(OpVar.JoyEnable == 1)
 800472a:	4b0c      	ldr	r3, [pc, #48]	; (800475c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800472c:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d107      	bne.n	8004744 <HAL_TIM_PeriodElapsedCallback+0xb0>
		{
			CheckJoystick();
 8004734:	f7fc fec6 	bl	80014c4 <CheckJoystick>
			CheckButton();
 8004738:	f7fc ff38 	bl	80015ac <CheckButton>
			joyYjog();
 800473c:	f000 f81c 	bl	8004778 <joyYjog>
			//joyXjog();
			CollectPosition();
 8004740:	f000 f84e 	bl	80047e0 <CollectPosition>
		}
	}
}
 8004744:	bf00      	nop
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	20000fe8 	.word	0x20000fe8
 8004750:	20000438 	.word	0x20000438
 8004754:	200004f4 	.word	0x200004f4
 8004758:	2000070c 	.word	0x2000070c
 800475c:	20000410 	.word	0x20000410
 8004760:	20000494 	.word	0x20000494
 8004764:	39d1b717 	.word	0x39d1b717
 8004768:	20000444 	.word	0x20000444
 800476c:	200004c4 	.word	0x200004c4
 8004770:	20000f34 	.word	0x20000f34
 8004774:	40020800 	.word	0x40020800

08004778 <joyYjog>:
    if (Joy.status == 1) {
        registerFrame[0x40].U16 = 0x0001;
    }
}
void joyYjog()
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
    if (Joy.Y == 1) {
 800477c:	4b15      	ldr	r3, [pc, #84]	; (80047d4 <joyYjog+0x5c>)
 800477e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d10a      	bne.n	800479c <joyYjog+0x24>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, SET);
 8004786:	2201      	movs	r2, #1
 8004788:	2140      	movs	r1, #64	; 0x40
 800478a:	4813      	ldr	r0, [pc, #76]	; (80047d8 <joyYjog+0x60>)
 800478c:	f002 ffce 	bl	800772c <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 20000);
 8004790:	4b12      	ldr	r3, [pc, #72]	; (80047dc <joyYjog+0x64>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f644 6220 	movw	r2, #20000	; 0x4e20
 8004798:	63da      	str	r2, [r3, #60]	; 0x3c
    } else if (Joy.Y == 0) {
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
    }


}
 800479a:	e019      	b.n	80047d0 <joyYjog+0x58>
    } else if (Joy.Y == -1) {
 800479c:	4b0d      	ldr	r3, [pc, #52]	; (80047d4 <joyYjog+0x5c>)
 800479e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80047a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a6:	d10a      	bne.n	80047be <joyYjog+0x46>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, RESET);
 80047a8:	2200      	movs	r2, #0
 80047aa:	2140      	movs	r1, #64	; 0x40
 80047ac:	480a      	ldr	r0, [pc, #40]	; (80047d8 <joyYjog+0x60>)
 80047ae:	f002 ffbd 	bl	800772c <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 20000);
 80047b2:	4b0a      	ldr	r3, [pc, #40]	; (80047dc <joyYjog+0x64>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80047ba:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80047bc:	e008      	b.n	80047d0 <joyYjog+0x58>
    } else if (Joy.Y == 0) {
 80047be:	4b05      	ldr	r3, [pc, #20]	; (80047d4 <joyYjog+0x5c>)
 80047c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d103      	bne.n	80047d0 <joyYjog+0x58>
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80047c8:	4b04      	ldr	r3, [pc, #16]	; (80047dc <joyYjog+0x64>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2200      	movs	r2, #0
 80047ce:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80047d0:	bf00      	nop
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	200002f8 	.word	0x200002f8
 80047d8:	40020800 	.word	0x40020800
 80047dc:	20000f34 	.word	0x20000f34

080047e0 <CollectPosition>:
void CollectPosition()
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0

    static uint8_t PreReset = 0;
    if (PreReset == 0 && Joy.status == 3) {
 80047e6:	4b55      	ldr	r3, [pc, #340]	; (800493c <CollectPosition+0x15c>)
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d114      	bne.n	8004818 <CollectPosition+0x38>
 80047ee:	4b54      	ldr	r3, [pc, #336]	; (8004940 <CollectPosition+0x160>)
 80047f0:	889b      	ldrh	r3, [r3, #4]
 80047f2:	2b03      	cmp	r3, #3
 80047f4:	d110      	bne.n	8004818 <CollectPosition+0x38>
        SubState = TrayP1;
 80047f6:	4b53      	ldr	r3, [pc, #332]	; (8004944 <CollectPosition+0x164>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i <= 7; i++) {
 80047fc:	2300      	movs	r3, #0
 80047fe:	71fb      	strb	r3, [r7, #7]
 8004800:	e007      	b.n	8004812 <CollectPosition+0x32>
            TrayPoint[i] = 0;
 8004802:	79fb      	ldrb	r3, [r7, #7]
 8004804:	4a50      	ldr	r2, [pc, #320]	; (8004948 <CollectPosition+0x168>)
 8004806:	2100      	movs	r1, #0
 8004808:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (uint8_t i = 0; i <= 7; i++) {
 800480c:	79fb      	ldrb	r3, [r7, #7]
 800480e:	3301      	adds	r3, #1
 8004810:	71fb      	strb	r3, [r7, #7]
 8004812:	79fb      	ldrb	r3, [r7, #7]
 8004814:	2b07      	cmp	r3, #7
 8004816:	d9f4      	bls.n	8004802 <CollectPosition+0x22>
        }
    }

    static uint8_t PreRec = 0;

    switch (SubState) {
 8004818:	4b4a      	ldr	r3, [pc, #296]	; (8004944 <CollectPosition+0x164>)
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b03      	cmp	r3, #3
 800481e:	d87f      	bhi.n	8004920 <CollectPosition+0x140>
 8004820:	a201      	add	r2, pc, #4	; (adr r2, 8004828 <CollectPosition+0x48>)
 8004822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004826:	bf00      	nop
 8004828:	08004839 	.word	0x08004839
 800482c:	08004871 	.word	0x08004871
 8004830:	080048a9 	.word	0x080048a9
 8004834:	080048e1 	.word	0x080048e1
    case TrayP1:

        if (Joy.status == 2 && PreRec == 0) {
 8004838:	4b41      	ldr	r3, [pc, #260]	; (8004940 <CollectPosition+0x160>)
 800483a:	889b      	ldrh	r3, [r3, #4]
 800483c:	2b02      	cmp	r3, #2
 800483e:	d168      	bne.n	8004912 <CollectPosition+0x132>
 8004840:	4b42      	ldr	r3, [pc, #264]	; (800494c <CollectPosition+0x16c>)
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d164      	bne.n	8004912 <CollectPosition+0x132>
            SubState = TrayP2;
 8004848:	4b3e      	ldr	r3, [pc, #248]	; (8004944 <CollectPosition+0x164>)
 800484a:	2201      	movs	r2, #1
 800484c:	701a      	strb	r2, [r3, #0]
            TrayPoint[0] = Uint2Int(registerFrame[0x44].U16);
 800484e:	4b40      	ldr	r3, [pc, #256]	; (8004950 <CollectPosition+0x170>)
 8004850:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8004854:	4618      	mov	r0, r3
 8004856:	f000 f87f 	bl	8004958 <Uint2Int>
 800485a:	4603      	mov	r3, r0
 800485c:	461a      	mov	r2, r3
 800485e:	4b3a      	ldr	r3, [pc, #232]	; (8004948 <CollectPosition+0x168>)
 8004860:	601a      	str	r2, [r3, #0]
            TrayPoint[1] = __HAL_TIM_GET_COUNTER(&htim2);
 8004862:	4b3c      	ldr	r3, [pc, #240]	; (8004954 <CollectPosition+0x174>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	461a      	mov	r2, r3
 800486a:	4b37      	ldr	r3, [pc, #220]	; (8004948 <CollectPosition+0x168>)
 800486c:	605a      	str	r2, [r3, #4]
        }
        break;
 800486e:	e050      	b.n	8004912 <CollectPosition+0x132>
    case TrayP2:

        if (Joy.status == 2 && PreRec == 0) {
 8004870:	4b33      	ldr	r3, [pc, #204]	; (8004940 <CollectPosition+0x160>)
 8004872:	889b      	ldrh	r3, [r3, #4]
 8004874:	2b02      	cmp	r3, #2
 8004876:	d14e      	bne.n	8004916 <CollectPosition+0x136>
 8004878:	4b34      	ldr	r3, [pc, #208]	; (800494c <CollectPosition+0x16c>)
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d14a      	bne.n	8004916 <CollectPosition+0x136>
            SubState = TrayP3;
 8004880:	4b30      	ldr	r3, [pc, #192]	; (8004944 <CollectPosition+0x164>)
 8004882:	2202      	movs	r2, #2
 8004884:	701a      	strb	r2, [r3, #0]
            TrayPoint[2] = Uint2Int(registerFrame[0x44].U16);
 8004886:	4b32      	ldr	r3, [pc, #200]	; (8004950 <CollectPosition+0x170>)
 8004888:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800488c:	4618      	mov	r0, r3
 800488e:	f000 f863 	bl	8004958 <Uint2Int>
 8004892:	4603      	mov	r3, r0
 8004894:	461a      	mov	r2, r3
 8004896:	4b2c      	ldr	r3, [pc, #176]	; (8004948 <CollectPosition+0x168>)
 8004898:	609a      	str	r2, [r3, #8]
            TrayPoint[3] = __HAL_TIM_GET_COUNTER(&htim2);
 800489a:	4b2e      	ldr	r3, [pc, #184]	; (8004954 <CollectPosition+0x174>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	461a      	mov	r2, r3
 80048a2:	4b29      	ldr	r3, [pc, #164]	; (8004948 <CollectPosition+0x168>)
 80048a4:	60da      	str	r2, [r3, #12]
        }
        break;
 80048a6:	e036      	b.n	8004916 <CollectPosition+0x136>
    case TrayP3:

        if (Joy.status == 2 && PreRec == 0) {
 80048a8:	4b25      	ldr	r3, [pc, #148]	; (8004940 <CollectPosition+0x160>)
 80048aa:	889b      	ldrh	r3, [r3, #4]
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d134      	bne.n	800491a <CollectPosition+0x13a>
 80048b0:	4b26      	ldr	r3, [pc, #152]	; (800494c <CollectPosition+0x16c>)
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d130      	bne.n	800491a <CollectPosition+0x13a>
            SubState = TrayP4;
 80048b8:	4b22      	ldr	r3, [pc, #136]	; (8004944 <CollectPosition+0x164>)
 80048ba:	2203      	movs	r2, #3
 80048bc:	701a      	strb	r2, [r3, #0]
            TrayPoint[4] = Uint2Int(registerFrame[0x44].U16);
 80048be:	4b24      	ldr	r3, [pc, #144]	; (8004950 <CollectPosition+0x170>)
 80048c0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 f847 	bl	8004958 <Uint2Int>
 80048ca:	4603      	mov	r3, r0
 80048cc:	461a      	mov	r2, r3
 80048ce:	4b1e      	ldr	r3, [pc, #120]	; (8004948 <CollectPosition+0x168>)
 80048d0:	611a      	str	r2, [r3, #16]
            TrayPoint[5] = __HAL_TIM_GET_COUNTER(&htim2);
 80048d2:	4b20      	ldr	r3, [pc, #128]	; (8004954 <CollectPosition+0x174>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	461a      	mov	r2, r3
 80048da:	4b1b      	ldr	r3, [pc, #108]	; (8004948 <CollectPosition+0x168>)
 80048dc:	615a      	str	r2, [r3, #20]

        }
        break;
 80048de:	e01c      	b.n	800491a <CollectPosition+0x13a>
    case TrayP4:

        if (Joy.status == 2 && PreRec == 0) {
 80048e0:	4b17      	ldr	r3, [pc, #92]	; (8004940 <CollectPosition+0x160>)
 80048e2:	889b      	ldrh	r3, [r3, #4]
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d11a      	bne.n	800491e <CollectPosition+0x13e>
 80048e8:	4b18      	ldr	r3, [pc, #96]	; (800494c <CollectPosition+0x16c>)
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d116      	bne.n	800491e <CollectPosition+0x13e>
            TrayPoint[6] = Uint2Int(registerFrame[0x44].U16);
 80048f0:	4b17      	ldr	r3, [pc, #92]	; (8004950 <CollectPosition+0x170>)
 80048f2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 f82e 	bl	8004958 <Uint2Int>
 80048fc:	4603      	mov	r3, r0
 80048fe:	461a      	mov	r2, r3
 8004900:	4b11      	ldr	r3, [pc, #68]	; (8004948 <CollectPosition+0x168>)
 8004902:	619a      	str	r2, [r3, #24]
            TrayPoint[7] = __HAL_TIM_GET_COUNTER(&htim2);
 8004904:	4b13      	ldr	r3, [pc, #76]	; (8004954 <CollectPosition+0x174>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	461a      	mov	r2, r3
 800490c:	4b0e      	ldr	r3, [pc, #56]	; (8004948 <CollectPosition+0x168>)
 800490e:	61da      	str	r2, [r3, #28]
        }
        break;
 8004910:	e005      	b.n	800491e <CollectPosition+0x13e>
        break;
 8004912:	bf00      	nop
 8004914:	e004      	b.n	8004920 <CollectPosition+0x140>
        break;
 8004916:	bf00      	nop
 8004918:	e002      	b.n	8004920 <CollectPosition+0x140>
        break;
 800491a:	bf00      	nop
 800491c:	e000      	b.n	8004920 <CollectPosition+0x140>
        break;
 800491e:	bf00      	nop

    }

    PreReset = Joy.status;
 8004920:	4b07      	ldr	r3, [pc, #28]	; (8004940 <CollectPosition+0x160>)
 8004922:	889b      	ldrh	r3, [r3, #4]
 8004924:	b2da      	uxtb	r2, r3
 8004926:	4b05      	ldr	r3, [pc, #20]	; (800493c <CollectPosition+0x15c>)
 8004928:	701a      	strb	r2, [r3, #0]
    PreRec = Joy.status;
 800492a:	4b05      	ldr	r3, [pc, #20]	; (8004940 <CollectPosition+0x160>)
 800492c:	889b      	ldrh	r3, [r3, #4]
 800492e:	b2da      	uxtb	r2, r3
 8004930:	4b06      	ldr	r3, [pc, #24]	; (800494c <CollectPosition+0x16c>)
 8004932:	701a      	strb	r2, [r3, #0]
}
 8004934:	bf00      	nop
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	20000e7d 	.word	0x20000e7d
 8004940:	200002f8 	.word	0x200002f8
 8004944:	20000e48 	.word	0x20000e48
 8004948:	20000e4c 	.word	0x20000e4c
 800494c:	20000e7e 	.word	0x20000e7e
 8004950:	20000cb8 	.word	0x20000cb8
 8004954:	20000e80 	.word	0x20000e80

08004958 <Uint2Int>:

int16_t Uint2Int(uint16_t underflow)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	4603      	mov	r3, r0
 8004960:	80fb      	strh	r3, [r7, #6]
    uint16_t integer = 0;
 8004962:	2300      	movs	r3, #0
 8004964:	81bb      	strh	r3, [r7, #12]
    int16_t bitwise = 0;
 8004966:	2300      	movs	r3, #0
 8004968:	81fb      	strh	r3, [r7, #14]

    if (underflow > 40000) {
 800496a:	88fb      	ldrh	r3, [r7, #6]
 800496c:	f649 4240 	movw	r2, #40000	; 0x9c40
 8004970:	4293      	cmp	r3, r2
 8004972:	d907      	bls.n	8004984 <Uint2Int+0x2c>
        integer = (uint16_t) (UINT16_MAX - underflow + 1);
 8004974:	88fb      	ldrh	r3, [r7, #6]
 8004976:	425b      	negs	r3, r3
 8004978:	81bb      	strh	r3, [r7, #12]
        bitwise = ~integer;
 800497a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800497e:	43db      	mvns	r3, r3
 8004980:	81fb      	strh	r3, [r7, #14]
 8004982:	e001      	b.n	8004988 <Uint2Int+0x30>
    } else {
        bitwise = underflow;
 8004984:	88fb      	ldrh	r3, [r7, #6]
 8004986:	81fb      	strh	r3, [r7, #14]
    }
    return bitwise;
 8004988:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 800498c:	4618      	mov	r0, r3
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800499c:	b672      	cpsid	i
}
 800499e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80049a0:	e7fe      	b.n	80049a0 <Error_Handler+0x8>
	...

080049a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049aa:	2300      	movs	r3, #0
 80049ac:	607b      	str	r3, [r7, #4]
 80049ae:	4b10      	ldr	r3, [pc, #64]	; (80049f0 <HAL_MspInit+0x4c>)
 80049b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b2:	4a0f      	ldr	r2, [pc, #60]	; (80049f0 <HAL_MspInit+0x4c>)
 80049b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049b8:	6453      	str	r3, [r2, #68]	; 0x44
 80049ba:	4b0d      	ldr	r3, [pc, #52]	; (80049f0 <HAL_MspInit+0x4c>)
 80049bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049c2:	607b      	str	r3, [r7, #4]
 80049c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80049c6:	2300      	movs	r3, #0
 80049c8:	603b      	str	r3, [r7, #0]
 80049ca:	4b09      	ldr	r3, [pc, #36]	; (80049f0 <HAL_MspInit+0x4c>)
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	4a08      	ldr	r2, [pc, #32]	; (80049f0 <HAL_MspInit+0x4c>)
 80049d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d4:	6413      	str	r3, [r2, #64]	; 0x40
 80049d6:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <HAL_MspInit+0x4c>)
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049de:	603b      	str	r3, [r7, #0]
 80049e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80049e2:	2007      	movs	r0, #7
 80049e4:	f002 f8a8 	bl	8006b38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049e8:	bf00      	nop
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	40023800 	.word	0x40023800

080049f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80049f8:	e7fe      	b.n	80049f8 <NMI_Handler+0x4>

080049fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049fa:	b480      	push	{r7}
 80049fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049fe:	e7fe      	b.n	80049fe <HardFault_Handler+0x4>

08004a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a00:	b480      	push	{r7}
 8004a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a04:	e7fe      	b.n	8004a04 <MemManage_Handler+0x4>

08004a06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a06:	b480      	push	{r7}
 8004a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a0a:	e7fe      	b.n	8004a0a <BusFault_Handler+0x4>

08004a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a10:	e7fe      	b.n	8004a10 <UsageFault_Handler+0x4>

08004a12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a12:	b480      	push	{r7}
 8004a14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a16:	bf00      	nop
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a24:	bf00      	nop
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a32:	bf00      	nop
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a40:	f001 fb88 	bl	8006154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a44:	bf00      	nop
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004a4c:	2004      	movs	r0, #4
 8004a4e:	f002 fe87 	bl	8007760 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004a52:	bf00      	nop
 8004a54:	bd80      	pop	{r7, pc}
	...

08004a58 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004a5c:	4802      	ldr	r0, [pc, #8]	; (8004a68 <DMA1_Stream6_IRQHandler+0x10>)
 8004a5e:	f002 fa45 	bl	8006eec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004a62:	bf00      	nop
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20001278 	.word	0x20001278

08004a6c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8004a70:	4802      	ldr	r0, [pc, #8]	; (8004a7c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8004a72:	f005 fee3 	bl	800a83c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004a76:	bf00      	nop
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	20001150 	.word	0x20001150

08004a80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004a84:	4802      	ldr	r0, [pc, #8]	; (8004a90 <TIM2_IRQHandler+0x10>)
 8004a86:	f005 fed9 	bl	800a83c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004a8a:	bf00      	nop
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	20000e80 	.word	0x20000e80

08004a94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004a98:	4802      	ldr	r0, [pc, #8]	; (8004aa4 <TIM3_IRQHandler+0x10>)
 8004a9a:	f005 fecf 	bl	800a83c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004a9e:	bf00      	nop
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20000f34 	.word	0x20000f34

08004aa8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004aac:	4802      	ldr	r0, [pc, #8]	; (8004ab8 <TIM4_IRQHandler+0x10>)
 8004aae:	f005 fec5 	bl	800a83c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004ab2:	bf00      	nop
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20000fe8 	.word	0x20000fe8

08004abc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004ac0:	4802      	ldr	r0, [pc, #8]	; (8004acc <I2C1_EV_IRQHandler+0x10>)
 8004ac2:	f003 f8fd 	bl	8007cc0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004ac6:	bf00      	nop
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	200003b8 	.word	0x200003b8

08004ad0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004ad4:	4802      	ldr	r0, [pc, #8]	; (8004ae0 <I2C1_ER_IRQHandler+0x10>)
 8004ad6:	f003 fa64 	bl	8007fa2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004ada:	bf00      	nop
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	200003b8 	.word	0x200003b8

08004ae4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004ae8:	4802      	ldr	r0, [pc, #8]	; (8004af4 <USART2_IRQHandler+0x10>)
 8004aea:	f007 f95d 	bl	800bda8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004aee:	bf00      	nop
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20001204 	.word	0x20001204

08004af8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004afc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004b00:	f002 fe2e 	bl	8007760 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004b04:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004b08:	f002 fe2a 	bl	8007760 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004b0c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004b10:	f002 fe26 	bl	8007760 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004b14:	bf00      	nop
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004b1c:	4802      	ldr	r0, [pc, #8]	; (8004b28 <DMA2_Stream0_IRQHandler+0x10>)
 8004b1e:	f002 f9e5 	bl	8006eec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004b22:	bf00      	nop
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	20000358 	.word	0x20000358

08004b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b30:	4b06      	ldr	r3, [pc, #24]	; (8004b4c <SystemInit+0x20>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b36:	4a05      	ldr	r2, [pc, #20]	; (8004b4c <SystemInit+0x20>)
 8004b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b40:	bf00      	nop
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	e000ed00 	.word	0xe000ed00

08004b50 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b08c      	sub	sp, #48	; 0x30
 8004b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004b56:	f107 030c 	add.w	r3, r7, #12
 8004b5a:	2224      	movs	r2, #36	; 0x24
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f008 f9a0 	bl	800cea4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b64:	1d3b      	adds	r3, r7, #4
 8004b66:	2200      	movs	r2, #0
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004b6c:	4b21      	ldr	r3, [pc, #132]	; (8004bf4 <MX_TIM2_Init+0xa4>)
 8004b6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004b72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004b74:	4b1f      	ldr	r3, [pc, #124]	; (8004bf4 <MX_TIM2_Init+0xa4>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b7a:	4b1e      	ldr	r3, [pc, #120]	; (8004bf4 <MX_TIM2_Init+0xa4>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004b80:	4b1c      	ldr	r3, [pc, #112]	; (8004bf4 <MX_TIM2_Init+0xa4>)
 8004b82:	f04f 32ff 	mov.w	r2, #4294967295
 8004b86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b88:	4b1a      	ldr	r3, [pc, #104]	; (8004bf4 <MX_TIM2_Init+0xa4>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b8e:	4b19      	ldr	r3, [pc, #100]	; (8004bf4 <MX_TIM2_Init+0xa4>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004b94:	2303      	movs	r3, #3
 8004b96:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004bac:	2301      	movs	r3, #1
 8004bae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004bb8:	f107 030c 	add.w	r3, r7, #12
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	480d      	ldr	r0, [pc, #52]	; (8004bf4 <MX_TIM2_Init+0xa4>)
 8004bc0:	f005 fcfa 	bl	800a5b8 <HAL_TIM_Encoder_Init>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8004bca:	f7ff fee5 	bl	8004998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004bd6:	1d3b      	adds	r3, r7, #4
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4806      	ldr	r0, [pc, #24]	; (8004bf4 <MX_TIM2_Init+0xa4>)
 8004bdc:	f006 fe04 	bl	800b7e8 <HAL_TIMEx_MasterConfigSynchronization>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8004be6:	f7ff fed7 	bl	8004998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004bea:	bf00      	nop
 8004bec:	3730      	adds	r7, #48	; 0x30
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	20000e80 	.word	0x20000e80

08004bf8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08e      	sub	sp, #56	; 0x38
 8004bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004bfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	605a      	str	r2, [r3, #4]
 8004c08:	609a      	str	r2, [r3, #8]
 8004c0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c0c:	f107 0320 	add.w	r3, r7, #32
 8004c10:	2200      	movs	r2, #0
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c16:	1d3b      	adds	r3, r7, #4
 8004c18:	2200      	movs	r2, #0
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	605a      	str	r2, [r3, #4]
 8004c1e:	609a      	str	r2, [r3, #8]
 8004c20:	60da      	str	r2, [r3, #12]
 8004c22:	611a      	str	r2, [r3, #16]
 8004c24:	615a      	str	r2, [r3, #20]
 8004c26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004c28:	4b2c      	ldr	r3, [pc, #176]	; (8004cdc <MX_TIM3_Init+0xe4>)
 8004c2a:	4a2d      	ldr	r2, [pc, #180]	; (8004ce0 <MX_TIM3_Init+0xe8>)
 8004c2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004c2e:	4b2b      	ldr	r3, [pc, #172]	; (8004cdc <MX_TIM3_Init+0xe4>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c34:	4b29      	ldr	r3, [pc, #164]	; (8004cdc <MX_TIM3_Init+0xe4>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8004c3a:	4b28      	ldr	r3, [pc, #160]	; (8004cdc <MX_TIM3_Init+0xe4>)
 8004c3c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8004c40:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c42:	4b26      	ldr	r3, [pc, #152]	; (8004cdc <MX_TIM3_Init+0xe4>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c48:	4b24      	ldr	r3, [pc, #144]	; (8004cdc <MX_TIM3_Init+0xe4>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004c4e:	4823      	ldr	r0, [pc, #140]	; (8004cdc <MX_TIM3_Init+0xe4>)
 8004c50:	f005 f9aa 	bl	8009fa8 <HAL_TIM_Base_Init>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004c5a:	f7ff fe9d 	bl	8004998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c62:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004c64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c68:	4619      	mov	r1, r3
 8004c6a:	481c      	ldr	r0, [pc, #112]	; (8004cdc <MX_TIM3_Init+0xe4>)
 8004c6c:	f006 f82c 	bl	800acc8 <HAL_TIM_ConfigClockSource>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004c76:	f7ff fe8f 	bl	8004998 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004c7a:	4818      	ldr	r0, [pc, #96]	; (8004cdc <MX_TIM3_Init+0xe4>)
 8004c7c:	f005 fab8 	bl	800a1f0 <HAL_TIM_PWM_Init>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004c86:	f7ff fe87 	bl	8004998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004c92:	f107 0320 	add.w	r3, r7, #32
 8004c96:	4619      	mov	r1, r3
 8004c98:	4810      	ldr	r0, [pc, #64]	; (8004cdc <MX_TIM3_Init+0xe4>)
 8004c9a:	f006 fda5 	bl	800b7e8 <HAL_TIMEx_MasterConfigSynchronization>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d001      	beq.n	8004ca8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004ca4:	f7ff fe78 	bl	8004998 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ca8:	2360      	movs	r3, #96	; 0x60
 8004caa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004cac:	2300      	movs	r3, #0
 8004cae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004cb8:	1d3b      	adds	r3, r7, #4
 8004cba:	2208      	movs	r2, #8
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4807      	ldr	r0, [pc, #28]	; (8004cdc <MX_TIM3_Init+0xe4>)
 8004cc0:	f005 ff40 	bl	800ab44 <HAL_TIM_PWM_ConfigChannel>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004cca:	f7ff fe65 	bl	8004998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004cce:	4803      	ldr	r0, [pc, #12]	; (8004cdc <MX_TIM3_Init+0xe4>)
 8004cd0:	f000 f9c0 	bl	8005054 <HAL_TIM_MspPostInit>

}
 8004cd4:	bf00      	nop
 8004cd6:	3738      	adds	r7, #56	; 0x38
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	20000f34 	.word	0x20000f34
 8004ce0:	40000400 	.word	0x40000400

08004ce4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004cea:	f107 0308 	add.w	r3, r7, #8
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	605a      	str	r2, [r3, #4]
 8004cf4:	609a      	str	r2, [r3, #8]
 8004cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cf8:	463b      	mov	r3, r7
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004d00:	4b1d      	ldr	r3, [pc, #116]	; (8004d78 <MX_TIM4_Init+0x94>)
 8004d02:	4a1e      	ldr	r2, [pc, #120]	; (8004d7c <MX_TIM4_Init+0x98>)
 8004d04:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8004d06:	4b1c      	ldr	r3, [pc, #112]	; (8004d78 <MX_TIM4_Init+0x94>)
 8004d08:	2263      	movs	r2, #99	; 0x63
 8004d0a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d0c:	4b1a      	ldr	r3, [pc, #104]	; (8004d78 <MX_TIM4_Init+0x94>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 399;
 8004d12:	4b19      	ldr	r3, [pc, #100]	; (8004d78 <MX_TIM4_Init+0x94>)
 8004d14:	f240 128f 	movw	r2, #399	; 0x18f
 8004d18:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d1a:	4b17      	ldr	r3, [pc, #92]	; (8004d78 <MX_TIM4_Init+0x94>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d20:	4b15      	ldr	r3, [pc, #84]	; (8004d78 <MX_TIM4_Init+0x94>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004d26:	4814      	ldr	r0, [pc, #80]	; (8004d78 <MX_TIM4_Init+0x94>)
 8004d28:	f005 f93e 	bl	8009fa8 <HAL_TIM_Base_Init>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8004d32:	f7ff fe31 	bl	8004998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004d3c:	f107 0308 	add.w	r3, r7, #8
 8004d40:	4619      	mov	r1, r3
 8004d42:	480d      	ldr	r0, [pc, #52]	; (8004d78 <MX_TIM4_Init+0x94>)
 8004d44:	f005 ffc0 	bl	800acc8 <HAL_TIM_ConfigClockSource>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8004d4e:	f7ff fe23 	bl	8004998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d52:	2300      	movs	r3, #0
 8004d54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d56:	2300      	movs	r3, #0
 8004d58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004d5a:	463b      	mov	r3, r7
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4806      	ldr	r0, [pc, #24]	; (8004d78 <MX_TIM4_Init+0x94>)
 8004d60:	f006 fd42 	bl	800b7e8 <HAL_TIMEx_MasterConfigSynchronization>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8004d6a:	f7ff fe15 	bl	8004998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004d6e:	bf00      	nop
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20000fe8 	.word	0x20000fe8
 8004d7c:	40000800 	.word	0x40000800

08004d80 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d86:	f107 0308 	add.w	r3, r7, #8
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	605a      	str	r2, [r3, #4]
 8004d90:	609a      	str	r2, [r3, #8]
 8004d92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d94:	463b      	mov	r3, r7
 8004d96:	2200      	movs	r2, #0
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004d9c:	4b1d      	ldr	r3, [pc, #116]	; (8004e14 <MX_TIM5_Init+0x94>)
 8004d9e:	4a1e      	ldr	r2, [pc, #120]	; (8004e18 <MX_TIM5_Init+0x98>)
 8004da0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8004da2:	4b1c      	ldr	r3, [pc, #112]	; (8004e14 <MX_TIM5_Init+0x94>)
 8004da4:	2253      	movs	r2, #83	; 0x53
 8004da6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004da8:	4b1a      	ldr	r3, [pc, #104]	; (8004e14 <MX_TIM5_Init+0x94>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8004dae:	4b19      	ldr	r3, [pc, #100]	; (8004e14 <MX_TIM5_Init+0x94>)
 8004db0:	f04f 32ff 	mov.w	r2, #4294967295
 8004db4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004db6:	4b17      	ldr	r3, [pc, #92]	; (8004e14 <MX_TIM5_Init+0x94>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004dbc:	4b15      	ldr	r3, [pc, #84]	; (8004e14 <MX_TIM5_Init+0x94>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004dc2:	4814      	ldr	r0, [pc, #80]	; (8004e14 <MX_TIM5_Init+0x94>)
 8004dc4:	f005 f8f0 	bl	8009fa8 <HAL_TIM_Base_Init>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8004dce:	f7ff fde3 	bl	8004998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dd6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004dd8:	f107 0308 	add.w	r3, r7, #8
 8004ddc:	4619      	mov	r1, r3
 8004dde:	480d      	ldr	r0, [pc, #52]	; (8004e14 <MX_TIM5_Init+0x94>)
 8004de0:	f005 ff72 	bl	800acc8 <HAL_TIM_ConfigClockSource>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8004dea:	f7ff fdd5 	bl	8004998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004dee:	2300      	movs	r3, #0
 8004df0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004df2:	2300      	movs	r3, #0
 8004df4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004df6:	463b      	mov	r3, r7
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4806      	ldr	r0, [pc, #24]	; (8004e14 <MX_TIM5_Init+0x94>)
 8004dfc:	f006 fcf4 	bl	800b7e8 <HAL_TIMEx_MasterConfigSynchronization>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8004e06:	f7ff fdc7 	bl	8004998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004e0a:	bf00      	nop
 8004e0c:	3718      	adds	r7, #24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	2000109c 	.word	0x2000109c
 8004e18:	40000c00 	.word	0x40000c00

08004e1c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b088      	sub	sp, #32
 8004e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e22:	1d3b      	adds	r3, r7, #4
 8004e24:	2200      	movs	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	605a      	str	r2, [r3, #4]
 8004e2a:	609a      	str	r2, [r3, #8]
 8004e2c:	60da      	str	r2, [r3, #12]
 8004e2e:	611a      	str	r2, [r3, #16]
 8004e30:	615a      	str	r2, [r3, #20]
 8004e32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004e34:	4b21      	ldr	r3, [pc, #132]	; (8004ebc <MX_TIM11_Init+0xa0>)
 8004e36:	4a22      	ldr	r2, [pc, #136]	; (8004ec0 <MX_TIM11_Init+0xa4>)
 8004e38:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8004e3a:	4b20      	ldr	r3, [pc, #128]	; (8004ebc <MX_TIM11_Init+0xa0>)
 8004e3c:	2263      	movs	r2, #99	; 0x63
 8004e3e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e40:	4b1e      	ldr	r3, [pc, #120]	; (8004ebc <MX_TIM11_Init+0xa0>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 8004e46:	4b1d      	ldr	r3, [pc, #116]	; (8004ebc <MX_TIM11_Init+0xa0>)
 8004e48:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8004e4c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e4e:	4b1b      	ldr	r3, [pc, #108]	; (8004ebc <MX_TIM11_Init+0xa0>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e54:	4b19      	ldr	r3, [pc, #100]	; (8004ebc <MX_TIM11_Init+0xa0>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004e5a:	4818      	ldr	r0, [pc, #96]	; (8004ebc <MX_TIM11_Init+0xa0>)
 8004e5c:	f005 f8a4 	bl	8009fa8 <HAL_TIM_Base_Init>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8004e66:	f7ff fd97 	bl	8004998 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8004e6a:	4814      	ldr	r0, [pc, #80]	; (8004ebc <MX_TIM11_Init+0xa0>)
 8004e6c:	f005 f95a 	bl	800a124 <HAL_TIM_OC_Init>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8004e76:	f7ff fd8f 	bl	8004998 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 8004e7a:	2108      	movs	r1, #8
 8004e7c:	480f      	ldr	r0, [pc, #60]	; (8004ebc <MX_TIM11_Init+0xa0>)
 8004e7e:	f005 facd 	bl	800a41c <HAL_TIM_OnePulse_Init>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 8004e88:	f7ff fd86 	bl	8004998 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8004e8c:	2310      	movs	r3, #16
 8004e8e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 8004e90:	f240 5399 	movw	r3, #1433	; 0x599
 8004e94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e96:	2300      	movs	r3, #0
 8004e98:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004e9e:	1d3b      	adds	r3, r7, #4
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	4805      	ldr	r0, [pc, #20]	; (8004ebc <MX_TIM11_Init+0xa0>)
 8004ea6:	f005 fdf1 	bl	800aa8c <HAL_TIM_OC_ConfigChannel>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 8004eb0:	f7ff fd72 	bl	8004998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8004eb4:	bf00      	nop
 8004eb6:	3720      	adds	r7, #32
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	20001150 	.word	0x20001150
 8004ec0:	40014800 	.word	0x40014800

08004ec4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08a      	sub	sp, #40	; 0x28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ecc:	f107 0314 	add.w	r3, r7, #20
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	605a      	str	r2, [r3, #4]
 8004ed6:	609a      	str	r2, [r3, #8]
 8004ed8:	60da      	str	r2, [r3, #12]
 8004eda:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee4:	d133      	bne.n	8004f4e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	613b      	str	r3, [r7, #16]
 8004eea:	4b1b      	ldr	r3, [pc, #108]	; (8004f58 <HAL_TIM_Encoder_MspInit+0x94>)
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	4a1a      	ldr	r2, [pc, #104]	; (8004f58 <HAL_TIM_Encoder_MspInit+0x94>)
 8004ef0:	f043 0301 	orr.w	r3, r3, #1
 8004ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ef6:	4b18      	ldr	r3, [pc, #96]	; (8004f58 <HAL_TIM_Encoder_MspInit+0x94>)
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	613b      	str	r3, [r7, #16]
 8004f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f02:	2300      	movs	r3, #0
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	4b14      	ldr	r3, [pc, #80]	; (8004f58 <HAL_TIM_Encoder_MspInit+0x94>)
 8004f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0a:	4a13      	ldr	r2, [pc, #76]	; (8004f58 <HAL_TIM_Encoder_MspInit+0x94>)
 8004f0c:	f043 0301 	orr.w	r3, r3, #1
 8004f10:	6313      	str	r3, [r2, #48]	; 0x30
 8004f12:	4b11      	ldr	r3, [pc, #68]	; (8004f58 <HAL_TIM_Encoder_MspInit+0x94>)
 8004f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f22:	2302      	movs	r3, #2
 8004f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f26:	2300      	movs	r3, #0
 8004f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f32:	f107 0314 	add.w	r3, r7, #20
 8004f36:	4619      	mov	r1, r3
 8004f38:	4808      	ldr	r0, [pc, #32]	; (8004f5c <HAL_TIM_Encoder_MspInit+0x98>)
 8004f3a:	f002 fa5b 	bl	80073f4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004f3e:	2200      	movs	r2, #0
 8004f40:	2100      	movs	r1, #0
 8004f42:	201c      	movs	r0, #28
 8004f44:	f001 fe03 	bl	8006b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004f48:	201c      	movs	r0, #28
 8004f4a:	f001 fe1c 	bl	8006b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004f4e:	bf00      	nop
 8004f50:	3728      	adds	r7, #40	; 0x28
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	40023800 	.word	0x40023800
 8004f5c:	40020000 	.word	0x40020000

08004f60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a34      	ldr	r2, [pc, #208]	; (8005040 <HAL_TIM_Base_MspInit+0xe0>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d116      	bne.n	8004fa0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004f72:	2300      	movs	r3, #0
 8004f74:	617b      	str	r3, [r7, #20]
 8004f76:	4b33      	ldr	r3, [pc, #204]	; (8005044 <HAL_TIM_Base_MspInit+0xe4>)
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	4a32      	ldr	r2, [pc, #200]	; (8005044 <HAL_TIM_Base_MspInit+0xe4>)
 8004f7c:	f043 0302 	orr.w	r3, r3, #2
 8004f80:	6413      	str	r3, [r2, #64]	; 0x40
 8004f82:	4b30      	ldr	r3, [pc, #192]	; (8005044 <HAL_TIM_Base_MspInit+0xe4>)
 8004f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	617b      	str	r3, [r7, #20]
 8004f8c:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004f8e:	2200      	movs	r2, #0
 8004f90:	2100      	movs	r1, #0
 8004f92:	201d      	movs	r0, #29
 8004f94:	f001 fddb 	bl	8006b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004f98:	201d      	movs	r0, #29
 8004f9a:	f001 fdf4 	bl	8006b86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8004f9e:	e04a      	b.n	8005036 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a28      	ldr	r2, [pc, #160]	; (8005048 <HAL_TIM_Base_MspInit+0xe8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d116      	bne.n	8004fd8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004faa:	2300      	movs	r3, #0
 8004fac:	613b      	str	r3, [r7, #16]
 8004fae:	4b25      	ldr	r3, [pc, #148]	; (8005044 <HAL_TIM_Base_MspInit+0xe4>)
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	4a24      	ldr	r2, [pc, #144]	; (8005044 <HAL_TIM_Base_MspInit+0xe4>)
 8004fb4:	f043 0304 	orr.w	r3, r3, #4
 8004fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8004fba:	4b22      	ldr	r3, [pc, #136]	; (8005044 <HAL_TIM_Base_MspInit+0xe4>)
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	f003 0304 	and.w	r3, r3, #4
 8004fc2:	613b      	str	r3, [r7, #16]
 8004fc4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 1);
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	2100      	movs	r1, #0
 8004fca:	201e      	movs	r0, #30
 8004fcc:	f001 fdbf 	bl	8006b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004fd0:	201e      	movs	r0, #30
 8004fd2:	f001 fdd8 	bl	8006b86 <HAL_NVIC_EnableIRQ>
}
 8004fd6:	e02e      	b.n	8005036 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM5)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a1b      	ldr	r2, [pc, #108]	; (800504c <HAL_TIM_Base_MspInit+0xec>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d10e      	bne.n	8005000 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	60fb      	str	r3, [r7, #12]
 8004fe6:	4b17      	ldr	r3, [pc, #92]	; (8005044 <HAL_TIM_Base_MspInit+0xe4>)
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fea:	4a16      	ldr	r2, [pc, #88]	; (8005044 <HAL_TIM_Base_MspInit+0xe4>)
 8004fec:	f043 0308 	orr.w	r3, r3, #8
 8004ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ff2:	4b14      	ldr	r3, [pc, #80]	; (8005044 <HAL_TIM_Base_MspInit+0xe4>)
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
}
 8004ffe:	e01a      	b.n	8005036 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM11)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a12      	ldr	r2, [pc, #72]	; (8005050 <HAL_TIM_Base_MspInit+0xf0>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d115      	bne.n	8005036 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800500a:	2300      	movs	r3, #0
 800500c:	60bb      	str	r3, [r7, #8]
 800500e:	4b0d      	ldr	r3, [pc, #52]	; (8005044 <HAL_TIM_Base_MspInit+0xe4>)
 8005010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005012:	4a0c      	ldr	r2, [pc, #48]	; (8005044 <HAL_TIM_Base_MspInit+0xe4>)
 8005014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005018:	6453      	str	r3, [r2, #68]	; 0x44
 800501a:	4b0a      	ldr	r3, [pc, #40]	; (8005044 <HAL_TIM_Base_MspInit+0xe4>)
 800501c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005022:	60bb      	str	r3, [r7, #8]
 8005024:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8005026:	2200      	movs	r2, #0
 8005028:	2100      	movs	r1, #0
 800502a:	201a      	movs	r0, #26
 800502c:	f001 fd8f 	bl	8006b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005030:	201a      	movs	r0, #26
 8005032:	f001 fda8 	bl	8006b86 <HAL_NVIC_EnableIRQ>
}
 8005036:	bf00      	nop
 8005038:	3718      	adds	r7, #24
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	40000400 	.word	0x40000400
 8005044:	40023800 	.word	0x40023800
 8005048:	40000800 	.word	0x40000800
 800504c:	40000c00 	.word	0x40000c00
 8005050:	40014800 	.word	0x40014800

08005054 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b088      	sub	sp, #32
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800505c:	f107 030c 	add.w	r3, r7, #12
 8005060:	2200      	movs	r2, #0
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	605a      	str	r2, [r3, #4]
 8005066:	609a      	str	r2, [r3, #8]
 8005068:	60da      	str	r2, [r3, #12]
 800506a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a12      	ldr	r2, [pc, #72]	; (80050bc <HAL_TIM_MspPostInit+0x68>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d11e      	bne.n	80050b4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005076:	2300      	movs	r3, #0
 8005078:	60bb      	str	r3, [r7, #8]
 800507a:	4b11      	ldr	r3, [pc, #68]	; (80050c0 <HAL_TIM_MspPostInit+0x6c>)
 800507c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507e:	4a10      	ldr	r2, [pc, #64]	; (80050c0 <HAL_TIM_MspPostInit+0x6c>)
 8005080:	f043 0304 	orr.w	r3, r3, #4
 8005084:	6313      	str	r3, [r2, #48]	; 0x30
 8005086:	4b0e      	ldr	r3, [pc, #56]	; (80050c0 <HAL_TIM_MspPostInit+0x6c>)
 8005088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508a:	f003 0304 	and.w	r3, r3, #4
 800508e:	60bb      	str	r3, [r7, #8]
 8005090:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005092:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005096:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005098:	2302      	movs	r3, #2
 800509a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800509c:	2300      	movs	r3, #0
 800509e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050a0:	2300      	movs	r3, #0
 80050a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80050a4:	2302      	movs	r3, #2
 80050a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050a8:	f107 030c 	add.w	r3, r7, #12
 80050ac:	4619      	mov	r1, r3
 80050ae:	4805      	ldr	r0, [pc, #20]	; (80050c4 <HAL_TIM_MspPostInit+0x70>)
 80050b0:	f002 f9a0 	bl	80073f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80050b4:	bf00      	nop
 80050b6:	3720      	adds	r7, #32
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	40000400 	.word	0x40000400
 80050c0:	40023800 	.word	0x40023800
 80050c4:	40020800 	.word	0x40020800

080050c8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80050cc:	4b12      	ldr	r3, [pc, #72]	; (8005118 <MX_USART2_UART_Init+0x50>)
 80050ce:	4a13      	ldr	r2, [pc, #76]	; (800511c <MX_USART2_UART_Init+0x54>)
 80050d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80050d2:	4b11      	ldr	r3, [pc, #68]	; (8005118 <MX_USART2_UART_Init+0x50>)
 80050d4:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80050d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80050da:	4b0f      	ldr	r3, [pc, #60]	; (8005118 <MX_USART2_UART_Init+0x50>)
 80050dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80050e0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80050e2:	4b0d      	ldr	r3, [pc, #52]	; (8005118 <MX_USART2_UART_Init+0x50>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80050e8:	4b0b      	ldr	r3, [pc, #44]	; (8005118 <MX_USART2_UART_Init+0x50>)
 80050ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80050f0:	4b09      	ldr	r3, [pc, #36]	; (8005118 <MX_USART2_UART_Init+0x50>)
 80050f2:	220c      	movs	r2, #12
 80050f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80050f6:	4b08      	ldr	r3, [pc, #32]	; (8005118 <MX_USART2_UART_Init+0x50>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80050fc:	4b06      	ldr	r3, [pc, #24]	; (8005118 <MX_USART2_UART_Init+0x50>)
 80050fe:	2200      	movs	r2, #0
 8005100:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005102:	4805      	ldr	r0, [pc, #20]	; (8005118 <MX_USART2_UART_Init+0x50>)
 8005104:	f006 fbfc 	bl	800b900 <HAL_UART_Init>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800510e:	f7ff fc43 	bl	8004998 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005112:	bf00      	nop
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	20001204 	.word	0x20001204
 800511c:	40004400 	.word	0x40004400

08005120 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b08a      	sub	sp, #40	; 0x28
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005128:	f107 0314 	add.w	r3, r7, #20
 800512c:	2200      	movs	r2, #0
 800512e:	601a      	str	r2, [r3, #0]
 8005130:	605a      	str	r2, [r3, #4]
 8005132:	609a      	str	r2, [r3, #8]
 8005134:	60da      	str	r2, [r3, #12]
 8005136:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a34      	ldr	r2, [pc, #208]	; (8005210 <HAL_UART_MspInit+0xf0>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d161      	bne.n	8005206 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005142:	2300      	movs	r3, #0
 8005144:	613b      	str	r3, [r7, #16]
 8005146:	4b33      	ldr	r3, [pc, #204]	; (8005214 <HAL_UART_MspInit+0xf4>)
 8005148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514a:	4a32      	ldr	r2, [pc, #200]	; (8005214 <HAL_UART_MspInit+0xf4>)
 800514c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005150:	6413      	str	r3, [r2, #64]	; 0x40
 8005152:	4b30      	ldr	r3, [pc, #192]	; (8005214 <HAL_UART_MspInit+0xf4>)
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515a:	613b      	str	r3, [r7, #16]
 800515c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800515e:	2300      	movs	r3, #0
 8005160:	60fb      	str	r3, [r7, #12]
 8005162:	4b2c      	ldr	r3, [pc, #176]	; (8005214 <HAL_UART_MspInit+0xf4>)
 8005164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005166:	4a2b      	ldr	r2, [pc, #172]	; (8005214 <HAL_UART_MspInit+0xf4>)
 8005168:	f043 0301 	orr.w	r3, r3, #1
 800516c:	6313      	str	r3, [r2, #48]	; 0x30
 800516e:	4b29      	ldr	r3, [pc, #164]	; (8005214 <HAL_UART_MspInit+0xf4>)
 8005170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800517a:	230c      	movs	r3, #12
 800517c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800517e:	2302      	movs	r3, #2
 8005180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005182:	2300      	movs	r3, #0
 8005184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005186:	2303      	movs	r3, #3
 8005188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800518a:	2307      	movs	r3, #7
 800518c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800518e:	f107 0314 	add.w	r3, r7, #20
 8005192:	4619      	mov	r1, r3
 8005194:	4820      	ldr	r0, [pc, #128]	; (8005218 <HAL_UART_MspInit+0xf8>)
 8005196:	f002 f92d 	bl	80073f4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800519a:	4b20      	ldr	r3, [pc, #128]	; (800521c <HAL_UART_MspInit+0xfc>)
 800519c:	4a20      	ldr	r2, [pc, #128]	; (8005220 <HAL_UART_MspInit+0x100>)
 800519e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80051a0:	4b1e      	ldr	r3, [pc, #120]	; (800521c <HAL_UART_MspInit+0xfc>)
 80051a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80051a6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80051a8:	4b1c      	ldr	r3, [pc, #112]	; (800521c <HAL_UART_MspInit+0xfc>)
 80051aa:	2240      	movs	r2, #64	; 0x40
 80051ac:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051ae:	4b1b      	ldr	r3, [pc, #108]	; (800521c <HAL_UART_MspInit+0xfc>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80051b4:	4b19      	ldr	r3, [pc, #100]	; (800521c <HAL_UART_MspInit+0xfc>)
 80051b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051ba:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051bc:	4b17      	ldr	r3, [pc, #92]	; (800521c <HAL_UART_MspInit+0xfc>)
 80051be:	2200      	movs	r2, #0
 80051c0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051c2:	4b16      	ldr	r3, [pc, #88]	; (800521c <HAL_UART_MspInit+0xfc>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80051c8:	4b14      	ldr	r3, [pc, #80]	; (800521c <HAL_UART_MspInit+0xfc>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80051ce:	4b13      	ldr	r3, [pc, #76]	; (800521c <HAL_UART_MspInit+0xfc>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80051d4:	4b11      	ldr	r3, [pc, #68]	; (800521c <HAL_UART_MspInit+0xfc>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80051da:	4810      	ldr	r0, [pc, #64]	; (800521c <HAL_UART_MspInit+0xfc>)
 80051dc:	f001 fcee 	bl	8006bbc <HAL_DMA_Init>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80051e6:	f7ff fbd7 	bl	8004998 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a0b      	ldr	r2, [pc, #44]	; (800521c <HAL_UART_MspInit+0xfc>)
 80051ee:	635a      	str	r2, [r3, #52]	; 0x34
 80051f0:	4a0a      	ldr	r2, [pc, #40]	; (800521c <HAL_UART_MspInit+0xfc>)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80051f6:	2200      	movs	r2, #0
 80051f8:	2100      	movs	r1, #0
 80051fa:	2026      	movs	r0, #38	; 0x26
 80051fc:	f001 fca7 	bl	8006b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005200:	2026      	movs	r0, #38	; 0x26
 8005202:	f001 fcc0 	bl	8006b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005206:	bf00      	nop
 8005208:	3728      	adds	r7, #40	; 0x28
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	40004400 	.word	0x40004400
 8005214:	40023800 	.word	0x40023800
 8005218:	40020000 	.word	0x40020000
 800521c:	20001278 	.word	0x20001278
 8005220:	400260a0 	.word	0x400260a0

08005224 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005224:	f8df d034 	ldr.w	sp, [pc, #52]	; 800525c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005228:	480d      	ldr	r0, [pc, #52]	; (8005260 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800522a:	490e      	ldr	r1, [pc, #56]	; (8005264 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800522c:	4a0e      	ldr	r2, [pc, #56]	; (8005268 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800522e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005230:	e002      	b.n	8005238 <LoopCopyDataInit>

08005232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005236:	3304      	adds	r3, #4

08005238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800523a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800523c:	d3f9      	bcc.n	8005232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800523e:	4a0b      	ldr	r2, [pc, #44]	; (800526c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005240:	4c0b      	ldr	r4, [pc, #44]	; (8005270 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005244:	e001      	b.n	800524a <LoopFillZerobss>

08005246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005248:	3204      	adds	r2, #4

0800524a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800524a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800524c:	d3fb      	bcc.n	8005246 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800524e:	f7ff fc6d 	bl	8004b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005252:	f007 fdf5 	bl	800ce40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005256:	f7fe fae1 	bl	800381c <main>
  bx  lr    
 800525a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800525c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005264:	200002a4 	.word	0x200002a4
  ldr r2, =_sidata
 8005268:	0800f860 	.word	0x0800f860
  ldr r2, =_sbss
 800526c:	200002a4 	.word	0x200002a4
  ldr r4, =_ebss
 8005270:	200012dc 	.word	0x200012dc

08005274 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005274:	e7fe      	b.n	8005274 <ADC_IRQHandler>
	...

08005278 <arm_atan2_f32>:
                   and compute the right angle.
*/


arm_status arm_atan2_f32(float32_t y,float32_t x,float32_t *result)
{
 8005278:	b480      	push	{r7}
 800527a:	b0a1      	sub	sp, #132	; 0x84
 800527c:	af00      	add	r7, sp, #0
 800527e:	ed87 0a03 	vstr	s0, [r7, #12]
 8005282:	edc7 0a02 	vstr	s1, [r7, #8]
 8005286:	6078      	str	r0, [r7, #4]
    if (x > 0.0f)
 8005288:	edd7 7a02 	vldr	s15, [r7, #8]
 800528c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005294:	f340 808e 	ble.w	80053b4 <arm_atan2_f32+0x13c>
    {
        *result=arm_atan_f32(y/x);
 8005298:	edd7 6a03 	vldr	s13, [r7, #12]
 800529c:	ed97 7a02 	vldr	s14, [r7, #8]
 80052a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052a4:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
   int sign=0;
 80052a8:	2300      	movs	r3, #0
 80052aa:	67bb      	str	r3, [r7, #120]	; 0x78
   float32_t res=0.0f;
 80052ac:	f04f 0300 	mov.w	r3, #0
 80052b0:	677b      	str	r3, [r7, #116]	; 0x74
   if (x < 0.0f)
 80052b2:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80052b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80052ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052be:	d507      	bpl.n	80052d0 <arm_atan2_f32+0x58>
      sign=1;
 80052c0:	2301      	movs	r3, #1
 80052c2:	67bb      	str	r3, [r7, #120]	; 0x78
      x=-x;
 80052c4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80052c8:	eef1 7a67 	vneg.f32	s15, s15
 80052cc:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
   if (x > 1.0f)
 80052d0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80052d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052e0:	dd31      	ble.n	8005346 <arm_atan2_f32+0xce>
      x = 1.0f / x;
 80052e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052e6:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80052ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052ee:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
 80052f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052f4:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 80052f6:	4bb5      	ldr	r3, [pc, #724]	; (80055cc <arm_atan2_f32+0x354>)
 80052f8:	66fb      	str	r3, [r7, #108]	; 0x6c
    int i=1;
 80052fa:	2301      	movs	r3, #1
 80052fc:	66bb      	str	r3, [r7, #104]	; 0x68
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80052fe:	2301      	movs	r3, #1
 8005300:	66bb      	str	r3, [r7, #104]	; 0x68
 8005302:	e014      	b.n	800532e <arm_atan2_f32+0xb6>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8005304:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8005308:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800530c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005310:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005312:	f1c3 0309 	rsb	r3, r3, #9
 8005316:	4aae      	ldr	r2, [pc, #696]	; (80055d0 <arm_atan2_f32+0x358>)
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4413      	add	r3, r2
 800531c:	edd3 7a00 	vldr	s15, [r3]
 8005320:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005324:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8005328:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800532a:	3301      	adds	r3, #1
 800532c:	66bb      	str	r3, [r7, #104]	; 0x68
 800532e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005330:	2b09      	cmp	r3, #9
 8005332:	dde7      	ble.n	8005304 <arm_atan2_f32+0x8c>
    return(res);
 8005334:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8005338:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80055d4 <arm_atan2_f32+0x35c>
 800533c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005340:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
 8005344:	e028      	b.n	8005398 <arm_atan2_f32+0x120>
 8005346:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005348:	667b      	str	r3, [r7, #100]	; 0x64
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 800534a:	4ba0      	ldr	r3, [pc, #640]	; (80055cc <arm_atan2_f32+0x354>)
 800534c:	663b      	str	r3, [r7, #96]	; 0x60
    int i=1;
 800534e:	2301      	movs	r3, #1
 8005350:	65fb      	str	r3, [r7, #92]	; 0x5c
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8005352:	2301      	movs	r3, #1
 8005354:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005356:	e014      	b.n	8005382 <arm_atan2_f32+0x10a>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8005358:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800535c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005360:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005364:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005366:	f1c3 0309 	rsb	r3, r3, #9
 800536a:	4a99      	ldr	r2, [pc, #612]	; (80055d0 <arm_atan2_f32+0x358>)
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	edd3 7a00 	vldr	s15, [r3]
 8005374:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005378:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 800537c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800537e:	3301      	adds	r3, #1
 8005380:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005382:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005384:	2b09      	cmp	r3, #9
 8005386:	dde7      	ble.n	8005358 <arm_atan2_f32+0xe0>
    return(res);
 8005388:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
     res += arm_atan_limited_f32(x);
 800538c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8005390:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005394:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
   if (sign)
 8005398:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800539a:	2b00      	cmp	r3, #0
 800539c:	d005      	beq.n	80053aa <arm_atan2_f32+0x132>
     res = -res;
 800539e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80053a2:	eef1 7a67 	vneg.f32	s15, s15
 80053a6:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
   return(res);
 80053aa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
        *result=arm_atan_f32(y/x);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	601a      	str	r2, [r3, #0]
        return(ARM_MATH_SUCCESS);
 80053b0:	2300      	movs	r3, #0
 80053b2:	e175      	b.n	80056a0 <arm_atan2_f32+0x428>
    }
    if (x < 0.0f)
 80053b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80053b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053c0:	f140 814d 	bpl.w	800565e <arm_atan2_f32+0x3e6>
    {
        if (y > 0.0f)
 80053c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80053c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d0:	f340 8093 	ble.w	80054fa <arm_atan2_f32+0x282>
        {
           *result=arm_atan_f32(y/x) + PI;
 80053d4:	edd7 6a03 	vldr	s13, [r7, #12]
 80053d8:	ed97 7a02 	vldr	s14, [r7, #8]
 80053dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053e0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
   int sign=0;
 80053e4:	2300      	movs	r3, #0
 80053e6:	657b      	str	r3, [r7, #84]	; 0x54
   float32_t res=0.0f;
 80053e8:	f04f 0300 	mov.w	r3, #0
 80053ec:	653b      	str	r3, [r7, #80]	; 0x50
   if (x < 0.0f)
 80053ee:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80053f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053fa:	d507      	bpl.n	800540c <arm_atan2_f32+0x194>
      sign=1;
 80053fc:	2301      	movs	r3, #1
 80053fe:	657b      	str	r3, [r7, #84]	; 0x54
      x=-x;
 8005400:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005404:	eef1 7a67 	vneg.f32	s15, s15
 8005408:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
   if (x > 1.0f)
 800540c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005410:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005414:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800541c:	dd31      	ble.n	8005482 <arm_atan2_f32+0x20a>
      x = 1.0f / x;
 800541e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005422:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800542a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 800542e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005430:	64fb      	str	r3, [r7, #76]	; 0x4c
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8005432:	4b66      	ldr	r3, [pc, #408]	; (80055cc <arm_atan2_f32+0x354>)
 8005434:	64bb      	str	r3, [r7, #72]	; 0x48
    int i=1;
 8005436:	2301      	movs	r3, #1
 8005438:	647b      	str	r3, [r7, #68]	; 0x44
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 800543a:	2301      	movs	r3, #1
 800543c:	647b      	str	r3, [r7, #68]	; 0x44
 800543e:	e014      	b.n	800546a <arm_atan2_f32+0x1f2>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8005440:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005444:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005448:	ee27 7a27 	vmul.f32	s14, s14, s15
 800544c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800544e:	f1c3 0309 	rsb	r3, r3, #9
 8005452:	4a5f      	ldr	r2, [pc, #380]	; (80055d0 <arm_atan2_f32+0x358>)
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4413      	add	r3, r2
 8005458:	edd3 7a00 	vldr	s15, [r3]
 800545c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005460:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8005464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005466:	3301      	adds	r3, #1
 8005468:	647b      	str	r3, [r7, #68]	; 0x44
 800546a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800546c:	2b09      	cmp	r3, #9
 800546e:	dde7      	ble.n	8005440 <arm_atan2_f32+0x1c8>
    return(res);
 8005470:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8005474:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80055d4 <arm_atan2_f32+0x35c>
 8005478:	ee77 7a67 	vsub.f32	s15, s14, s15
 800547c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8005480:	e028      	b.n	80054d4 <arm_atan2_f32+0x25c>
 8005482:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005484:	643b      	str	r3, [r7, #64]	; 0x40
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8005486:	4b51      	ldr	r3, [pc, #324]	; (80055cc <arm_atan2_f32+0x354>)
 8005488:	63fb      	str	r3, [r7, #60]	; 0x3c
    int i=1;
 800548a:	2301      	movs	r3, #1
 800548c:	63bb      	str	r3, [r7, #56]	; 0x38
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 800548e:	2301      	movs	r3, #1
 8005490:	63bb      	str	r3, [r7, #56]	; 0x38
 8005492:	e014      	b.n	80054be <arm_atan2_f32+0x246>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8005494:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8005498:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800549c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a2:	f1c3 0309 	rsb	r3, r3, #9
 80054a6:	4a4a      	ldr	r2, [pc, #296]	; (80055d0 <arm_atan2_f32+0x358>)
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	edd3 7a00 	vldr	s15, [r3]
 80054b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054b4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80054b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ba:	3301      	adds	r3, #1
 80054bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80054be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c0:	2b09      	cmp	r3, #9
 80054c2:	dde7      	ble.n	8005494 <arm_atan2_f32+0x21c>
    return(res);
 80054c4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
     res += arm_atan_limited_f32(x);
 80054c8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80054cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054d0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
   if (sign)
 80054d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d005      	beq.n	80054e6 <arm_atan2_f32+0x26e>
     res = -res;
 80054da:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80054de:	eef1 7a67 	vneg.f32	s15, s15
 80054e2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
   return(res);
 80054e6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
           *result=arm_atan_f32(y/x) + PI;
 80054ea:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80055d8 <arm_atan2_f32+0x360>
 80054ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	edc3 7a00 	vstr	s15, [r3]
 80054f8:	e0af      	b.n	800565a <arm_atan2_f32+0x3e2>
        }
        else if (y < 0.0f)
 80054fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80054fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005506:	f140 809c 	bpl.w	8005642 <arm_atan2_f32+0x3ca>
        {
           *result=arm_atan_f32(y/x) - PI;
 800550a:	edd7 6a03 	vldr	s13, [r7, #12]
 800550e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005516:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
   int sign=0;
 800551a:	2300      	movs	r3, #0
 800551c:	633b      	str	r3, [r7, #48]	; 0x30
   float32_t res=0.0f;
 800551e:	f04f 0300 	mov.w	r3, #0
 8005522:	62fb      	str	r3, [r7, #44]	; 0x2c
   if (x < 0.0f)
 8005524:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005528:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800552c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005530:	d507      	bpl.n	8005542 <arm_atan2_f32+0x2ca>
      sign=1;
 8005532:	2301      	movs	r3, #1
 8005534:	633b      	str	r3, [r7, #48]	; 0x30
      x=-x;
 8005536:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800553a:	eef1 7a67 	vneg.f32	s15, s15
 800553e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
   if (x > 1.0f)
 8005542:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005546:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800554a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800554e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005552:	dd31      	ble.n	80055b8 <arm_atan2_f32+0x340>
      x = 1.0f / x;
 8005554:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005558:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800555c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005560:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8005564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005566:	62bb      	str	r3, [r7, #40]	; 0x28
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8005568:	4b18      	ldr	r3, [pc, #96]	; (80055cc <arm_atan2_f32+0x354>)
 800556a:	627b      	str	r3, [r7, #36]	; 0x24
    int i=1;
 800556c:	2301      	movs	r3, #1
 800556e:	623b      	str	r3, [r7, #32]
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8005570:	2301      	movs	r3, #1
 8005572:	623b      	str	r3, [r7, #32]
 8005574:	e014      	b.n	80055a0 <arm_atan2_f32+0x328>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8005576:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800557a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800557e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005582:	6a3b      	ldr	r3, [r7, #32]
 8005584:	f1c3 0309 	rsb	r3, r3, #9
 8005588:	4a11      	ldr	r2, [pc, #68]	; (80055d0 <arm_atan2_f32+0x358>)
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	edd3 7a00 	vldr	s15, [r3]
 8005592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005596:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	3301      	adds	r3, #1
 800559e:	623b      	str	r3, [r7, #32]
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	2b09      	cmp	r3, #9
 80055a4:	dde7      	ble.n	8005576 <arm_atan2_f32+0x2fe>
    return(res);
 80055a6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
      res = PIHALFF32 - arm_atan_limited_f32(x);
 80055aa:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80055d4 <arm_atan2_f32+0x35c>
 80055ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055b2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 80055b6:	e031      	b.n	800561c <arm_atan2_f32+0x3a4>
 80055b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ba:	61fb      	str	r3, [r7, #28]
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 80055bc:	4b03      	ldr	r3, [pc, #12]	; (80055cc <arm_atan2_f32+0x354>)
 80055be:	61bb      	str	r3, [r7, #24]
    int i=1;
 80055c0:	2301      	movs	r3, #1
 80055c2:	617b      	str	r3, [r7, #20]
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80055c4:	2301      	movs	r3, #1
 80055c6:	617b      	str	r3, [r7, #20]
 80055c8:	e01d      	b.n	8005606 <arm_atan2_f32+0x38e>
 80055ca:	bf00      	nop
 80055cc:	bd0492a5 	.word	0xbd0492a5
 80055d0:	0800f5fc 	.word	0x0800f5fc
 80055d4:	3fc90fdb 	.word	0x3fc90fdb
 80055d8:	40490fdb 	.word	0x40490fdb
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80055dc:	ed97 7a07 	vldr	s14, [r7, #28]
 80055e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80055e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	f1c3 0309 	rsb	r3, r3, #9
 80055ee:	4a2f      	ldr	r2, [pc, #188]	; (80056ac <arm_atan2_f32+0x434>)
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	edd3 7a00 	vldr	s15, [r3]
 80055f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055fc:	edc7 7a06 	vstr	s15, [r7, #24]
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	3301      	adds	r3, #1
 8005604:	617b      	str	r3, [r7, #20]
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	2b09      	cmp	r3, #9
 800560a:	dde7      	ble.n	80055dc <arm_atan2_f32+0x364>
    return(res);
 800560c:	edd7 7a06 	vldr	s15, [r7, #24]
     res += arm_atan_limited_f32(x);
 8005610:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005614:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005618:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
   if (sign)
 800561c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561e:	2b00      	cmp	r3, #0
 8005620:	d005      	beq.n	800562e <arm_atan2_f32+0x3b6>
     res = -res;
 8005622:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005626:	eef1 7a67 	vneg.f32	s15, s15
 800562a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
   return(res);
 800562e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
           *result=arm_atan_f32(y/x) - PI;
 8005632:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80056b0 <arm_atan2_f32+0x438>
 8005636:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	edc3 7a00 	vstr	s15, [r3]
 8005640:	e00b      	b.n	800565a <arm_atan2_f32+0x3e2>
        }
        else
        {
            if (signbit(y))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <arm_atan2_f32+0x3dc>
            {
               *result= -PI;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a19      	ldr	r2, [pc, #100]	; (80056b4 <arm_atan2_f32+0x43c>)
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	e002      	b.n	800565a <arm_atan2_f32+0x3e2>
            }
            else
            {
               *result= PI;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a18      	ldr	r2, [pc, #96]	; (80056b8 <arm_atan2_f32+0x440>)
 8005658:	601a      	str	r2, [r3, #0]
            }
        }
        return(ARM_MATH_SUCCESS);
 800565a:	2300      	movs	r3, #0
 800565c:	e020      	b.n	80056a0 <arm_atan2_f32+0x428>
    }
    if (x == 0.0f)
 800565e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005662:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800566a:	d117      	bne.n	800569c <arm_atan2_f32+0x424>
    {
        if (y > 0.0f)
 800566c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005670:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005678:	dd04      	ble.n	8005684 <arm_atan2_f32+0x40c>
        {
            *result=PIHALFF32;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a0f      	ldr	r2, [pc, #60]	; (80056bc <arm_atan2_f32+0x444>)
 800567e:	601a      	str	r2, [r3, #0]
            return(ARM_MATH_SUCCESS);
 8005680:	2300      	movs	r3, #0
 8005682:	e00d      	b.n	80056a0 <arm_atan2_f32+0x428>
        }
        if (y < 0.0f)
 8005684:	edd7 7a03 	vldr	s15, [r7, #12]
 8005688:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800568c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005690:	d504      	bpl.n	800569c <arm_atan2_f32+0x424>
        {
            *result=-PIHALFF32;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a0a      	ldr	r2, [pc, #40]	; (80056c0 <arm_atan2_f32+0x448>)
 8005696:	601a      	str	r2, [r3, #0]
            return(ARM_MATH_SUCCESS);
 8005698:	2300      	movs	r3, #0
 800569a:	e001      	b.n	80056a0 <arm_atan2_f32+0x428>
        }
    }
    

    return(ARM_MATH_NANINF);
 800569c:	f06f 0303 	mvn.w	r3, #3

}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3784      	adds	r7, #132	; 0x84
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	0800f5fc 	.word	0x0800f5fc
 80056b0:	40490fdb 	.word	0x40490fdb
 80056b4:	c0490fdb 	.word	0xc0490fdb
 80056b8:	40490fdb 	.word	0x40490fdb
 80056bc:	3fc90fdb 	.word	0x3fc90fdb
 80056c0:	bfc90fdb 	.word	0xbfc90fdb

080056c4 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b08b      	sub	sp, #44	; 0x2c
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	461a      	mov	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	885b      	ldrh	r3, [r3, #2]
 80056ec:	fb02 f303 	mul.w	r3, r2, r3
 80056f0:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 80056f6:	e013      	b.n	8005720 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	1d1a      	adds	r2, r3, #4
 80056fc:	627a      	str	r2, [r7, #36]	; 0x24
 80056fe:	ed93 7a00 	vldr	s14, [r3]
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	1d1a      	adds	r2, r3, #4
 8005706:	623a      	str	r2, [r7, #32]
 8005708:	edd3 7a00 	vldr	s15, [r3]
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	1d1a      	adds	r2, r3, #4
 8005710:	61fa      	str	r2, [r7, #28]
 8005712:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005716:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	3b01      	subs	r3, #1
 800571e:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1e8      	bne.n	80056f8 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8005726:	2300      	movs	r3, #0
 8005728:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800572a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800572e:	4618      	mov	r0, r3
 8005730:	372c      	adds	r7, #44	; 0x2c
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800573a:	b480      	push	{r7}
 800573c:	b085      	sub	sp, #20
 800573e:	af00      	add	r7, sp, #0
 8005740:	60f8      	str	r0, [r7, #12]
 8005742:	607b      	str	r3, [r7, #4]
 8005744:	460b      	mov	r3, r1
 8005746:	817b      	strh	r3, [r7, #10]
 8005748:	4613      	mov	r3, r2
 800574a:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	897a      	ldrh	r2, [r7, #10]
 8005750:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	893a      	ldrh	r2, [r7, #8]
 8005756:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	605a      	str	r2, [r3, #4]
}
 800575e:	bf00      	nop
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800576a:	b480      	push	{r7}
 800576c:	b0bb      	sub	sp, #236	; 0xec
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
 8005772:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	667b      	str	r3, [r7, #100]	; 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	663b      	str	r3, [r7, #96]	; 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	881b      	ldrh	r3, [r3, #0]
 8005784:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	885b      	ldrh	r3, [r3, #2]
 800578a:	65bb      	str	r3, [r7, #88]	; 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800578c:	f04f 0300 	mov.w	r3, #0
 8005790:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005794:	f04f 0300 	mov.w	r3, #0
 8005798:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800579a:	2300      	movs	r3, #0
 800579c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 80057a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 80057a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 80057ac:	e03b      	b.n	8005826 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 80057ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 80057ba:	e00c      	b.n	80057d6 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 80057bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057c0:	1d1a      	adds	r2, r3, #4
 80057c2:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80057c6:	f04f 0200 	mov.w	r2, #0
 80057ca:	601a      	str	r2, [r3, #0]
        j--;
 80057cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057d0:	3b01      	subs	r3, #1
 80057d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 80057d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1ee      	bne.n	80057bc <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 80057de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057e2:	1d1a      	adds	r2, r3, #4
 80057e4:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80057e8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80057ec:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 80057ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80057f2:	3b01      	subs	r3, #1
 80057f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 80057f8:	e00c      	b.n	8005814 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 80057fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057fe:	1d1a      	adds	r2, r3, #4
 8005800:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8005804:	f04f 0200 	mov.w	r2, #0
 8005808:	601a      	str	r2, [r3, #0]
        j--;
 800580a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800580e:	3b01      	subs	r3, #1
 8005810:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 8005814:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1ee      	bne.n	80057fa <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800581c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005820:	3b01      	subs	r3, #1
 8005822:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    while (rowCnt > 0U)
 8005826:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1bf      	bne.n	80057ae <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800582e:	2300      	movs	r3, #0
 8005830:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005834:	e2c7      	b.n	8005dc6 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 8005836:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800583a:	653b      	str	r3, [r7, #80]	; 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	885b      	ldrh	r3, [r3, #2]
 8005844:	3301      	adds	r3, #1
 8005846:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800584a:	fb01 f303 	mul.w	r3, r1, r3
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      pivot = *pTmp;
 8005856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      selectedRow = column;
 8005860:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005864:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8005868:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800586c:	3301      	adds	r3, #1
 800586e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005872:	e02c      	b.n	80058ce <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	885b      	ldrh	r3, [r3, #2]
 800587c:	4619      	mov	r1, r3
 800587e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005882:	fb03 f101 	mul.w	r1, r3, r1
 8005886:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800588a:	440b      	add	r3, r1
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
          newPivot = *pTmp;
 8005894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	657b      	str	r3, [r7, #84]	; 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800589c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80058a0:	eeb0 7ae7 	vabs.f32	s14, s15
 80058a4:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80058a8:	eef0 7ae7 	vabs.f32	s15, s15
 80058ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80058b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058b4:	dd06      	ble.n	80058c4 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 80058b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            pivot = newPivot;
 80058be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 80058c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058c8:	3301      	adds	r3, #1
 80058ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80058ce:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80058d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d3cd      	bcc.n	8005874 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 80058d8:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80058dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80058e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058e4:	f000 809b 	beq.w	8005a1e <arm_mat_inverse_f32+0x2b4>
 80058e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80058ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80058f0:	429a      	cmp	r2, r3
 80058f2:	f000 8094 	beq.w	8005a1e <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	885b      	ldrh	r3, [r3, #2]
 800590a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800590c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800590e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	64bb      	str	r3, [r7, #72]	; 0x48
 8005916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005918:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800591a:	fb03 f202 	mul.w	r2, r3, r2
 800591e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005922:	4413      	add	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800592a:	4413      	add	r3, r2
 800592c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005932:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005936:	fb03 f202 	mul.w	r2, r3, r2
 800593a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800593e:	4413      	add	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005946:	4413      	add	r3, r2
 8005948:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800594c:	2300      	movs	r3, #0
 800594e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005952:	e018      	b.n	8005986 <arm_mat_inverse_f32+0x21c>
 8005954:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	63bb      	str	r3, [r7, #56]	; 0x38
 800595c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005960:	1d1a      	adds	r2, r3, #4
 8005962:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8005966:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800596a:	6812      	ldr	r2, [r2, #0]
 800596c:	601a      	str	r2, [r3, #0]
 800596e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005972:	1d1a      	adds	r2, r3, #4
 8005974:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8005978:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800597a:	601a      	str	r2, [r3, #0]
 800597c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005980:	3301      	adds	r3, #1
 8005982:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005986:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800598a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800598c:	429a      	cmp	r2, r3
 800598e:	dbe1      	blt.n	8005954 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	885b      	ldrh	r3, [r3, #2]
 80059a4:	647b      	str	r3, [r7, #68]	; 0x44
 80059a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059a8:	643b      	str	r3, [r7, #64]	; 0x40
 80059aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80059ae:	fb02 f303 	mul.w	r3, r2, r3
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80059b8:	4413      	add	r3, r2
 80059ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80059c4:	fb02 f303 	mul.w	r3, r2, r3
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80059ce:	4413      	add	r3, r2
 80059d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80059d4:	2300      	movs	r3, #0
 80059d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059da:	e018      	b.n	8005a0e <arm_mat_inverse_f32+0x2a4>
 80059dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059e8:	1d1a      	adds	r2, r3, #4
 80059ea:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80059ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80059f2:	6812      	ldr	r2, [r2, #0]
 80059f4:	601a      	str	r2, [r3, #0]
 80059f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80059fa:	1d1a      	adds	r2, r3, #4
 80059fc:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005a08:	3301      	adds	r3, #1
 8005a0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a14:	429a      	cmp	r2, r3
 8005a16:	dbe1      	blt.n	80059dc <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 8005a1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d009      	beq.n	8005a3a <arm_mat_inverse_f32+0x2d0>
 8005a26:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8005a2a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a32:	d102      	bne.n	8005a3a <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 8005a34:	f06f 0304 	mvn.w	r3, #4
 8005a38:	e208      	b.n	8005e4c <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 8005a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a3e:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 8005a42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a46:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	885b      	ldrh	r3, [r3, #2]
 8005a56:	637b      	str	r3, [r7, #52]	; 0x34
 8005a58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	633b      	str	r3, [r7, #48]	; 0x30
 8005a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a66:	fb03 f202 	mul.w	r2, r3, r2
 8005a6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a6e:	4413      	add	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8005a76:	4413      	add	r3, r2
 8005a78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005a82:	e011      	b.n	8005aa8 <arm_mat_inverse_f32+0x33e>
 8005a84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a88:	1d1a      	adds	r2, r3, #4
 8005a8a:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8005a8e:	ed93 7a00 	vldr	s14, [r3]
 8005a92:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8005a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a9a:	edc3 7a00 	vstr	s15, [r3]
 8005a9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005aa8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	dbe8      	blt.n	8005a84 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	885b      	ldrh	r3, [r3, #2]
 8005abe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ac8:	fb02 f303 	mul.w	r3, r2, r3
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ad8:	2300      	movs	r3, #0
 8005ada:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ade:	e011      	b.n	8005b04 <arm_mat_inverse_f32+0x39a>
 8005ae0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ae4:	1d1a      	adds	r2, r3, #4
 8005ae6:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8005aea:	ed93 7a00 	vldr	s14, [r3]
 8005aee:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8005af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005af6:	edc3 7a00 	vstr	s15, [r3]
 8005afa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005afe:	3301      	adds	r3, #1
 8005b00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b04:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8005b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	dbe8      	blt.n	8005ae0 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      for (;rowNb < pivotRow; rowNb++)
 8005b14:	e0ae      	b.n	8005c74 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	885b      	ldrh	r3, [r3, #2]
 8005b1e:	4619      	mov	r1, r3
 8005b20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b24:	fb03 f101 	mul.w	r1, r3, r1
 8005b28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b2c:	440b      	add	r3, r1
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           pivot = *pTmp;
 8005b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	885b      	ldrh	r3, [r3, #2]
 8005b54:	617b      	str	r3, [r7, #20]
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	613b      	str	r3, [r7, #16]
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8005b66:	fb03 f202 	mul.w	r2, r3, r2
 8005b6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b6e:	4413      	add	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8005b76:	4413      	add	r3, r2
 8005b78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005b80:	fb03 f202 	mul.w	r2, r3, r2
 8005b84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b88:	4413      	add	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005b90:	4413      	add	r3, r2
 8005b92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005b96:	2300      	movs	r3, #0
 8005b98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005b9c:	e01a      	b.n	8005bd4 <arm_mat_inverse_f32+0x46a>
 8005b9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ba2:	1d1a      	adds	r2, r3, #4
 8005ba4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005ba8:	ed93 7a00 	vldr	s14, [r3]
 8005bac:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8005bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005bb8:	1d1a      	adds	r2, r3, #4
 8005bba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8005bbe:	ed93 7a00 	vldr	s14, [r3]
 8005bc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bc6:	edc3 7a00 	vstr	s15, [r3]
 8005bca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005bce:	3301      	adds	r3, #1
 8005bd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005bd4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	dbdf      	blt.n	8005b9e <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	885b      	ldrh	r3, [r3, #2]
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	60bb      	str	r3, [r7, #8]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8005bfe:	fb02 f303 	mul.w	r3, r2, r3
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005c08:	4413      	add	r3, r2
 8005c0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c12:	fb02 f303 	mul.w	r3, r2, r3
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c22:	2300      	movs	r3, #0
 8005c24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c28:	e01a      	b.n	8005c60 <arm_mat_inverse_f32+0x4f6>
 8005c2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c2e:	1d1a      	adds	r2, r3, #4
 8005c30:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c34:	ed93 7a00 	vldr	s14, [r3]
 8005c38:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8005c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c44:	1d1a      	adds	r2, r3, #4
 8005c46:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005c4a:	ed93 7a00 	vldr	s14, [r3]
 8005c4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c52:	edc3 7a00 	vstr	s15, [r3]
 8005c56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c60:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	dbdf      	blt.n	8005c2a <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 8005c6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c6e:	3301      	adds	r3, #1
 8005c70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005c74:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8005c78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	f4ff af4b 	bcc.w	8005b16 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8005c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c82:	3301      	adds	r3, #1
 8005c84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005c88:	e092      	b.n	8005db0 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	885b      	ldrh	r3, [r3, #2]
 8005c92:	4619      	mov	r1, r3
 8005c94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c98:	fb03 f101 	mul.w	r1, r3, r1
 8005c9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ca0:	440b      	add	r3, r1
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           pivot = *pTmp;
 8005caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	677b      	str	r3, [r7, #116]	; 0x74
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	885b      	ldrh	r3, [r3, #2]
 8005cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8005cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	623b      	str	r3, [r7, #32]
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8005cd6:	fb03 f202 	mul.w	r2, r3, r2
 8005cda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005cde:	4413      	add	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005ce4:	4413      	add	r3, r2
 8005ce6:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005cec:	fb03 f202 	mul.w	r2, r3, r2
 8005cf0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005cf4:	4413      	add	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005cfa:	4413      	add	r3, r2
 8005cfc:	677b      	str	r3, [r7, #116]	; 0x74
 8005cfe:	2300      	movs	r3, #0
 8005d00:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005d02:	e014      	b.n	8005d2e <arm_mat_inverse_f32+0x5c4>
 8005d04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d06:	1d1a      	adds	r2, r3, #4
 8005d08:	677a      	str	r2, [r7, #116]	; 0x74
 8005d0a:	ed93 7a00 	vldr	s14, [r3]
 8005d0e:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8005d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d18:	1d1a      	adds	r2, r3, #4
 8005d1a:	67ba      	str	r2, [r7, #120]	; 0x78
 8005d1c:	ed93 7a00 	vldr	s14, [r3]
 8005d20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d24:	edc3 7a00 	vstr	s15, [r3]
 8005d28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005d2e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005d30:	6a3b      	ldr	r3, [r7, #32]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	dbe6      	blt.n	8005d04 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	885b      	ldrh	r3, [r3, #2]
 8005d46:	61fb      	str	r3, [r7, #28]
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	61bb      	str	r3, [r7, #24]
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8005d52:	fb02 f303 	mul.w	r3, r2, r3
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d5a:	4413      	add	r3, r2
 8005d5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005d62:	fb02 f303 	mul.w	r3, r2, r3
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d6a:	4413      	add	r3, r2
 8005d6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d6e:	2300      	movs	r3, #0
 8005d70:	673b      	str	r3, [r7, #112]	; 0x70
 8005d72:	e014      	b.n	8005d9e <arm_mat_inverse_f32+0x634>
 8005d74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d76:	1d1a      	adds	r2, r3, #4
 8005d78:	66ba      	str	r2, [r7, #104]	; 0x68
 8005d7a:	ed93 7a00 	vldr	s14, [r3]
 8005d7e:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8005d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d88:	1d1a      	adds	r2, r3, #4
 8005d8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d8c:	ed93 7a00 	vldr	s14, [r3]
 8005d90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d94:	edc3 7a00 	vstr	s15, [r3]
 8005d98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	673b      	str	r3, [r7, #112]	; 0x70
 8005d9e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	dbe6      	blt.n	8005d74 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8005da6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005daa:	3301      	adds	r3, #1
 8005dac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005db0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8005db4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005db6:	429a      	cmp	r2, r3
 8005db8:	f4ff af67 	bcc.w	8005c8a <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 8005dbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005dc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005dca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	f4ff ad32 	bcc.w	8005836 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 8005dd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d033      	beq.n	8005e48 <arm_mat_inverse_f32+0x6de>
 8005de0:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8005de4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dec:	d12c      	bne.n	8005e48 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	667b      	str	r3, [r7, #100]	; 0x64
      for (i = 0; i < numRows * numCols; i++)
 8005df4:	2300      	movs	r3, #0
 8005df6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005dfa:	e010      	b.n	8005e1e <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 8005dfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005e04:	4413      	add	r3, r2
 8005e06:	edd3 7a00 	vldr	s15, [r3]
 8005e0a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e12:	d10d      	bne.n	8005e30 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 8005e14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e18:	3301      	adds	r3, #1
 8005e1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e22:	fb02 f303 	mul.w	r3, r2, r3
 8005e26:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d3e6      	bcc.n	8005dfc <arm_mat_inverse_f32+0x692>
 8005e2e:	e000      	b.n	8005e32 <arm_mat_inverse_f32+0x6c8>
            break;
 8005e30:	bf00      	nop
      }

      if (i == numRows * numCols)
 8005e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e36:	fb02 f303 	mul.w	r3, r2, r3
 8005e3a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d102      	bne.n	8005e48 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 8005e42:	23fb      	movs	r3, #251	; 0xfb
 8005e44:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
    }
  }

  /* Return to application */
  return (status);
 8005e48:	f997 30c3 	ldrsb.w	r3, [r7, #195]	; 0xc3
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	37ec      	adds	r7, #236	; 0xec
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b093      	sub	sp, #76	; 0x4c
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	643b      	str	r3, [r7, #64]	; 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	885b      	ldrh	r3, [r3, #2]
 8005e8c:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	885b      	ldrh	r3, [r3, #2]
 8005e92:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 8005e94:	2300      	movs	r3, #0
 8005e96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e98:	8b7b      	ldrh	r3, [r7, #26]
 8005e9a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 8005e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	69fa      	ldr	r2, [r7, #28]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	63bb      	str	r3, [r7, #56]	; 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 8005ea6:	8b3b      	ldrh	r3, [r7, #24]
 8005ea8:	633b      	str	r3, [r7, #48]	; 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	643b      	str	r3, [r7, #64]	; 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8005eb0:	f04f 0300 	mov.w	r3, #0
 8005eb4:	637b      	str	r3, [r7, #52]	; 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 8005eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eb8:	647b      	str	r3, [r7, #68]	; 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 8005eba:	8afb      	ldrh	r3, [r7, #22]
 8005ebc:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 8005ebe:	e017      	b.n	8005ef0 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 8005ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ec2:	1d1a      	adds	r2, r3, #4
 8005ec4:	647a      	str	r2, [r7, #68]	; 0x44
 8005ec6:	ed93 7a00 	vldr	s14, [r3]
 8005eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ecc:	edd3 7a00 	vldr	s15, [r3]
 8005ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ed4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005ed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005edc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
          pIn2 += numColsB;
 8005ee0:	8b3b      	ldrh	r3, [r7, #24]
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ee6:	4413      	add	r3, r2
 8005ee8:	643b      	str	r3, [r7, #64]	; 0x40

          /* Decrement loop counter */
          colCnt--;
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	3b01      	subs	r3, #1
 8005eee:	627b      	str	r3, [r7, #36]	; 0x24
        while (colCnt > 0U)
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1e4      	bne.n	8005ec0 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 8005ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef8:	1d1a      	adds	r2, r3, #4
 8005efa:	63ba      	str	r2, [r7, #56]	; 0x38
 8005efc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005efe:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 8005f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f02:	3b01      	subs	r3, #1
 8005f04:	633b      	str	r3, [r7, #48]	; 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 8005f06:	8b3a      	ldrh	r2, [r7, #24]
 8005f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	6a3a      	ldr	r2, [r7, #32]
 8005f10:	4413      	add	r3, r2
 8005f12:	643b      	str	r3, [r7, #64]	; 0x40

      } while (col > 0U);
 8005f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1ca      	bne.n	8005eb0 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 8005f1a:	8b3b      	ldrh	r3, [r7, #24]
 8005f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f1e:	4413      	add	r3, r2
 8005f20:	62fb      	str	r3, [r7, #44]	; 0x2c
      pInA = pInA + numColsA;
 8005f22:	8afb      	ldrh	r3, [r7, #22]
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f28:	4413      	add	r3, r2
 8005f2a:	63fb      	str	r3, [r7, #60]	; 0x3c

      /* Decrement row loop counter */
      row--;
 8005f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	62bb      	str	r3, [r7, #40]	; 0x28

    } while (row > 0U);
 8005f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1b1      	bne.n	8005e9c <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 8005f3c:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	374c      	adds	r7, #76	; 0x4c
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b08b      	sub	sp, #44	; 0x2c
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	ed87 0a02 	vstr	s0, [r7, #8]
 8005f58:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	885b      	ldrh	r3, [r3, #2]
 8005f70:	fb02 f303 	mul.w	r3, r2, r3
 8005f74:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8005f7a:	e010      	b.n	8005f9e <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7e:	1d1a      	adds	r2, r3, #4
 8005f80:	627a      	str	r2, [r7, #36]	; 0x24
 8005f82:	ed93 7a00 	vldr	s14, [r3]
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	1d1a      	adds	r2, r3, #4
 8005f8a:	623a      	str	r2, [r7, #32]
 8005f8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f94:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1eb      	bne.n	8005f7c <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 8005fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	372c      	adds	r7, #44	; 0x2c
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b08b      	sub	sp, #44	; 0x2c
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	881b      	ldrh	r3, [r3, #0]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	885b      	ldrh	r3, [r3, #2]
 8005fe0:	fb02 f303 	mul.w	r3, r2, r3
 8005fe4:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8005fea:	e013      	b.n	8006014 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 8005fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fee:	1d1a      	adds	r2, r3, #4
 8005ff0:	627a      	str	r2, [r7, #36]	; 0x24
 8005ff2:	ed93 7a00 	vldr	s14, [r3]
 8005ff6:	6a3b      	ldr	r3, [r7, #32]
 8005ff8:	1d1a      	adds	r2, r3, #4
 8005ffa:	623a      	str	r2, [r7, #32]
 8005ffc:	edd3 7a00 	vldr	s15, [r3]
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	1d1a      	adds	r2, r3, #4
 8006004:	61fa      	str	r2, [r7, #28]
 8006006:	ee77 7a67 	vsub.f32	s15, s14, s15
 800600a:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	3b01      	subs	r3, #1
 8006012:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1e8      	bne.n	8005fec <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800601a:	2300      	movs	r3, #0
 800601c:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800601e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8006022:	4618      	mov	r0, r3
 8006024:	372c      	adds	r7, #44	; 0x2c
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800602e:	b480      	push	{r7}
 8006030:	b08b      	sub	sp, #44	; 0x2c
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	881b      	ldrh	r3, [r3, #0]
 8006048:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	885b      	ldrh	r3, [r3, #2]
 800604e:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8006050:	89fb      	ldrh	r3, [r7, #14]
 8006052:	61bb      	str	r3, [r7, #24]
 8006054:	2300      	movs	r3, #0
 8006056:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	4413      	add	r3, r2
 8006060:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8006062:	89bb      	ldrh	r3, [r7, #12]
 8006064:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8006066:	e00d      	b.n	8006084 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8006068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606a:	1d1a      	adds	r2, r3, #4
 800606c:	627a      	str	r2, [r7, #36]	; 0x24
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8006074:	89fb      	ldrh	r3, [r7, #14]
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	6a3a      	ldr	r2, [r7, #32]
 800607a:	4413      	add	r3, r2
 800607c:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	3b01      	subs	r3, #1
 8006082:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1ee      	bne.n	8006068 <arm_mat_trans_f32+0x3a>
      }

      i++;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	3301      	adds	r3, #1
 800608e:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	3b01      	subs	r3, #1
 8006094:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1dd      	bne.n	8006058 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800609c:	2300      	movs	r3, #0
 800609e:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 80060a0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	372c      	adds	r7, #44	; 0x2c
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80060b4:	4b0e      	ldr	r3, [pc, #56]	; (80060f0 <HAL_Init+0x40>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a0d      	ldr	r2, [pc, #52]	; (80060f0 <HAL_Init+0x40>)
 80060ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80060c0:	4b0b      	ldr	r3, [pc, #44]	; (80060f0 <HAL_Init+0x40>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a0a      	ldr	r2, [pc, #40]	; (80060f0 <HAL_Init+0x40>)
 80060c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80060cc:	4b08      	ldr	r3, [pc, #32]	; (80060f0 <HAL_Init+0x40>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a07      	ldr	r2, [pc, #28]	; (80060f0 <HAL_Init+0x40>)
 80060d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80060d8:	2003      	movs	r0, #3
 80060da:	f000 fd2d 	bl	8006b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80060de:	2000      	movs	r0, #0
 80060e0:	f000 f808 	bl	80060f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80060e4:	f7fe fc5e 	bl	80049a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	40023c00 	.word	0x40023c00

080060f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80060fc:	4b12      	ldr	r3, [pc, #72]	; (8006148 <HAL_InitTick+0x54>)
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	4b12      	ldr	r3, [pc, #72]	; (800614c <HAL_InitTick+0x58>)
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	4619      	mov	r1, r3
 8006106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800610a:	fbb3 f3f1 	udiv	r3, r3, r1
 800610e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006112:	4618      	mov	r0, r3
 8006114:	f000 fd45 	bl	8006ba2 <HAL_SYSTICK_Config>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d001      	beq.n	8006122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e00e      	b.n	8006140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2b0f      	cmp	r3, #15
 8006126:	d80a      	bhi.n	800613e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006128:	2200      	movs	r2, #0
 800612a:	6879      	ldr	r1, [r7, #4]
 800612c:	f04f 30ff 	mov.w	r0, #4294967295
 8006130:	f000 fd0d 	bl	8006b4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006134:	4a06      	ldr	r2, [pc, #24]	; (8006150 <HAL_InitTick+0x5c>)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	e000      	b.n	8006140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
}
 8006140:	4618      	mov	r0, r3
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	20000234 	.word	0x20000234
 800614c:	2000023c 	.word	0x2000023c
 8006150:	20000238 	.word	0x20000238

08006154 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006154:	b480      	push	{r7}
 8006156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006158:	4b06      	ldr	r3, [pc, #24]	; (8006174 <HAL_IncTick+0x20>)
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	461a      	mov	r2, r3
 800615e:	4b06      	ldr	r3, [pc, #24]	; (8006178 <HAL_IncTick+0x24>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4413      	add	r3, r2
 8006164:	4a04      	ldr	r2, [pc, #16]	; (8006178 <HAL_IncTick+0x24>)
 8006166:	6013      	str	r3, [r2, #0]
}
 8006168:	bf00      	nop
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	2000023c 	.word	0x2000023c
 8006178:	200012d8 	.word	0x200012d8

0800617c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800617c:	b480      	push	{r7}
 800617e:	af00      	add	r7, sp, #0
  return uwTick;
 8006180:	4b03      	ldr	r3, [pc, #12]	; (8006190 <HAL_GetTick+0x14>)
 8006182:	681b      	ldr	r3, [r3, #0]
}
 8006184:	4618      	mov	r0, r3
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	200012d8 	.word	0x200012d8

08006194 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800619c:	2300      	movs	r3, #0
 800619e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e033      	b.n	8006212 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d109      	bne.n	80061c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7fd f8f2 	bl	800339c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ca:	f003 0310 	and.w	r3, r3, #16
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d118      	bne.n	8006204 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80061da:	f023 0302 	bic.w	r3, r3, #2
 80061de:	f043 0202 	orr.w	r2, r3, #2
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fa58 	bl	800669c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f6:	f023 0303 	bic.w	r3, r3, #3
 80061fa:	f043 0201 	orr.w	r2, r3, #1
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	641a      	str	r2, [r3, #64]	; 0x40
 8006202:	e001      	b.n	8006208 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006210:	7bfb      	ldrb	r3, [r7, #15]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
	...

0800621c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006228:	2300      	movs	r3, #0
 800622a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006232:	2b01      	cmp	r3, #1
 8006234:	d101      	bne.n	800623a <HAL_ADC_Start_DMA+0x1e>
 8006236:	2302      	movs	r3, #2
 8006238:	e0ce      	b.n	80063d8 <HAL_ADC_Start_DMA+0x1bc>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b01      	cmp	r3, #1
 800624e:	d018      	beq.n	8006282 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	689a      	ldr	r2, [r3, #8]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f042 0201 	orr.w	r2, r2, #1
 800625e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006260:	4b5f      	ldr	r3, [pc, #380]	; (80063e0 <HAL_ADC_Start_DMA+0x1c4>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a5f      	ldr	r2, [pc, #380]	; (80063e4 <HAL_ADC_Start_DMA+0x1c8>)
 8006266:	fba2 2303 	umull	r2, r3, r2, r3
 800626a:	0c9a      	lsrs	r2, r3, #18
 800626c:	4613      	mov	r3, r2
 800626e:	005b      	lsls	r3, r3, #1
 8006270:	4413      	add	r3, r2
 8006272:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006274:	e002      	b.n	800627c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	3b01      	subs	r3, #1
 800627a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1f9      	bne.n	8006276 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800628c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006290:	d107      	bne.n	80062a2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	689a      	ldr	r2, [r3, #8]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	f040 8086 	bne.w	80063be <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80062ba:	f023 0301 	bic.w	r3, r3, #1
 80062be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d007      	beq.n	80062e4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80062dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f0:	d106      	bne.n	8006300 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062f6:	f023 0206 	bic.w	r2, r3, #6
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	645a      	str	r2, [r3, #68]	; 0x44
 80062fe:	e002      	b.n	8006306 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800630e:	4b36      	ldr	r3, [pc, #216]	; (80063e8 <HAL_ADC_Start_DMA+0x1cc>)
 8006310:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006316:	4a35      	ldr	r2, [pc, #212]	; (80063ec <HAL_ADC_Start_DMA+0x1d0>)
 8006318:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631e:	4a34      	ldr	r2, [pc, #208]	; (80063f0 <HAL_ADC_Start_DMA+0x1d4>)
 8006320:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006326:	4a33      	ldr	r2, [pc, #204]	; (80063f4 <HAL_ADC_Start_DMA+0x1d8>)
 8006328:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006332:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	685a      	ldr	r2, [r3, #4]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006342:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689a      	ldr	r2, [r3, #8]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006352:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	334c      	adds	r3, #76	; 0x4c
 800635e:	4619      	mov	r1, r3
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f000 fcd8 	bl	8006d18 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f003 031f 	and.w	r3, r3, #31
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10f      	bne.n	8006394 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d129      	bne.n	80063d6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006390:	609a      	str	r2, [r3, #8]
 8006392:	e020      	b.n	80063d6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a17      	ldr	r2, [pc, #92]	; (80063f8 <HAL_ADC_Start_DMA+0x1dc>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d11b      	bne.n	80063d6 <HAL_ADC_Start_DMA+0x1ba>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d114      	bne.n	80063d6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689a      	ldr	r2, [r3, #8]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80063ba:	609a      	str	r2, [r3, #8]
 80063bc:	e00b      	b.n	80063d6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c2:	f043 0210 	orr.w	r2, r3, #16
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ce:	f043 0201 	orr.w	r2, r3, #1
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3718      	adds	r7, #24
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	20000234 	.word	0x20000234
 80063e4:	431bde83 	.word	0x431bde83
 80063e8:	40012300 	.word	0x40012300
 80063ec:	08006895 	.word	0x08006895
 80063f0:	0800694f 	.word	0x0800694f
 80063f4:	0800696b 	.word	0x0800696b
 80063f8:	40012000 	.word	0x40012000

080063fc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006442:	2300      	movs	r3, #0
 8006444:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800644c:	2b01      	cmp	r3, #1
 800644e:	d101      	bne.n	8006454 <HAL_ADC_ConfigChannel+0x1c>
 8006450:	2302      	movs	r3, #2
 8006452:	e113      	b.n	800667c <HAL_ADC_ConfigChannel+0x244>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b09      	cmp	r3, #9
 8006462:	d925      	bls.n	80064b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68d9      	ldr	r1, [r3, #12]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	b29b      	uxth	r3, r3
 8006470:	461a      	mov	r2, r3
 8006472:	4613      	mov	r3, r2
 8006474:	005b      	lsls	r3, r3, #1
 8006476:	4413      	add	r3, r2
 8006478:	3b1e      	subs	r3, #30
 800647a:	2207      	movs	r2, #7
 800647c:	fa02 f303 	lsl.w	r3, r2, r3
 8006480:	43da      	mvns	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	400a      	ands	r2, r1
 8006488:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68d9      	ldr	r1, [r3, #12]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	689a      	ldr	r2, [r3, #8]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	b29b      	uxth	r3, r3
 800649a:	4618      	mov	r0, r3
 800649c:	4603      	mov	r3, r0
 800649e:	005b      	lsls	r3, r3, #1
 80064a0:	4403      	add	r3, r0
 80064a2:	3b1e      	subs	r3, #30
 80064a4:	409a      	lsls	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	60da      	str	r2, [r3, #12]
 80064ae:	e022      	b.n	80064f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6919      	ldr	r1, [r3, #16]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	461a      	mov	r2, r3
 80064be:	4613      	mov	r3, r2
 80064c0:	005b      	lsls	r3, r3, #1
 80064c2:	4413      	add	r3, r2
 80064c4:	2207      	movs	r2, #7
 80064c6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ca:	43da      	mvns	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	400a      	ands	r2, r1
 80064d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6919      	ldr	r1, [r3, #16]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	689a      	ldr	r2, [r3, #8]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	4618      	mov	r0, r3
 80064e6:	4603      	mov	r3, r0
 80064e8:	005b      	lsls	r3, r3, #1
 80064ea:	4403      	add	r3, r0
 80064ec:	409a      	lsls	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	430a      	orrs	r2, r1
 80064f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	2b06      	cmp	r3, #6
 80064fc:	d824      	bhi.n	8006548 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	4613      	mov	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	3b05      	subs	r3, #5
 8006510:	221f      	movs	r2, #31
 8006512:	fa02 f303 	lsl.w	r3, r2, r3
 8006516:	43da      	mvns	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	400a      	ands	r2, r1
 800651e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	b29b      	uxth	r3, r3
 800652c:	4618      	mov	r0, r3
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	4613      	mov	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4413      	add	r3, r2
 8006538:	3b05      	subs	r3, #5
 800653a:	fa00 f203 	lsl.w	r2, r0, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	635a      	str	r2, [r3, #52]	; 0x34
 8006546:	e04c      	b.n	80065e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	2b0c      	cmp	r3, #12
 800654e:	d824      	bhi.n	800659a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	4613      	mov	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	3b23      	subs	r3, #35	; 0x23
 8006562:	221f      	movs	r2, #31
 8006564:	fa02 f303 	lsl.w	r3, r2, r3
 8006568:	43da      	mvns	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	400a      	ands	r2, r1
 8006570:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	b29b      	uxth	r3, r3
 800657e:	4618      	mov	r0, r3
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	4613      	mov	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	3b23      	subs	r3, #35	; 0x23
 800658c:	fa00 f203 	lsl.w	r2, r0, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	430a      	orrs	r2, r1
 8006596:	631a      	str	r2, [r3, #48]	; 0x30
 8006598:	e023      	b.n	80065e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	685a      	ldr	r2, [r3, #4]
 80065a4:	4613      	mov	r3, r2
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	4413      	add	r3, r2
 80065aa:	3b41      	subs	r3, #65	; 0x41
 80065ac:	221f      	movs	r2, #31
 80065ae:	fa02 f303 	lsl.w	r3, r2, r3
 80065b2:	43da      	mvns	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	400a      	ands	r2, r1
 80065ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	4618      	mov	r0, r3
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	685a      	ldr	r2, [r3, #4]
 80065ce:	4613      	mov	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	3b41      	subs	r3, #65	; 0x41
 80065d6:	fa00 f203 	lsl.w	r2, r0, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	430a      	orrs	r2, r1
 80065e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80065e2:	4b29      	ldr	r3, [pc, #164]	; (8006688 <HAL_ADC_ConfigChannel+0x250>)
 80065e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a28      	ldr	r2, [pc, #160]	; (800668c <HAL_ADC_ConfigChannel+0x254>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d10f      	bne.n	8006610 <HAL_ADC_ConfigChannel+0x1d8>
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2b12      	cmp	r3, #18
 80065f6:	d10b      	bne.n	8006610 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a1d      	ldr	r2, [pc, #116]	; (800668c <HAL_ADC_ConfigChannel+0x254>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d12b      	bne.n	8006672 <HAL_ADC_ConfigChannel+0x23a>
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a1c      	ldr	r2, [pc, #112]	; (8006690 <HAL_ADC_ConfigChannel+0x258>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d003      	beq.n	800662c <HAL_ADC_ConfigChannel+0x1f4>
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2b11      	cmp	r3, #17
 800662a:	d122      	bne.n	8006672 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a11      	ldr	r2, [pc, #68]	; (8006690 <HAL_ADC_ConfigChannel+0x258>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d111      	bne.n	8006672 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800664e:	4b11      	ldr	r3, [pc, #68]	; (8006694 <HAL_ADC_ConfigChannel+0x25c>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a11      	ldr	r2, [pc, #68]	; (8006698 <HAL_ADC_ConfigChannel+0x260>)
 8006654:	fba2 2303 	umull	r2, r3, r2, r3
 8006658:	0c9a      	lsrs	r2, r3, #18
 800665a:	4613      	mov	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4413      	add	r3, r2
 8006660:	005b      	lsls	r3, r3, #1
 8006662:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006664:	e002      	b.n	800666c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	3b01      	subs	r3, #1
 800666a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1f9      	bne.n	8006666 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3714      	adds	r7, #20
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr
 8006688:	40012300 	.word	0x40012300
 800668c:	40012000 	.word	0x40012000
 8006690:	10000012 	.word	0x10000012
 8006694:	20000234 	.word	0x20000234
 8006698:	431bde83 	.word	0x431bde83

0800669c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80066a4:	4b79      	ldr	r3, [pc, #484]	; (800688c <ADC_Init+0x1f0>)
 80066a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	431a      	orrs	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	6859      	ldr	r1, [r3, #4]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	021a      	lsls	r2, r3, #8
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80066f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6859      	ldr	r1, [r3, #4]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	689a      	ldr	r2, [r3, #8]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	430a      	orrs	r2, r1
 8006706:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689a      	ldr	r2, [r3, #8]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006716:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6899      	ldr	r1, [r3, #8]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68da      	ldr	r2, [r3, #12]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	430a      	orrs	r2, r1
 8006728:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672e:	4a58      	ldr	r2, [pc, #352]	; (8006890 <ADC_Init+0x1f4>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d022      	beq.n	800677a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689a      	ldr	r2, [r3, #8]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006742:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6899      	ldr	r1, [r3, #8]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	430a      	orrs	r2, r1
 8006754:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	689a      	ldr	r2, [r3, #8]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006764:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6899      	ldr	r1, [r3, #8]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	430a      	orrs	r2, r1
 8006776:	609a      	str	r2, [r3, #8]
 8006778:	e00f      	b.n	800679a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	689a      	ldr	r2, [r3, #8]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006788:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	689a      	ldr	r2, [r3, #8]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006798:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689a      	ldr	r2, [r3, #8]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f022 0202 	bic.w	r2, r2, #2
 80067a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	6899      	ldr	r1, [r3, #8]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	7e1b      	ldrb	r3, [r3, #24]
 80067b4:	005a      	lsls	r2, r3, #1
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	430a      	orrs	r2, r1
 80067bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d01b      	beq.n	8006800 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80067e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6859      	ldr	r1, [r3, #4]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f2:	3b01      	subs	r3, #1
 80067f4:	035a      	lsls	r2, r3, #13
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	430a      	orrs	r2, r1
 80067fc:	605a      	str	r2, [r3, #4]
 80067fe:	e007      	b.n	8006810 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	685a      	ldr	r2, [r3, #4]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800680e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800681e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	69db      	ldr	r3, [r3, #28]
 800682a:	3b01      	subs	r3, #1
 800682c:	051a      	lsls	r2, r3, #20
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	430a      	orrs	r2, r1
 8006834:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	689a      	ldr	r2, [r3, #8]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006844:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6899      	ldr	r1, [r3, #8]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006852:	025a      	lsls	r2, r3, #9
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	430a      	orrs	r2, r1
 800685a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689a      	ldr	r2, [r3, #8]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800686a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6899      	ldr	r1, [r3, #8]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	029a      	lsls	r2, r3, #10
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	430a      	orrs	r2, r1
 800687e:	609a      	str	r2, [r3, #8]
}
 8006880:	bf00      	nop
 8006882:	3714      	adds	r7, #20
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr
 800688c:	40012300 	.word	0x40012300
 8006890:	0f000001 	.word	0x0f000001

08006894 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d13c      	bne.n	8006928 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d12b      	bne.n	8006920 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d127      	bne.n	8006920 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d006      	beq.n	80068ec <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d119      	bne.n	8006920 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f022 0220 	bic.w	r2, r2, #32
 80068fa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006900:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d105      	bne.n	8006920 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006918:	f043 0201 	orr.w	r2, r3, #1
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f7ff fd6b 	bl	80063fc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006926:	e00e      	b.n	8006946 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692c:	f003 0310 	and.w	r3, r3, #16
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f7ff fd75 	bl	8006424 <HAL_ADC_ErrorCallback>
}
 800693a:	e004      	b.n	8006946 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	4798      	blx	r3
}
 8006946:	bf00      	nop
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b084      	sub	sp, #16
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f7ff fd57 	bl	8006410 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006962:	bf00      	nop
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b084      	sub	sp, #16
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006976:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2240      	movs	r2, #64	; 0x40
 800697c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006982:	f043 0204 	orr.w	r2, r3, #4
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f7ff fd4a 	bl	8006424 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006990:	bf00      	nop
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f003 0307 	and.w	r3, r3, #7
 80069a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80069a8:	4b0c      	ldr	r3, [pc, #48]	; (80069dc <__NVIC_SetPriorityGrouping+0x44>)
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80069b4:	4013      	ands	r3, r2
 80069b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80069c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80069c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80069ca:	4a04      	ldr	r2, [pc, #16]	; (80069dc <__NVIC_SetPriorityGrouping+0x44>)
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	60d3      	str	r3, [r2, #12]
}
 80069d0:	bf00      	nop
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	e000ed00 	.word	0xe000ed00

080069e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80069e0:	b480      	push	{r7}
 80069e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80069e4:	4b04      	ldr	r3, [pc, #16]	; (80069f8 <__NVIC_GetPriorityGrouping+0x18>)
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	0a1b      	lsrs	r3, r3, #8
 80069ea:	f003 0307 	and.w	r3, r3, #7
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	e000ed00 	.word	0xe000ed00

080069fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	4603      	mov	r3, r0
 8006a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	db0b      	blt.n	8006a26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a0e:	79fb      	ldrb	r3, [r7, #7]
 8006a10:	f003 021f 	and.w	r2, r3, #31
 8006a14:	4907      	ldr	r1, [pc, #28]	; (8006a34 <__NVIC_EnableIRQ+0x38>)
 8006a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a1a:	095b      	lsrs	r3, r3, #5
 8006a1c:	2001      	movs	r0, #1
 8006a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8006a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006a26:	bf00      	nop
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	e000e100 	.word	0xe000e100

08006a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	4603      	mov	r3, r0
 8006a40:	6039      	str	r1, [r7, #0]
 8006a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	db0a      	blt.n	8006a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	b2da      	uxtb	r2, r3
 8006a50:	490c      	ldr	r1, [pc, #48]	; (8006a84 <__NVIC_SetPriority+0x4c>)
 8006a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a56:	0112      	lsls	r2, r2, #4
 8006a58:	b2d2      	uxtb	r2, r2
 8006a5a:	440b      	add	r3, r1
 8006a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a60:	e00a      	b.n	8006a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	4908      	ldr	r1, [pc, #32]	; (8006a88 <__NVIC_SetPriority+0x50>)
 8006a68:	79fb      	ldrb	r3, [r7, #7]
 8006a6a:	f003 030f 	and.w	r3, r3, #15
 8006a6e:	3b04      	subs	r3, #4
 8006a70:	0112      	lsls	r2, r2, #4
 8006a72:	b2d2      	uxtb	r2, r2
 8006a74:	440b      	add	r3, r1
 8006a76:	761a      	strb	r2, [r3, #24]
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr
 8006a84:	e000e100 	.word	0xe000e100
 8006a88:	e000ed00 	.word	0xe000ed00

08006a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b089      	sub	sp, #36	; 0x24
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f003 0307 	and.w	r3, r3, #7
 8006a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	f1c3 0307 	rsb	r3, r3, #7
 8006aa6:	2b04      	cmp	r3, #4
 8006aa8:	bf28      	it	cs
 8006aaa:	2304      	movcs	r3, #4
 8006aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	3304      	adds	r3, #4
 8006ab2:	2b06      	cmp	r3, #6
 8006ab4:	d902      	bls.n	8006abc <NVIC_EncodePriority+0x30>
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	3b03      	subs	r3, #3
 8006aba:	e000      	b.n	8006abe <NVIC_EncodePriority+0x32>
 8006abc:	2300      	movs	r3, #0
 8006abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aca:	43da      	mvns	r2, r3
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	401a      	ands	r2, r3
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	fa01 f303 	lsl.w	r3, r1, r3
 8006ade:	43d9      	mvns	r1, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ae4:	4313      	orrs	r3, r2
         );
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3724      	adds	r7, #36	; 0x24
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
	...

08006af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	3b01      	subs	r3, #1
 8006b00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b04:	d301      	bcc.n	8006b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006b06:	2301      	movs	r3, #1
 8006b08:	e00f      	b.n	8006b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006b0a:	4a0a      	ldr	r2, [pc, #40]	; (8006b34 <SysTick_Config+0x40>)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006b12:	210f      	movs	r1, #15
 8006b14:	f04f 30ff 	mov.w	r0, #4294967295
 8006b18:	f7ff ff8e 	bl	8006a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b1c:	4b05      	ldr	r3, [pc, #20]	; (8006b34 <SysTick_Config+0x40>)
 8006b1e:	2200      	movs	r2, #0
 8006b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b22:	4b04      	ldr	r3, [pc, #16]	; (8006b34 <SysTick_Config+0x40>)
 8006b24:	2207      	movs	r2, #7
 8006b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	e000e010 	.word	0xe000e010

08006b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f7ff ff29 	bl	8006998 <__NVIC_SetPriorityGrouping>
}
 8006b46:	bf00      	nop
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b086      	sub	sp, #24
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	4603      	mov	r3, r0
 8006b56:	60b9      	str	r1, [r7, #8]
 8006b58:	607a      	str	r2, [r7, #4]
 8006b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006b60:	f7ff ff3e 	bl	80069e0 <__NVIC_GetPriorityGrouping>
 8006b64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	68b9      	ldr	r1, [r7, #8]
 8006b6a:	6978      	ldr	r0, [r7, #20]
 8006b6c:	f7ff ff8e 	bl	8006a8c <NVIC_EncodePriority>
 8006b70:	4602      	mov	r2, r0
 8006b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b76:	4611      	mov	r1, r2
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7ff ff5d 	bl	8006a38 <__NVIC_SetPriority>
}
 8006b7e:	bf00      	nop
 8006b80:	3718      	adds	r7, #24
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b082      	sub	sp, #8
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7ff ff31 	bl	80069fc <__NVIC_EnableIRQ>
}
 8006b9a:	bf00      	nop
 8006b9c:	3708      	adds	r7, #8
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b082      	sub	sp, #8
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f7ff ffa2 	bl	8006af4 <SysTick_Config>
 8006bb0:	4603      	mov	r3, r0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3708      	adds	r7, #8
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
	...

08006bbc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006bc8:	f7ff fad8 	bl	800617c <HAL_GetTick>
 8006bcc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d101      	bne.n	8006bd8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e099      	b.n	8006d0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2202      	movs	r2, #2
 8006bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f022 0201 	bic.w	r2, r2, #1
 8006bf6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006bf8:	e00f      	b.n	8006c1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006bfa:	f7ff fabf 	bl	800617c <HAL_GetTick>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	2b05      	cmp	r3, #5
 8006c06:	d908      	bls.n	8006c1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2203      	movs	r2, #3
 8006c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e078      	b.n	8006d0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0301 	and.w	r3, r3, #1
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1e8      	bne.n	8006bfa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	4b38      	ldr	r3, [pc, #224]	; (8006d14 <HAL_DMA_Init+0x158>)
 8006c34:	4013      	ands	r3, r2
 8006c36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006c46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a1b      	ldr	r3, [r3, #32]
 8006c64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c70:	2b04      	cmp	r3, #4
 8006c72:	d107      	bne.n	8006c84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f023 0307 	bic.w	r3, r3, #7
 8006c9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca0:	697a      	ldr	r2, [r7, #20]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006caa:	2b04      	cmp	r3, #4
 8006cac:	d117      	bne.n	8006cde <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00e      	beq.n	8006cde <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fb1b 	bl	80072fc <DMA_CheckFifoParam>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d008      	beq.n	8006cde <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2240      	movs	r2, #64	; 0x40
 8006cd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e016      	b.n	8006d0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fad2 	bl	8007290 <DMA_CalcBaseAndBitshift>
 8006cec:	4603      	mov	r3, r0
 8006cee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cf4:	223f      	movs	r2, #63	; 0x3f
 8006cf6:	409a      	lsls	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3718      	adds	r7, #24
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	f010803f 	.word	0xf010803f

08006d18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
 8006d24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d26:	2300      	movs	r3, #0
 8006d28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d101      	bne.n	8006d3e <HAL_DMA_Start_IT+0x26>
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	e040      	b.n	8006dc0 <HAL_DMA_Start_IT+0xa8>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d12f      	bne.n	8006db2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2202      	movs	r2, #2
 8006d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	68b9      	ldr	r1, [r7, #8]
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f000 fa64 	bl	8007234 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d70:	223f      	movs	r2, #63	; 0x3f
 8006d72:	409a      	lsls	r2, r3
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f042 0216 	orr.w	r2, r2, #22
 8006d86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d007      	beq.n	8006da0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f042 0208 	orr.w	r2, r2, #8
 8006d9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f042 0201 	orr.w	r2, r2, #1
 8006dae:	601a      	str	r2, [r3, #0]
 8006db0:	e005      	b.n	8006dbe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006dba:	2302      	movs	r3, #2
 8006dbc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3718      	adds	r7, #24
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dd4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006dd6:	f7ff f9d1 	bl	800617c <HAL_GetTick>
 8006dda:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d008      	beq.n	8006dfa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2280      	movs	r2, #128	; 0x80
 8006dec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e052      	b.n	8006ea0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f022 0216 	bic.w	r2, r2, #22
 8006e08:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	695a      	ldr	r2, [r3, #20]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e18:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d103      	bne.n	8006e2a <HAL_DMA_Abort+0x62>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d007      	beq.n	8006e3a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f022 0208 	bic.w	r2, r2, #8
 8006e38:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f022 0201 	bic.w	r2, r2, #1
 8006e48:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e4a:	e013      	b.n	8006e74 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006e4c:	f7ff f996 	bl	800617c <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	2b05      	cmp	r3, #5
 8006e58:	d90c      	bls.n	8006e74 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2220      	movs	r2, #32
 8006e5e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2203      	movs	r2, #3
 8006e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006e70:	2303      	movs	r3, #3
 8006e72:	e015      	b.n	8006ea0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1e4      	bne.n	8006e4c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e86:	223f      	movs	r2, #63	; 0x3f
 8006e88:	409a      	lsls	r2, r3
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d004      	beq.n	8006ec6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2280      	movs	r2, #128	; 0x80
 8006ec0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e00c      	b.n	8006ee0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2205      	movs	r2, #5
 8006eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f022 0201 	bic.w	r2, r2, #1
 8006edc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006ef8:	4b8e      	ldr	r3, [pc, #568]	; (8007134 <HAL_DMA_IRQHandler+0x248>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a8e      	ldr	r2, [pc, #568]	; (8007138 <HAL_DMA_IRQHandler+0x24c>)
 8006efe:	fba2 2303 	umull	r2, r3, r2, r3
 8006f02:	0a9b      	lsrs	r3, r3, #10
 8006f04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f16:	2208      	movs	r2, #8
 8006f18:	409a      	lsls	r2, r3
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d01a      	beq.n	8006f58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0304 	and.w	r3, r3, #4
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d013      	beq.n	8006f58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f022 0204 	bic.w	r2, r2, #4
 8006f3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f44:	2208      	movs	r2, #8
 8006f46:	409a      	lsls	r2, r3
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f50:	f043 0201 	orr.w	r2, r3, #1
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	409a      	lsls	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	4013      	ands	r3, r2
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d012      	beq.n	8006f8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	695b      	ldr	r3, [r3, #20]
 8006f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00b      	beq.n	8006f8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	409a      	lsls	r2, r3
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f86:	f043 0202 	orr.w	r2, r3, #2
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f92:	2204      	movs	r2, #4
 8006f94:	409a      	lsls	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	4013      	ands	r3, r2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d012      	beq.n	8006fc4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0302 	and.w	r3, r3, #2
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00b      	beq.n	8006fc4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fb0:	2204      	movs	r2, #4
 8006fb2:	409a      	lsls	r2, r3
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fbc:	f043 0204 	orr.w	r2, r3, #4
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fc8:	2210      	movs	r2, #16
 8006fca:	409a      	lsls	r2, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	4013      	ands	r3, r2
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d043      	beq.n	800705c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0308 	and.w	r3, r3, #8
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d03c      	beq.n	800705c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fe6:	2210      	movs	r2, #16
 8006fe8:	409a      	lsls	r2, r3
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d018      	beq.n	800702e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d108      	bne.n	800701c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700e:	2b00      	cmp	r3, #0
 8007010:	d024      	beq.n	800705c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	4798      	blx	r3
 800701a:	e01f      	b.n	800705c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007020:	2b00      	cmp	r3, #0
 8007022:	d01b      	beq.n	800705c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	4798      	blx	r3
 800702c:	e016      	b.n	800705c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007038:	2b00      	cmp	r3, #0
 800703a:	d107      	bne.n	800704c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f022 0208 	bic.w	r2, r2, #8
 800704a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007050:	2b00      	cmp	r3, #0
 8007052:	d003      	beq.n	800705c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007060:	2220      	movs	r2, #32
 8007062:	409a      	lsls	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	4013      	ands	r3, r2
 8007068:	2b00      	cmp	r3, #0
 800706a:	f000 808f 	beq.w	800718c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0310 	and.w	r3, r3, #16
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 8087 	beq.w	800718c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007082:	2220      	movs	r2, #32
 8007084:	409a      	lsls	r2, r3
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007090:	b2db      	uxtb	r3, r3
 8007092:	2b05      	cmp	r3, #5
 8007094:	d136      	bne.n	8007104 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 0216 	bic.w	r2, r2, #22
 80070a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	695a      	ldr	r2, [r3, #20]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d103      	bne.n	80070c6 <HAL_DMA_IRQHandler+0x1da>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d007      	beq.n	80070d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f022 0208 	bic.w	r2, r2, #8
 80070d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070da:	223f      	movs	r2, #63	; 0x3f
 80070dc:	409a      	lsls	r2, r3
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d07e      	beq.n	80071f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	4798      	blx	r3
        }
        return;
 8007102:	e079      	b.n	80071f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d01d      	beq.n	800714e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10d      	bne.n	800713c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007124:	2b00      	cmp	r3, #0
 8007126:	d031      	beq.n	800718c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	4798      	blx	r3
 8007130:	e02c      	b.n	800718c <HAL_DMA_IRQHandler+0x2a0>
 8007132:	bf00      	nop
 8007134:	20000234 	.word	0x20000234
 8007138:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007140:	2b00      	cmp	r3, #0
 8007142:	d023      	beq.n	800718c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	4798      	blx	r3
 800714c:	e01e      	b.n	800718c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007158:	2b00      	cmp	r3, #0
 800715a:	d10f      	bne.n	800717c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f022 0210 	bic.w	r2, r2, #16
 800716a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007180:	2b00      	cmp	r3, #0
 8007182:	d003      	beq.n	800718c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007190:	2b00      	cmp	r3, #0
 8007192:	d032      	beq.n	80071fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007198:	f003 0301 	and.w	r3, r3, #1
 800719c:	2b00      	cmp	r3, #0
 800719e:	d022      	beq.n	80071e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2205      	movs	r2, #5
 80071a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f022 0201 	bic.w	r2, r2, #1
 80071b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	3301      	adds	r3, #1
 80071bc:	60bb      	str	r3, [r7, #8]
 80071be:	697a      	ldr	r2, [r7, #20]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d307      	bcc.n	80071d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0301 	and.w	r3, r3, #1
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1f2      	bne.n	80071b8 <HAL_DMA_IRQHandler+0x2cc>
 80071d2:	e000      	b.n	80071d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80071d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d005      	beq.n	80071fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	4798      	blx	r3
 80071f6:	e000      	b.n	80071fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80071f8:	bf00      	nop
    }
  }
}
 80071fa:	3718      	adds	r7, #24
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800720e:	b2db      	uxtb	r3, r3
}
 8007210:	4618      	mov	r0, r3
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007228:	4618      	mov	r0, r3
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
 8007240:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007250:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	683a      	ldr	r2, [r7, #0]
 8007258:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	2b40      	cmp	r3, #64	; 0x40
 8007260:	d108      	bne.n	8007274 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007272:	e007      	b.n	8007284 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	60da      	str	r2, [r3, #12]
}
 8007284:	bf00      	nop
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	b2db      	uxtb	r3, r3
 800729e:	3b10      	subs	r3, #16
 80072a0:	4a14      	ldr	r2, [pc, #80]	; (80072f4 <DMA_CalcBaseAndBitshift+0x64>)
 80072a2:	fba2 2303 	umull	r2, r3, r2, r3
 80072a6:	091b      	lsrs	r3, r3, #4
 80072a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80072aa:	4a13      	ldr	r2, [pc, #76]	; (80072f8 <DMA_CalcBaseAndBitshift+0x68>)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	4413      	add	r3, r2
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	461a      	mov	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2b03      	cmp	r3, #3
 80072bc:	d909      	bls.n	80072d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80072c6:	f023 0303 	bic.w	r3, r3, #3
 80072ca:	1d1a      	adds	r2, r3, #4
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	659a      	str	r2, [r3, #88]	; 0x58
 80072d0:	e007      	b.n	80072e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80072da:	f023 0303 	bic.w	r3, r3, #3
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3714      	adds	r7, #20
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	aaaaaaab 	.word	0xaaaaaaab
 80072f8:	0800f624 	.word	0x0800f624

080072fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007304:	2300      	movs	r3, #0
 8007306:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d11f      	bne.n	8007356 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	2b03      	cmp	r3, #3
 800731a:	d856      	bhi.n	80073ca <DMA_CheckFifoParam+0xce>
 800731c:	a201      	add	r2, pc, #4	; (adr r2, 8007324 <DMA_CheckFifoParam+0x28>)
 800731e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007322:	bf00      	nop
 8007324:	08007335 	.word	0x08007335
 8007328:	08007347 	.word	0x08007347
 800732c:	08007335 	.word	0x08007335
 8007330:	080073cb 	.word	0x080073cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d046      	beq.n	80073ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007344:	e043      	b.n	80073ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800734e:	d140      	bne.n	80073d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007354:	e03d      	b.n	80073d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800735e:	d121      	bne.n	80073a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	2b03      	cmp	r3, #3
 8007364:	d837      	bhi.n	80073d6 <DMA_CheckFifoParam+0xda>
 8007366:	a201      	add	r2, pc, #4	; (adr r2, 800736c <DMA_CheckFifoParam+0x70>)
 8007368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736c:	0800737d 	.word	0x0800737d
 8007370:	08007383 	.word	0x08007383
 8007374:	0800737d 	.word	0x0800737d
 8007378:	08007395 	.word	0x08007395
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	73fb      	strb	r3, [r7, #15]
      break;
 8007380:	e030      	b.n	80073e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007386:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d025      	beq.n	80073da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007392:	e022      	b.n	80073da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007398:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800739c:	d11f      	bne.n	80073de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80073a2:	e01c      	b.n	80073de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d903      	bls.n	80073b2 <DMA_CheckFifoParam+0xb6>
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	2b03      	cmp	r3, #3
 80073ae:	d003      	beq.n	80073b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80073b0:	e018      	b.n	80073e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	73fb      	strb	r3, [r7, #15]
      break;
 80073b6:	e015      	b.n	80073e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00e      	beq.n	80073e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	73fb      	strb	r3, [r7, #15]
      break;
 80073c8:	e00b      	b.n	80073e2 <DMA_CheckFifoParam+0xe6>
      break;
 80073ca:	bf00      	nop
 80073cc:	e00a      	b.n	80073e4 <DMA_CheckFifoParam+0xe8>
      break;
 80073ce:	bf00      	nop
 80073d0:	e008      	b.n	80073e4 <DMA_CheckFifoParam+0xe8>
      break;
 80073d2:	bf00      	nop
 80073d4:	e006      	b.n	80073e4 <DMA_CheckFifoParam+0xe8>
      break;
 80073d6:	bf00      	nop
 80073d8:	e004      	b.n	80073e4 <DMA_CheckFifoParam+0xe8>
      break;
 80073da:	bf00      	nop
 80073dc:	e002      	b.n	80073e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80073de:	bf00      	nop
 80073e0:	e000      	b.n	80073e4 <DMA_CheckFifoParam+0xe8>
      break;
 80073e2:	bf00      	nop
    }
  } 
  
  return status; 
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop

080073f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b089      	sub	sp, #36	; 0x24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80073fe:	2300      	movs	r3, #0
 8007400:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007402:	2300      	movs	r3, #0
 8007404:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007406:	2300      	movs	r3, #0
 8007408:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800740a:	2300      	movs	r3, #0
 800740c:	61fb      	str	r3, [r7, #28]
 800740e:	e159      	b.n	80076c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007410:	2201      	movs	r2, #1
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	fa02 f303 	lsl.w	r3, r2, r3
 8007418:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	4013      	ands	r3, r2
 8007422:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	429a      	cmp	r2, r3
 800742a:	f040 8148 	bne.w	80076be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	f003 0303 	and.w	r3, r3, #3
 8007436:	2b01      	cmp	r3, #1
 8007438:	d005      	beq.n	8007446 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007442:	2b02      	cmp	r3, #2
 8007444:	d130      	bne.n	80074a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	005b      	lsls	r3, r3, #1
 8007450:	2203      	movs	r2, #3
 8007452:	fa02 f303 	lsl.w	r3, r2, r3
 8007456:	43db      	mvns	r3, r3
 8007458:	69ba      	ldr	r2, [r7, #24]
 800745a:	4013      	ands	r3, r2
 800745c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	68da      	ldr	r2, [r3, #12]
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	005b      	lsls	r3, r3, #1
 8007466:	fa02 f303 	lsl.w	r3, r2, r3
 800746a:	69ba      	ldr	r2, [r7, #24]
 800746c:	4313      	orrs	r3, r2
 800746e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	69ba      	ldr	r2, [r7, #24]
 8007474:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800747c:	2201      	movs	r2, #1
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	fa02 f303 	lsl.w	r3, r2, r3
 8007484:	43db      	mvns	r3, r3
 8007486:	69ba      	ldr	r2, [r7, #24]
 8007488:	4013      	ands	r3, r2
 800748a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	091b      	lsrs	r3, r3, #4
 8007492:	f003 0201 	and.w	r2, r3, #1
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	fa02 f303 	lsl.w	r3, r2, r3
 800749c:	69ba      	ldr	r2, [r7, #24]
 800749e:	4313      	orrs	r3, r2
 80074a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	69ba      	ldr	r2, [r7, #24]
 80074a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	f003 0303 	and.w	r3, r3, #3
 80074b0:	2b03      	cmp	r3, #3
 80074b2:	d017      	beq.n	80074e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	005b      	lsls	r3, r3, #1
 80074be:	2203      	movs	r2, #3
 80074c0:	fa02 f303 	lsl.w	r3, r2, r3
 80074c4:	43db      	mvns	r3, r3
 80074c6:	69ba      	ldr	r2, [r7, #24]
 80074c8:	4013      	ands	r3, r2
 80074ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	689a      	ldr	r2, [r3, #8]
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	005b      	lsls	r3, r3, #1
 80074d4:	fa02 f303 	lsl.w	r3, r2, r3
 80074d8:	69ba      	ldr	r2, [r7, #24]
 80074da:	4313      	orrs	r3, r2
 80074dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	f003 0303 	and.w	r3, r3, #3
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d123      	bne.n	8007538 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	08da      	lsrs	r2, r3, #3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	3208      	adds	r2, #8
 80074f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	f003 0307 	and.w	r3, r3, #7
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	220f      	movs	r2, #15
 8007508:	fa02 f303 	lsl.w	r3, r2, r3
 800750c:	43db      	mvns	r3, r3
 800750e:	69ba      	ldr	r2, [r7, #24]
 8007510:	4013      	ands	r3, r2
 8007512:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	691a      	ldr	r2, [r3, #16]
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	f003 0307 	and.w	r3, r3, #7
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	fa02 f303 	lsl.w	r3, r2, r3
 8007524:	69ba      	ldr	r2, [r7, #24]
 8007526:	4313      	orrs	r3, r2
 8007528:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	08da      	lsrs	r2, r3, #3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	3208      	adds	r2, #8
 8007532:	69b9      	ldr	r1, [r7, #24]
 8007534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	005b      	lsls	r3, r3, #1
 8007542:	2203      	movs	r2, #3
 8007544:	fa02 f303 	lsl.w	r3, r2, r3
 8007548:	43db      	mvns	r3, r3
 800754a:	69ba      	ldr	r2, [r7, #24]
 800754c:	4013      	ands	r3, r2
 800754e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	f003 0203 	and.w	r2, r3, #3
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	005b      	lsls	r3, r3, #1
 800755c:	fa02 f303 	lsl.w	r3, r2, r3
 8007560:	69ba      	ldr	r2, [r7, #24]
 8007562:	4313      	orrs	r3, r2
 8007564:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	69ba      	ldr	r2, [r7, #24]
 800756a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 80a2 	beq.w	80076be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800757a:	2300      	movs	r3, #0
 800757c:	60fb      	str	r3, [r7, #12]
 800757e:	4b57      	ldr	r3, [pc, #348]	; (80076dc <HAL_GPIO_Init+0x2e8>)
 8007580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007582:	4a56      	ldr	r2, [pc, #344]	; (80076dc <HAL_GPIO_Init+0x2e8>)
 8007584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007588:	6453      	str	r3, [r2, #68]	; 0x44
 800758a:	4b54      	ldr	r3, [pc, #336]	; (80076dc <HAL_GPIO_Init+0x2e8>)
 800758c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800758e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007592:	60fb      	str	r3, [r7, #12]
 8007594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007596:	4a52      	ldr	r2, [pc, #328]	; (80076e0 <HAL_GPIO_Init+0x2ec>)
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	089b      	lsrs	r3, r3, #2
 800759c:	3302      	adds	r3, #2
 800759e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	f003 0303 	and.w	r3, r3, #3
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	220f      	movs	r2, #15
 80075ae:	fa02 f303 	lsl.w	r3, r2, r3
 80075b2:	43db      	mvns	r3, r3
 80075b4:	69ba      	ldr	r2, [r7, #24]
 80075b6:	4013      	ands	r3, r2
 80075b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a49      	ldr	r2, [pc, #292]	; (80076e4 <HAL_GPIO_Init+0x2f0>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d019      	beq.n	80075f6 <HAL_GPIO_Init+0x202>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a48      	ldr	r2, [pc, #288]	; (80076e8 <HAL_GPIO_Init+0x2f4>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d013      	beq.n	80075f2 <HAL_GPIO_Init+0x1fe>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a47      	ldr	r2, [pc, #284]	; (80076ec <HAL_GPIO_Init+0x2f8>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d00d      	beq.n	80075ee <HAL_GPIO_Init+0x1fa>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a46      	ldr	r2, [pc, #280]	; (80076f0 <HAL_GPIO_Init+0x2fc>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d007      	beq.n	80075ea <HAL_GPIO_Init+0x1f6>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a45      	ldr	r2, [pc, #276]	; (80076f4 <HAL_GPIO_Init+0x300>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d101      	bne.n	80075e6 <HAL_GPIO_Init+0x1f2>
 80075e2:	2304      	movs	r3, #4
 80075e4:	e008      	b.n	80075f8 <HAL_GPIO_Init+0x204>
 80075e6:	2307      	movs	r3, #7
 80075e8:	e006      	b.n	80075f8 <HAL_GPIO_Init+0x204>
 80075ea:	2303      	movs	r3, #3
 80075ec:	e004      	b.n	80075f8 <HAL_GPIO_Init+0x204>
 80075ee:	2302      	movs	r3, #2
 80075f0:	e002      	b.n	80075f8 <HAL_GPIO_Init+0x204>
 80075f2:	2301      	movs	r3, #1
 80075f4:	e000      	b.n	80075f8 <HAL_GPIO_Init+0x204>
 80075f6:	2300      	movs	r3, #0
 80075f8:	69fa      	ldr	r2, [r7, #28]
 80075fa:	f002 0203 	and.w	r2, r2, #3
 80075fe:	0092      	lsls	r2, r2, #2
 8007600:	4093      	lsls	r3, r2
 8007602:	69ba      	ldr	r2, [r7, #24]
 8007604:	4313      	orrs	r3, r2
 8007606:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007608:	4935      	ldr	r1, [pc, #212]	; (80076e0 <HAL_GPIO_Init+0x2ec>)
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	089b      	lsrs	r3, r3, #2
 800760e:	3302      	adds	r3, #2
 8007610:	69ba      	ldr	r2, [r7, #24]
 8007612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007616:	4b38      	ldr	r3, [pc, #224]	; (80076f8 <HAL_GPIO_Init+0x304>)
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	43db      	mvns	r3, r3
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	4013      	ands	r3, r2
 8007624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d003      	beq.n	800763a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007632:	69ba      	ldr	r2, [r7, #24]
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	4313      	orrs	r3, r2
 8007638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800763a:	4a2f      	ldr	r2, [pc, #188]	; (80076f8 <HAL_GPIO_Init+0x304>)
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007640:	4b2d      	ldr	r3, [pc, #180]	; (80076f8 <HAL_GPIO_Init+0x304>)
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	43db      	mvns	r3, r3
 800764a:	69ba      	ldr	r2, [r7, #24]
 800764c:	4013      	ands	r3, r2
 800764e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d003      	beq.n	8007664 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800765c:	69ba      	ldr	r2, [r7, #24]
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	4313      	orrs	r3, r2
 8007662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007664:	4a24      	ldr	r2, [pc, #144]	; (80076f8 <HAL_GPIO_Init+0x304>)
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800766a:	4b23      	ldr	r3, [pc, #140]	; (80076f8 <HAL_GPIO_Init+0x304>)
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	43db      	mvns	r3, r3
 8007674:	69ba      	ldr	r2, [r7, #24]
 8007676:	4013      	ands	r3, r2
 8007678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007682:	2b00      	cmp	r3, #0
 8007684:	d003      	beq.n	800768e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007686:	69ba      	ldr	r2, [r7, #24]
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	4313      	orrs	r3, r2
 800768c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800768e:	4a1a      	ldr	r2, [pc, #104]	; (80076f8 <HAL_GPIO_Init+0x304>)
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007694:	4b18      	ldr	r3, [pc, #96]	; (80076f8 <HAL_GPIO_Init+0x304>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	43db      	mvns	r3, r3
 800769e:	69ba      	ldr	r2, [r7, #24]
 80076a0:	4013      	ands	r3, r2
 80076a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d003      	beq.n	80076b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80076b0:	69ba      	ldr	r2, [r7, #24]
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80076b8:	4a0f      	ldr	r2, [pc, #60]	; (80076f8 <HAL_GPIO_Init+0x304>)
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	3301      	adds	r3, #1
 80076c2:	61fb      	str	r3, [r7, #28]
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	2b0f      	cmp	r3, #15
 80076c8:	f67f aea2 	bls.w	8007410 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80076cc:	bf00      	nop
 80076ce:	bf00      	nop
 80076d0:	3724      	adds	r7, #36	; 0x24
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	40023800 	.word	0x40023800
 80076e0:	40013800 	.word	0x40013800
 80076e4:	40020000 	.word	0x40020000
 80076e8:	40020400 	.word	0x40020400
 80076ec:	40020800 	.word	0x40020800
 80076f0:	40020c00 	.word	0x40020c00
 80076f4:	40021000 	.word	0x40021000
 80076f8:	40013c00 	.word	0x40013c00

080076fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	460b      	mov	r3, r1
 8007706:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	691a      	ldr	r2, [r3, #16]
 800770c:	887b      	ldrh	r3, [r7, #2]
 800770e:	4013      	ands	r3, r2
 8007710:	2b00      	cmp	r3, #0
 8007712:	d002      	beq.n	800771a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007714:	2301      	movs	r3, #1
 8007716:	73fb      	strb	r3, [r7, #15]
 8007718:	e001      	b.n	800771e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800771a:	2300      	movs	r3, #0
 800771c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800771e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007720:	4618      	mov	r0, r3
 8007722:	3714      	adds	r7, #20
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	460b      	mov	r3, r1
 8007736:	807b      	strh	r3, [r7, #2]
 8007738:	4613      	mov	r3, r2
 800773a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800773c:	787b      	ldrb	r3, [r7, #1]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d003      	beq.n	800774a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007742:	887a      	ldrh	r2, [r7, #2]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007748:	e003      	b.n	8007752 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800774a:	887b      	ldrh	r3, [r7, #2]
 800774c:	041a      	lsls	r2, r3, #16
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	619a      	str	r2, [r3, #24]
}
 8007752:	bf00      	nop
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
	...

08007760 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	4603      	mov	r3, r0
 8007768:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800776a:	4b08      	ldr	r3, [pc, #32]	; (800778c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800776c:	695a      	ldr	r2, [r3, #20]
 800776e:	88fb      	ldrh	r3, [r7, #6]
 8007770:	4013      	ands	r3, r2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d006      	beq.n	8007784 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007776:	4a05      	ldr	r2, [pc, #20]	; (800778c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007778:	88fb      	ldrh	r3, [r7, #6]
 800777a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800777c:	88fb      	ldrh	r3, [r7, #6]
 800777e:	4618      	mov	r0, r3
 8007780:	f7fc feae 	bl	80044e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8007784:	bf00      	nop
 8007786:	3708      	adds	r7, #8
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	40013c00 	.word	0x40013c00

08007790 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d101      	bne.n	80077a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e12b      	b.n	80079fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d106      	bne.n	80077bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f7fb ffd8 	bl	800376c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2224      	movs	r2, #36	; 0x24
 80077c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f022 0201 	bic.w	r2, r2, #1
 80077d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80077f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80077f4:	f002 fbb0 	bl	8009f58 <HAL_RCC_GetPCLK1Freq>
 80077f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	4a81      	ldr	r2, [pc, #516]	; (8007a04 <HAL_I2C_Init+0x274>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d807      	bhi.n	8007814 <HAL_I2C_Init+0x84>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	4a80      	ldr	r2, [pc, #512]	; (8007a08 <HAL_I2C_Init+0x278>)
 8007808:	4293      	cmp	r3, r2
 800780a:	bf94      	ite	ls
 800780c:	2301      	movls	r3, #1
 800780e:	2300      	movhi	r3, #0
 8007810:	b2db      	uxtb	r3, r3
 8007812:	e006      	b.n	8007822 <HAL_I2C_Init+0x92>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	4a7d      	ldr	r2, [pc, #500]	; (8007a0c <HAL_I2C_Init+0x27c>)
 8007818:	4293      	cmp	r3, r2
 800781a:	bf94      	ite	ls
 800781c:	2301      	movls	r3, #1
 800781e:	2300      	movhi	r3, #0
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d001      	beq.n	800782a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e0e7      	b.n	80079fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	4a78      	ldr	r2, [pc, #480]	; (8007a10 <HAL_I2C_Init+0x280>)
 800782e:	fba2 2303 	umull	r2, r3, r2, r3
 8007832:	0c9b      	lsrs	r3, r3, #18
 8007834:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	430a      	orrs	r2, r1
 8007848:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	6a1b      	ldr	r3, [r3, #32]
 8007850:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	4a6a      	ldr	r2, [pc, #424]	; (8007a04 <HAL_I2C_Init+0x274>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d802      	bhi.n	8007864 <HAL_I2C_Init+0xd4>
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	3301      	adds	r3, #1
 8007862:	e009      	b.n	8007878 <HAL_I2C_Init+0xe8>
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800786a:	fb02 f303 	mul.w	r3, r2, r3
 800786e:	4a69      	ldr	r2, [pc, #420]	; (8007a14 <HAL_I2C_Init+0x284>)
 8007870:	fba2 2303 	umull	r2, r3, r2, r3
 8007874:	099b      	lsrs	r3, r3, #6
 8007876:	3301      	adds	r3, #1
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	6812      	ldr	r2, [r2, #0]
 800787c:	430b      	orrs	r3, r1
 800787e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	69db      	ldr	r3, [r3, #28]
 8007886:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800788a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	495c      	ldr	r1, [pc, #368]	; (8007a04 <HAL_I2C_Init+0x274>)
 8007894:	428b      	cmp	r3, r1
 8007896:	d819      	bhi.n	80078cc <HAL_I2C_Init+0x13c>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	1e59      	subs	r1, r3, #1
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	005b      	lsls	r3, r3, #1
 80078a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80078a6:	1c59      	adds	r1, r3, #1
 80078a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80078ac:	400b      	ands	r3, r1
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00a      	beq.n	80078c8 <HAL_I2C_Init+0x138>
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	1e59      	subs	r1, r3, #1
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	005b      	lsls	r3, r3, #1
 80078bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80078c0:	3301      	adds	r3, #1
 80078c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078c6:	e051      	b.n	800796c <HAL_I2C_Init+0x1dc>
 80078c8:	2304      	movs	r3, #4
 80078ca:	e04f      	b.n	800796c <HAL_I2C_Init+0x1dc>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d111      	bne.n	80078f8 <HAL_I2C_Init+0x168>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	1e58      	subs	r0, r3, #1
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6859      	ldr	r1, [r3, #4]
 80078dc:	460b      	mov	r3, r1
 80078de:	005b      	lsls	r3, r3, #1
 80078e0:	440b      	add	r3, r1
 80078e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80078e6:	3301      	adds	r3, #1
 80078e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	bf0c      	ite	eq
 80078f0:	2301      	moveq	r3, #1
 80078f2:	2300      	movne	r3, #0
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	e012      	b.n	800791e <HAL_I2C_Init+0x18e>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	1e58      	subs	r0, r3, #1
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6859      	ldr	r1, [r3, #4]
 8007900:	460b      	mov	r3, r1
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	440b      	add	r3, r1
 8007906:	0099      	lsls	r1, r3, #2
 8007908:	440b      	add	r3, r1
 800790a:	fbb0 f3f3 	udiv	r3, r0, r3
 800790e:	3301      	adds	r3, #1
 8007910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007914:	2b00      	cmp	r3, #0
 8007916:	bf0c      	ite	eq
 8007918:	2301      	moveq	r3, #1
 800791a:	2300      	movne	r3, #0
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b00      	cmp	r3, #0
 8007920:	d001      	beq.n	8007926 <HAL_I2C_Init+0x196>
 8007922:	2301      	movs	r3, #1
 8007924:	e022      	b.n	800796c <HAL_I2C_Init+0x1dc>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d10e      	bne.n	800794c <HAL_I2C_Init+0x1bc>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	1e58      	subs	r0, r3, #1
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6859      	ldr	r1, [r3, #4]
 8007936:	460b      	mov	r3, r1
 8007938:	005b      	lsls	r3, r3, #1
 800793a:	440b      	add	r3, r1
 800793c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007940:	3301      	adds	r3, #1
 8007942:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800794a:	e00f      	b.n	800796c <HAL_I2C_Init+0x1dc>
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	1e58      	subs	r0, r3, #1
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6859      	ldr	r1, [r3, #4]
 8007954:	460b      	mov	r3, r1
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	440b      	add	r3, r1
 800795a:	0099      	lsls	r1, r3, #2
 800795c:	440b      	add	r3, r1
 800795e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007962:	3301      	adds	r3, #1
 8007964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007968:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800796c:	6879      	ldr	r1, [r7, #4]
 800796e:	6809      	ldr	r1, [r1, #0]
 8007970:	4313      	orrs	r3, r2
 8007972:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	69da      	ldr	r2, [r3, #28]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a1b      	ldr	r3, [r3, #32]
 8007986:	431a      	orrs	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	430a      	orrs	r2, r1
 800798e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800799a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	6911      	ldr	r1, [r2, #16]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	68d2      	ldr	r2, [r2, #12]
 80079a6:	4311      	orrs	r1, r2
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	6812      	ldr	r2, [r2, #0]
 80079ac:	430b      	orrs	r3, r1
 80079ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	695a      	ldr	r2, [r3, #20]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	431a      	orrs	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	430a      	orrs	r2, r1
 80079ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f042 0201 	orr.w	r2, r2, #1
 80079da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2220      	movs	r2, #32
 80079e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	000186a0 	.word	0x000186a0
 8007a08:	001e847f 	.word	0x001e847f
 8007a0c:	003d08ff 	.word	0x003d08ff
 8007a10:	431bde83 	.word	0x431bde83
 8007a14:	10624dd3 	.word	0x10624dd3

08007a18 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	607a      	str	r2, [r7, #4]
 8007a22:	461a      	mov	r2, r3
 8007a24:	460b      	mov	r3, r1
 8007a26:	817b      	strh	r3, [r7, #10]
 8007a28:	4613      	mov	r3, r2
 8007a2a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	2b20      	cmp	r3, #32
 8007a3a:	f040 8085 	bne.w	8007b48 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8007a3e:	4b46      	ldr	r3, [pc, #280]	; (8007b58 <HAL_I2C_Master_Transmit_IT+0x140>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	08db      	lsrs	r3, r3, #3
 8007a44:	4a45      	ldr	r2, [pc, #276]	; (8007b5c <HAL_I2C_Master_Transmit_IT+0x144>)
 8007a46:	fba2 2303 	umull	r2, r3, r2, r3
 8007a4a:	0a1a      	lsrs	r2, r3, #8
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	4413      	add	r3, r2
 8007a52:	009a      	lsls	r2, r3, #2
 8007a54:	4413      	add	r3, r2
 8007a56:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d116      	bne.n	8007a92 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2220      	movs	r2, #32
 8007a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7e:	f043 0220 	orr.w	r2, r3, #32
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e05b      	b.n	8007b4a <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	699b      	ldr	r3, [r3, #24]
 8007a98:	f003 0302 	and.w	r3, r3, #2
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d0db      	beq.n	8007a58 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d101      	bne.n	8007aae <HAL_I2C_Master_Transmit_IT+0x96>
 8007aaa:	2302      	movs	r3, #2
 8007aac:	e04d      	b.n	8007b4a <HAL_I2C_Master_Transmit_IT+0x132>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d007      	beq.n	8007ad4 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f042 0201 	orr.w	r2, r2, #1
 8007ad2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ae2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2221      	movs	r2, #33	; 0x21
 8007ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2210      	movs	r2, #16
 8007af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	893a      	ldrh	r2, [r7, #8]
 8007b04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b0a:	b29a      	uxth	r2, r3
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	4a13      	ldr	r2, [pc, #76]	; (8007b60 <HAL_I2C_Master_Transmit_IT+0x148>)
 8007b14:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8007b16:	897a      	ldrh	r2, [r7, #10]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	685a      	ldr	r2, [r3, #4]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8007b32:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b42:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007b44:	2300      	movs	r3, #0
 8007b46:	e000      	b.n	8007b4a <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8007b48:	2302      	movs	r3, #2
  }
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	371c      	adds	r7, #28
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	20000234 	.word	0x20000234
 8007b5c:	14f8b589 	.word	0x14f8b589
 8007b60:	ffff0000 	.word	0xffff0000

08007b64 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b087      	sub	sp, #28
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	607a      	str	r2, [r7, #4]
 8007b6e:	461a      	mov	r2, r3
 8007b70:	460b      	mov	r3, r1
 8007b72:	817b      	strh	r3, [r7, #10]
 8007b74:	4613      	mov	r3, r2
 8007b76:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	2b20      	cmp	r3, #32
 8007b86:	f040 808d 	bne.w	8007ca4 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8007b8a:	4b4a      	ldr	r3, [pc, #296]	; (8007cb4 <HAL_I2C_Master_Receive_IT+0x150>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	08db      	lsrs	r3, r3, #3
 8007b90:	4a49      	ldr	r2, [pc, #292]	; (8007cb8 <HAL_I2C_Master_Receive_IT+0x154>)
 8007b92:	fba2 2303 	umull	r2, r3, r2, r3
 8007b96:	0a1a      	lsrs	r2, r3, #8
 8007b98:	4613      	mov	r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4413      	add	r3, r2
 8007b9e:	009a      	lsls	r2, r3, #2
 8007ba0:	4413      	add	r3, r2
 8007ba2:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d116      	bne.n	8007bde <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2220      	movs	r2, #32
 8007bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bca:	f043 0220 	orr.w	r2, r3, #32
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e063      	b.n	8007ca6 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	f003 0302 	and.w	r3, r3, #2
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d0db      	beq.n	8007ba4 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d101      	bne.n	8007bfa <HAL_I2C_Master_Receive_IT+0x96>
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	e055      	b.n	8007ca6 <HAL_I2C_Master_Receive_IT+0x142>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 0301 	and.w	r3, r3, #1
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d007      	beq.n	8007c20 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f042 0201 	orr.w	r2, r2, #1
 8007c1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2222      	movs	r2, #34	; 0x22
 8007c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2210      	movs	r2, #16
 8007c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2200      	movs	r2, #0
 8007c44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	893a      	ldrh	r2, [r7, #8]
 8007c50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c56:	b29a      	uxth	r2, r3
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	4a17      	ldr	r2, [pc, #92]	; (8007cbc <HAL_I2C_Master_Receive_IT+0x158>)
 8007c60:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8007c62:	897a      	ldrh	r2, [r7, #10]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8007c7e:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c8e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c9e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	e000      	b.n	8007ca6 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8007ca4:	2302      	movs	r3, #2
  }
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	371c      	adds	r7, #28
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	20000234 	.word	0x20000234
 8007cb8:	14f8b589 	.word	0x14f8b589
 8007cbc:	ffff0000 	.word	0xffff0000

08007cc0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b088      	sub	sp, #32
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ce0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ce8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
 8007cec:	2b10      	cmp	r3, #16
 8007cee:	d003      	beq.n	8007cf8 <HAL_I2C_EV_IRQHandler+0x38>
 8007cf0:	7bfb      	ldrb	r3, [r7, #15]
 8007cf2:	2b40      	cmp	r3, #64	; 0x40
 8007cf4:	f040 80c1 	bne.w	8007e7a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	695b      	ldr	r3, [r3, #20]
 8007d06:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	f003 0301 	and.w	r3, r3, #1
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10d      	bne.n	8007d2e <HAL_I2C_EV_IRQHandler+0x6e>
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007d18:	d003      	beq.n	8007d22 <HAL_I2C_EV_IRQHandler+0x62>
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007d20:	d101      	bne.n	8007d26 <HAL_I2C_EV_IRQHandler+0x66>
 8007d22:	2301      	movs	r3, #1
 8007d24:	e000      	b.n	8007d28 <HAL_I2C_EV_IRQHandler+0x68>
 8007d26:	2300      	movs	r3, #0
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	f000 8132 	beq.w	8007f92 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	f003 0301 	and.w	r3, r3, #1
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00c      	beq.n	8007d52 <HAL_I2C_EV_IRQHandler+0x92>
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	0a5b      	lsrs	r3, r3, #9
 8007d3c:	f003 0301 	and.w	r3, r3, #1
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d006      	beq.n	8007d52 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f001 fc7b 	bl	8009640 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 fd83 	bl	8008856 <I2C_Master_SB>
 8007d50:	e092      	b.n	8007e78 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	08db      	lsrs	r3, r3, #3
 8007d56:	f003 0301 	and.w	r3, r3, #1
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d009      	beq.n	8007d72 <HAL_I2C_EV_IRQHandler+0xb2>
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	0a5b      	lsrs	r3, r3, #9
 8007d62:	f003 0301 	and.w	r3, r3, #1
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d003      	beq.n	8007d72 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fdf9 	bl	8008962 <I2C_Master_ADD10>
 8007d70:	e082      	b.n	8007e78 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	085b      	lsrs	r3, r3, #1
 8007d76:	f003 0301 	and.w	r3, r3, #1
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d009      	beq.n	8007d92 <HAL_I2C_EV_IRQHandler+0xd2>
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	0a5b      	lsrs	r3, r3, #9
 8007d82:	f003 0301 	and.w	r3, r3, #1
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d003      	beq.n	8007d92 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fe13 	bl	80089b6 <I2C_Master_ADDR>
 8007d90:	e072      	b.n	8007e78 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	089b      	lsrs	r3, r3, #2
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d03b      	beq.n	8007e16 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007da8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dac:	f000 80f3 	beq.w	8007f96 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	09db      	lsrs	r3, r3, #7
 8007db4:	f003 0301 	and.w	r3, r3, #1
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00f      	beq.n	8007ddc <HAL_I2C_EV_IRQHandler+0x11c>
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	0a9b      	lsrs	r3, r3, #10
 8007dc0:	f003 0301 	and.w	r3, r3, #1
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d009      	beq.n	8007ddc <HAL_I2C_EV_IRQHandler+0x11c>
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	089b      	lsrs	r3, r3, #2
 8007dcc:	f003 0301 	and.w	r3, r3, #1
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d103      	bne.n	8007ddc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 f9f3 	bl	80081c0 <I2C_MasterTransmit_TXE>
 8007dda:	e04d      	b.n	8007e78 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	089b      	lsrs	r3, r3, #2
 8007de0:	f003 0301 	and.w	r3, r3, #1
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 80d6 	beq.w	8007f96 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	0a5b      	lsrs	r3, r3, #9
 8007dee:	f003 0301 	and.w	r3, r3, #1
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f000 80cf 	beq.w	8007f96 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007df8:	7bbb      	ldrb	r3, [r7, #14]
 8007dfa:	2b21      	cmp	r3, #33	; 0x21
 8007dfc:	d103      	bne.n	8007e06 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fa7a 	bl	80082f8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007e04:	e0c7      	b.n	8007f96 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
 8007e08:	2b40      	cmp	r3, #64	; 0x40
 8007e0a:	f040 80c4 	bne.w	8007f96 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fae8 	bl	80083e4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007e14:	e0bf      	b.n	8007f96 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e24:	f000 80b7 	beq.w	8007f96 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	099b      	lsrs	r3, r3, #6
 8007e2c:	f003 0301 	and.w	r3, r3, #1
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00f      	beq.n	8007e54 <HAL_I2C_EV_IRQHandler+0x194>
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	0a9b      	lsrs	r3, r3, #10
 8007e38:	f003 0301 	and.w	r3, r3, #1
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d009      	beq.n	8007e54 <HAL_I2C_EV_IRQHandler+0x194>
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	089b      	lsrs	r3, r3, #2
 8007e44:	f003 0301 	and.w	r3, r3, #1
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d103      	bne.n	8007e54 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 fb5d 	bl	800850c <I2C_MasterReceive_RXNE>
 8007e52:	e011      	b.n	8007e78 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	089b      	lsrs	r3, r3, #2
 8007e58:	f003 0301 	and.w	r3, r3, #1
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	f000 809a 	beq.w	8007f96 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	0a5b      	lsrs	r3, r3, #9
 8007e66:	f003 0301 	and.w	r3, r3, #1
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	f000 8093 	beq.w	8007f96 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fc06 	bl	8008682 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007e76:	e08e      	b.n	8007f96 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007e78:	e08d      	b.n	8007f96 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d004      	beq.n	8007e8c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	695b      	ldr	r3, [r3, #20]
 8007e88:	61fb      	str	r3, [r7, #28]
 8007e8a:	e007      	b.n	8007e9c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	695b      	ldr	r3, [r3, #20]
 8007e9a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	085b      	lsrs	r3, r3, #1
 8007ea0:	f003 0301 	and.w	r3, r3, #1
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d012      	beq.n	8007ece <HAL_I2C_EV_IRQHandler+0x20e>
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	0a5b      	lsrs	r3, r3, #9
 8007eac:	f003 0301 	and.w	r3, r3, #1
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00c      	beq.n	8007ece <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d003      	beq.n	8007ec4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	699b      	ldr	r3, [r3, #24]
 8007ec2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007ec4:	69b9      	ldr	r1, [r7, #24]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 ffc4 	bl	8008e54 <I2C_Slave_ADDR>
 8007ecc:	e066      	b.n	8007f9c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	091b      	lsrs	r3, r3, #4
 8007ed2:	f003 0301 	and.w	r3, r3, #1
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d009      	beq.n	8007eee <HAL_I2C_EV_IRQHandler+0x22e>
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	0a5b      	lsrs	r3, r3, #9
 8007ede:	f003 0301 	and.w	r3, r3, #1
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d003      	beq.n	8007eee <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fffe 	bl	8008ee8 <I2C_Slave_STOPF>
 8007eec:	e056      	b.n	8007f9c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007eee:	7bbb      	ldrb	r3, [r7, #14]
 8007ef0:	2b21      	cmp	r3, #33	; 0x21
 8007ef2:	d002      	beq.n	8007efa <HAL_I2C_EV_IRQHandler+0x23a>
 8007ef4:	7bbb      	ldrb	r3, [r7, #14]
 8007ef6:	2b29      	cmp	r3, #41	; 0x29
 8007ef8:	d125      	bne.n	8007f46 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	09db      	lsrs	r3, r3, #7
 8007efe:	f003 0301 	and.w	r3, r3, #1
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00f      	beq.n	8007f26 <HAL_I2C_EV_IRQHandler+0x266>
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	0a9b      	lsrs	r3, r3, #10
 8007f0a:	f003 0301 	and.w	r3, r3, #1
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d009      	beq.n	8007f26 <HAL_I2C_EV_IRQHandler+0x266>
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	089b      	lsrs	r3, r3, #2
 8007f16:	f003 0301 	and.w	r3, r3, #1
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d103      	bne.n	8007f26 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 feda 	bl	8008cd8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007f24:	e039      	b.n	8007f9a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	089b      	lsrs	r3, r3, #2
 8007f2a:	f003 0301 	and.w	r3, r3, #1
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d033      	beq.n	8007f9a <HAL_I2C_EV_IRQHandler+0x2da>
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	0a5b      	lsrs	r3, r3, #9
 8007f36:	f003 0301 	and.w	r3, r3, #1
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d02d      	beq.n	8007f9a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 ff07 	bl	8008d52 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007f44:	e029      	b.n	8007f9a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	099b      	lsrs	r3, r3, #6
 8007f4a:	f003 0301 	and.w	r3, r3, #1
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00f      	beq.n	8007f72 <HAL_I2C_EV_IRQHandler+0x2b2>
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	0a9b      	lsrs	r3, r3, #10
 8007f56:	f003 0301 	and.w	r3, r3, #1
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d009      	beq.n	8007f72 <HAL_I2C_EV_IRQHandler+0x2b2>
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	089b      	lsrs	r3, r3, #2
 8007f62:	f003 0301 	and.w	r3, r3, #1
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d103      	bne.n	8007f72 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 ff12 	bl	8008d94 <I2C_SlaveReceive_RXNE>
 8007f70:	e014      	b.n	8007f9c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	089b      	lsrs	r3, r3, #2
 8007f76:	f003 0301 	and.w	r3, r3, #1
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00e      	beq.n	8007f9c <HAL_I2C_EV_IRQHandler+0x2dc>
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	0a5b      	lsrs	r3, r3, #9
 8007f82:	f003 0301 	and.w	r3, r3, #1
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d008      	beq.n	8007f9c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 ff40 	bl	8008e10 <I2C_SlaveReceive_BTF>
 8007f90:	e004      	b.n	8007f9c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8007f92:	bf00      	nop
 8007f94:	e002      	b.n	8007f9c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007f96:	bf00      	nop
 8007f98:	e000      	b.n	8007f9c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007f9a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007f9c:	3720      	adds	r7, #32
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b08a      	sub	sp, #40	; 0x28
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	695b      	ldr	r3, [r3, #20]
 8007fb0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fc4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007fc6:	6a3b      	ldr	r3, [r7, #32]
 8007fc8:	0a1b      	lsrs	r3, r3, #8
 8007fca:	f003 0301 	and.w	r3, r3, #1
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00e      	beq.n	8007ff0 <HAL_I2C_ER_IRQHandler+0x4e>
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	0a1b      	lsrs	r3, r3, #8
 8007fd6:	f003 0301 	and.w	r3, r3, #1
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d008      	beq.n	8007ff0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe0:	f043 0301 	orr.w	r3, r3, #1
 8007fe4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007fee:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007ff0:	6a3b      	ldr	r3, [r7, #32]
 8007ff2:	0a5b      	lsrs	r3, r3, #9
 8007ff4:	f003 0301 	and.w	r3, r3, #1
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00e      	beq.n	800801a <HAL_I2C_ER_IRQHandler+0x78>
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	0a1b      	lsrs	r3, r3, #8
 8008000:	f003 0301 	and.w	r3, r3, #1
 8008004:	2b00      	cmp	r3, #0
 8008006:	d008      	beq.n	800801a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8008008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800a:	f043 0302 	orr.w	r3, r3, #2
 800800e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8008018:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800801a:	6a3b      	ldr	r3, [r7, #32]
 800801c:	0a9b      	lsrs	r3, r3, #10
 800801e:	f003 0301 	and.w	r3, r3, #1
 8008022:	2b00      	cmp	r3, #0
 8008024:	d03f      	beq.n	80080a6 <HAL_I2C_ER_IRQHandler+0x104>
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	0a1b      	lsrs	r3, r3, #8
 800802a:	f003 0301 	and.w	r3, r3, #1
 800802e:	2b00      	cmp	r3, #0
 8008030:	d039      	beq.n	80080a6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8008032:	7efb      	ldrb	r3, [r7, #27]
 8008034:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800803a:	b29b      	uxth	r3, r3
 800803c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008044:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800804c:	7ebb      	ldrb	r3, [r7, #26]
 800804e:	2b20      	cmp	r3, #32
 8008050:	d112      	bne.n	8008078 <HAL_I2C_ER_IRQHandler+0xd6>
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10f      	bne.n	8008078 <HAL_I2C_ER_IRQHandler+0xd6>
 8008058:	7cfb      	ldrb	r3, [r7, #19]
 800805a:	2b21      	cmp	r3, #33	; 0x21
 800805c:	d008      	beq.n	8008070 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800805e:	7cfb      	ldrb	r3, [r7, #19]
 8008060:	2b29      	cmp	r3, #41	; 0x29
 8008062:	d005      	beq.n	8008070 <HAL_I2C_ER_IRQHandler+0xce>
 8008064:	7cfb      	ldrb	r3, [r7, #19]
 8008066:	2b28      	cmp	r3, #40	; 0x28
 8008068:	d106      	bne.n	8008078 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2b21      	cmp	r3, #33	; 0x21
 800806e:	d103      	bne.n	8008078 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f001 f869 	bl	8009148 <I2C_Slave_AF>
 8008076:	e016      	b.n	80080a6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008080:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8008082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008084:	f043 0304 	orr.w	r3, r3, #4
 8008088:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800808a:	7efb      	ldrb	r3, [r7, #27]
 800808c:	2b10      	cmp	r3, #16
 800808e:	d002      	beq.n	8008096 <HAL_I2C_ER_IRQHandler+0xf4>
 8008090:	7efb      	ldrb	r3, [r7, #27]
 8008092:	2b40      	cmp	r3, #64	; 0x40
 8008094:	d107      	bne.n	80080a6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080a4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80080a6:	6a3b      	ldr	r3, [r7, #32]
 80080a8:	0adb      	lsrs	r3, r3, #11
 80080aa:	f003 0301 	and.w	r3, r3, #1
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00e      	beq.n	80080d0 <HAL_I2C_ER_IRQHandler+0x12e>
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	0a1b      	lsrs	r3, r3, #8
 80080b6:	f003 0301 	and.w	r3, r3, #1
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d008      	beq.n	80080d0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80080be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c0:	f043 0308 	orr.w	r3, r3, #8
 80080c4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80080ce:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80080d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d008      	beq.n	80080e8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080dc:	431a      	orrs	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f001 f8a0 	bl	8009228 <I2C_ITError>
  }
}
 80080e8:	bf00      	nop
 80080ea:	3728      	adds	r7, #40	; 0x28
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800810c:	bf00      	nop
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	460b      	mov	r3, r1
 800814a:	70fb      	strb	r3, [r7, #3]
 800814c:	4613      	mov	r3, r2
 800814e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008150:	bf00      	nop
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8008164:	bf00      	nop
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008178:	bf00      	nop
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800818c:	bf00      	nop
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80081a0:	bf00      	nop
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80081b4:	bf00      	nop
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081ce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081d6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081dc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d150      	bne.n	8008288 <I2C_MasterTransmit_TXE+0xc8>
 80081e6:	7bfb      	ldrb	r3, [r7, #15]
 80081e8:	2b21      	cmp	r3, #33	; 0x21
 80081ea:	d14d      	bne.n	8008288 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	2b08      	cmp	r3, #8
 80081f0:	d01d      	beq.n	800822e <I2C_MasterTransmit_TXE+0x6e>
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	2b20      	cmp	r3, #32
 80081f6:	d01a      	beq.n	800822e <I2C_MasterTransmit_TXE+0x6e>
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80081fe:	d016      	beq.n	800822e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	685a      	ldr	r2, [r3, #4]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800820e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2211      	movs	r2, #17
 8008214:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2220      	movs	r2, #32
 8008222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f7ff ff62 	bl	80080f0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800822c:	e060      	b.n	80082f0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	685a      	ldr	r2, [r3, #4]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800823c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800824c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2220      	movs	r2, #32
 8008258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008262:	b2db      	uxtb	r3, r3
 8008264:	2b40      	cmp	r3, #64	; 0x40
 8008266:	d107      	bne.n	8008278 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f7ff ff7d 	bl	8008170 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008276:	e03b      	b.n	80082f0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f7ff ff35 	bl	80080f0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008286:	e033      	b.n	80082f0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8008288:	7bfb      	ldrb	r3, [r7, #15]
 800828a:	2b21      	cmp	r3, #33	; 0x21
 800828c:	d005      	beq.n	800829a <I2C_MasterTransmit_TXE+0xda>
 800828e:	7bbb      	ldrb	r3, [r7, #14]
 8008290:	2b40      	cmp	r3, #64	; 0x40
 8008292:	d12d      	bne.n	80082f0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8008294:	7bfb      	ldrb	r3, [r7, #15]
 8008296:	2b22      	cmp	r3, #34	; 0x22
 8008298:	d12a      	bne.n	80082f0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800829e:	b29b      	uxth	r3, r3
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d108      	bne.n	80082b6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	685a      	ldr	r2, [r3, #4]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082b2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80082b4:	e01c      	b.n	80082f0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	2b40      	cmp	r3, #64	; 0x40
 80082c0:	d103      	bne.n	80082ca <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 f88e 	bl	80083e4 <I2C_MemoryTransmit_TXE_BTF>
}
 80082c8:	e012      	b.n	80082f0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ce:	781a      	ldrb	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082da:	1c5a      	adds	r2, r3, #1
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	3b01      	subs	r3, #1
 80082e8:	b29a      	uxth	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80082ee:	e7ff      	b.n	80082f0 <I2C_MasterTransmit_TXE+0x130>
 80082f0:	bf00      	nop
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008304:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800830c:	b2db      	uxtb	r3, r3
 800830e:	2b21      	cmp	r3, #33	; 0x21
 8008310:	d164      	bne.n	80083dc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008316:	b29b      	uxth	r3, r3
 8008318:	2b00      	cmp	r3, #0
 800831a:	d012      	beq.n	8008342 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008320:	781a      	ldrb	r2, [r3, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832c:	1c5a      	adds	r2, r3, #1
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008336:	b29b      	uxth	r3, r3
 8008338:	3b01      	subs	r3, #1
 800833a:	b29a      	uxth	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8008340:	e04c      	b.n	80083dc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2b08      	cmp	r3, #8
 8008346:	d01d      	beq.n	8008384 <I2C_MasterTransmit_BTF+0x8c>
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2b20      	cmp	r3, #32
 800834c:	d01a      	beq.n	8008384 <I2C_MasterTransmit_BTF+0x8c>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008354:	d016      	beq.n	8008384 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	685a      	ldr	r2, [r3, #4]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008364:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2211      	movs	r2, #17
 800836a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2220      	movs	r2, #32
 8008378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f7ff feb7 	bl	80080f0 <HAL_I2C_MasterTxCpltCallback>
}
 8008382:	e02b      	b.n	80083dc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	685a      	ldr	r2, [r3, #4]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008392:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083a2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2220      	movs	r2, #32
 80083ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	2b40      	cmp	r3, #64	; 0x40
 80083bc:	d107      	bne.n	80083ce <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f7ff fed2 	bl	8008170 <HAL_I2C_MemTxCpltCallback>
}
 80083cc:	e006      	b.n	80083dc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f7ff fe8a 	bl	80080f0 <HAL_I2C_MasterTxCpltCallback>
}
 80083dc:	bf00      	nop
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083f2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d11d      	bne.n	8008438 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008400:	2b01      	cmp	r3, #1
 8008402:	d10b      	bne.n	800841c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008408:	b2da      	uxtb	r2, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008414:	1c9a      	adds	r2, r3, #2
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800841a:	e073      	b.n	8008504 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008420:	b29b      	uxth	r3, r3
 8008422:	121b      	asrs	r3, r3, #8
 8008424:	b2da      	uxtb	r2, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008430:	1c5a      	adds	r2, r3, #1
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008436:	e065      	b.n	8008504 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800843c:	2b01      	cmp	r3, #1
 800843e:	d10b      	bne.n	8008458 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008444:	b2da      	uxtb	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008450:	1c5a      	adds	r2, r3, #1
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008456:	e055      	b.n	8008504 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800845c:	2b02      	cmp	r3, #2
 800845e:	d151      	bne.n	8008504 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8008460:	7bfb      	ldrb	r3, [r7, #15]
 8008462:	2b22      	cmp	r3, #34	; 0x22
 8008464:	d10d      	bne.n	8008482 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008474:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800847a:	1c5a      	adds	r2, r3, #1
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008480:	e040      	b.n	8008504 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008486:	b29b      	uxth	r3, r3
 8008488:	2b00      	cmp	r3, #0
 800848a:	d015      	beq.n	80084b8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800848c:	7bfb      	ldrb	r3, [r7, #15]
 800848e:	2b21      	cmp	r3, #33	; 0x21
 8008490:	d112      	bne.n	80084b8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008496:	781a      	ldrb	r2, [r3, #0]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a2:	1c5a      	adds	r2, r3, #1
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	3b01      	subs	r3, #1
 80084b0:	b29a      	uxth	r2, r3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80084b6:	e025      	b.n	8008504 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084bc:	b29b      	uxth	r3, r3
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d120      	bne.n	8008504 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80084c2:	7bfb      	ldrb	r3, [r7, #15]
 80084c4:	2b21      	cmp	r3, #33	; 0x21
 80084c6:	d11d      	bne.n	8008504 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	685a      	ldr	r2, [r3, #4]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80084d6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084e6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2220      	movs	r2, #32
 80084f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f7ff fe36 	bl	8008170 <HAL_I2C_MemTxCpltCallback>
}
 8008504:	bf00      	nop
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b22      	cmp	r3, #34	; 0x22
 800851e:	f040 80ac 	bne.w	800867a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008526:	b29b      	uxth	r3, r3
 8008528:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2b03      	cmp	r3, #3
 800852e:	d921      	bls.n	8008574 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	691a      	ldr	r2, [r3, #16]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853a:	b2d2      	uxtb	r2, r2
 800853c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008542:	1c5a      	adds	r2, r3, #1
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800854c:	b29b      	uxth	r3, r3
 800854e:	3b01      	subs	r3, #1
 8008550:	b29a      	uxth	r2, r3
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800855a:	b29b      	uxth	r3, r3
 800855c:	2b03      	cmp	r3, #3
 800855e:	f040 808c 	bne.w	800867a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	685a      	ldr	r2, [r3, #4]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008570:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8008572:	e082      	b.n	800867a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008578:	2b02      	cmp	r3, #2
 800857a:	d075      	beq.n	8008668 <I2C_MasterReceive_RXNE+0x15c>
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2b01      	cmp	r3, #1
 8008580:	d002      	beq.n	8008588 <I2C_MasterReceive_RXNE+0x7c>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d16f      	bne.n	8008668 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f001 f827 	bl	80095dc <I2C_WaitOnSTOPRequestThroughIT>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d142      	bne.n	800861a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085a2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	685a      	ldr	r2, [r3, #4]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80085b2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	691a      	ldr	r2, [r3, #16]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085be:	b2d2      	uxtb	r2, r2
 80085c0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c6:	1c5a      	adds	r2, r3, #1
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	3b01      	subs	r3, #1
 80085d4:	b29a      	uxth	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2220      	movs	r2, #32
 80085de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	2b40      	cmp	r3, #64	; 0x40
 80085ec:	d10a      	bne.n	8008604 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f7ff fdc1 	bl	8008184 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008602:	e03a      	b.n	800867a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2212      	movs	r2, #18
 8008610:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f7ff fd76 	bl	8008104 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008618:	e02f      	b.n	800867a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	685a      	ldr	r2, [r3, #4]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008628:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	691a      	ldr	r2, [r3, #16]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008634:	b2d2      	uxtb	r2, r2
 8008636:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863c:	1c5a      	adds	r2, r3, #1
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008646:	b29b      	uxth	r3, r3
 8008648:	3b01      	subs	r3, #1
 800864a:	b29a      	uxth	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2220      	movs	r2, #32
 8008654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f7ff fd99 	bl	8008198 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008666:	e008      	b.n	800867a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	685a      	ldr	r2, [r3, #4]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008676:	605a      	str	r2, [r3, #4]
}
 8008678:	e7ff      	b.n	800867a <I2C_MasterReceive_RXNE+0x16e>
 800867a:	bf00      	nop
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008682:	b580      	push	{r7, lr}
 8008684:	b084      	sub	sp, #16
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008694:	b29b      	uxth	r3, r3
 8008696:	2b04      	cmp	r3, #4
 8008698:	d11b      	bne.n	80086d2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	685a      	ldr	r2, [r3, #4]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086a8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	691a      	ldr	r2, [r3, #16]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b4:	b2d2      	uxtb	r2, r2
 80086b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086bc:	1c5a      	adds	r2, r3, #1
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	3b01      	subs	r3, #1
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80086d0:	e0bd      	b.n	800884e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	2b03      	cmp	r3, #3
 80086da:	d129      	bne.n	8008730 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	685a      	ldr	r2, [r3, #4]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086ea:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2b04      	cmp	r3, #4
 80086f0:	d00a      	beq.n	8008708 <I2C_MasterReceive_BTF+0x86>
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d007      	beq.n	8008708 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008706:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	691a      	ldr	r2, [r3, #16]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008712:	b2d2      	uxtb	r2, r2
 8008714:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871a:	1c5a      	adds	r2, r3, #1
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008724:	b29b      	uxth	r3, r3
 8008726:	3b01      	subs	r3, #1
 8008728:	b29a      	uxth	r2, r3
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800872e:	e08e      	b.n	800884e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008734:	b29b      	uxth	r3, r3
 8008736:	2b02      	cmp	r3, #2
 8008738:	d176      	bne.n	8008828 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d002      	beq.n	8008746 <I2C_MasterReceive_BTF+0xc4>
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2b10      	cmp	r3, #16
 8008744:	d108      	bne.n	8008758 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008754:	601a      	str	r2, [r3, #0]
 8008756:	e019      	b.n	800878c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2b04      	cmp	r3, #4
 800875c:	d002      	beq.n	8008764 <I2C_MasterReceive_BTF+0xe2>
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2b02      	cmp	r3, #2
 8008762:	d108      	bne.n	8008776 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008772:	601a      	str	r2, [r3, #0]
 8008774:	e00a      	b.n	800878c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2b10      	cmp	r3, #16
 800877a:	d007      	beq.n	800878c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800878a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	691a      	ldr	r2, [r3, #16]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008796:	b2d2      	uxtb	r2, r2
 8008798:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879e:	1c5a      	adds	r2, r3, #1
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	3b01      	subs	r3, #1
 80087ac:	b29a      	uxth	r2, r3
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	691a      	ldr	r2, [r3, #16]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087bc:	b2d2      	uxtb	r2, r2
 80087be:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c4:	1c5a      	adds	r2, r3, #1
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	3b01      	subs	r3, #1
 80087d2:	b29a      	uxth	r2, r3
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	685a      	ldr	r2, [r3, #4]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80087e6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2220      	movs	r2, #32
 80087ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	2b40      	cmp	r3, #64	; 0x40
 80087fa:	d10a      	bne.n	8008812 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f7ff fcba 	bl	8008184 <HAL_I2C_MemRxCpltCallback>
}
 8008810:	e01d      	b.n	800884e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2212      	movs	r2, #18
 800881e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f7ff fc6f 	bl	8008104 <HAL_I2C_MasterRxCpltCallback>
}
 8008826:	e012      	b.n	800884e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	691a      	ldr	r2, [r3, #16]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008832:	b2d2      	uxtb	r2, r2
 8008834:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883a:	1c5a      	adds	r2, r3, #1
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008844:	b29b      	uxth	r3, r3
 8008846:	3b01      	subs	r3, #1
 8008848:	b29a      	uxth	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800884e:	bf00      	nop
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8008856:	b480      	push	{r7}
 8008858:	b083      	sub	sp, #12
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008864:	b2db      	uxtb	r3, r3
 8008866:	2b40      	cmp	r3, #64	; 0x40
 8008868:	d117      	bne.n	800889a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800886e:	2b00      	cmp	r3, #0
 8008870:	d109      	bne.n	8008886 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008876:	b2db      	uxtb	r3, r3
 8008878:	461a      	mov	r2, r3
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008882:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8008884:	e067      	b.n	8008956 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800888a:	b2db      	uxtb	r3, r3
 800888c:	f043 0301 	orr.w	r3, r3, #1
 8008890:	b2da      	uxtb	r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	611a      	str	r2, [r3, #16]
}
 8008898:	e05d      	b.n	8008956 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	691b      	ldr	r3, [r3, #16]
 800889e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088a2:	d133      	bne.n	800890c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	2b21      	cmp	r3, #33	; 0x21
 80088ae:	d109      	bne.n	80088c4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	461a      	mov	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80088c0:	611a      	str	r2, [r3, #16]
 80088c2:	e008      	b.n	80088d6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	f043 0301 	orr.w	r3, r3, #1
 80088ce:	b2da      	uxtb	r2, r3
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d004      	beq.n	80088e8 <I2C_Master_SB+0x92>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d108      	bne.n	80088fa <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d032      	beq.n	8008956 <I2C_Master_SB+0x100>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d02d      	beq.n	8008956 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	685a      	ldr	r2, [r3, #4]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008908:	605a      	str	r2, [r3, #4]
}
 800890a:	e024      	b.n	8008956 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008910:	2b00      	cmp	r3, #0
 8008912:	d10e      	bne.n	8008932 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008918:	b29b      	uxth	r3, r3
 800891a:	11db      	asrs	r3, r3, #7
 800891c:	b2db      	uxtb	r3, r3
 800891e:	f003 0306 	and.w	r3, r3, #6
 8008922:	b2db      	uxtb	r3, r3
 8008924:	f063 030f 	orn	r3, r3, #15
 8008928:	b2da      	uxtb	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	611a      	str	r2, [r3, #16]
}
 8008930:	e011      	b.n	8008956 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008936:	2b01      	cmp	r3, #1
 8008938:	d10d      	bne.n	8008956 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800893e:	b29b      	uxth	r3, r3
 8008940:	11db      	asrs	r3, r3, #7
 8008942:	b2db      	uxtb	r3, r3
 8008944:	f003 0306 	and.w	r3, r3, #6
 8008948:	b2db      	uxtb	r3, r3
 800894a:	f063 030e 	orn	r3, r3, #14
 800894e:	b2da      	uxtb	r2, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	611a      	str	r2, [r3, #16]
}
 8008956:	bf00      	nop
 8008958:	370c      	adds	r7, #12
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr

08008962 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8008962:	b480      	push	{r7}
 8008964:	b083      	sub	sp, #12
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800896e:	b2da      	uxtb	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800897a:	2b00      	cmp	r3, #0
 800897c:	d004      	beq.n	8008988 <I2C_Master_ADD10+0x26>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008984:	2b00      	cmp	r3, #0
 8008986:	d108      	bne.n	800899a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00c      	beq.n	80089aa <I2C_Master_ADD10+0x48>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008996:	2b00      	cmp	r3, #0
 8008998:	d007      	beq.n	80089aa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	685a      	ldr	r2, [r3, #4]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089a8:	605a      	str	r2, [r3, #4]
  }
}
 80089aa:	bf00      	nop
 80089ac:	370c      	adds	r7, #12
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr

080089b6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80089b6:	b480      	push	{r7}
 80089b8:	b091      	sub	sp, #68	; 0x44
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089cc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	2b22      	cmp	r3, #34	; 0x22
 80089de:	f040 8169 	bne.w	8008cb4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d10f      	bne.n	8008a0a <I2C_Master_ADDR+0x54>
 80089ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80089ee:	2b40      	cmp	r3, #64	; 0x40
 80089f0:	d10b      	bne.n	8008a0a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089f2:	2300      	movs	r3, #0
 80089f4:	633b      	str	r3, [r7, #48]	; 0x30
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	695b      	ldr	r3, [r3, #20]
 80089fc:	633b      	str	r3, [r7, #48]	; 0x30
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	699b      	ldr	r3, [r3, #24]
 8008a04:	633b      	str	r3, [r7, #48]	; 0x30
 8008a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a08:	e160      	b.n	8008ccc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d11d      	bne.n	8008a4e <I2C_Master_ADDR+0x98>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008a1a:	d118      	bne.n	8008a4e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	695b      	ldr	r3, [r3, #20]
 8008a26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	699b      	ldr	r3, [r3, #24]
 8008a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a40:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a46:	1c5a      	adds	r2, r3, #1
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	651a      	str	r2, [r3, #80]	; 0x50
 8008a4c:	e13e      	b.n	8008ccc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d113      	bne.n	8008a80 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a58:	2300      	movs	r3, #0
 8008a5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	695b      	ldr	r3, [r3, #20]
 8008a62:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	699b      	ldr	r3, [r3, #24]
 8008a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a7c:	601a      	str	r2, [r3, #0]
 8008a7e:	e115      	b.n	8008cac <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	f040 808a 	bne.w	8008ba0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008a92:	d137      	bne.n	8008b04 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008aa2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008aae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ab2:	d113      	bne.n	8008adc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ac2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	695b      	ldr	r3, [r3, #20]
 8008ace:	627b      	str	r3, [r7, #36]	; 0x24
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	699b      	ldr	r3, [r3, #24]
 8008ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8008ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ada:	e0e7      	b.n	8008cac <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008adc:	2300      	movs	r3, #0
 8008ade:	623b      	str	r3, [r7, #32]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	695b      	ldr	r3, [r3, #20]
 8008ae6:	623b      	str	r3, [r7, #32]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	699b      	ldr	r3, [r3, #24]
 8008aee:	623b      	str	r3, [r7, #32]
 8008af0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b00:	601a      	str	r2, [r3, #0]
 8008b02:	e0d3      	b.n	8008cac <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b06:	2b08      	cmp	r3, #8
 8008b08:	d02e      	beq.n	8008b68 <I2C_Master_ADDR+0x1b2>
 8008b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0c:	2b20      	cmp	r3, #32
 8008b0e:	d02b      	beq.n	8008b68 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b12:	2b12      	cmp	r3, #18
 8008b14:	d102      	bne.n	8008b1c <I2C_Master_ADDR+0x166>
 8008b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d125      	bne.n	8008b68 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1e:	2b04      	cmp	r3, #4
 8008b20:	d00e      	beq.n	8008b40 <I2C_Master_ADDR+0x18a>
 8008b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	d00b      	beq.n	8008b40 <I2C_Master_ADDR+0x18a>
 8008b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2a:	2b10      	cmp	r3, #16
 8008b2c:	d008      	beq.n	8008b40 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b3c:	601a      	str	r2, [r3, #0]
 8008b3e:	e007      	b.n	8008b50 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b4e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b50:	2300      	movs	r3, #0
 8008b52:	61fb      	str	r3, [r7, #28]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	695b      	ldr	r3, [r3, #20]
 8008b5a:	61fb      	str	r3, [r7, #28]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	61fb      	str	r3, [r7, #28]
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	e0a1      	b.n	8008cac <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b76:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b78:	2300      	movs	r3, #0
 8008b7a:	61bb      	str	r3, [r7, #24]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	695b      	ldr	r3, [r3, #20]
 8008b82:	61bb      	str	r3, [r7, #24]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	699b      	ldr	r3, [r3, #24]
 8008b8a:	61bb      	str	r3, [r7, #24]
 8008b8c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b9c:	601a      	str	r2, [r3, #0]
 8008b9e:	e085      	b.n	8008cac <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	2b02      	cmp	r3, #2
 8008ba8:	d14d      	bne.n	8008c46 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bac:	2b04      	cmp	r3, #4
 8008bae:	d016      	beq.n	8008bde <I2C_Master_ADDR+0x228>
 8008bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb2:	2b02      	cmp	r3, #2
 8008bb4:	d013      	beq.n	8008bde <I2C_Master_ADDR+0x228>
 8008bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb8:	2b10      	cmp	r3, #16
 8008bba:	d010      	beq.n	8008bde <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bca:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008bda:	601a      	str	r2, [r3, #0]
 8008bdc:	e007      	b.n	8008bee <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008bec:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bfc:	d117      	bne.n	8008c2e <I2C_Master_ADDR+0x278>
 8008bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008c04:	d00b      	beq.n	8008c1e <I2C_Master_ADDR+0x268>
 8008c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d008      	beq.n	8008c1e <I2C_Master_ADDR+0x268>
 8008c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0e:	2b08      	cmp	r3, #8
 8008c10:	d005      	beq.n	8008c1e <I2C_Master_ADDR+0x268>
 8008c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c14:	2b10      	cmp	r3, #16
 8008c16:	d002      	beq.n	8008c1e <I2C_Master_ADDR+0x268>
 8008c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c1a:	2b20      	cmp	r3, #32
 8008c1c:	d107      	bne.n	8008c2e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	685a      	ldr	r2, [r3, #4]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c2c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c2e:	2300      	movs	r3, #0
 8008c30:	617b      	str	r3, [r7, #20]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	695b      	ldr	r3, [r3, #20]
 8008c38:	617b      	str	r3, [r7, #20]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	699b      	ldr	r3, [r3, #24]
 8008c40:	617b      	str	r3, [r7, #20]
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	e032      	b.n	8008cac <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c54:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c64:	d117      	bne.n	8008c96 <I2C_Master_ADDR+0x2e0>
 8008c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008c6c:	d00b      	beq.n	8008c86 <I2C_Master_ADDR+0x2d0>
 8008c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d008      	beq.n	8008c86 <I2C_Master_ADDR+0x2d0>
 8008c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c76:	2b08      	cmp	r3, #8
 8008c78:	d005      	beq.n	8008c86 <I2C_Master_ADDR+0x2d0>
 8008c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7c:	2b10      	cmp	r3, #16
 8008c7e:	d002      	beq.n	8008c86 <I2C_Master_ADDR+0x2d0>
 8008c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c82:	2b20      	cmp	r3, #32
 8008c84:	d107      	bne.n	8008c96 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	685a      	ldr	r2, [r3, #4]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c94:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c96:	2300      	movs	r3, #0
 8008c98:	613b      	str	r3, [r7, #16]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	695b      	ldr	r3, [r3, #20]
 8008ca0:	613b      	str	r3, [r7, #16]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	699b      	ldr	r3, [r3, #24]
 8008ca8:	613b      	str	r3, [r7, #16]
 8008caa:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008cb2:	e00b      	b.n	8008ccc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	60fb      	str	r3, [r7, #12]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	695b      	ldr	r3, [r3, #20]
 8008cbe:	60fb      	str	r3, [r7, #12]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	699b      	ldr	r3, [r3, #24]
 8008cc6:	60fb      	str	r3, [r7, #12]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
}
 8008cca:	e7ff      	b.n	8008ccc <I2C_Master_ADDR+0x316>
 8008ccc:	bf00      	nop
 8008cce:	3744      	adds	r7, #68	; 0x44
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ce6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d02b      	beq.n	8008d4a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf6:	781a      	ldrb	r2, [r3, #0]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d02:	1c5a      	adds	r2, r3, #1
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	b29a      	uxth	r2, r3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d114      	bne.n	8008d4a <I2C_SlaveTransmit_TXE+0x72>
 8008d20:	7bfb      	ldrb	r3, [r7, #15]
 8008d22:	2b29      	cmp	r3, #41	; 0x29
 8008d24:	d111      	bne.n	8008d4a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	685a      	ldr	r2, [r3, #4]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d34:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2221      	movs	r2, #33	; 0x21
 8008d3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2228      	movs	r2, #40	; 0x28
 8008d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f7ff f9e7 	bl	8008118 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008d4a:	bf00      	nop
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008d52:	b480      	push	{r7}
 8008d54:	b083      	sub	sp, #12
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d011      	beq.n	8008d88 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d68:	781a      	ldrb	r2, [r3, #0]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d74:	1c5a      	adds	r2, r3, #1
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	3b01      	subs	r3, #1
 8008d82:	b29a      	uxth	r2, r3
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008d88:	bf00      	nop
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008da2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d02c      	beq.n	8008e08 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	691a      	ldr	r2, [r3, #16]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db8:	b2d2      	uxtb	r2, r2
 8008dba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc0:	1c5a      	adds	r2, r3, #1
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	3b01      	subs	r3, #1
 8008dce:	b29a      	uxth	r2, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d114      	bne.n	8008e08 <I2C_SlaveReceive_RXNE+0x74>
 8008dde:	7bfb      	ldrb	r3, [r7, #15]
 8008de0:	2b2a      	cmp	r3, #42	; 0x2a
 8008de2:	d111      	bne.n	8008e08 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	685a      	ldr	r2, [r3, #4]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008df2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2222      	movs	r2, #34	; 0x22
 8008df8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2228      	movs	r2, #40	; 0x28
 8008dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f7ff f992 	bl	800812c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008e08:	bf00      	nop
 8008e0a:	3710      	adds	r7, #16
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d012      	beq.n	8008e48 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	691a      	ldr	r2, [r3, #16]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2c:	b2d2      	uxtb	r2, r2
 8008e2e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e34:	1c5a      	adds	r2, r3, #1
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	3b01      	subs	r3, #1
 8008e42:	b29a      	uxth	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008e48:	bf00      	nop
 8008e4a:	370c      	adds	r7, #12
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr

08008e54 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008e6e:	2b28      	cmp	r3, #40	; 0x28
 8008e70:	d127      	bne.n	8008ec2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	685a      	ldr	r2, [r3, #4]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e80:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	089b      	lsrs	r3, r3, #2
 8008e86:	f003 0301 	and.w	r3, r3, #1
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d101      	bne.n	8008e92 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	09db      	lsrs	r3, r3, #7
 8008e96:	f003 0301 	and.w	r3, r3, #1
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d103      	bne.n	8008ea6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	81bb      	strh	r3, [r7, #12]
 8008ea4:	e002      	b.n	8008eac <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	699b      	ldr	r3, [r3, #24]
 8008eaa:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008eb4:	89ba      	ldrh	r2, [r7, #12]
 8008eb6:	7bfb      	ldrb	r3, [r7, #15]
 8008eb8:	4619      	mov	r1, r3
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f7ff f940 	bl	8008140 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008ec0:	e00e      	b.n	8008ee0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	60bb      	str	r3, [r7, #8]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	695b      	ldr	r3, [r3, #20]
 8008ecc:	60bb      	str	r3, [r7, #8]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	699b      	ldr	r3, [r3, #24]
 8008ed4:	60bb      	str	r3, [r7, #8]
 8008ed6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8008ee0:	bf00      	nop
 8008ee2:	3710      	adds	r7, #16
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ef6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	685a      	ldr	r2, [r3, #4]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008f06:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008f08:	2300      	movs	r3, #0
 8008f0a:	60bb      	str	r3, [r7, #8]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	695b      	ldr	r3, [r3, #20]
 8008f12:	60bb      	str	r3, [r7, #8]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f042 0201 	orr.w	r2, r2, #1
 8008f22:	601a      	str	r2, [r3, #0]
 8008f24:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f34:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f44:	d172      	bne.n	800902c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008f46:	7bfb      	ldrb	r3, [r7, #15]
 8008f48:	2b22      	cmp	r3, #34	; 0x22
 8008f4a:	d002      	beq.n	8008f52 <I2C_Slave_STOPF+0x6a>
 8008f4c:	7bfb      	ldrb	r3, [r7, #15]
 8008f4e:	2b2a      	cmp	r3, #42	; 0x2a
 8008f50:	d135      	bne.n	8008fbe <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d005      	beq.n	8008f76 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f6e:	f043 0204 	orr.w	r2, r3, #4
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	685a      	ldr	r2, [r3, #4]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008f84:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7fe f938 	bl	8007200 <HAL_DMA_GetState>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d049      	beq.n	800902a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f9a:	4a69      	ldr	r2, [pc, #420]	; (8009140 <I2C_Slave_STOPF+0x258>)
 8008f9c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7fd ff80 	bl	8006ea8 <HAL_DMA_Abort_IT>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d03d      	beq.n	800902a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008fb8:	4610      	mov	r0, r2
 8008fba:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008fbc:	e035      	b.n	800902a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	b29a      	uxth	r2, r3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d005      	beq.n	8008fe2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fda:	f043 0204 	orr.w	r2, r3, #4
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	685a      	ldr	r2, [r3, #4]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ff0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7fe f902 	bl	8007200 <HAL_DMA_GetState>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d014      	beq.n	800902c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009006:	4a4e      	ldr	r2, [pc, #312]	; (8009140 <I2C_Slave_STOPF+0x258>)
 8009008:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800900e:	4618      	mov	r0, r3
 8009010:	f7fd ff4a 	bl	8006ea8 <HAL_DMA_Abort_IT>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d008      	beq.n	800902c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800901e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009024:	4610      	mov	r0, r2
 8009026:	4798      	blx	r3
 8009028:	e000      	b.n	800902c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800902a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009030:	b29b      	uxth	r3, r3
 8009032:	2b00      	cmp	r3, #0
 8009034:	d03e      	beq.n	80090b4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	695b      	ldr	r3, [r3, #20]
 800903c:	f003 0304 	and.w	r3, r3, #4
 8009040:	2b04      	cmp	r3, #4
 8009042:	d112      	bne.n	800906a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	691a      	ldr	r2, [r3, #16]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904e:	b2d2      	uxtb	r2, r2
 8009050:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009056:	1c5a      	adds	r2, r3, #1
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009060:	b29b      	uxth	r3, r3
 8009062:	3b01      	subs	r3, #1
 8009064:	b29a      	uxth	r2, r3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	695b      	ldr	r3, [r3, #20]
 8009070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009074:	2b40      	cmp	r3, #64	; 0x40
 8009076:	d112      	bne.n	800909e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	691a      	ldr	r2, [r3, #16]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009082:	b2d2      	uxtb	r2, r2
 8009084:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908a:	1c5a      	adds	r2, r3, #1
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009094:	b29b      	uxth	r3, r3
 8009096:	3b01      	subs	r3, #1
 8009098:	b29a      	uxth	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d005      	beq.n	80090b4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ac:	f043 0204 	orr.w	r2, r3, #4
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d003      	beq.n	80090c4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 f8b3 	bl	8009228 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80090c2:	e039      	b.n	8009138 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80090c4:	7bfb      	ldrb	r3, [r7, #15]
 80090c6:	2b2a      	cmp	r3, #42	; 0x2a
 80090c8:	d109      	bne.n	80090de <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2228      	movs	r2, #40	; 0x28
 80090d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f7ff f827 	bl	800812c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	2b28      	cmp	r3, #40	; 0x28
 80090e8:	d111      	bne.n	800910e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4a15      	ldr	r2, [pc, #84]	; (8009144 <I2C_Slave_STOPF+0x25c>)
 80090ee:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2220      	movs	r2, #32
 80090fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f7ff f828 	bl	800815c <HAL_I2C_ListenCpltCallback>
}
 800910c:	e014      	b.n	8009138 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009112:	2b22      	cmp	r3, #34	; 0x22
 8009114:	d002      	beq.n	800911c <I2C_Slave_STOPF+0x234>
 8009116:	7bfb      	ldrb	r3, [r7, #15]
 8009118:	2b22      	cmp	r3, #34	; 0x22
 800911a:	d10d      	bne.n	8009138 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2220      	movs	r2, #32
 8009126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f7fe fffa 	bl	800812c <HAL_I2C_SlaveRxCpltCallback>
}
 8009138:	bf00      	nop
 800913a:	3710      	adds	r7, #16
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	0800948d 	.word	0x0800948d
 8009144:	ffff0000 	.word	0xffff0000

08009148 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009156:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800915c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	2b08      	cmp	r3, #8
 8009162:	d002      	beq.n	800916a <I2C_Slave_AF+0x22>
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	2b20      	cmp	r3, #32
 8009168:	d129      	bne.n	80091be <I2C_Slave_AF+0x76>
 800916a:	7bfb      	ldrb	r3, [r7, #15]
 800916c:	2b28      	cmp	r3, #40	; 0x28
 800916e:	d126      	bne.n	80091be <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4a2c      	ldr	r2, [pc, #176]	; (8009224 <I2C_Slave_AF+0xdc>)
 8009174:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	685a      	ldr	r2, [r3, #4]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009184:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800918e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800919e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2220      	movs	r2, #32
 80091aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f7fe ffd0 	bl	800815c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80091bc:	e02e      	b.n	800921c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80091be:	7bfb      	ldrb	r3, [r7, #15]
 80091c0:	2b21      	cmp	r3, #33	; 0x21
 80091c2:	d126      	bne.n	8009212 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4a17      	ldr	r2, [pc, #92]	; (8009224 <I2C_Slave_AF+0xdc>)
 80091c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2221      	movs	r2, #33	; 0x21
 80091ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2220      	movs	r2, #32
 80091d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	685a      	ldr	r2, [r3, #4]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80091ee:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80091f8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009208:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f7fe ff84 	bl	8008118 <HAL_I2C_SlaveTxCpltCallback>
}
 8009210:	e004      	b.n	800921c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800921a:	615a      	str	r2, [r3, #20]
}
 800921c:	bf00      	nop
 800921e:	3710      	adds	r7, #16
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	ffff0000 	.word	0xffff0000

08009228 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009236:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800923e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009240:	7bbb      	ldrb	r3, [r7, #14]
 8009242:	2b10      	cmp	r3, #16
 8009244:	d002      	beq.n	800924c <I2C_ITError+0x24>
 8009246:	7bbb      	ldrb	r3, [r7, #14]
 8009248:	2b40      	cmp	r3, #64	; 0x40
 800924a:	d10a      	bne.n	8009262 <I2C_ITError+0x3a>
 800924c:	7bfb      	ldrb	r3, [r7, #15]
 800924e:	2b22      	cmp	r3, #34	; 0x22
 8009250:	d107      	bne.n	8009262 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009260:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009262:	7bfb      	ldrb	r3, [r7, #15]
 8009264:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009268:	2b28      	cmp	r3, #40	; 0x28
 800926a:	d107      	bne.n	800927c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2228      	movs	r2, #40	; 0x28
 8009276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800927a:	e015      	b.n	80092a8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800928a:	d00a      	beq.n	80092a2 <I2C_ITError+0x7a>
 800928c:	7bfb      	ldrb	r3, [r7, #15]
 800928e:	2b60      	cmp	r3, #96	; 0x60
 8009290:	d007      	beq.n	80092a2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2220      	movs	r2, #32
 8009296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092b6:	d162      	bne.n	800937e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	685a      	ldr	r2, [r3, #4]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80092c6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d020      	beq.n	8009318 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092da:	4a6a      	ldr	r2, [pc, #424]	; (8009484 <I2C_ITError+0x25c>)
 80092dc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7fd fde0 	bl	8006ea8 <HAL_DMA_Abort_IT>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	f000 8089 	beq.w	8009402 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f022 0201 	bic.w	r2, r2, #1
 80092fe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2220      	movs	r2, #32
 8009304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800930c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009312:	4610      	mov	r0, r2
 8009314:	4798      	blx	r3
 8009316:	e074      	b.n	8009402 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931c:	4a59      	ldr	r2, [pc, #356]	; (8009484 <I2C_ITError+0x25c>)
 800931e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009324:	4618      	mov	r0, r3
 8009326:	f7fd fdbf 	bl	8006ea8 <HAL_DMA_Abort_IT>
 800932a:	4603      	mov	r3, r0
 800932c:	2b00      	cmp	r3, #0
 800932e:	d068      	beq.n	8009402 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	695b      	ldr	r3, [r3, #20]
 8009336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800933a:	2b40      	cmp	r3, #64	; 0x40
 800933c:	d10b      	bne.n	8009356 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	691a      	ldr	r2, [r3, #16]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009348:	b2d2      	uxtb	r2, r2
 800934a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009350:	1c5a      	adds	r2, r3, #1
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f022 0201 	bic.w	r2, r2, #1
 8009364:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2220      	movs	r2, #32
 800936a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009378:	4610      	mov	r0, r2
 800937a:	4798      	blx	r3
 800937c:	e041      	b.n	8009402 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009384:	b2db      	uxtb	r3, r3
 8009386:	2b60      	cmp	r3, #96	; 0x60
 8009388:	d125      	bne.n	80093d6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2220      	movs	r2, #32
 800938e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	695b      	ldr	r3, [r3, #20]
 800939e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093a2:	2b40      	cmp	r3, #64	; 0x40
 80093a4:	d10b      	bne.n	80093be <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	691a      	ldr	r2, [r3, #16]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b0:	b2d2      	uxtb	r2, r2
 80093b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b8:	1c5a      	adds	r2, r3, #1
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f022 0201 	bic.w	r2, r2, #1
 80093cc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f7fe feec 	bl	80081ac <HAL_I2C_AbortCpltCallback>
 80093d4:	e015      	b.n	8009402 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	695b      	ldr	r3, [r3, #20]
 80093dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093e0:	2b40      	cmp	r3, #64	; 0x40
 80093e2:	d10b      	bne.n	80093fc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	691a      	ldr	r2, [r3, #16]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ee:	b2d2      	uxtb	r2, r2
 80093f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f6:	1c5a      	adds	r2, r3, #1
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f7fe fecb 	bl	8008198 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009406:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	f003 0301 	and.w	r3, r3, #1
 800940e:	2b00      	cmp	r3, #0
 8009410:	d10e      	bne.n	8009430 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009418:	2b00      	cmp	r3, #0
 800941a:	d109      	bne.n	8009430 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009422:	2b00      	cmp	r3, #0
 8009424:	d104      	bne.n	8009430 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800942c:	2b00      	cmp	r3, #0
 800942e:	d007      	beq.n	8009440 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	685a      	ldr	r2, [r3, #4]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800943e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009446:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800944c:	f003 0304 	and.w	r3, r3, #4
 8009450:	2b04      	cmp	r3, #4
 8009452:	d113      	bne.n	800947c <I2C_ITError+0x254>
 8009454:	7bfb      	ldrb	r3, [r7, #15]
 8009456:	2b28      	cmp	r3, #40	; 0x28
 8009458:	d110      	bne.n	800947c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4a0a      	ldr	r2, [pc, #40]	; (8009488 <I2C_ITError+0x260>)
 800945e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2220      	movs	r2, #32
 800946a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2200      	movs	r2, #0
 8009472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f7fe fe70 	bl	800815c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800947c:	bf00      	nop
 800947e:	3710      	adds	r7, #16
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}
 8009484:	0800948d 	.word	0x0800948d
 8009488:	ffff0000 	.word	0xffff0000

0800948c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b086      	sub	sp, #24
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009494:	2300      	movs	r3, #0
 8009496:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800949c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094a4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80094a6:	4b4b      	ldr	r3, [pc, #300]	; (80095d4 <I2C_DMAAbort+0x148>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	08db      	lsrs	r3, r3, #3
 80094ac:	4a4a      	ldr	r2, [pc, #296]	; (80095d8 <I2C_DMAAbort+0x14c>)
 80094ae:	fba2 2303 	umull	r2, r3, r2, r3
 80094b2:	0a1a      	lsrs	r2, r3, #8
 80094b4:	4613      	mov	r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	4413      	add	r3, r2
 80094ba:	00da      	lsls	r2, r3, #3
 80094bc:	1ad3      	subs	r3, r2, r3
 80094be:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d106      	bne.n	80094d4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ca:	f043 0220 	orr.w	r2, r3, #32
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80094d2:	e00a      	b.n	80094ea <I2C_DMAAbort+0x5e>
    }
    count--;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	3b01      	subs	r3, #1
 80094d8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094e8:	d0ea      	beq.n	80094c0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d003      	beq.n	80094fa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f6:	2200      	movs	r2, #0
 80094f8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d003      	beq.n	800950a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009506:	2200      	movs	r2, #0
 8009508:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009518:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	2200      	movs	r2, #0
 800951e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009524:	2b00      	cmp	r3, #0
 8009526:	d003      	beq.n	8009530 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800952c:	2200      	movs	r2, #0
 800952e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009534:	2b00      	cmp	r3, #0
 8009536:	d003      	beq.n	8009540 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953c:	2200      	movs	r2, #0
 800953e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f022 0201 	bic.w	r2, r2, #1
 800954e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009556:	b2db      	uxtb	r3, r3
 8009558:	2b60      	cmp	r3, #96	; 0x60
 800955a:	d10e      	bne.n	800957a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	2220      	movs	r2, #32
 8009560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	2200      	movs	r2, #0
 8009568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	2200      	movs	r2, #0
 8009570:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009572:	6978      	ldr	r0, [r7, #20]
 8009574:	f7fe fe1a 	bl	80081ac <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009578:	e027      	b.n	80095ca <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800957a:	7cfb      	ldrb	r3, [r7, #19]
 800957c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009580:	2b28      	cmp	r3, #40	; 0x28
 8009582:	d117      	bne.n	80095b4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f042 0201 	orr.w	r2, r2, #1
 8009592:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80095a2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	2200      	movs	r2, #0
 80095a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	2228      	movs	r2, #40	; 0x28
 80095ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80095b2:	e007      	b.n	80095c4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	2220      	movs	r2, #32
 80095b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	2200      	movs	r2, #0
 80095c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80095c4:	6978      	ldr	r0, [r7, #20]
 80095c6:	f7fe fde7 	bl	8008198 <HAL_I2C_ErrorCallback>
}
 80095ca:	bf00      	nop
 80095cc:	3718      	adds	r7, #24
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	20000234 	.word	0x20000234
 80095d8:	14f8b589 	.word	0x14f8b589

080095dc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80095dc:	b480      	push	{r7}
 80095de:	b085      	sub	sp, #20
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80095e4:	2300      	movs	r3, #0
 80095e6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80095e8:	4b13      	ldr	r3, [pc, #76]	; (8009638 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	08db      	lsrs	r3, r3, #3
 80095ee:	4a13      	ldr	r2, [pc, #76]	; (800963c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80095f0:	fba2 2303 	umull	r2, r3, r2, r3
 80095f4:	0a1a      	lsrs	r2, r3, #8
 80095f6:	4613      	mov	r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	4413      	add	r3, r2
 80095fc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	3b01      	subs	r3, #1
 8009602:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d107      	bne.n	800961a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800960e:	f043 0220 	orr.w	r2, r3, #32
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	e008      	b.n	800962c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009628:	d0e9      	beq.n	80095fe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	3714      	adds	r7, #20
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr
 8009638:	20000234 	.word	0x20000234
 800963c:	14f8b589 	.word	0x14f8b589

08009640 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8009650:	d103      	bne.n	800965a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2201      	movs	r2, #1
 8009656:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8009658:	e007      	b.n	800966a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800965e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009662:	d102      	bne.n	800966a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2208      	movs	r2, #8
 8009668:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800966a:	bf00      	nop
 800966c:	370c      	adds	r7, #12
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr
	...

08009678 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b086      	sub	sp, #24
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d101      	bne.n	800968a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	e267      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f003 0301 	and.w	r3, r3, #1
 8009692:	2b00      	cmp	r3, #0
 8009694:	d075      	beq.n	8009782 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009696:	4b88      	ldr	r3, [pc, #544]	; (80098b8 <HAL_RCC_OscConfig+0x240>)
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	f003 030c 	and.w	r3, r3, #12
 800969e:	2b04      	cmp	r3, #4
 80096a0:	d00c      	beq.n	80096bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80096a2:	4b85      	ldr	r3, [pc, #532]	; (80098b8 <HAL_RCC_OscConfig+0x240>)
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80096aa:	2b08      	cmp	r3, #8
 80096ac:	d112      	bne.n	80096d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80096ae:	4b82      	ldr	r3, [pc, #520]	; (80098b8 <HAL_RCC_OscConfig+0x240>)
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096ba:	d10b      	bne.n	80096d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096bc:	4b7e      	ldr	r3, [pc, #504]	; (80098b8 <HAL_RCC_OscConfig+0x240>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d05b      	beq.n	8009780 <HAL_RCC_OscConfig+0x108>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d157      	bne.n	8009780 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	e242      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096dc:	d106      	bne.n	80096ec <HAL_RCC_OscConfig+0x74>
 80096de:	4b76      	ldr	r3, [pc, #472]	; (80098b8 <HAL_RCC_OscConfig+0x240>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a75      	ldr	r2, [pc, #468]	; (80098b8 <HAL_RCC_OscConfig+0x240>)
 80096e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096e8:	6013      	str	r3, [r2, #0]
 80096ea:	e01d      	b.n	8009728 <HAL_RCC_OscConfig+0xb0>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80096f4:	d10c      	bne.n	8009710 <HAL_RCC_OscConfig+0x98>
 80096f6:	4b70      	ldr	r3, [pc, #448]	; (80098b8 <HAL_RCC_OscConfig+0x240>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a6f      	ldr	r2, [pc, #444]	; (80098b8 <HAL_RCC_OscConfig+0x240>)
 80096fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009700:	6013      	str	r3, [r2, #0]
 8009702:	4b6d      	ldr	r3, [pc, #436]	; (80098b8 <HAL_RCC_OscConfig+0x240>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a6c      	ldr	r2, [pc, #432]	; (80098b8 <HAL_RCC_OscConfig+0x240>)
 8009708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800970c:	6013      	str	r3, [r2, #0]
 800970e:	e00b      	b.n	8009728 <HAL_RCC_OscConfig+0xb0>
 8009710:	4b69      	ldr	r3, [pc, #420]	; (80098b8 <HAL_RCC_OscConfig+0x240>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a68      	ldr	r2, [pc, #416]	; (80098b8 <HAL_RCC_OscConfig+0x240>)
 8009716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800971a:	6013      	str	r3, [r2, #0]
 800971c:	4b66      	ldr	r3, [pc, #408]	; (80098b8 <HAL_RCC_OscConfig+0x240>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a65      	ldr	r2, [pc, #404]	; (80098b8 <HAL_RCC_OscConfig+0x240>)
 8009722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d013      	beq.n	8009758 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009730:	f7fc fd24 	bl	800617c <HAL_GetTick>
 8009734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009736:	e008      	b.n	800974a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009738:	f7fc fd20 	bl	800617c <HAL_GetTick>
 800973c:	4602      	mov	r2, r0
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	2b64      	cmp	r3, #100	; 0x64
 8009744:	d901      	bls.n	800974a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009746:	2303      	movs	r3, #3
 8009748:	e207      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800974a:	4b5b      	ldr	r3, [pc, #364]	; (80098b8 <HAL_RCC_OscConfig+0x240>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009752:	2b00      	cmp	r3, #0
 8009754:	d0f0      	beq.n	8009738 <HAL_RCC_OscConfig+0xc0>
 8009756:	e014      	b.n	8009782 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009758:	f7fc fd10 	bl	800617c <HAL_GetTick>
 800975c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800975e:	e008      	b.n	8009772 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009760:	f7fc fd0c 	bl	800617c <HAL_GetTick>
 8009764:	4602      	mov	r2, r0
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	1ad3      	subs	r3, r2, r3
 800976a:	2b64      	cmp	r3, #100	; 0x64
 800976c:	d901      	bls.n	8009772 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800976e:	2303      	movs	r3, #3
 8009770:	e1f3      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009772:	4b51      	ldr	r3, [pc, #324]	; (80098b8 <HAL_RCC_OscConfig+0x240>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800977a:	2b00      	cmp	r3, #0
 800977c:	d1f0      	bne.n	8009760 <HAL_RCC_OscConfig+0xe8>
 800977e:	e000      	b.n	8009782 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f003 0302 	and.w	r3, r3, #2
 800978a:	2b00      	cmp	r3, #0
 800978c:	d063      	beq.n	8009856 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800978e:	4b4a      	ldr	r3, [pc, #296]	; (80098b8 <HAL_RCC_OscConfig+0x240>)
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	f003 030c 	and.w	r3, r3, #12
 8009796:	2b00      	cmp	r3, #0
 8009798:	d00b      	beq.n	80097b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800979a:	4b47      	ldr	r3, [pc, #284]	; (80098b8 <HAL_RCC_OscConfig+0x240>)
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80097a2:	2b08      	cmp	r3, #8
 80097a4:	d11c      	bne.n	80097e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80097a6:	4b44      	ldr	r3, [pc, #272]	; (80098b8 <HAL_RCC_OscConfig+0x240>)
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d116      	bne.n	80097e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80097b2:	4b41      	ldr	r3, [pc, #260]	; (80098b8 <HAL_RCC_OscConfig+0x240>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f003 0302 	and.w	r3, r3, #2
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d005      	beq.n	80097ca <HAL_RCC_OscConfig+0x152>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d001      	beq.n	80097ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80097c6:	2301      	movs	r3, #1
 80097c8:	e1c7      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097ca:	4b3b      	ldr	r3, [pc, #236]	; (80098b8 <HAL_RCC_OscConfig+0x240>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	691b      	ldr	r3, [r3, #16]
 80097d6:	00db      	lsls	r3, r3, #3
 80097d8:	4937      	ldr	r1, [pc, #220]	; (80098b8 <HAL_RCC_OscConfig+0x240>)
 80097da:	4313      	orrs	r3, r2
 80097dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80097de:	e03a      	b.n	8009856 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d020      	beq.n	800982a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80097e8:	4b34      	ldr	r3, [pc, #208]	; (80098bc <HAL_RCC_OscConfig+0x244>)
 80097ea:	2201      	movs	r2, #1
 80097ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097ee:	f7fc fcc5 	bl	800617c <HAL_GetTick>
 80097f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097f4:	e008      	b.n	8009808 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80097f6:	f7fc fcc1 	bl	800617c <HAL_GetTick>
 80097fa:	4602      	mov	r2, r0
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	1ad3      	subs	r3, r2, r3
 8009800:	2b02      	cmp	r3, #2
 8009802:	d901      	bls.n	8009808 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009804:	2303      	movs	r3, #3
 8009806:	e1a8      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009808:	4b2b      	ldr	r3, [pc, #172]	; (80098b8 <HAL_RCC_OscConfig+0x240>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f003 0302 	and.w	r3, r3, #2
 8009810:	2b00      	cmp	r3, #0
 8009812:	d0f0      	beq.n	80097f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009814:	4b28      	ldr	r3, [pc, #160]	; (80098b8 <HAL_RCC_OscConfig+0x240>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	691b      	ldr	r3, [r3, #16]
 8009820:	00db      	lsls	r3, r3, #3
 8009822:	4925      	ldr	r1, [pc, #148]	; (80098b8 <HAL_RCC_OscConfig+0x240>)
 8009824:	4313      	orrs	r3, r2
 8009826:	600b      	str	r3, [r1, #0]
 8009828:	e015      	b.n	8009856 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800982a:	4b24      	ldr	r3, [pc, #144]	; (80098bc <HAL_RCC_OscConfig+0x244>)
 800982c:	2200      	movs	r2, #0
 800982e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009830:	f7fc fca4 	bl	800617c <HAL_GetTick>
 8009834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009836:	e008      	b.n	800984a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009838:	f7fc fca0 	bl	800617c <HAL_GetTick>
 800983c:	4602      	mov	r2, r0
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	1ad3      	subs	r3, r2, r3
 8009842:	2b02      	cmp	r3, #2
 8009844:	d901      	bls.n	800984a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009846:	2303      	movs	r3, #3
 8009848:	e187      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800984a:	4b1b      	ldr	r3, [pc, #108]	; (80098b8 <HAL_RCC_OscConfig+0x240>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f003 0302 	and.w	r3, r3, #2
 8009852:	2b00      	cmp	r3, #0
 8009854:	d1f0      	bne.n	8009838 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f003 0308 	and.w	r3, r3, #8
 800985e:	2b00      	cmp	r3, #0
 8009860:	d036      	beq.n	80098d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	695b      	ldr	r3, [r3, #20]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d016      	beq.n	8009898 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800986a:	4b15      	ldr	r3, [pc, #84]	; (80098c0 <HAL_RCC_OscConfig+0x248>)
 800986c:	2201      	movs	r2, #1
 800986e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009870:	f7fc fc84 	bl	800617c <HAL_GetTick>
 8009874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009876:	e008      	b.n	800988a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009878:	f7fc fc80 	bl	800617c <HAL_GetTick>
 800987c:	4602      	mov	r2, r0
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	1ad3      	subs	r3, r2, r3
 8009882:	2b02      	cmp	r3, #2
 8009884:	d901      	bls.n	800988a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009886:	2303      	movs	r3, #3
 8009888:	e167      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800988a:	4b0b      	ldr	r3, [pc, #44]	; (80098b8 <HAL_RCC_OscConfig+0x240>)
 800988c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800988e:	f003 0302 	and.w	r3, r3, #2
 8009892:	2b00      	cmp	r3, #0
 8009894:	d0f0      	beq.n	8009878 <HAL_RCC_OscConfig+0x200>
 8009896:	e01b      	b.n	80098d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009898:	4b09      	ldr	r3, [pc, #36]	; (80098c0 <HAL_RCC_OscConfig+0x248>)
 800989a:	2200      	movs	r2, #0
 800989c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800989e:	f7fc fc6d 	bl	800617c <HAL_GetTick>
 80098a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80098a4:	e00e      	b.n	80098c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80098a6:	f7fc fc69 	bl	800617c <HAL_GetTick>
 80098aa:	4602      	mov	r2, r0
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	1ad3      	subs	r3, r2, r3
 80098b0:	2b02      	cmp	r3, #2
 80098b2:	d907      	bls.n	80098c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80098b4:	2303      	movs	r3, #3
 80098b6:	e150      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
 80098b8:	40023800 	.word	0x40023800
 80098bc:	42470000 	.word	0x42470000
 80098c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80098c4:	4b88      	ldr	r3, [pc, #544]	; (8009ae8 <HAL_RCC_OscConfig+0x470>)
 80098c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098c8:	f003 0302 	and.w	r3, r3, #2
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d1ea      	bne.n	80098a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f003 0304 	and.w	r3, r3, #4
 80098d8:	2b00      	cmp	r3, #0
 80098da:	f000 8097 	beq.w	8009a0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80098de:	2300      	movs	r3, #0
 80098e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80098e2:	4b81      	ldr	r3, [pc, #516]	; (8009ae8 <HAL_RCC_OscConfig+0x470>)
 80098e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d10f      	bne.n	800990e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80098ee:	2300      	movs	r3, #0
 80098f0:	60bb      	str	r3, [r7, #8]
 80098f2:	4b7d      	ldr	r3, [pc, #500]	; (8009ae8 <HAL_RCC_OscConfig+0x470>)
 80098f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f6:	4a7c      	ldr	r2, [pc, #496]	; (8009ae8 <HAL_RCC_OscConfig+0x470>)
 80098f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098fc:	6413      	str	r3, [r2, #64]	; 0x40
 80098fe:	4b7a      	ldr	r3, [pc, #488]	; (8009ae8 <HAL_RCC_OscConfig+0x470>)
 8009900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009906:	60bb      	str	r3, [r7, #8]
 8009908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800990a:	2301      	movs	r3, #1
 800990c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800990e:	4b77      	ldr	r3, [pc, #476]	; (8009aec <HAL_RCC_OscConfig+0x474>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009916:	2b00      	cmp	r3, #0
 8009918:	d118      	bne.n	800994c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800991a:	4b74      	ldr	r3, [pc, #464]	; (8009aec <HAL_RCC_OscConfig+0x474>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a73      	ldr	r2, [pc, #460]	; (8009aec <HAL_RCC_OscConfig+0x474>)
 8009920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009924:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009926:	f7fc fc29 	bl	800617c <HAL_GetTick>
 800992a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800992c:	e008      	b.n	8009940 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800992e:	f7fc fc25 	bl	800617c <HAL_GetTick>
 8009932:	4602      	mov	r2, r0
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	1ad3      	subs	r3, r2, r3
 8009938:	2b02      	cmp	r3, #2
 800993a:	d901      	bls.n	8009940 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800993c:	2303      	movs	r3, #3
 800993e:	e10c      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009940:	4b6a      	ldr	r3, [pc, #424]	; (8009aec <HAL_RCC_OscConfig+0x474>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009948:	2b00      	cmp	r3, #0
 800994a:	d0f0      	beq.n	800992e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	2b01      	cmp	r3, #1
 8009952:	d106      	bne.n	8009962 <HAL_RCC_OscConfig+0x2ea>
 8009954:	4b64      	ldr	r3, [pc, #400]	; (8009ae8 <HAL_RCC_OscConfig+0x470>)
 8009956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009958:	4a63      	ldr	r2, [pc, #396]	; (8009ae8 <HAL_RCC_OscConfig+0x470>)
 800995a:	f043 0301 	orr.w	r3, r3, #1
 800995e:	6713      	str	r3, [r2, #112]	; 0x70
 8009960:	e01c      	b.n	800999c <HAL_RCC_OscConfig+0x324>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	2b05      	cmp	r3, #5
 8009968:	d10c      	bne.n	8009984 <HAL_RCC_OscConfig+0x30c>
 800996a:	4b5f      	ldr	r3, [pc, #380]	; (8009ae8 <HAL_RCC_OscConfig+0x470>)
 800996c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800996e:	4a5e      	ldr	r2, [pc, #376]	; (8009ae8 <HAL_RCC_OscConfig+0x470>)
 8009970:	f043 0304 	orr.w	r3, r3, #4
 8009974:	6713      	str	r3, [r2, #112]	; 0x70
 8009976:	4b5c      	ldr	r3, [pc, #368]	; (8009ae8 <HAL_RCC_OscConfig+0x470>)
 8009978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800997a:	4a5b      	ldr	r2, [pc, #364]	; (8009ae8 <HAL_RCC_OscConfig+0x470>)
 800997c:	f043 0301 	orr.w	r3, r3, #1
 8009980:	6713      	str	r3, [r2, #112]	; 0x70
 8009982:	e00b      	b.n	800999c <HAL_RCC_OscConfig+0x324>
 8009984:	4b58      	ldr	r3, [pc, #352]	; (8009ae8 <HAL_RCC_OscConfig+0x470>)
 8009986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009988:	4a57      	ldr	r2, [pc, #348]	; (8009ae8 <HAL_RCC_OscConfig+0x470>)
 800998a:	f023 0301 	bic.w	r3, r3, #1
 800998e:	6713      	str	r3, [r2, #112]	; 0x70
 8009990:	4b55      	ldr	r3, [pc, #340]	; (8009ae8 <HAL_RCC_OscConfig+0x470>)
 8009992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009994:	4a54      	ldr	r2, [pc, #336]	; (8009ae8 <HAL_RCC_OscConfig+0x470>)
 8009996:	f023 0304 	bic.w	r3, r3, #4
 800999a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d015      	beq.n	80099d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099a4:	f7fc fbea 	bl	800617c <HAL_GetTick>
 80099a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099aa:	e00a      	b.n	80099c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099ac:	f7fc fbe6 	bl	800617c <HAL_GetTick>
 80099b0:	4602      	mov	r2, r0
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	1ad3      	subs	r3, r2, r3
 80099b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d901      	bls.n	80099c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80099be:	2303      	movs	r3, #3
 80099c0:	e0cb      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099c2:	4b49      	ldr	r3, [pc, #292]	; (8009ae8 <HAL_RCC_OscConfig+0x470>)
 80099c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099c6:	f003 0302 	and.w	r3, r3, #2
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d0ee      	beq.n	80099ac <HAL_RCC_OscConfig+0x334>
 80099ce:	e014      	b.n	80099fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80099d0:	f7fc fbd4 	bl	800617c <HAL_GetTick>
 80099d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80099d6:	e00a      	b.n	80099ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099d8:	f7fc fbd0 	bl	800617c <HAL_GetTick>
 80099dc:	4602      	mov	r2, r0
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	1ad3      	subs	r3, r2, r3
 80099e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d901      	bls.n	80099ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80099ea:	2303      	movs	r3, #3
 80099ec:	e0b5      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80099ee:	4b3e      	ldr	r3, [pc, #248]	; (8009ae8 <HAL_RCC_OscConfig+0x470>)
 80099f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099f2:	f003 0302 	and.w	r3, r3, #2
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d1ee      	bne.n	80099d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80099fa:	7dfb      	ldrb	r3, [r7, #23]
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d105      	bne.n	8009a0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a00:	4b39      	ldr	r3, [pc, #228]	; (8009ae8 <HAL_RCC_OscConfig+0x470>)
 8009a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a04:	4a38      	ldr	r2, [pc, #224]	; (8009ae8 <HAL_RCC_OscConfig+0x470>)
 8009a06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	699b      	ldr	r3, [r3, #24]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	f000 80a1 	beq.w	8009b58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009a16:	4b34      	ldr	r3, [pc, #208]	; (8009ae8 <HAL_RCC_OscConfig+0x470>)
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	f003 030c 	and.w	r3, r3, #12
 8009a1e:	2b08      	cmp	r3, #8
 8009a20:	d05c      	beq.n	8009adc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	699b      	ldr	r3, [r3, #24]
 8009a26:	2b02      	cmp	r3, #2
 8009a28:	d141      	bne.n	8009aae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a2a:	4b31      	ldr	r3, [pc, #196]	; (8009af0 <HAL_RCC_OscConfig+0x478>)
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a30:	f7fc fba4 	bl	800617c <HAL_GetTick>
 8009a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a36:	e008      	b.n	8009a4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a38:	f7fc fba0 	bl	800617c <HAL_GetTick>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	2b02      	cmp	r3, #2
 8009a44:	d901      	bls.n	8009a4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009a46:	2303      	movs	r3, #3
 8009a48:	e087      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a4a:	4b27      	ldr	r3, [pc, #156]	; (8009ae8 <HAL_RCC_OscConfig+0x470>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d1f0      	bne.n	8009a38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	69da      	ldr	r2, [r3, #28]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6a1b      	ldr	r3, [r3, #32]
 8009a5e:	431a      	orrs	r2, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a64:	019b      	lsls	r3, r3, #6
 8009a66:	431a      	orrs	r2, r3
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a6c:	085b      	lsrs	r3, r3, #1
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	041b      	lsls	r3, r3, #16
 8009a72:	431a      	orrs	r2, r3
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a78:	061b      	lsls	r3, r3, #24
 8009a7a:	491b      	ldr	r1, [pc, #108]	; (8009ae8 <HAL_RCC_OscConfig+0x470>)
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009a80:	4b1b      	ldr	r3, [pc, #108]	; (8009af0 <HAL_RCC_OscConfig+0x478>)
 8009a82:	2201      	movs	r2, #1
 8009a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a86:	f7fc fb79 	bl	800617c <HAL_GetTick>
 8009a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a8c:	e008      	b.n	8009aa0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a8e:	f7fc fb75 	bl	800617c <HAL_GetTick>
 8009a92:	4602      	mov	r2, r0
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	1ad3      	subs	r3, r2, r3
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	d901      	bls.n	8009aa0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009a9c:	2303      	movs	r3, #3
 8009a9e:	e05c      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009aa0:	4b11      	ldr	r3, [pc, #68]	; (8009ae8 <HAL_RCC_OscConfig+0x470>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d0f0      	beq.n	8009a8e <HAL_RCC_OscConfig+0x416>
 8009aac:	e054      	b.n	8009b58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009aae:	4b10      	ldr	r3, [pc, #64]	; (8009af0 <HAL_RCC_OscConfig+0x478>)
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ab4:	f7fc fb62 	bl	800617c <HAL_GetTick>
 8009ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009aba:	e008      	b.n	8009ace <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009abc:	f7fc fb5e 	bl	800617c <HAL_GetTick>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	1ad3      	subs	r3, r2, r3
 8009ac6:	2b02      	cmp	r3, #2
 8009ac8:	d901      	bls.n	8009ace <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009aca:	2303      	movs	r3, #3
 8009acc:	e045      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ace:	4b06      	ldr	r3, [pc, #24]	; (8009ae8 <HAL_RCC_OscConfig+0x470>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d1f0      	bne.n	8009abc <HAL_RCC_OscConfig+0x444>
 8009ada:	e03d      	b.n	8009b58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	699b      	ldr	r3, [r3, #24]
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d107      	bne.n	8009af4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	e038      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
 8009ae8:	40023800 	.word	0x40023800
 8009aec:	40007000 	.word	0x40007000
 8009af0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009af4:	4b1b      	ldr	r3, [pc, #108]	; (8009b64 <HAL_RCC_OscConfig+0x4ec>)
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	699b      	ldr	r3, [r3, #24]
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d028      	beq.n	8009b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d121      	bne.n	8009b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d11a      	bne.n	8009b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009b1e:	68fa      	ldr	r2, [r7, #12]
 8009b20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009b24:	4013      	ands	r3, r2
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009b2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d111      	bne.n	8009b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b3a:	085b      	lsrs	r3, r3, #1
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d107      	bne.n	8009b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d001      	beq.n	8009b58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	e000      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009b58:	2300      	movs	r3, #0
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3718      	adds	r7, #24
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	40023800 	.word	0x40023800

08009b68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d101      	bne.n	8009b7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	e0cc      	b.n	8009d16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009b7c:	4b68      	ldr	r3, [pc, #416]	; (8009d20 <HAL_RCC_ClockConfig+0x1b8>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f003 0307 	and.w	r3, r3, #7
 8009b84:	683a      	ldr	r2, [r7, #0]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d90c      	bls.n	8009ba4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b8a:	4b65      	ldr	r3, [pc, #404]	; (8009d20 <HAL_RCC_ClockConfig+0x1b8>)
 8009b8c:	683a      	ldr	r2, [r7, #0]
 8009b8e:	b2d2      	uxtb	r2, r2
 8009b90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b92:	4b63      	ldr	r3, [pc, #396]	; (8009d20 <HAL_RCC_ClockConfig+0x1b8>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f003 0307 	and.w	r3, r3, #7
 8009b9a:	683a      	ldr	r2, [r7, #0]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d001      	beq.n	8009ba4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e0b8      	b.n	8009d16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f003 0302 	and.w	r3, r3, #2
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d020      	beq.n	8009bf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f003 0304 	and.w	r3, r3, #4
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d005      	beq.n	8009bc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009bbc:	4b59      	ldr	r3, [pc, #356]	; (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009bbe:	689b      	ldr	r3, [r3, #8]
 8009bc0:	4a58      	ldr	r2, [pc, #352]	; (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009bc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009bc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f003 0308 	and.w	r3, r3, #8
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d005      	beq.n	8009be0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009bd4:	4b53      	ldr	r3, [pc, #332]	; (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	4a52      	ldr	r2, [pc, #328]	; (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009bda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009bde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009be0:	4b50      	ldr	r3, [pc, #320]	; (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	494d      	ldr	r1, [pc, #308]	; (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f003 0301 	and.w	r3, r3, #1
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d044      	beq.n	8009c88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d107      	bne.n	8009c16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c06:	4b47      	ldr	r3, [pc, #284]	; (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d119      	bne.n	8009c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	e07f      	b.n	8009d16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	2b02      	cmp	r3, #2
 8009c1c:	d003      	beq.n	8009c26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009c22:	2b03      	cmp	r3, #3
 8009c24:	d107      	bne.n	8009c36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c26:	4b3f      	ldr	r3, [pc, #252]	; (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d109      	bne.n	8009c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	e06f      	b.n	8009d16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c36:	4b3b      	ldr	r3, [pc, #236]	; (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f003 0302 	and.w	r3, r3, #2
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d101      	bne.n	8009c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	e067      	b.n	8009d16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009c46:	4b37      	ldr	r3, [pc, #220]	; (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009c48:	689b      	ldr	r3, [r3, #8]
 8009c4a:	f023 0203 	bic.w	r2, r3, #3
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	4934      	ldr	r1, [pc, #208]	; (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009c54:	4313      	orrs	r3, r2
 8009c56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009c58:	f7fc fa90 	bl	800617c <HAL_GetTick>
 8009c5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c5e:	e00a      	b.n	8009c76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c60:	f7fc fa8c 	bl	800617c <HAL_GetTick>
 8009c64:	4602      	mov	r2, r0
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	1ad3      	subs	r3, r2, r3
 8009c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d901      	bls.n	8009c76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009c72:	2303      	movs	r3, #3
 8009c74:	e04f      	b.n	8009d16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c76:	4b2b      	ldr	r3, [pc, #172]	; (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	f003 020c 	and.w	r2, r3, #12
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d1eb      	bne.n	8009c60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009c88:	4b25      	ldr	r3, [pc, #148]	; (8009d20 <HAL_RCC_ClockConfig+0x1b8>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f003 0307 	and.w	r3, r3, #7
 8009c90:	683a      	ldr	r2, [r7, #0]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d20c      	bcs.n	8009cb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c96:	4b22      	ldr	r3, [pc, #136]	; (8009d20 <HAL_RCC_ClockConfig+0x1b8>)
 8009c98:	683a      	ldr	r2, [r7, #0]
 8009c9a:	b2d2      	uxtb	r2, r2
 8009c9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c9e:	4b20      	ldr	r3, [pc, #128]	; (8009d20 <HAL_RCC_ClockConfig+0x1b8>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f003 0307 	and.w	r3, r3, #7
 8009ca6:	683a      	ldr	r2, [r7, #0]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d001      	beq.n	8009cb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009cac:	2301      	movs	r3, #1
 8009cae:	e032      	b.n	8009d16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f003 0304 	and.w	r3, r3, #4
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d008      	beq.n	8009cce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009cbc:	4b19      	ldr	r3, [pc, #100]	; (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	4916      	ldr	r1, [pc, #88]	; (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f003 0308 	and.w	r3, r3, #8
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d009      	beq.n	8009cee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009cda:	4b12      	ldr	r3, [pc, #72]	; (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009cdc:	689b      	ldr	r3, [r3, #8]
 8009cde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	691b      	ldr	r3, [r3, #16]
 8009ce6:	00db      	lsls	r3, r3, #3
 8009ce8:	490e      	ldr	r1, [pc, #56]	; (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009cea:	4313      	orrs	r3, r2
 8009cec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009cee:	f000 f821 	bl	8009d34 <HAL_RCC_GetSysClockFreq>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	4b0b      	ldr	r3, [pc, #44]	; (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	091b      	lsrs	r3, r3, #4
 8009cfa:	f003 030f 	and.w	r3, r3, #15
 8009cfe:	490a      	ldr	r1, [pc, #40]	; (8009d28 <HAL_RCC_ClockConfig+0x1c0>)
 8009d00:	5ccb      	ldrb	r3, [r1, r3]
 8009d02:	fa22 f303 	lsr.w	r3, r2, r3
 8009d06:	4a09      	ldr	r2, [pc, #36]	; (8009d2c <HAL_RCC_ClockConfig+0x1c4>)
 8009d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009d0a:	4b09      	ldr	r3, [pc, #36]	; (8009d30 <HAL_RCC_ClockConfig+0x1c8>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7fc f9f0 	bl	80060f4 <HAL_InitTick>

  return HAL_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	40023c00 	.word	0x40023c00
 8009d24:	40023800 	.word	0x40023800
 8009d28:	0800f5e4 	.word	0x0800f5e4
 8009d2c:	20000234 	.word	0x20000234
 8009d30:	20000238 	.word	0x20000238

08009d34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d38:	b094      	sub	sp, #80	; 0x50
 8009d3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	647b      	str	r3, [r7, #68]	; 0x44
 8009d40:	2300      	movs	r3, #0
 8009d42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d44:	2300      	movs	r3, #0
 8009d46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009d4c:	4b79      	ldr	r3, [pc, #484]	; (8009f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	f003 030c 	and.w	r3, r3, #12
 8009d54:	2b08      	cmp	r3, #8
 8009d56:	d00d      	beq.n	8009d74 <HAL_RCC_GetSysClockFreq+0x40>
 8009d58:	2b08      	cmp	r3, #8
 8009d5a:	f200 80e1 	bhi.w	8009f20 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d002      	beq.n	8009d68 <HAL_RCC_GetSysClockFreq+0x34>
 8009d62:	2b04      	cmp	r3, #4
 8009d64:	d003      	beq.n	8009d6e <HAL_RCC_GetSysClockFreq+0x3a>
 8009d66:	e0db      	b.n	8009f20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009d68:	4b73      	ldr	r3, [pc, #460]	; (8009f38 <HAL_RCC_GetSysClockFreq+0x204>)
 8009d6a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009d6c:	e0db      	b.n	8009f26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009d6e:	4b73      	ldr	r3, [pc, #460]	; (8009f3c <HAL_RCC_GetSysClockFreq+0x208>)
 8009d70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009d72:	e0d8      	b.n	8009f26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009d74:	4b6f      	ldr	r3, [pc, #444]	; (8009f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d7c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009d7e:	4b6d      	ldr	r3, [pc, #436]	; (8009f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d063      	beq.n	8009e52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009d8a:	4b6a      	ldr	r3, [pc, #424]	; (8009f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	099b      	lsrs	r3, r3, #6
 8009d90:	2200      	movs	r2, #0
 8009d92:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d9c:	633b      	str	r3, [r7, #48]	; 0x30
 8009d9e:	2300      	movs	r3, #0
 8009da0:	637b      	str	r3, [r7, #52]	; 0x34
 8009da2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009da6:	4622      	mov	r2, r4
 8009da8:	462b      	mov	r3, r5
 8009daa:	f04f 0000 	mov.w	r0, #0
 8009dae:	f04f 0100 	mov.w	r1, #0
 8009db2:	0159      	lsls	r1, r3, #5
 8009db4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009db8:	0150      	lsls	r0, r2, #5
 8009dba:	4602      	mov	r2, r0
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	4621      	mov	r1, r4
 8009dc0:	1a51      	subs	r1, r2, r1
 8009dc2:	6139      	str	r1, [r7, #16]
 8009dc4:	4629      	mov	r1, r5
 8009dc6:	eb63 0301 	sbc.w	r3, r3, r1
 8009dca:	617b      	str	r3, [r7, #20]
 8009dcc:	f04f 0200 	mov.w	r2, #0
 8009dd0:	f04f 0300 	mov.w	r3, #0
 8009dd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009dd8:	4659      	mov	r1, fp
 8009dda:	018b      	lsls	r3, r1, #6
 8009ddc:	4651      	mov	r1, sl
 8009dde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009de2:	4651      	mov	r1, sl
 8009de4:	018a      	lsls	r2, r1, #6
 8009de6:	4651      	mov	r1, sl
 8009de8:	ebb2 0801 	subs.w	r8, r2, r1
 8009dec:	4659      	mov	r1, fp
 8009dee:	eb63 0901 	sbc.w	r9, r3, r1
 8009df2:	f04f 0200 	mov.w	r2, #0
 8009df6:	f04f 0300 	mov.w	r3, #0
 8009dfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009dfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009e02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009e06:	4690      	mov	r8, r2
 8009e08:	4699      	mov	r9, r3
 8009e0a:	4623      	mov	r3, r4
 8009e0c:	eb18 0303 	adds.w	r3, r8, r3
 8009e10:	60bb      	str	r3, [r7, #8]
 8009e12:	462b      	mov	r3, r5
 8009e14:	eb49 0303 	adc.w	r3, r9, r3
 8009e18:	60fb      	str	r3, [r7, #12]
 8009e1a:	f04f 0200 	mov.w	r2, #0
 8009e1e:	f04f 0300 	mov.w	r3, #0
 8009e22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009e26:	4629      	mov	r1, r5
 8009e28:	024b      	lsls	r3, r1, #9
 8009e2a:	4621      	mov	r1, r4
 8009e2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009e30:	4621      	mov	r1, r4
 8009e32:	024a      	lsls	r2, r1, #9
 8009e34:	4610      	mov	r0, r2
 8009e36:	4619      	mov	r1, r3
 8009e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009e40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e44:	f7f6 fecc 	bl	8000be0 <__aeabi_uldivmod>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	4613      	mov	r3, r2
 8009e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e50:	e058      	b.n	8009f04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e52:	4b38      	ldr	r3, [pc, #224]	; (8009f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	099b      	lsrs	r3, r3, #6
 8009e58:	2200      	movs	r2, #0
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	4611      	mov	r1, r2
 8009e5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009e62:	623b      	str	r3, [r7, #32]
 8009e64:	2300      	movs	r3, #0
 8009e66:	627b      	str	r3, [r7, #36]	; 0x24
 8009e68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009e6c:	4642      	mov	r2, r8
 8009e6e:	464b      	mov	r3, r9
 8009e70:	f04f 0000 	mov.w	r0, #0
 8009e74:	f04f 0100 	mov.w	r1, #0
 8009e78:	0159      	lsls	r1, r3, #5
 8009e7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009e7e:	0150      	lsls	r0, r2, #5
 8009e80:	4602      	mov	r2, r0
 8009e82:	460b      	mov	r3, r1
 8009e84:	4641      	mov	r1, r8
 8009e86:	ebb2 0a01 	subs.w	sl, r2, r1
 8009e8a:	4649      	mov	r1, r9
 8009e8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8009e90:	f04f 0200 	mov.w	r2, #0
 8009e94:	f04f 0300 	mov.w	r3, #0
 8009e98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009e9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009ea0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009ea4:	ebb2 040a 	subs.w	r4, r2, sl
 8009ea8:	eb63 050b 	sbc.w	r5, r3, fp
 8009eac:	f04f 0200 	mov.w	r2, #0
 8009eb0:	f04f 0300 	mov.w	r3, #0
 8009eb4:	00eb      	lsls	r3, r5, #3
 8009eb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009eba:	00e2      	lsls	r2, r4, #3
 8009ebc:	4614      	mov	r4, r2
 8009ebe:	461d      	mov	r5, r3
 8009ec0:	4643      	mov	r3, r8
 8009ec2:	18e3      	adds	r3, r4, r3
 8009ec4:	603b      	str	r3, [r7, #0]
 8009ec6:	464b      	mov	r3, r9
 8009ec8:	eb45 0303 	adc.w	r3, r5, r3
 8009ecc:	607b      	str	r3, [r7, #4]
 8009ece:	f04f 0200 	mov.w	r2, #0
 8009ed2:	f04f 0300 	mov.w	r3, #0
 8009ed6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009eda:	4629      	mov	r1, r5
 8009edc:	028b      	lsls	r3, r1, #10
 8009ede:	4621      	mov	r1, r4
 8009ee0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009ee4:	4621      	mov	r1, r4
 8009ee6:	028a      	lsls	r2, r1, #10
 8009ee8:	4610      	mov	r0, r2
 8009eea:	4619      	mov	r1, r3
 8009eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009eee:	2200      	movs	r2, #0
 8009ef0:	61bb      	str	r3, [r7, #24]
 8009ef2:	61fa      	str	r2, [r7, #28]
 8009ef4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009ef8:	f7f6 fe72 	bl	8000be0 <__aeabi_uldivmod>
 8009efc:	4602      	mov	r2, r0
 8009efe:	460b      	mov	r3, r1
 8009f00:	4613      	mov	r3, r2
 8009f02:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009f04:	4b0b      	ldr	r3, [pc, #44]	; (8009f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	0c1b      	lsrs	r3, r3, #16
 8009f0a:	f003 0303 	and.w	r3, r3, #3
 8009f0e:	3301      	adds	r3, #1
 8009f10:	005b      	lsls	r3, r3, #1
 8009f12:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009f14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009f1e:	e002      	b.n	8009f26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009f20:	4b05      	ldr	r3, [pc, #20]	; (8009f38 <HAL_RCC_GetSysClockFreq+0x204>)
 8009f22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009f24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3750      	adds	r7, #80	; 0x50
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f32:	bf00      	nop
 8009f34:	40023800 	.word	0x40023800
 8009f38:	00f42400 	.word	0x00f42400
 8009f3c:	007a1200 	.word	0x007a1200

08009f40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009f40:	b480      	push	{r7}
 8009f42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009f44:	4b03      	ldr	r3, [pc, #12]	; (8009f54 <HAL_RCC_GetHCLKFreq+0x14>)
 8009f46:	681b      	ldr	r3, [r3, #0]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr
 8009f52:	bf00      	nop
 8009f54:	20000234 	.word	0x20000234

08009f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009f5c:	f7ff fff0 	bl	8009f40 <HAL_RCC_GetHCLKFreq>
 8009f60:	4602      	mov	r2, r0
 8009f62:	4b05      	ldr	r3, [pc, #20]	; (8009f78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	0a9b      	lsrs	r3, r3, #10
 8009f68:	f003 0307 	and.w	r3, r3, #7
 8009f6c:	4903      	ldr	r1, [pc, #12]	; (8009f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009f6e:	5ccb      	ldrb	r3, [r1, r3]
 8009f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	40023800 	.word	0x40023800
 8009f7c:	0800f5f4 	.word	0x0800f5f4

08009f80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009f84:	f7ff ffdc 	bl	8009f40 <HAL_RCC_GetHCLKFreq>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	4b05      	ldr	r3, [pc, #20]	; (8009fa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	0b5b      	lsrs	r3, r3, #13
 8009f90:	f003 0307 	and.w	r3, r3, #7
 8009f94:	4903      	ldr	r1, [pc, #12]	; (8009fa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009f96:	5ccb      	ldrb	r3, [r1, r3]
 8009f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	40023800 	.word	0x40023800
 8009fa4:	0800f5f4 	.word	0x0800f5f4

08009fa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d101      	bne.n	8009fba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e04c      	b.n	800a054 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d111      	bne.n	8009fea <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f001 fbb2 	bl	800b738 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d102      	bne.n	8009fe2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4a1f      	ldr	r2, [pc, #124]	; (800a05c <HAL_TIM_Base_Init+0xb4>)
 8009fe0:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2202      	movs	r2, #2
 8009fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	3304      	adds	r3, #4
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	4610      	mov	r0, r2
 8009ffe:	f001 f8cf 	bl	800b1a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2201      	movs	r2, #1
 800a006:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2201      	movs	r2, #1
 800a00e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2201      	movs	r2, #1
 800a016:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2201      	movs	r2, #1
 800a01e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2201      	movs	r2, #1
 800a026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2201      	movs	r2, #1
 800a02e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2201      	movs	r2, #1
 800a036:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2201      	movs	r2, #1
 800a03e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2201      	movs	r2, #1
 800a046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2201      	movs	r2, #1
 800a04e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3708      	adds	r7, #8
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	08004f61 	.word	0x08004f61

0800a060 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a060:	b480      	push	{r7}
 800a062:	b085      	sub	sp, #20
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a06e:	b2db      	uxtb	r3, r3
 800a070:	2b01      	cmp	r3, #1
 800a072:	d001      	beq.n	800a078 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a074:	2301      	movs	r3, #1
 800a076:	e044      	b.n	800a102 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2202      	movs	r2, #2
 800a07c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	68da      	ldr	r2, [r3, #12]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f042 0201 	orr.w	r2, r2, #1
 800a08e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a1e      	ldr	r2, [pc, #120]	; (800a110 <HAL_TIM_Base_Start_IT+0xb0>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d018      	beq.n	800a0cc <HAL_TIM_Base_Start_IT+0x6c>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0a2:	d013      	beq.n	800a0cc <HAL_TIM_Base_Start_IT+0x6c>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a1a      	ldr	r2, [pc, #104]	; (800a114 <HAL_TIM_Base_Start_IT+0xb4>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d00e      	beq.n	800a0cc <HAL_TIM_Base_Start_IT+0x6c>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a19      	ldr	r2, [pc, #100]	; (800a118 <HAL_TIM_Base_Start_IT+0xb8>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d009      	beq.n	800a0cc <HAL_TIM_Base_Start_IT+0x6c>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a17      	ldr	r2, [pc, #92]	; (800a11c <HAL_TIM_Base_Start_IT+0xbc>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d004      	beq.n	800a0cc <HAL_TIM_Base_Start_IT+0x6c>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a16      	ldr	r2, [pc, #88]	; (800a120 <HAL_TIM_Base_Start_IT+0xc0>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d111      	bne.n	800a0f0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	f003 0307 	and.w	r3, r3, #7
 800a0d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2b06      	cmp	r3, #6
 800a0dc:	d010      	beq.n	800a100 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f042 0201 	orr.w	r2, r2, #1
 800a0ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0ee:	e007      	b.n	800a100 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f042 0201 	orr.w	r2, r2, #1
 800a0fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3714      	adds	r7, #20
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr
 800a10e:	bf00      	nop
 800a110:	40010000 	.word	0x40010000
 800a114:	40000400 	.word	0x40000400
 800a118:	40000800 	.word	0x40000800
 800a11c:	40000c00 	.word	0x40000c00
 800a120:	40014000 	.word	0x40014000

0800a124 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d101      	bne.n	800a136 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a132:	2301      	movs	r3, #1
 800a134:	e04c      	b.n	800a1d0 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d111      	bne.n	800a166 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2200      	movs	r2, #0
 800a146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f001 faf4 	bl	800b738 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a154:	2b00      	cmp	r3, #0
 800a156:	d102      	bne.n	800a15e <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	4a1f      	ldr	r2, [pc, #124]	; (800a1d8 <HAL_TIM_OC_Init+0xb4>)
 800a15c:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2202      	movs	r2, #2
 800a16a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	3304      	adds	r3, #4
 800a176:	4619      	mov	r1, r3
 800a178:	4610      	mov	r0, r2
 800a17a:	f001 f811 	bl	800b1a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2201      	movs	r2, #1
 800a182:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2201      	movs	r2, #1
 800a18a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2201      	movs	r2, #1
 800a192:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2201      	movs	r2, #1
 800a19a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a1ce:	2300      	movs	r3, #0
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3708      	adds	r7, #8
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	0800a1dd 	.word	0x0800a1dd

0800a1dc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a1e4:	bf00      	nop
 800a1e6:	370c      	adds	r7, #12
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr

0800a1f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d101      	bne.n	800a202 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a1fe:	2301      	movs	r3, #1
 800a200:	e04c      	b.n	800a29c <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a208:	b2db      	uxtb	r3, r3
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d111      	bne.n	800a232 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f001 fa8e 	bl	800b738 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a220:	2b00      	cmp	r3, #0
 800a222:	d102      	bne.n	800a22a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	4a1f      	ldr	r2, [pc, #124]	; (800a2a4 <HAL_TIM_PWM_Init+0xb4>)
 800a228:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2202      	movs	r2, #2
 800a236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	3304      	adds	r3, #4
 800a242:	4619      	mov	r1, r3
 800a244:	4610      	mov	r0, r2
 800a246:	f000 ffab 	bl	800b1a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2201      	movs	r2, #1
 800a24e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2201      	movs	r2, #1
 800a256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2201      	movs	r2, #1
 800a25e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2201      	movs	r2, #1
 800a266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2201      	movs	r2, #1
 800a26e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2201      	movs	r2, #1
 800a276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2201      	movs	r2, #1
 800a27e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2201      	movs	r2, #1
 800a286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2201      	movs	r2, #1
 800a28e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2201      	movs	r2, #1
 800a296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3708      	adds	r7, #8
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}
 800a2a4:	0800a2a9 	.word	0x0800a2a9

0800a2a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a2b0:	bf00      	nop
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d109      	bne.n	800a2e0 <HAL_TIM_PWM_Start+0x24>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	bf14      	ite	ne
 800a2d8:	2301      	movne	r3, #1
 800a2da:	2300      	moveq	r3, #0
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	e022      	b.n	800a326 <HAL_TIM_PWM_Start+0x6a>
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	2b04      	cmp	r3, #4
 800a2e4:	d109      	bne.n	800a2fa <HAL_TIM_PWM_Start+0x3e>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a2ec:	b2db      	uxtb	r3, r3
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	bf14      	ite	ne
 800a2f2:	2301      	movne	r3, #1
 800a2f4:	2300      	moveq	r3, #0
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	e015      	b.n	800a326 <HAL_TIM_PWM_Start+0x6a>
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	2b08      	cmp	r3, #8
 800a2fe:	d109      	bne.n	800a314 <HAL_TIM_PWM_Start+0x58>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a306:	b2db      	uxtb	r3, r3
 800a308:	2b01      	cmp	r3, #1
 800a30a:	bf14      	ite	ne
 800a30c:	2301      	movne	r3, #1
 800a30e:	2300      	moveq	r3, #0
 800a310:	b2db      	uxtb	r3, r3
 800a312:	e008      	b.n	800a326 <HAL_TIM_PWM_Start+0x6a>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	bf14      	ite	ne
 800a320:	2301      	movne	r3, #1
 800a322:	2300      	moveq	r3, #0
 800a324:	b2db      	uxtb	r3, r3
 800a326:	2b00      	cmp	r3, #0
 800a328:	d001      	beq.n	800a32e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	e068      	b.n	800a400 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d104      	bne.n	800a33e <HAL_TIM_PWM_Start+0x82>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2202      	movs	r2, #2
 800a338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a33c:	e013      	b.n	800a366 <HAL_TIM_PWM_Start+0xaa>
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	2b04      	cmp	r3, #4
 800a342:	d104      	bne.n	800a34e <HAL_TIM_PWM_Start+0x92>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2202      	movs	r2, #2
 800a348:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a34c:	e00b      	b.n	800a366 <HAL_TIM_PWM_Start+0xaa>
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	2b08      	cmp	r3, #8
 800a352:	d104      	bne.n	800a35e <HAL_TIM_PWM_Start+0xa2>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2202      	movs	r2, #2
 800a358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a35c:	e003      	b.n	800a366 <HAL_TIM_PWM_Start+0xaa>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2202      	movs	r2, #2
 800a362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2201      	movs	r2, #1
 800a36c:	6839      	ldr	r1, [r7, #0]
 800a36e:	4618      	mov	r0, r3
 800a370:	f001 f9bc 	bl	800b6ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a23      	ldr	r2, [pc, #140]	; (800a408 <HAL_TIM_PWM_Start+0x14c>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d107      	bne.n	800a38e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a38c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a1d      	ldr	r2, [pc, #116]	; (800a408 <HAL_TIM_PWM_Start+0x14c>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d018      	beq.n	800a3ca <HAL_TIM_PWM_Start+0x10e>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3a0:	d013      	beq.n	800a3ca <HAL_TIM_PWM_Start+0x10e>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4a19      	ldr	r2, [pc, #100]	; (800a40c <HAL_TIM_PWM_Start+0x150>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d00e      	beq.n	800a3ca <HAL_TIM_PWM_Start+0x10e>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a17      	ldr	r2, [pc, #92]	; (800a410 <HAL_TIM_PWM_Start+0x154>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d009      	beq.n	800a3ca <HAL_TIM_PWM_Start+0x10e>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a16      	ldr	r2, [pc, #88]	; (800a414 <HAL_TIM_PWM_Start+0x158>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d004      	beq.n	800a3ca <HAL_TIM_PWM_Start+0x10e>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4a14      	ldr	r2, [pc, #80]	; (800a418 <HAL_TIM_PWM_Start+0x15c>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d111      	bne.n	800a3ee <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	689b      	ldr	r3, [r3, #8]
 800a3d0:	f003 0307 	and.w	r3, r3, #7
 800a3d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2b06      	cmp	r3, #6
 800a3da:	d010      	beq.n	800a3fe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f042 0201 	orr.w	r2, r2, #1
 800a3ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3ec:	e007      	b.n	800a3fe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f042 0201 	orr.w	r2, r2, #1
 800a3fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a3fe:	2300      	movs	r3, #0
}
 800a400:	4618      	mov	r0, r3
 800a402:	3710      	adds	r7, #16
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}
 800a408:	40010000 	.word	0x40010000
 800a40c:	40000400 	.word	0x40000400
 800a410:	40000800 	.word	0x40000800
 800a414:	40000c00 	.word	0x40000c00
 800a418:	40014000 	.word	0x40014000

0800a41c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d101      	bne.n	800a430 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	e04c      	b.n	800a4ca <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a436:	b2db      	uxtb	r3, r3
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d111      	bne.n	800a460 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f001 f977 	bl	800b738 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d102      	bne.n	800a458 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4a1f      	ldr	r2, [pc, #124]	; (800a4d4 <HAL_TIM_OnePulse_Init+0xb8>)
 800a456:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2202      	movs	r2, #2
 800a464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	3304      	adds	r3, #4
 800a470:	4619      	mov	r1, r3
 800a472:	4610      	mov	r0, r2
 800a474:	f000 fe94 	bl	800b1a0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f022 0208 	bic.w	r2, r2, #8
 800a486:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	6819      	ldr	r1, [r3, #0]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	683a      	ldr	r2, [r7, #0]
 800a494:	430a      	orrs	r2, r1
 800a496:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a4c8:	2300      	movs	r3, #0
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3708      	adds	r7, #8
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	0800a4d9 	.word	0x0800a4d9

0800a4d8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800a4e0:	bf00      	nop
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a4fc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a504:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a50c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a514:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a516:	7bfb      	ldrb	r3, [r7, #15]
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d108      	bne.n	800a52e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a51c:	7bbb      	ldrb	r3, [r7, #14]
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d105      	bne.n	800a52e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a522:	7b7b      	ldrb	r3, [r7, #13]
 800a524:	2b01      	cmp	r3, #1
 800a526:	d102      	bne.n	800a52e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a528:	7b3b      	ldrb	r3, [r7, #12]
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d001      	beq.n	800a532 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800a52e:	2301      	movs	r3, #1
 800a530:	e03b      	b.n	800a5aa <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2202      	movs	r2, #2
 800a536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2202      	movs	r2, #2
 800a53e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2202      	movs	r2, #2
 800a546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2202      	movs	r2, #2
 800a54e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	68da      	ldr	r2, [r3, #12]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f042 0202 	orr.w	r2, r2, #2
 800a560:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	68da      	ldr	r2, [r3, #12]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f042 0204 	orr.w	r2, r2, #4
 800a570:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	2201      	movs	r2, #1
 800a578:	2100      	movs	r1, #0
 800a57a:	4618      	mov	r0, r3
 800a57c:	f001 f8b6 	bl	800b6ec <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2201      	movs	r2, #1
 800a586:	2104      	movs	r1, #4
 800a588:	4618      	mov	r0, r3
 800a58a:	f001 f8af 	bl	800b6ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a08      	ldr	r2, [pc, #32]	; (800a5b4 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d107      	bne.n	800a5a8 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a5a6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800a5a8:	2300      	movs	r3, #0
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3710      	adds	r7, #16
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	40010000 	.word	0x40010000

0800a5b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d101      	bne.n	800a5cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	e0a2      	b.n	800a712 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d111      	bne.n	800a5fc <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f001 f8a9 	bl	800b738 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d102      	bne.n	800a5f4 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	4a4a      	ldr	r2, [pc, #296]	; (800a71c <HAL_TIM_Encoder_Init+0x164>)
 800a5f2:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2202      	movs	r2, #2
 800a600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	687a      	ldr	r2, [r7, #4]
 800a60c:	6812      	ldr	r2, [r2, #0]
 800a60e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a612:	f023 0307 	bic.w	r3, r3, #7
 800a616:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	3304      	adds	r3, #4
 800a620:	4619      	mov	r1, r3
 800a622:	4610      	mov	r0, r2
 800a624:	f000 fdbc 	bl	800b1a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	699b      	ldr	r3, [r3, #24]
 800a636:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	6a1b      	ldr	r3, [r3, #32]
 800a63e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	697a      	ldr	r2, [r7, #20]
 800a646:	4313      	orrs	r3, r2
 800a648:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a650:	f023 0303 	bic.w	r3, r3, #3
 800a654:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	689a      	ldr	r2, [r3, #8]
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	699b      	ldr	r3, [r3, #24]
 800a65e:	021b      	lsls	r3, r3, #8
 800a660:	4313      	orrs	r3, r2
 800a662:	693a      	ldr	r2, [r7, #16]
 800a664:	4313      	orrs	r3, r2
 800a666:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a66e:	f023 030c 	bic.w	r3, r3, #12
 800a672:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a67a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a67e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	68da      	ldr	r2, [r3, #12]
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	69db      	ldr	r3, [r3, #28]
 800a688:	021b      	lsls	r3, r3, #8
 800a68a:	4313      	orrs	r3, r2
 800a68c:	693a      	ldr	r2, [r7, #16]
 800a68e:	4313      	orrs	r3, r2
 800a690:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	691b      	ldr	r3, [r3, #16]
 800a696:	011a      	lsls	r2, r3, #4
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	6a1b      	ldr	r3, [r3, #32]
 800a69c:	031b      	lsls	r3, r3, #12
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	693a      	ldr	r2, [r7, #16]
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a6ac:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a6b4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	685a      	ldr	r2, [r3, #4]
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	695b      	ldr	r3, [r3, #20]
 800a6be:	011b      	lsls	r3, r3, #4
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	68fa      	ldr	r2, [r7, #12]
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	697a      	ldr	r2, [r7, #20]
 800a6ce:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	693a      	ldr	r2, [r7, #16]
 800a6d6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	68fa      	ldr	r2, [r7, #12]
 800a6de:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2201      	movs	r2, #1
 800a70c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3718      	adds	r7, #24
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	08004ec5 	.word	0x08004ec5

0800a720 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a730:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a738:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a740:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a748:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d110      	bne.n	800a772 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a750:	7bfb      	ldrb	r3, [r7, #15]
 800a752:	2b01      	cmp	r3, #1
 800a754:	d102      	bne.n	800a75c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a756:	7b7b      	ldrb	r3, [r7, #13]
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d001      	beq.n	800a760 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a75c:	2301      	movs	r3, #1
 800a75e:	e069      	b.n	800a834 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2202      	movs	r2, #2
 800a764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2202      	movs	r2, #2
 800a76c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a770:	e031      	b.n	800a7d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	2b04      	cmp	r3, #4
 800a776:	d110      	bne.n	800a79a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a778:	7bbb      	ldrb	r3, [r7, #14]
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d102      	bne.n	800a784 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a77e:	7b3b      	ldrb	r3, [r7, #12]
 800a780:	2b01      	cmp	r3, #1
 800a782:	d001      	beq.n	800a788 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a784:	2301      	movs	r3, #1
 800a786:	e055      	b.n	800a834 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2202      	movs	r2, #2
 800a78c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2202      	movs	r2, #2
 800a794:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a798:	e01d      	b.n	800a7d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a79a:	7bfb      	ldrb	r3, [r7, #15]
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d108      	bne.n	800a7b2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a7a0:	7bbb      	ldrb	r3, [r7, #14]
 800a7a2:	2b01      	cmp	r3, #1
 800a7a4:	d105      	bne.n	800a7b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a7a6:	7b7b      	ldrb	r3, [r7, #13]
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d102      	bne.n	800a7b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a7ac:	7b3b      	ldrb	r3, [r7, #12]
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d001      	beq.n	800a7b6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	e03e      	b.n	800a834 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2202      	movs	r2, #2
 800a7ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2202      	movs	r2, #2
 800a7c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2202      	movs	r2, #2
 800a7ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2202      	movs	r2, #2
 800a7d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d003      	beq.n	800a7e4 <HAL_TIM_Encoder_Start+0xc4>
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	2b04      	cmp	r3, #4
 800a7e0:	d008      	beq.n	800a7f4 <HAL_TIM_Encoder_Start+0xd4>
 800a7e2:	e00f      	b.n	800a804 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	2100      	movs	r1, #0
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f000 ff7d 	bl	800b6ec <TIM_CCxChannelCmd>
      break;
 800a7f2:	e016      	b.n	800a822 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	2201      	movs	r2, #1
 800a7fa:	2104      	movs	r1, #4
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f000 ff75 	bl	800b6ec <TIM_CCxChannelCmd>
      break;
 800a802:	e00e      	b.n	800a822 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	2201      	movs	r2, #1
 800a80a:	2100      	movs	r1, #0
 800a80c:	4618      	mov	r0, r3
 800a80e:	f000 ff6d 	bl	800b6ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	2201      	movs	r2, #1
 800a818:	2104      	movs	r1, #4
 800a81a:	4618      	mov	r0, r3
 800a81c:	f000 ff66 	bl	800b6ec <TIM_CCxChannelCmd>
      break;
 800a820:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f042 0201 	orr.w	r2, r2, #1
 800a830:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a832:	2300      	movs	r3, #0
}
 800a834:	4618      	mov	r0, r3
 800a836:	3710      	adds	r7, #16
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b082      	sub	sp, #8
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	691b      	ldr	r3, [r3, #16]
 800a84a:	f003 0302 	and.w	r3, r3, #2
 800a84e:	2b02      	cmp	r3, #2
 800a850:	d128      	bne.n	800a8a4 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	68db      	ldr	r3, [r3, #12]
 800a858:	f003 0302 	and.w	r3, r3, #2
 800a85c:	2b02      	cmp	r3, #2
 800a85e:	d121      	bne.n	800a8a4 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f06f 0202 	mvn.w	r2, #2
 800a868:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2201      	movs	r2, #1
 800a86e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	699b      	ldr	r3, [r3, #24]
 800a876:	f003 0303 	and.w	r3, r3, #3
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d005      	beq.n	800a88a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	4798      	blx	r3
 800a888:	e009      	b.n	800a89e <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	691b      	ldr	r3, [r3, #16]
 800a8aa:	f003 0304 	and.w	r3, r3, #4
 800a8ae:	2b04      	cmp	r3, #4
 800a8b0:	d128      	bne.n	800a904 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	68db      	ldr	r3, [r3, #12]
 800a8b8:	f003 0304 	and.w	r3, r3, #4
 800a8bc:	2b04      	cmp	r3, #4
 800a8be:	d121      	bne.n	800a904 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f06f 0204 	mvn.w	r2, #4
 800a8c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2202      	movs	r2, #2
 800a8ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	699b      	ldr	r3, [r3, #24]
 800a8d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d005      	beq.n	800a8ea <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	4798      	blx	r3
 800a8e8:	e009      	b.n	800a8fe <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2200      	movs	r2, #0
 800a902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	691b      	ldr	r3, [r3, #16]
 800a90a:	f003 0308 	and.w	r3, r3, #8
 800a90e:	2b08      	cmp	r3, #8
 800a910:	d128      	bne.n	800a964 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	68db      	ldr	r3, [r3, #12]
 800a918:	f003 0308 	and.w	r3, r3, #8
 800a91c:	2b08      	cmp	r3, #8
 800a91e:	d121      	bne.n	800a964 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f06f 0208 	mvn.w	r2, #8
 800a928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2204      	movs	r2, #4
 800a92e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	69db      	ldr	r3, [r3, #28]
 800a936:	f003 0303 	and.w	r3, r3, #3
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d005      	beq.n	800a94a <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	4798      	blx	r3
 800a948:	e009      	b.n	800a95e <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2200      	movs	r2, #0
 800a962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	691b      	ldr	r3, [r3, #16]
 800a96a:	f003 0310 	and.w	r3, r3, #16
 800a96e:	2b10      	cmp	r3, #16
 800a970:	d128      	bne.n	800a9c4 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	68db      	ldr	r3, [r3, #12]
 800a978:	f003 0310 	and.w	r3, r3, #16
 800a97c:	2b10      	cmp	r3, #16
 800a97e:	d121      	bne.n	800a9c4 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f06f 0210 	mvn.w	r2, #16
 800a988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2208      	movs	r2, #8
 800a98e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	69db      	ldr	r3, [r3, #28]
 800a996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d005      	beq.n	800a9aa <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	4798      	blx	r3
 800a9a8:	e009      	b.n	800a9be <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	691b      	ldr	r3, [r3, #16]
 800a9ca:	f003 0301 	and.w	r3, r3, #1
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d110      	bne.n	800a9f4 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	f003 0301 	and.w	r3, r3, #1
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d109      	bne.n	800a9f4 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f06f 0201 	mvn.w	r2, #1
 800a9e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	691b      	ldr	r3, [r3, #16]
 800a9fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9fe:	2b80      	cmp	r3, #128	; 0x80
 800aa00:	d110      	bne.n	800aa24 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	68db      	ldr	r3, [r3, #12]
 800aa08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa0c:	2b80      	cmp	r3, #128	; 0x80
 800aa0e:	d109      	bne.n	800aa24 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aa18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	691b      	ldr	r3, [r3, #16]
 800aa2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa2e:	2b40      	cmp	r3, #64	; 0x40
 800aa30:	d110      	bne.n	800aa54 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	68db      	ldr	r3, [r3, #12]
 800aa38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa3c:	2b40      	cmp	r3, #64	; 0x40
 800aa3e:	d109      	bne.n	800aa54 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aa48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	691b      	ldr	r3, [r3, #16]
 800aa5a:	f003 0320 	and.w	r3, r3, #32
 800aa5e:	2b20      	cmp	r3, #32
 800aa60:	d110      	bne.n	800aa84 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	f003 0320 	and.w	r3, r3, #32
 800aa6c:	2b20      	cmp	r3, #32
 800aa6e:	d109      	bne.n	800aa84 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f06f 0220 	mvn.w	r2, #32
 800aa78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa84:	bf00      	nop
 800aa86:	3708      	adds	r7, #8
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b086      	sub	sp, #24
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	60f8      	str	r0, [r7, #12]
 800aa94:	60b9      	str	r1, [r7, #8]
 800aa96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d101      	bne.n	800aaaa <HAL_TIM_OC_ConfigChannel+0x1e>
 800aaa6:	2302      	movs	r3, #2
 800aaa8:	e048      	b.n	800ab3c <HAL_TIM_OC_ConfigChannel+0xb0>
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2201      	movs	r2, #1
 800aaae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2b0c      	cmp	r3, #12
 800aab6:	d839      	bhi.n	800ab2c <HAL_TIM_OC_ConfigChannel+0xa0>
 800aab8:	a201      	add	r2, pc, #4	; (adr r2, 800aac0 <HAL_TIM_OC_ConfigChannel+0x34>)
 800aaba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aabe:	bf00      	nop
 800aac0:	0800aaf5 	.word	0x0800aaf5
 800aac4:	0800ab2d 	.word	0x0800ab2d
 800aac8:	0800ab2d 	.word	0x0800ab2d
 800aacc:	0800ab2d 	.word	0x0800ab2d
 800aad0:	0800ab03 	.word	0x0800ab03
 800aad4:	0800ab2d 	.word	0x0800ab2d
 800aad8:	0800ab2d 	.word	0x0800ab2d
 800aadc:	0800ab2d 	.word	0x0800ab2d
 800aae0:	0800ab11 	.word	0x0800ab11
 800aae4:	0800ab2d 	.word	0x0800ab2d
 800aae8:	0800ab2d 	.word	0x0800ab2d
 800aaec:	0800ab2d 	.word	0x0800ab2d
 800aaf0:	0800ab1f 	.word	0x0800ab1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	68b9      	ldr	r1, [r7, #8]
 800aafa:	4618      	mov	r0, r3
 800aafc:	f000 fbd0 	bl	800b2a0 <TIM_OC1_SetConfig>
      break;
 800ab00:	e017      	b.n	800ab32 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	68b9      	ldr	r1, [r7, #8]
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f000 fc2f 	bl	800b36c <TIM_OC2_SetConfig>
      break;
 800ab0e:	e010      	b.n	800ab32 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	68b9      	ldr	r1, [r7, #8]
 800ab16:	4618      	mov	r0, r3
 800ab18:	f000 fc94 	bl	800b444 <TIM_OC3_SetConfig>
      break;
 800ab1c:	e009      	b.n	800ab32 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	68b9      	ldr	r1, [r7, #8]
 800ab24:	4618      	mov	r0, r3
 800ab26:	f000 fcf7 	bl	800b518 <TIM_OC4_SetConfig>
      break;
 800ab2a:	e002      	b.n	800ab32 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	75fb      	strb	r3, [r7, #23]
      break;
 800ab30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2200      	movs	r2, #0
 800ab36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ab3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3718      	adds	r7, #24
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b086      	sub	sp, #24
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab50:	2300      	movs	r3, #0
 800ab52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d101      	bne.n	800ab62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ab5e:	2302      	movs	r3, #2
 800ab60:	e0ae      	b.n	800acc0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	2201      	movs	r2, #1
 800ab66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2b0c      	cmp	r3, #12
 800ab6e:	f200 809f 	bhi.w	800acb0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800ab72:	a201      	add	r2, pc, #4	; (adr r2, 800ab78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ab74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab78:	0800abad 	.word	0x0800abad
 800ab7c:	0800acb1 	.word	0x0800acb1
 800ab80:	0800acb1 	.word	0x0800acb1
 800ab84:	0800acb1 	.word	0x0800acb1
 800ab88:	0800abed 	.word	0x0800abed
 800ab8c:	0800acb1 	.word	0x0800acb1
 800ab90:	0800acb1 	.word	0x0800acb1
 800ab94:	0800acb1 	.word	0x0800acb1
 800ab98:	0800ac2f 	.word	0x0800ac2f
 800ab9c:	0800acb1 	.word	0x0800acb1
 800aba0:	0800acb1 	.word	0x0800acb1
 800aba4:	0800acb1 	.word	0x0800acb1
 800aba8:	0800ac6f 	.word	0x0800ac6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	68b9      	ldr	r1, [r7, #8]
 800abb2:	4618      	mov	r0, r3
 800abb4:	f000 fb74 	bl	800b2a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	699a      	ldr	r2, [r3, #24]
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f042 0208 	orr.w	r2, r2, #8
 800abc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	699a      	ldr	r2, [r3, #24]
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f022 0204 	bic.w	r2, r2, #4
 800abd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	6999      	ldr	r1, [r3, #24]
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	691a      	ldr	r2, [r3, #16]
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	430a      	orrs	r2, r1
 800abe8:	619a      	str	r2, [r3, #24]
      break;
 800abea:	e064      	b.n	800acb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	68b9      	ldr	r1, [r7, #8]
 800abf2:	4618      	mov	r0, r3
 800abf4:	f000 fbba 	bl	800b36c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	699a      	ldr	r2, [r3, #24]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	699a      	ldr	r2, [r3, #24]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	6999      	ldr	r1, [r3, #24]
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	691b      	ldr	r3, [r3, #16]
 800ac22:	021a      	lsls	r2, r3, #8
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	430a      	orrs	r2, r1
 800ac2a:	619a      	str	r2, [r3, #24]
      break;
 800ac2c:	e043      	b.n	800acb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	68b9      	ldr	r1, [r7, #8]
 800ac34:	4618      	mov	r0, r3
 800ac36:	f000 fc05 	bl	800b444 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	69da      	ldr	r2, [r3, #28]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f042 0208 	orr.w	r2, r2, #8
 800ac48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	69da      	ldr	r2, [r3, #28]
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f022 0204 	bic.w	r2, r2, #4
 800ac58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	69d9      	ldr	r1, [r3, #28]
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	691a      	ldr	r2, [r3, #16]
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	430a      	orrs	r2, r1
 800ac6a:	61da      	str	r2, [r3, #28]
      break;
 800ac6c:	e023      	b.n	800acb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	68b9      	ldr	r1, [r7, #8]
 800ac74:	4618      	mov	r0, r3
 800ac76:	f000 fc4f 	bl	800b518 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	69da      	ldr	r2, [r3, #28]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	69da      	ldr	r2, [r3, #28]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	69d9      	ldr	r1, [r3, #28]
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	691b      	ldr	r3, [r3, #16]
 800aca4:	021a      	lsls	r2, r3, #8
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	430a      	orrs	r2, r1
 800acac:	61da      	str	r2, [r3, #28]
      break;
 800acae:	e002      	b.n	800acb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800acb0:	2301      	movs	r3, #1
 800acb2:	75fb      	strb	r3, [r7, #23]
      break;
 800acb4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2200      	movs	r2, #0
 800acba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800acbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3718      	adds	r7, #24
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800acd2:	2300      	movs	r3, #0
 800acd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d101      	bne.n	800ace4 <HAL_TIM_ConfigClockSource+0x1c>
 800ace0:	2302      	movs	r3, #2
 800ace2:	e0b4      	b.n	800ae4e <HAL_TIM_ConfigClockSource+0x186>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2201      	movs	r2, #1
 800ace8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2202      	movs	r2, #2
 800acf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	689b      	ldr	r3, [r3, #8]
 800acfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ad02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ad0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	68ba      	ldr	r2, [r7, #8]
 800ad12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad1c:	d03e      	beq.n	800ad9c <HAL_TIM_ConfigClockSource+0xd4>
 800ad1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad22:	f200 8087 	bhi.w	800ae34 <HAL_TIM_ConfigClockSource+0x16c>
 800ad26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad2a:	f000 8086 	beq.w	800ae3a <HAL_TIM_ConfigClockSource+0x172>
 800ad2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad32:	d87f      	bhi.n	800ae34 <HAL_TIM_ConfigClockSource+0x16c>
 800ad34:	2b70      	cmp	r3, #112	; 0x70
 800ad36:	d01a      	beq.n	800ad6e <HAL_TIM_ConfigClockSource+0xa6>
 800ad38:	2b70      	cmp	r3, #112	; 0x70
 800ad3a:	d87b      	bhi.n	800ae34 <HAL_TIM_ConfigClockSource+0x16c>
 800ad3c:	2b60      	cmp	r3, #96	; 0x60
 800ad3e:	d050      	beq.n	800ade2 <HAL_TIM_ConfigClockSource+0x11a>
 800ad40:	2b60      	cmp	r3, #96	; 0x60
 800ad42:	d877      	bhi.n	800ae34 <HAL_TIM_ConfigClockSource+0x16c>
 800ad44:	2b50      	cmp	r3, #80	; 0x50
 800ad46:	d03c      	beq.n	800adc2 <HAL_TIM_ConfigClockSource+0xfa>
 800ad48:	2b50      	cmp	r3, #80	; 0x50
 800ad4a:	d873      	bhi.n	800ae34 <HAL_TIM_ConfigClockSource+0x16c>
 800ad4c:	2b40      	cmp	r3, #64	; 0x40
 800ad4e:	d058      	beq.n	800ae02 <HAL_TIM_ConfigClockSource+0x13a>
 800ad50:	2b40      	cmp	r3, #64	; 0x40
 800ad52:	d86f      	bhi.n	800ae34 <HAL_TIM_ConfigClockSource+0x16c>
 800ad54:	2b30      	cmp	r3, #48	; 0x30
 800ad56:	d064      	beq.n	800ae22 <HAL_TIM_ConfigClockSource+0x15a>
 800ad58:	2b30      	cmp	r3, #48	; 0x30
 800ad5a:	d86b      	bhi.n	800ae34 <HAL_TIM_ConfigClockSource+0x16c>
 800ad5c:	2b20      	cmp	r3, #32
 800ad5e:	d060      	beq.n	800ae22 <HAL_TIM_ConfigClockSource+0x15a>
 800ad60:	2b20      	cmp	r3, #32
 800ad62:	d867      	bhi.n	800ae34 <HAL_TIM_ConfigClockSource+0x16c>
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d05c      	beq.n	800ae22 <HAL_TIM_ConfigClockSource+0x15a>
 800ad68:	2b10      	cmp	r3, #16
 800ad6a:	d05a      	beq.n	800ae22 <HAL_TIM_ConfigClockSource+0x15a>
 800ad6c:	e062      	b.n	800ae34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6818      	ldr	r0, [r3, #0]
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	6899      	ldr	r1, [r3, #8]
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	685a      	ldr	r2, [r3, #4]
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	68db      	ldr	r3, [r3, #12]
 800ad7e:	f000 fc95 	bl	800b6ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	689b      	ldr	r3, [r3, #8]
 800ad88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ad90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	68ba      	ldr	r2, [r7, #8]
 800ad98:	609a      	str	r2, [r3, #8]
      break;
 800ad9a:	e04f      	b.n	800ae3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6818      	ldr	r0, [r3, #0]
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	6899      	ldr	r1, [r3, #8]
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	685a      	ldr	r2, [r3, #4]
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	68db      	ldr	r3, [r3, #12]
 800adac:	f000 fc7e 	bl	800b6ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	689a      	ldr	r2, [r3, #8]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800adbe:	609a      	str	r2, [r3, #8]
      break;
 800adc0:	e03c      	b.n	800ae3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6818      	ldr	r0, [r3, #0]
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	6859      	ldr	r1, [r3, #4]
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	68db      	ldr	r3, [r3, #12]
 800adce:	461a      	mov	r2, r3
 800add0:	f000 fbf2 	bl	800b5b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2150      	movs	r1, #80	; 0x50
 800adda:	4618      	mov	r0, r3
 800addc:	f000 fc4b 	bl	800b676 <TIM_ITRx_SetConfig>
      break;
 800ade0:	e02c      	b.n	800ae3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6818      	ldr	r0, [r3, #0]
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	6859      	ldr	r1, [r3, #4]
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	461a      	mov	r2, r3
 800adf0:	f000 fc11 	bl	800b616 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	2160      	movs	r1, #96	; 0x60
 800adfa:	4618      	mov	r0, r3
 800adfc:	f000 fc3b 	bl	800b676 <TIM_ITRx_SetConfig>
      break;
 800ae00:	e01c      	b.n	800ae3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6818      	ldr	r0, [r3, #0]
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	6859      	ldr	r1, [r3, #4]
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	461a      	mov	r2, r3
 800ae10:	f000 fbd2 	bl	800b5b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2140      	movs	r1, #64	; 0x40
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f000 fc2b 	bl	800b676 <TIM_ITRx_SetConfig>
      break;
 800ae20:	e00c      	b.n	800ae3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4619      	mov	r1, r3
 800ae2c:	4610      	mov	r0, r2
 800ae2e:	f000 fc22 	bl	800b676 <TIM_ITRx_SetConfig>
      break;
 800ae32:	e003      	b.n	800ae3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ae34:	2301      	movs	r3, #1
 800ae36:	73fb      	strb	r3, [r7, #15]
      break;
 800ae38:	e000      	b.n	800ae3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ae3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2201      	movs	r2, #1
 800ae40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2200      	movs	r2, #0
 800ae48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ae4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3710      	adds	r7, #16
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}

0800ae56 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ae56:	b480      	push	{r7}
 800ae58:	b083      	sub	sp, #12
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800ae5e:	bf00      	nop
 800ae60:	370c      	adds	r7, #12
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr

0800ae6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae6a:	b480      	push	{r7}
 800ae6c:	b083      	sub	sp, #12
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ae72:	bf00      	nop
 800ae74:	370c      	adds	r7, #12
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr

0800ae7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae7e:	b480      	push	{r7}
 800ae80:	b083      	sub	sp, #12
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ae86:	bf00      	nop
 800ae88:	370c      	adds	r7, #12
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr

0800ae92 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ae92:	b480      	push	{r7}
 800ae94:	b083      	sub	sp, #12
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800ae9a:	bf00      	nop
 800ae9c:	370c      	adds	r7, #12
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr

0800aea6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aea6:	b480      	push	{r7}
 800aea8:	b083      	sub	sp, #12
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aeae:	bf00      	nop
 800aeb0:	370c      	adds	r7, #12
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb8:	4770      	bx	lr

0800aeba <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800aeba:	b480      	push	{r7}
 800aebc:	b083      	sub	sp, #12
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800aec2:	bf00      	nop
 800aec4:	370c      	adds	r7, #12
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr

0800aece <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aece:	b480      	push	{r7}
 800aed0:	b083      	sub	sp, #12
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aed6:	bf00      	nop
 800aed8:	370c      	adds	r7, #12
 800aeda:	46bd      	mov	sp, r7
 800aedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee0:	4770      	bx	lr

0800aee2 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800aee2:	b480      	push	{r7}
 800aee4:	b083      	sub	sp, #12
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800aeea:	bf00      	nop
 800aeec:	370c      	adds	r7, #12
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr

0800aef6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800aef6:	b480      	push	{r7}
 800aef8:	b083      	sub	sp, #12
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800aefe:	bf00      	nop
 800af00:	370c      	adds	r7, #12
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr
	...

0800af0c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b087      	sub	sp, #28
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	460b      	mov	r3, r1
 800af16:	607a      	str	r2, [r7, #4]
 800af18:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800af1a:	2300      	movs	r3, #0
 800af1c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d101      	bne.n	800af28 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800af24:	2301      	movs	r3, #1
 800af26:	e135      	b.n	800b194 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d101      	bne.n	800af36 <HAL_TIM_RegisterCallback+0x2a>
 800af32:	2302      	movs	r3, #2
 800af34:	e12e      	b.n	800b194 <HAL_TIM_RegisterCallback+0x288>
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2201      	movs	r2, #1
 800af3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af44:	b2db      	uxtb	r3, r3
 800af46:	2b01      	cmp	r3, #1
 800af48:	f040 80ba 	bne.w	800b0c0 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 800af4c:	7afb      	ldrb	r3, [r7, #11]
 800af4e:	2b1a      	cmp	r3, #26
 800af50:	f200 80b3 	bhi.w	800b0ba <HAL_TIM_RegisterCallback+0x1ae>
 800af54:	a201      	add	r2, pc, #4	; (adr r2, 800af5c <HAL_TIM_RegisterCallback+0x50>)
 800af56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af5a:	bf00      	nop
 800af5c:	0800afc9 	.word	0x0800afc9
 800af60:	0800afd1 	.word	0x0800afd1
 800af64:	0800afd9 	.word	0x0800afd9
 800af68:	0800afe1 	.word	0x0800afe1
 800af6c:	0800afe9 	.word	0x0800afe9
 800af70:	0800aff1 	.word	0x0800aff1
 800af74:	0800aff9 	.word	0x0800aff9
 800af78:	0800b001 	.word	0x0800b001
 800af7c:	0800b009 	.word	0x0800b009
 800af80:	0800b011 	.word	0x0800b011
 800af84:	0800b019 	.word	0x0800b019
 800af88:	0800b021 	.word	0x0800b021
 800af8c:	0800b029 	.word	0x0800b029
 800af90:	0800b031 	.word	0x0800b031
 800af94:	0800b039 	.word	0x0800b039
 800af98:	0800b043 	.word	0x0800b043
 800af9c:	0800b04d 	.word	0x0800b04d
 800afa0:	0800b057 	.word	0x0800b057
 800afa4:	0800b061 	.word	0x0800b061
 800afa8:	0800b06b 	.word	0x0800b06b
 800afac:	0800b075 	.word	0x0800b075
 800afb0:	0800b07f 	.word	0x0800b07f
 800afb4:	0800b089 	.word	0x0800b089
 800afb8:	0800b093 	.word	0x0800b093
 800afbc:	0800b09d 	.word	0x0800b09d
 800afc0:	0800b0a7 	.word	0x0800b0a7
 800afc4:	0800b0b1 	.word	0x0800b0b1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	687a      	ldr	r2, [r7, #4]
 800afcc:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800afce:	e0dc      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800afd6:	e0d8      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800afde:	e0d4      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800afe6:	e0d0      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	687a      	ldr	r2, [r7, #4]
 800afec:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800afee:	e0cc      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800aff6:	e0c8      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	687a      	ldr	r2, [r7, #4]
 800affc:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800affe:	e0c4      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800b006:	e0c0      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	687a      	ldr	r2, [r7, #4]
 800b00c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800b00e:	e0bc      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	687a      	ldr	r2, [r7, #4]
 800b014:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800b016:	e0b8      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800b01e:	e0b4      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800b026:	e0b0      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	687a      	ldr	r2, [r7, #4]
 800b02c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800b02e:	e0ac      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800b036:	e0a8      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	687a      	ldr	r2, [r7, #4]
 800b03c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800b040:	e0a3      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	687a      	ldr	r2, [r7, #4]
 800b046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800b04a:	e09e      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800b054:	e099      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800b05e:	e094      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	687a      	ldr	r2, [r7, #4]
 800b064:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 800b068:	e08f      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	687a      	ldr	r2, [r7, #4]
 800b06e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800b072:	e08a      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	687a      	ldr	r2, [r7, #4]
 800b078:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 800b07c:	e085      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	687a      	ldr	r2, [r7, #4]
 800b082:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800b086:	e080      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	687a      	ldr	r2, [r7, #4]
 800b08c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 800b090:	e07b      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 800b09a:	e076      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 800b0a4:	e071      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800b0ae:	e06c      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 800b0b8:	e067      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	75fb      	strb	r3, [r7, #23]
        break;
 800b0be:	e064      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d15c      	bne.n	800b186 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 800b0cc:	7afb      	ldrb	r3, [r7, #11]
 800b0ce:	2b0d      	cmp	r3, #13
 800b0d0:	d856      	bhi.n	800b180 <HAL_TIM_RegisterCallback+0x274>
 800b0d2:	a201      	add	r2, pc, #4	; (adr r2, 800b0d8 <HAL_TIM_RegisterCallback+0x1cc>)
 800b0d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d8:	0800b111 	.word	0x0800b111
 800b0dc:	0800b119 	.word	0x0800b119
 800b0e0:	0800b121 	.word	0x0800b121
 800b0e4:	0800b129 	.word	0x0800b129
 800b0e8:	0800b131 	.word	0x0800b131
 800b0ec:	0800b139 	.word	0x0800b139
 800b0f0:	0800b141 	.word	0x0800b141
 800b0f4:	0800b149 	.word	0x0800b149
 800b0f8:	0800b151 	.word	0x0800b151
 800b0fc:	0800b159 	.word	0x0800b159
 800b100:	0800b161 	.word	0x0800b161
 800b104:	0800b169 	.word	0x0800b169
 800b108:	0800b171 	.word	0x0800b171
 800b10c:	0800b179 	.word	0x0800b179
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	687a      	ldr	r2, [r7, #4]
 800b114:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800b116:	e038      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	687a      	ldr	r2, [r7, #4]
 800b11c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800b11e:	e034      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	687a      	ldr	r2, [r7, #4]
 800b124:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800b126:	e030      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	687a      	ldr	r2, [r7, #4]
 800b12c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800b12e:	e02c      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800b136:	e028      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	687a      	ldr	r2, [r7, #4]
 800b13c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800b13e:	e024      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800b146:	e020      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800b14e:	e01c      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800b156:	e018      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	687a      	ldr	r2, [r7, #4]
 800b15c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800b15e:	e014      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800b166:	e010      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	687a      	ldr	r2, [r7, #4]
 800b16c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800b16e:	e00c      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	687a      	ldr	r2, [r7, #4]
 800b174:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800b176:	e008      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800b17e:	e004      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800b180:	2301      	movs	r3, #1
 800b182:	75fb      	strb	r3, [r7, #23]
        break;
 800b184:	e001      	b.n	800b18a <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800b186:	2301      	movs	r3, #1
 800b188:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2200      	movs	r2, #0
 800b18e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b192:	7dfb      	ldrb	r3, [r7, #23]
}
 800b194:	4618      	mov	r0, r3
 800b196:	371c      	adds	r7, #28
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b085      	sub	sp, #20
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	4a34      	ldr	r2, [pc, #208]	; (800b284 <TIM_Base_SetConfig+0xe4>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d00f      	beq.n	800b1d8 <TIM_Base_SetConfig+0x38>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1be:	d00b      	beq.n	800b1d8 <TIM_Base_SetConfig+0x38>
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	4a31      	ldr	r2, [pc, #196]	; (800b288 <TIM_Base_SetConfig+0xe8>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d007      	beq.n	800b1d8 <TIM_Base_SetConfig+0x38>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	4a30      	ldr	r2, [pc, #192]	; (800b28c <TIM_Base_SetConfig+0xec>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d003      	beq.n	800b1d8 <TIM_Base_SetConfig+0x38>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	4a2f      	ldr	r2, [pc, #188]	; (800b290 <TIM_Base_SetConfig+0xf0>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d108      	bne.n	800b1ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	68fa      	ldr	r2, [r7, #12]
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	4a25      	ldr	r2, [pc, #148]	; (800b284 <TIM_Base_SetConfig+0xe4>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d01b      	beq.n	800b22a <TIM_Base_SetConfig+0x8a>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1f8:	d017      	beq.n	800b22a <TIM_Base_SetConfig+0x8a>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	4a22      	ldr	r2, [pc, #136]	; (800b288 <TIM_Base_SetConfig+0xe8>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d013      	beq.n	800b22a <TIM_Base_SetConfig+0x8a>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	4a21      	ldr	r2, [pc, #132]	; (800b28c <TIM_Base_SetConfig+0xec>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d00f      	beq.n	800b22a <TIM_Base_SetConfig+0x8a>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	4a20      	ldr	r2, [pc, #128]	; (800b290 <TIM_Base_SetConfig+0xf0>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d00b      	beq.n	800b22a <TIM_Base_SetConfig+0x8a>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	4a1f      	ldr	r2, [pc, #124]	; (800b294 <TIM_Base_SetConfig+0xf4>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d007      	beq.n	800b22a <TIM_Base_SetConfig+0x8a>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	4a1e      	ldr	r2, [pc, #120]	; (800b298 <TIM_Base_SetConfig+0xf8>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d003      	beq.n	800b22a <TIM_Base_SetConfig+0x8a>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	4a1d      	ldr	r2, [pc, #116]	; (800b29c <TIM_Base_SetConfig+0xfc>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d108      	bne.n	800b23c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	68db      	ldr	r3, [r3, #12]
 800b236:	68fa      	ldr	r2, [r7, #12]
 800b238:	4313      	orrs	r3, r2
 800b23a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	695b      	ldr	r3, [r3, #20]
 800b246:	4313      	orrs	r3, r2
 800b248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	68fa      	ldr	r2, [r7, #12]
 800b24e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	689a      	ldr	r2, [r3, #8]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	681a      	ldr	r2, [r3, #0]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	4a08      	ldr	r2, [pc, #32]	; (800b284 <TIM_Base_SetConfig+0xe4>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d103      	bne.n	800b270 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	691a      	ldr	r2, [r3, #16]
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2201      	movs	r2, #1
 800b274:	615a      	str	r2, [r3, #20]
}
 800b276:	bf00      	nop
 800b278:	3714      	adds	r7, #20
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr
 800b282:	bf00      	nop
 800b284:	40010000 	.word	0x40010000
 800b288:	40000400 	.word	0x40000400
 800b28c:	40000800 	.word	0x40000800
 800b290:	40000c00 	.word	0x40000c00
 800b294:	40014000 	.word	0x40014000
 800b298:	40014400 	.word	0x40014400
 800b29c:	40014800 	.word	0x40014800

0800b2a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b087      	sub	sp, #28
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6a1b      	ldr	r3, [r3, #32]
 800b2ae:	f023 0201 	bic.w	r2, r3, #1
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6a1b      	ldr	r3, [r3, #32]
 800b2ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	699b      	ldr	r3, [r3, #24]
 800b2c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f023 0303 	bic.w	r3, r3, #3
 800b2d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	68fa      	ldr	r2, [r7, #12]
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	f023 0302 	bic.w	r3, r3, #2
 800b2e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	689b      	ldr	r3, [r3, #8]
 800b2ee:	697a      	ldr	r2, [r7, #20]
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	4a1c      	ldr	r2, [pc, #112]	; (800b368 <TIM_OC1_SetConfig+0xc8>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d10c      	bne.n	800b316 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	f023 0308 	bic.w	r3, r3, #8
 800b302:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	697a      	ldr	r2, [r7, #20]
 800b30a:	4313      	orrs	r3, r2
 800b30c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	f023 0304 	bic.w	r3, r3, #4
 800b314:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	4a13      	ldr	r2, [pc, #76]	; (800b368 <TIM_OC1_SetConfig+0xc8>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d111      	bne.n	800b342 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b32c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	695b      	ldr	r3, [r3, #20]
 800b332:	693a      	ldr	r2, [r7, #16]
 800b334:	4313      	orrs	r3, r2
 800b336:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	699b      	ldr	r3, [r3, #24]
 800b33c:	693a      	ldr	r2, [r7, #16]
 800b33e:	4313      	orrs	r3, r2
 800b340:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	693a      	ldr	r2, [r7, #16]
 800b346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	68fa      	ldr	r2, [r7, #12]
 800b34c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	685a      	ldr	r2, [r3, #4]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	697a      	ldr	r2, [r7, #20]
 800b35a:	621a      	str	r2, [r3, #32]
}
 800b35c:	bf00      	nop
 800b35e:	371c      	adds	r7, #28
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr
 800b368:	40010000 	.word	0x40010000

0800b36c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b087      	sub	sp, #28
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6a1b      	ldr	r3, [r3, #32]
 800b37a:	f023 0210 	bic.w	r2, r3, #16
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6a1b      	ldr	r3, [r3, #32]
 800b386:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	699b      	ldr	r3, [r3, #24]
 800b392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b39a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	021b      	lsls	r3, r3, #8
 800b3aa:	68fa      	ldr	r2, [r7, #12]
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	f023 0320 	bic.w	r3, r3, #32
 800b3b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	689b      	ldr	r3, [r3, #8]
 800b3bc:	011b      	lsls	r3, r3, #4
 800b3be:	697a      	ldr	r2, [r7, #20]
 800b3c0:	4313      	orrs	r3, r2
 800b3c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	4a1e      	ldr	r2, [pc, #120]	; (800b440 <TIM_OC2_SetConfig+0xd4>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d10d      	bne.n	800b3e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b3d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	68db      	ldr	r3, [r3, #12]
 800b3d8:	011b      	lsls	r3, r3, #4
 800b3da:	697a      	ldr	r2, [r7, #20]
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	4a15      	ldr	r2, [pc, #84]	; (800b440 <TIM_OC2_SetConfig+0xd4>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d113      	bne.n	800b418 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b3f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b3fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	695b      	ldr	r3, [r3, #20]
 800b404:	009b      	lsls	r3, r3, #2
 800b406:	693a      	ldr	r2, [r7, #16]
 800b408:	4313      	orrs	r3, r2
 800b40a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	699b      	ldr	r3, [r3, #24]
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	693a      	ldr	r2, [r7, #16]
 800b414:	4313      	orrs	r3, r2
 800b416:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	693a      	ldr	r2, [r7, #16]
 800b41c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	68fa      	ldr	r2, [r7, #12]
 800b422:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	685a      	ldr	r2, [r3, #4]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	697a      	ldr	r2, [r7, #20]
 800b430:	621a      	str	r2, [r3, #32]
}
 800b432:	bf00      	nop
 800b434:	371c      	adds	r7, #28
 800b436:	46bd      	mov	sp, r7
 800b438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43c:	4770      	bx	lr
 800b43e:	bf00      	nop
 800b440:	40010000 	.word	0x40010000

0800b444 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b444:	b480      	push	{r7}
 800b446:	b087      	sub	sp, #28
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6a1b      	ldr	r3, [r3, #32]
 800b452:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6a1b      	ldr	r3, [r3, #32]
 800b45e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	69db      	ldr	r3, [r3, #28]
 800b46a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	f023 0303 	bic.w	r3, r3, #3
 800b47a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	68fa      	ldr	r2, [r7, #12]
 800b482:	4313      	orrs	r3, r2
 800b484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b48c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	689b      	ldr	r3, [r3, #8]
 800b492:	021b      	lsls	r3, r3, #8
 800b494:	697a      	ldr	r2, [r7, #20]
 800b496:	4313      	orrs	r3, r2
 800b498:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	4a1d      	ldr	r2, [pc, #116]	; (800b514 <TIM_OC3_SetConfig+0xd0>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d10d      	bne.n	800b4be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b4a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	68db      	ldr	r3, [r3, #12]
 800b4ae:	021b      	lsls	r3, r3, #8
 800b4b0:	697a      	ldr	r2, [r7, #20]
 800b4b2:	4313      	orrs	r3, r2
 800b4b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b4bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	4a14      	ldr	r2, [pc, #80]	; (800b514 <TIM_OC3_SetConfig+0xd0>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d113      	bne.n	800b4ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b4d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	695b      	ldr	r3, [r3, #20]
 800b4da:	011b      	lsls	r3, r3, #4
 800b4dc:	693a      	ldr	r2, [r7, #16]
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	699b      	ldr	r3, [r3, #24]
 800b4e6:	011b      	lsls	r3, r3, #4
 800b4e8:	693a      	ldr	r2, [r7, #16]
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	693a      	ldr	r2, [r7, #16]
 800b4f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	68fa      	ldr	r2, [r7, #12]
 800b4f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	685a      	ldr	r2, [r3, #4]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	697a      	ldr	r2, [r7, #20]
 800b506:	621a      	str	r2, [r3, #32]
}
 800b508:	bf00      	nop
 800b50a:	371c      	adds	r7, #28
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr
 800b514:	40010000 	.word	0x40010000

0800b518 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b518:	b480      	push	{r7}
 800b51a:	b087      	sub	sp, #28
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6a1b      	ldr	r3, [r3, #32]
 800b526:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6a1b      	ldr	r3, [r3, #32]
 800b532:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	685b      	ldr	r3, [r3, #4]
 800b538:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	69db      	ldr	r3, [r3, #28]
 800b53e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b54e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	021b      	lsls	r3, r3, #8
 800b556:	68fa      	ldr	r2, [r7, #12]
 800b558:	4313      	orrs	r3, r2
 800b55a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b562:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	031b      	lsls	r3, r3, #12
 800b56a:	693a      	ldr	r2, [r7, #16]
 800b56c:	4313      	orrs	r3, r2
 800b56e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	4a10      	ldr	r2, [pc, #64]	; (800b5b4 <TIM_OC4_SetConfig+0x9c>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d109      	bne.n	800b58c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b57e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	695b      	ldr	r3, [r3, #20]
 800b584:	019b      	lsls	r3, r3, #6
 800b586:	697a      	ldr	r2, [r7, #20]
 800b588:	4313      	orrs	r3, r2
 800b58a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	697a      	ldr	r2, [r7, #20]
 800b590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	68fa      	ldr	r2, [r7, #12]
 800b596:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	685a      	ldr	r2, [r3, #4]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	693a      	ldr	r2, [r7, #16]
 800b5a4:	621a      	str	r2, [r3, #32]
}
 800b5a6:	bf00      	nop
 800b5a8:	371c      	adds	r7, #28
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b0:	4770      	bx	lr
 800b5b2:	bf00      	nop
 800b5b4:	40010000 	.word	0x40010000

0800b5b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b087      	sub	sp, #28
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	60f8      	str	r0, [r7, #12]
 800b5c0:	60b9      	str	r1, [r7, #8]
 800b5c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	6a1b      	ldr	r3, [r3, #32]
 800b5c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	6a1b      	ldr	r3, [r3, #32]
 800b5ce:	f023 0201 	bic.w	r2, r3, #1
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	699b      	ldr	r3, [r3, #24]
 800b5da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b5e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	011b      	lsls	r3, r3, #4
 800b5e8:	693a      	ldr	r2, [r7, #16]
 800b5ea:	4313      	orrs	r3, r2
 800b5ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	f023 030a 	bic.w	r3, r3, #10
 800b5f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b5f6:	697a      	ldr	r2, [r7, #20]
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	693a      	ldr	r2, [r7, #16]
 800b602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	697a      	ldr	r2, [r7, #20]
 800b608:	621a      	str	r2, [r3, #32]
}
 800b60a:	bf00      	nop
 800b60c:	371c      	adds	r7, #28
 800b60e:	46bd      	mov	sp, r7
 800b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b614:	4770      	bx	lr

0800b616 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b616:	b480      	push	{r7}
 800b618:	b087      	sub	sp, #28
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	60f8      	str	r0, [r7, #12]
 800b61e:	60b9      	str	r1, [r7, #8]
 800b620:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	6a1b      	ldr	r3, [r3, #32]
 800b626:	f023 0210 	bic.w	r2, r3, #16
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	699b      	ldr	r3, [r3, #24]
 800b632:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	6a1b      	ldr	r3, [r3, #32]
 800b638:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b640:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	031b      	lsls	r3, r3, #12
 800b646:	697a      	ldr	r2, [r7, #20]
 800b648:	4313      	orrs	r3, r2
 800b64a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b652:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	011b      	lsls	r3, r3, #4
 800b658:	693a      	ldr	r2, [r7, #16]
 800b65a:	4313      	orrs	r3, r2
 800b65c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	697a      	ldr	r2, [r7, #20]
 800b662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	693a      	ldr	r2, [r7, #16]
 800b668:	621a      	str	r2, [r3, #32]
}
 800b66a:	bf00      	nop
 800b66c:	371c      	adds	r7, #28
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr

0800b676 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b676:	b480      	push	{r7}
 800b678:	b085      	sub	sp, #20
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
 800b67e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	689b      	ldr	r3, [r3, #8]
 800b684:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b68c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b68e:	683a      	ldr	r2, [r7, #0]
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	4313      	orrs	r3, r2
 800b694:	f043 0307 	orr.w	r3, r3, #7
 800b698:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	68fa      	ldr	r2, [r7, #12]
 800b69e:	609a      	str	r2, [r3, #8]
}
 800b6a0:	bf00      	nop
 800b6a2:	3714      	adds	r7, #20
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b087      	sub	sp, #28
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	60f8      	str	r0, [r7, #12]
 800b6b4:	60b9      	str	r1, [r7, #8]
 800b6b6:	607a      	str	r2, [r7, #4]
 800b6b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	689b      	ldr	r3, [r3, #8]
 800b6be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b6c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	021a      	lsls	r2, r3, #8
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	431a      	orrs	r2, r3
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	697a      	ldr	r2, [r7, #20]
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	697a      	ldr	r2, [r7, #20]
 800b6de:	609a      	str	r2, [r3, #8]
}
 800b6e0:	bf00      	nop
 800b6e2:	371c      	adds	r7, #28
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ea:	4770      	bx	lr

0800b6ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b087      	sub	sp, #28
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	f003 031f 	and.w	r3, r3, #31
 800b6fe:	2201      	movs	r2, #1
 800b700:	fa02 f303 	lsl.w	r3, r2, r3
 800b704:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	6a1a      	ldr	r2, [r3, #32]
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	43db      	mvns	r3, r3
 800b70e:	401a      	ands	r2, r3
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	6a1a      	ldr	r2, [r3, #32]
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	f003 031f 	and.w	r3, r3, #31
 800b71e:	6879      	ldr	r1, [r7, #4]
 800b720:	fa01 f303 	lsl.w	r3, r1, r3
 800b724:	431a      	orrs	r2, r3
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	621a      	str	r2, [r3, #32]
}
 800b72a:	bf00      	nop
 800b72c:	371c      	adds	r7, #28
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr
	...

0800b738 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800b738:	b480      	push	{r7}
 800b73a:	b083      	sub	sp, #12
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	4a1c      	ldr	r2, [pc, #112]	; (800b7b4 <TIM_ResetCallback+0x7c>)
 800b744:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	4a1b      	ldr	r2, [pc, #108]	; (800b7b8 <TIM_ResetCallback+0x80>)
 800b74c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	4a1a      	ldr	r2, [pc, #104]	; (800b7bc <TIM_ResetCallback+0x84>)
 800b754:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	4a19      	ldr	r2, [pc, #100]	; (800b7c0 <TIM_ResetCallback+0x88>)
 800b75c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	4a18      	ldr	r2, [pc, #96]	; (800b7c4 <TIM_ResetCallback+0x8c>)
 800b764:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	4a17      	ldr	r2, [pc, #92]	; (800b7c8 <TIM_ResetCallback+0x90>)
 800b76c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	4a16      	ldr	r2, [pc, #88]	; (800b7cc <TIM_ResetCallback+0x94>)
 800b774:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	4a15      	ldr	r2, [pc, #84]	; (800b7d0 <TIM_ResetCallback+0x98>)
 800b77c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	4a14      	ldr	r2, [pc, #80]	; (800b7d4 <TIM_ResetCallback+0x9c>)
 800b784:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	4a13      	ldr	r2, [pc, #76]	; (800b7d8 <TIM_ResetCallback+0xa0>)
 800b78c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	4a12      	ldr	r2, [pc, #72]	; (800b7dc <TIM_ResetCallback+0xa4>)
 800b794:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	4a11      	ldr	r2, [pc, #68]	; (800b7e0 <TIM_ResetCallback+0xa8>)
 800b79c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	4a10      	ldr	r2, [pc, #64]	; (800b7e4 <TIM_ResetCallback+0xac>)
 800b7a4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800b7a8:	bf00      	nop
 800b7aa:	370c      	adds	r7, #12
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	4770      	bx	lr
 800b7b4:	08004695 	.word	0x08004695
 800b7b8:	0800ae57 	.word	0x0800ae57
 800b7bc:	0800aecf 	.word	0x0800aecf
 800b7c0:	0800aee3 	.word	0x0800aee3
 800b7c4:	0800ae7f 	.word	0x0800ae7f
 800b7c8:	0800ae93 	.word	0x0800ae93
 800b7cc:	0800ae6b 	.word	0x0800ae6b
 800b7d0:	0800aea7 	.word	0x0800aea7
 800b7d4:	0800aebb 	.word	0x0800aebb
 800b7d8:	0800aef7 	.word	0x0800aef7
 800b7dc:	0800b8c5 	.word	0x0800b8c5
 800b7e0:	0800b8d9 	.word	0x0800b8d9
 800b7e4:	0800b8ed 	.word	0x0800b8ed

0800b7e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b085      	sub	sp, #20
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d101      	bne.n	800b800 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b7fc:	2302      	movs	r3, #2
 800b7fe:	e050      	b.n	800b8a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2201      	movs	r2, #1
 800b804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2202      	movs	r2, #2
 800b80c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	685b      	ldr	r3, [r3, #4]
 800b816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	689b      	ldr	r3, [r3, #8]
 800b81e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b826:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	68fa      	ldr	r2, [r7, #12]
 800b82e:	4313      	orrs	r3, r2
 800b830:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	68fa      	ldr	r2, [r7, #12]
 800b838:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4a1c      	ldr	r2, [pc, #112]	; (800b8b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d018      	beq.n	800b876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b84c:	d013      	beq.n	800b876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4a18      	ldr	r2, [pc, #96]	; (800b8b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d00e      	beq.n	800b876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4a16      	ldr	r2, [pc, #88]	; (800b8b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d009      	beq.n	800b876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a15      	ldr	r2, [pc, #84]	; (800b8bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d004      	beq.n	800b876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a13      	ldr	r2, [pc, #76]	; (800b8c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d10c      	bne.n	800b890 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b87c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	685b      	ldr	r3, [r3, #4]
 800b882:	68ba      	ldr	r2, [r7, #8]
 800b884:	4313      	orrs	r3, r2
 800b886:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	68ba      	ldr	r2, [r7, #8]
 800b88e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2201      	movs	r2, #1
 800b894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2200      	movs	r2, #0
 800b89c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b8a0:	2300      	movs	r3, #0
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3714      	adds	r7, #20
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ac:	4770      	bx	lr
 800b8ae:	bf00      	nop
 800b8b0:	40010000 	.word	0x40010000
 800b8b4:	40000400 	.word	0x40000400
 800b8b8:	40000800 	.word	0x40000800
 800b8bc:	40000c00 	.word	0x40000c00
 800b8c0:	40014000 	.word	0x40014000

0800b8c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b083      	sub	sp, #12
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b8cc:	bf00      	nop
 800b8ce:	370c      	adds	r7, #12
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr

0800b8d8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b083      	sub	sp, #12
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800b8e0:	bf00      	nop
 800b8e2:	370c      	adds	r7, #12
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr

0800b8ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b083      	sub	sp, #12
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b8f4:	bf00      	nop
 800b8f6:	370c      	adds	r7, #12
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr

0800b900 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b082      	sub	sp, #8
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d101      	bne.n	800b912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b90e:	2301      	movs	r3, #1
 800b910:	e04a      	b.n	800b9a8 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b918:	b2db      	uxtb	r3, r3
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d111      	bne.n	800b942 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2200      	movs	r2, #0
 800b922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f000 fd2c 	bl	800c384 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b930:	2b00      	cmp	r3, #0
 800b932:	d102      	bne.n	800b93a <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	4a1e      	ldr	r2, [pc, #120]	; (800b9b0 <HAL_UART_Init+0xb0>)
 800b938:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2224      	movs	r2, #36	; 0x24
 800b946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	68da      	ldr	r2, [r3, #12]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b958:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f000 fff6 	bl	800c94c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	691a      	ldr	r2, [r3, #16]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b96e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	695a      	ldr	r2, [r3, #20]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b97e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	68da      	ldr	r2, [r3, #12]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b98e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2200      	movs	r2, #0
 800b994:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2220      	movs	r2, #32
 800b99a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2220      	movs	r2, #32
 800b9a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b9a6:	2300      	movs	r3, #0
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3708      	adds	r7, #8
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}
 800b9b0:	08005121 	.word	0x08005121

0800b9b4 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b087      	sub	sp, #28
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	460b      	mov	r3, r1
 800b9be:	607a      	str	r2, [r7, #4]
 800b9c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d107      	bne.n	800b9dc <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9d0:	f043 0220 	orr.w	r2, r3, #32
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b9d8:	2301      	movs	r3, #1
 800b9da:	e08c      	b.n	800baf6 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	d101      	bne.n	800b9ea <HAL_UART_RegisterCallback+0x36>
 800b9e6:	2302      	movs	r3, #2
 800b9e8:	e085      	b.n	800baf6 <HAL_UART_RegisterCallback+0x142>
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	2b20      	cmp	r3, #32
 800b9fc:	d151      	bne.n	800baa2 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800b9fe:	7afb      	ldrb	r3, [r7, #11]
 800ba00:	2b0c      	cmp	r3, #12
 800ba02:	d845      	bhi.n	800ba90 <HAL_UART_RegisterCallback+0xdc>
 800ba04:	a201      	add	r2, pc, #4	; (adr r2, 800ba0c <HAL_UART_RegisterCallback+0x58>)
 800ba06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba0a:	bf00      	nop
 800ba0c:	0800ba41 	.word	0x0800ba41
 800ba10:	0800ba49 	.word	0x0800ba49
 800ba14:	0800ba51 	.word	0x0800ba51
 800ba18:	0800ba59 	.word	0x0800ba59
 800ba1c:	0800ba61 	.word	0x0800ba61
 800ba20:	0800ba69 	.word	0x0800ba69
 800ba24:	0800ba71 	.word	0x0800ba71
 800ba28:	0800ba79 	.word	0x0800ba79
 800ba2c:	0800ba91 	.word	0x0800ba91
 800ba30:	0800ba91 	.word	0x0800ba91
 800ba34:	0800ba91 	.word	0x0800ba91
 800ba38:	0800ba81 	.word	0x0800ba81
 800ba3c:	0800ba89 	.word	0x0800ba89
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800ba46:	e051      	b.n	800baec <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	687a      	ldr	r2, [r7, #4]
 800ba4c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800ba4e:	e04d      	b.n	800baec <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	687a      	ldr	r2, [r7, #4]
 800ba54:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800ba56:	e049      	b.n	800baec <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800ba5e:	e045      	b.n	800baec <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800ba66:	e041      	b.n	800baec <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800ba6e:	e03d      	b.n	800baec <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	687a      	ldr	r2, [r7, #4]
 800ba74:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800ba76:	e039      	b.n	800baec <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	687a      	ldr	r2, [r7, #4]
 800ba7c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800ba7e:	e035      	b.n	800baec <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800ba86:	e031      	b.n	800baec <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	687a      	ldr	r2, [r7, #4]
 800ba8c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800ba8e:	e02d      	b.n	800baec <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba94:	f043 0220 	orr.w	r2, r3, #32
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	75fb      	strb	r3, [r7, #23]
        break;
 800baa0:	e024      	b.n	800baec <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800baa8:	b2db      	uxtb	r3, r3
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d116      	bne.n	800badc <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800baae:	7afb      	ldrb	r3, [r7, #11]
 800bab0:	2b0b      	cmp	r3, #11
 800bab2:	d002      	beq.n	800baba <HAL_UART_RegisterCallback+0x106>
 800bab4:	2b0c      	cmp	r3, #12
 800bab6:	d004      	beq.n	800bac2 <HAL_UART_RegisterCallback+0x10e>
 800bab8:	e007      	b.n	800baca <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	687a      	ldr	r2, [r7, #4]
 800babe:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800bac0:	e014      	b.n	800baec <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800bac8:	e010      	b.n	800baec <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bace:	f043 0220 	orr.w	r2, r3, #32
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800bad6:	2301      	movs	r3, #1
 800bad8:	75fb      	strb	r3, [r7, #23]
        break;
 800bada:	e007      	b.n	800baec <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bae0:	f043 0220 	orr.w	r2, r3, #32
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800bae8:	2301      	movs	r3, #1
 800baea:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2200      	movs	r2, #0
 800baf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800baf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	371c      	adds	r7, #28
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr
 800bb02:	bf00      	nop

0800bb04 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	60b9      	str	r1, [r7, #8]
 800bb0e:	4613      	mov	r3, r2
 800bb10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bb18:	b2db      	uxtb	r3, r3
 800bb1a:	2b20      	cmp	r3, #32
 800bb1c:	d11d      	bne.n	800bb5a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d002      	beq.n	800bb2a <HAL_UART_Receive_IT+0x26>
 800bb24:	88fb      	ldrh	r3, [r7, #6]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d101      	bne.n	800bb2e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	e016      	b.n	800bb5c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	d101      	bne.n	800bb3c <HAL_UART_Receive_IT+0x38>
 800bb38:	2302      	movs	r3, #2
 800bb3a:	e00f      	b.n	800bb5c <HAL_UART_Receive_IT+0x58>
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2201      	movs	r2, #1
 800bb40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2200      	movs	r2, #0
 800bb48:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bb4a:	88fb      	ldrh	r3, [r7, #6]
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	68b9      	ldr	r1, [r7, #8]
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	f000 fcf7 	bl	800c544 <UART_Start_Receive_IT>
 800bb56:	4603      	mov	r3, r0
 800bb58:	e000      	b.n	800bb5c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800bb5a:	2302      	movs	r3, #2
  }
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3710      	adds	r7, #16
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b08c      	sub	sp, #48	; 0x30
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	60f8      	str	r0, [r7, #12]
 800bb6c:	60b9      	str	r1, [r7, #8]
 800bb6e:	4613      	mov	r3, r2
 800bb70:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb78:	b2db      	uxtb	r3, r3
 800bb7a:	2b20      	cmp	r3, #32
 800bb7c:	d165      	bne.n	800bc4a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d002      	beq.n	800bb8a <HAL_UART_Transmit_DMA+0x26>
 800bb84:	88fb      	ldrh	r3, [r7, #6]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d101      	bne.n	800bb8e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e05e      	b.n	800bc4c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d101      	bne.n	800bb9c <HAL_UART_Transmit_DMA+0x38>
 800bb98:	2302      	movs	r3, #2
 800bb9a:	e057      	b.n	800bc4c <HAL_UART_Transmit_DMA+0xe8>
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2201      	movs	r2, #1
 800bba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800bba4:	68ba      	ldr	r2, [r7, #8]
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	88fa      	ldrh	r2, [r7, #6]
 800bbae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	88fa      	ldrh	r2, [r7, #6]
 800bbb4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	2221      	movs	r2, #33	; 0x21
 800bbc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbc8:	4a22      	ldr	r2, [pc, #136]	; (800bc54 <HAL_UART_Transmit_DMA+0xf0>)
 800bbca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbd0:	4a21      	ldr	r2, [pc, #132]	; (800bc58 <HAL_UART_Transmit_DMA+0xf4>)
 800bbd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbd8:	4a20      	ldr	r2, [pc, #128]	; (800bc5c <HAL_UART_Transmit_DMA+0xf8>)
 800bbda:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800bbe4:	f107 0308 	add.w	r3, r7, #8
 800bbe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800bbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf0:	6819      	ldr	r1, [r3, #0]
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	3304      	adds	r3, #4
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	88fb      	ldrh	r3, [r7, #6]
 800bbfc:	f7fb f88c 	bl	8006d18 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bc08:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	3314      	adds	r3, #20
 800bc18:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc1a:	69bb      	ldr	r3, [r7, #24]
 800bc1c:	e853 3f00 	ldrex	r3, [r3]
 800bc20:	617b      	str	r3, [r7, #20]
   return(result);
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc28:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	3314      	adds	r3, #20
 800bc30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc32:	627a      	str	r2, [r7, #36]	; 0x24
 800bc34:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc36:	6a39      	ldr	r1, [r7, #32]
 800bc38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc3a:	e841 2300 	strex	r3, r2, [r1]
 800bc3e:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc40:	69fb      	ldr	r3, [r7, #28]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d1e5      	bne.n	800bc12 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800bc46:	2300      	movs	r3, #0
 800bc48:	e000      	b.n	800bc4c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800bc4a:	2302      	movs	r3, #2
  }
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3730      	adds	r7, #48	; 0x30
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}
 800bc54:	0800c3f5 	.word	0x0800c3f5
 800bc58:	0800c491 	.word	0x0800c491
 800bc5c:	0800c4af 	.word	0x0800c4af

0800bc60 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b09a      	sub	sp, #104	; 0x68
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	330c      	adds	r3, #12
 800bc6e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc72:	e853 3f00 	ldrex	r3, [r3]
 800bc76:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800bc78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc7e:	667b      	str	r3, [r7, #100]	; 0x64
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	330c      	adds	r3, #12
 800bc86:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bc88:	657a      	str	r2, [r7, #84]	; 0x54
 800bc8a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc8c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bc8e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bc90:	e841 2300 	strex	r3, r2, [r1]
 800bc94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bc96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d1e5      	bne.n	800bc68 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	3314      	adds	r3, #20
 800bca2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bca6:	e853 3f00 	ldrex	r3, [r3]
 800bcaa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bcac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcae:	f023 0301 	bic.w	r3, r3, #1
 800bcb2:	663b      	str	r3, [r7, #96]	; 0x60
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	3314      	adds	r3, #20
 800bcba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bcbc:	643a      	str	r2, [r7, #64]	; 0x40
 800bcbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bcc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bcc4:	e841 2300 	strex	r3, r2, [r1]
 800bcc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bcca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d1e5      	bne.n	800bc9c <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcd4:	2b01      	cmp	r3, #1
 800bcd6:	d119      	bne.n	800bd0c <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	330c      	adds	r3, #12
 800bcde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bce0:	6a3b      	ldr	r3, [r7, #32]
 800bce2:	e853 3f00 	ldrex	r3, [r3]
 800bce6:	61fb      	str	r3, [r7, #28]
   return(result);
 800bce8:	69fb      	ldr	r3, [r7, #28]
 800bcea:	f023 0310 	bic.w	r3, r3, #16
 800bcee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	330c      	adds	r3, #12
 800bcf6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bcf8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bcfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bcfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd00:	e841 2300 	strex	r3, r2, [r1]
 800bd04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d1e5      	bne.n	800bcd8 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	695b      	ldr	r3, [r3, #20]
 800bd12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd16:	2b40      	cmp	r3, #64	; 0x40
 800bd18:	d136      	bne.n	800bd88 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	3314      	adds	r3, #20
 800bd20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	e853 3f00 	ldrex	r3, [r3]
 800bd28:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd30:	65bb      	str	r3, [r7, #88]	; 0x58
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	3314      	adds	r3, #20
 800bd38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bd3a:	61ba      	str	r2, [r7, #24]
 800bd3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd3e:	6979      	ldr	r1, [r7, #20]
 800bd40:	69ba      	ldr	r2, [r7, #24]
 800bd42:	e841 2300 	strex	r3, r2, [r1]
 800bd46:	613b      	str	r3, [r7, #16]
   return(result);
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d1e5      	bne.n	800bd1a <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d018      	beq.n	800bd88 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7fb f830 	bl	8006dc8 <HAL_DMA_Abort>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d00c      	beq.n	800bd88 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd72:	4618      	mov	r0, r3
 800bd74:	f7fb fa52 	bl	800721c <HAL_DMA_GetError>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	2b20      	cmp	r3, #32
 800bd7c:	d104      	bne.n	800bd88 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2210      	movs	r2, #16
 800bd82:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800bd84:	2303      	movs	r3, #3
 800bd86:	e00a      	b.n	800bd9e <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2220      	movs	r2, #32
 800bd92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800bd9c:	2300      	movs	r3, #0
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3768      	adds	r7, #104	; 0x68
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
	...

0800bda8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b0ba      	sub	sp, #232	; 0xe8
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	68db      	ldr	r3, [r3, #12]
 800bdc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	695b      	ldr	r3, [r3, #20]
 800bdca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bdda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdde:	f003 030f 	and.w	r3, r3, #15
 800bde2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800bde6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d10f      	bne.n	800be0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bdee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdf2:	f003 0320 	and.w	r3, r3, #32
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d009      	beq.n	800be0e <HAL_UART_IRQHandler+0x66>
 800bdfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bdfe:	f003 0320 	and.w	r3, r3, #32
 800be02:	2b00      	cmp	r3, #0
 800be04:	d003      	beq.n	800be0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f000 fce3 	bl	800c7d2 <UART_Receive_IT>
      return;
 800be0c:	e25b      	b.n	800c2c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800be0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800be12:	2b00      	cmp	r3, #0
 800be14:	f000 80e1 	beq.w	800bfda <HAL_UART_IRQHandler+0x232>
 800be18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be1c:	f003 0301 	and.w	r3, r3, #1
 800be20:	2b00      	cmp	r3, #0
 800be22:	d106      	bne.n	800be32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800be24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be28:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	f000 80d4 	beq.w	800bfda <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800be32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be36:	f003 0301 	and.w	r3, r3, #1
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d00b      	beq.n	800be56 <HAL_UART_IRQHandler+0xae>
 800be3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be46:	2b00      	cmp	r3, #0
 800be48:	d005      	beq.n	800be56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be4e:	f043 0201 	orr.w	r2, r3, #1
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800be56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be5a:	f003 0304 	and.w	r3, r3, #4
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d00b      	beq.n	800be7a <HAL_UART_IRQHandler+0xd2>
 800be62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be66:	f003 0301 	and.w	r3, r3, #1
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d005      	beq.n	800be7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be72:	f043 0202 	orr.w	r2, r3, #2
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800be7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be7e:	f003 0302 	and.w	r3, r3, #2
 800be82:	2b00      	cmp	r3, #0
 800be84:	d00b      	beq.n	800be9e <HAL_UART_IRQHandler+0xf6>
 800be86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be8a:	f003 0301 	and.w	r3, r3, #1
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d005      	beq.n	800be9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be96:	f043 0204 	orr.w	r2, r3, #4
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800be9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bea2:	f003 0308 	and.w	r3, r3, #8
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d011      	beq.n	800bece <HAL_UART_IRQHandler+0x126>
 800beaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800beae:	f003 0320 	and.w	r3, r3, #32
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d105      	bne.n	800bec2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800beb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800beba:	f003 0301 	and.w	r3, r3, #1
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d005      	beq.n	800bece <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bec6:	f043 0208 	orr.w	r2, r3, #8
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	f000 81f2 	beq.w	800c2bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bedc:	f003 0320 	and.w	r3, r3, #32
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d008      	beq.n	800bef6 <HAL_UART_IRQHandler+0x14e>
 800bee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bee8:	f003 0320 	and.w	r3, r3, #32
 800beec:	2b00      	cmp	r3, #0
 800beee:	d002      	beq.n	800bef6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f000 fc6e 	bl	800c7d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	695b      	ldr	r3, [r3, #20]
 800befc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf00:	2b40      	cmp	r3, #64	; 0x40
 800bf02:	bf0c      	ite	eq
 800bf04:	2301      	moveq	r3, #1
 800bf06:	2300      	movne	r3, #0
 800bf08:	b2db      	uxtb	r3, r3
 800bf0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf12:	f003 0308 	and.w	r3, r3, #8
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d103      	bne.n	800bf22 <HAL_UART_IRQHandler+0x17a>
 800bf1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d051      	beq.n	800bfc6 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f000 fb74 	bl	800c610 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	695b      	ldr	r3, [r3, #20]
 800bf2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf32:	2b40      	cmp	r3, #64	; 0x40
 800bf34:	d142      	bne.n	800bfbc <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	3314      	adds	r3, #20
 800bf3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bf44:	e853 3f00 	ldrex	r3, [r3]
 800bf48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bf4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	3314      	adds	r3, #20
 800bf5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bf62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bf66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bf6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bf72:	e841 2300 	strex	r3, r2, [r1]
 800bf76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bf7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d1d9      	bne.n	800bf36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d013      	beq.n	800bfb2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf8e:	4a7f      	ldr	r2, [pc, #508]	; (800c18c <HAL_UART_IRQHandler+0x3e4>)
 800bf90:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7fa ff86 	bl	8006ea8 <HAL_DMA_Abort_IT>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d019      	beq.n	800bfd6 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bfac:	4610      	mov	r0, r2
 800bfae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfb0:	e011      	b.n	800bfd6 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfba:	e00c      	b.n	800bfd6 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfc4:	e007      	b.n	800bfd6 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800bfd4:	e172      	b.n	800c2bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfd6:	bf00      	nop
    return;
 800bfd8:	e170      	b.n	800c2bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfde:	2b01      	cmp	r3, #1
 800bfe0:	f040 814c 	bne.w	800c27c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bfe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfe8:	f003 0310 	and.w	r3, r3, #16
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	f000 8145 	beq.w	800c27c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bff6:	f003 0310 	and.w	r3, r3, #16
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	f000 813e 	beq.w	800c27c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c000:	2300      	movs	r3, #0
 800c002:	60bb      	str	r3, [r7, #8]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	60bb      	str	r3, [r7, #8]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	60bb      	str	r3, [r7, #8]
 800c014:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	695b      	ldr	r3, [r3, #20]
 800c01c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c020:	2b40      	cmp	r3, #64	; 0x40
 800c022:	f040 80b5 	bne.w	800c190 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c032:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c036:	2b00      	cmp	r3, #0
 800c038:	f000 8142 	beq.w	800c2c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c040:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c044:	429a      	cmp	r2, r3
 800c046:	f080 813b 	bcs.w	800c2c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c050:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c056:	69db      	ldr	r3, [r3, #28]
 800c058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c05c:	f000 8088 	beq.w	800c170 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	330c      	adds	r3, #12
 800c066:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c06a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c06e:	e853 3f00 	ldrex	r3, [r3]
 800c072:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c076:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c07a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c07e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	330c      	adds	r3, #12
 800c088:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c08c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c090:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c094:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c098:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c09c:	e841 2300 	strex	r3, r2, [r1]
 800c0a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c0a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d1d9      	bne.n	800c060 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	3314      	adds	r3, #20
 800c0b2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c0b6:	e853 3f00 	ldrex	r3, [r3]
 800c0ba:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c0bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c0be:	f023 0301 	bic.w	r3, r3, #1
 800c0c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	3314      	adds	r3, #20
 800c0cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c0d0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c0d4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0d6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c0d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c0dc:	e841 2300 	strex	r3, r2, [r1]
 800c0e0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c0e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d1e1      	bne.n	800c0ac <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	3314      	adds	r3, #20
 800c0ee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c0f2:	e853 3f00 	ldrex	r3, [r3]
 800c0f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c0f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	3314      	adds	r3, #20
 800c108:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c10c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c10e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c110:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c112:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c114:	e841 2300 	strex	r3, r2, [r1]
 800c118:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c11a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d1e3      	bne.n	800c0e8 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2220      	movs	r2, #32
 800c124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2200      	movs	r2, #0
 800c12c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	330c      	adds	r3, #12
 800c134:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c138:	e853 3f00 	ldrex	r3, [r3]
 800c13c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c13e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c140:	f023 0310 	bic.w	r3, r3, #16
 800c144:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	330c      	adds	r3, #12
 800c14e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c152:	65ba      	str	r2, [r7, #88]	; 0x58
 800c154:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c156:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c158:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c15a:	e841 2300 	strex	r3, r2, [r1]
 800c15e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c162:	2b00      	cmp	r3, #0
 800c164:	d1e3      	bne.n	800c12e <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c16a:	4618      	mov	r0, r3
 800c16c:	f7fa fe2c 	bl	8006dc8 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c174:	687a      	ldr	r2, [r7, #4]
 800c176:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800c178:	687a      	ldr	r2, [r7, #4]
 800c17a:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800c17c:	b292      	uxth	r2, r2
 800c17e:	1a8a      	subs	r2, r1, r2
 800c180:	b292      	uxth	r2, r2
 800c182:	4611      	mov	r1, r2
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c188:	e09a      	b.n	800c2c0 <HAL_UART_IRQHandler+0x518>
 800c18a:	bf00      	nop
 800c18c:	0800c6d7 	.word	0x0800c6d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c198:	b29b      	uxth	r3, r3
 800c19a:	1ad3      	subs	r3, r2, r3
 800c19c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c1a4:	b29b      	uxth	r3, r3
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	f000 808c 	beq.w	800c2c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c1ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	f000 8087 	beq.w	800c2c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	330c      	adds	r3, #12
 800c1bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c0:	e853 3f00 	ldrex	r3, [r3]
 800c1c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c1cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	330c      	adds	r3, #12
 800c1d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c1da:	647a      	str	r2, [r7, #68]	; 0x44
 800c1dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c1e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c1e2:	e841 2300 	strex	r3, r2, [r1]
 800c1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c1e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d1e3      	bne.n	800c1b6 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	3314      	adds	r3, #20
 800c1f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f8:	e853 3f00 	ldrex	r3, [r3]
 800c1fc:	623b      	str	r3, [r7, #32]
   return(result);
 800c1fe:	6a3b      	ldr	r3, [r7, #32]
 800c200:	f023 0301 	bic.w	r3, r3, #1
 800c204:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	3314      	adds	r3, #20
 800c20e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c212:	633a      	str	r2, [r7, #48]	; 0x30
 800c214:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c216:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c21a:	e841 2300 	strex	r3, r2, [r1]
 800c21e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c222:	2b00      	cmp	r3, #0
 800c224:	d1e3      	bne.n	800c1ee <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2220      	movs	r2, #32
 800c22a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2200      	movs	r2, #0
 800c232:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	330c      	adds	r3, #12
 800c23a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	e853 3f00 	ldrex	r3, [r3]
 800c242:	60fb      	str	r3, [r7, #12]
   return(result);
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	f023 0310 	bic.w	r3, r3, #16
 800c24a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	330c      	adds	r3, #12
 800c254:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c258:	61fa      	str	r2, [r7, #28]
 800c25a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c25c:	69b9      	ldr	r1, [r7, #24]
 800c25e:	69fa      	ldr	r2, [r7, #28]
 800c260:	e841 2300 	strex	r3, r2, [r1]
 800c264:	617b      	str	r3, [r7, #20]
   return(result);
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d1e3      	bne.n	800c234 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c270:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800c274:	4611      	mov	r1, r2
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c27a:	e023      	b.n	800c2c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c27c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c284:	2b00      	cmp	r3, #0
 800c286:	d009      	beq.n	800c29c <HAL_UART_IRQHandler+0x4f4>
 800c288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c28c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c290:	2b00      	cmp	r3, #0
 800c292:	d003      	beq.n	800c29c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f000 fa33 	bl	800c700 <UART_Transmit_IT>
    return;
 800c29a:	e014      	b.n	800c2c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c29c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d00e      	beq.n	800c2c6 <HAL_UART_IRQHandler+0x51e>
 800c2a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d008      	beq.n	800c2c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 fa73 	bl	800c7a0 <UART_EndTransmit_IT>
    return;
 800c2ba:	e004      	b.n	800c2c6 <HAL_UART_IRQHandler+0x51e>
    return;
 800c2bc:	bf00      	nop
 800c2be:	e002      	b.n	800c2c6 <HAL_UART_IRQHandler+0x51e>
      return;
 800c2c0:	bf00      	nop
 800c2c2:	e000      	b.n	800c2c6 <HAL_UART_IRQHandler+0x51e>
      return;
 800c2c4:	bf00      	nop
  }
}
 800c2c6:	37e8      	adds	r7, #232	; 0xe8
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}

0800c2cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b083      	sub	sp, #12
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c2d4:	bf00      	nop
 800c2d6:	370c      	adds	r7, #12
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2de:	4770      	bx	lr

0800c2e0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b083      	sub	sp, #12
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800c2e8:	bf00      	nop
 800c2ea:	370c      	adds	r7, #12
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f2:	4770      	bx	lr

0800c2f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b083      	sub	sp, #12
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c2fc:	bf00      	nop
 800c2fe:	370c      	adds	r7, #12
 800c300:	46bd      	mov	sp, r7
 800c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c306:	4770      	bx	lr

0800c308 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c308:	b480      	push	{r7}
 800c30a:	b083      	sub	sp, #12
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c310:	bf00      	nop
 800c312:	370c      	adds	r7, #12
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr

0800c31c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c324:	bf00      	nop
 800c326:	370c      	adds	r7, #12
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr

0800c330 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800c330:	b480      	push	{r7}
 800c332:	b083      	sub	sp, #12
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800c338:	bf00      	nop
 800c33a:	370c      	adds	r7, #12
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr

0800c344 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800c344:	b480      	push	{r7}
 800c346:	b083      	sub	sp, #12
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800c34c:	bf00      	nop
 800c34e:	370c      	adds	r7, #12
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr

0800c358 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800c358:	b480      	push	{r7}
 800c35a:	b083      	sub	sp, #12
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800c360:	bf00      	nop
 800c362:	370c      	adds	r7, #12
 800c364:	46bd      	mov	sp, r7
 800c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36a:	4770      	bx	lr

0800c36c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b083      	sub	sp, #12
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	460b      	mov	r3, r1
 800c376:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c378:	bf00      	nop
 800c37a:	370c      	adds	r7, #12
 800c37c:	46bd      	mov	sp, r7
 800c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c382:	4770      	bx	lr

0800c384 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800c384:	b480      	push	{r7}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	4a10      	ldr	r2, [pc, #64]	; (800c3d0 <UART_InitCallbacksToDefault+0x4c>)
 800c390:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	4a0f      	ldr	r2, [pc, #60]	; (800c3d4 <UART_InitCallbacksToDefault+0x50>)
 800c396:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	4a0f      	ldr	r2, [pc, #60]	; (800c3d8 <UART_InitCallbacksToDefault+0x54>)
 800c39c:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	4a0e      	ldr	r2, [pc, #56]	; (800c3dc <UART_InitCallbacksToDefault+0x58>)
 800c3a2:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	4a0e      	ldr	r2, [pc, #56]	; (800c3e0 <UART_InitCallbacksToDefault+0x5c>)
 800c3a8:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	4a0d      	ldr	r2, [pc, #52]	; (800c3e4 <UART_InitCallbacksToDefault+0x60>)
 800c3ae:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	4a0d      	ldr	r2, [pc, #52]	; (800c3e8 <UART_InitCallbacksToDefault+0x64>)
 800c3b4:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	4a0c      	ldr	r2, [pc, #48]	; (800c3ec <UART_InitCallbacksToDefault+0x68>)
 800c3ba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	4a0c      	ldr	r2, [pc, #48]	; (800c3f0 <UART_InitCallbacksToDefault+0x6c>)
 800c3c0:	669a      	str	r2, [r3, #104]	; 0x68

}
 800c3c2:	bf00      	nop
 800c3c4:	370c      	adds	r7, #12
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3cc:	4770      	bx	lr
 800c3ce:	bf00      	nop
 800c3d0:	0800c2e1 	.word	0x0800c2e1
 800c3d4:	0800c2cd 	.word	0x0800c2cd
 800c3d8:	0800c309 	.word	0x0800c309
 800c3dc:	0800c2f5 	.word	0x0800c2f5
 800c3e0:	0800c31d 	.word	0x0800c31d
 800c3e4:	0800c331 	.word	0x0800c331
 800c3e8:	0800c345 	.word	0x0800c345
 800c3ec:	0800c359 	.word	0x0800c359
 800c3f0:	0800c36d 	.word	0x0800c36d

0800c3f4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b090      	sub	sp, #64	; 0x40
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c400:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d137      	bne.n	800c480 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800c410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c412:	2200      	movs	r2, #0
 800c414:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	3314      	adds	r3, #20
 800c41c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c420:	e853 3f00 	ldrex	r3, [r3]
 800c424:	623b      	str	r3, [r7, #32]
   return(result);
 800c426:	6a3b      	ldr	r3, [r7, #32]
 800c428:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c42c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c42e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	3314      	adds	r3, #20
 800c434:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c436:	633a      	str	r2, [r7, #48]	; 0x30
 800c438:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c43a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c43c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c43e:	e841 2300 	strex	r3, r2, [r1]
 800c442:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c446:	2b00      	cmp	r3, #0
 800c448:	d1e5      	bne.n	800c416 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c44a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	330c      	adds	r3, #12
 800c450:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	e853 3f00 	ldrex	r3, [r3]
 800c458:	60fb      	str	r3, [r7, #12]
   return(result);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c460:	637b      	str	r3, [r7, #52]	; 0x34
 800c462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	330c      	adds	r3, #12
 800c468:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c46a:	61fa      	str	r2, [r7, #28]
 800c46c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c46e:	69b9      	ldr	r1, [r7, #24]
 800c470:	69fa      	ldr	r2, [r7, #28]
 800c472:	e841 2300 	strex	r3, r2, [r1]
 800c476:	617b      	str	r3, [r7, #20]
   return(result);
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d1e5      	bne.n	800c44a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c47e:	e003      	b.n	800c488 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800c480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c484:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c486:	4798      	blx	r3
}
 800c488:	bf00      	nop
 800c48a:	3740      	adds	r7, #64	; 0x40
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}

0800c490 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b084      	sub	sp, #16
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c49c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4a2:	68f8      	ldr	r0, [r7, #12]
 800c4a4:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4a6:	bf00      	nop
 800c4a8:	3710      	adds	r7, #16
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}

0800c4ae <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c4ae:	b580      	push	{r7, lr}
 800c4b0:	b084      	sub	sp, #16
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4be:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	695b      	ldr	r3, [r3, #20]
 800c4c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4ca:	2b80      	cmp	r3, #128	; 0x80
 800c4cc:	bf0c      	ite	eq
 800c4ce:	2301      	moveq	r3, #1
 800c4d0:	2300      	movne	r3, #0
 800c4d2:	b2db      	uxtb	r3, r3
 800c4d4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	2b21      	cmp	r3, #33	; 0x21
 800c4e0:	d108      	bne.n	800c4f4 <UART_DMAError+0x46>
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d005      	beq.n	800c4f4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800c4ee:	68b8      	ldr	r0, [r7, #8]
 800c4f0:	f000 f866 	bl	800c5c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	695b      	ldr	r3, [r3, #20]
 800c4fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4fe:	2b40      	cmp	r3, #64	; 0x40
 800c500:	bf0c      	ite	eq
 800c502:	2301      	moveq	r3, #1
 800c504:	2300      	movne	r3, #0
 800c506:	b2db      	uxtb	r3, r3
 800c508:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c510:	b2db      	uxtb	r3, r3
 800c512:	2b22      	cmp	r3, #34	; 0x22
 800c514:	d108      	bne.n	800c528 <UART_DMAError+0x7a>
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d005      	beq.n	800c528 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	2200      	movs	r2, #0
 800c520:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800c522:	68b8      	ldr	r0, [r7, #8]
 800c524:	f000 f874 	bl	800c610 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c52c:	f043 0210 	orr.w	r2, r3, #16
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c538:	68b8      	ldr	r0, [r7, #8]
 800c53a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c53c:	bf00      	nop
 800c53e:	3710      	adds	r7, #16
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}

0800c544 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c544:	b480      	push	{r7}
 800c546:	b085      	sub	sp, #20
 800c548:	af00      	add	r7, sp, #0
 800c54a:	60f8      	str	r0, [r7, #12]
 800c54c:	60b9      	str	r1, [r7, #8]
 800c54e:	4613      	mov	r3, r2
 800c550:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	68ba      	ldr	r2, [r7, #8]
 800c556:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	88fa      	ldrh	r2, [r7, #6]
 800c55c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	88fa      	ldrh	r2, [r7, #6]
 800c562:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2200      	movs	r2, #0
 800c568:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	2222      	movs	r2, #34	; 0x22
 800c56e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	2200      	movs	r2, #0
 800c576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	691b      	ldr	r3, [r3, #16]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d007      	beq.n	800c592 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	68da      	ldr	r2, [r3, #12]
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c590:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	695a      	ldr	r2, [r3, #20]
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f042 0201 	orr.w	r2, r2, #1
 800c5a0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	68da      	ldr	r2, [r3, #12]
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f042 0220 	orr.w	r2, r2, #32
 800c5b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c5b2:	2300      	movs	r3, #0
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3714      	adds	r7, #20
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5be:	4770      	bx	lr

0800c5c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b089      	sub	sp, #36	; 0x24
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	330c      	adds	r3, #12
 800c5ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	e853 3f00 	ldrex	r3, [r3]
 800c5d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c5de:	61fb      	str	r3, [r7, #28]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	330c      	adds	r3, #12
 800c5e6:	69fa      	ldr	r2, [r7, #28]
 800c5e8:	61ba      	str	r2, [r7, #24]
 800c5ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ec:	6979      	ldr	r1, [r7, #20]
 800c5ee:	69ba      	ldr	r2, [r7, #24]
 800c5f0:	e841 2300 	strex	r3, r2, [r1]
 800c5f4:	613b      	str	r3, [r7, #16]
   return(result);
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d1e5      	bne.n	800c5c8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2220      	movs	r2, #32
 800c600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800c604:	bf00      	nop
 800c606:	3724      	adds	r7, #36	; 0x24
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr

0800c610 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c610:	b480      	push	{r7}
 800c612:	b095      	sub	sp, #84	; 0x54
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	330c      	adds	r3, #12
 800c61e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c622:	e853 3f00 	ldrex	r3, [r3]
 800c626:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c62e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	330c      	adds	r3, #12
 800c636:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c638:	643a      	str	r2, [r7, #64]	; 0x40
 800c63a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c63c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c63e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c640:	e841 2300 	strex	r3, r2, [r1]
 800c644:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d1e5      	bne.n	800c618 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	3314      	adds	r3, #20
 800c652:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c654:	6a3b      	ldr	r3, [r7, #32]
 800c656:	e853 3f00 	ldrex	r3, [r3]
 800c65a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c65c:	69fb      	ldr	r3, [r7, #28]
 800c65e:	f023 0301 	bic.w	r3, r3, #1
 800c662:	64bb      	str	r3, [r7, #72]	; 0x48
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	3314      	adds	r3, #20
 800c66a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c66c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c66e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c670:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c674:	e841 2300 	strex	r3, r2, [r1]
 800c678:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d1e5      	bne.n	800c64c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c684:	2b01      	cmp	r3, #1
 800c686:	d119      	bne.n	800c6bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	330c      	adds	r3, #12
 800c68e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	e853 3f00 	ldrex	r3, [r3]
 800c696:	60bb      	str	r3, [r7, #8]
   return(result);
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	f023 0310 	bic.w	r3, r3, #16
 800c69e:	647b      	str	r3, [r7, #68]	; 0x44
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	330c      	adds	r3, #12
 800c6a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c6a8:	61ba      	str	r2, [r7, #24]
 800c6aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ac:	6979      	ldr	r1, [r7, #20]
 800c6ae:	69ba      	ldr	r2, [r7, #24]
 800c6b0:	e841 2300 	strex	r3, r2, [r1]
 800c6b4:	613b      	str	r3, [r7, #16]
   return(result);
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d1e5      	bne.n	800c688 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2220      	movs	r2, #32
 800c6c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c6ca:	bf00      	nop
 800c6cc:	3754      	adds	r7, #84	; 0x54
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d4:	4770      	bx	lr

0800c6d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c6d6:	b580      	push	{r7, lr}
 800c6d8:	b084      	sub	sp, #16
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6f4:	68f8      	ldr	r0, [r7, #12]
 800c6f6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6f8:	bf00      	nop
 800c6fa:	3710      	adds	r7, #16
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}

0800c700 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c700:	b480      	push	{r7}
 800c702:	b085      	sub	sp, #20
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c70e:	b2db      	uxtb	r3, r3
 800c710:	2b21      	cmp	r3, #33	; 0x21
 800c712:	d13e      	bne.n	800c792 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	689b      	ldr	r3, [r3, #8]
 800c718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c71c:	d114      	bne.n	800c748 <UART_Transmit_IT+0x48>
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	691b      	ldr	r3, [r3, #16]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d110      	bne.n	800c748 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6a1b      	ldr	r3, [r3, #32]
 800c72a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	881b      	ldrh	r3, [r3, #0]
 800c730:	461a      	mov	r2, r3
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c73a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6a1b      	ldr	r3, [r3, #32]
 800c740:	1c9a      	adds	r2, r3, #2
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	621a      	str	r2, [r3, #32]
 800c746:	e008      	b.n	800c75a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6a1b      	ldr	r3, [r3, #32]
 800c74c:	1c59      	adds	r1, r3, #1
 800c74e:	687a      	ldr	r2, [r7, #4]
 800c750:	6211      	str	r1, [r2, #32]
 800c752:	781a      	ldrb	r2, [r3, #0]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c75e:	b29b      	uxth	r3, r3
 800c760:	3b01      	subs	r3, #1
 800c762:	b29b      	uxth	r3, r3
 800c764:	687a      	ldr	r2, [r7, #4]
 800c766:	4619      	mov	r1, r3
 800c768:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d10f      	bne.n	800c78e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	68da      	ldr	r2, [r3, #12]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c77c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	68da      	ldr	r2, [r3, #12]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c78c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c78e:	2300      	movs	r3, #0
 800c790:	e000      	b.n	800c794 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c792:	2302      	movs	r3, #2
  }
}
 800c794:	4618      	mov	r0, r3
 800c796:	3714      	adds	r7, #20
 800c798:	46bd      	mov	sp, r7
 800c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79e:	4770      	bx	lr

0800c7a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	68da      	ldr	r2, [r3, #12]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c7b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2220      	movs	r2, #32
 800c7bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c7c8:	2300      	movs	r3, #0
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3708      	adds	r7, #8
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}

0800c7d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c7d2:	b580      	push	{r7, lr}
 800c7d4:	b08c      	sub	sp, #48	; 0x30
 800c7d6:	af00      	add	r7, sp, #0
 800c7d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c7e0:	b2db      	uxtb	r3, r3
 800c7e2:	2b22      	cmp	r3, #34	; 0x22
 800c7e4:	f040 80ad 	bne.w	800c942 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	689b      	ldr	r3, [r3, #8]
 800c7ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7f0:	d117      	bne.n	800c822 <UART_Receive_IT+0x50>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	691b      	ldr	r3, [r3, #16]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d113      	bne.n	800c822 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c802:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	685b      	ldr	r3, [r3, #4]
 800c80a:	b29b      	uxth	r3, r3
 800c80c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c810:	b29a      	uxth	r2, r3
 800c812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c814:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c81a:	1c9a      	adds	r2, r3, #2
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	629a      	str	r2, [r3, #40]	; 0x28
 800c820:	e026      	b.n	800c870 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c826:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c828:	2300      	movs	r3, #0
 800c82a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	689b      	ldr	r3, [r3, #8]
 800c830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c834:	d007      	beq.n	800c846 <UART_Receive_IT+0x74>
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	689b      	ldr	r3, [r3, #8]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d10a      	bne.n	800c854 <UART_Receive_IT+0x82>
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	691b      	ldr	r3, [r3, #16]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d106      	bne.n	800c854 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	685b      	ldr	r3, [r3, #4]
 800c84c:	b2da      	uxtb	r2, r3
 800c84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c850:	701a      	strb	r2, [r3, #0]
 800c852:	e008      	b.n	800c866 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	685b      	ldr	r3, [r3, #4]
 800c85a:	b2db      	uxtb	r3, r3
 800c85c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c860:	b2da      	uxtb	r2, r3
 800c862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c864:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c86a:	1c5a      	adds	r2, r3, #1
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c874:	b29b      	uxth	r3, r3
 800c876:	3b01      	subs	r3, #1
 800c878:	b29b      	uxth	r3, r3
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	4619      	mov	r1, r3
 800c87e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c880:	2b00      	cmp	r3, #0
 800c882:	d15c      	bne.n	800c93e <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	68da      	ldr	r2, [r3, #12]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f022 0220 	bic.w	r2, r2, #32
 800c892:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	68da      	ldr	r2, [r3, #12]
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c8a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	695a      	ldr	r2, [r3, #20]
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f022 0201 	bic.w	r2, r2, #1
 800c8b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2220      	movs	r2, #32
 800c8b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8c0:	2b01      	cmp	r3, #1
 800c8c2:	d136      	bne.n	800c932 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	330c      	adds	r3, #12
 800c8d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	e853 3f00 	ldrex	r3, [r3]
 800c8d8:	613b      	str	r3, [r7, #16]
   return(result);
 800c8da:	693b      	ldr	r3, [r7, #16]
 800c8dc:	f023 0310 	bic.w	r3, r3, #16
 800c8e0:	627b      	str	r3, [r7, #36]	; 0x24
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	330c      	adds	r3, #12
 800c8e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8ea:	623a      	str	r2, [r7, #32]
 800c8ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ee:	69f9      	ldr	r1, [r7, #28]
 800c8f0:	6a3a      	ldr	r2, [r7, #32]
 800c8f2:	e841 2300 	strex	r3, r2, [r1]
 800c8f6:	61bb      	str	r3, [r7, #24]
   return(result);
 800c8f8:	69bb      	ldr	r3, [r7, #24]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d1e5      	bne.n	800c8ca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f003 0310 	and.w	r3, r3, #16
 800c908:	2b10      	cmp	r3, #16
 800c90a:	d10a      	bne.n	800c922 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c90c:	2300      	movs	r3, #0
 800c90e:	60fb      	str	r3, [r7, #12]
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	60fb      	str	r3, [r7, #12]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	60fb      	str	r3, [r7, #12]
 800c920:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c926:	687a      	ldr	r2, [r7, #4]
 800c928:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800c92a:	4611      	mov	r1, r2
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	4798      	blx	r3
 800c930:	e003      	b.n	800c93a <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c93a:	2300      	movs	r3, #0
 800c93c:	e002      	b.n	800c944 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800c93e:	2300      	movs	r3, #0
 800c940:	e000      	b.n	800c944 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800c942:	2302      	movs	r3, #2
  }
}
 800c944:	4618      	mov	r0, r3
 800c946:	3730      	adds	r7, #48	; 0x30
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c94c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c950:	b0c0      	sub	sp, #256	; 0x100
 800c952:	af00      	add	r7, sp, #0
 800c954:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	691b      	ldr	r3, [r3, #16]
 800c960:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c968:	68d9      	ldr	r1, [r3, #12]
 800c96a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c96e:	681a      	ldr	r2, [r3, #0]
 800c970:	ea40 0301 	orr.w	r3, r0, r1
 800c974:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c97a:	689a      	ldr	r2, [r3, #8]
 800c97c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c980:	691b      	ldr	r3, [r3, #16]
 800c982:	431a      	orrs	r2, r3
 800c984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c988:	695b      	ldr	r3, [r3, #20]
 800c98a:	431a      	orrs	r2, r3
 800c98c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c990:	69db      	ldr	r3, [r3, #28]
 800c992:	4313      	orrs	r3, r2
 800c994:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	68db      	ldr	r3, [r3, #12]
 800c9a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c9a4:	f021 010c 	bic.w	r1, r1, #12
 800c9a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9ac:	681a      	ldr	r2, [r3, #0]
 800c9ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c9b2:	430b      	orrs	r3, r1
 800c9b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c9b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	695b      	ldr	r3, [r3, #20]
 800c9be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c9c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9c6:	6999      	ldr	r1, [r3, #24]
 800c9c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9cc:	681a      	ldr	r2, [r3, #0]
 800c9ce:	ea40 0301 	orr.w	r3, r0, r1
 800c9d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c9d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9d8:	681a      	ldr	r2, [r3, #0]
 800c9da:	4b8f      	ldr	r3, [pc, #572]	; (800cc18 <UART_SetConfig+0x2cc>)
 800c9dc:	429a      	cmp	r2, r3
 800c9de:	d005      	beq.n	800c9ec <UART_SetConfig+0xa0>
 800c9e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9e4:	681a      	ldr	r2, [r3, #0]
 800c9e6:	4b8d      	ldr	r3, [pc, #564]	; (800cc1c <UART_SetConfig+0x2d0>)
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d104      	bne.n	800c9f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c9ec:	f7fd fac8 	bl	8009f80 <HAL_RCC_GetPCLK2Freq>
 800c9f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c9f4:	e003      	b.n	800c9fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c9f6:	f7fd faaf 	bl	8009f58 <HAL_RCC_GetPCLK1Freq>
 800c9fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c9fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca02:	69db      	ldr	r3, [r3, #28]
 800ca04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca08:	f040 810c 	bne.w	800cc24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ca0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca10:	2200      	movs	r2, #0
 800ca12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ca16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ca1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ca1e:	4622      	mov	r2, r4
 800ca20:	462b      	mov	r3, r5
 800ca22:	1891      	adds	r1, r2, r2
 800ca24:	65b9      	str	r1, [r7, #88]	; 0x58
 800ca26:	415b      	adcs	r3, r3
 800ca28:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ca2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ca2e:	4621      	mov	r1, r4
 800ca30:	eb12 0801 	adds.w	r8, r2, r1
 800ca34:	4629      	mov	r1, r5
 800ca36:	eb43 0901 	adc.w	r9, r3, r1
 800ca3a:	f04f 0200 	mov.w	r2, #0
 800ca3e:	f04f 0300 	mov.w	r3, #0
 800ca42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ca46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ca4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ca4e:	4690      	mov	r8, r2
 800ca50:	4699      	mov	r9, r3
 800ca52:	4623      	mov	r3, r4
 800ca54:	eb18 0303 	adds.w	r3, r8, r3
 800ca58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ca5c:	462b      	mov	r3, r5
 800ca5e:	eb49 0303 	adc.w	r3, r9, r3
 800ca62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ca66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ca72:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ca76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ca7a:	460b      	mov	r3, r1
 800ca7c:	18db      	adds	r3, r3, r3
 800ca7e:	653b      	str	r3, [r7, #80]	; 0x50
 800ca80:	4613      	mov	r3, r2
 800ca82:	eb42 0303 	adc.w	r3, r2, r3
 800ca86:	657b      	str	r3, [r7, #84]	; 0x54
 800ca88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ca8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ca90:	f7f4 f8a6 	bl	8000be0 <__aeabi_uldivmod>
 800ca94:	4602      	mov	r2, r0
 800ca96:	460b      	mov	r3, r1
 800ca98:	4b61      	ldr	r3, [pc, #388]	; (800cc20 <UART_SetConfig+0x2d4>)
 800ca9a:	fba3 2302 	umull	r2, r3, r3, r2
 800ca9e:	095b      	lsrs	r3, r3, #5
 800caa0:	011c      	lsls	r4, r3, #4
 800caa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800caa6:	2200      	movs	r2, #0
 800caa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800caac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800cab0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800cab4:	4642      	mov	r2, r8
 800cab6:	464b      	mov	r3, r9
 800cab8:	1891      	adds	r1, r2, r2
 800caba:	64b9      	str	r1, [r7, #72]	; 0x48
 800cabc:	415b      	adcs	r3, r3
 800cabe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cac0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cac4:	4641      	mov	r1, r8
 800cac6:	eb12 0a01 	adds.w	sl, r2, r1
 800caca:	4649      	mov	r1, r9
 800cacc:	eb43 0b01 	adc.w	fp, r3, r1
 800cad0:	f04f 0200 	mov.w	r2, #0
 800cad4:	f04f 0300 	mov.w	r3, #0
 800cad8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cadc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cae0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cae4:	4692      	mov	sl, r2
 800cae6:	469b      	mov	fp, r3
 800cae8:	4643      	mov	r3, r8
 800caea:	eb1a 0303 	adds.w	r3, sl, r3
 800caee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800caf2:	464b      	mov	r3, r9
 800caf4:	eb4b 0303 	adc.w	r3, fp, r3
 800caf8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cafc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	2200      	movs	r2, #0
 800cb04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cb08:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800cb0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cb10:	460b      	mov	r3, r1
 800cb12:	18db      	adds	r3, r3, r3
 800cb14:	643b      	str	r3, [r7, #64]	; 0x40
 800cb16:	4613      	mov	r3, r2
 800cb18:	eb42 0303 	adc.w	r3, r2, r3
 800cb1c:	647b      	str	r3, [r7, #68]	; 0x44
 800cb1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cb22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800cb26:	f7f4 f85b 	bl	8000be0 <__aeabi_uldivmod>
 800cb2a:	4602      	mov	r2, r0
 800cb2c:	460b      	mov	r3, r1
 800cb2e:	4611      	mov	r1, r2
 800cb30:	4b3b      	ldr	r3, [pc, #236]	; (800cc20 <UART_SetConfig+0x2d4>)
 800cb32:	fba3 2301 	umull	r2, r3, r3, r1
 800cb36:	095b      	lsrs	r3, r3, #5
 800cb38:	2264      	movs	r2, #100	; 0x64
 800cb3a:	fb02 f303 	mul.w	r3, r2, r3
 800cb3e:	1acb      	subs	r3, r1, r3
 800cb40:	00db      	lsls	r3, r3, #3
 800cb42:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800cb46:	4b36      	ldr	r3, [pc, #216]	; (800cc20 <UART_SetConfig+0x2d4>)
 800cb48:	fba3 2302 	umull	r2, r3, r3, r2
 800cb4c:	095b      	lsrs	r3, r3, #5
 800cb4e:	005b      	lsls	r3, r3, #1
 800cb50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cb54:	441c      	add	r4, r3
 800cb56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cb60:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800cb64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800cb68:	4642      	mov	r2, r8
 800cb6a:	464b      	mov	r3, r9
 800cb6c:	1891      	adds	r1, r2, r2
 800cb6e:	63b9      	str	r1, [r7, #56]	; 0x38
 800cb70:	415b      	adcs	r3, r3
 800cb72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cb78:	4641      	mov	r1, r8
 800cb7a:	1851      	adds	r1, r2, r1
 800cb7c:	6339      	str	r1, [r7, #48]	; 0x30
 800cb7e:	4649      	mov	r1, r9
 800cb80:	414b      	adcs	r3, r1
 800cb82:	637b      	str	r3, [r7, #52]	; 0x34
 800cb84:	f04f 0200 	mov.w	r2, #0
 800cb88:	f04f 0300 	mov.w	r3, #0
 800cb8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800cb90:	4659      	mov	r1, fp
 800cb92:	00cb      	lsls	r3, r1, #3
 800cb94:	4651      	mov	r1, sl
 800cb96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cb9a:	4651      	mov	r1, sl
 800cb9c:	00ca      	lsls	r2, r1, #3
 800cb9e:	4610      	mov	r0, r2
 800cba0:	4619      	mov	r1, r3
 800cba2:	4603      	mov	r3, r0
 800cba4:	4642      	mov	r2, r8
 800cba6:	189b      	adds	r3, r3, r2
 800cba8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cbac:	464b      	mov	r3, r9
 800cbae:	460a      	mov	r2, r1
 800cbb0:	eb42 0303 	adc.w	r3, r2, r3
 800cbb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cbb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbbc:	685b      	ldr	r3, [r3, #4]
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cbc4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800cbc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800cbcc:	460b      	mov	r3, r1
 800cbce:	18db      	adds	r3, r3, r3
 800cbd0:	62bb      	str	r3, [r7, #40]	; 0x28
 800cbd2:	4613      	mov	r3, r2
 800cbd4:	eb42 0303 	adc.w	r3, r2, r3
 800cbd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cbde:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800cbe2:	f7f3 fffd 	bl	8000be0 <__aeabi_uldivmod>
 800cbe6:	4602      	mov	r2, r0
 800cbe8:	460b      	mov	r3, r1
 800cbea:	4b0d      	ldr	r3, [pc, #52]	; (800cc20 <UART_SetConfig+0x2d4>)
 800cbec:	fba3 1302 	umull	r1, r3, r3, r2
 800cbf0:	095b      	lsrs	r3, r3, #5
 800cbf2:	2164      	movs	r1, #100	; 0x64
 800cbf4:	fb01 f303 	mul.w	r3, r1, r3
 800cbf8:	1ad3      	subs	r3, r2, r3
 800cbfa:	00db      	lsls	r3, r3, #3
 800cbfc:	3332      	adds	r3, #50	; 0x32
 800cbfe:	4a08      	ldr	r2, [pc, #32]	; (800cc20 <UART_SetConfig+0x2d4>)
 800cc00:	fba2 2303 	umull	r2, r3, r2, r3
 800cc04:	095b      	lsrs	r3, r3, #5
 800cc06:	f003 0207 	and.w	r2, r3, #7
 800cc0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4422      	add	r2, r4
 800cc12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cc14:	e105      	b.n	800ce22 <UART_SetConfig+0x4d6>
 800cc16:	bf00      	nop
 800cc18:	40011000 	.word	0x40011000
 800cc1c:	40011400 	.word	0x40011400
 800cc20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cc24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cc28:	2200      	movs	r2, #0
 800cc2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cc2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800cc32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800cc36:	4642      	mov	r2, r8
 800cc38:	464b      	mov	r3, r9
 800cc3a:	1891      	adds	r1, r2, r2
 800cc3c:	6239      	str	r1, [r7, #32]
 800cc3e:	415b      	adcs	r3, r3
 800cc40:	627b      	str	r3, [r7, #36]	; 0x24
 800cc42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cc46:	4641      	mov	r1, r8
 800cc48:	1854      	adds	r4, r2, r1
 800cc4a:	4649      	mov	r1, r9
 800cc4c:	eb43 0501 	adc.w	r5, r3, r1
 800cc50:	f04f 0200 	mov.w	r2, #0
 800cc54:	f04f 0300 	mov.w	r3, #0
 800cc58:	00eb      	lsls	r3, r5, #3
 800cc5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cc5e:	00e2      	lsls	r2, r4, #3
 800cc60:	4614      	mov	r4, r2
 800cc62:	461d      	mov	r5, r3
 800cc64:	4643      	mov	r3, r8
 800cc66:	18e3      	adds	r3, r4, r3
 800cc68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cc6c:	464b      	mov	r3, r9
 800cc6e:	eb45 0303 	adc.w	r3, r5, r3
 800cc72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cc76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cc82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cc86:	f04f 0200 	mov.w	r2, #0
 800cc8a:	f04f 0300 	mov.w	r3, #0
 800cc8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800cc92:	4629      	mov	r1, r5
 800cc94:	008b      	lsls	r3, r1, #2
 800cc96:	4621      	mov	r1, r4
 800cc98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cc9c:	4621      	mov	r1, r4
 800cc9e:	008a      	lsls	r2, r1, #2
 800cca0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800cca4:	f7f3 ff9c 	bl	8000be0 <__aeabi_uldivmod>
 800cca8:	4602      	mov	r2, r0
 800ccaa:	460b      	mov	r3, r1
 800ccac:	4b60      	ldr	r3, [pc, #384]	; (800ce30 <UART_SetConfig+0x4e4>)
 800ccae:	fba3 2302 	umull	r2, r3, r3, r2
 800ccb2:	095b      	lsrs	r3, r3, #5
 800ccb4:	011c      	lsls	r4, r3, #4
 800ccb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ccba:	2200      	movs	r2, #0
 800ccbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ccc0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ccc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ccc8:	4642      	mov	r2, r8
 800ccca:	464b      	mov	r3, r9
 800cccc:	1891      	adds	r1, r2, r2
 800ccce:	61b9      	str	r1, [r7, #24]
 800ccd0:	415b      	adcs	r3, r3
 800ccd2:	61fb      	str	r3, [r7, #28]
 800ccd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ccd8:	4641      	mov	r1, r8
 800ccda:	1851      	adds	r1, r2, r1
 800ccdc:	6139      	str	r1, [r7, #16]
 800ccde:	4649      	mov	r1, r9
 800cce0:	414b      	adcs	r3, r1
 800cce2:	617b      	str	r3, [r7, #20]
 800cce4:	f04f 0200 	mov.w	r2, #0
 800cce8:	f04f 0300 	mov.w	r3, #0
 800ccec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ccf0:	4659      	mov	r1, fp
 800ccf2:	00cb      	lsls	r3, r1, #3
 800ccf4:	4651      	mov	r1, sl
 800ccf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ccfa:	4651      	mov	r1, sl
 800ccfc:	00ca      	lsls	r2, r1, #3
 800ccfe:	4610      	mov	r0, r2
 800cd00:	4619      	mov	r1, r3
 800cd02:	4603      	mov	r3, r0
 800cd04:	4642      	mov	r2, r8
 800cd06:	189b      	adds	r3, r3, r2
 800cd08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cd0c:	464b      	mov	r3, r9
 800cd0e:	460a      	mov	r2, r1
 800cd10:	eb42 0303 	adc.w	r3, r2, r3
 800cd14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cd18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd1c:	685b      	ldr	r3, [r3, #4]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	67bb      	str	r3, [r7, #120]	; 0x78
 800cd22:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cd24:	f04f 0200 	mov.w	r2, #0
 800cd28:	f04f 0300 	mov.w	r3, #0
 800cd2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800cd30:	4649      	mov	r1, r9
 800cd32:	008b      	lsls	r3, r1, #2
 800cd34:	4641      	mov	r1, r8
 800cd36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cd3a:	4641      	mov	r1, r8
 800cd3c:	008a      	lsls	r2, r1, #2
 800cd3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cd42:	f7f3 ff4d 	bl	8000be0 <__aeabi_uldivmod>
 800cd46:	4602      	mov	r2, r0
 800cd48:	460b      	mov	r3, r1
 800cd4a:	4b39      	ldr	r3, [pc, #228]	; (800ce30 <UART_SetConfig+0x4e4>)
 800cd4c:	fba3 1302 	umull	r1, r3, r3, r2
 800cd50:	095b      	lsrs	r3, r3, #5
 800cd52:	2164      	movs	r1, #100	; 0x64
 800cd54:	fb01 f303 	mul.w	r3, r1, r3
 800cd58:	1ad3      	subs	r3, r2, r3
 800cd5a:	011b      	lsls	r3, r3, #4
 800cd5c:	3332      	adds	r3, #50	; 0x32
 800cd5e:	4a34      	ldr	r2, [pc, #208]	; (800ce30 <UART_SetConfig+0x4e4>)
 800cd60:	fba2 2303 	umull	r2, r3, r2, r3
 800cd64:	095b      	lsrs	r3, r3, #5
 800cd66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd6a:	441c      	add	r4, r3
 800cd6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cd70:	2200      	movs	r2, #0
 800cd72:	673b      	str	r3, [r7, #112]	; 0x70
 800cd74:	677a      	str	r2, [r7, #116]	; 0x74
 800cd76:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800cd7a:	4642      	mov	r2, r8
 800cd7c:	464b      	mov	r3, r9
 800cd7e:	1891      	adds	r1, r2, r2
 800cd80:	60b9      	str	r1, [r7, #8]
 800cd82:	415b      	adcs	r3, r3
 800cd84:	60fb      	str	r3, [r7, #12]
 800cd86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cd8a:	4641      	mov	r1, r8
 800cd8c:	1851      	adds	r1, r2, r1
 800cd8e:	6039      	str	r1, [r7, #0]
 800cd90:	4649      	mov	r1, r9
 800cd92:	414b      	adcs	r3, r1
 800cd94:	607b      	str	r3, [r7, #4]
 800cd96:	f04f 0200 	mov.w	r2, #0
 800cd9a:	f04f 0300 	mov.w	r3, #0
 800cd9e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cda2:	4659      	mov	r1, fp
 800cda4:	00cb      	lsls	r3, r1, #3
 800cda6:	4651      	mov	r1, sl
 800cda8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cdac:	4651      	mov	r1, sl
 800cdae:	00ca      	lsls	r2, r1, #3
 800cdb0:	4610      	mov	r0, r2
 800cdb2:	4619      	mov	r1, r3
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	4642      	mov	r2, r8
 800cdb8:	189b      	adds	r3, r3, r2
 800cdba:	66bb      	str	r3, [r7, #104]	; 0x68
 800cdbc:	464b      	mov	r3, r9
 800cdbe:	460a      	mov	r2, r1
 800cdc0:	eb42 0303 	adc.w	r3, r2, r3
 800cdc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cdc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdca:	685b      	ldr	r3, [r3, #4]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	663b      	str	r3, [r7, #96]	; 0x60
 800cdd0:	667a      	str	r2, [r7, #100]	; 0x64
 800cdd2:	f04f 0200 	mov.w	r2, #0
 800cdd6:	f04f 0300 	mov.w	r3, #0
 800cdda:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800cdde:	4649      	mov	r1, r9
 800cde0:	008b      	lsls	r3, r1, #2
 800cde2:	4641      	mov	r1, r8
 800cde4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cde8:	4641      	mov	r1, r8
 800cdea:	008a      	lsls	r2, r1, #2
 800cdec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800cdf0:	f7f3 fef6 	bl	8000be0 <__aeabi_uldivmod>
 800cdf4:	4602      	mov	r2, r0
 800cdf6:	460b      	mov	r3, r1
 800cdf8:	4b0d      	ldr	r3, [pc, #52]	; (800ce30 <UART_SetConfig+0x4e4>)
 800cdfa:	fba3 1302 	umull	r1, r3, r3, r2
 800cdfe:	095b      	lsrs	r3, r3, #5
 800ce00:	2164      	movs	r1, #100	; 0x64
 800ce02:	fb01 f303 	mul.w	r3, r1, r3
 800ce06:	1ad3      	subs	r3, r2, r3
 800ce08:	011b      	lsls	r3, r3, #4
 800ce0a:	3332      	adds	r3, #50	; 0x32
 800ce0c:	4a08      	ldr	r2, [pc, #32]	; (800ce30 <UART_SetConfig+0x4e4>)
 800ce0e:	fba2 2303 	umull	r2, r3, r2, r3
 800ce12:	095b      	lsrs	r3, r3, #5
 800ce14:	f003 020f 	and.w	r2, r3, #15
 800ce18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	4422      	add	r2, r4
 800ce20:	609a      	str	r2, [r3, #8]
}
 800ce22:	bf00      	nop
 800ce24:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ce2e:	bf00      	nop
 800ce30:	51eb851f 	.word	0x51eb851f

0800ce34 <__errno>:
 800ce34:	4b01      	ldr	r3, [pc, #4]	; (800ce3c <__errno+0x8>)
 800ce36:	6818      	ldr	r0, [r3, #0]
 800ce38:	4770      	bx	lr
 800ce3a:	bf00      	nop
 800ce3c:	20000240 	.word	0x20000240

0800ce40 <__libc_init_array>:
 800ce40:	b570      	push	{r4, r5, r6, lr}
 800ce42:	4d0d      	ldr	r5, [pc, #52]	; (800ce78 <__libc_init_array+0x38>)
 800ce44:	4c0d      	ldr	r4, [pc, #52]	; (800ce7c <__libc_init_array+0x3c>)
 800ce46:	1b64      	subs	r4, r4, r5
 800ce48:	10a4      	asrs	r4, r4, #2
 800ce4a:	2600      	movs	r6, #0
 800ce4c:	42a6      	cmp	r6, r4
 800ce4e:	d109      	bne.n	800ce64 <__libc_init_array+0x24>
 800ce50:	4d0b      	ldr	r5, [pc, #44]	; (800ce80 <__libc_init_array+0x40>)
 800ce52:	4c0c      	ldr	r4, [pc, #48]	; (800ce84 <__libc_init_array+0x44>)
 800ce54:	f002 fb78 	bl	800f548 <_init>
 800ce58:	1b64      	subs	r4, r4, r5
 800ce5a:	10a4      	asrs	r4, r4, #2
 800ce5c:	2600      	movs	r6, #0
 800ce5e:	42a6      	cmp	r6, r4
 800ce60:	d105      	bne.n	800ce6e <__libc_init_array+0x2e>
 800ce62:	bd70      	pop	{r4, r5, r6, pc}
 800ce64:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce68:	4798      	blx	r3
 800ce6a:	3601      	adds	r6, #1
 800ce6c:	e7ee      	b.n	800ce4c <__libc_init_array+0xc>
 800ce6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce72:	4798      	blx	r3
 800ce74:	3601      	adds	r6, #1
 800ce76:	e7f2      	b.n	800ce5e <__libc_init_array+0x1e>
 800ce78:	0800f858 	.word	0x0800f858
 800ce7c:	0800f858 	.word	0x0800f858
 800ce80:	0800f858 	.word	0x0800f858
 800ce84:	0800f85c 	.word	0x0800f85c

0800ce88 <memcpy>:
 800ce88:	440a      	add	r2, r1
 800ce8a:	4291      	cmp	r1, r2
 800ce8c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce90:	d100      	bne.n	800ce94 <memcpy+0xc>
 800ce92:	4770      	bx	lr
 800ce94:	b510      	push	{r4, lr}
 800ce96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce9e:	4291      	cmp	r1, r2
 800cea0:	d1f9      	bne.n	800ce96 <memcpy+0xe>
 800cea2:	bd10      	pop	{r4, pc}

0800cea4 <memset>:
 800cea4:	4402      	add	r2, r0
 800cea6:	4603      	mov	r3, r0
 800cea8:	4293      	cmp	r3, r2
 800ceaa:	d100      	bne.n	800ceae <memset+0xa>
 800ceac:	4770      	bx	lr
 800ceae:	f803 1b01 	strb.w	r1, [r3], #1
 800ceb2:	e7f9      	b.n	800cea8 <memset+0x4>
 800ceb4:	0000      	movs	r0, r0
	...

0800ceb8 <cos>:
 800ceb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ceba:	ec53 2b10 	vmov	r2, r3, d0
 800cebe:	4826      	ldr	r0, [pc, #152]	; (800cf58 <cos+0xa0>)
 800cec0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cec4:	4281      	cmp	r1, r0
 800cec6:	dc06      	bgt.n	800ced6 <cos+0x1e>
 800cec8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800cf50 <cos+0x98>
 800cecc:	b005      	add	sp, #20
 800cece:	f85d eb04 	ldr.w	lr, [sp], #4
 800ced2:	f001 bc71 	b.w	800e7b8 <__kernel_cos>
 800ced6:	4821      	ldr	r0, [pc, #132]	; (800cf5c <cos+0xa4>)
 800ced8:	4281      	cmp	r1, r0
 800ceda:	dd09      	ble.n	800cef0 <cos+0x38>
 800cedc:	ee10 0a10 	vmov	r0, s0
 800cee0:	4619      	mov	r1, r3
 800cee2:	f7f3 f97d 	bl	80001e0 <__aeabi_dsub>
 800cee6:	ec41 0b10 	vmov	d0, r0, r1
 800ceea:	b005      	add	sp, #20
 800ceec:	f85d fb04 	ldr.w	pc, [sp], #4
 800cef0:	4668      	mov	r0, sp
 800cef2:	f000 fed1 	bl	800dc98 <__ieee754_rem_pio2>
 800cef6:	f000 0003 	and.w	r0, r0, #3
 800cefa:	2801      	cmp	r0, #1
 800cefc:	d00b      	beq.n	800cf16 <cos+0x5e>
 800cefe:	2802      	cmp	r0, #2
 800cf00:	d016      	beq.n	800cf30 <cos+0x78>
 800cf02:	b9e0      	cbnz	r0, 800cf3e <cos+0x86>
 800cf04:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cf08:	ed9d 0b00 	vldr	d0, [sp]
 800cf0c:	f001 fc54 	bl	800e7b8 <__kernel_cos>
 800cf10:	ec51 0b10 	vmov	r0, r1, d0
 800cf14:	e7e7      	b.n	800cee6 <cos+0x2e>
 800cf16:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cf1a:	ed9d 0b00 	vldr	d0, [sp]
 800cf1e:	f002 f863 	bl	800efe8 <__kernel_sin>
 800cf22:	ec53 2b10 	vmov	r2, r3, d0
 800cf26:	ee10 0a10 	vmov	r0, s0
 800cf2a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cf2e:	e7da      	b.n	800cee6 <cos+0x2e>
 800cf30:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cf34:	ed9d 0b00 	vldr	d0, [sp]
 800cf38:	f001 fc3e 	bl	800e7b8 <__kernel_cos>
 800cf3c:	e7f1      	b.n	800cf22 <cos+0x6a>
 800cf3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cf42:	ed9d 0b00 	vldr	d0, [sp]
 800cf46:	2001      	movs	r0, #1
 800cf48:	f002 f84e 	bl	800efe8 <__kernel_sin>
 800cf4c:	e7e0      	b.n	800cf10 <cos+0x58>
 800cf4e:	bf00      	nop
	...
 800cf58:	3fe921fb 	.word	0x3fe921fb
 800cf5c:	7fefffff 	.word	0x7fefffff

0800cf60 <sin>:
 800cf60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf62:	ec53 2b10 	vmov	r2, r3, d0
 800cf66:	4828      	ldr	r0, [pc, #160]	; (800d008 <sin+0xa8>)
 800cf68:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cf6c:	4281      	cmp	r1, r0
 800cf6e:	dc07      	bgt.n	800cf80 <sin+0x20>
 800cf70:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800d000 <sin+0xa0>
 800cf74:	2000      	movs	r0, #0
 800cf76:	b005      	add	sp, #20
 800cf78:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf7c:	f002 b834 	b.w	800efe8 <__kernel_sin>
 800cf80:	4822      	ldr	r0, [pc, #136]	; (800d00c <sin+0xac>)
 800cf82:	4281      	cmp	r1, r0
 800cf84:	dd09      	ble.n	800cf9a <sin+0x3a>
 800cf86:	ee10 0a10 	vmov	r0, s0
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	f7f3 f928 	bl	80001e0 <__aeabi_dsub>
 800cf90:	ec41 0b10 	vmov	d0, r0, r1
 800cf94:	b005      	add	sp, #20
 800cf96:	f85d fb04 	ldr.w	pc, [sp], #4
 800cf9a:	4668      	mov	r0, sp
 800cf9c:	f000 fe7c 	bl	800dc98 <__ieee754_rem_pio2>
 800cfa0:	f000 0003 	and.w	r0, r0, #3
 800cfa4:	2801      	cmp	r0, #1
 800cfa6:	d00c      	beq.n	800cfc2 <sin+0x62>
 800cfa8:	2802      	cmp	r0, #2
 800cfaa:	d011      	beq.n	800cfd0 <sin+0x70>
 800cfac:	b9f0      	cbnz	r0, 800cfec <sin+0x8c>
 800cfae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cfb2:	ed9d 0b00 	vldr	d0, [sp]
 800cfb6:	2001      	movs	r0, #1
 800cfb8:	f002 f816 	bl	800efe8 <__kernel_sin>
 800cfbc:	ec51 0b10 	vmov	r0, r1, d0
 800cfc0:	e7e6      	b.n	800cf90 <sin+0x30>
 800cfc2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cfc6:	ed9d 0b00 	vldr	d0, [sp]
 800cfca:	f001 fbf5 	bl	800e7b8 <__kernel_cos>
 800cfce:	e7f5      	b.n	800cfbc <sin+0x5c>
 800cfd0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cfd4:	ed9d 0b00 	vldr	d0, [sp]
 800cfd8:	2001      	movs	r0, #1
 800cfda:	f002 f805 	bl	800efe8 <__kernel_sin>
 800cfde:	ec53 2b10 	vmov	r2, r3, d0
 800cfe2:	ee10 0a10 	vmov	r0, s0
 800cfe6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cfea:	e7d1      	b.n	800cf90 <sin+0x30>
 800cfec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cff0:	ed9d 0b00 	vldr	d0, [sp]
 800cff4:	f001 fbe0 	bl	800e7b8 <__kernel_cos>
 800cff8:	e7f1      	b.n	800cfde <sin+0x7e>
 800cffa:	bf00      	nop
 800cffc:	f3af 8000 	nop.w
	...
 800d008:	3fe921fb 	.word	0x3fe921fb
 800d00c:	7fefffff 	.word	0x7fefffff

0800d010 <pow>:
 800d010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d012:	ed2d 8b02 	vpush	{d8}
 800d016:	eeb0 8a40 	vmov.f32	s16, s0
 800d01a:	eef0 8a60 	vmov.f32	s17, s1
 800d01e:	ec55 4b11 	vmov	r4, r5, d1
 800d022:	f000 f909 	bl	800d238 <__ieee754_pow>
 800d026:	4622      	mov	r2, r4
 800d028:	462b      	mov	r3, r5
 800d02a:	4620      	mov	r0, r4
 800d02c:	4629      	mov	r1, r5
 800d02e:	ec57 6b10 	vmov	r6, r7, d0
 800d032:	f7f3 fd27 	bl	8000a84 <__aeabi_dcmpun>
 800d036:	2800      	cmp	r0, #0
 800d038:	d13b      	bne.n	800d0b2 <pow+0xa2>
 800d03a:	ec51 0b18 	vmov	r0, r1, d8
 800d03e:	2200      	movs	r2, #0
 800d040:	2300      	movs	r3, #0
 800d042:	f7f3 fced 	bl	8000a20 <__aeabi_dcmpeq>
 800d046:	b1b8      	cbz	r0, 800d078 <pow+0x68>
 800d048:	2200      	movs	r2, #0
 800d04a:	2300      	movs	r3, #0
 800d04c:	4620      	mov	r0, r4
 800d04e:	4629      	mov	r1, r5
 800d050:	f7f3 fce6 	bl	8000a20 <__aeabi_dcmpeq>
 800d054:	2800      	cmp	r0, #0
 800d056:	d146      	bne.n	800d0e6 <pow+0xd6>
 800d058:	ec45 4b10 	vmov	d0, r4, r5
 800d05c:	f002 f8dd 	bl	800f21a <finite>
 800d060:	b338      	cbz	r0, 800d0b2 <pow+0xa2>
 800d062:	2200      	movs	r2, #0
 800d064:	2300      	movs	r3, #0
 800d066:	4620      	mov	r0, r4
 800d068:	4629      	mov	r1, r5
 800d06a:	f7f3 fce3 	bl	8000a34 <__aeabi_dcmplt>
 800d06e:	b300      	cbz	r0, 800d0b2 <pow+0xa2>
 800d070:	f7ff fee0 	bl	800ce34 <__errno>
 800d074:	2322      	movs	r3, #34	; 0x22
 800d076:	e01b      	b.n	800d0b0 <pow+0xa0>
 800d078:	ec47 6b10 	vmov	d0, r6, r7
 800d07c:	f002 f8cd 	bl	800f21a <finite>
 800d080:	b9e0      	cbnz	r0, 800d0bc <pow+0xac>
 800d082:	eeb0 0a48 	vmov.f32	s0, s16
 800d086:	eef0 0a68 	vmov.f32	s1, s17
 800d08a:	f002 f8c6 	bl	800f21a <finite>
 800d08e:	b1a8      	cbz	r0, 800d0bc <pow+0xac>
 800d090:	ec45 4b10 	vmov	d0, r4, r5
 800d094:	f002 f8c1 	bl	800f21a <finite>
 800d098:	b180      	cbz	r0, 800d0bc <pow+0xac>
 800d09a:	4632      	mov	r2, r6
 800d09c:	463b      	mov	r3, r7
 800d09e:	4630      	mov	r0, r6
 800d0a0:	4639      	mov	r1, r7
 800d0a2:	f7f3 fcef 	bl	8000a84 <__aeabi_dcmpun>
 800d0a6:	2800      	cmp	r0, #0
 800d0a8:	d0e2      	beq.n	800d070 <pow+0x60>
 800d0aa:	f7ff fec3 	bl	800ce34 <__errno>
 800d0ae:	2321      	movs	r3, #33	; 0x21
 800d0b0:	6003      	str	r3, [r0, #0]
 800d0b2:	ecbd 8b02 	vpop	{d8}
 800d0b6:	ec47 6b10 	vmov	d0, r6, r7
 800d0ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0bc:	2200      	movs	r2, #0
 800d0be:	2300      	movs	r3, #0
 800d0c0:	4630      	mov	r0, r6
 800d0c2:	4639      	mov	r1, r7
 800d0c4:	f7f3 fcac 	bl	8000a20 <__aeabi_dcmpeq>
 800d0c8:	2800      	cmp	r0, #0
 800d0ca:	d0f2      	beq.n	800d0b2 <pow+0xa2>
 800d0cc:	eeb0 0a48 	vmov.f32	s0, s16
 800d0d0:	eef0 0a68 	vmov.f32	s1, s17
 800d0d4:	f002 f8a1 	bl	800f21a <finite>
 800d0d8:	2800      	cmp	r0, #0
 800d0da:	d0ea      	beq.n	800d0b2 <pow+0xa2>
 800d0dc:	ec45 4b10 	vmov	d0, r4, r5
 800d0e0:	f002 f89b 	bl	800f21a <finite>
 800d0e4:	e7c3      	b.n	800d06e <pow+0x5e>
 800d0e6:	4f01      	ldr	r7, [pc, #4]	; (800d0ec <pow+0xdc>)
 800d0e8:	2600      	movs	r6, #0
 800d0ea:	e7e2      	b.n	800d0b2 <pow+0xa2>
 800d0ec:	3ff00000 	.word	0x3ff00000

0800d0f0 <sqrt>:
 800d0f0:	b538      	push	{r3, r4, r5, lr}
 800d0f2:	ed2d 8b02 	vpush	{d8}
 800d0f6:	ec55 4b10 	vmov	r4, r5, d0
 800d0fa:	f000 ffd9 	bl	800e0b0 <__ieee754_sqrt>
 800d0fe:	4622      	mov	r2, r4
 800d100:	462b      	mov	r3, r5
 800d102:	4620      	mov	r0, r4
 800d104:	4629      	mov	r1, r5
 800d106:	eeb0 8a40 	vmov.f32	s16, s0
 800d10a:	eef0 8a60 	vmov.f32	s17, s1
 800d10e:	f7f3 fcb9 	bl	8000a84 <__aeabi_dcmpun>
 800d112:	b990      	cbnz	r0, 800d13a <sqrt+0x4a>
 800d114:	2200      	movs	r2, #0
 800d116:	2300      	movs	r3, #0
 800d118:	4620      	mov	r0, r4
 800d11a:	4629      	mov	r1, r5
 800d11c:	f7f3 fc8a 	bl	8000a34 <__aeabi_dcmplt>
 800d120:	b158      	cbz	r0, 800d13a <sqrt+0x4a>
 800d122:	f7ff fe87 	bl	800ce34 <__errno>
 800d126:	2321      	movs	r3, #33	; 0x21
 800d128:	6003      	str	r3, [r0, #0]
 800d12a:	2200      	movs	r2, #0
 800d12c:	2300      	movs	r3, #0
 800d12e:	4610      	mov	r0, r2
 800d130:	4619      	mov	r1, r3
 800d132:	f7f3 fb37 	bl	80007a4 <__aeabi_ddiv>
 800d136:	ec41 0b18 	vmov	d8, r0, r1
 800d13a:	eeb0 0a48 	vmov.f32	s0, s16
 800d13e:	eef0 0a68 	vmov.f32	s1, s17
 800d142:	ecbd 8b02 	vpop	{d8}
 800d146:	bd38      	pop	{r3, r4, r5, pc}

0800d148 <powf>:
 800d148:	b508      	push	{r3, lr}
 800d14a:	ed2d 8b04 	vpush	{d8-d9}
 800d14e:	eeb0 8a60 	vmov.f32	s16, s1
 800d152:	eeb0 9a40 	vmov.f32	s18, s0
 800d156:	f001 f85d 	bl	800e214 <__ieee754_powf>
 800d15a:	eeb4 8a48 	vcmp.f32	s16, s16
 800d15e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d162:	eef0 8a40 	vmov.f32	s17, s0
 800d166:	d63e      	bvs.n	800d1e6 <powf+0x9e>
 800d168:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800d16c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d170:	d112      	bne.n	800d198 <powf+0x50>
 800d172:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d17a:	d039      	beq.n	800d1f0 <powf+0xa8>
 800d17c:	eeb0 0a48 	vmov.f32	s0, s16
 800d180:	f002 f963 	bl	800f44a <finitef>
 800d184:	b378      	cbz	r0, 800d1e6 <powf+0x9e>
 800d186:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d18a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d18e:	d52a      	bpl.n	800d1e6 <powf+0x9e>
 800d190:	f7ff fe50 	bl	800ce34 <__errno>
 800d194:	2322      	movs	r3, #34	; 0x22
 800d196:	e014      	b.n	800d1c2 <powf+0x7a>
 800d198:	f002 f957 	bl	800f44a <finitef>
 800d19c:	b998      	cbnz	r0, 800d1c6 <powf+0x7e>
 800d19e:	eeb0 0a49 	vmov.f32	s0, s18
 800d1a2:	f002 f952 	bl	800f44a <finitef>
 800d1a6:	b170      	cbz	r0, 800d1c6 <powf+0x7e>
 800d1a8:	eeb0 0a48 	vmov.f32	s0, s16
 800d1ac:	f002 f94d 	bl	800f44a <finitef>
 800d1b0:	b148      	cbz	r0, 800d1c6 <powf+0x7e>
 800d1b2:	eef4 8a68 	vcmp.f32	s17, s17
 800d1b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1ba:	d7e9      	bvc.n	800d190 <powf+0x48>
 800d1bc:	f7ff fe3a 	bl	800ce34 <__errno>
 800d1c0:	2321      	movs	r3, #33	; 0x21
 800d1c2:	6003      	str	r3, [r0, #0]
 800d1c4:	e00f      	b.n	800d1e6 <powf+0x9e>
 800d1c6:	eef5 8a40 	vcmp.f32	s17, #0.0
 800d1ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1ce:	d10a      	bne.n	800d1e6 <powf+0x9e>
 800d1d0:	eeb0 0a49 	vmov.f32	s0, s18
 800d1d4:	f002 f939 	bl	800f44a <finitef>
 800d1d8:	b128      	cbz	r0, 800d1e6 <powf+0x9e>
 800d1da:	eeb0 0a48 	vmov.f32	s0, s16
 800d1de:	f002 f934 	bl	800f44a <finitef>
 800d1e2:	2800      	cmp	r0, #0
 800d1e4:	d1d4      	bne.n	800d190 <powf+0x48>
 800d1e6:	eeb0 0a68 	vmov.f32	s0, s17
 800d1ea:	ecbd 8b04 	vpop	{d8-d9}
 800d1ee:	bd08      	pop	{r3, pc}
 800d1f0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800d1f4:	e7f7      	b.n	800d1e6 <powf+0x9e>
	...

0800d1f8 <sqrtf>:
 800d1f8:	b508      	push	{r3, lr}
 800d1fa:	ed2d 8b02 	vpush	{d8}
 800d1fe:	eeb0 8a40 	vmov.f32	s16, s0
 800d202:	f001 fad5 	bl	800e7b0 <__ieee754_sqrtf>
 800d206:	eeb4 8a48 	vcmp.f32	s16, s16
 800d20a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d20e:	d60c      	bvs.n	800d22a <sqrtf+0x32>
 800d210:	eddf 8a07 	vldr	s17, [pc, #28]	; 800d230 <sqrtf+0x38>
 800d214:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d21c:	d505      	bpl.n	800d22a <sqrtf+0x32>
 800d21e:	f7ff fe09 	bl	800ce34 <__errno>
 800d222:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d226:	2321      	movs	r3, #33	; 0x21
 800d228:	6003      	str	r3, [r0, #0]
 800d22a:	ecbd 8b02 	vpop	{d8}
 800d22e:	bd08      	pop	{r3, pc}
	...

0800d238 <__ieee754_pow>:
 800d238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d23c:	ed2d 8b06 	vpush	{d8-d10}
 800d240:	b089      	sub	sp, #36	; 0x24
 800d242:	ed8d 1b00 	vstr	d1, [sp]
 800d246:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d24a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d24e:	ea58 0102 	orrs.w	r1, r8, r2
 800d252:	ec57 6b10 	vmov	r6, r7, d0
 800d256:	d115      	bne.n	800d284 <__ieee754_pow+0x4c>
 800d258:	19b3      	adds	r3, r6, r6
 800d25a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800d25e:	4152      	adcs	r2, r2
 800d260:	4299      	cmp	r1, r3
 800d262:	4b89      	ldr	r3, [pc, #548]	; (800d488 <__ieee754_pow+0x250>)
 800d264:	4193      	sbcs	r3, r2
 800d266:	f080 84d2 	bcs.w	800dc0e <__ieee754_pow+0x9d6>
 800d26a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d26e:	4630      	mov	r0, r6
 800d270:	4639      	mov	r1, r7
 800d272:	f7f2 ffb7 	bl	80001e4 <__adddf3>
 800d276:	ec41 0b10 	vmov	d0, r0, r1
 800d27a:	b009      	add	sp, #36	; 0x24
 800d27c:	ecbd 8b06 	vpop	{d8-d10}
 800d280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d284:	4b81      	ldr	r3, [pc, #516]	; (800d48c <__ieee754_pow+0x254>)
 800d286:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800d28a:	429c      	cmp	r4, r3
 800d28c:	ee10 aa10 	vmov	sl, s0
 800d290:	463d      	mov	r5, r7
 800d292:	dc06      	bgt.n	800d2a2 <__ieee754_pow+0x6a>
 800d294:	d101      	bne.n	800d29a <__ieee754_pow+0x62>
 800d296:	2e00      	cmp	r6, #0
 800d298:	d1e7      	bne.n	800d26a <__ieee754_pow+0x32>
 800d29a:	4598      	cmp	r8, r3
 800d29c:	dc01      	bgt.n	800d2a2 <__ieee754_pow+0x6a>
 800d29e:	d10f      	bne.n	800d2c0 <__ieee754_pow+0x88>
 800d2a0:	b172      	cbz	r2, 800d2c0 <__ieee754_pow+0x88>
 800d2a2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800d2a6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800d2aa:	ea55 050a 	orrs.w	r5, r5, sl
 800d2ae:	d1dc      	bne.n	800d26a <__ieee754_pow+0x32>
 800d2b0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d2b4:	18db      	adds	r3, r3, r3
 800d2b6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800d2ba:	4152      	adcs	r2, r2
 800d2bc:	429d      	cmp	r5, r3
 800d2be:	e7d0      	b.n	800d262 <__ieee754_pow+0x2a>
 800d2c0:	2d00      	cmp	r5, #0
 800d2c2:	da3b      	bge.n	800d33c <__ieee754_pow+0x104>
 800d2c4:	4b72      	ldr	r3, [pc, #456]	; (800d490 <__ieee754_pow+0x258>)
 800d2c6:	4598      	cmp	r8, r3
 800d2c8:	dc51      	bgt.n	800d36e <__ieee754_pow+0x136>
 800d2ca:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d2ce:	4598      	cmp	r8, r3
 800d2d0:	f340 84ac 	ble.w	800dc2c <__ieee754_pow+0x9f4>
 800d2d4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d2d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d2dc:	2b14      	cmp	r3, #20
 800d2de:	dd0f      	ble.n	800d300 <__ieee754_pow+0xc8>
 800d2e0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d2e4:	fa22 f103 	lsr.w	r1, r2, r3
 800d2e8:	fa01 f303 	lsl.w	r3, r1, r3
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	f040 849d 	bne.w	800dc2c <__ieee754_pow+0x9f4>
 800d2f2:	f001 0101 	and.w	r1, r1, #1
 800d2f6:	f1c1 0302 	rsb	r3, r1, #2
 800d2fa:	9304      	str	r3, [sp, #16]
 800d2fc:	b182      	cbz	r2, 800d320 <__ieee754_pow+0xe8>
 800d2fe:	e05f      	b.n	800d3c0 <__ieee754_pow+0x188>
 800d300:	2a00      	cmp	r2, #0
 800d302:	d15b      	bne.n	800d3bc <__ieee754_pow+0x184>
 800d304:	f1c3 0314 	rsb	r3, r3, #20
 800d308:	fa48 f103 	asr.w	r1, r8, r3
 800d30c:	fa01 f303 	lsl.w	r3, r1, r3
 800d310:	4543      	cmp	r3, r8
 800d312:	f040 8488 	bne.w	800dc26 <__ieee754_pow+0x9ee>
 800d316:	f001 0101 	and.w	r1, r1, #1
 800d31a:	f1c1 0302 	rsb	r3, r1, #2
 800d31e:	9304      	str	r3, [sp, #16]
 800d320:	4b5c      	ldr	r3, [pc, #368]	; (800d494 <__ieee754_pow+0x25c>)
 800d322:	4598      	cmp	r8, r3
 800d324:	d132      	bne.n	800d38c <__ieee754_pow+0x154>
 800d326:	f1b9 0f00 	cmp.w	r9, #0
 800d32a:	f280 8478 	bge.w	800dc1e <__ieee754_pow+0x9e6>
 800d32e:	4959      	ldr	r1, [pc, #356]	; (800d494 <__ieee754_pow+0x25c>)
 800d330:	4632      	mov	r2, r6
 800d332:	463b      	mov	r3, r7
 800d334:	2000      	movs	r0, #0
 800d336:	f7f3 fa35 	bl	80007a4 <__aeabi_ddiv>
 800d33a:	e79c      	b.n	800d276 <__ieee754_pow+0x3e>
 800d33c:	2300      	movs	r3, #0
 800d33e:	9304      	str	r3, [sp, #16]
 800d340:	2a00      	cmp	r2, #0
 800d342:	d13d      	bne.n	800d3c0 <__ieee754_pow+0x188>
 800d344:	4b51      	ldr	r3, [pc, #324]	; (800d48c <__ieee754_pow+0x254>)
 800d346:	4598      	cmp	r8, r3
 800d348:	d1ea      	bne.n	800d320 <__ieee754_pow+0xe8>
 800d34a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d34e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d352:	ea53 030a 	orrs.w	r3, r3, sl
 800d356:	f000 845a 	beq.w	800dc0e <__ieee754_pow+0x9d6>
 800d35a:	4b4f      	ldr	r3, [pc, #316]	; (800d498 <__ieee754_pow+0x260>)
 800d35c:	429c      	cmp	r4, r3
 800d35e:	dd08      	ble.n	800d372 <__ieee754_pow+0x13a>
 800d360:	f1b9 0f00 	cmp.w	r9, #0
 800d364:	f2c0 8457 	blt.w	800dc16 <__ieee754_pow+0x9de>
 800d368:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d36c:	e783      	b.n	800d276 <__ieee754_pow+0x3e>
 800d36e:	2302      	movs	r3, #2
 800d370:	e7e5      	b.n	800d33e <__ieee754_pow+0x106>
 800d372:	f1b9 0f00 	cmp.w	r9, #0
 800d376:	f04f 0000 	mov.w	r0, #0
 800d37a:	f04f 0100 	mov.w	r1, #0
 800d37e:	f6bf af7a 	bge.w	800d276 <__ieee754_pow+0x3e>
 800d382:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d386:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d38a:	e774      	b.n	800d276 <__ieee754_pow+0x3e>
 800d38c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d390:	d106      	bne.n	800d3a0 <__ieee754_pow+0x168>
 800d392:	4632      	mov	r2, r6
 800d394:	463b      	mov	r3, r7
 800d396:	4630      	mov	r0, r6
 800d398:	4639      	mov	r1, r7
 800d39a:	f7f3 f8d9 	bl	8000550 <__aeabi_dmul>
 800d39e:	e76a      	b.n	800d276 <__ieee754_pow+0x3e>
 800d3a0:	4b3e      	ldr	r3, [pc, #248]	; (800d49c <__ieee754_pow+0x264>)
 800d3a2:	4599      	cmp	r9, r3
 800d3a4:	d10c      	bne.n	800d3c0 <__ieee754_pow+0x188>
 800d3a6:	2d00      	cmp	r5, #0
 800d3a8:	db0a      	blt.n	800d3c0 <__ieee754_pow+0x188>
 800d3aa:	ec47 6b10 	vmov	d0, r6, r7
 800d3ae:	b009      	add	sp, #36	; 0x24
 800d3b0:	ecbd 8b06 	vpop	{d8-d10}
 800d3b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3b8:	f000 be7a 	b.w	800e0b0 <__ieee754_sqrt>
 800d3bc:	2300      	movs	r3, #0
 800d3be:	9304      	str	r3, [sp, #16]
 800d3c0:	ec47 6b10 	vmov	d0, r6, r7
 800d3c4:	f001 ff20 	bl	800f208 <fabs>
 800d3c8:	ec51 0b10 	vmov	r0, r1, d0
 800d3cc:	f1ba 0f00 	cmp.w	sl, #0
 800d3d0:	d129      	bne.n	800d426 <__ieee754_pow+0x1ee>
 800d3d2:	b124      	cbz	r4, 800d3de <__ieee754_pow+0x1a6>
 800d3d4:	4b2f      	ldr	r3, [pc, #188]	; (800d494 <__ieee754_pow+0x25c>)
 800d3d6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d123      	bne.n	800d426 <__ieee754_pow+0x1ee>
 800d3de:	f1b9 0f00 	cmp.w	r9, #0
 800d3e2:	da05      	bge.n	800d3f0 <__ieee754_pow+0x1b8>
 800d3e4:	4602      	mov	r2, r0
 800d3e6:	460b      	mov	r3, r1
 800d3e8:	2000      	movs	r0, #0
 800d3ea:	492a      	ldr	r1, [pc, #168]	; (800d494 <__ieee754_pow+0x25c>)
 800d3ec:	f7f3 f9da 	bl	80007a4 <__aeabi_ddiv>
 800d3f0:	2d00      	cmp	r5, #0
 800d3f2:	f6bf af40 	bge.w	800d276 <__ieee754_pow+0x3e>
 800d3f6:	9b04      	ldr	r3, [sp, #16]
 800d3f8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d3fc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d400:	4323      	orrs	r3, r4
 800d402:	d108      	bne.n	800d416 <__ieee754_pow+0x1de>
 800d404:	4602      	mov	r2, r0
 800d406:	460b      	mov	r3, r1
 800d408:	4610      	mov	r0, r2
 800d40a:	4619      	mov	r1, r3
 800d40c:	f7f2 fee8 	bl	80001e0 <__aeabi_dsub>
 800d410:	4602      	mov	r2, r0
 800d412:	460b      	mov	r3, r1
 800d414:	e78f      	b.n	800d336 <__ieee754_pow+0xfe>
 800d416:	9b04      	ldr	r3, [sp, #16]
 800d418:	2b01      	cmp	r3, #1
 800d41a:	f47f af2c 	bne.w	800d276 <__ieee754_pow+0x3e>
 800d41e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d422:	4619      	mov	r1, r3
 800d424:	e727      	b.n	800d276 <__ieee754_pow+0x3e>
 800d426:	0feb      	lsrs	r3, r5, #31
 800d428:	3b01      	subs	r3, #1
 800d42a:	9306      	str	r3, [sp, #24]
 800d42c:	9a06      	ldr	r2, [sp, #24]
 800d42e:	9b04      	ldr	r3, [sp, #16]
 800d430:	4313      	orrs	r3, r2
 800d432:	d102      	bne.n	800d43a <__ieee754_pow+0x202>
 800d434:	4632      	mov	r2, r6
 800d436:	463b      	mov	r3, r7
 800d438:	e7e6      	b.n	800d408 <__ieee754_pow+0x1d0>
 800d43a:	4b19      	ldr	r3, [pc, #100]	; (800d4a0 <__ieee754_pow+0x268>)
 800d43c:	4598      	cmp	r8, r3
 800d43e:	f340 80fb 	ble.w	800d638 <__ieee754_pow+0x400>
 800d442:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d446:	4598      	cmp	r8, r3
 800d448:	4b13      	ldr	r3, [pc, #76]	; (800d498 <__ieee754_pow+0x260>)
 800d44a:	dd0c      	ble.n	800d466 <__ieee754_pow+0x22e>
 800d44c:	429c      	cmp	r4, r3
 800d44e:	dc0f      	bgt.n	800d470 <__ieee754_pow+0x238>
 800d450:	f1b9 0f00 	cmp.w	r9, #0
 800d454:	da0f      	bge.n	800d476 <__ieee754_pow+0x23e>
 800d456:	2000      	movs	r0, #0
 800d458:	b009      	add	sp, #36	; 0x24
 800d45a:	ecbd 8b06 	vpop	{d8-d10}
 800d45e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d462:	f001 bea6 	b.w	800f1b2 <__math_oflow>
 800d466:	429c      	cmp	r4, r3
 800d468:	dbf2      	blt.n	800d450 <__ieee754_pow+0x218>
 800d46a:	4b0a      	ldr	r3, [pc, #40]	; (800d494 <__ieee754_pow+0x25c>)
 800d46c:	429c      	cmp	r4, r3
 800d46e:	dd19      	ble.n	800d4a4 <__ieee754_pow+0x26c>
 800d470:	f1b9 0f00 	cmp.w	r9, #0
 800d474:	dcef      	bgt.n	800d456 <__ieee754_pow+0x21e>
 800d476:	2000      	movs	r0, #0
 800d478:	b009      	add	sp, #36	; 0x24
 800d47a:	ecbd 8b06 	vpop	{d8-d10}
 800d47e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d482:	f001 be8d 	b.w	800f1a0 <__math_uflow>
 800d486:	bf00      	nop
 800d488:	fff00000 	.word	0xfff00000
 800d48c:	7ff00000 	.word	0x7ff00000
 800d490:	433fffff 	.word	0x433fffff
 800d494:	3ff00000 	.word	0x3ff00000
 800d498:	3fefffff 	.word	0x3fefffff
 800d49c:	3fe00000 	.word	0x3fe00000
 800d4a0:	41e00000 	.word	0x41e00000
 800d4a4:	4b60      	ldr	r3, [pc, #384]	; (800d628 <__ieee754_pow+0x3f0>)
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	f7f2 fe9a 	bl	80001e0 <__aeabi_dsub>
 800d4ac:	a354      	add	r3, pc, #336	; (adr r3, 800d600 <__ieee754_pow+0x3c8>)
 800d4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b2:	4604      	mov	r4, r0
 800d4b4:	460d      	mov	r5, r1
 800d4b6:	f7f3 f84b 	bl	8000550 <__aeabi_dmul>
 800d4ba:	a353      	add	r3, pc, #332	; (adr r3, 800d608 <__ieee754_pow+0x3d0>)
 800d4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c0:	4606      	mov	r6, r0
 800d4c2:	460f      	mov	r7, r1
 800d4c4:	4620      	mov	r0, r4
 800d4c6:	4629      	mov	r1, r5
 800d4c8:	f7f3 f842 	bl	8000550 <__aeabi_dmul>
 800d4cc:	4b57      	ldr	r3, [pc, #348]	; (800d62c <__ieee754_pow+0x3f4>)
 800d4ce:	4682      	mov	sl, r0
 800d4d0:	468b      	mov	fp, r1
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	4620      	mov	r0, r4
 800d4d6:	4629      	mov	r1, r5
 800d4d8:	f7f3 f83a 	bl	8000550 <__aeabi_dmul>
 800d4dc:	4602      	mov	r2, r0
 800d4de:	460b      	mov	r3, r1
 800d4e0:	a14b      	add	r1, pc, #300	; (adr r1, 800d610 <__ieee754_pow+0x3d8>)
 800d4e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4e6:	f7f2 fe7b 	bl	80001e0 <__aeabi_dsub>
 800d4ea:	4622      	mov	r2, r4
 800d4ec:	462b      	mov	r3, r5
 800d4ee:	f7f3 f82f 	bl	8000550 <__aeabi_dmul>
 800d4f2:	4602      	mov	r2, r0
 800d4f4:	460b      	mov	r3, r1
 800d4f6:	2000      	movs	r0, #0
 800d4f8:	494d      	ldr	r1, [pc, #308]	; (800d630 <__ieee754_pow+0x3f8>)
 800d4fa:	f7f2 fe71 	bl	80001e0 <__aeabi_dsub>
 800d4fe:	4622      	mov	r2, r4
 800d500:	4680      	mov	r8, r0
 800d502:	4689      	mov	r9, r1
 800d504:	462b      	mov	r3, r5
 800d506:	4620      	mov	r0, r4
 800d508:	4629      	mov	r1, r5
 800d50a:	f7f3 f821 	bl	8000550 <__aeabi_dmul>
 800d50e:	4602      	mov	r2, r0
 800d510:	460b      	mov	r3, r1
 800d512:	4640      	mov	r0, r8
 800d514:	4649      	mov	r1, r9
 800d516:	f7f3 f81b 	bl	8000550 <__aeabi_dmul>
 800d51a:	a33f      	add	r3, pc, #252	; (adr r3, 800d618 <__ieee754_pow+0x3e0>)
 800d51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d520:	f7f3 f816 	bl	8000550 <__aeabi_dmul>
 800d524:	4602      	mov	r2, r0
 800d526:	460b      	mov	r3, r1
 800d528:	4650      	mov	r0, sl
 800d52a:	4659      	mov	r1, fp
 800d52c:	f7f2 fe58 	bl	80001e0 <__aeabi_dsub>
 800d530:	4602      	mov	r2, r0
 800d532:	460b      	mov	r3, r1
 800d534:	4680      	mov	r8, r0
 800d536:	4689      	mov	r9, r1
 800d538:	4630      	mov	r0, r6
 800d53a:	4639      	mov	r1, r7
 800d53c:	f7f2 fe52 	bl	80001e4 <__adddf3>
 800d540:	2000      	movs	r0, #0
 800d542:	4632      	mov	r2, r6
 800d544:	463b      	mov	r3, r7
 800d546:	4604      	mov	r4, r0
 800d548:	460d      	mov	r5, r1
 800d54a:	f7f2 fe49 	bl	80001e0 <__aeabi_dsub>
 800d54e:	4602      	mov	r2, r0
 800d550:	460b      	mov	r3, r1
 800d552:	4640      	mov	r0, r8
 800d554:	4649      	mov	r1, r9
 800d556:	f7f2 fe43 	bl	80001e0 <__aeabi_dsub>
 800d55a:	9b04      	ldr	r3, [sp, #16]
 800d55c:	9a06      	ldr	r2, [sp, #24]
 800d55e:	3b01      	subs	r3, #1
 800d560:	4313      	orrs	r3, r2
 800d562:	4682      	mov	sl, r0
 800d564:	468b      	mov	fp, r1
 800d566:	f040 81e7 	bne.w	800d938 <__ieee754_pow+0x700>
 800d56a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800d620 <__ieee754_pow+0x3e8>
 800d56e:	eeb0 8a47 	vmov.f32	s16, s14
 800d572:	eef0 8a67 	vmov.f32	s17, s15
 800d576:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d57a:	2600      	movs	r6, #0
 800d57c:	4632      	mov	r2, r6
 800d57e:	463b      	mov	r3, r7
 800d580:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d584:	f7f2 fe2c 	bl	80001e0 <__aeabi_dsub>
 800d588:	4622      	mov	r2, r4
 800d58a:	462b      	mov	r3, r5
 800d58c:	f7f2 ffe0 	bl	8000550 <__aeabi_dmul>
 800d590:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d594:	4680      	mov	r8, r0
 800d596:	4689      	mov	r9, r1
 800d598:	4650      	mov	r0, sl
 800d59a:	4659      	mov	r1, fp
 800d59c:	f7f2 ffd8 	bl	8000550 <__aeabi_dmul>
 800d5a0:	4602      	mov	r2, r0
 800d5a2:	460b      	mov	r3, r1
 800d5a4:	4640      	mov	r0, r8
 800d5a6:	4649      	mov	r1, r9
 800d5a8:	f7f2 fe1c 	bl	80001e4 <__adddf3>
 800d5ac:	4632      	mov	r2, r6
 800d5ae:	463b      	mov	r3, r7
 800d5b0:	4680      	mov	r8, r0
 800d5b2:	4689      	mov	r9, r1
 800d5b4:	4620      	mov	r0, r4
 800d5b6:	4629      	mov	r1, r5
 800d5b8:	f7f2 ffca 	bl	8000550 <__aeabi_dmul>
 800d5bc:	460b      	mov	r3, r1
 800d5be:	4604      	mov	r4, r0
 800d5c0:	460d      	mov	r5, r1
 800d5c2:	4602      	mov	r2, r0
 800d5c4:	4649      	mov	r1, r9
 800d5c6:	4640      	mov	r0, r8
 800d5c8:	f7f2 fe0c 	bl	80001e4 <__adddf3>
 800d5cc:	4b19      	ldr	r3, [pc, #100]	; (800d634 <__ieee754_pow+0x3fc>)
 800d5ce:	4299      	cmp	r1, r3
 800d5d0:	ec45 4b19 	vmov	d9, r4, r5
 800d5d4:	4606      	mov	r6, r0
 800d5d6:	460f      	mov	r7, r1
 800d5d8:	468b      	mov	fp, r1
 800d5da:	f340 82f1 	ble.w	800dbc0 <__ieee754_pow+0x988>
 800d5de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d5e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d5e6:	4303      	orrs	r3, r0
 800d5e8:	f000 81e4 	beq.w	800d9b4 <__ieee754_pow+0x77c>
 800d5ec:	ec51 0b18 	vmov	r0, r1, d8
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	f7f3 fa1e 	bl	8000a34 <__aeabi_dcmplt>
 800d5f8:	3800      	subs	r0, #0
 800d5fa:	bf18      	it	ne
 800d5fc:	2001      	movne	r0, #1
 800d5fe:	e72b      	b.n	800d458 <__ieee754_pow+0x220>
 800d600:	60000000 	.word	0x60000000
 800d604:	3ff71547 	.word	0x3ff71547
 800d608:	f85ddf44 	.word	0xf85ddf44
 800d60c:	3e54ae0b 	.word	0x3e54ae0b
 800d610:	55555555 	.word	0x55555555
 800d614:	3fd55555 	.word	0x3fd55555
 800d618:	652b82fe 	.word	0x652b82fe
 800d61c:	3ff71547 	.word	0x3ff71547
 800d620:	00000000 	.word	0x00000000
 800d624:	bff00000 	.word	0xbff00000
 800d628:	3ff00000 	.word	0x3ff00000
 800d62c:	3fd00000 	.word	0x3fd00000
 800d630:	3fe00000 	.word	0x3fe00000
 800d634:	408fffff 	.word	0x408fffff
 800d638:	4bd5      	ldr	r3, [pc, #852]	; (800d990 <__ieee754_pow+0x758>)
 800d63a:	402b      	ands	r3, r5
 800d63c:	2200      	movs	r2, #0
 800d63e:	b92b      	cbnz	r3, 800d64c <__ieee754_pow+0x414>
 800d640:	4bd4      	ldr	r3, [pc, #848]	; (800d994 <__ieee754_pow+0x75c>)
 800d642:	f7f2 ff85 	bl	8000550 <__aeabi_dmul>
 800d646:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d64a:	460c      	mov	r4, r1
 800d64c:	1523      	asrs	r3, r4, #20
 800d64e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d652:	4413      	add	r3, r2
 800d654:	9305      	str	r3, [sp, #20]
 800d656:	4bd0      	ldr	r3, [pc, #832]	; (800d998 <__ieee754_pow+0x760>)
 800d658:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d65c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d660:	429c      	cmp	r4, r3
 800d662:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d666:	dd08      	ble.n	800d67a <__ieee754_pow+0x442>
 800d668:	4bcc      	ldr	r3, [pc, #816]	; (800d99c <__ieee754_pow+0x764>)
 800d66a:	429c      	cmp	r4, r3
 800d66c:	f340 8162 	ble.w	800d934 <__ieee754_pow+0x6fc>
 800d670:	9b05      	ldr	r3, [sp, #20]
 800d672:	3301      	adds	r3, #1
 800d674:	9305      	str	r3, [sp, #20]
 800d676:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d67a:	2400      	movs	r4, #0
 800d67c:	00e3      	lsls	r3, r4, #3
 800d67e:	9307      	str	r3, [sp, #28]
 800d680:	4bc7      	ldr	r3, [pc, #796]	; (800d9a0 <__ieee754_pow+0x768>)
 800d682:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d686:	ed93 7b00 	vldr	d7, [r3]
 800d68a:	4629      	mov	r1, r5
 800d68c:	ec53 2b17 	vmov	r2, r3, d7
 800d690:	eeb0 9a47 	vmov.f32	s18, s14
 800d694:	eef0 9a67 	vmov.f32	s19, s15
 800d698:	4682      	mov	sl, r0
 800d69a:	f7f2 fda1 	bl	80001e0 <__aeabi_dsub>
 800d69e:	4652      	mov	r2, sl
 800d6a0:	4606      	mov	r6, r0
 800d6a2:	460f      	mov	r7, r1
 800d6a4:	462b      	mov	r3, r5
 800d6a6:	ec51 0b19 	vmov	r0, r1, d9
 800d6aa:	f7f2 fd9b 	bl	80001e4 <__adddf3>
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	2000      	movs	r0, #0
 800d6b4:	49bb      	ldr	r1, [pc, #748]	; (800d9a4 <__ieee754_pow+0x76c>)
 800d6b6:	f7f3 f875 	bl	80007a4 <__aeabi_ddiv>
 800d6ba:	ec41 0b1a 	vmov	d10, r0, r1
 800d6be:	4602      	mov	r2, r0
 800d6c0:	460b      	mov	r3, r1
 800d6c2:	4630      	mov	r0, r6
 800d6c4:	4639      	mov	r1, r7
 800d6c6:	f7f2 ff43 	bl	8000550 <__aeabi_dmul>
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6d0:	9302      	str	r3, [sp, #8]
 800d6d2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d6d6:	46ab      	mov	fp, r5
 800d6d8:	106d      	asrs	r5, r5, #1
 800d6da:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d6de:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d6e2:	ec41 0b18 	vmov	d8, r0, r1
 800d6e6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	4640      	mov	r0, r8
 800d6ee:	4649      	mov	r1, r9
 800d6f0:	4614      	mov	r4, r2
 800d6f2:	461d      	mov	r5, r3
 800d6f4:	f7f2 ff2c 	bl	8000550 <__aeabi_dmul>
 800d6f8:	4602      	mov	r2, r0
 800d6fa:	460b      	mov	r3, r1
 800d6fc:	4630      	mov	r0, r6
 800d6fe:	4639      	mov	r1, r7
 800d700:	f7f2 fd6e 	bl	80001e0 <__aeabi_dsub>
 800d704:	ec53 2b19 	vmov	r2, r3, d9
 800d708:	4606      	mov	r6, r0
 800d70a:	460f      	mov	r7, r1
 800d70c:	4620      	mov	r0, r4
 800d70e:	4629      	mov	r1, r5
 800d710:	f7f2 fd66 	bl	80001e0 <__aeabi_dsub>
 800d714:	4602      	mov	r2, r0
 800d716:	460b      	mov	r3, r1
 800d718:	4650      	mov	r0, sl
 800d71a:	4659      	mov	r1, fp
 800d71c:	f7f2 fd60 	bl	80001e0 <__aeabi_dsub>
 800d720:	4642      	mov	r2, r8
 800d722:	464b      	mov	r3, r9
 800d724:	f7f2 ff14 	bl	8000550 <__aeabi_dmul>
 800d728:	4602      	mov	r2, r0
 800d72a:	460b      	mov	r3, r1
 800d72c:	4630      	mov	r0, r6
 800d72e:	4639      	mov	r1, r7
 800d730:	f7f2 fd56 	bl	80001e0 <__aeabi_dsub>
 800d734:	ec53 2b1a 	vmov	r2, r3, d10
 800d738:	f7f2 ff0a 	bl	8000550 <__aeabi_dmul>
 800d73c:	ec53 2b18 	vmov	r2, r3, d8
 800d740:	ec41 0b19 	vmov	d9, r0, r1
 800d744:	ec51 0b18 	vmov	r0, r1, d8
 800d748:	f7f2 ff02 	bl	8000550 <__aeabi_dmul>
 800d74c:	a37c      	add	r3, pc, #496	; (adr r3, 800d940 <__ieee754_pow+0x708>)
 800d74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d752:	4604      	mov	r4, r0
 800d754:	460d      	mov	r5, r1
 800d756:	f7f2 fefb 	bl	8000550 <__aeabi_dmul>
 800d75a:	a37b      	add	r3, pc, #492	; (adr r3, 800d948 <__ieee754_pow+0x710>)
 800d75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d760:	f7f2 fd40 	bl	80001e4 <__adddf3>
 800d764:	4622      	mov	r2, r4
 800d766:	462b      	mov	r3, r5
 800d768:	f7f2 fef2 	bl	8000550 <__aeabi_dmul>
 800d76c:	a378      	add	r3, pc, #480	; (adr r3, 800d950 <__ieee754_pow+0x718>)
 800d76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d772:	f7f2 fd37 	bl	80001e4 <__adddf3>
 800d776:	4622      	mov	r2, r4
 800d778:	462b      	mov	r3, r5
 800d77a:	f7f2 fee9 	bl	8000550 <__aeabi_dmul>
 800d77e:	a376      	add	r3, pc, #472	; (adr r3, 800d958 <__ieee754_pow+0x720>)
 800d780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d784:	f7f2 fd2e 	bl	80001e4 <__adddf3>
 800d788:	4622      	mov	r2, r4
 800d78a:	462b      	mov	r3, r5
 800d78c:	f7f2 fee0 	bl	8000550 <__aeabi_dmul>
 800d790:	a373      	add	r3, pc, #460	; (adr r3, 800d960 <__ieee754_pow+0x728>)
 800d792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d796:	f7f2 fd25 	bl	80001e4 <__adddf3>
 800d79a:	4622      	mov	r2, r4
 800d79c:	462b      	mov	r3, r5
 800d79e:	f7f2 fed7 	bl	8000550 <__aeabi_dmul>
 800d7a2:	a371      	add	r3, pc, #452	; (adr r3, 800d968 <__ieee754_pow+0x730>)
 800d7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a8:	f7f2 fd1c 	bl	80001e4 <__adddf3>
 800d7ac:	4622      	mov	r2, r4
 800d7ae:	4606      	mov	r6, r0
 800d7b0:	460f      	mov	r7, r1
 800d7b2:	462b      	mov	r3, r5
 800d7b4:	4620      	mov	r0, r4
 800d7b6:	4629      	mov	r1, r5
 800d7b8:	f7f2 feca 	bl	8000550 <__aeabi_dmul>
 800d7bc:	4602      	mov	r2, r0
 800d7be:	460b      	mov	r3, r1
 800d7c0:	4630      	mov	r0, r6
 800d7c2:	4639      	mov	r1, r7
 800d7c4:	f7f2 fec4 	bl	8000550 <__aeabi_dmul>
 800d7c8:	4642      	mov	r2, r8
 800d7ca:	4604      	mov	r4, r0
 800d7cc:	460d      	mov	r5, r1
 800d7ce:	464b      	mov	r3, r9
 800d7d0:	ec51 0b18 	vmov	r0, r1, d8
 800d7d4:	f7f2 fd06 	bl	80001e4 <__adddf3>
 800d7d8:	ec53 2b19 	vmov	r2, r3, d9
 800d7dc:	f7f2 feb8 	bl	8000550 <__aeabi_dmul>
 800d7e0:	4622      	mov	r2, r4
 800d7e2:	462b      	mov	r3, r5
 800d7e4:	f7f2 fcfe 	bl	80001e4 <__adddf3>
 800d7e8:	4642      	mov	r2, r8
 800d7ea:	4682      	mov	sl, r0
 800d7ec:	468b      	mov	fp, r1
 800d7ee:	464b      	mov	r3, r9
 800d7f0:	4640      	mov	r0, r8
 800d7f2:	4649      	mov	r1, r9
 800d7f4:	f7f2 feac 	bl	8000550 <__aeabi_dmul>
 800d7f8:	4b6b      	ldr	r3, [pc, #428]	; (800d9a8 <__ieee754_pow+0x770>)
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	4606      	mov	r6, r0
 800d7fe:	460f      	mov	r7, r1
 800d800:	f7f2 fcf0 	bl	80001e4 <__adddf3>
 800d804:	4652      	mov	r2, sl
 800d806:	465b      	mov	r3, fp
 800d808:	f7f2 fcec 	bl	80001e4 <__adddf3>
 800d80c:	2000      	movs	r0, #0
 800d80e:	4604      	mov	r4, r0
 800d810:	460d      	mov	r5, r1
 800d812:	4602      	mov	r2, r0
 800d814:	460b      	mov	r3, r1
 800d816:	4640      	mov	r0, r8
 800d818:	4649      	mov	r1, r9
 800d81a:	f7f2 fe99 	bl	8000550 <__aeabi_dmul>
 800d81e:	4b62      	ldr	r3, [pc, #392]	; (800d9a8 <__ieee754_pow+0x770>)
 800d820:	4680      	mov	r8, r0
 800d822:	4689      	mov	r9, r1
 800d824:	2200      	movs	r2, #0
 800d826:	4620      	mov	r0, r4
 800d828:	4629      	mov	r1, r5
 800d82a:	f7f2 fcd9 	bl	80001e0 <__aeabi_dsub>
 800d82e:	4632      	mov	r2, r6
 800d830:	463b      	mov	r3, r7
 800d832:	f7f2 fcd5 	bl	80001e0 <__aeabi_dsub>
 800d836:	4602      	mov	r2, r0
 800d838:	460b      	mov	r3, r1
 800d83a:	4650      	mov	r0, sl
 800d83c:	4659      	mov	r1, fp
 800d83e:	f7f2 fccf 	bl	80001e0 <__aeabi_dsub>
 800d842:	ec53 2b18 	vmov	r2, r3, d8
 800d846:	f7f2 fe83 	bl	8000550 <__aeabi_dmul>
 800d84a:	4622      	mov	r2, r4
 800d84c:	4606      	mov	r6, r0
 800d84e:	460f      	mov	r7, r1
 800d850:	462b      	mov	r3, r5
 800d852:	ec51 0b19 	vmov	r0, r1, d9
 800d856:	f7f2 fe7b 	bl	8000550 <__aeabi_dmul>
 800d85a:	4602      	mov	r2, r0
 800d85c:	460b      	mov	r3, r1
 800d85e:	4630      	mov	r0, r6
 800d860:	4639      	mov	r1, r7
 800d862:	f7f2 fcbf 	bl	80001e4 <__adddf3>
 800d866:	4606      	mov	r6, r0
 800d868:	460f      	mov	r7, r1
 800d86a:	4602      	mov	r2, r0
 800d86c:	460b      	mov	r3, r1
 800d86e:	4640      	mov	r0, r8
 800d870:	4649      	mov	r1, r9
 800d872:	f7f2 fcb7 	bl	80001e4 <__adddf3>
 800d876:	a33e      	add	r3, pc, #248	; (adr r3, 800d970 <__ieee754_pow+0x738>)
 800d878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d87c:	2000      	movs	r0, #0
 800d87e:	4604      	mov	r4, r0
 800d880:	460d      	mov	r5, r1
 800d882:	f7f2 fe65 	bl	8000550 <__aeabi_dmul>
 800d886:	4642      	mov	r2, r8
 800d888:	ec41 0b18 	vmov	d8, r0, r1
 800d88c:	464b      	mov	r3, r9
 800d88e:	4620      	mov	r0, r4
 800d890:	4629      	mov	r1, r5
 800d892:	f7f2 fca5 	bl	80001e0 <__aeabi_dsub>
 800d896:	4602      	mov	r2, r0
 800d898:	460b      	mov	r3, r1
 800d89a:	4630      	mov	r0, r6
 800d89c:	4639      	mov	r1, r7
 800d89e:	f7f2 fc9f 	bl	80001e0 <__aeabi_dsub>
 800d8a2:	a335      	add	r3, pc, #212	; (adr r3, 800d978 <__ieee754_pow+0x740>)
 800d8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a8:	f7f2 fe52 	bl	8000550 <__aeabi_dmul>
 800d8ac:	a334      	add	r3, pc, #208	; (adr r3, 800d980 <__ieee754_pow+0x748>)
 800d8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b2:	4606      	mov	r6, r0
 800d8b4:	460f      	mov	r7, r1
 800d8b6:	4620      	mov	r0, r4
 800d8b8:	4629      	mov	r1, r5
 800d8ba:	f7f2 fe49 	bl	8000550 <__aeabi_dmul>
 800d8be:	4602      	mov	r2, r0
 800d8c0:	460b      	mov	r3, r1
 800d8c2:	4630      	mov	r0, r6
 800d8c4:	4639      	mov	r1, r7
 800d8c6:	f7f2 fc8d 	bl	80001e4 <__adddf3>
 800d8ca:	9a07      	ldr	r2, [sp, #28]
 800d8cc:	4b37      	ldr	r3, [pc, #220]	; (800d9ac <__ieee754_pow+0x774>)
 800d8ce:	4413      	add	r3, r2
 800d8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d4:	f7f2 fc86 	bl	80001e4 <__adddf3>
 800d8d8:	4682      	mov	sl, r0
 800d8da:	9805      	ldr	r0, [sp, #20]
 800d8dc:	468b      	mov	fp, r1
 800d8de:	f7f2 fdcd 	bl	800047c <__aeabi_i2d>
 800d8e2:	9a07      	ldr	r2, [sp, #28]
 800d8e4:	4b32      	ldr	r3, [pc, #200]	; (800d9b0 <__ieee754_pow+0x778>)
 800d8e6:	4413      	add	r3, r2
 800d8e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d8ec:	4606      	mov	r6, r0
 800d8ee:	460f      	mov	r7, r1
 800d8f0:	4652      	mov	r2, sl
 800d8f2:	465b      	mov	r3, fp
 800d8f4:	ec51 0b18 	vmov	r0, r1, d8
 800d8f8:	f7f2 fc74 	bl	80001e4 <__adddf3>
 800d8fc:	4642      	mov	r2, r8
 800d8fe:	464b      	mov	r3, r9
 800d900:	f7f2 fc70 	bl	80001e4 <__adddf3>
 800d904:	4632      	mov	r2, r6
 800d906:	463b      	mov	r3, r7
 800d908:	f7f2 fc6c 	bl	80001e4 <__adddf3>
 800d90c:	2000      	movs	r0, #0
 800d90e:	4632      	mov	r2, r6
 800d910:	463b      	mov	r3, r7
 800d912:	4604      	mov	r4, r0
 800d914:	460d      	mov	r5, r1
 800d916:	f7f2 fc63 	bl	80001e0 <__aeabi_dsub>
 800d91a:	4642      	mov	r2, r8
 800d91c:	464b      	mov	r3, r9
 800d91e:	f7f2 fc5f 	bl	80001e0 <__aeabi_dsub>
 800d922:	ec53 2b18 	vmov	r2, r3, d8
 800d926:	f7f2 fc5b 	bl	80001e0 <__aeabi_dsub>
 800d92a:	4602      	mov	r2, r0
 800d92c:	460b      	mov	r3, r1
 800d92e:	4650      	mov	r0, sl
 800d930:	4659      	mov	r1, fp
 800d932:	e610      	b.n	800d556 <__ieee754_pow+0x31e>
 800d934:	2401      	movs	r4, #1
 800d936:	e6a1      	b.n	800d67c <__ieee754_pow+0x444>
 800d938:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800d988 <__ieee754_pow+0x750>
 800d93c:	e617      	b.n	800d56e <__ieee754_pow+0x336>
 800d93e:	bf00      	nop
 800d940:	4a454eef 	.word	0x4a454eef
 800d944:	3fca7e28 	.word	0x3fca7e28
 800d948:	93c9db65 	.word	0x93c9db65
 800d94c:	3fcd864a 	.word	0x3fcd864a
 800d950:	a91d4101 	.word	0xa91d4101
 800d954:	3fd17460 	.word	0x3fd17460
 800d958:	518f264d 	.word	0x518f264d
 800d95c:	3fd55555 	.word	0x3fd55555
 800d960:	db6fabff 	.word	0xdb6fabff
 800d964:	3fdb6db6 	.word	0x3fdb6db6
 800d968:	33333303 	.word	0x33333303
 800d96c:	3fe33333 	.word	0x3fe33333
 800d970:	e0000000 	.word	0xe0000000
 800d974:	3feec709 	.word	0x3feec709
 800d978:	dc3a03fd 	.word	0xdc3a03fd
 800d97c:	3feec709 	.word	0x3feec709
 800d980:	145b01f5 	.word	0x145b01f5
 800d984:	be3e2fe0 	.word	0xbe3e2fe0
 800d988:	00000000 	.word	0x00000000
 800d98c:	3ff00000 	.word	0x3ff00000
 800d990:	7ff00000 	.word	0x7ff00000
 800d994:	43400000 	.word	0x43400000
 800d998:	0003988e 	.word	0x0003988e
 800d99c:	000bb679 	.word	0x000bb679
 800d9a0:	0800f630 	.word	0x0800f630
 800d9a4:	3ff00000 	.word	0x3ff00000
 800d9a8:	40080000 	.word	0x40080000
 800d9ac:	0800f650 	.word	0x0800f650
 800d9b0:	0800f640 	.word	0x0800f640
 800d9b4:	a3b5      	add	r3, pc, #724	; (adr r3, 800dc8c <__ieee754_pow+0xa54>)
 800d9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ba:	4640      	mov	r0, r8
 800d9bc:	4649      	mov	r1, r9
 800d9be:	f7f2 fc11 	bl	80001e4 <__adddf3>
 800d9c2:	4622      	mov	r2, r4
 800d9c4:	ec41 0b1a 	vmov	d10, r0, r1
 800d9c8:	462b      	mov	r3, r5
 800d9ca:	4630      	mov	r0, r6
 800d9cc:	4639      	mov	r1, r7
 800d9ce:	f7f2 fc07 	bl	80001e0 <__aeabi_dsub>
 800d9d2:	4602      	mov	r2, r0
 800d9d4:	460b      	mov	r3, r1
 800d9d6:	ec51 0b1a 	vmov	r0, r1, d10
 800d9da:	f7f3 f849 	bl	8000a70 <__aeabi_dcmpgt>
 800d9de:	2800      	cmp	r0, #0
 800d9e0:	f47f ae04 	bne.w	800d5ec <__ieee754_pow+0x3b4>
 800d9e4:	4aa4      	ldr	r2, [pc, #656]	; (800dc78 <__ieee754_pow+0xa40>)
 800d9e6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d9ea:	4293      	cmp	r3, r2
 800d9ec:	f340 8108 	ble.w	800dc00 <__ieee754_pow+0x9c8>
 800d9f0:	151b      	asrs	r3, r3, #20
 800d9f2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d9f6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d9fa:	fa4a f303 	asr.w	r3, sl, r3
 800d9fe:	445b      	add	r3, fp
 800da00:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800da04:	4e9d      	ldr	r6, [pc, #628]	; (800dc7c <__ieee754_pow+0xa44>)
 800da06:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800da0a:	4116      	asrs	r6, r2
 800da0c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800da10:	2000      	movs	r0, #0
 800da12:	ea23 0106 	bic.w	r1, r3, r6
 800da16:	f1c2 0214 	rsb	r2, r2, #20
 800da1a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800da1e:	fa4a fa02 	asr.w	sl, sl, r2
 800da22:	f1bb 0f00 	cmp.w	fp, #0
 800da26:	4602      	mov	r2, r0
 800da28:	460b      	mov	r3, r1
 800da2a:	4620      	mov	r0, r4
 800da2c:	4629      	mov	r1, r5
 800da2e:	bfb8      	it	lt
 800da30:	f1ca 0a00 	rsblt	sl, sl, #0
 800da34:	f7f2 fbd4 	bl	80001e0 <__aeabi_dsub>
 800da38:	ec41 0b19 	vmov	d9, r0, r1
 800da3c:	4642      	mov	r2, r8
 800da3e:	464b      	mov	r3, r9
 800da40:	ec51 0b19 	vmov	r0, r1, d9
 800da44:	f7f2 fbce 	bl	80001e4 <__adddf3>
 800da48:	a37b      	add	r3, pc, #492	; (adr r3, 800dc38 <__ieee754_pow+0xa00>)
 800da4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da4e:	2000      	movs	r0, #0
 800da50:	4604      	mov	r4, r0
 800da52:	460d      	mov	r5, r1
 800da54:	f7f2 fd7c 	bl	8000550 <__aeabi_dmul>
 800da58:	ec53 2b19 	vmov	r2, r3, d9
 800da5c:	4606      	mov	r6, r0
 800da5e:	460f      	mov	r7, r1
 800da60:	4620      	mov	r0, r4
 800da62:	4629      	mov	r1, r5
 800da64:	f7f2 fbbc 	bl	80001e0 <__aeabi_dsub>
 800da68:	4602      	mov	r2, r0
 800da6a:	460b      	mov	r3, r1
 800da6c:	4640      	mov	r0, r8
 800da6e:	4649      	mov	r1, r9
 800da70:	f7f2 fbb6 	bl	80001e0 <__aeabi_dsub>
 800da74:	a372      	add	r3, pc, #456	; (adr r3, 800dc40 <__ieee754_pow+0xa08>)
 800da76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da7a:	f7f2 fd69 	bl	8000550 <__aeabi_dmul>
 800da7e:	a372      	add	r3, pc, #456	; (adr r3, 800dc48 <__ieee754_pow+0xa10>)
 800da80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da84:	4680      	mov	r8, r0
 800da86:	4689      	mov	r9, r1
 800da88:	4620      	mov	r0, r4
 800da8a:	4629      	mov	r1, r5
 800da8c:	f7f2 fd60 	bl	8000550 <__aeabi_dmul>
 800da90:	4602      	mov	r2, r0
 800da92:	460b      	mov	r3, r1
 800da94:	4640      	mov	r0, r8
 800da96:	4649      	mov	r1, r9
 800da98:	f7f2 fba4 	bl	80001e4 <__adddf3>
 800da9c:	4604      	mov	r4, r0
 800da9e:	460d      	mov	r5, r1
 800daa0:	4602      	mov	r2, r0
 800daa2:	460b      	mov	r3, r1
 800daa4:	4630      	mov	r0, r6
 800daa6:	4639      	mov	r1, r7
 800daa8:	f7f2 fb9c 	bl	80001e4 <__adddf3>
 800daac:	4632      	mov	r2, r6
 800daae:	463b      	mov	r3, r7
 800dab0:	4680      	mov	r8, r0
 800dab2:	4689      	mov	r9, r1
 800dab4:	f7f2 fb94 	bl	80001e0 <__aeabi_dsub>
 800dab8:	4602      	mov	r2, r0
 800daba:	460b      	mov	r3, r1
 800dabc:	4620      	mov	r0, r4
 800dabe:	4629      	mov	r1, r5
 800dac0:	f7f2 fb8e 	bl	80001e0 <__aeabi_dsub>
 800dac4:	4642      	mov	r2, r8
 800dac6:	4606      	mov	r6, r0
 800dac8:	460f      	mov	r7, r1
 800daca:	464b      	mov	r3, r9
 800dacc:	4640      	mov	r0, r8
 800dace:	4649      	mov	r1, r9
 800dad0:	f7f2 fd3e 	bl	8000550 <__aeabi_dmul>
 800dad4:	a35e      	add	r3, pc, #376	; (adr r3, 800dc50 <__ieee754_pow+0xa18>)
 800dad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dada:	4604      	mov	r4, r0
 800dadc:	460d      	mov	r5, r1
 800dade:	f7f2 fd37 	bl	8000550 <__aeabi_dmul>
 800dae2:	a35d      	add	r3, pc, #372	; (adr r3, 800dc58 <__ieee754_pow+0xa20>)
 800dae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae8:	f7f2 fb7a 	bl	80001e0 <__aeabi_dsub>
 800daec:	4622      	mov	r2, r4
 800daee:	462b      	mov	r3, r5
 800daf0:	f7f2 fd2e 	bl	8000550 <__aeabi_dmul>
 800daf4:	a35a      	add	r3, pc, #360	; (adr r3, 800dc60 <__ieee754_pow+0xa28>)
 800daf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dafa:	f7f2 fb73 	bl	80001e4 <__adddf3>
 800dafe:	4622      	mov	r2, r4
 800db00:	462b      	mov	r3, r5
 800db02:	f7f2 fd25 	bl	8000550 <__aeabi_dmul>
 800db06:	a358      	add	r3, pc, #352	; (adr r3, 800dc68 <__ieee754_pow+0xa30>)
 800db08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db0c:	f7f2 fb68 	bl	80001e0 <__aeabi_dsub>
 800db10:	4622      	mov	r2, r4
 800db12:	462b      	mov	r3, r5
 800db14:	f7f2 fd1c 	bl	8000550 <__aeabi_dmul>
 800db18:	a355      	add	r3, pc, #340	; (adr r3, 800dc70 <__ieee754_pow+0xa38>)
 800db1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db1e:	f7f2 fb61 	bl	80001e4 <__adddf3>
 800db22:	4622      	mov	r2, r4
 800db24:	462b      	mov	r3, r5
 800db26:	f7f2 fd13 	bl	8000550 <__aeabi_dmul>
 800db2a:	4602      	mov	r2, r0
 800db2c:	460b      	mov	r3, r1
 800db2e:	4640      	mov	r0, r8
 800db30:	4649      	mov	r1, r9
 800db32:	f7f2 fb55 	bl	80001e0 <__aeabi_dsub>
 800db36:	4604      	mov	r4, r0
 800db38:	460d      	mov	r5, r1
 800db3a:	4602      	mov	r2, r0
 800db3c:	460b      	mov	r3, r1
 800db3e:	4640      	mov	r0, r8
 800db40:	4649      	mov	r1, r9
 800db42:	f7f2 fd05 	bl	8000550 <__aeabi_dmul>
 800db46:	2200      	movs	r2, #0
 800db48:	ec41 0b19 	vmov	d9, r0, r1
 800db4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800db50:	4620      	mov	r0, r4
 800db52:	4629      	mov	r1, r5
 800db54:	f7f2 fb44 	bl	80001e0 <__aeabi_dsub>
 800db58:	4602      	mov	r2, r0
 800db5a:	460b      	mov	r3, r1
 800db5c:	ec51 0b19 	vmov	r0, r1, d9
 800db60:	f7f2 fe20 	bl	80007a4 <__aeabi_ddiv>
 800db64:	4632      	mov	r2, r6
 800db66:	4604      	mov	r4, r0
 800db68:	460d      	mov	r5, r1
 800db6a:	463b      	mov	r3, r7
 800db6c:	4640      	mov	r0, r8
 800db6e:	4649      	mov	r1, r9
 800db70:	f7f2 fcee 	bl	8000550 <__aeabi_dmul>
 800db74:	4632      	mov	r2, r6
 800db76:	463b      	mov	r3, r7
 800db78:	f7f2 fb34 	bl	80001e4 <__adddf3>
 800db7c:	4602      	mov	r2, r0
 800db7e:	460b      	mov	r3, r1
 800db80:	4620      	mov	r0, r4
 800db82:	4629      	mov	r1, r5
 800db84:	f7f2 fb2c 	bl	80001e0 <__aeabi_dsub>
 800db88:	4642      	mov	r2, r8
 800db8a:	464b      	mov	r3, r9
 800db8c:	f7f2 fb28 	bl	80001e0 <__aeabi_dsub>
 800db90:	460b      	mov	r3, r1
 800db92:	4602      	mov	r2, r0
 800db94:	493a      	ldr	r1, [pc, #232]	; (800dc80 <__ieee754_pow+0xa48>)
 800db96:	2000      	movs	r0, #0
 800db98:	f7f2 fb22 	bl	80001e0 <__aeabi_dsub>
 800db9c:	ec41 0b10 	vmov	d0, r0, r1
 800dba0:	ee10 3a90 	vmov	r3, s1
 800dba4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800dba8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dbac:	da2b      	bge.n	800dc06 <__ieee754_pow+0x9ce>
 800dbae:	4650      	mov	r0, sl
 800dbb0:	f001 fbbe 	bl	800f330 <scalbn>
 800dbb4:	ec51 0b10 	vmov	r0, r1, d0
 800dbb8:	ec53 2b18 	vmov	r2, r3, d8
 800dbbc:	f7ff bbed 	b.w	800d39a <__ieee754_pow+0x162>
 800dbc0:	4b30      	ldr	r3, [pc, #192]	; (800dc84 <__ieee754_pow+0xa4c>)
 800dbc2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800dbc6:	429e      	cmp	r6, r3
 800dbc8:	f77f af0c 	ble.w	800d9e4 <__ieee754_pow+0x7ac>
 800dbcc:	4b2e      	ldr	r3, [pc, #184]	; (800dc88 <__ieee754_pow+0xa50>)
 800dbce:	440b      	add	r3, r1
 800dbd0:	4303      	orrs	r3, r0
 800dbd2:	d009      	beq.n	800dbe8 <__ieee754_pow+0x9b0>
 800dbd4:	ec51 0b18 	vmov	r0, r1, d8
 800dbd8:	2200      	movs	r2, #0
 800dbda:	2300      	movs	r3, #0
 800dbdc:	f7f2 ff2a 	bl	8000a34 <__aeabi_dcmplt>
 800dbe0:	3800      	subs	r0, #0
 800dbe2:	bf18      	it	ne
 800dbe4:	2001      	movne	r0, #1
 800dbe6:	e447      	b.n	800d478 <__ieee754_pow+0x240>
 800dbe8:	4622      	mov	r2, r4
 800dbea:	462b      	mov	r3, r5
 800dbec:	f7f2 faf8 	bl	80001e0 <__aeabi_dsub>
 800dbf0:	4642      	mov	r2, r8
 800dbf2:	464b      	mov	r3, r9
 800dbf4:	f7f2 ff32 	bl	8000a5c <__aeabi_dcmpge>
 800dbf8:	2800      	cmp	r0, #0
 800dbfa:	f43f aef3 	beq.w	800d9e4 <__ieee754_pow+0x7ac>
 800dbfe:	e7e9      	b.n	800dbd4 <__ieee754_pow+0x99c>
 800dc00:	f04f 0a00 	mov.w	sl, #0
 800dc04:	e71a      	b.n	800da3c <__ieee754_pow+0x804>
 800dc06:	ec51 0b10 	vmov	r0, r1, d0
 800dc0a:	4619      	mov	r1, r3
 800dc0c:	e7d4      	b.n	800dbb8 <__ieee754_pow+0x980>
 800dc0e:	491c      	ldr	r1, [pc, #112]	; (800dc80 <__ieee754_pow+0xa48>)
 800dc10:	2000      	movs	r0, #0
 800dc12:	f7ff bb30 	b.w	800d276 <__ieee754_pow+0x3e>
 800dc16:	2000      	movs	r0, #0
 800dc18:	2100      	movs	r1, #0
 800dc1a:	f7ff bb2c 	b.w	800d276 <__ieee754_pow+0x3e>
 800dc1e:	4630      	mov	r0, r6
 800dc20:	4639      	mov	r1, r7
 800dc22:	f7ff bb28 	b.w	800d276 <__ieee754_pow+0x3e>
 800dc26:	9204      	str	r2, [sp, #16]
 800dc28:	f7ff bb7a 	b.w	800d320 <__ieee754_pow+0xe8>
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	f7ff bb64 	b.w	800d2fa <__ieee754_pow+0xc2>
 800dc32:	bf00      	nop
 800dc34:	f3af 8000 	nop.w
 800dc38:	00000000 	.word	0x00000000
 800dc3c:	3fe62e43 	.word	0x3fe62e43
 800dc40:	fefa39ef 	.word	0xfefa39ef
 800dc44:	3fe62e42 	.word	0x3fe62e42
 800dc48:	0ca86c39 	.word	0x0ca86c39
 800dc4c:	be205c61 	.word	0xbe205c61
 800dc50:	72bea4d0 	.word	0x72bea4d0
 800dc54:	3e663769 	.word	0x3e663769
 800dc58:	c5d26bf1 	.word	0xc5d26bf1
 800dc5c:	3ebbbd41 	.word	0x3ebbbd41
 800dc60:	af25de2c 	.word	0xaf25de2c
 800dc64:	3f11566a 	.word	0x3f11566a
 800dc68:	16bebd93 	.word	0x16bebd93
 800dc6c:	3f66c16c 	.word	0x3f66c16c
 800dc70:	5555553e 	.word	0x5555553e
 800dc74:	3fc55555 	.word	0x3fc55555
 800dc78:	3fe00000 	.word	0x3fe00000
 800dc7c:	000fffff 	.word	0x000fffff
 800dc80:	3ff00000 	.word	0x3ff00000
 800dc84:	4090cbff 	.word	0x4090cbff
 800dc88:	3f6f3400 	.word	0x3f6f3400
 800dc8c:	652b82fe 	.word	0x652b82fe
 800dc90:	3c971547 	.word	0x3c971547
 800dc94:	00000000 	.word	0x00000000

0800dc98 <__ieee754_rem_pio2>:
 800dc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc9c:	ed2d 8b02 	vpush	{d8}
 800dca0:	ec55 4b10 	vmov	r4, r5, d0
 800dca4:	4bca      	ldr	r3, [pc, #808]	; (800dfd0 <__ieee754_rem_pio2+0x338>)
 800dca6:	b08b      	sub	sp, #44	; 0x2c
 800dca8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800dcac:	4598      	cmp	r8, r3
 800dcae:	4682      	mov	sl, r0
 800dcb0:	9502      	str	r5, [sp, #8]
 800dcb2:	dc08      	bgt.n	800dcc6 <__ieee754_rem_pio2+0x2e>
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	ed80 0b00 	vstr	d0, [r0]
 800dcbc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800dcc0:	f04f 0b00 	mov.w	fp, #0
 800dcc4:	e028      	b.n	800dd18 <__ieee754_rem_pio2+0x80>
 800dcc6:	4bc3      	ldr	r3, [pc, #780]	; (800dfd4 <__ieee754_rem_pio2+0x33c>)
 800dcc8:	4598      	cmp	r8, r3
 800dcca:	dc78      	bgt.n	800ddbe <__ieee754_rem_pio2+0x126>
 800dccc:	9b02      	ldr	r3, [sp, #8]
 800dcce:	4ec2      	ldr	r6, [pc, #776]	; (800dfd8 <__ieee754_rem_pio2+0x340>)
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	ee10 0a10 	vmov	r0, s0
 800dcd6:	a3b0      	add	r3, pc, #704	; (adr r3, 800df98 <__ieee754_rem_pio2+0x300>)
 800dcd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcdc:	4629      	mov	r1, r5
 800dcde:	dd39      	ble.n	800dd54 <__ieee754_rem_pio2+0xbc>
 800dce0:	f7f2 fa7e 	bl	80001e0 <__aeabi_dsub>
 800dce4:	45b0      	cmp	r8, r6
 800dce6:	4604      	mov	r4, r0
 800dce8:	460d      	mov	r5, r1
 800dcea:	d01b      	beq.n	800dd24 <__ieee754_rem_pio2+0x8c>
 800dcec:	a3ac      	add	r3, pc, #688	; (adr r3, 800dfa0 <__ieee754_rem_pio2+0x308>)
 800dcee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf2:	f7f2 fa75 	bl	80001e0 <__aeabi_dsub>
 800dcf6:	4602      	mov	r2, r0
 800dcf8:	460b      	mov	r3, r1
 800dcfa:	e9ca 2300 	strd	r2, r3, [sl]
 800dcfe:	4620      	mov	r0, r4
 800dd00:	4629      	mov	r1, r5
 800dd02:	f7f2 fa6d 	bl	80001e0 <__aeabi_dsub>
 800dd06:	a3a6      	add	r3, pc, #664	; (adr r3, 800dfa0 <__ieee754_rem_pio2+0x308>)
 800dd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd0c:	f7f2 fa68 	bl	80001e0 <__aeabi_dsub>
 800dd10:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dd14:	f04f 0b01 	mov.w	fp, #1
 800dd18:	4658      	mov	r0, fp
 800dd1a:	b00b      	add	sp, #44	; 0x2c
 800dd1c:	ecbd 8b02 	vpop	{d8}
 800dd20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd24:	a3a0      	add	r3, pc, #640	; (adr r3, 800dfa8 <__ieee754_rem_pio2+0x310>)
 800dd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2a:	f7f2 fa59 	bl	80001e0 <__aeabi_dsub>
 800dd2e:	a3a0      	add	r3, pc, #640	; (adr r3, 800dfb0 <__ieee754_rem_pio2+0x318>)
 800dd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd34:	4604      	mov	r4, r0
 800dd36:	460d      	mov	r5, r1
 800dd38:	f7f2 fa52 	bl	80001e0 <__aeabi_dsub>
 800dd3c:	4602      	mov	r2, r0
 800dd3e:	460b      	mov	r3, r1
 800dd40:	e9ca 2300 	strd	r2, r3, [sl]
 800dd44:	4620      	mov	r0, r4
 800dd46:	4629      	mov	r1, r5
 800dd48:	f7f2 fa4a 	bl	80001e0 <__aeabi_dsub>
 800dd4c:	a398      	add	r3, pc, #608	; (adr r3, 800dfb0 <__ieee754_rem_pio2+0x318>)
 800dd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd52:	e7db      	b.n	800dd0c <__ieee754_rem_pio2+0x74>
 800dd54:	f7f2 fa46 	bl	80001e4 <__adddf3>
 800dd58:	45b0      	cmp	r8, r6
 800dd5a:	4604      	mov	r4, r0
 800dd5c:	460d      	mov	r5, r1
 800dd5e:	d016      	beq.n	800dd8e <__ieee754_rem_pio2+0xf6>
 800dd60:	a38f      	add	r3, pc, #572	; (adr r3, 800dfa0 <__ieee754_rem_pio2+0x308>)
 800dd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd66:	f7f2 fa3d 	bl	80001e4 <__adddf3>
 800dd6a:	4602      	mov	r2, r0
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	e9ca 2300 	strd	r2, r3, [sl]
 800dd72:	4620      	mov	r0, r4
 800dd74:	4629      	mov	r1, r5
 800dd76:	f7f2 fa33 	bl	80001e0 <__aeabi_dsub>
 800dd7a:	a389      	add	r3, pc, #548	; (adr r3, 800dfa0 <__ieee754_rem_pio2+0x308>)
 800dd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd80:	f7f2 fa30 	bl	80001e4 <__adddf3>
 800dd84:	f04f 3bff 	mov.w	fp, #4294967295
 800dd88:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dd8c:	e7c4      	b.n	800dd18 <__ieee754_rem_pio2+0x80>
 800dd8e:	a386      	add	r3, pc, #536	; (adr r3, 800dfa8 <__ieee754_rem_pio2+0x310>)
 800dd90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd94:	f7f2 fa26 	bl	80001e4 <__adddf3>
 800dd98:	a385      	add	r3, pc, #532	; (adr r3, 800dfb0 <__ieee754_rem_pio2+0x318>)
 800dd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd9e:	4604      	mov	r4, r0
 800dda0:	460d      	mov	r5, r1
 800dda2:	f7f2 fa1f 	bl	80001e4 <__adddf3>
 800dda6:	4602      	mov	r2, r0
 800dda8:	460b      	mov	r3, r1
 800ddaa:	e9ca 2300 	strd	r2, r3, [sl]
 800ddae:	4620      	mov	r0, r4
 800ddb0:	4629      	mov	r1, r5
 800ddb2:	f7f2 fa15 	bl	80001e0 <__aeabi_dsub>
 800ddb6:	a37e      	add	r3, pc, #504	; (adr r3, 800dfb0 <__ieee754_rem_pio2+0x318>)
 800ddb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddbc:	e7e0      	b.n	800dd80 <__ieee754_rem_pio2+0xe8>
 800ddbe:	4b87      	ldr	r3, [pc, #540]	; (800dfdc <__ieee754_rem_pio2+0x344>)
 800ddc0:	4598      	cmp	r8, r3
 800ddc2:	f300 80d9 	bgt.w	800df78 <__ieee754_rem_pio2+0x2e0>
 800ddc6:	f001 fa1f 	bl	800f208 <fabs>
 800ddca:	ec55 4b10 	vmov	r4, r5, d0
 800ddce:	ee10 0a10 	vmov	r0, s0
 800ddd2:	a379      	add	r3, pc, #484	; (adr r3, 800dfb8 <__ieee754_rem_pio2+0x320>)
 800ddd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddd8:	4629      	mov	r1, r5
 800ddda:	f7f2 fbb9 	bl	8000550 <__aeabi_dmul>
 800ddde:	4b80      	ldr	r3, [pc, #512]	; (800dfe0 <__ieee754_rem_pio2+0x348>)
 800dde0:	2200      	movs	r2, #0
 800dde2:	f7f2 f9ff 	bl	80001e4 <__adddf3>
 800dde6:	f7f2 fe63 	bl	8000ab0 <__aeabi_d2iz>
 800ddea:	4683      	mov	fp, r0
 800ddec:	f7f2 fb46 	bl	800047c <__aeabi_i2d>
 800ddf0:	4602      	mov	r2, r0
 800ddf2:	460b      	mov	r3, r1
 800ddf4:	ec43 2b18 	vmov	d8, r2, r3
 800ddf8:	a367      	add	r3, pc, #412	; (adr r3, 800df98 <__ieee754_rem_pio2+0x300>)
 800ddfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddfe:	f7f2 fba7 	bl	8000550 <__aeabi_dmul>
 800de02:	4602      	mov	r2, r0
 800de04:	460b      	mov	r3, r1
 800de06:	4620      	mov	r0, r4
 800de08:	4629      	mov	r1, r5
 800de0a:	f7f2 f9e9 	bl	80001e0 <__aeabi_dsub>
 800de0e:	a364      	add	r3, pc, #400	; (adr r3, 800dfa0 <__ieee754_rem_pio2+0x308>)
 800de10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de14:	4606      	mov	r6, r0
 800de16:	460f      	mov	r7, r1
 800de18:	ec51 0b18 	vmov	r0, r1, d8
 800de1c:	f7f2 fb98 	bl	8000550 <__aeabi_dmul>
 800de20:	f1bb 0f1f 	cmp.w	fp, #31
 800de24:	4604      	mov	r4, r0
 800de26:	460d      	mov	r5, r1
 800de28:	dc0d      	bgt.n	800de46 <__ieee754_rem_pio2+0x1ae>
 800de2a:	4b6e      	ldr	r3, [pc, #440]	; (800dfe4 <__ieee754_rem_pio2+0x34c>)
 800de2c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800de30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de34:	4543      	cmp	r3, r8
 800de36:	d006      	beq.n	800de46 <__ieee754_rem_pio2+0x1ae>
 800de38:	4622      	mov	r2, r4
 800de3a:	462b      	mov	r3, r5
 800de3c:	4630      	mov	r0, r6
 800de3e:	4639      	mov	r1, r7
 800de40:	f7f2 f9ce 	bl	80001e0 <__aeabi_dsub>
 800de44:	e00f      	b.n	800de66 <__ieee754_rem_pio2+0x1ce>
 800de46:	462b      	mov	r3, r5
 800de48:	4622      	mov	r2, r4
 800de4a:	4630      	mov	r0, r6
 800de4c:	4639      	mov	r1, r7
 800de4e:	f7f2 f9c7 	bl	80001e0 <__aeabi_dsub>
 800de52:	ea4f 5328 	mov.w	r3, r8, asr #20
 800de56:	9303      	str	r3, [sp, #12]
 800de58:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800de5c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800de60:	f1b8 0f10 	cmp.w	r8, #16
 800de64:	dc02      	bgt.n	800de6c <__ieee754_rem_pio2+0x1d4>
 800de66:	e9ca 0100 	strd	r0, r1, [sl]
 800de6a:	e039      	b.n	800dee0 <__ieee754_rem_pio2+0x248>
 800de6c:	a34e      	add	r3, pc, #312	; (adr r3, 800dfa8 <__ieee754_rem_pio2+0x310>)
 800de6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de72:	ec51 0b18 	vmov	r0, r1, d8
 800de76:	f7f2 fb6b 	bl	8000550 <__aeabi_dmul>
 800de7a:	4604      	mov	r4, r0
 800de7c:	460d      	mov	r5, r1
 800de7e:	4602      	mov	r2, r0
 800de80:	460b      	mov	r3, r1
 800de82:	4630      	mov	r0, r6
 800de84:	4639      	mov	r1, r7
 800de86:	f7f2 f9ab 	bl	80001e0 <__aeabi_dsub>
 800de8a:	4602      	mov	r2, r0
 800de8c:	460b      	mov	r3, r1
 800de8e:	4680      	mov	r8, r0
 800de90:	4689      	mov	r9, r1
 800de92:	4630      	mov	r0, r6
 800de94:	4639      	mov	r1, r7
 800de96:	f7f2 f9a3 	bl	80001e0 <__aeabi_dsub>
 800de9a:	4622      	mov	r2, r4
 800de9c:	462b      	mov	r3, r5
 800de9e:	f7f2 f99f 	bl	80001e0 <__aeabi_dsub>
 800dea2:	a343      	add	r3, pc, #268	; (adr r3, 800dfb0 <__ieee754_rem_pio2+0x318>)
 800dea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea8:	4604      	mov	r4, r0
 800deaa:	460d      	mov	r5, r1
 800deac:	ec51 0b18 	vmov	r0, r1, d8
 800deb0:	f7f2 fb4e 	bl	8000550 <__aeabi_dmul>
 800deb4:	4622      	mov	r2, r4
 800deb6:	462b      	mov	r3, r5
 800deb8:	f7f2 f992 	bl	80001e0 <__aeabi_dsub>
 800debc:	4602      	mov	r2, r0
 800debe:	460b      	mov	r3, r1
 800dec0:	4604      	mov	r4, r0
 800dec2:	460d      	mov	r5, r1
 800dec4:	4640      	mov	r0, r8
 800dec6:	4649      	mov	r1, r9
 800dec8:	f7f2 f98a 	bl	80001e0 <__aeabi_dsub>
 800decc:	9a03      	ldr	r2, [sp, #12]
 800dece:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ded2:	1ad3      	subs	r3, r2, r3
 800ded4:	2b31      	cmp	r3, #49	; 0x31
 800ded6:	dc24      	bgt.n	800df22 <__ieee754_rem_pio2+0x28a>
 800ded8:	e9ca 0100 	strd	r0, r1, [sl]
 800dedc:	4646      	mov	r6, r8
 800dede:	464f      	mov	r7, r9
 800dee0:	e9da 8900 	ldrd	r8, r9, [sl]
 800dee4:	4630      	mov	r0, r6
 800dee6:	4642      	mov	r2, r8
 800dee8:	464b      	mov	r3, r9
 800deea:	4639      	mov	r1, r7
 800deec:	f7f2 f978 	bl	80001e0 <__aeabi_dsub>
 800def0:	462b      	mov	r3, r5
 800def2:	4622      	mov	r2, r4
 800def4:	f7f2 f974 	bl	80001e0 <__aeabi_dsub>
 800def8:	9b02      	ldr	r3, [sp, #8]
 800defa:	2b00      	cmp	r3, #0
 800defc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800df00:	f6bf af0a 	bge.w	800dd18 <__ieee754_rem_pio2+0x80>
 800df04:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800df08:	f8ca 3004 	str.w	r3, [sl, #4]
 800df0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800df10:	f8ca 8000 	str.w	r8, [sl]
 800df14:	f8ca 0008 	str.w	r0, [sl, #8]
 800df18:	f8ca 300c 	str.w	r3, [sl, #12]
 800df1c:	f1cb 0b00 	rsb	fp, fp, #0
 800df20:	e6fa      	b.n	800dd18 <__ieee754_rem_pio2+0x80>
 800df22:	a327      	add	r3, pc, #156	; (adr r3, 800dfc0 <__ieee754_rem_pio2+0x328>)
 800df24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df28:	ec51 0b18 	vmov	r0, r1, d8
 800df2c:	f7f2 fb10 	bl	8000550 <__aeabi_dmul>
 800df30:	4604      	mov	r4, r0
 800df32:	460d      	mov	r5, r1
 800df34:	4602      	mov	r2, r0
 800df36:	460b      	mov	r3, r1
 800df38:	4640      	mov	r0, r8
 800df3a:	4649      	mov	r1, r9
 800df3c:	f7f2 f950 	bl	80001e0 <__aeabi_dsub>
 800df40:	4602      	mov	r2, r0
 800df42:	460b      	mov	r3, r1
 800df44:	4606      	mov	r6, r0
 800df46:	460f      	mov	r7, r1
 800df48:	4640      	mov	r0, r8
 800df4a:	4649      	mov	r1, r9
 800df4c:	f7f2 f948 	bl	80001e0 <__aeabi_dsub>
 800df50:	4622      	mov	r2, r4
 800df52:	462b      	mov	r3, r5
 800df54:	f7f2 f944 	bl	80001e0 <__aeabi_dsub>
 800df58:	a31b      	add	r3, pc, #108	; (adr r3, 800dfc8 <__ieee754_rem_pio2+0x330>)
 800df5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df5e:	4604      	mov	r4, r0
 800df60:	460d      	mov	r5, r1
 800df62:	ec51 0b18 	vmov	r0, r1, d8
 800df66:	f7f2 faf3 	bl	8000550 <__aeabi_dmul>
 800df6a:	4622      	mov	r2, r4
 800df6c:	462b      	mov	r3, r5
 800df6e:	f7f2 f937 	bl	80001e0 <__aeabi_dsub>
 800df72:	4604      	mov	r4, r0
 800df74:	460d      	mov	r5, r1
 800df76:	e75f      	b.n	800de38 <__ieee754_rem_pio2+0x1a0>
 800df78:	4b1b      	ldr	r3, [pc, #108]	; (800dfe8 <__ieee754_rem_pio2+0x350>)
 800df7a:	4598      	cmp	r8, r3
 800df7c:	dd36      	ble.n	800dfec <__ieee754_rem_pio2+0x354>
 800df7e:	ee10 2a10 	vmov	r2, s0
 800df82:	462b      	mov	r3, r5
 800df84:	4620      	mov	r0, r4
 800df86:	4629      	mov	r1, r5
 800df88:	f7f2 f92a 	bl	80001e0 <__aeabi_dsub>
 800df8c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800df90:	e9ca 0100 	strd	r0, r1, [sl]
 800df94:	e694      	b.n	800dcc0 <__ieee754_rem_pio2+0x28>
 800df96:	bf00      	nop
 800df98:	54400000 	.word	0x54400000
 800df9c:	3ff921fb 	.word	0x3ff921fb
 800dfa0:	1a626331 	.word	0x1a626331
 800dfa4:	3dd0b461 	.word	0x3dd0b461
 800dfa8:	1a600000 	.word	0x1a600000
 800dfac:	3dd0b461 	.word	0x3dd0b461
 800dfb0:	2e037073 	.word	0x2e037073
 800dfb4:	3ba3198a 	.word	0x3ba3198a
 800dfb8:	6dc9c883 	.word	0x6dc9c883
 800dfbc:	3fe45f30 	.word	0x3fe45f30
 800dfc0:	2e000000 	.word	0x2e000000
 800dfc4:	3ba3198a 	.word	0x3ba3198a
 800dfc8:	252049c1 	.word	0x252049c1
 800dfcc:	397b839a 	.word	0x397b839a
 800dfd0:	3fe921fb 	.word	0x3fe921fb
 800dfd4:	4002d97b 	.word	0x4002d97b
 800dfd8:	3ff921fb 	.word	0x3ff921fb
 800dfdc:	413921fb 	.word	0x413921fb
 800dfe0:	3fe00000 	.word	0x3fe00000
 800dfe4:	0800f660 	.word	0x0800f660
 800dfe8:	7fefffff 	.word	0x7fefffff
 800dfec:	ea4f 5428 	mov.w	r4, r8, asr #20
 800dff0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800dff4:	ee10 0a10 	vmov	r0, s0
 800dff8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800dffc:	ee10 6a10 	vmov	r6, s0
 800e000:	460f      	mov	r7, r1
 800e002:	f7f2 fd55 	bl	8000ab0 <__aeabi_d2iz>
 800e006:	f7f2 fa39 	bl	800047c <__aeabi_i2d>
 800e00a:	4602      	mov	r2, r0
 800e00c:	460b      	mov	r3, r1
 800e00e:	4630      	mov	r0, r6
 800e010:	4639      	mov	r1, r7
 800e012:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e016:	f7f2 f8e3 	bl	80001e0 <__aeabi_dsub>
 800e01a:	4b23      	ldr	r3, [pc, #140]	; (800e0a8 <__ieee754_rem_pio2+0x410>)
 800e01c:	2200      	movs	r2, #0
 800e01e:	f7f2 fa97 	bl	8000550 <__aeabi_dmul>
 800e022:	460f      	mov	r7, r1
 800e024:	4606      	mov	r6, r0
 800e026:	f7f2 fd43 	bl	8000ab0 <__aeabi_d2iz>
 800e02a:	f7f2 fa27 	bl	800047c <__aeabi_i2d>
 800e02e:	4602      	mov	r2, r0
 800e030:	460b      	mov	r3, r1
 800e032:	4630      	mov	r0, r6
 800e034:	4639      	mov	r1, r7
 800e036:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e03a:	f7f2 f8d1 	bl	80001e0 <__aeabi_dsub>
 800e03e:	4b1a      	ldr	r3, [pc, #104]	; (800e0a8 <__ieee754_rem_pio2+0x410>)
 800e040:	2200      	movs	r2, #0
 800e042:	f7f2 fa85 	bl	8000550 <__aeabi_dmul>
 800e046:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e04a:	ad04      	add	r5, sp, #16
 800e04c:	f04f 0803 	mov.w	r8, #3
 800e050:	46a9      	mov	r9, r5
 800e052:	2600      	movs	r6, #0
 800e054:	2700      	movs	r7, #0
 800e056:	4632      	mov	r2, r6
 800e058:	463b      	mov	r3, r7
 800e05a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800e05e:	46c3      	mov	fp, r8
 800e060:	3d08      	subs	r5, #8
 800e062:	f108 38ff 	add.w	r8, r8, #4294967295
 800e066:	f7f2 fcdb 	bl	8000a20 <__aeabi_dcmpeq>
 800e06a:	2800      	cmp	r0, #0
 800e06c:	d1f3      	bne.n	800e056 <__ieee754_rem_pio2+0x3be>
 800e06e:	4b0f      	ldr	r3, [pc, #60]	; (800e0ac <__ieee754_rem_pio2+0x414>)
 800e070:	9301      	str	r3, [sp, #4]
 800e072:	2302      	movs	r3, #2
 800e074:	9300      	str	r3, [sp, #0]
 800e076:	4622      	mov	r2, r4
 800e078:	465b      	mov	r3, fp
 800e07a:	4651      	mov	r1, sl
 800e07c:	4648      	mov	r0, r9
 800e07e:	f000 fc63 	bl	800e948 <__kernel_rem_pio2>
 800e082:	9b02      	ldr	r3, [sp, #8]
 800e084:	2b00      	cmp	r3, #0
 800e086:	4683      	mov	fp, r0
 800e088:	f6bf ae46 	bge.w	800dd18 <__ieee754_rem_pio2+0x80>
 800e08c:	e9da 2100 	ldrd	r2, r1, [sl]
 800e090:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e094:	e9ca 2300 	strd	r2, r3, [sl]
 800e098:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800e09c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e0a0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e0a4:	e73a      	b.n	800df1c <__ieee754_rem_pio2+0x284>
 800e0a6:	bf00      	nop
 800e0a8:	41700000 	.word	0x41700000
 800e0ac:	0800f6e0 	.word	0x0800f6e0

0800e0b0 <__ieee754_sqrt>:
 800e0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0b4:	ec55 4b10 	vmov	r4, r5, d0
 800e0b8:	4e55      	ldr	r6, [pc, #340]	; (800e210 <__ieee754_sqrt+0x160>)
 800e0ba:	43ae      	bics	r6, r5
 800e0bc:	ee10 0a10 	vmov	r0, s0
 800e0c0:	ee10 3a10 	vmov	r3, s0
 800e0c4:	462a      	mov	r2, r5
 800e0c6:	4629      	mov	r1, r5
 800e0c8:	d110      	bne.n	800e0ec <__ieee754_sqrt+0x3c>
 800e0ca:	ee10 2a10 	vmov	r2, s0
 800e0ce:	462b      	mov	r3, r5
 800e0d0:	f7f2 fa3e 	bl	8000550 <__aeabi_dmul>
 800e0d4:	4602      	mov	r2, r0
 800e0d6:	460b      	mov	r3, r1
 800e0d8:	4620      	mov	r0, r4
 800e0da:	4629      	mov	r1, r5
 800e0dc:	f7f2 f882 	bl	80001e4 <__adddf3>
 800e0e0:	4604      	mov	r4, r0
 800e0e2:	460d      	mov	r5, r1
 800e0e4:	ec45 4b10 	vmov	d0, r4, r5
 800e0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0ec:	2d00      	cmp	r5, #0
 800e0ee:	dc10      	bgt.n	800e112 <__ieee754_sqrt+0x62>
 800e0f0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e0f4:	4330      	orrs	r0, r6
 800e0f6:	d0f5      	beq.n	800e0e4 <__ieee754_sqrt+0x34>
 800e0f8:	b15d      	cbz	r5, 800e112 <__ieee754_sqrt+0x62>
 800e0fa:	ee10 2a10 	vmov	r2, s0
 800e0fe:	462b      	mov	r3, r5
 800e100:	ee10 0a10 	vmov	r0, s0
 800e104:	f7f2 f86c 	bl	80001e0 <__aeabi_dsub>
 800e108:	4602      	mov	r2, r0
 800e10a:	460b      	mov	r3, r1
 800e10c:	f7f2 fb4a 	bl	80007a4 <__aeabi_ddiv>
 800e110:	e7e6      	b.n	800e0e0 <__ieee754_sqrt+0x30>
 800e112:	1512      	asrs	r2, r2, #20
 800e114:	d074      	beq.n	800e200 <__ieee754_sqrt+0x150>
 800e116:	07d4      	lsls	r4, r2, #31
 800e118:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e11c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800e120:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e124:	bf5e      	ittt	pl
 800e126:	0fda      	lsrpl	r2, r3, #31
 800e128:	005b      	lslpl	r3, r3, #1
 800e12a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800e12e:	2400      	movs	r4, #0
 800e130:	0fda      	lsrs	r2, r3, #31
 800e132:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e136:	107f      	asrs	r7, r7, #1
 800e138:	005b      	lsls	r3, r3, #1
 800e13a:	2516      	movs	r5, #22
 800e13c:	4620      	mov	r0, r4
 800e13e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e142:	1886      	adds	r6, r0, r2
 800e144:	428e      	cmp	r6, r1
 800e146:	bfde      	ittt	le
 800e148:	1b89      	suble	r1, r1, r6
 800e14a:	18b0      	addle	r0, r6, r2
 800e14c:	18a4      	addle	r4, r4, r2
 800e14e:	0049      	lsls	r1, r1, #1
 800e150:	3d01      	subs	r5, #1
 800e152:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800e156:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e15a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e15e:	d1f0      	bne.n	800e142 <__ieee754_sqrt+0x92>
 800e160:	462a      	mov	r2, r5
 800e162:	f04f 0e20 	mov.w	lr, #32
 800e166:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e16a:	4281      	cmp	r1, r0
 800e16c:	eb06 0c05 	add.w	ip, r6, r5
 800e170:	dc02      	bgt.n	800e178 <__ieee754_sqrt+0xc8>
 800e172:	d113      	bne.n	800e19c <__ieee754_sqrt+0xec>
 800e174:	459c      	cmp	ip, r3
 800e176:	d811      	bhi.n	800e19c <__ieee754_sqrt+0xec>
 800e178:	f1bc 0f00 	cmp.w	ip, #0
 800e17c:	eb0c 0506 	add.w	r5, ip, r6
 800e180:	da43      	bge.n	800e20a <__ieee754_sqrt+0x15a>
 800e182:	2d00      	cmp	r5, #0
 800e184:	db41      	blt.n	800e20a <__ieee754_sqrt+0x15a>
 800e186:	f100 0801 	add.w	r8, r0, #1
 800e18a:	1a09      	subs	r1, r1, r0
 800e18c:	459c      	cmp	ip, r3
 800e18e:	bf88      	it	hi
 800e190:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800e194:	eba3 030c 	sub.w	r3, r3, ip
 800e198:	4432      	add	r2, r6
 800e19a:	4640      	mov	r0, r8
 800e19c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e1a0:	f1be 0e01 	subs.w	lr, lr, #1
 800e1a4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800e1a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e1ac:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e1b0:	d1db      	bne.n	800e16a <__ieee754_sqrt+0xba>
 800e1b2:	430b      	orrs	r3, r1
 800e1b4:	d006      	beq.n	800e1c4 <__ieee754_sqrt+0x114>
 800e1b6:	1c50      	adds	r0, r2, #1
 800e1b8:	bf13      	iteet	ne
 800e1ba:	3201      	addne	r2, #1
 800e1bc:	3401      	addeq	r4, #1
 800e1be:	4672      	moveq	r2, lr
 800e1c0:	f022 0201 	bicne.w	r2, r2, #1
 800e1c4:	1063      	asrs	r3, r4, #1
 800e1c6:	0852      	lsrs	r2, r2, #1
 800e1c8:	07e1      	lsls	r1, r4, #31
 800e1ca:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e1ce:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e1d2:	bf48      	it	mi
 800e1d4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800e1d8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e1dc:	4614      	mov	r4, r2
 800e1de:	e781      	b.n	800e0e4 <__ieee754_sqrt+0x34>
 800e1e0:	0ad9      	lsrs	r1, r3, #11
 800e1e2:	3815      	subs	r0, #21
 800e1e4:	055b      	lsls	r3, r3, #21
 800e1e6:	2900      	cmp	r1, #0
 800e1e8:	d0fa      	beq.n	800e1e0 <__ieee754_sqrt+0x130>
 800e1ea:	02cd      	lsls	r5, r1, #11
 800e1ec:	d50a      	bpl.n	800e204 <__ieee754_sqrt+0x154>
 800e1ee:	f1c2 0420 	rsb	r4, r2, #32
 800e1f2:	fa23 f404 	lsr.w	r4, r3, r4
 800e1f6:	1e55      	subs	r5, r2, #1
 800e1f8:	4093      	lsls	r3, r2
 800e1fa:	4321      	orrs	r1, r4
 800e1fc:	1b42      	subs	r2, r0, r5
 800e1fe:	e78a      	b.n	800e116 <__ieee754_sqrt+0x66>
 800e200:	4610      	mov	r0, r2
 800e202:	e7f0      	b.n	800e1e6 <__ieee754_sqrt+0x136>
 800e204:	0049      	lsls	r1, r1, #1
 800e206:	3201      	adds	r2, #1
 800e208:	e7ef      	b.n	800e1ea <__ieee754_sqrt+0x13a>
 800e20a:	4680      	mov	r8, r0
 800e20c:	e7bd      	b.n	800e18a <__ieee754_sqrt+0xda>
 800e20e:	bf00      	nop
 800e210:	7ff00000 	.word	0x7ff00000

0800e214 <__ieee754_powf>:
 800e214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e218:	ee10 4a90 	vmov	r4, s1
 800e21c:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800e220:	ed2d 8b02 	vpush	{d8}
 800e224:	ee10 6a10 	vmov	r6, s0
 800e228:	eeb0 8a40 	vmov.f32	s16, s0
 800e22c:	eef0 8a60 	vmov.f32	s17, s1
 800e230:	d10c      	bne.n	800e24c <__ieee754_powf+0x38>
 800e232:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800e236:	0076      	lsls	r6, r6, #1
 800e238:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800e23c:	f240 8296 	bls.w	800e76c <__ieee754_powf+0x558>
 800e240:	ee38 0a28 	vadd.f32	s0, s16, s17
 800e244:	ecbd 8b02 	vpop	{d8}
 800e248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e24c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800e250:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800e254:	dcf4      	bgt.n	800e240 <__ieee754_powf+0x2c>
 800e256:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800e25a:	dd08      	ble.n	800e26e <__ieee754_powf+0x5a>
 800e25c:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800e260:	d1ee      	bne.n	800e240 <__ieee754_powf+0x2c>
 800e262:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800e266:	0064      	lsls	r4, r4, #1
 800e268:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800e26c:	e7e6      	b.n	800e23c <__ieee754_powf+0x28>
 800e26e:	2e00      	cmp	r6, #0
 800e270:	da20      	bge.n	800e2b4 <__ieee754_powf+0xa0>
 800e272:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800e276:	da2d      	bge.n	800e2d4 <__ieee754_powf+0xc0>
 800e278:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800e27c:	f2c0 827f 	blt.w	800e77e <__ieee754_powf+0x56a>
 800e280:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800e284:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800e288:	fa48 f703 	asr.w	r7, r8, r3
 800e28c:	fa07 f303 	lsl.w	r3, r7, r3
 800e290:	4543      	cmp	r3, r8
 800e292:	f040 8274 	bne.w	800e77e <__ieee754_powf+0x56a>
 800e296:	f007 0701 	and.w	r7, r7, #1
 800e29a:	f1c7 0702 	rsb	r7, r7, #2
 800e29e:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800e2a2:	d11f      	bne.n	800e2e4 <__ieee754_powf+0xd0>
 800e2a4:	2c00      	cmp	r4, #0
 800e2a6:	f280 8267 	bge.w	800e778 <__ieee754_powf+0x564>
 800e2aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e2ae:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800e2b2:	e7c7      	b.n	800e244 <__ieee754_powf+0x30>
 800e2b4:	2700      	movs	r7, #0
 800e2b6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800e2ba:	d1f0      	bne.n	800e29e <__ieee754_powf+0x8a>
 800e2bc:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800e2c0:	f000 8254 	beq.w	800e76c <__ieee754_powf+0x558>
 800e2c4:	dd08      	ble.n	800e2d8 <__ieee754_powf+0xc4>
 800e2c6:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800e5d0 <__ieee754_powf+0x3bc>
 800e2ca:	2c00      	cmp	r4, #0
 800e2cc:	bfa8      	it	ge
 800e2ce:	eeb0 0a68 	vmovge.f32	s0, s17
 800e2d2:	e7b7      	b.n	800e244 <__ieee754_powf+0x30>
 800e2d4:	2702      	movs	r7, #2
 800e2d6:	e7ee      	b.n	800e2b6 <__ieee754_powf+0xa2>
 800e2d8:	2c00      	cmp	r4, #0
 800e2da:	f280 824a 	bge.w	800e772 <__ieee754_powf+0x55e>
 800e2de:	eeb1 0a68 	vneg.f32	s0, s17
 800e2e2:	e7af      	b.n	800e244 <__ieee754_powf+0x30>
 800e2e4:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800e2e8:	d102      	bne.n	800e2f0 <__ieee754_powf+0xdc>
 800e2ea:	ee28 0a08 	vmul.f32	s0, s16, s16
 800e2ee:	e7a9      	b.n	800e244 <__ieee754_powf+0x30>
 800e2f0:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800e2f4:	eeb0 0a48 	vmov.f32	s0, s16
 800e2f8:	d107      	bne.n	800e30a <__ieee754_powf+0xf6>
 800e2fa:	2e00      	cmp	r6, #0
 800e2fc:	db05      	blt.n	800e30a <__ieee754_powf+0xf6>
 800e2fe:	ecbd 8b02 	vpop	{d8}
 800e302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e306:	f000 ba53 	b.w	800e7b0 <__ieee754_sqrtf>
 800e30a:	f001 f897 	bl	800f43c <fabsf>
 800e30e:	b125      	cbz	r5, 800e31a <__ieee754_powf+0x106>
 800e310:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800e314:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800e318:	d116      	bne.n	800e348 <__ieee754_powf+0x134>
 800e31a:	2c00      	cmp	r4, #0
 800e31c:	bfbc      	itt	lt
 800e31e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800e322:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800e326:	2e00      	cmp	r6, #0
 800e328:	da8c      	bge.n	800e244 <__ieee754_powf+0x30>
 800e32a:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800e32e:	ea55 0307 	orrs.w	r3, r5, r7
 800e332:	d104      	bne.n	800e33e <__ieee754_powf+0x12a>
 800e334:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e338:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800e33c:	e782      	b.n	800e244 <__ieee754_powf+0x30>
 800e33e:	2f01      	cmp	r7, #1
 800e340:	d180      	bne.n	800e244 <__ieee754_powf+0x30>
 800e342:	eeb1 0a40 	vneg.f32	s0, s0
 800e346:	e77d      	b.n	800e244 <__ieee754_powf+0x30>
 800e348:	0ff0      	lsrs	r0, r6, #31
 800e34a:	3801      	subs	r0, #1
 800e34c:	ea57 0300 	orrs.w	r3, r7, r0
 800e350:	d104      	bne.n	800e35c <__ieee754_powf+0x148>
 800e352:	ee38 8a48 	vsub.f32	s16, s16, s16
 800e356:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800e35a:	e773      	b.n	800e244 <__ieee754_powf+0x30>
 800e35c:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800e360:	dd74      	ble.n	800e44c <__ieee754_powf+0x238>
 800e362:	4b9c      	ldr	r3, [pc, #624]	; (800e5d4 <__ieee754_powf+0x3c0>)
 800e364:	429d      	cmp	r5, r3
 800e366:	dc08      	bgt.n	800e37a <__ieee754_powf+0x166>
 800e368:	2c00      	cmp	r4, #0
 800e36a:	da0b      	bge.n	800e384 <__ieee754_powf+0x170>
 800e36c:	2000      	movs	r0, #0
 800e36e:	ecbd 8b02 	vpop	{d8}
 800e372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e376:	f000 bf41 	b.w	800f1fc <__math_oflowf>
 800e37a:	4b97      	ldr	r3, [pc, #604]	; (800e5d8 <__ieee754_powf+0x3c4>)
 800e37c:	429d      	cmp	r5, r3
 800e37e:	dd08      	ble.n	800e392 <__ieee754_powf+0x17e>
 800e380:	2c00      	cmp	r4, #0
 800e382:	dcf3      	bgt.n	800e36c <__ieee754_powf+0x158>
 800e384:	2000      	movs	r0, #0
 800e386:	ecbd 8b02 	vpop	{d8}
 800e38a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e38e:	f000 bf2f 	b.w	800f1f0 <__math_uflowf>
 800e392:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e396:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e39a:	eddf 6a90 	vldr	s13, [pc, #576]	; 800e5dc <__ieee754_powf+0x3c8>
 800e39e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800e3a2:	eee0 6a67 	vfms.f32	s13, s0, s15
 800e3a6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e3aa:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800e3ae:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e3b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e3b6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800e5e0 <__ieee754_powf+0x3cc>
 800e3ba:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800e3be:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800e5e4 <__ieee754_powf+0x3d0>
 800e3c2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e3c6:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800e5e8 <__ieee754_powf+0x3d4>
 800e3ca:	eef0 6a67 	vmov.f32	s13, s15
 800e3ce:	eee0 6a07 	vfma.f32	s13, s0, s14
 800e3d2:	ee16 3a90 	vmov	r3, s13
 800e3d6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e3da:	f023 030f 	bic.w	r3, r3, #15
 800e3de:	ee00 3a90 	vmov	s1, r3
 800e3e2:	eee0 0a47 	vfms.f32	s1, s0, s14
 800e3e6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e3ea:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800e3ee:	f024 040f 	bic.w	r4, r4, #15
 800e3f2:	ee07 4a10 	vmov	s14, r4
 800e3f6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800e3fa:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800e3fe:	ee07 3a90 	vmov	s15, r3
 800e402:	eee7 0a27 	vfma.f32	s1, s14, s15
 800e406:	3f01      	subs	r7, #1
 800e408:	ea57 0200 	orrs.w	r2, r7, r0
 800e40c:	ee07 4a10 	vmov	s14, r4
 800e410:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e414:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800e418:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800e41c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800e420:	ee17 4a10 	vmov	r4, s14
 800e424:	bf08      	it	eq
 800e426:	eeb0 8a40 	vmoveq.f32	s16, s0
 800e42a:	2c00      	cmp	r4, #0
 800e42c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e430:	f340 817e 	ble.w	800e730 <__ieee754_powf+0x51c>
 800e434:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800e438:	f340 80f8 	ble.w	800e62c <__ieee754_powf+0x418>
 800e43c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e444:	bf4c      	ite	mi
 800e446:	2001      	movmi	r0, #1
 800e448:	2000      	movpl	r0, #0
 800e44a:	e790      	b.n	800e36e <__ieee754_powf+0x15a>
 800e44c:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800e450:	bf01      	itttt	eq
 800e452:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800e5ec <__ieee754_powf+0x3d8>
 800e456:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800e45a:	f06f 0217 	mvneq.w	r2, #23
 800e45e:	ee17 5a90 	vmoveq	r5, s15
 800e462:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800e466:	bf18      	it	ne
 800e468:	2200      	movne	r2, #0
 800e46a:	3b7f      	subs	r3, #127	; 0x7f
 800e46c:	4413      	add	r3, r2
 800e46e:	4a60      	ldr	r2, [pc, #384]	; (800e5f0 <__ieee754_powf+0x3dc>)
 800e470:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800e474:	4295      	cmp	r5, r2
 800e476:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800e47a:	dd06      	ble.n	800e48a <__ieee754_powf+0x276>
 800e47c:	4a5d      	ldr	r2, [pc, #372]	; (800e5f4 <__ieee754_powf+0x3e0>)
 800e47e:	4295      	cmp	r5, r2
 800e480:	f340 80a4 	ble.w	800e5cc <__ieee754_powf+0x3b8>
 800e484:	3301      	adds	r3, #1
 800e486:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800e48a:	2500      	movs	r5, #0
 800e48c:	4a5a      	ldr	r2, [pc, #360]	; (800e5f8 <__ieee754_powf+0x3e4>)
 800e48e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800e492:	ee07 1a90 	vmov	s15, r1
 800e496:	ed92 7a00 	vldr	s14, [r2]
 800e49a:	4a58      	ldr	r2, [pc, #352]	; (800e5fc <__ieee754_powf+0x3e8>)
 800e49c:	ee37 6a27 	vadd.f32	s12, s14, s15
 800e4a0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800e4a4:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800e4a8:	1049      	asrs	r1, r1, #1
 800e4aa:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800e4ae:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800e4b2:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800e4b6:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800e4ba:	ee06 1a10 	vmov	s12, r1
 800e4be:	ee65 4a26 	vmul.f32	s9, s10, s13
 800e4c2:	ee36 7a47 	vsub.f32	s14, s12, s14
 800e4c6:	ee14 6a90 	vmov	r6, s9
 800e4ca:	4016      	ands	r6, r2
 800e4cc:	ee05 6a90 	vmov	s11, r6
 800e4d0:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800e4d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e4d8:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800e600 <__ieee754_powf+0x3ec>
 800e4dc:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800e4e0:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800e4e4:	ee25 6a26 	vmul.f32	s12, s10, s13
 800e4e8:	eddf 6a46 	vldr	s13, [pc, #280]	; 800e604 <__ieee754_powf+0x3f0>
 800e4ec:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800e4f0:	eddf 6a45 	vldr	s13, [pc, #276]	; 800e608 <__ieee754_powf+0x3f4>
 800e4f4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e4f8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800e5dc <__ieee754_powf+0x3c8>
 800e4fc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e500:	eddf 6a42 	vldr	s13, [pc, #264]	; 800e60c <__ieee754_powf+0x3f8>
 800e504:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e508:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800e610 <__ieee754_powf+0x3fc>
 800e50c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e510:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800e514:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800e518:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e51c:	eee5 6a07 	vfma.f32	s13, s10, s14
 800e520:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800e524:	eef0 7a45 	vmov.f32	s15, s10
 800e528:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800e52c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e530:	ee17 1a90 	vmov	r1, s15
 800e534:	4011      	ands	r1, r2
 800e536:	ee07 1a90 	vmov	s15, r1
 800e53a:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800e53e:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800e542:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800e546:	ee27 7a24 	vmul.f32	s14, s14, s9
 800e54a:	eea6 7a27 	vfma.f32	s14, s12, s15
 800e54e:	eeb0 6a47 	vmov.f32	s12, s14
 800e552:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800e556:	ee16 1a10 	vmov	r1, s12
 800e55a:	4011      	ands	r1, r2
 800e55c:	ee06 1a90 	vmov	s13, r1
 800e560:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800e564:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800e614 <__ieee754_powf+0x400>
 800e568:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800e618 <__ieee754_powf+0x404>
 800e56c:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e570:	ee06 1a10 	vmov	s12, r1
 800e574:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e578:	eddf 7a28 	vldr	s15, [pc, #160]	; 800e61c <__ieee754_powf+0x408>
 800e57c:	4928      	ldr	r1, [pc, #160]	; (800e620 <__ieee754_powf+0x40c>)
 800e57e:	eea6 7a27 	vfma.f32	s14, s12, s15
 800e582:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800e586:	edd1 7a00 	vldr	s15, [r1]
 800e58a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e58e:	ee07 3a90 	vmov	s15, r3
 800e592:	4b24      	ldr	r3, [pc, #144]	; (800e624 <__ieee754_powf+0x410>)
 800e594:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e598:	eef0 7a47 	vmov.f32	s15, s14
 800e59c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e5a0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800e5a4:	edd5 0a00 	vldr	s1, [r5]
 800e5a8:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800e5ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e5b0:	ee17 3a90 	vmov	r3, s15
 800e5b4:	4013      	ands	r3, r2
 800e5b6:	ee07 3a90 	vmov	s15, r3
 800e5ba:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e5be:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800e5c2:	eee6 6a65 	vfms.f32	s13, s12, s11
 800e5c6:	ee77 7a66 	vsub.f32	s15, s14, s13
 800e5ca:	e70e      	b.n	800e3ea <__ieee754_powf+0x1d6>
 800e5cc:	2501      	movs	r5, #1
 800e5ce:	e75d      	b.n	800e48c <__ieee754_powf+0x278>
 800e5d0:	00000000 	.word	0x00000000
 800e5d4:	3f7ffff3 	.word	0x3f7ffff3
 800e5d8:	3f800007 	.word	0x3f800007
 800e5dc:	3eaaaaab 	.word	0x3eaaaaab
 800e5e0:	3fb8aa3b 	.word	0x3fb8aa3b
 800e5e4:	36eca570 	.word	0x36eca570
 800e5e8:	3fb8aa00 	.word	0x3fb8aa00
 800e5ec:	4b800000 	.word	0x4b800000
 800e5f0:	001cc471 	.word	0x001cc471
 800e5f4:	005db3d6 	.word	0x005db3d6
 800e5f8:	0800f7e8 	.word	0x0800f7e8
 800e5fc:	fffff000 	.word	0xfffff000
 800e600:	3e6c3255 	.word	0x3e6c3255
 800e604:	3e53f142 	.word	0x3e53f142
 800e608:	3e8ba305 	.word	0x3e8ba305
 800e60c:	3edb6db7 	.word	0x3edb6db7
 800e610:	3f19999a 	.word	0x3f19999a
 800e614:	3f76384f 	.word	0x3f76384f
 800e618:	3f763800 	.word	0x3f763800
 800e61c:	369dc3a0 	.word	0x369dc3a0
 800e620:	0800f7f8 	.word	0x0800f7f8
 800e624:	0800f7f0 	.word	0x0800f7f0
 800e628:	3338aa3c 	.word	0x3338aa3c
 800e62c:	f040 8095 	bne.w	800e75a <__ieee754_powf+0x546>
 800e630:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800e628 <__ieee754_powf+0x414>
 800e634:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e638:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800e63c:	eef4 6ac7 	vcmpe.f32	s13, s14
 800e640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e644:	f73f aefa 	bgt.w	800e43c <__ieee754_powf+0x228>
 800e648:	15db      	asrs	r3, r3, #23
 800e64a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800e64e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e652:	4103      	asrs	r3, r0
 800e654:	4423      	add	r3, r4
 800e656:	494b      	ldr	r1, [pc, #300]	; (800e784 <__ieee754_powf+0x570>)
 800e658:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e65c:	3a7f      	subs	r2, #127	; 0x7f
 800e65e:	4111      	asrs	r1, r2
 800e660:	ea23 0101 	bic.w	r1, r3, r1
 800e664:	ee07 1a10 	vmov	s14, r1
 800e668:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800e66c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800e670:	f1c2 0217 	rsb	r2, r2, #23
 800e674:	4110      	asrs	r0, r2
 800e676:	2c00      	cmp	r4, #0
 800e678:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e67c:	bfb8      	it	lt
 800e67e:	4240      	neglt	r0, r0
 800e680:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800e684:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800e788 <__ieee754_powf+0x574>
 800e688:	eddf 6a40 	vldr	s13, [pc, #256]	; 800e78c <__ieee754_powf+0x578>
 800e68c:	ee17 3a10 	vmov	r3, s14
 800e690:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e694:	f023 030f 	bic.w	r3, r3, #15
 800e698:	ee07 3a10 	vmov	s14, r3
 800e69c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e6a0:	ee27 0a00 	vmul.f32	s0, s14, s0
 800e6a4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800e6a8:	eddf 7a39 	vldr	s15, [pc, #228]	; 800e790 <__ieee754_powf+0x57c>
 800e6ac:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800e6b0:	eef0 7a40 	vmov.f32	s15, s0
 800e6b4:	eee7 7a26 	vfma.f32	s15, s14, s13
 800e6b8:	eeb0 6a67 	vmov.f32	s12, s15
 800e6bc:	eea7 6a66 	vfms.f32	s12, s14, s13
 800e6c0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800e6c4:	ee30 0a46 	vsub.f32	s0, s0, s12
 800e6c8:	eddf 6a32 	vldr	s13, [pc, #200]	; 800e794 <__ieee754_powf+0x580>
 800e6cc:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800e798 <__ieee754_powf+0x584>
 800e6d0:	eee7 6a06 	vfma.f32	s13, s14, s12
 800e6d4:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800e79c <__ieee754_powf+0x588>
 800e6d8:	eea6 6a87 	vfma.f32	s12, s13, s14
 800e6dc:	eddf 6a30 	vldr	s13, [pc, #192]	; 800e7a0 <__ieee754_powf+0x58c>
 800e6e0:	eee6 6a07 	vfma.f32	s13, s12, s14
 800e6e4:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800e7a4 <__ieee754_powf+0x590>
 800e6e8:	eea6 6a87 	vfma.f32	s12, s13, s14
 800e6ec:	eef0 6a67 	vmov.f32	s13, s15
 800e6f0:	eee6 6a47 	vfms.f32	s13, s12, s14
 800e6f4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800e6f8:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800e6fc:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800e700:	eea7 0a80 	vfma.f32	s0, s15, s0
 800e704:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800e708:	ee37 0a40 	vsub.f32	s0, s14, s0
 800e70c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e710:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e714:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e718:	ee10 3a10 	vmov	r3, s0
 800e71c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800e720:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e724:	da1f      	bge.n	800e766 <__ieee754_powf+0x552>
 800e726:	f000 fe9d 	bl	800f464 <scalbnf>
 800e72a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800e72e:	e589      	b.n	800e244 <__ieee754_powf+0x30>
 800e730:	4a1d      	ldr	r2, [pc, #116]	; (800e7a8 <__ieee754_powf+0x594>)
 800e732:	4293      	cmp	r3, r2
 800e734:	dd07      	ble.n	800e746 <__ieee754_powf+0x532>
 800e736:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e73a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e73e:	bf4c      	ite	mi
 800e740:	2001      	movmi	r0, #1
 800e742:	2000      	movpl	r0, #0
 800e744:	e61f      	b.n	800e386 <__ieee754_powf+0x172>
 800e746:	d108      	bne.n	800e75a <__ieee754_powf+0x546>
 800e748:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e74c:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800e750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e754:	f6ff af78 	blt.w	800e648 <__ieee754_powf+0x434>
 800e758:	e7ed      	b.n	800e736 <__ieee754_powf+0x522>
 800e75a:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800e75e:	f73f af73 	bgt.w	800e648 <__ieee754_powf+0x434>
 800e762:	2000      	movs	r0, #0
 800e764:	e78c      	b.n	800e680 <__ieee754_powf+0x46c>
 800e766:	ee00 3a10 	vmov	s0, r3
 800e76a:	e7de      	b.n	800e72a <__ieee754_powf+0x516>
 800e76c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e770:	e568      	b.n	800e244 <__ieee754_powf+0x30>
 800e772:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800e7ac <__ieee754_powf+0x598>
 800e776:	e565      	b.n	800e244 <__ieee754_powf+0x30>
 800e778:	eeb0 0a48 	vmov.f32	s0, s16
 800e77c:	e562      	b.n	800e244 <__ieee754_powf+0x30>
 800e77e:	2700      	movs	r7, #0
 800e780:	e58d      	b.n	800e29e <__ieee754_powf+0x8a>
 800e782:	bf00      	nop
 800e784:	007fffff 	.word	0x007fffff
 800e788:	35bfbe8c 	.word	0x35bfbe8c
 800e78c:	3f317200 	.word	0x3f317200
 800e790:	3f317218 	.word	0x3f317218
 800e794:	b5ddea0e 	.word	0xb5ddea0e
 800e798:	3331bb4c 	.word	0x3331bb4c
 800e79c:	388ab355 	.word	0x388ab355
 800e7a0:	bb360b61 	.word	0xbb360b61
 800e7a4:	3e2aaaab 	.word	0x3e2aaaab
 800e7a8:	43160000 	.word	0x43160000
 800e7ac:	00000000 	.word	0x00000000

0800e7b0 <__ieee754_sqrtf>:
 800e7b0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e7b4:	4770      	bx	lr
	...

0800e7b8 <__kernel_cos>:
 800e7b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7bc:	ec57 6b10 	vmov	r6, r7, d0
 800e7c0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e7c4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e7c8:	ed8d 1b00 	vstr	d1, [sp]
 800e7cc:	da07      	bge.n	800e7de <__kernel_cos+0x26>
 800e7ce:	ee10 0a10 	vmov	r0, s0
 800e7d2:	4639      	mov	r1, r7
 800e7d4:	f7f2 f96c 	bl	8000ab0 <__aeabi_d2iz>
 800e7d8:	2800      	cmp	r0, #0
 800e7da:	f000 8088 	beq.w	800e8ee <__kernel_cos+0x136>
 800e7de:	4632      	mov	r2, r6
 800e7e0:	463b      	mov	r3, r7
 800e7e2:	4630      	mov	r0, r6
 800e7e4:	4639      	mov	r1, r7
 800e7e6:	f7f1 feb3 	bl	8000550 <__aeabi_dmul>
 800e7ea:	4b51      	ldr	r3, [pc, #324]	; (800e930 <__kernel_cos+0x178>)
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	4604      	mov	r4, r0
 800e7f0:	460d      	mov	r5, r1
 800e7f2:	f7f1 fead 	bl	8000550 <__aeabi_dmul>
 800e7f6:	a340      	add	r3, pc, #256	; (adr r3, 800e8f8 <__kernel_cos+0x140>)
 800e7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7fc:	4682      	mov	sl, r0
 800e7fe:	468b      	mov	fp, r1
 800e800:	4620      	mov	r0, r4
 800e802:	4629      	mov	r1, r5
 800e804:	f7f1 fea4 	bl	8000550 <__aeabi_dmul>
 800e808:	a33d      	add	r3, pc, #244	; (adr r3, 800e900 <__kernel_cos+0x148>)
 800e80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e80e:	f7f1 fce9 	bl	80001e4 <__adddf3>
 800e812:	4622      	mov	r2, r4
 800e814:	462b      	mov	r3, r5
 800e816:	f7f1 fe9b 	bl	8000550 <__aeabi_dmul>
 800e81a:	a33b      	add	r3, pc, #236	; (adr r3, 800e908 <__kernel_cos+0x150>)
 800e81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e820:	f7f1 fcde 	bl	80001e0 <__aeabi_dsub>
 800e824:	4622      	mov	r2, r4
 800e826:	462b      	mov	r3, r5
 800e828:	f7f1 fe92 	bl	8000550 <__aeabi_dmul>
 800e82c:	a338      	add	r3, pc, #224	; (adr r3, 800e910 <__kernel_cos+0x158>)
 800e82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e832:	f7f1 fcd7 	bl	80001e4 <__adddf3>
 800e836:	4622      	mov	r2, r4
 800e838:	462b      	mov	r3, r5
 800e83a:	f7f1 fe89 	bl	8000550 <__aeabi_dmul>
 800e83e:	a336      	add	r3, pc, #216	; (adr r3, 800e918 <__kernel_cos+0x160>)
 800e840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e844:	f7f1 fccc 	bl	80001e0 <__aeabi_dsub>
 800e848:	4622      	mov	r2, r4
 800e84a:	462b      	mov	r3, r5
 800e84c:	f7f1 fe80 	bl	8000550 <__aeabi_dmul>
 800e850:	a333      	add	r3, pc, #204	; (adr r3, 800e920 <__kernel_cos+0x168>)
 800e852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e856:	f7f1 fcc5 	bl	80001e4 <__adddf3>
 800e85a:	4622      	mov	r2, r4
 800e85c:	462b      	mov	r3, r5
 800e85e:	f7f1 fe77 	bl	8000550 <__aeabi_dmul>
 800e862:	4622      	mov	r2, r4
 800e864:	462b      	mov	r3, r5
 800e866:	f7f1 fe73 	bl	8000550 <__aeabi_dmul>
 800e86a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e86e:	4604      	mov	r4, r0
 800e870:	460d      	mov	r5, r1
 800e872:	4630      	mov	r0, r6
 800e874:	4639      	mov	r1, r7
 800e876:	f7f1 fe6b 	bl	8000550 <__aeabi_dmul>
 800e87a:	460b      	mov	r3, r1
 800e87c:	4602      	mov	r2, r0
 800e87e:	4629      	mov	r1, r5
 800e880:	4620      	mov	r0, r4
 800e882:	f7f1 fcad 	bl	80001e0 <__aeabi_dsub>
 800e886:	4b2b      	ldr	r3, [pc, #172]	; (800e934 <__kernel_cos+0x17c>)
 800e888:	4598      	cmp	r8, r3
 800e88a:	4606      	mov	r6, r0
 800e88c:	460f      	mov	r7, r1
 800e88e:	dc10      	bgt.n	800e8b2 <__kernel_cos+0xfa>
 800e890:	4602      	mov	r2, r0
 800e892:	460b      	mov	r3, r1
 800e894:	4650      	mov	r0, sl
 800e896:	4659      	mov	r1, fp
 800e898:	f7f1 fca2 	bl	80001e0 <__aeabi_dsub>
 800e89c:	460b      	mov	r3, r1
 800e89e:	4926      	ldr	r1, [pc, #152]	; (800e938 <__kernel_cos+0x180>)
 800e8a0:	4602      	mov	r2, r0
 800e8a2:	2000      	movs	r0, #0
 800e8a4:	f7f1 fc9c 	bl	80001e0 <__aeabi_dsub>
 800e8a8:	ec41 0b10 	vmov	d0, r0, r1
 800e8ac:	b003      	add	sp, #12
 800e8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8b2:	4b22      	ldr	r3, [pc, #136]	; (800e93c <__kernel_cos+0x184>)
 800e8b4:	4920      	ldr	r1, [pc, #128]	; (800e938 <__kernel_cos+0x180>)
 800e8b6:	4598      	cmp	r8, r3
 800e8b8:	bfcc      	ite	gt
 800e8ba:	4d21      	ldrgt	r5, [pc, #132]	; (800e940 <__kernel_cos+0x188>)
 800e8bc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800e8c0:	2400      	movs	r4, #0
 800e8c2:	4622      	mov	r2, r4
 800e8c4:	462b      	mov	r3, r5
 800e8c6:	2000      	movs	r0, #0
 800e8c8:	f7f1 fc8a 	bl	80001e0 <__aeabi_dsub>
 800e8cc:	4622      	mov	r2, r4
 800e8ce:	4680      	mov	r8, r0
 800e8d0:	4689      	mov	r9, r1
 800e8d2:	462b      	mov	r3, r5
 800e8d4:	4650      	mov	r0, sl
 800e8d6:	4659      	mov	r1, fp
 800e8d8:	f7f1 fc82 	bl	80001e0 <__aeabi_dsub>
 800e8dc:	4632      	mov	r2, r6
 800e8de:	463b      	mov	r3, r7
 800e8e0:	f7f1 fc7e 	bl	80001e0 <__aeabi_dsub>
 800e8e4:	4602      	mov	r2, r0
 800e8e6:	460b      	mov	r3, r1
 800e8e8:	4640      	mov	r0, r8
 800e8ea:	4649      	mov	r1, r9
 800e8ec:	e7da      	b.n	800e8a4 <__kernel_cos+0xec>
 800e8ee:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e928 <__kernel_cos+0x170>
 800e8f2:	e7db      	b.n	800e8ac <__kernel_cos+0xf4>
 800e8f4:	f3af 8000 	nop.w
 800e8f8:	be8838d4 	.word	0xbe8838d4
 800e8fc:	bda8fae9 	.word	0xbda8fae9
 800e900:	bdb4b1c4 	.word	0xbdb4b1c4
 800e904:	3e21ee9e 	.word	0x3e21ee9e
 800e908:	809c52ad 	.word	0x809c52ad
 800e90c:	3e927e4f 	.word	0x3e927e4f
 800e910:	19cb1590 	.word	0x19cb1590
 800e914:	3efa01a0 	.word	0x3efa01a0
 800e918:	16c15177 	.word	0x16c15177
 800e91c:	3f56c16c 	.word	0x3f56c16c
 800e920:	5555554c 	.word	0x5555554c
 800e924:	3fa55555 	.word	0x3fa55555
 800e928:	00000000 	.word	0x00000000
 800e92c:	3ff00000 	.word	0x3ff00000
 800e930:	3fe00000 	.word	0x3fe00000
 800e934:	3fd33332 	.word	0x3fd33332
 800e938:	3ff00000 	.word	0x3ff00000
 800e93c:	3fe90000 	.word	0x3fe90000
 800e940:	3fd20000 	.word	0x3fd20000
 800e944:	00000000 	.word	0x00000000

0800e948 <__kernel_rem_pio2>:
 800e948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e94c:	ed2d 8b02 	vpush	{d8}
 800e950:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800e954:	f112 0f14 	cmn.w	r2, #20
 800e958:	9308      	str	r3, [sp, #32]
 800e95a:	9101      	str	r1, [sp, #4]
 800e95c:	4bc4      	ldr	r3, [pc, #784]	; (800ec70 <__kernel_rem_pio2+0x328>)
 800e95e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800e960:	900b      	str	r0, [sp, #44]	; 0x2c
 800e962:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e966:	9302      	str	r3, [sp, #8]
 800e968:	9b08      	ldr	r3, [sp, #32]
 800e96a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e96e:	bfa8      	it	ge
 800e970:	1ed4      	subge	r4, r2, #3
 800e972:	9306      	str	r3, [sp, #24]
 800e974:	bfb2      	itee	lt
 800e976:	2400      	movlt	r4, #0
 800e978:	2318      	movge	r3, #24
 800e97a:	fb94 f4f3 	sdivge	r4, r4, r3
 800e97e:	f06f 0317 	mvn.w	r3, #23
 800e982:	fb04 3303 	mla	r3, r4, r3, r3
 800e986:	eb03 0a02 	add.w	sl, r3, r2
 800e98a:	9b02      	ldr	r3, [sp, #8]
 800e98c:	9a06      	ldr	r2, [sp, #24]
 800e98e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800ec60 <__kernel_rem_pio2+0x318>
 800e992:	eb03 0802 	add.w	r8, r3, r2
 800e996:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e998:	1aa7      	subs	r7, r4, r2
 800e99a:	ae22      	add	r6, sp, #136	; 0x88
 800e99c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e9a0:	2500      	movs	r5, #0
 800e9a2:	4545      	cmp	r5, r8
 800e9a4:	dd13      	ble.n	800e9ce <__kernel_rem_pio2+0x86>
 800e9a6:	9b08      	ldr	r3, [sp, #32]
 800e9a8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800ec60 <__kernel_rem_pio2+0x318>
 800e9ac:	aa22      	add	r2, sp, #136	; 0x88
 800e9ae:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e9b2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800e9b6:	f04f 0800 	mov.w	r8, #0
 800e9ba:	9b02      	ldr	r3, [sp, #8]
 800e9bc:	4598      	cmp	r8, r3
 800e9be:	dc2f      	bgt.n	800ea20 <__kernel_rem_pio2+0xd8>
 800e9c0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e9c4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800e9c8:	462f      	mov	r7, r5
 800e9ca:	2600      	movs	r6, #0
 800e9cc:	e01b      	b.n	800ea06 <__kernel_rem_pio2+0xbe>
 800e9ce:	42ef      	cmn	r7, r5
 800e9d0:	d407      	bmi.n	800e9e2 <__kernel_rem_pio2+0x9a>
 800e9d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e9d6:	f7f1 fd51 	bl	800047c <__aeabi_i2d>
 800e9da:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e9de:	3501      	adds	r5, #1
 800e9e0:	e7df      	b.n	800e9a2 <__kernel_rem_pio2+0x5a>
 800e9e2:	ec51 0b18 	vmov	r0, r1, d8
 800e9e6:	e7f8      	b.n	800e9da <__kernel_rem_pio2+0x92>
 800e9e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e9ec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e9f0:	f7f1 fdae 	bl	8000550 <__aeabi_dmul>
 800e9f4:	4602      	mov	r2, r0
 800e9f6:	460b      	mov	r3, r1
 800e9f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e9fc:	f7f1 fbf2 	bl	80001e4 <__adddf3>
 800ea00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ea04:	3601      	adds	r6, #1
 800ea06:	9b06      	ldr	r3, [sp, #24]
 800ea08:	429e      	cmp	r6, r3
 800ea0a:	f1a7 0708 	sub.w	r7, r7, #8
 800ea0e:	ddeb      	ble.n	800e9e8 <__kernel_rem_pio2+0xa0>
 800ea10:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ea14:	f108 0801 	add.w	r8, r8, #1
 800ea18:	ecab 7b02 	vstmia	fp!, {d7}
 800ea1c:	3508      	adds	r5, #8
 800ea1e:	e7cc      	b.n	800e9ba <__kernel_rem_pio2+0x72>
 800ea20:	9b02      	ldr	r3, [sp, #8]
 800ea22:	aa0e      	add	r2, sp, #56	; 0x38
 800ea24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ea28:	930d      	str	r3, [sp, #52]	; 0x34
 800ea2a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ea2c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ea30:	9c02      	ldr	r4, [sp, #8]
 800ea32:	930c      	str	r3, [sp, #48]	; 0x30
 800ea34:	00e3      	lsls	r3, r4, #3
 800ea36:	930a      	str	r3, [sp, #40]	; 0x28
 800ea38:	ab9a      	add	r3, sp, #616	; 0x268
 800ea3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ea3e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ea42:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800ea46:	ab72      	add	r3, sp, #456	; 0x1c8
 800ea48:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800ea4c:	46c3      	mov	fp, r8
 800ea4e:	46a1      	mov	r9, r4
 800ea50:	f1b9 0f00 	cmp.w	r9, #0
 800ea54:	f1a5 0508 	sub.w	r5, r5, #8
 800ea58:	dc77      	bgt.n	800eb4a <__kernel_rem_pio2+0x202>
 800ea5a:	ec47 6b10 	vmov	d0, r6, r7
 800ea5e:	4650      	mov	r0, sl
 800ea60:	f000 fc66 	bl	800f330 <scalbn>
 800ea64:	ec57 6b10 	vmov	r6, r7, d0
 800ea68:	2200      	movs	r2, #0
 800ea6a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ea6e:	ee10 0a10 	vmov	r0, s0
 800ea72:	4639      	mov	r1, r7
 800ea74:	f7f1 fd6c 	bl	8000550 <__aeabi_dmul>
 800ea78:	ec41 0b10 	vmov	d0, r0, r1
 800ea7c:	f000 fbd8 	bl	800f230 <floor>
 800ea80:	4b7c      	ldr	r3, [pc, #496]	; (800ec74 <__kernel_rem_pio2+0x32c>)
 800ea82:	ec51 0b10 	vmov	r0, r1, d0
 800ea86:	2200      	movs	r2, #0
 800ea88:	f7f1 fd62 	bl	8000550 <__aeabi_dmul>
 800ea8c:	4602      	mov	r2, r0
 800ea8e:	460b      	mov	r3, r1
 800ea90:	4630      	mov	r0, r6
 800ea92:	4639      	mov	r1, r7
 800ea94:	f7f1 fba4 	bl	80001e0 <__aeabi_dsub>
 800ea98:	460f      	mov	r7, r1
 800ea9a:	4606      	mov	r6, r0
 800ea9c:	f7f2 f808 	bl	8000ab0 <__aeabi_d2iz>
 800eaa0:	9004      	str	r0, [sp, #16]
 800eaa2:	f7f1 fceb 	bl	800047c <__aeabi_i2d>
 800eaa6:	4602      	mov	r2, r0
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	4630      	mov	r0, r6
 800eaac:	4639      	mov	r1, r7
 800eaae:	f7f1 fb97 	bl	80001e0 <__aeabi_dsub>
 800eab2:	f1ba 0f00 	cmp.w	sl, #0
 800eab6:	4606      	mov	r6, r0
 800eab8:	460f      	mov	r7, r1
 800eaba:	dd6d      	ble.n	800eb98 <__kernel_rem_pio2+0x250>
 800eabc:	1e62      	subs	r2, r4, #1
 800eabe:	ab0e      	add	r3, sp, #56	; 0x38
 800eac0:	9d04      	ldr	r5, [sp, #16]
 800eac2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800eac6:	f1ca 0118 	rsb	r1, sl, #24
 800eaca:	fa40 f301 	asr.w	r3, r0, r1
 800eace:	441d      	add	r5, r3
 800ead0:	408b      	lsls	r3, r1
 800ead2:	1ac0      	subs	r0, r0, r3
 800ead4:	ab0e      	add	r3, sp, #56	; 0x38
 800ead6:	9504      	str	r5, [sp, #16]
 800ead8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800eadc:	f1ca 0317 	rsb	r3, sl, #23
 800eae0:	fa40 fb03 	asr.w	fp, r0, r3
 800eae4:	f1bb 0f00 	cmp.w	fp, #0
 800eae8:	dd65      	ble.n	800ebb6 <__kernel_rem_pio2+0x26e>
 800eaea:	9b04      	ldr	r3, [sp, #16]
 800eaec:	2200      	movs	r2, #0
 800eaee:	3301      	adds	r3, #1
 800eaf0:	9304      	str	r3, [sp, #16]
 800eaf2:	4615      	mov	r5, r2
 800eaf4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800eaf8:	4294      	cmp	r4, r2
 800eafa:	f300 809c 	bgt.w	800ec36 <__kernel_rem_pio2+0x2ee>
 800eafe:	f1ba 0f00 	cmp.w	sl, #0
 800eb02:	dd07      	ble.n	800eb14 <__kernel_rem_pio2+0x1cc>
 800eb04:	f1ba 0f01 	cmp.w	sl, #1
 800eb08:	f000 80c0 	beq.w	800ec8c <__kernel_rem_pio2+0x344>
 800eb0c:	f1ba 0f02 	cmp.w	sl, #2
 800eb10:	f000 80c6 	beq.w	800eca0 <__kernel_rem_pio2+0x358>
 800eb14:	f1bb 0f02 	cmp.w	fp, #2
 800eb18:	d14d      	bne.n	800ebb6 <__kernel_rem_pio2+0x26e>
 800eb1a:	4632      	mov	r2, r6
 800eb1c:	463b      	mov	r3, r7
 800eb1e:	4956      	ldr	r1, [pc, #344]	; (800ec78 <__kernel_rem_pio2+0x330>)
 800eb20:	2000      	movs	r0, #0
 800eb22:	f7f1 fb5d 	bl	80001e0 <__aeabi_dsub>
 800eb26:	4606      	mov	r6, r0
 800eb28:	460f      	mov	r7, r1
 800eb2a:	2d00      	cmp	r5, #0
 800eb2c:	d043      	beq.n	800ebb6 <__kernel_rem_pio2+0x26e>
 800eb2e:	4650      	mov	r0, sl
 800eb30:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800ec68 <__kernel_rem_pio2+0x320>
 800eb34:	f000 fbfc 	bl	800f330 <scalbn>
 800eb38:	4630      	mov	r0, r6
 800eb3a:	4639      	mov	r1, r7
 800eb3c:	ec53 2b10 	vmov	r2, r3, d0
 800eb40:	f7f1 fb4e 	bl	80001e0 <__aeabi_dsub>
 800eb44:	4606      	mov	r6, r0
 800eb46:	460f      	mov	r7, r1
 800eb48:	e035      	b.n	800ebb6 <__kernel_rem_pio2+0x26e>
 800eb4a:	4b4c      	ldr	r3, [pc, #304]	; (800ec7c <__kernel_rem_pio2+0x334>)
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	4630      	mov	r0, r6
 800eb50:	4639      	mov	r1, r7
 800eb52:	f7f1 fcfd 	bl	8000550 <__aeabi_dmul>
 800eb56:	f7f1 ffab 	bl	8000ab0 <__aeabi_d2iz>
 800eb5a:	f7f1 fc8f 	bl	800047c <__aeabi_i2d>
 800eb5e:	4602      	mov	r2, r0
 800eb60:	460b      	mov	r3, r1
 800eb62:	ec43 2b18 	vmov	d8, r2, r3
 800eb66:	4b46      	ldr	r3, [pc, #280]	; (800ec80 <__kernel_rem_pio2+0x338>)
 800eb68:	2200      	movs	r2, #0
 800eb6a:	f7f1 fcf1 	bl	8000550 <__aeabi_dmul>
 800eb6e:	4602      	mov	r2, r0
 800eb70:	460b      	mov	r3, r1
 800eb72:	4630      	mov	r0, r6
 800eb74:	4639      	mov	r1, r7
 800eb76:	f7f1 fb33 	bl	80001e0 <__aeabi_dsub>
 800eb7a:	f7f1 ff99 	bl	8000ab0 <__aeabi_d2iz>
 800eb7e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eb82:	f84b 0b04 	str.w	r0, [fp], #4
 800eb86:	ec51 0b18 	vmov	r0, r1, d8
 800eb8a:	f7f1 fb2b 	bl	80001e4 <__adddf3>
 800eb8e:	f109 39ff 	add.w	r9, r9, #4294967295
 800eb92:	4606      	mov	r6, r0
 800eb94:	460f      	mov	r7, r1
 800eb96:	e75b      	b.n	800ea50 <__kernel_rem_pio2+0x108>
 800eb98:	d106      	bne.n	800eba8 <__kernel_rem_pio2+0x260>
 800eb9a:	1e63      	subs	r3, r4, #1
 800eb9c:	aa0e      	add	r2, sp, #56	; 0x38
 800eb9e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800eba2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800eba6:	e79d      	b.n	800eae4 <__kernel_rem_pio2+0x19c>
 800eba8:	4b36      	ldr	r3, [pc, #216]	; (800ec84 <__kernel_rem_pio2+0x33c>)
 800ebaa:	2200      	movs	r2, #0
 800ebac:	f7f1 ff56 	bl	8000a5c <__aeabi_dcmpge>
 800ebb0:	2800      	cmp	r0, #0
 800ebb2:	d13d      	bne.n	800ec30 <__kernel_rem_pio2+0x2e8>
 800ebb4:	4683      	mov	fp, r0
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	2300      	movs	r3, #0
 800ebba:	4630      	mov	r0, r6
 800ebbc:	4639      	mov	r1, r7
 800ebbe:	f7f1 ff2f 	bl	8000a20 <__aeabi_dcmpeq>
 800ebc2:	2800      	cmp	r0, #0
 800ebc4:	f000 80c0 	beq.w	800ed48 <__kernel_rem_pio2+0x400>
 800ebc8:	1e65      	subs	r5, r4, #1
 800ebca:	462b      	mov	r3, r5
 800ebcc:	2200      	movs	r2, #0
 800ebce:	9902      	ldr	r1, [sp, #8]
 800ebd0:	428b      	cmp	r3, r1
 800ebd2:	da6c      	bge.n	800ecae <__kernel_rem_pio2+0x366>
 800ebd4:	2a00      	cmp	r2, #0
 800ebd6:	f000 8089 	beq.w	800ecec <__kernel_rem_pio2+0x3a4>
 800ebda:	ab0e      	add	r3, sp, #56	; 0x38
 800ebdc:	f1aa 0a18 	sub.w	sl, sl, #24
 800ebe0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	f000 80ad 	beq.w	800ed44 <__kernel_rem_pio2+0x3fc>
 800ebea:	4650      	mov	r0, sl
 800ebec:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800ec68 <__kernel_rem_pio2+0x320>
 800ebf0:	f000 fb9e 	bl	800f330 <scalbn>
 800ebf4:	ab9a      	add	r3, sp, #616	; 0x268
 800ebf6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ebfa:	ec57 6b10 	vmov	r6, r7, d0
 800ebfe:	00ec      	lsls	r4, r5, #3
 800ec00:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800ec04:	46aa      	mov	sl, r5
 800ec06:	f1ba 0f00 	cmp.w	sl, #0
 800ec0a:	f280 80d6 	bge.w	800edba <__kernel_rem_pio2+0x472>
 800ec0e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800ec60 <__kernel_rem_pio2+0x318>
 800ec12:	462e      	mov	r6, r5
 800ec14:	2e00      	cmp	r6, #0
 800ec16:	f2c0 8104 	blt.w	800ee22 <__kernel_rem_pio2+0x4da>
 800ec1a:	ab72      	add	r3, sp, #456	; 0x1c8
 800ec1c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ec20:	f8df a064 	ldr.w	sl, [pc, #100]	; 800ec88 <__kernel_rem_pio2+0x340>
 800ec24:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800ec28:	f04f 0800 	mov.w	r8, #0
 800ec2c:	1baf      	subs	r7, r5, r6
 800ec2e:	e0ea      	b.n	800ee06 <__kernel_rem_pio2+0x4be>
 800ec30:	f04f 0b02 	mov.w	fp, #2
 800ec34:	e759      	b.n	800eaea <__kernel_rem_pio2+0x1a2>
 800ec36:	f8d8 3000 	ldr.w	r3, [r8]
 800ec3a:	b955      	cbnz	r5, 800ec52 <__kernel_rem_pio2+0x30a>
 800ec3c:	b123      	cbz	r3, 800ec48 <__kernel_rem_pio2+0x300>
 800ec3e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ec42:	f8c8 3000 	str.w	r3, [r8]
 800ec46:	2301      	movs	r3, #1
 800ec48:	3201      	adds	r2, #1
 800ec4a:	f108 0804 	add.w	r8, r8, #4
 800ec4e:	461d      	mov	r5, r3
 800ec50:	e752      	b.n	800eaf8 <__kernel_rem_pio2+0x1b0>
 800ec52:	1acb      	subs	r3, r1, r3
 800ec54:	f8c8 3000 	str.w	r3, [r8]
 800ec58:	462b      	mov	r3, r5
 800ec5a:	e7f5      	b.n	800ec48 <__kernel_rem_pio2+0x300>
 800ec5c:	f3af 8000 	nop.w
	...
 800ec6c:	3ff00000 	.word	0x3ff00000
 800ec70:	0800f840 	.word	0x0800f840
 800ec74:	40200000 	.word	0x40200000
 800ec78:	3ff00000 	.word	0x3ff00000
 800ec7c:	3e700000 	.word	0x3e700000
 800ec80:	41700000 	.word	0x41700000
 800ec84:	3fe00000 	.word	0x3fe00000
 800ec88:	0800f800 	.word	0x0800f800
 800ec8c:	1e62      	subs	r2, r4, #1
 800ec8e:	ab0e      	add	r3, sp, #56	; 0x38
 800ec90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec94:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ec98:	a90e      	add	r1, sp, #56	; 0x38
 800ec9a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ec9e:	e739      	b.n	800eb14 <__kernel_rem_pio2+0x1cc>
 800eca0:	1e62      	subs	r2, r4, #1
 800eca2:	ab0e      	add	r3, sp, #56	; 0x38
 800eca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eca8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ecac:	e7f4      	b.n	800ec98 <__kernel_rem_pio2+0x350>
 800ecae:	a90e      	add	r1, sp, #56	; 0x38
 800ecb0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ecb4:	3b01      	subs	r3, #1
 800ecb6:	430a      	orrs	r2, r1
 800ecb8:	e789      	b.n	800ebce <__kernel_rem_pio2+0x286>
 800ecba:	3301      	adds	r3, #1
 800ecbc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ecc0:	2900      	cmp	r1, #0
 800ecc2:	d0fa      	beq.n	800ecba <__kernel_rem_pio2+0x372>
 800ecc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ecc6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800ecca:	446a      	add	r2, sp
 800eccc:	3a98      	subs	r2, #152	; 0x98
 800ecce:	920a      	str	r2, [sp, #40]	; 0x28
 800ecd0:	9a08      	ldr	r2, [sp, #32]
 800ecd2:	18e3      	adds	r3, r4, r3
 800ecd4:	18a5      	adds	r5, r4, r2
 800ecd6:	aa22      	add	r2, sp, #136	; 0x88
 800ecd8:	f104 0801 	add.w	r8, r4, #1
 800ecdc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800ece0:	9304      	str	r3, [sp, #16]
 800ece2:	9b04      	ldr	r3, [sp, #16]
 800ece4:	4543      	cmp	r3, r8
 800ece6:	da04      	bge.n	800ecf2 <__kernel_rem_pio2+0x3aa>
 800ece8:	461c      	mov	r4, r3
 800ecea:	e6a3      	b.n	800ea34 <__kernel_rem_pio2+0xec>
 800ecec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ecee:	2301      	movs	r3, #1
 800ecf0:	e7e4      	b.n	800ecbc <__kernel_rem_pio2+0x374>
 800ecf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ecf4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ecf8:	f7f1 fbc0 	bl	800047c <__aeabi_i2d>
 800ecfc:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ed00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed02:	46ab      	mov	fp, r5
 800ed04:	461c      	mov	r4, r3
 800ed06:	f04f 0900 	mov.w	r9, #0
 800ed0a:	2600      	movs	r6, #0
 800ed0c:	2700      	movs	r7, #0
 800ed0e:	9b06      	ldr	r3, [sp, #24]
 800ed10:	4599      	cmp	r9, r3
 800ed12:	dd06      	ble.n	800ed22 <__kernel_rem_pio2+0x3da>
 800ed14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed16:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ed1a:	f108 0801 	add.w	r8, r8, #1
 800ed1e:	930a      	str	r3, [sp, #40]	; 0x28
 800ed20:	e7df      	b.n	800ece2 <__kernel_rem_pio2+0x39a>
 800ed22:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ed26:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ed2a:	f7f1 fc11 	bl	8000550 <__aeabi_dmul>
 800ed2e:	4602      	mov	r2, r0
 800ed30:	460b      	mov	r3, r1
 800ed32:	4630      	mov	r0, r6
 800ed34:	4639      	mov	r1, r7
 800ed36:	f7f1 fa55 	bl	80001e4 <__adddf3>
 800ed3a:	f109 0901 	add.w	r9, r9, #1
 800ed3e:	4606      	mov	r6, r0
 800ed40:	460f      	mov	r7, r1
 800ed42:	e7e4      	b.n	800ed0e <__kernel_rem_pio2+0x3c6>
 800ed44:	3d01      	subs	r5, #1
 800ed46:	e748      	b.n	800ebda <__kernel_rem_pio2+0x292>
 800ed48:	ec47 6b10 	vmov	d0, r6, r7
 800ed4c:	f1ca 0000 	rsb	r0, sl, #0
 800ed50:	f000 faee 	bl	800f330 <scalbn>
 800ed54:	ec57 6b10 	vmov	r6, r7, d0
 800ed58:	4ba0      	ldr	r3, [pc, #640]	; (800efdc <__kernel_rem_pio2+0x694>)
 800ed5a:	ee10 0a10 	vmov	r0, s0
 800ed5e:	2200      	movs	r2, #0
 800ed60:	4639      	mov	r1, r7
 800ed62:	f7f1 fe7b 	bl	8000a5c <__aeabi_dcmpge>
 800ed66:	b1f8      	cbz	r0, 800eda8 <__kernel_rem_pio2+0x460>
 800ed68:	4b9d      	ldr	r3, [pc, #628]	; (800efe0 <__kernel_rem_pio2+0x698>)
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	4630      	mov	r0, r6
 800ed6e:	4639      	mov	r1, r7
 800ed70:	f7f1 fbee 	bl	8000550 <__aeabi_dmul>
 800ed74:	f7f1 fe9c 	bl	8000ab0 <__aeabi_d2iz>
 800ed78:	4680      	mov	r8, r0
 800ed7a:	f7f1 fb7f 	bl	800047c <__aeabi_i2d>
 800ed7e:	4b97      	ldr	r3, [pc, #604]	; (800efdc <__kernel_rem_pio2+0x694>)
 800ed80:	2200      	movs	r2, #0
 800ed82:	f7f1 fbe5 	bl	8000550 <__aeabi_dmul>
 800ed86:	460b      	mov	r3, r1
 800ed88:	4602      	mov	r2, r0
 800ed8a:	4639      	mov	r1, r7
 800ed8c:	4630      	mov	r0, r6
 800ed8e:	f7f1 fa27 	bl	80001e0 <__aeabi_dsub>
 800ed92:	f7f1 fe8d 	bl	8000ab0 <__aeabi_d2iz>
 800ed96:	1c65      	adds	r5, r4, #1
 800ed98:	ab0e      	add	r3, sp, #56	; 0x38
 800ed9a:	f10a 0a18 	add.w	sl, sl, #24
 800ed9e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800eda2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800eda6:	e720      	b.n	800ebea <__kernel_rem_pio2+0x2a2>
 800eda8:	4630      	mov	r0, r6
 800edaa:	4639      	mov	r1, r7
 800edac:	f7f1 fe80 	bl	8000ab0 <__aeabi_d2iz>
 800edb0:	ab0e      	add	r3, sp, #56	; 0x38
 800edb2:	4625      	mov	r5, r4
 800edb4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800edb8:	e717      	b.n	800ebea <__kernel_rem_pio2+0x2a2>
 800edba:	ab0e      	add	r3, sp, #56	; 0x38
 800edbc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800edc0:	f7f1 fb5c 	bl	800047c <__aeabi_i2d>
 800edc4:	4632      	mov	r2, r6
 800edc6:	463b      	mov	r3, r7
 800edc8:	f7f1 fbc2 	bl	8000550 <__aeabi_dmul>
 800edcc:	4b84      	ldr	r3, [pc, #528]	; (800efe0 <__kernel_rem_pio2+0x698>)
 800edce:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800edd2:	2200      	movs	r2, #0
 800edd4:	4630      	mov	r0, r6
 800edd6:	4639      	mov	r1, r7
 800edd8:	f7f1 fbba 	bl	8000550 <__aeabi_dmul>
 800eddc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ede0:	4606      	mov	r6, r0
 800ede2:	460f      	mov	r7, r1
 800ede4:	e70f      	b.n	800ec06 <__kernel_rem_pio2+0x2be>
 800ede6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800edea:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800edee:	f7f1 fbaf 	bl	8000550 <__aeabi_dmul>
 800edf2:	4602      	mov	r2, r0
 800edf4:	460b      	mov	r3, r1
 800edf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800edfa:	f7f1 f9f3 	bl	80001e4 <__adddf3>
 800edfe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ee02:	f108 0801 	add.w	r8, r8, #1
 800ee06:	9b02      	ldr	r3, [sp, #8]
 800ee08:	4598      	cmp	r8, r3
 800ee0a:	dc01      	bgt.n	800ee10 <__kernel_rem_pio2+0x4c8>
 800ee0c:	45b8      	cmp	r8, r7
 800ee0e:	ddea      	ble.n	800ede6 <__kernel_rem_pio2+0x49e>
 800ee10:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ee14:	ab4a      	add	r3, sp, #296	; 0x128
 800ee16:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ee1a:	ed87 7b00 	vstr	d7, [r7]
 800ee1e:	3e01      	subs	r6, #1
 800ee20:	e6f8      	b.n	800ec14 <__kernel_rem_pio2+0x2cc>
 800ee22:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ee24:	2b02      	cmp	r3, #2
 800ee26:	dc0b      	bgt.n	800ee40 <__kernel_rem_pio2+0x4f8>
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	dc35      	bgt.n	800ee98 <__kernel_rem_pio2+0x550>
 800ee2c:	d059      	beq.n	800eee2 <__kernel_rem_pio2+0x59a>
 800ee2e:	9b04      	ldr	r3, [sp, #16]
 800ee30:	f003 0007 	and.w	r0, r3, #7
 800ee34:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800ee38:	ecbd 8b02 	vpop	{d8}
 800ee3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee40:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ee42:	2b03      	cmp	r3, #3
 800ee44:	d1f3      	bne.n	800ee2e <__kernel_rem_pio2+0x4e6>
 800ee46:	ab4a      	add	r3, sp, #296	; 0x128
 800ee48:	4423      	add	r3, r4
 800ee4a:	9306      	str	r3, [sp, #24]
 800ee4c:	461c      	mov	r4, r3
 800ee4e:	469a      	mov	sl, r3
 800ee50:	9502      	str	r5, [sp, #8]
 800ee52:	9b02      	ldr	r3, [sp, #8]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	f1aa 0a08 	sub.w	sl, sl, #8
 800ee5a:	dc6b      	bgt.n	800ef34 <__kernel_rem_pio2+0x5ec>
 800ee5c:	46aa      	mov	sl, r5
 800ee5e:	f1ba 0f01 	cmp.w	sl, #1
 800ee62:	f1a4 0408 	sub.w	r4, r4, #8
 800ee66:	f300 8085 	bgt.w	800ef74 <__kernel_rem_pio2+0x62c>
 800ee6a:	9c06      	ldr	r4, [sp, #24]
 800ee6c:	2000      	movs	r0, #0
 800ee6e:	3408      	adds	r4, #8
 800ee70:	2100      	movs	r1, #0
 800ee72:	2d01      	cmp	r5, #1
 800ee74:	f300 809d 	bgt.w	800efb2 <__kernel_rem_pio2+0x66a>
 800ee78:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800ee7c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800ee80:	f1bb 0f00 	cmp.w	fp, #0
 800ee84:	f040 809b 	bne.w	800efbe <__kernel_rem_pio2+0x676>
 800ee88:	9b01      	ldr	r3, [sp, #4]
 800ee8a:	e9c3 5600 	strd	r5, r6, [r3]
 800ee8e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800ee92:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ee96:	e7ca      	b.n	800ee2e <__kernel_rem_pio2+0x4e6>
 800ee98:	3408      	adds	r4, #8
 800ee9a:	ab4a      	add	r3, sp, #296	; 0x128
 800ee9c:	441c      	add	r4, r3
 800ee9e:	462e      	mov	r6, r5
 800eea0:	2000      	movs	r0, #0
 800eea2:	2100      	movs	r1, #0
 800eea4:	2e00      	cmp	r6, #0
 800eea6:	da36      	bge.n	800ef16 <__kernel_rem_pio2+0x5ce>
 800eea8:	f1bb 0f00 	cmp.w	fp, #0
 800eeac:	d039      	beq.n	800ef22 <__kernel_rem_pio2+0x5da>
 800eeae:	4602      	mov	r2, r0
 800eeb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eeb4:	9c01      	ldr	r4, [sp, #4]
 800eeb6:	e9c4 2300 	strd	r2, r3, [r4]
 800eeba:	4602      	mov	r2, r0
 800eebc:	460b      	mov	r3, r1
 800eebe:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800eec2:	f7f1 f98d 	bl	80001e0 <__aeabi_dsub>
 800eec6:	ae4c      	add	r6, sp, #304	; 0x130
 800eec8:	2401      	movs	r4, #1
 800eeca:	42a5      	cmp	r5, r4
 800eecc:	da2c      	bge.n	800ef28 <__kernel_rem_pio2+0x5e0>
 800eece:	f1bb 0f00 	cmp.w	fp, #0
 800eed2:	d002      	beq.n	800eeda <__kernel_rem_pio2+0x592>
 800eed4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eed8:	4619      	mov	r1, r3
 800eeda:	9b01      	ldr	r3, [sp, #4]
 800eedc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800eee0:	e7a5      	b.n	800ee2e <__kernel_rem_pio2+0x4e6>
 800eee2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800eee6:	eb0d 0403 	add.w	r4, sp, r3
 800eeea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800eeee:	2000      	movs	r0, #0
 800eef0:	2100      	movs	r1, #0
 800eef2:	2d00      	cmp	r5, #0
 800eef4:	da09      	bge.n	800ef0a <__kernel_rem_pio2+0x5c2>
 800eef6:	f1bb 0f00 	cmp.w	fp, #0
 800eefa:	d002      	beq.n	800ef02 <__kernel_rem_pio2+0x5ba>
 800eefc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef00:	4619      	mov	r1, r3
 800ef02:	9b01      	ldr	r3, [sp, #4]
 800ef04:	e9c3 0100 	strd	r0, r1, [r3]
 800ef08:	e791      	b.n	800ee2e <__kernel_rem_pio2+0x4e6>
 800ef0a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ef0e:	f7f1 f969 	bl	80001e4 <__adddf3>
 800ef12:	3d01      	subs	r5, #1
 800ef14:	e7ed      	b.n	800eef2 <__kernel_rem_pio2+0x5aa>
 800ef16:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ef1a:	f7f1 f963 	bl	80001e4 <__adddf3>
 800ef1e:	3e01      	subs	r6, #1
 800ef20:	e7c0      	b.n	800eea4 <__kernel_rem_pio2+0x55c>
 800ef22:	4602      	mov	r2, r0
 800ef24:	460b      	mov	r3, r1
 800ef26:	e7c5      	b.n	800eeb4 <__kernel_rem_pio2+0x56c>
 800ef28:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ef2c:	f7f1 f95a 	bl	80001e4 <__adddf3>
 800ef30:	3401      	adds	r4, #1
 800ef32:	e7ca      	b.n	800eeca <__kernel_rem_pio2+0x582>
 800ef34:	e9da 8900 	ldrd	r8, r9, [sl]
 800ef38:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ef3c:	9b02      	ldr	r3, [sp, #8]
 800ef3e:	3b01      	subs	r3, #1
 800ef40:	9302      	str	r3, [sp, #8]
 800ef42:	4632      	mov	r2, r6
 800ef44:	463b      	mov	r3, r7
 800ef46:	4640      	mov	r0, r8
 800ef48:	4649      	mov	r1, r9
 800ef4a:	f7f1 f94b 	bl	80001e4 <__adddf3>
 800ef4e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ef52:	4602      	mov	r2, r0
 800ef54:	460b      	mov	r3, r1
 800ef56:	4640      	mov	r0, r8
 800ef58:	4649      	mov	r1, r9
 800ef5a:	f7f1 f941 	bl	80001e0 <__aeabi_dsub>
 800ef5e:	4632      	mov	r2, r6
 800ef60:	463b      	mov	r3, r7
 800ef62:	f7f1 f93f 	bl	80001e4 <__adddf3>
 800ef66:	ed9d 7b08 	vldr	d7, [sp, #32]
 800ef6a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ef6e:	ed8a 7b00 	vstr	d7, [sl]
 800ef72:	e76e      	b.n	800ee52 <__kernel_rem_pio2+0x50a>
 800ef74:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ef78:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ef7c:	4640      	mov	r0, r8
 800ef7e:	4632      	mov	r2, r6
 800ef80:	463b      	mov	r3, r7
 800ef82:	4649      	mov	r1, r9
 800ef84:	f7f1 f92e 	bl	80001e4 <__adddf3>
 800ef88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef8c:	4602      	mov	r2, r0
 800ef8e:	460b      	mov	r3, r1
 800ef90:	4640      	mov	r0, r8
 800ef92:	4649      	mov	r1, r9
 800ef94:	f7f1 f924 	bl	80001e0 <__aeabi_dsub>
 800ef98:	4632      	mov	r2, r6
 800ef9a:	463b      	mov	r3, r7
 800ef9c:	f7f1 f922 	bl	80001e4 <__adddf3>
 800efa0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800efa4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800efa8:	ed84 7b00 	vstr	d7, [r4]
 800efac:	f10a 3aff 	add.w	sl, sl, #4294967295
 800efb0:	e755      	b.n	800ee5e <__kernel_rem_pio2+0x516>
 800efb2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800efb6:	f7f1 f915 	bl	80001e4 <__adddf3>
 800efba:	3d01      	subs	r5, #1
 800efbc:	e759      	b.n	800ee72 <__kernel_rem_pio2+0x52a>
 800efbe:	9b01      	ldr	r3, [sp, #4]
 800efc0:	9a01      	ldr	r2, [sp, #4]
 800efc2:	601d      	str	r5, [r3, #0]
 800efc4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800efc8:	605c      	str	r4, [r3, #4]
 800efca:	609f      	str	r7, [r3, #8]
 800efcc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800efd0:	60d3      	str	r3, [r2, #12]
 800efd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800efd6:	6110      	str	r0, [r2, #16]
 800efd8:	6153      	str	r3, [r2, #20]
 800efda:	e728      	b.n	800ee2e <__kernel_rem_pio2+0x4e6>
 800efdc:	41700000 	.word	0x41700000
 800efe0:	3e700000 	.word	0x3e700000
 800efe4:	00000000 	.word	0x00000000

0800efe8 <__kernel_sin>:
 800efe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efec:	ed2d 8b04 	vpush	{d8-d9}
 800eff0:	eeb0 8a41 	vmov.f32	s16, s2
 800eff4:	eef0 8a61 	vmov.f32	s17, s3
 800eff8:	ec55 4b10 	vmov	r4, r5, d0
 800effc:	b083      	sub	sp, #12
 800effe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f002:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f006:	9001      	str	r0, [sp, #4]
 800f008:	da06      	bge.n	800f018 <__kernel_sin+0x30>
 800f00a:	ee10 0a10 	vmov	r0, s0
 800f00e:	4629      	mov	r1, r5
 800f010:	f7f1 fd4e 	bl	8000ab0 <__aeabi_d2iz>
 800f014:	2800      	cmp	r0, #0
 800f016:	d051      	beq.n	800f0bc <__kernel_sin+0xd4>
 800f018:	4622      	mov	r2, r4
 800f01a:	462b      	mov	r3, r5
 800f01c:	4620      	mov	r0, r4
 800f01e:	4629      	mov	r1, r5
 800f020:	f7f1 fa96 	bl	8000550 <__aeabi_dmul>
 800f024:	4682      	mov	sl, r0
 800f026:	468b      	mov	fp, r1
 800f028:	4602      	mov	r2, r0
 800f02a:	460b      	mov	r3, r1
 800f02c:	4620      	mov	r0, r4
 800f02e:	4629      	mov	r1, r5
 800f030:	f7f1 fa8e 	bl	8000550 <__aeabi_dmul>
 800f034:	a341      	add	r3, pc, #260	; (adr r3, 800f13c <__kernel_sin+0x154>)
 800f036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f03a:	4680      	mov	r8, r0
 800f03c:	4689      	mov	r9, r1
 800f03e:	4650      	mov	r0, sl
 800f040:	4659      	mov	r1, fp
 800f042:	f7f1 fa85 	bl	8000550 <__aeabi_dmul>
 800f046:	a33f      	add	r3, pc, #252	; (adr r3, 800f144 <__kernel_sin+0x15c>)
 800f048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f04c:	f7f1 f8c8 	bl	80001e0 <__aeabi_dsub>
 800f050:	4652      	mov	r2, sl
 800f052:	465b      	mov	r3, fp
 800f054:	f7f1 fa7c 	bl	8000550 <__aeabi_dmul>
 800f058:	a33c      	add	r3, pc, #240	; (adr r3, 800f14c <__kernel_sin+0x164>)
 800f05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f05e:	f7f1 f8c1 	bl	80001e4 <__adddf3>
 800f062:	4652      	mov	r2, sl
 800f064:	465b      	mov	r3, fp
 800f066:	f7f1 fa73 	bl	8000550 <__aeabi_dmul>
 800f06a:	a33a      	add	r3, pc, #232	; (adr r3, 800f154 <__kernel_sin+0x16c>)
 800f06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f070:	f7f1 f8b6 	bl	80001e0 <__aeabi_dsub>
 800f074:	4652      	mov	r2, sl
 800f076:	465b      	mov	r3, fp
 800f078:	f7f1 fa6a 	bl	8000550 <__aeabi_dmul>
 800f07c:	a337      	add	r3, pc, #220	; (adr r3, 800f15c <__kernel_sin+0x174>)
 800f07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f082:	f7f1 f8af 	bl	80001e4 <__adddf3>
 800f086:	9b01      	ldr	r3, [sp, #4]
 800f088:	4606      	mov	r6, r0
 800f08a:	460f      	mov	r7, r1
 800f08c:	b9eb      	cbnz	r3, 800f0ca <__kernel_sin+0xe2>
 800f08e:	4602      	mov	r2, r0
 800f090:	460b      	mov	r3, r1
 800f092:	4650      	mov	r0, sl
 800f094:	4659      	mov	r1, fp
 800f096:	f7f1 fa5b 	bl	8000550 <__aeabi_dmul>
 800f09a:	a325      	add	r3, pc, #148	; (adr r3, 800f130 <__kernel_sin+0x148>)
 800f09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a0:	f7f1 f89e 	bl	80001e0 <__aeabi_dsub>
 800f0a4:	4642      	mov	r2, r8
 800f0a6:	464b      	mov	r3, r9
 800f0a8:	f7f1 fa52 	bl	8000550 <__aeabi_dmul>
 800f0ac:	4602      	mov	r2, r0
 800f0ae:	460b      	mov	r3, r1
 800f0b0:	4620      	mov	r0, r4
 800f0b2:	4629      	mov	r1, r5
 800f0b4:	f7f1 f896 	bl	80001e4 <__adddf3>
 800f0b8:	4604      	mov	r4, r0
 800f0ba:	460d      	mov	r5, r1
 800f0bc:	ec45 4b10 	vmov	d0, r4, r5
 800f0c0:	b003      	add	sp, #12
 800f0c2:	ecbd 8b04 	vpop	{d8-d9}
 800f0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0ca:	4b1b      	ldr	r3, [pc, #108]	; (800f138 <__kernel_sin+0x150>)
 800f0cc:	ec51 0b18 	vmov	r0, r1, d8
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	f7f1 fa3d 	bl	8000550 <__aeabi_dmul>
 800f0d6:	4632      	mov	r2, r6
 800f0d8:	ec41 0b19 	vmov	d9, r0, r1
 800f0dc:	463b      	mov	r3, r7
 800f0de:	4640      	mov	r0, r8
 800f0e0:	4649      	mov	r1, r9
 800f0e2:	f7f1 fa35 	bl	8000550 <__aeabi_dmul>
 800f0e6:	4602      	mov	r2, r0
 800f0e8:	460b      	mov	r3, r1
 800f0ea:	ec51 0b19 	vmov	r0, r1, d9
 800f0ee:	f7f1 f877 	bl	80001e0 <__aeabi_dsub>
 800f0f2:	4652      	mov	r2, sl
 800f0f4:	465b      	mov	r3, fp
 800f0f6:	f7f1 fa2b 	bl	8000550 <__aeabi_dmul>
 800f0fa:	ec53 2b18 	vmov	r2, r3, d8
 800f0fe:	f7f1 f86f 	bl	80001e0 <__aeabi_dsub>
 800f102:	a30b      	add	r3, pc, #44	; (adr r3, 800f130 <__kernel_sin+0x148>)
 800f104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f108:	4606      	mov	r6, r0
 800f10a:	460f      	mov	r7, r1
 800f10c:	4640      	mov	r0, r8
 800f10e:	4649      	mov	r1, r9
 800f110:	f7f1 fa1e 	bl	8000550 <__aeabi_dmul>
 800f114:	4602      	mov	r2, r0
 800f116:	460b      	mov	r3, r1
 800f118:	4630      	mov	r0, r6
 800f11a:	4639      	mov	r1, r7
 800f11c:	f7f1 f862 	bl	80001e4 <__adddf3>
 800f120:	4602      	mov	r2, r0
 800f122:	460b      	mov	r3, r1
 800f124:	4620      	mov	r0, r4
 800f126:	4629      	mov	r1, r5
 800f128:	f7f1 f85a 	bl	80001e0 <__aeabi_dsub>
 800f12c:	e7c4      	b.n	800f0b8 <__kernel_sin+0xd0>
 800f12e:	bf00      	nop
 800f130:	55555549 	.word	0x55555549
 800f134:	3fc55555 	.word	0x3fc55555
 800f138:	3fe00000 	.word	0x3fe00000
 800f13c:	5acfd57c 	.word	0x5acfd57c
 800f140:	3de5d93a 	.word	0x3de5d93a
 800f144:	8a2b9ceb 	.word	0x8a2b9ceb
 800f148:	3e5ae5e6 	.word	0x3e5ae5e6
 800f14c:	57b1fe7d 	.word	0x57b1fe7d
 800f150:	3ec71de3 	.word	0x3ec71de3
 800f154:	19c161d5 	.word	0x19c161d5
 800f158:	3f2a01a0 	.word	0x3f2a01a0
 800f15c:	1110f8a6 	.word	0x1110f8a6
 800f160:	3f811111 	.word	0x3f811111

0800f164 <with_errno>:
 800f164:	b570      	push	{r4, r5, r6, lr}
 800f166:	4604      	mov	r4, r0
 800f168:	460d      	mov	r5, r1
 800f16a:	4616      	mov	r6, r2
 800f16c:	f7fd fe62 	bl	800ce34 <__errno>
 800f170:	4629      	mov	r1, r5
 800f172:	6006      	str	r6, [r0, #0]
 800f174:	4620      	mov	r0, r4
 800f176:	bd70      	pop	{r4, r5, r6, pc}

0800f178 <xflow>:
 800f178:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f17a:	4614      	mov	r4, r2
 800f17c:	461d      	mov	r5, r3
 800f17e:	b108      	cbz	r0, 800f184 <xflow+0xc>
 800f180:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f184:	e9cd 2300 	strd	r2, r3, [sp]
 800f188:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f18c:	4620      	mov	r0, r4
 800f18e:	4629      	mov	r1, r5
 800f190:	f7f1 f9de 	bl	8000550 <__aeabi_dmul>
 800f194:	2222      	movs	r2, #34	; 0x22
 800f196:	b003      	add	sp, #12
 800f198:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f19c:	f7ff bfe2 	b.w	800f164 <with_errno>

0800f1a0 <__math_uflow>:
 800f1a0:	b508      	push	{r3, lr}
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f1a8:	f7ff ffe6 	bl	800f178 <xflow>
 800f1ac:	ec41 0b10 	vmov	d0, r0, r1
 800f1b0:	bd08      	pop	{r3, pc}

0800f1b2 <__math_oflow>:
 800f1b2:	b508      	push	{r3, lr}
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f1ba:	f7ff ffdd 	bl	800f178 <xflow>
 800f1be:	ec41 0b10 	vmov	d0, r0, r1
 800f1c2:	bd08      	pop	{r3, pc}

0800f1c4 <with_errnof>:
 800f1c4:	b513      	push	{r0, r1, r4, lr}
 800f1c6:	4604      	mov	r4, r0
 800f1c8:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f1cc:	f7fd fe32 	bl	800ce34 <__errno>
 800f1d0:	ed9d 0a01 	vldr	s0, [sp, #4]
 800f1d4:	6004      	str	r4, [r0, #0]
 800f1d6:	b002      	add	sp, #8
 800f1d8:	bd10      	pop	{r4, pc}

0800f1da <xflowf>:
 800f1da:	b130      	cbz	r0, 800f1ea <xflowf+0x10>
 800f1dc:	eef1 7a40 	vneg.f32	s15, s0
 800f1e0:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f1e4:	2022      	movs	r0, #34	; 0x22
 800f1e6:	f7ff bfed 	b.w	800f1c4 <with_errnof>
 800f1ea:	eef0 7a40 	vmov.f32	s15, s0
 800f1ee:	e7f7      	b.n	800f1e0 <xflowf+0x6>

0800f1f0 <__math_uflowf>:
 800f1f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f1f8 <__math_uflowf+0x8>
 800f1f4:	f7ff bff1 	b.w	800f1da <xflowf>
 800f1f8:	10000000 	.word	0x10000000

0800f1fc <__math_oflowf>:
 800f1fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f204 <__math_oflowf+0x8>
 800f200:	f7ff bfeb 	b.w	800f1da <xflowf>
 800f204:	70000000 	.word	0x70000000

0800f208 <fabs>:
 800f208:	ec51 0b10 	vmov	r0, r1, d0
 800f20c:	ee10 2a10 	vmov	r2, s0
 800f210:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f214:	ec43 2b10 	vmov	d0, r2, r3
 800f218:	4770      	bx	lr

0800f21a <finite>:
 800f21a:	b082      	sub	sp, #8
 800f21c:	ed8d 0b00 	vstr	d0, [sp]
 800f220:	9801      	ldr	r0, [sp, #4]
 800f222:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f226:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f22a:	0fc0      	lsrs	r0, r0, #31
 800f22c:	b002      	add	sp, #8
 800f22e:	4770      	bx	lr

0800f230 <floor>:
 800f230:	ec51 0b10 	vmov	r0, r1, d0
 800f234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f238:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f23c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f240:	2e13      	cmp	r6, #19
 800f242:	ee10 5a10 	vmov	r5, s0
 800f246:	ee10 8a10 	vmov	r8, s0
 800f24a:	460c      	mov	r4, r1
 800f24c:	dc32      	bgt.n	800f2b4 <floor+0x84>
 800f24e:	2e00      	cmp	r6, #0
 800f250:	da14      	bge.n	800f27c <floor+0x4c>
 800f252:	a333      	add	r3, pc, #204	; (adr r3, 800f320 <floor+0xf0>)
 800f254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f258:	f7f0 ffc4 	bl	80001e4 <__adddf3>
 800f25c:	2200      	movs	r2, #0
 800f25e:	2300      	movs	r3, #0
 800f260:	f7f1 fc06 	bl	8000a70 <__aeabi_dcmpgt>
 800f264:	b138      	cbz	r0, 800f276 <floor+0x46>
 800f266:	2c00      	cmp	r4, #0
 800f268:	da57      	bge.n	800f31a <floor+0xea>
 800f26a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f26e:	431d      	orrs	r5, r3
 800f270:	d001      	beq.n	800f276 <floor+0x46>
 800f272:	4c2d      	ldr	r4, [pc, #180]	; (800f328 <floor+0xf8>)
 800f274:	2500      	movs	r5, #0
 800f276:	4621      	mov	r1, r4
 800f278:	4628      	mov	r0, r5
 800f27a:	e025      	b.n	800f2c8 <floor+0x98>
 800f27c:	4f2b      	ldr	r7, [pc, #172]	; (800f32c <floor+0xfc>)
 800f27e:	4137      	asrs	r7, r6
 800f280:	ea01 0307 	and.w	r3, r1, r7
 800f284:	4303      	orrs	r3, r0
 800f286:	d01f      	beq.n	800f2c8 <floor+0x98>
 800f288:	a325      	add	r3, pc, #148	; (adr r3, 800f320 <floor+0xf0>)
 800f28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f28e:	f7f0 ffa9 	bl	80001e4 <__adddf3>
 800f292:	2200      	movs	r2, #0
 800f294:	2300      	movs	r3, #0
 800f296:	f7f1 fbeb 	bl	8000a70 <__aeabi_dcmpgt>
 800f29a:	2800      	cmp	r0, #0
 800f29c:	d0eb      	beq.n	800f276 <floor+0x46>
 800f29e:	2c00      	cmp	r4, #0
 800f2a0:	bfbe      	ittt	lt
 800f2a2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f2a6:	fa43 f606 	asrlt.w	r6, r3, r6
 800f2aa:	19a4      	addlt	r4, r4, r6
 800f2ac:	ea24 0407 	bic.w	r4, r4, r7
 800f2b0:	2500      	movs	r5, #0
 800f2b2:	e7e0      	b.n	800f276 <floor+0x46>
 800f2b4:	2e33      	cmp	r6, #51	; 0x33
 800f2b6:	dd0b      	ble.n	800f2d0 <floor+0xa0>
 800f2b8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f2bc:	d104      	bne.n	800f2c8 <floor+0x98>
 800f2be:	ee10 2a10 	vmov	r2, s0
 800f2c2:	460b      	mov	r3, r1
 800f2c4:	f7f0 ff8e 	bl	80001e4 <__adddf3>
 800f2c8:	ec41 0b10 	vmov	d0, r0, r1
 800f2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2d0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f2d4:	f04f 33ff 	mov.w	r3, #4294967295
 800f2d8:	fa23 f707 	lsr.w	r7, r3, r7
 800f2dc:	4207      	tst	r7, r0
 800f2de:	d0f3      	beq.n	800f2c8 <floor+0x98>
 800f2e0:	a30f      	add	r3, pc, #60	; (adr r3, 800f320 <floor+0xf0>)
 800f2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2e6:	f7f0 ff7d 	bl	80001e4 <__adddf3>
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	f7f1 fbbf 	bl	8000a70 <__aeabi_dcmpgt>
 800f2f2:	2800      	cmp	r0, #0
 800f2f4:	d0bf      	beq.n	800f276 <floor+0x46>
 800f2f6:	2c00      	cmp	r4, #0
 800f2f8:	da02      	bge.n	800f300 <floor+0xd0>
 800f2fa:	2e14      	cmp	r6, #20
 800f2fc:	d103      	bne.n	800f306 <floor+0xd6>
 800f2fe:	3401      	adds	r4, #1
 800f300:	ea25 0507 	bic.w	r5, r5, r7
 800f304:	e7b7      	b.n	800f276 <floor+0x46>
 800f306:	2301      	movs	r3, #1
 800f308:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f30c:	fa03 f606 	lsl.w	r6, r3, r6
 800f310:	4435      	add	r5, r6
 800f312:	4545      	cmp	r5, r8
 800f314:	bf38      	it	cc
 800f316:	18e4      	addcc	r4, r4, r3
 800f318:	e7f2      	b.n	800f300 <floor+0xd0>
 800f31a:	2500      	movs	r5, #0
 800f31c:	462c      	mov	r4, r5
 800f31e:	e7aa      	b.n	800f276 <floor+0x46>
 800f320:	8800759c 	.word	0x8800759c
 800f324:	7e37e43c 	.word	0x7e37e43c
 800f328:	bff00000 	.word	0xbff00000
 800f32c:	000fffff 	.word	0x000fffff

0800f330 <scalbn>:
 800f330:	b570      	push	{r4, r5, r6, lr}
 800f332:	ec55 4b10 	vmov	r4, r5, d0
 800f336:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f33a:	4606      	mov	r6, r0
 800f33c:	462b      	mov	r3, r5
 800f33e:	b99a      	cbnz	r2, 800f368 <scalbn+0x38>
 800f340:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f344:	4323      	orrs	r3, r4
 800f346:	d036      	beq.n	800f3b6 <scalbn+0x86>
 800f348:	4b39      	ldr	r3, [pc, #228]	; (800f430 <scalbn+0x100>)
 800f34a:	4629      	mov	r1, r5
 800f34c:	ee10 0a10 	vmov	r0, s0
 800f350:	2200      	movs	r2, #0
 800f352:	f7f1 f8fd 	bl	8000550 <__aeabi_dmul>
 800f356:	4b37      	ldr	r3, [pc, #220]	; (800f434 <scalbn+0x104>)
 800f358:	429e      	cmp	r6, r3
 800f35a:	4604      	mov	r4, r0
 800f35c:	460d      	mov	r5, r1
 800f35e:	da10      	bge.n	800f382 <scalbn+0x52>
 800f360:	a32b      	add	r3, pc, #172	; (adr r3, 800f410 <scalbn+0xe0>)
 800f362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f366:	e03a      	b.n	800f3de <scalbn+0xae>
 800f368:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f36c:	428a      	cmp	r2, r1
 800f36e:	d10c      	bne.n	800f38a <scalbn+0x5a>
 800f370:	ee10 2a10 	vmov	r2, s0
 800f374:	4620      	mov	r0, r4
 800f376:	4629      	mov	r1, r5
 800f378:	f7f0 ff34 	bl	80001e4 <__adddf3>
 800f37c:	4604      	mov	r4, r0
 800f37e:	460d      	mov	r5, r1
 800f380:	e019      	b.n	800f3b6 <scalbn+0x86>
 800f382:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f386:	460b      	mov	r3, r1
 800f388:	3a36      	subs	r2, #54	; 0x36
 800f38a:	4432      	add	r2, r6
 800f38c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f390:	428a      	cmp	r2, r1
 800f392:	dd08      	ble.n	800f3a6 <scalbn+0x76>
 800f394:	2d00      	cmp	r5, #0
 800f396:	a120      	add	r1, pc, #128	; (adr r1, 800f418 <scalbn+0xe8>)
 800f398:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f39c:	da1c      	bge.n	800f3d8 <scalbn+0xa8>
 800f39e:	a120      	add	r1, pc, #128	; (adr r1, 800f420 <scalbn+0xf0>)
 800f3a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3a4:	e018      	b.n	800f3d8 <scalbn+0xa8>
 800f3a6:	2a00      	cmp	r2, #0
 800f3a8:	dd08      	ble.n	800f3bc <scalbn+0x8c>
 800f3aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f3ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f3b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f3b6:	ec45 4b10 	vmov	d0, r4, r5
 800f3ba:	bd70      	pop	{r4, r5, r6, pc}
 800f3bc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f3c0:	da19      	bge.n	800f3f6 <scalbn+0xc6>
 800f3c2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f3c6:	429e      	cmp	r6, r3
 800f3c8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f3cc:	dd0a      	ble.n	800f3e4 <scalbn+0xb4>
 800f3ce:	a112      	add	r1, pc, #72	; (adr r1, 800f418 <scalbn+0xe8>)
 800f3d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d1e2      	bne.n	800f39e <scalbn+0x6e>
 800f3d8:	a30f      	add	r3, pc, #60	; (adr r3, 800f418 <scalbn+0xe8>)
 800f3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3de:	f7f1 f8b7 	bl	8000550 <__aeabi_dmul>
 800f3e2:	e7cb      	b.n	800f37c <scalbn+0x4c>
 800f3e4:	a10a      	add	r1, pc, #40	; (adr r1, 800f410 <scalbn+0xe0>)
 800f3e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d0b8      	beq.n	800f360 <scalbn+0x30>
 800f3ee:	a10e      	add	r1, pc, #56	; (adr r1, 800f428 <scalbn+0xf8>)
 800f3f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3f4:	e7b4      	b.n	800f360 <scalbn+0x30>
 800f3f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f3fa:	3236      	adds	r2, #54	; 0x36
 800f3fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f400:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f404:	4620      	mov	r0, r4
 800f406:	4b0c      	ldr	r3, [pc, #48]	; (800f438 <scalbn+0x108>)
 800f408:	2200      	movs	r2, #0
 800f40a:	e7e8      	b.n	800f3de <scalbn+0xae>
 800f40c:	f3af 8000 	nop.w
 800f410:	c2f8f359 	.word	0xc2f8f359
 800f414:	01a56e1f 	.word	0x01a56e1f
 800f418:	8800759c 	.word	0x8800759c
 800f41c:	7e37e43c 	.word	0x7e37e43c
 800f420:	8800759c 	.word	0x8800759c
 800f424:	fe37e43c 	.word	0xfe37e43c
 800f428:	c2f8f359 	.word	0xc2f8f359
 800f42c:	81a56e1f 	.word	0x81a56e1f
 800f430:	43500000 	.word	0x43500000
 800f434:	ffff3cb0 	.word	0xffff3cb0
 800f438:	3c900000 	.word	0x3c900000

0800f43c <fabsf>:
 800f43c:	ee10 3a10 	vmov	r3, s0
 800f440:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f444:	ee00 3a10 	vmov	s0, r3
 800f448:	4770      	bx	lr

0800f44a <finitef>:
 800f44a:	b082      	sub	sp, #8
 800f44c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f450:	9801      	ldr	r0, [sp, #4]
 800f452:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f456:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800f45a:	bfac      	ite	ge
 800f45c:	2000      	movge	r0, #0
 800f45e:	2001      	movlt	r0, #1
 800f460:	b002      	add	sp, #8
 800f462:	4770      	bx	lr

0800f464 <scalbnf>:
 800f464:	ee10 3a10 	vmov	r3, s0
 800f468:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800f46c:	d025      	beq.n	800f4ba <scalbnf+0x56>
 800f46e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f472:	d302      	bcc.n	800f47a <scalbnf+0x16>
 800f474:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f478:	4770      	bx	lr
 800f47a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800f47e:	d122      	bne.n	800f4c6 <scalbnf+0x62>
 800f480:	4b2a      	ldr	r3, [pc, #168]	; (800f52c <scalbnf+0xc8>)
 800f482:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800f530 <scalbnf+0xcc>
 800f486:	4298      	cmp	r0, r3
 800f488:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f48c:	db16      	blt.n	800f4bc <scalbnf+0x58>
 800f48e:	ee10 3a10 	vmov	r3, s0
 800f492:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f496:	3a19      	subs	r2, #25
 800f498:	4402      	add	r2, r0
 800f49a:	2afe      	cmp	r2, #254	; 0xfe
 800f49c:	dd15      	ble.n	800f4ca <scalbnf+0x66>
 800f49e:	ee10 3a10 	vmov	r3, s0
 800f4a2:	eddf 7a24 	vldr	s15, [pc, #144]	; 800f534 <scalbnf+0xd0>
 800f4a6:	eddf 6a24 	vldr	s13, [pc, #144]	; 800f538 <scalbnf+0xd4>
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	eeb0 7a67 	vmov.f32	s14, s15
 800f4b0:	bfb8      	it	lt
 800f4b2:	eef0 7a66 	vmovlt.f32	s15, s13
 800f4b6:	ee27 0a27 	vmul.f32	s0, s14, s15
 800f4ba:	4770      	bx	lr
 800f4bc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800f53c <scalbnf+0xd8>
 800f4c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f4c4:	4770      	bx	lr
 800f4c6:	0dd2      	lsrs	r2, r2, #23
 800f4c8:	e7e6      	b.n	800f498 <scalbnf+0x34>
 800f4ca:	2a00      	cmp	r2, #0
 800f4cc:	dd06      	ble.n	800f4dc <scalbnf+0x78>
 800f4ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f4d2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800f4d6:	ee00 3a10 	vmov	s0, r3
 800f4da:	4770      	bx	lr
 800f4dc:	f112 0f16 	cmn.w	r2, #22
 800f4e0:	da1a      	bge.n	800f518 <scalbnf+0xb4>
 800f4e2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f4e6:	4298      	cmp	r0, r3
 800f4e8:	ee10 3a10 	vmov	r3, s0
 800f4ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f4f0:	dd0a      	ble.n	800f508 <scalbnf+0xa4>
 800f4f2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800f534 <scalbnf+0xd0>
 800f4f6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800f538 <scalbnf+0xd4>
 800f4fa:	eef0 7a40 	vmov.f32	s15, s0
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	bf18      	it	ne
 800f502:	eeb0 0a47 	vmovne.f32	s0, s14
 800f506:	e7db      	b.n	800f4c0 <scalbnf+0x5c>
 800f508:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800f53c <scalbnf+0xd8>
 800f50c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800f540 <scalbnf+0xdc>
 800f510:	eef0 7a40 	vmov.f32	s15, s0
 800f514:	2b00      	cmp	r3, #0
 800f516:	e7f3      	b.n	800f500 <scalbnf+0x9c>
 800f518:	3219      	adds	r2, #25
 800f51a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f51e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800f522:	eddf 7a08 	vldr	s15, [pc, #32]	; 800f544 <scalbnf+0xe0>
 800f526:	ee07 3a10 	vmov	s14, r3
 800f52a:	e7c4      	b.n	800f4b6 <scalbnf+0x52>
 800f52c:	ffff3cb0 	.word	0xffff3cb0
 800f530:	4c000000 	.word	0x4c000000
 800f534:	7149f2ca 	.word	0x7149f2ca
 800f538:	f149f2ca 	.word	0xf149f2ca
 800f53c:	0da24260 	.word	0x0da24260
 800f540:	8da24260 	.word	0x8da24260
 800f544:	33000000 	.word	0x33000000

0800f548 <_init>:
 800f548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f54a:	bf00      	nop
 800f54c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f54e:	bc08      	pop	{r3}
 800f550:	469e      	mov	lr, r3
 800f552:	4770      	bx	lr

0800f554 <_fini>:
 800f554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f556:	bf00      	nop
 800f558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f55a:	bc08      	pop	{r3}
 800f55c:	469e      	mov	lr, r3
 800f55e:	4770      	bx	lr
