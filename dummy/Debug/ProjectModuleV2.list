
ProjectModuleV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c70  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000900  08007e08  08007e08  00017e08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008708  08008708  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08008708  08008708  00018708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008710  08008710  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008710  08008710  00018710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008714  08008714  00018714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005dc  20000080  08008798  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000065c  08008798  0002065c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ae7  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000325b  00000000  00000000  00034b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  00037df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f20  00000000  00000000  00038ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004f84  00000000  00000000  00039e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001be75  00000000  00000000  0003ed84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093925  00000000  00000000  0005abf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee51e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a2c  00000000  00000000  000ee570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007df0 	.word	0x08007df0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	08007df0 	.word	0x08007df0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_uldivmod>:
 8000d6c:	b953      	cbnz	r3, 8000d84 <__aeabi_uldivmod+0x18>
 8000d6e:	b94a      	cbnz	r2, 8000d84 <__aeabi_uldivmod+0x18>
 8000d70:	2900      	cmp	r1, #0
 8000d72:	bf08      	it	eq
 8000d74:	2800      	cmpeq	r0, #0
 8000d76:	bf1c      	itt	ne
 8000d78:	f04f 31ff 	movne.w	r1, #4294967295
 8000d7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d80:	f000 b974 	b.w	800106c <__aeabi_idiv0>
 8000d84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d8c:	f000 f806 	bl	8000d9c <__udivmoddi4>
 8000d90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d98:	b004      	add	sp, #16
 8000d9a:	4770      	bx	lr

08000d9c <__udivmoddi4>:
 8000d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da0:	9d08      	ldr	r5, [sp, #32]
 8000da2:	4604      	mov	r4, r0
 8000da4:	468e      	mov	lr, r1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d14d      	bne.n	8000e46 <__udivmoddi4+0xaa>
 8000daa:	428a      	cmp	r2, r1
 8000dac:	4694      	mov	ip, r2
 8000dae:	d969      	bls.n	8000e84 <__udivmoddi4+0xe8>
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	b152      	cbz	r2, 8000dcc <__udivmoddi4+0x30>
 8000db6:	fa01 f302 	lsl.w	r3, r1, r2
 8000dba:	f1c2 0120 	rsb	r1, r2, #32
 8000dbe:	fa20 f101 	lsr.w	r1, r0, r1
 8000dc2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc6:	ea41 0e03 	orr.w	lr, r1, r3
 8000dca:	4094      	lsls	r4, r2
 8000dcc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd0:	0c21      	lsrs	r1, r4, #16
 8000dd2:	fbbe f6f8 	udiv	r6, lr, r8
 8000dd6:	fa1f f78c 	uxth.w	r7, ip
 8000dda:	fb08 e316 	mls	r3, r8, r6, lr
 8000dde:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000de2:	fb06 f107 	mul.w	r1, r6, r7
 8000de6:	4299      	cmp	r1, r3
 8000de8:	d90a      	bls.n	8000e00 <__udivmoddi4+0x64>
 8000dea:	eb1c 0303 	adds.w	r3, ip, r3
 8000dee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000df2:	f080 811f 	bcs.w	8001034 <__udivmoddi4+0x298>
 8000df6:	4299      	cmp	r1, r3
 8000df8:	f240 811c 	bls.w	8001034 <__udivmoddi4+0x298>
 8000dfc:	3e02      	subs	r6, #2
 8000dfe:	4463      	add	r3, ip
 8000e00:	1a5b      	subs	r3, r3, r1
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e08:	fb08 3310 	mls	r3, r8, r0, r3
 8000e0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e10:	fb00 f707 	mul.w	r7, r0, r7
 8000e14:	42a7      	cmp	r7, r4
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x92>
 8000e18:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e20:	f080 810a 	bcs.w	8001038 <__udivmoddi4+0x29c>
 8000e24:	42a7      	cmp	r7, r4
 8000e26:	f240 8107 	bls.w	8001038 <__udivmoddi4+0x29c>
 8000e2a:	4464      	add	r4, ip
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e32:	1be4      	subs	r4, r4, r7
 8000e34:	2600      	movs	r6, #0
 8000e36:	b11d      	cbz	r5, 8000e40 <__udivmoddi4+0xa4>
 8000e38:	40d4      	lsrs	r4, r2
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d909      	bls.n	8000e5e <__udivmoddi4+0xc2>
 8000e4a:	2d00      	cmp	r5, #0
 8000e4c:	f000 80ef 	beq.w	800102e <__udivmoddi4+0x292>
 8000e50:	2600      	movs	r6, #0
 8000e52:	e9c5 0100 	strd	r0, r1, [r5]
 8000e56:	4630      	mov	r0, r6
 8000e58:	4631      	mov	r1, r6
 8000e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5e:	fab3 f683 	clz	r6, r3
 8000e62:	2e00      	cmp	r6, #0
 8000e64:	d14a      	bne.n	8000efc <__udivmoddi4+0x160>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d302      	bcc.n	8000e70 <__udivmoddi4+0xd4>
 8000e6a:	4282      	cmp	r2, r0
 8000e6c:	f200 80f9 	bhi.w	8001062 <__udivmoddi4+0x2c6>
 8000e70:	1a84      	subs	r4, r0, r2
 8000e72:	eb61 0303 	sbc.w	r3, r1, r3
 8000e76:	2001      	movs	r0, #1
 8000e78:	469e      	mov	lr, r3
 8000e7a:	2d00      	cmp	r5, #0
 8000e7c:	d0e0      	beq.n	8000e40 <__udivmoddi4+0xa4>
 8000e7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e82:	e7dd      	b.n	8000e40 <__udivmoddi4+0xa4>
 8000e84:	b902      	cbnz	r2, 8000e88 <__udivmoddi4+0xec>
 8000e86:	deff      	udf	#255	; 0xff
 8000e88:	fab2 f282 	clz	r2, r2
 8000e8c:	2a00      	cmp	r2, #0
 8000e8e:	f040 8092 	bne.w	8000fb6 <__udivmoddi4+0x21a>
 8000e92:	eba1 010c 	sub.w	r1, r1, ip
 8000e96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e9a:	fa1f fe8c 	uxth.w	lr, ip
 8000e9e:	2601      	movs	r6, #1
 8000ea0:	0c20      	lsrs	r0, r4, #16
 8000ea2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ea6:	fb07 1113 	mls	r1, r7, r3, r1
 8000eaa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eae:	fb0e f003 	mul.w	r0, lr, r3
 8000eb2:	4288      	cmp	r0, r1
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x12c>
 8000eb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000eba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0x12a>
 8000ec0:	4288      	cmp	r0, r1
 8000ec2:	f200 80cb 	bhi.w	800105c <__udivmoddi4+0x2c0>
 8000ec6:	4643      	mov	r3, r8
 8000ec8:	1a09      	subs	r1, r1, r0
 8000eca:	b2a4      	uxth	r4, r4
 8000ecc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed0:	fb07 1110 	mls	r1, r7, r0, r1
 8000ed4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ed8:	fb0e fe00 	mul.w	lr, lr, r0
 8000edc:	45a6      	cmp	lr, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x156>
 8000ee0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee8:	d202      	bcs.n	8000ef0 <__udivmoddi4+0x154>
 8000eea:	45a6      	cmp	lr, r4
 8000eec:	f200 80bb 	bhi.w	8001066 <__udivmoddi4+0x2ca>
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	eba4 040e 	sub.w	r4, r4, lr
 8000ef6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000efa:	e79c      	b.n	8000e36 <__udivmoddi4+0x9a>
 8000efc:	f1c6 0720 	rsb	r7, r6, #32
 8000f00:	40b3      	lsls	r3, r6
 8000f02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000f0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000f12:	431c      	orrs	r4, r3
 8000f14:	40f9      	lsrs	r1, r7
 8000f16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000f1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f22:	0c20      	lsrs	r0, r4, #16
 8000f24:	fa1f fe8c 	uxth.w	lr, ip
 8000f28:	fb09 1118 	mls	r1, r9, r8, r1
 8000f2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f30:	fb08 f00e 	mul.w	r0, r8, lr
 8000f34:	4288      	cmp	r0, r1
 8000f36:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3a:	d90b      	bls.n	8000f54 <__udivmoddi4+0x1b8>
 8000f3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f44:	f080 8088 	bcs.w	8001058 <__udivmoddi4+0x2bc>
 8000f48:	4288      	cmp	r0, r1
 8000f4a:	f240 8085 	bls.w	8001058 <__udivmoddi4+0x2bc>
 8000f4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f52:	4461      	add	r1, ip
 8000f54:	1a09      	subs	r1, r1, r0
 8000f56:	b2a4      	uxth	r4, r4
 8000f58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000f60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f68:	458e      	cmp	lr, r1
 8000f6a:	d908      	bls.n	8000f7e <__udivmoddi4+0x1e2>
 8000f6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f74:	d26c      	bcs.n	8001050 <__udivmoddi4+0x2b4>
 8000f76:	458e      	cmp	lr, r1
 8000f78:	d96a      	bls.n	8001050 <__udivmoddi4+0x2b4>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4461      	add	r1, ip
 8000f7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f82:	fba0 9402 	umull	r9, r4, r0, r2
 8000f86:	eba1 010e 	sub.w	r1, r1, lr
 8000f8a:	42a1      	cmp	r1, r4
 8000f8c:	46c8      	mov	r8, r9
 8000f8e:	46a6      	mov	lr, r4
 8000f90:	d356      	bcc.n	8001040 <__udivmoddi4+0x2a4>
 8000f92:	d053      	beq.n	800103c <__udivmoddi4+0x2a0>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x212>
 8000f96:	ebb3 0208 	subs.w	r2, r3, r8
 8000f9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000f9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000fa2:	fa22 f306 	lsr.w	r3, r2, r6
 8000fa6:	40f1      	lsrs	r1, r6
 8000fa8:	431f      	orrs	r7, r3
 8000faa:	e9c5 7100 	strd	r7, r1, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	f1c2 0320 	rsb	r3, r2, #32
 8000fba:	40d8      	lsrs	r0, r3
 8000fbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000fc4:	4091      	lsls	r1, r2
 8000fc6:	4301      	orrs	r1, r0
 8000fc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fcc:	fa1f fe8c 	uxth.w	lr, ip
 8000fd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000fd8:	0c0b      	lsrs	r3, r1, #16
 8000fda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fde:	fb00 f60e 	mul.w	r6, r0, lr
 8000fe2:	429e      	cmp	r6, r3
 8000fe4:	fa04 f402 	lsl.w	r4, r4, r2
 8000fe8:	d908      	bls.n	8000ffc <__udivmoddi4+0x260>
 8000fea:	eb1c 0303 	adds.w	r3, ip, r3
 8000fee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ff2:	d22f      	bcs.n	8001054 <__udivmoddi4+0x2b8>
 8000ff4:	429e      	cmp	r6, r3
 8000ff6:	d92d      	bls.n	8001054 <__udivmoddi4+0x2b8>
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	1b9b      	subs	r3, r3, r6
 8000ffe:	b289      	uxth	r1, r1
 8001000:	fbb3 f6f7 	udiv	r6, r3, r7
 8001004:	fb07 3316 	mls	r3, r7, r6, r3
 8001008:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800100c:	fb06 f30e 	mul.w	r3, r6, lr
 8001010:	428b      	cmp	r3, r1
 8001012:	d908      	bls.n	8001026 <__udivmoddi4+0x28a>
 8001014:	eb1c 0101 	adds.w	r1, ip, r1
 8001018:	f106 38ff 	add.w	r8, r6, #4294967295
 800101c:	d216      	bcs.n	800104c <__udivmoddi4+0x2b0>
 800101e:	428b      	cmp	r3, r1
 8001020:	d914      	bls.n	800104c <__udivmoddi4+0x2b0>
 8001022:	3e02      	subs	r6, #2
 8001024:	4461      	add	r1, ip
 8001026:	1ac9      	subs	r1, r1, r3
 8001028:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800102c:	e738      	b.n	8000ea0 <__udivmoddi4+0x104>
 800102e:	462e      	mov	r6, r5
 8001030:	4628      	mov	r0, r5
 8001032:	e705      	b.n	8000e40 <__udivmoddi4+0xa4>
 8001034:	4606      	mov	r6, r0
 8001036:	e6e3      	b.n	8000e00 <__udivmoddi4+0x64>
 8001038:	4618      	mov	r0, r3
 800103a:	e6f8      	b.n	8000e2e <__udivmoddi4+0x92>
 800103c:	454b      	cmp	r3, r9
 800103e:	d2a9      	bcs.n	8000f94 <__udivmoddi4+0x1f8>
 8001040:	ebb9 0802 	subs.w	r8, r9, r2
 8001044:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001048:	3801      	subs	r0, #1
 800104a:	e7a3      	b.n	8000f94 <__udivmoddi4+0x1f8>
 800104c:	4646      	mov	r6, r8
 800104e:	e7ea      	b.n	8001026 <__udivmoddi4+0x28a>
 8001050:	4620      	mov	r0, r4
 8001052:	e794      	b.n	8000f7e <__udivmoddi4+0x1e2>
 8001054:	4640      	mov	r0, r8
 8001056:	e7d1      	b.n	8000ffc <__udivmoddi4+0x260>
 8001058:	46d0      	mov	r8, sl
 800105a:	e77b      	b.n	8000f54 <__udivmoddi4+0x1b8>
 800105c:	3b02      	subs	r3, #2
 800105e:	4461      	add	r1, ip
 8001060:	e732      	b.n	8000ec8 <__udivmoddi4+0x12c>
 8001062:	4630      	mov	r0, r6
 8001064:	e709      	b.n	8000e7a <__udivmoddi4+0xde>
 8001066:	4464      	add	r4, ip
 8001068:	3802      	subs	r0, #2
 800106a:	e742      	b.n	8000ef2 <__udivmoddi4+0x156>

0800106c <__aeabi_idiv0>:
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <InitKalmanStruct>:
extern arm_matrix_instance_f32 mat_P, mat_P_minus, mat_Q;
extern arm_matrix_instance_f32 mat_C, mat_R, mat_S, mat_K;
extern arm_matrix_instance_f32 mat_temp3x3A,mat_temp3x3B, mat_temp3x1,mat_temp1x3, mat_temp1x1;

void InitKalmanStruct(Kalman* KF,float32_t q,float32_t r)
{
 8001070:	b5b0      	push	{r4, r5, r7, lr}
 8001072:	b0a0      	sub	sp, #128	; 0x80
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	ed87 0a02 	vstr	s0, [r7, #8]
 800107c:	edc7 0a01 	vstr	s1, [r7, #4]
	KF->R = r;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	655a      	str	r2, [r3, #84]	; 0x54
	KF->var_Q = q;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	68ba      	ldr	r2, [r7, #8]
 800108a:	659a      	str	r2, [r3, #88]	; 0x58
	KF->D = 0;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	float32_t a[9] = {
 8001096:	4b8d      	ldr	r3, [pc, #564]	; (80012cc <InitKalmanStruct+0x25c>)
 8001098:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800109c:	461d      	mov	r5, r3
 800109e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a6:	682b      	ldr	r3, [r5, #0]
 80010a8:	6023      	str	r3, [r4, #0]
			1.0, 0.001/2.5, 0.0000005/(2.5*2.5),
			0  , 1.0      , 0.001/2.5,
			0  , 0        , 1.0
	};
	float iden[9] = {
 80010aa:	4b89      	ldr	r3, [pc, #548]	; (80012d0 <InitKalmanStruct+0x260>)
 80010ac:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80010b0:	461d      	mov	r5, r3
 80010b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ba:	682b      	ldr	r3, [r5, #0]
 80010bc:	6023      	str	r3, [r4, #0]
			1.0, 0  , 0,
			0  , 1.0, 0,
			0  , 0  , 1.0
	};
	int i;
	for(i=0;i<9;i++)
 80010be:	2300      	movs	r3, #0
 80010c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80010c2:	e023      	b.n	800110c <InitKalmanStruct+0x9c>
	{
		KF->A[i] = a[i];
 80010c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	3380      	adds	r3, #128	; 0x80
 80010ca:	443b      	add	r3, r7
 80010cc:	3b28      	subs	r3, #40	; 0x28
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	68f9      	ldr	r1, [r7, #12]
 80010d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010d4:	3318      	adds	r3, #24
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	440b      	add	r3, r1
 80010da:	601a      	str	r2, [r3, #0]
		KF->I[i] = iden[i];
 80010dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	3380      	adds	r3, #128	; 0x80
 80010e2:	443b      	add	r3, r7
 80010e4:	3b4c      	subs	r3, #76	; 0x4c
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	68f9      	ldr	r1, [r7, #12]
 80010ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010ec:	332e      	adds	r3, #46	; 0x2e
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	440b      	add	r3, r1
 80010f2:	601a      	str	r2, [r3, #0]
		KF->P[i] = 0;
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010f8:	3302      	adds	r3, #2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	3304      	adds	r3, #4
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
	for(i=0;i<9;i++)
 8001106:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001108:	3301      	adds	r3, #1
 800110a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800110c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800110e:	2b08      	cmp	r3, #8
 8001110:	ddd8      	ble.n	80010c4 <InitKalmanStruct+0x54>
	}
	float32_t b[3] = {
 8001112:	f04f 0300 	mov.w	r3, #0
 8001116:	62bb      	str	r3, [r7, #40]	; 0x28
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800111e:	f04f 0300 	mov.w	r3, #0
 8001122:	633b      	str	r3, [r7, #48]	; 0x30
			0, 0, 0
	};
	float32_t c[3] = {
 8001124:	f04f 0300 	mov.w	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
 800112a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800112e:	623b      	str	r3, [r7, #32]
 8001130:	f04f 0300 	mov.w	r3, #0
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
			0, 1, 0
	};
	float32_t g[3] = {
 8001136:	4a67      	ldr	r2, [pc, #412]	; (80012d4 <InitKalmanStruct+0x264>)
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	ca07      	ldmia	r2, {r0, r1, r2}
 800113e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0.001 * 0.001 * 0.001 / (6*2.5*2.5*2.5),
			0.0000005/(2.5*2.5),
			0.001/2.0
	};

	for(i=0;i<3;i++)
 8001142:	2300      	movs	r3, #0
 8001144:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001146:	e02e      	b.n	80011a6 <InitKalmanStruct+0x136>
	{
		KF->B[i] = b[i];
 8001148:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	3380      	adds	r3, #128	; 0x80
 800114e:	443b      	add	r3, r7
 8001150:	3b58      	subs	r3, #88	; 0x58
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	68f9      	ldr	r1, [r7, #12]
 8001156:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001158:	3320      	adds	r3, #32
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	440b      	add	r3, r1
 800115e:	3304      	adds	r3, #4
 8001160:	601a      	str	r2, [r3, #0]
		KF->C[i] = c[i];
 8001162:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	3380      	adds	r3, #128	; 0x80
 8001168:	443b      	add	r3, r7
 800116a:	3b64      	subs	r3, #100	; 0x64
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	68f9      	ldr	r1, [r7, #12]
 8001170:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001172:	3324      	adds	r3, #36	; 0x24
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	440b      	add	r3, r1
 8001178:	601a      	str	r2, [r3, #0]
		KF->G[i] = g[i];
 800117a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	3380      	adds	r3, #128	; 0x80
 8001180:	443b      	add	r3, r7
 8001182:	3b70      	subs	r3, #112	; 0x70
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	68f9      	ldr	r1, [r7, #12]
 8001188:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800118a:	3328      	adds	r3, #40	; 0x28
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	440b      	add	r3, r1
 8001190:	601a      	str	r2, [r3, #0]
		KF->x_hat[i] = 0;
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4413      	add	r3, r2
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
	for(i=0;i<3;i++)
 80011a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80011a2:	3301      	adds	r3, #1
 80011a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80011a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	ddcd      	ble.n	8001148 <InitKalmanStruct+0xd8>
	}

	  arm_mat_init_f32(&mat_A, 3, 3,KF->A);//3x3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	3360      	adds	r3, #96	; 0x60
 80011b0:	2203      	movs	r2, #3
 80011b2:	2103      	movs	r1, #3
 80011b4:	4848      	ldr	r0, [pc, #288]	; (80012d8 <InitKalmanStruct+0x268>)
 80011b6:	f002 f93e 	bl	8003436 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_x_hat, 3, 1, KF->x_hat);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2201      	movs	r2, #1
 80011be:	2103      	movs	r1, #3
 80011c0:	4846      	ldr	r0, [pc, #280]	; (80012dc <InitKalmanStruct+0x26c>)
 80011c2:	f002 f938 	bl	8003436 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_x_hat_minus, 3, 1, KF->x_hat_minus);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	33dc      	adds	r3, #220	; 0xdc
 80011ca:	2201      	movs	r2, #1
 80011cc:	2103      	movs	r1, #3
 80011ce:	4844      	ldr	r0, [pc, #272]	; (80012e0 <InitKalmanStruct+0x270>)
 80011d0:	f002 f931 	bl	8003436 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_B, 3, 1, KF->B);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	3384      	adds	r3, #132	; 0x84
 80011d8:	2201      	movs	r2, #1
 80011da:	2103      	movs	r1, #3
 80011dc:	4841      	ldr	r0, [pc, #260]	; (80012e4 <InitKalmanStruct+0x274>)
 80011de:	f002 f92a 	bl	8003436 <arm_mat_init_f32>
	  //arm_mat_init_f32(&mat_u, 1, 1, NULL);  // Set the input control vector if needed
	  arm_mat_init_f32(&mat_P, 3, 3, KF->P);//3x3
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	330c      	adds	r3, #12
 80011e6:	2203      	movs	r2, #3
 80011e8:	2103      	movs	r1, #3
 80011ea:	483f      	ldr	r0, [pc, #252]	; (80012e8 <InitKalmanStruct+0x278>)
 80011ec:	f002 f923 	bl	8003436 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_P_minus, 3, 3, KF->P_minus);//3x3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	33e8      	adds	r3, #232	; 0xe8
 80011f4:	2203      	movs	r2, #3
 80011f6:	2103      	movs	r1, #3
 80011f8:	483c      	ldr	r0, [pc, #240]	; (80012ec <InitKalmanStruct+0x27c>)
 80011fa:	f002 f91c 	bl	8003436 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_Q, 3, 3,KF->Q);//3x3
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	3330      	adds	r3, #48	; 0x30
 8001202:	2203      	movs	r2, #3
 8001204:	2103      	movs	r1, #3
 8001206:	483a      	ldr	r0, [pc, #232]	; (80012f0 <InitKalmanStruct+0x280>)
 8001208:	f002 f915 	bl	8003436 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_C, 1, 3, KF->C);//1x3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	3390      	adds	r3, #144	; 0x90
 8001210:	2203      	movs	r2, #3
 8001212:	2101      	movs	r1, #1
 8001214:	4837      	ldr	r0, [pc, #220]	; (80012f4 <InitKalmanStruct+0x284>)
 8001216:	f002 f90e 	bl	8003436 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_R, 1, 1, &KF->R);//1x1
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	3354      	adds	r3, #84	; 0x54
 800121e:	2201      	movs	r2, #1
 8001220:	2101      	movs	r1, #1
 8001222:	4835      	ldr	r0, [pc, #212]	; (80012f8 <InitKalmanStruct+0x288>)
 8001224:	f002 f907 	bl	8003436 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_S, 1, 1, KF->S);//1x1
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800122e:	2201      	movs	r2, #1
 8001230:	2101      	movs	r1, #1
 8001232:	4832      	ldr	r0, [pc, #200]	; (80012fc <InitKalmanStruct+0x28c>)
 8001234:	f002 f8ff 	bl	8003436 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_K, 3, 1, KF->K);//3x1
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800123e:	2201      	movs	r2, #1
 8001240:	2103      	movs	r1, #3
 8001242:	482f      	ldr	r0, [pc, #188]	; (8001300 <InitKalmanStruct+0x290>)
 8001244:	f002 f8f7 	bl	8003436 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp3x3A, 3, 3, KF->temp3x3A);//3x3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800124e:	2203      	movs	r2, #3
 8001250:	2103      	movs	r1, #3
 8001252:	482c      	ldr	r0, [pc, #176]	; (8001304 <InitKalmanStruct+0x294>)
 8001254:	f002 f8ef 	bl	8003436 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp3x3B, 3, 3, KF->temp3x3B);//3x3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800125e:	2203      	movs	r2, #3
 8001260:	2103      	movs	r1, #3
 8001262:	4829      	ldr	r0, [pc, #164]	; (8001308 <InitKalmanStruct+0x298>)
 8001264:	f002 f8e7 	bl	8003436 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp3x1, 3, 1, KF->temp3x1);//3x1
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800126e:	2201      	movs	r2, #1
 8001270:	2103      	movs	r1, #3
 8001272:	4826      	ldr	r0, [pc, #152]	; (800130c <InitKalmanStruct+0x29c>)
 8001274:	f002 f8df 	bl	8003436 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp1x3, 1, 3, KF->temp1x3);//1x3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800127e:	2203      	movs	r2, #3
 8001280:	2101      	movs	r1, #1
 8001282:	4823      	ldr	r0, [pc, #140]	; (8001310 <InitKalmanStruct+0x2a0>)
 8001284:	f002 f8d7 	bl	8003436 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp1x1, 1, 1, &KF->temp1x1);//1x1
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800128e:	2201      	movs	r2, #1
 8001290:	2101      	movs	r1, #1
 8001292:	4820      	ldr	r0, [pc, #128]	; (8001314 <InitKalmanStruct+0x2a4>)
 8001294:	f002 f8cf 	bl	8003436 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_G, 3, 1, KF->G);//3x1
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	33a0      	adds	r3, #160	; 0xa0
 800129c:	2201      	movs	r2, #1
 800129e:	2103      	movs	r1, #3
 80012a0:	481d      	ldr	r0, [pc, #116]	; (8001318 <InitKalmanStruct+0x2a8>)
 80012a2:	f002 f8c8 	bl	8003436 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_GT, 1, 3, KF->GT);//1x3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	33ac      	adds	r3, #172	; 0xac
 80012aa:	2203      	movs	r2, #3
 80012ac:	2101      	movs	r1, #1
 80012ae:	481b      	ldr	r0, [pc, #108]	; (800131c <InitKalmanStruct+0x2ac>)
 80012b0:	f002 f8c1 	bl	8003436 <arm_mat_init_f32>
	  arm_mat_init_f32(&eye, 3, 3, KF->I);//1x3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	33b8      	adds	r3, #184	; 0xb8
 80012b8:	2203      	movs	r2, #3
 80012ba:	2103      	movs	r1, #3
 80012bc:	4818      	ldr	r0, [pc, #96]	; (8001320 <InitKalmanStruct+0x2b0>)
 80012be:	f002 f8ba 	bl	8003436 <arm_mat_init_f32>

}
 80012c2:	bf00      	nop
 80012c4:	3780      	adds	r7, #128	; 0x80
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bdb0      	pop	{r4, r5, r7, pc}
 80012ca:	bf00      	nop
 80012cc:	08007e08 	.word	0x08007e08
 80012d0:	08007e2c 	.word	0x08007e2c
 80012d4:	08007e50 	.word	0x08007e50
 80012d8:	20000328 	.word	0x20000328
 80012dc:	20000330 	.word	0x20000330
 80012e0:	20000338 	.word	0x20000338
 80012e4:	20000340 	.word	0x20000340
 80012e8:	20000350 	.word	0x20000350
 80012ec:	20000358 	.word	0x20000358
 80012f0:	20000360 	.word	0x20000360
 80012f4:	20000378 	.word	0x20000378
 80012f8:	20000380 	.word	0x20000380
 80012fc:	20000388 	.word	0x20000388
 8001300:	20000390 	.word	0x20000390
 8001304:	20000398 	.word	0x20000398
 8001308:	200003a0 	.word	0x200003a0
 800130c:	200003a8 	.word	0x200003a8
 8001310:	200003b0 	.word	0x200003b0
 8001314:	200003b8 	.word	0x200003b8
 8001318:	20000370 	.word	0x20000370
 800131c:	20000368 	.word	0x20000368
 8001320:	20000348 	.word	0x20000348

08001324 <kalman_filter>:

void kalman_filter()
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
    //Process model: x_hat_minus = mat_A*x_hat
    arm_mat_mult_f32(&mat_A, &mat_x_hat, &mat_x_hat_minus);			//A*X
 8001328:	4a39      	ldr	r2, [pc, #228]	; (8001410 <kalman_filter+0xec>)
 800132a:	493a      	ldr	r1, [pc, #232]	; (8001414 <kalman_filter+0xf0>)
 800132c:	483a      	ldr	r0, [pc, #232]	; (8001418 <kalman_filter+0xf4>)
 800132e:	f002 fc11 	bl	8003b54 <arm_mat_mult_f32>
    // If an input control vector is used:
    // arm_mat_mult_f32(&mat_B, &mat_u, &mat_temp3x3A);
    // arm_mat_add_f32(&mat_x_hat_minus, &mat_temp3x3A, &mat_x_hat_minus);

    // Predict covariance matrix: P_minus = A * P * A^T + Q
    arm_mat_trans_f32(&mat_A, &mat_temp3x3A);					    //AT
 8001332:	493a      	ldr	r1, [pc, #232]	; (800141c <kalman_filter+0xf8>)
 8001334:	4838      	ldr	r0, [pc, #224]	; (8001418 <kalman_filter+0xf4>)
 8001336:	f002 fcf8 	bl	8003d2a <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_A, &mat_P, &mat_temp3x3B);			    //A*P
 800133a:	4a39      	ldr	r2, [pc, #228]	; (8001420 <kalman_filter+0xfc>)
 800133c:	4939      	ldr	r1, [pc, #228]	; (8001424 <kalman_filter+0x100>)
 800133e:	4836      	ldr	r0, [pc, #216]	; (8001418 <kalman_filter+0xf4>)
 8001340:	f002 fc08 	bl	8003b54 <arm_mat_mult_f32>
    arm_mat_mult_f32(&mat_temp3x3B, &mat_temp3x3A, &mat_P_minus);	//A*P*AT
 8001344:	4a38      	ldr	r2, [pc, #224]	; (8001428 <kalman_filter+0x104>)
 8001346:	4935      	ldr	r1, [pc, #212]	; (800141c <kalman_filter+0xf8>)
 8001348:	4835      	ldr	r0, [pc, #212]	; (8001420 <kalman_filter+0xfc>)
 800134a:	f002 fc03 	bl	8003b54 <arm_mat_mult_f32>
    arm_mat_trans_f32(&mat_G, &mat_GT);								//GT
 800134e:	4937      	ldr	r1, [pc, #220]	; (800142c <kalman_filter+0x108>)
 8001350:	4837      	ldr	r0, [pc, #220]	; (8001430 <kalman_filter+0x10c>)
 8001352:	f002 fcea 	bl	8003d2a <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_G, &mat_GT, &mat_Q);						//G*GT
 8001356:	4a37      	ldr	r2, [pc, #220]	; (8001434 <kalman_filter+0x110>)
 8001358:	4934      	ldr	r1, [pc, #208]	; (800142c <kalman_filter+0x108>)
 800135a:	4835      	ldr	r0, [pc, #212]	; (8001430 <kalman_filter+0x10c>)
 800135c:	f002 fbfa 	bl	8003b54 <arm_mat_mult_f32>
    arm_mat_scale_f32(&mat_Q,KF.var_Q, &mat_Q);						//G*GT*var_q
 8001360:	4b35      	ldr	r3, [pc, #212]	; (8001438 <kalman_filter+0x114>)
 8001362:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001366:	4933      	ldr	r1, [pc, #204]	; (8001434 <kalman_filter+0x110>)
 8001368:	eeb0 0a67 	vmov.f32	s0, s15
 800136c:	4831      	ldr	r0, [pc, #196]	; (8001434 <kalman_filter+0x110>)
 800136e:	f002 fc6b 	bl	8003c48 <arm_mat_scale_f32>
    arm_mat_add_f32(&mat_P_minus, &mat_Q, &mat_P_minus);			//A * P * A^T + Q
 8001372:	4a2d      	ldr	r2, [pc, #180]	; (8001428 <kalman_filter+0x104>)
 8001374:	492f      	ldr	r1, [pc, #188]	; (8001434 <kalman_filter+0x110>)
 8001376:	482c      	ldr	r0, [pc, #176]	; (8001428 <kalman_filter+0x104>)
 8001378:	f002 f822 	bl	80033c0 <arm_mat_add_f32>

    // Calculate innovation covariance: S = C * P_minus * C^T + R
    arm_mat_mult_f32(&mat_C, &mat_P_minus, &mat_temp1x3);			//C*P
 800137c:	4a2f      	ldr	r2, [pc, #188]	; (800143c <kalman_filter+0x118>)
 800137e:	492a      	ldr	r1, [pc, #168]	; (8001428 <kalman_filter+0x104>)
 8001380:	482f      	ldr	r0, [pc, #188]	; (8001440 <kalman_filter+0x11c>)
 8001382:	f002 fbe7 	bl	8003b54 <arm_mat_mult_f32>
    arm_mat_trans_f32(&mat_C, &mat_temp3x1);						//CT
 8001386:	492f      	ldr	r1, [pc, #188]	; (8001444 <kalman_filter+0x120>)
 8001388:	482d      	ldr	r0, [pc, #180]	; (8001440 <kalman_filter+0x11c>)
 800138a:	f002 fcce 	bl	8003d2a <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_temp1x3, &mat_temp3x1, &mat_temp1x1);		//C*P*C^T
 800138e:	4a2e      	ldr	r2, [pc, #184]	; (8001448 <kalman_filter+0x124>)
 8001390:	492c      	ldr	r1, [pc, #176]	; (8001444 <kalman_filter+0x120>)
 8001392:	482a      	ldr	r0, [pc, #168]	; (800143c <kalman_filter+0x118>)
 8001394:	f002 fbde 	bl	8003b54 <arm_mat_mult_f32>
    arm_mat_add_f32(&mat_temp1x1, &mat_R, &mat_S);					//C*P*C^T + R
 8001398:	4a2c      	ldr	r2, [pc, #176]	; (800144c <kalman_filter+0x128>)
 800139a:	492d      	ldr	r1, [pc, #180]	; (8001450 <kalman_filter+0x12c>)
 800139c:	482a      	ldr	r0, [pc, #168]	; (8001448 <kalman_filter+0x124>)
 800139e:	f002 f80f 	bl	80033c0 <arm_mat_add_f32>

    //==> Calculate Kalman gain: K = P_minus * C^T * S^(-1)
    arm_mat_inverse_f32(&mat_S, &mat_temp1x1);						//inv(S)
 80013a2:	4929      	ldr	r1, [pc, #164]	; (8001448 <kalman_filter+0x124>)
 80013a4:	4829      	ldr	r0, [pc, #164]	; (800144c <kalman_filter+0x128>)
 80013a6:	f002 f85e 	bl	8003466 <arm_mat_inverse_f32>
    arm_mat_mult_f32(&mat_P_minus, &mat_temp3x1, &mat_temp3x3A);	//P*CT
 80013aa:	4a1c      	ldr	r2, [pc, #112]	; (800141c <kalman_filter+0xf8>)
 80013ac:	4925      	ldr	r1, [pc, #148]	; (8001444 <kalman_filter+0x120>)
 80013ae:	481e      	ldr	r0, [pc, #120]	; (8001428 <kalman_filter+0x104>)
 80013b0:	f002 fbd0 	bl	8003b54 <arm_mat_mult_f32>
    arm_mat_mult_f32(&mat_temp3x3A, &mat_temp1x1, &mat_K);			//P*CT*inv(S)
 80013b4:	4a27      	ldr	r2, [pc, #156]	; (8001454 <kalman_filter+0x130>)
 80013b6:	4924      	ldr	r1, [pc, #144]	; (8001448 <kalman_filter+0x124>)
 80013b8:	4818      	ldr	r0, [pc, #96]	; (800141c <kalman_filter+0xf8>)
 80013ba:	f002 fbcb 	bl	8003b54 <arm_mat_mult_f32>

    //==> Update state estimate: x_hat = x_hat_minus + K * (z - C * x_hat_minus)
    arm_mat_mult_f32(&mat_C, &mat_x_hat_minus, &mat_temp1x1);		//C*X
 80013be:	4a22      	ldr	r2, [pc, #136]	; (8001448 <kalman_filter+0x124>)
 80013c0:	4913      	ldr	r1, [pc, #76]	; (8001410 <kalman_filter+0xec>)
 80013c2:	481f      	ldr	r0, [pc, #124]	; (8001440 <kalman_filter+0x11c>)
 80013c4:	f002 fbc6 	bl	8003b54 <arm_mat_mult_f32>
    //float32_t innovation = z - temp1x1;								//Z-C*X
    arm_mat_scale_f32(&mat_K, KF.z - KF.temp1x1, &mat_temp3x1);			//K*(Z-C*X)
 80013c8:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <kalman_filter+0x114>)
 80013ca:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80013ce:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <kalman_filter+0x114>)
 80013d0:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
 80013d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d8:	491a      	ldr	r1, [pc, #104]	; (8001444 <kalman_filter+0x120>)
 80013da:	eeb0 0a67 	vmov.f32	s0, s15
 80013de:	481d      	ldr	r0, [pc, #116]	; (8001454 <kalman_filter+0x130>)
 80013e0:	f002 fc32 	bl	8003c48 <arm_mat_scale_f32>
    arm_mat_add_f32(&mat_x_hat_minus, &mat_temp3x1, &mat_x_hat);	//X - K*(Z-C*X) ========> X estimate
 80013e4:	4a0b      	ldr	r2, [pc, #44]	; (8001414 <kalman_filter+0xf0>)
 80013e6:	4917      	ldr	r1, [pc, #92]	; (8001444 <kalman_filter+0x120>)
 80013e8:	4809      	ldr	r0, [pc, #36]	; (8001410 <kalman_filter+0xec>)
 80013ea:	f001 ffe9 	bl	80033c0 <arm_mat_add_f32>

    // Update covariance matrix: P = (I - K * C) * P_minus
    arm_mat_mult_f32(&mat_K, &mat_C, &mat_temp3x3B);				//K*C
 80013ee:	4a0c      	ldr	r2, [pc, #48]	; (8001420 <kalman_filter+0xfc>)
 80013f0:	4913      	ldr	r1, [pc, #76]	; (8001440 <kalman_filter+0x11c>)
 80013f2:	4818      	ldr	r0, [pc, #96]	; (8001454 <kalman_filter+0x130>)
 80013f4:	f002 fbae 	bl	8003b54 <arm_mat_mult_f32>
    arm_mat_sub_f32(&eye, &mat_P_minus, &mat_temp3x3A);				//I - K*C
 80013f8:	4a08      	ldr	r2, [pc, #32]	; (800141c <kalman_filter+0xf8>)
 80013fa:	490b      	ldr	r1, [pc, #44]	; (8001428 <kalman_filter+0x104>)
 80013fc:	4816      	ldr	r0, [pc, #88]	; (8001458 <kalman_filter+0x134>)
 80013fe:	f002 fc59 	bl	8003cb4 <arm_mat_sub_f32>
    arm_mat_mult_f32(&mat_temp3x3A, &mat_P_minus, &mat_P);			//(I - K*C)*P ===========> P estimate
 8001402:	4a08      	ldr	r2, [pc, #32]	; (8001424 <kalman_filter+0x100>)
 8001404:	4908      	ldr	r1, [pc, #32]	; (8001428 <kalman_filter+0x104>)
 8001406:	4805      	ldr	r0, [pc, #20]	; (800141c <kalman_filter+0xf8>)
 8001408:	f002 fba4 	bl	8003b54 <arm_mat_mult_f32>
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000338 	.word	0x20000338
 8001414:	20000330 	.word	0x20000330
 8001418:	20000328 	.word	0x20000328
 800141c:	20000398 	.word	0x20000398
 8001420:	200003a0 	.word	0x200003a0
 8001424:	20000350 	.word	0x20000350
 8001428:	20000358 	.word	0x20000358
 800142c:	20000368 	.word	0x20000368
 8001430:	20000370 	.word	0x20000370
 8001434:	20000360 	.word	0x20000360
 8001438:	200001a8 	.word	0x200001a8
 800143c:	200003b0 	.word	0x200003b0
 8001440:	20000378 	.word	0x20000378
 8001444:	200003a8 	.word	0x200003a8
 8001448:	200003b8 	.word	0x200003b8
 800144c:	20000388 	.word	0x20000388
 8001450:	20000380 	.word	0x20000380
 8001454:	20000390 	.word	0x20000390
 8001458:	20000348 	.word	0x20000348

0800145c <PIDSetup>:
 */

#include "PIDController.h"

void PIDSetup(PID* temp,float32_t Kp, float32_t Ki, float32_t Kd)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	ed87 0a02 	vstr	s0, [r7, #8]
 8001468:	edc7 0a01 	vstr	s1, [r7, #4]
 800146c:	ed87 1a00 	vstr	s2, [r7]
	temp->Kp = Kp;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	601a      	str	r2, [r3, #0]
	temp->Ki = Ki;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	605a      	str	r2, [r3, #4]
	temp->Kd = Kd;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	609a      	str	r2, [r3, #8]
	temp->U = 0;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2200      	movs	r2, #0
 8001486:	60da      	str	r2, [r3, #12]
	temp->Delta_U = 0;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]
	temp->U_minus = 0;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2200      	movs	r2, #0
 8001492:	615a      	str	r2, [r3, #20]
	temp->Error = 0;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
	temp->Error_minus = 0;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	61da      	str	r2, [r3, #28]
	temp->Error_minus2 = 0;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f04f 0200 	mov.w	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <PIDRun>:

void PIDRun(PID* temp, float32_t Feedback, float32_t Ref)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80014c4:	edc7 0a01 	vstr	s1, [r7, #4]
	temp->Error = Ref - Feedback;
 80014c8:	ed97 7a01 	vldr	s14, [r7, #4]
 80014cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80014d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	edc3 7a06 	vstr	s15, [r3, #24]
	//U Update
	temp->Delta_U = (temp->Kp + temp->Ki + temp->Kd)*temp->Error
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	ed93 7a00 	vldr	s14, [r3]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80014e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80014f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	edd3 7a06 	vldr	s15, [r3, #24]
 80014fa:	ee27 7a27 	vmul.f32	s14, s14, s15
			  -(temp->Kp + 2*temp->Kd)*temp->Error_minus
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	edd3 6a00 	vldr	s13, [r3]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	edd3 7a02 	vldr	s15, [r3, #8]
 800150a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800150e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	edd3 7a07 	vldr	s15, [r3, #28]
 8001518:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800151c:	ee37 7a67 	vsub.f32	s14, s14, s15
			  +temp->Kd*temp->Error_minus2;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	edd3 6a02 	vldr	s13, [r3, #8]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	edd3 7a08 	vldr	s15, [r3, #32]
 800152c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001530:	ee77 7a27 	vadd.f32	s15, s14, s15
	temp->Delta_U = (temp->Kp + temp->Ki + temp->Kd)*temp->Error
 8001534:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001538:	ee17 2a90 	vmov	r2, s15
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	611a      	str	r2, [r3, #16]
	temp->U = temp->Delta_U + temp->U_minus;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	691a      	ldr	r2, [r3, #16]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	695b      	ldr	r3, [r3, #20]
 8001548:	441a      	add	r2, r3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	60da      	str	r2, [r3, #12]
	temp->U_minus = temp->U;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	68da      	ldr	r2, [r3, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	615a      	str	r2, [r3, #20]
	//Error Update
	temp->Error_minus2 = temp->Error_minus;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	69da      	ldr	r2, [r3, #28]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	621a      	str	r2, [r3, #32]
	temp->Error_minus = temp->Error;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	699a      	ldr	r2, [r3, #24]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	61da      	str	r2, [r3, #28]
}
 8001566:	bf00      	nop
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <QuinticSetup>:
 *      Author: tanawatp
 */
#include "QuinticTrajectory.h"

void QuinticSetup(QuinticTraj* temp, float32_t vmax, float32_t amax)
{
 8001572:	b480      	push	{r7}
 8001574:	b085      	sub	sp, #20
 8001576:	af00      	add	r7, sp, #0
 8001578:	60f8      	str	r0, [r7, #12]
 800157a:	ed87 0a02 	vstr	s0, [r7, #8]
 800157e:	edc7 0a01 	vstr	s1, [r7, #4]
	temp->v_max = vmax;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	68ba      	ldr	r2, [r7, #8]
 8001586:	619a      	str	r2, [r3, #24]
	temp->a_max = amax;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	61da      	str	r2, [r3, #28]
	temp->State = Ready;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	//temp->final_pos = 300;
}
 8001596:	bf00      	nop
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	0000      	movs	r0, r0
 80015a4:	0000      	movs	r0, r0
	...

080015a8 <QuinticGenerator>:
void QuinticGenerator(QuinticTraj* temp)
{
 80015a8:	b5b0      	push	{r4, r5, r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	temp->final_pos = temp->final_pos * 8192/120;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80015b6:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8001828 <QuinticGenerator+0x280>
 80015ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015be:	eddf 6a9b 	vldr	s13, [pc, #620]	; 800182c <QuinticGenerator+0x284>
 80015c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	edc3 7a01 	vstr	s15, [r3, #4]
	temp->displacement = temp->final_pos - temp->start_pos;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	ed93 7a01 	vldr	s14, [r3, #4]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	edd3 7a00 	vldr	s15, [r3]
 80015d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	edc3 7a02 	vstr	s15, [r3, #8]
	if(temp->displacement<0)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80015e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f0:	d504      	bpl.n	80015fc <QuinticGenerator+0x54>
	{
		temp->Dir = 1;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 2020 	strb.w	r2, [r3, #32]
 80015fa:	e00b      	b.n	8001614 <QuinticGenerator+0x6c>
	}
	else if (temp->displacement>0)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001602:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800160a:	dd03      	ble.n	8001614 <QuinticGenerator+0x6c>
	{
		temp->Dir = 0;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 2020 	strb.w	r2, [r3, #32]
	}
	temp->timeAcc = 0.5*sqrtf(23.094*fabs(temp->displacement)/temp->a_max);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	edd3 7a02 	vldr	s15, [r3, #8]
 800161a:	eef0 7ae7 	vabs.f32	s15, s15
 800161e:	ee17 0a90 	vmov	r0, s15
 8001622:	f7fe ff3d 	bl	80004a0 <__aeabi_f2d>
 8001626:	a37e      	add	r3, pc, #504	; (adr r3, 8001820 <QuinticGenerator+0x278>)
 8001628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162c:	f7fe ff90 	bl	8000550 <__aeabi_dmul>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4614      	mov	r4, r2
 8001636:	461d      	mov	r5, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69db      	ldr	r3, [r3, #28]
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe ff2f 	bl	80004a0 <__aeabi_f2d>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4620      	mov	r0, r4
 8001648:	4629      	mov	r1, r5
 800164a:	f7ff f8ab 	bl	80007a4 <__aeabi_ddiv>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4610      	mov	r0, r2
 8001654:	4619      	mov	r1, r3
 8001656:	f7ff fa2b 	bl	8000ab0 <__aeabi_d2f>
 800165a:	4603      	mov	r3, r0
 800165c:	ee00 3a10 	vmov	s0, r3
 8001660:	f005 f982 	bl	8006968 <sqrtf>
 8001664:	ee10 3a10 	vmov	r3, s0
 8001668:	4618      	mov	r0, r3
 800166a:	f7fe ff19 	bl	80004a0 <__aeabi_f2d>
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	4b6f      	ldr	r3, [pc, #444]	; (8001830 <QuinticGenerator+0x288>)
 8001674:	f7fe ff6c 	bl	8000550 <__aeabi_dmul>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4610      	mov	r0, r2
 800167e:	4619      	mov	r1, r3
 8001680:	f7ff fa16 	bl	8000ab0 <__aeabi_d2f>
 8001684:	4602      	mov	r2, r0
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	645a      	str	r2, [r3, #68]	; 0x44
	temp->timeVelo = 1.875*fabs(temp->displacement)/temp->v_max;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001690:	eef0 7ae7 	vabs.f32	s15, s15
 8001694:	ee17 0a90 	vmov	r0, s15
 8001698:	f7fe ff02 	bl	80004a0 <__aeabi_f2d>
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	4b64      	ldr	r3, [pc, #400]	; (8001834 <QuinticGenerator+0x28c>)
 80016a2:	f7fe ff55 	bl	8000550 <__aeabi_dmul>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4614      	mov	r4, r2
 80016ac:	461d      	mov	r5, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe fef4 	bl	80004a0 <__aeabi_f2d>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4620      	mov	r0, r4
 80016be:	4629      	mov	r1, r5
 80016c0:	f7ff f870 	bl	80007a4 <__aeabi_ddiv>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4610      	mov	r0, r2
 80016ca:	4619      	mov	r1, r3
 80016cc:	f7ff f9f0 	bl	8000ab0 <__aeabi_d2f>
 80016d0:	4602      	mov	r2, r0
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	649a      	str	r2, [r3, #72]	; 0x48
	temp->TotalTime = MAX(temp->timeAcc,temp->timeVelo);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80016e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ea:	dd02      	ble.n	80016f2 <QuinticGenerator+0x14a>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f0:	e001      	b.n	80016f6 <QuinticGenerator+0x14e>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	63d3      	str	r3, [r2, #60]	; 0x3c
	temp->coeff[0] = temp->start_pos;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	625a      	str	r2, [r3, #36]	; 0x24
	temp->coeff[1] = 0;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	629a      	str	r2, [r3, #40]	; 0x28
	temp->coeff[2] = 0;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	62da      	str	r2, [r3, #44]	; 0x2c
	temp->coeff[3] = 10.0*temp->displacement/powf(temp->TotalTime,3);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe fec2 	bl	80004a0 <__aeabi_f2d>
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	4b45      	ldr	r3, [pc, #276]	; (8001838 <QuinticGenerator+0x290>)
 8001722:	f7fe ff15 	bl	8000550 <__aeabi_dmul>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4614      	mov	r4, r2
 800172c:	461d      	mov	r5, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001734:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001738:	eeb0 0a67 	vmov.f32	s0, s15
 800173c:	f005 f8bc 	bl	80068b8 <powf>
 8001740:	ee10 3a10 	vmov	r3, s0
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe feab 	bl	80004a0 <__aeabi_f2d>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4620      	mov	r0, r4
 8001750:	4629      	mov	r1, r5
 8001752:	f7ff f827 	bl	80007a4 <__aeabi_ddiv>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4610      	mov	r0, r2
 800175c:	4619      	mov	r1, r3
 800175e:	f7ff f9a7 	bl	8000ab0 <__aeabi_d2f>
 8001762:	4602      	mov	r2, r0
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	631a      	str	r2, [r3, #48]	; 0x30
	temp->coeff[4] = -15.0*temp->displacement/powf(temp->TotalTime,4);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	4618      	mov	r0, r3
 800176e:	f7fe fe97 	bl	80004a0 <__aeabi_f2d>
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	4b31      	ldr	r3, [pc, #196]	; (800183c <QuinticGenerator+0x294>)
 8001778:	f7fe feea 	bl	8000550 <__aeabi_dmul>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	4614      	mov	r4, r2
 8001782:	461d      	mov	r5, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800178a:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800178e:	eeb0 0a67 	vmov.f32	s0, s15
 8001792:	f005 f891 	bl	80068b8 <powf>
 8001796:	ee10 3a10 	vmov	r3, s0
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe fe80 	bl	80004a0 <__aeabi_f2d>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	4620      	mov	r0, r4
 80017a6:	4629      	mov	r1, r5
 80017a8:	f7fe fffc 	bl	80007a4 <__aeabi_ddiv>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4610      	mov	r0, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	f7ff f97c 	bl	8000ab0 <__aeabi_d2f>
 80017b8:	4602      	mov	r2, r0
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	635a      	str	r2, [r3, #52]	; 0x34
	temp->coeff[5] = 6.0*temp->displacement/powf(temp->TotalTime,5);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fe6c 	bl	80004a0 <__aeabi_f2d>
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	4b1c      	ldr	r3, [pc, #112]	; (8001840 <QuinticGenerator+0x298>)
 80017ce:	f7fe febf 	bl	8000550 <__aeabi_dmul>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4614      	mov	r4, r2
 80017d8:	461d      	mov	r5, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80017e0:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80017e4:	eeb0 0a67 	vmov.f32	s0, s15
 80017e8:	f005 f866 	bl	80068b8 <powf>
 80017ec:	ee10 3a10 	vmov	r3, s0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fe55 	bl	80004a0 <__aeabi_f2d>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4620      	mov	r0, r4
 80017fc:	4629      	mov	r1, r5
 80017fe:	f7fe ffd1 	bl	80007a4 <__aeabi_ddiv>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4610      	mov	r0, r2
 8001808:	4619      	mov	r1, r3
 800180a:	f7ff f951 	bl	8000ab0 <__aeabi_d2f>
 800180e:	4602      	mov	r2, r0
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bdb0      	pop	{r4, r5, r7, pc}
 800181c:	f3af 8000 	nop.w
 8001820:	624dd2f2 	.word	0x624dd2f2
 8001824:	40371810 	.word	0x40371810
 8001828:	46000000 	.word	0x46000000
 800182c:	42f00000 	.word	0x42f00000
 8001830:	3fe00000 	.word	0x3fe00000
 8001834:	3ffe0000 	.word	0x3ffe0000
 8001838:	40240000 	.word	0x40240000
 800183c:	c02e0000 	.word	0xc02e0000
 8001840:	40180000 	.word	0x40180000

08001844 <QuinticEvaluator>:
void QuinticEvaluator(QuinticTraj* temp)
{
 8001844:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001848:	ed2d 8b02 	vpush	{d8}
 800184c:	b084      	sub	sp, #16
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
	float32_t time = temp->time;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	60fb      	str	r3, [r7, #12]
	temp->current_pos = temp->coeff[0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
						+ temp->coeff[1]*time
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001864:	edd7 7a03 	vldr	s15, [r7, #12]
 8001868:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800186c:	ee37 8a27 	vadd.f32	s16, s14, s15
						+ temp->coeff[2]*powf(time,2)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	edd3 8a0b 	vldr	s17, [r3, #44]	; 0x2c
 8001876:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800187a:	ed97 0a03 	vldr	s0, [r7, #12]
 800187e:	f005 f81b 	bl	80068b8 <powf>
 8001882:	eef0 7a40 	vmov.f32	s15, s0
 8001886:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800188a:	ee38 8a27 	vadd.f32	s16, s16, s15
						+ temp->coeff[3]*powf(time,3)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	edd3 8a0c 	vldr	s17, [r3, #48]	; 0x30
 8001894:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001898:	ed97 0a03 	vldr	s0, [r7, #12]
 800189c:	f005 f80c 	bl	80068b8 <powf>
 80018a0:	eef0 7a40 	vmov.f32	s15, s0
 80018a4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80018a8:	ee38 8a27 	vadd.f32	s16, s16, s15
						+ temp->coeff[4]*powf(time,4)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	edd3 8a0d 	vldr	s17, [r3, #52]	; 0x34
 80018b2:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80018b6:	ed97 0a03 	vldr	s0, [r7, #12]
 80018ba:	f004 fffd 	bl	80068b8 <powf>
 80018be:	eef0 7a40 	vmov.f32	s15, s0
 80018c2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80018c6:	ee38 8a27 	vadd.f32	s16, s16, s15
						+ temp->coeff[5]*powf(time,5);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	edd3 8a0e 	vldr	s17, [r3, #56]	; 0x38
 80018d0:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80018d4:	ed97 0a03 	vldr	s0, [r7, #12]
 80018d8:	f004 ffee 	bl	80068b8 <powf>
 80018dc:	eef0 7a40 	vmov.f32	s15, s0
 80018e0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80018e4:	ee78 7a27 	vadd.f32	s15, s16, s15
	temp->current_pos = temp->coeff[0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	edc3 7a03 	vstr	s15, [r3, #12]

	temp->current_velo = temp->coeff[1]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fdd4 	bl	80004a0 <__aeabi_f2d>
 80018f8:	4604      	mov	r4, r0
 80018fa:	460d      	mov	r5, r1
						+ 2.0*temp->coeff[2]*time
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001900:	4618      	mov	r0, r3
 8001902:	f7fe fdcd 	bl	80004a0 <__aeabi_f2d>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	f7fe fc6b 	bl	80001e4 <__adddf3>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4690      	mov	r8, r2
 8001914:	4699      	mov	r9, r3
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f7fe fdc2 	bl	80004a0 <__aeabi_f2d>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4640      	mov	r0, r8
 8001922:	4649      	mov	r1, r9
 8001924:	f7fe fe14 	bl	8000550 <__aeabi_dmul>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4620      	mov	r0, r4
 800192e:	4629      	mov	r1, r5
 8001930:	f7fe fc58 	bl	80001e4 <__adddf3>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4614      	mov	r4, r2
 800193a:	461d      	mov	r5, r3
						+ 3.0*temp->coeff[3]*powf(time,2)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fdad 	bl	80004a0 <__aeabi_f2d>
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	4b90      	ldr	r3, [pc, #576]	; (8001b8c <QuinticEvaluator+0x348>)
 800194c:	f7fe fe00 	bl	8000550 <__aeabi_dmul>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4690      	mov	r8, r2
 8001956:	4699      	mov	r9, r3
 8001958:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800195c:	ed97 0a03 	vldr	s0, [r7, #12]
 8001960:	f004 ffaa 	bl	80068b8 <powf>
 8001964:	ee10 3a10 	vmov	r3, s0
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fd99 	bl	80004a0 <__aeabi_f2d>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4640      	mov	r0, r8
 8001974:	4649      	mov	r1, r9
 8001976:	f7fe fdeb 	bl	8000550 <__aeabi_dmul>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4620      	mov	r0, r4
 8001980:	4629      	mov	r1, r5
 8001982:	f7fe fc2f 	bl	80001e4 <__adddf3>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4614      	mov	r4, r2
 800198c:	461d      	mov	r5, r3
						+ 4.0*temp->coeff[4]*powf(time,3)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fd84 	bl	80004a0 <__aeabi_f2d>
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	4b7c      	ldr	r3, [pc, #496]	; (8001b90 <QuinticEvaluator+0x34c>)
 800199e:	f7fe fdd7 	bl	8000550 <__aeabi_dmul>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4690      	mov	r8, r2
 80019a8:	4699      	mov	r9, r3
 80019aa:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80019ae:	ed97 0a03 	vldr	s0, [r7, #12]
 80019b2:	f004 ff81 	bl	80068b8 <powf>
 80019b6:	ee10 3a10 	vmov	r3, s0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fd70 	bl	80004a0 <__aeabi_f2d>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4640      	mov	r0, r8
 80019c6:	4649      	mov	r1, r9
 80019c8:	f7fe fdc2 	bl	8000550 <__aeabi_dmul>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4620      	mov	r0, r4
 80019d2:	4629      	mov	r1, r5
 80019d4:	f7fe fc06 	bl	80001e4 <__adddf3>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4614      	mov	r4, r2
 80019de:	461d      	mov	r5, r3
						+ 5.0*temp->coeff[5]*powf(time,4);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fd5b 	bl	80004a0 <__aeabi_f2d>
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	4b69      	ldr	r3, [pc, #420]	; (8001b94 <QuinticEvaluator+0x350>)
 80019f0:	f7fe fdae 	bl	8000550 <__aeabi_dmul>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4690      	mov	r8, r2
 80019fa:	4699      	mov	r9, r3
 80019fc:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001a00:	ed97 0a03 	vldr	s0, [r7, #12]
 8001a04:	f004 ff58 	bl	80068b8 <powf>
 8001a08:	ee10 3a10 	vmov	r3, s0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe fd47 	bl	80004a0 <__aeabi_f2d>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4640      	mov	r0, r8
 8001a18:	4649      	mov	r1, r9
 8001a1a:	f7fe fd99 	bl	8000550 <__aeabi_dmul>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4620      	mov	r0, r4
 8001a24:	4629      	mov	r1, r5
 8001a26:	f7fe fbdd 	bl	80001e4 <__adddf3>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4610      	mov	r0, r2
 8001a30:	4619      	mov	r1, r3
 8001a32:	f7ff f83d 	bl	8000ab0 <__aeabi_d2f>
 8001a36:	4602      	mov	r2, r0
	temp->current_velo = temp->coeff[1]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	611a      	str	r2, [r3, #16]

	temp->current_acc = 2.0*temp->coeff[2]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fd2d 	bl	80004a0 <__aeabi_f2d>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	f7fe fbcb 	bl	80001e4 <__adddf3>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4614      	mov	r4, r2
 8001a54:	461d      	mov	r5, r3
						+ 6.0*temp->coeff[3]*time
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe fd20 	bl	80004a0 <__aeabi_f2d>
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	4b4c      	ldr	r3, [pc, #304]	; (8001b98 <QuinticEvaluator+0x354>)
 8001a66:	f7fe fd73 	bl	8000550 <__aeabi_dmul>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4690      	mov	r8, r2
 8001a70:	4699      	mov	r9, r3
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f7fe fd14 	bl	80004a0 <__aeabi_f2d>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4640      	mov	r0, r8
 8001a7e:	4649      	mov	r1, r9
 8001a80:	f7fe fd66 	bl	8000550 <__aeabi_dmul>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4620      	mov	r0, r4
 8001a8a:	4629      	mov	r1, r5
 8001a8c:	f7fe fbaa 	bl	80001e4 <__adddf3>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4614      	mov	r4, r2
 8001a96:	461d      	mov	r5, r3
						+ 12.0*temp->coeff[4]*powf(time,2)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fcff 	bl	80004a0 <__aeabi_f2d>
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	4b3d      	ldr	r3, [pc, #244]	; (8001b9c <QuinticEvaluator+0x358>)
 8001aa8:	f7fe fd52 	bl	8000550 <__aeabi_dmul>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4690      	mov	r8, r2
 8001ab2:	4699      	mov	r9, r3
 8001ab4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001ab8:	ed97 0a03 	vldr	s0, [r7, #12]
 8001abc:	f004 fefc 	bl	80068b8 <powf>
 8001ac0:	ee10 3a10 	vmov	r3, s0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fceb 	bl	80004a0 <__aeabi_f2d>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4640      	mov	r0, r8
 8001ad0:	4649      	mov	r1, r9
 8001ad2:	f7fe fd3d 	bl	8000550 <__aeabi_dmul>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4620      	mov	r0, r4
 8001adc:	4629      	mov	r1, r5
 8001ade:	f7fe fb81 	bl	80001e4 <__adddf3>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4614      	mov	r4, r2
 8001ae8:	461d      	mov	r5, r3
						+ 20.0*temp->coeff[5]*powf(time,3);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fcd6 	bl	80004a0 <__aeabi_f2d>
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	4b29      	ldr	r3, [pc, #164]	; (8001ba0 <QuinticEvaluator+0x35c>)
 8001afa:	f7fe fd29 	bl	8000550 <__aeabi_dmul>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4690      	mov	r8, r2
 8001b04:	4699      	mov	r9, r3
 8001b06:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001b0a:	ed97 0a03 	vldr	s0, [r7, #12]
 8001b0e:	f004 fed3 	bl	80068b8 <powf>
 8001b12:	ee10 3a10 	vmov	r3, s0
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fcc2 	bl	80004a0 <__aeabi_f2d>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4640      	mov	r0, r8
 8001b22:	4649      	mov	r1, r9
 8001b24:	f7fe fd14 	bl	8000550 <__aeabi_dmul>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	4629      	mov	r1, r5
 8001b30:	f7fe fb58 	bl	80001e4 <__adddf3>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f7fe ffb8 	bl	8000ab0 <__aeabi_d2f>
 8001b40:	4602      	mov	r2, r0
	temp->current_acc = 2.0*temp->coeff[2]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	615a      	str	r2, [r3, #20]
	if(time >= temp->TotalTime)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001b4c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b58:	da00      	bge.n	8001b5c <QuinticEvaluator+0x318>
//		else if(temp->start_pos == 300)
//		{
//			temp->final_pos = 0;
//		}
	}
}
 8001b5a:	e00f      	b.n	8001b7c <QuinticEvaluator+0x338>
		temp->start_pos = temp->final_pos;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	601a      	str	r2, [r3, #0]
		temp->current_pos = temp->start_pos;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	60da      	str	r2, [r3, #12]
		temp->current_velo = 0;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
		temp->current_acc = 0;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	615a      	str	r2, [r3, #20]
}
 8001b7c:	bf00      	nop
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	ecbd 8b02 	vpop	{d8}
 8001b86:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40080000 	.word	0x40080000
 8001b90:	40100000 	.word	0x40100000
 8001b94:	40140000 	.word	0x40140000
 8001b98:	40180000 	.word	0x40180000
 8001b9c:	40280000 	.word	0x40280000
 8001ba0:	40340000 	.word	0x40340000

08001ba4 <QuinticRun>:
void QuinticRun(QuinticTraj* temp,float32_t dt)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	ed87 0a00 	vstr	s0, [r7]
	switch(temp->State)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d022      	beq.n	8001c00 <QuinticRun+0x5c>
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	dc3f      	bgt.n	8001c3e <QuinticRun+0x9a>
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d002      	beq.n	8001bc8 <QuinticRun+0x24>
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d010      	beq.n	8001be8 <QuinticRun+0x44>
		{
			temp->State = Ready;
		}
		break;
	}
}
 8001bc6:	e03a      	b.n	8001c3e <QuinticRun+0x9a>
		if(temp->start_pos != temp->final_pos)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	ed93 7a00 	vldr	s14, [r3]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bd4:	eeb4 7a67 	vcmp.f32	s14, s15
 8001bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bdc:	d02e      	beq.n	8001c3c <QuinticRun+0x98>
			temp->State = PreCal;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8001be6:	e029      	b.n	8001c3c <QuinticRun+0x98>
		temp->time = 0;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	641a      	str	r2, [r3, #64]	; 0x40
		QuinticGenerator(temp);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff fcd9 	bl	80015a8 <QuinticGenerator>
		temp->State = Run;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8001bfe:	e01e      	b.n	8001c3e <QuinticRun+0x9a>
		temp->time = temp->time + dt;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001c06:	edd7 7a00 	vldr	s15, [r7]
 8001c0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		QuinticEvaluator(temp);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff fe15 	bl	8001844 <QuinticEvaluator>
		if(temp->time > temp->TotalTime)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001c26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2e:	dc00      	bgt.n	8001c32 <QuinticRun+0x8e>
		break;
 8001c30:	e005      	b.n	8001c3e <QuinticRun+0x9a>
			temp->State = Ready;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8001c3a:	e000      	b.n	8001c3e <QuinticRun+0x9a>
		break;
 8001c3c:	bf00      	nop
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <InitReadEncoder>:
//{ //get time in micros
//	return __HAL_TIM_GET_COUNTER(&htim5)+ ReadEncoderParam._micros;
//}

void InitReadEncoder(ReadEncoder* Read, uint32_t samplingtime)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	6039      	str	r1, [r7, #0]
	Read->MotorSetDuty = 0;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	701a      	strb	r2, [r3, #0]
	Read->Pulse_Compare = 0;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	805a      	strh	r2, [r3, #2]
	Read->DIR = 0;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	711a      	strb	r2, [r3, #4]
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <TraySetup>:
 */
#include "TrayLocalization.h"
#include "arm_math.h"

void TraySetup(Tray* temp, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b085      	sub	sp, #20
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	4608      	mov	r0, r1
 8001c78:	4611      	mov	r1, r2
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	817b      	strh	r3, [r7, #10]
 8001c80:	460b      	mov	r3, r1
 8001c82:	813b      	strh	r3, [r7, #8]
 8001c84:	4613      	mov	r3, r2
 8001c86:	80fb      	strh	r3, [r7, #6]
	temp->Edge1_X = x1;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	897a      	ldrh	r2, [r7, #10]
 8001c8c:	801a      	strh	r2, [r3, #0]
	temp->Edge1_Y = y1;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	893a      	ldrh	r2, [r7, #8]
 8001c92:	805a      	strh	r2, [r3, #2]
	temp->Edge2_X = x2;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	88fa      	ldrh	r2, [r7, #6]
 8001c98:	809a      	strh	r2, [r3, #4]
	temp->Edge2_Y = y2;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	8b3a      	ldrh	r2, [r7, #24]
 8001c9e:	80da      	strh	r2, [r3, #6]
}
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	0000      	movs	r0, r0
	...

08001cb0 <TrayLocalization>:
void TrayLocalization(Tray* temp)
{
 8001cb0:	b5b0      	push	{r4, r5, r7, lr}
 8001cb2:	ed2d 8b02 	vpush	{d8}
 8001cb6:	b08e      	sub	sp, #56	; 0x38
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
	uint16_t RefX_case1[3] = {10*8192/120,30*8192/120,50*8192/120};
 8001cbc:	4ab6      	ldr	r2, [pc, #728]	; (8001f98 <TrayLocalization+0x2e8>)
 8001cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cc6:	6018      	str	r0, [r3, #0]
 8001cc8:	3304      	adds	r3, #4
 8001cca:	8019      	strh	r1, [r3, #0]
	uint16_t RefY_case1[3] = {40*8192/120,25*8192/120,10*8192/120};
 8001ccc:	4ab3      	ldr	r2, [pc, #716]	; (8001f9c <TrayLocalization+0x2ec>)
 8001cce:	f107 031c 	add.w	r3, r7, #28
 8001cd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cd6:	6018      	str	r0, [r3, #0]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	8019      	strh	r1, [r3, #0]

	uint16_t RefX_case2[3] = {10*8192/120,25*8192/120,40*8192/120};
 8001cdc:	4ab0      	ldr	r2, [pc, #704]	; (8001fa0 <TrayLocalization+0x2f0>)
 8001cde:	f107 0314 	add.w	r3, r7, #20
 8001ce2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ce6:	6018      	str	r0, [r3, #0]
 8001ce8:	3304      	adds	r3, #4
 8001cea:	8019      	strh	r1, [r3, #0]
	uint16_t RefY_case2[3] = {50*8192/120,30*8192/120,10*8192/120};
 8001cec:	4aad      	ldr	r2, [pc, #692]	; (8001fa4 <TrayLocalization+0x2f4>)
 8001cee:	f107 030c 	add.w	r3, r7, #12
 8001cf2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cf6:	6018      	str	r0, [r3, #0]
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	8019      	strh	r1, [r3, #0]
	int16_t deltaX = temp->Edge2_X - temp->Edge1_X;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	889a      	ldrh	r2, [r3, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	867b      	strh	r3, [r7, #50]	; 0x32
	int16_t deltaY = temp->Edge2_Y - temp->Edge1_Y;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	88da      	ldrh	r2, [r3, #6]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	885b      	ldrh	r3, [r3, #2]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	863b      	strh	r3, [r7, #48]	; 0x30
	float32_t lengh = sqrt(pow(deltaX,2) + pow(deltaY,2));
 8001d18:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fbad 	bl	800047c <__aeabi_i2d>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	ed9f 1b9a 	vldr	d1, [pc, #616]	; 8001f90 <TrayLocalization+0x2e0>
 8001d2a:	ec43 2b10 	vmov	d0, r2, r3
 8001d2e:	f004 fd27 	bl	8006780 <pow>
 8001d32:	ec55 4b10 	vmov	r4, r5, d0
 8001d36:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fb9e 	bl	800047c <__aeabi_i2d>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	ed9f 1b92 	vldr	d1, [pc, #584]	; 8001f90 <TrayLocalization+0x2e0>
 8001d48:	ec43 2b10 	vmov	d0, r2, r3
 8001d4c:	f004 fd18 	bl	8006780 <pow>
 8001d50:	ec53 2b10 	vmov	r2, r3, d0
 8001d54:	4620      	mov	r0, r4
 8001d56:	4629      	mov	r1, r5
 8001d58:	f7fe fa44 	bl	80001e4 <__adddf3>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	ec43 2b17 	vmov	d7, r2, r3
 8001d64:	eeb0 0a47 	vmov.f32	s0, s14
 8001d68:	eef0 0a67 	vmov.f32	s1, s15
 8001d6c:	f004 fd78 	bl	8006860 <sqrt>
 8001d70:	ec53 2b10 	vmov	r2, r3, d0
 8001d74:	4610      	mov	r0, r2
 8001d76:	4619      	mov	r1, r3
 8001d78:	f7fe fe9a 	bl	8000ab0 <__aeabi_d2f>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	62fb      	str	r3, [r7, #44]	; 0x2c

	if((3276 <= lengh)&&(lengh <= 3550))
 8001d80:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d84:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8001fa8 <TrayLocalization+0x2f8>
 8001d88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d90:	db0d      	blt.n	8001dae <TrayLocalization+0xfe>
 8001d92:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d96:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8001fac <TrayLocalization+0x2fc>
 8001d9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da2:	d804      	bhi.n	8001dae <TrayLocalization+0xfe>
	{
		temp->Flag = 1;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8001dac:	e01a      	b.n	8001de4 <TrayLocalization+0x134>
	}
	else if ((3550 <= lengh)&&(lengh <= 4233))
 8001dae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001db2:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8001fac <TrayLocalization+0x2fc>
 8001db6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbe:	db0d      	blt.n	8001ddc <TrayLocalization+0x12c>
 8001dc0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001dc4:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8001fb0 <TrayLocalization+0x300>
 8001dc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd0:	d804      	bhi.n	8001ddc <TrayLocalization+0x12c>
	{
		temp->Flag = 2;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8001dda:	e003      	b.n	8001de4 <TrayLocalization+0x134>
	}
	else
	{
		temp->Flag = 0;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}
	float32_t theta;
	arm_atan2_f32(deltaY,deltaX,&theta);
 8001de4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001de8:	ee07 3a90 	vmov	s15, r3
 8001dec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001df0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001df4:	ee07 3a10 	vmov	s14, r3
 8001df8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001dfc:	f107 0308 	add.w	r3, r7, #8
 8001e00:	4618      	mov	r0, r3
 8001e02:	eef0 0a47 	vmov.f32	s1, s14
 8001e06:	eeb0 0a67 	vmov.f32	s0, s15
 8001e0a:	f000 ffab 	bl	8002d64 <arm_atan2_f32>
	int8_t i;
	int8_t j;
	uint8_t ind = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	switch(temp->Flag)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f993 302d 	ldrsb.w	r3, [r3, #45]	; 0x2d
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	f000 80af 	beq.w	8001f7e <TrayLocalization+0x2ce>
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	f300 8166 	bgt.w	80020f2 <TrayLocalization+0x442>
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 8162 	beq.w	80020f0 <TrayLocalization+0x440>
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	f040 8160 	bne.w	80020f2 <TrayLocalization+0x442>
	{
	case 1:
		for(i=0;i<3;i++)
 8001e32:	2300      	movs	r3, #0
 8001e34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001e38:	e09b      	b.n	8001f72 <TrayLocalization+0x2c2>
		{
			for(j=0;j<3;j++)
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001e40:	e08b      	b.n	8001f5a <TrayLocalization+0x2aa>
			{
				temp->Holes_X[ind] = temp->Edge1_X
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	ee07 3a90 	vmov	s15, r3
								+ arm_cos_f32(theta)*RefX_case1[i]
 8001e4a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001e4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e52:	eeb0 0a67 	vmov.f32	s0, s15
 8001e56:	f001 f9ab 	bl	80031b0 <arm_cos_f32>
 8001e5a:	eeb0 7a40 	vmov.f32	s14, s0
 8001e5e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	3338      	adds	r3, #56	; 0x38
 8001e66:	443b      	add	r3, r7
 8001e68:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001e6c:	ee07 3a90 	vmov	s15, r3
 8001e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e78:	ee38 8a27 	vadd.f32	s16, s16, s15
								- arm_sin_f32(theta)*RefY_case1[j];
 8001e7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e80:	eeb0 0a67 	vmov.f32	s0, s15
 8001e84:	f001 fa1a 	bl	80032bc <arm_sin_f32>
 8001e88:	eeb0 7a40 	vmov.f32	s14, s0
 8001e8c:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	3338      	adds	r3, #56	; 0x38
 8001e94:	443b      	add	r3, r7
 8001e96:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea6:	ee78 7a67 	vsub.f32	s15, s16, s15
				temp->Holes_X[ind] = temp->Edge1_X
 8001eaa:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8001eae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eb2:	ee17 3a90 	vmov	r3, s15
 8001eb6:	b299      	uxth	r1, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3204      	adds	r2, #4
 8001ebc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				temp->Holes_Y[ind] = temp->Edge1_Y
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	885b      	ldrh	r3, [r3, #2]
 8001ec4:	ee07 3a90 	vmov	s15, r3
								+ arm_cos_f32(theta)*RefY_case1[j]
 8001ec8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001ecc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed4:	f001 f96c 	bl	80031b0 <arm_cos_f32>
 8001ed8:	eeb0 7a40 	vmov.f32	s14, s0
 8001edc:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	3338      	adds	r3, #56	; 0x38
 8001ee4:	443b      	add	r3, r7
 8001ee6:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001eea:	ee07 3a90 	vmov	s15, r3
 8001eee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef6:	ee38 8a27 	vadd.f32	s16, s16, s15
								+ arm_sin_f32(theta)*RefX_case1[i];
 8001efa:	edd7 7a02 	vldr	s15, [r7, #8]
 8001efe:	eeb0 0a67 	vmov.f32	s0, s15
 8001f02:	f001 f9db 	bl	80032bc <arm_sin_f32>
 8001f06:	eeb0 7a40 	vmov.f32	s14, s0
 8001f0a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	3338      	adds	r3, #56	; 0x38
 8001f12:	443b      	add	r3, r7
 8001f14:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001f18:	ee07 3a90 	vmov	s15, r3
 8001f1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f24:	ee78 7a27 	vadd.f32	s15, s16, s15
				temp->Holes_Y[ind] = temp->Edge1_Y
 8001f28:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001f2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f30:	ee17 2a90 	vmov	r2, s15
 8001f34:	b291      	uxth	r1, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	330c      	adds	r3, #12
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	4413      	add	r3, r2
 8001f3e:	460a      	mov	r2, r1
 8001f40:	805a      	strh	r2, [r3, #2]
				ind += 1;
 8001f42:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001f46:	3301      	adds	r3, #1
 8001f48:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			for(j=0;j<3;j++)
 8001f4c:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	3301      	adds	r3, #1
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001f5a:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	f77f af6f 	ble.w	8001e42 <TrayLocalization+0x192>
		for(i=0;i<3;i++)
 8001f64:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001f72:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	f77f af5f 	ble.w	8001e3a <TrayLocalization+0x18a>
			}
		}
		break;
 8001f7c:	e0b9      	b.n	80020f2 <TrayLocalization+0x442>
	case 2:
		for(i=0;i<3;i++)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001f84:	e0ae      	b.n	80020e4 <TrayLocalization+0x434>
		{
			for(j=0;j<3;j++)
 8001f86:	2300      	movs	r3, #0
 8001f88:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001f8c:	e09e      	b.n	80020cc <TrayLocalization+0x41c>
 8001f8e:	bf00      	nop
 8001f90:	00000000 	.word	0x00000000
 8001f94:	40000000 	.word	0x40000000
 8001f98:	08007e5c 	.word	0x08007e5c
 8001f9c:	08007e64 	.word	0x08007e64
 8001fa0:	08007e6c 	.word	0x08007e6c
 8001fa4:	08007e74 	.word	0x08007e74
 8001fa8:	454cc000 	.word	0x454cc000
 8001fac:	455de000 	.word	0x455de000
 8001fb0:	45844800 	.word	0x45844800
			{
				temp->Holes_X[ind] = temp->Edge1_X
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	ee07 3a90 	vmov	s15, r3
								+ arm_cos_f32(theta)*RefX_case2[i]
 8001fbc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001fc0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fc4:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc8:	f001 f8f2 	bl	80031b0 <arm_cos_f32>
 8001fcc:	eeb0 7a40 	vmov.f32	s14, s0
 8001fd0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	3338      	adds	r3, #56	; 0x38
 8001fd8:	443b      	add	r3, r7
 8001fda:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001fde:	ee07 3a90 	vmov	s15, r3
 8001fe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fea:	ee38 8a27 	vadd.f32	s16, s16, s15
								- arm_sin_f32(theta)*RefY_case2[j];
 8001fee:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff6:	f001 f961 	bl	80032bc <arm_sin_f32>
 8001ffa:	eeb0 7a40 	vmov.f32	s14, s0
 8001ffe:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	3338      	adds	r3, #56	; 0x38
 8002006:	443b      	add	r3, r7
 8002008:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 800200c:	ee07 3a90 	vmov	s15, r3
 8002010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002014:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002018:	ee78 7a67 	vsub.f32	s15, s16, s15
				temp->Holes_X[ind] = temp->Edge1_X
 800201c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002024:	ee17 3a90 	vmov	r3, s15
 8002028:	b299      	uxth	r1, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3204      	adds	r2, #4
 800202e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				temp->Holes_Y[ind] = temp->Edge1_Y
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	885b      	ldrh	r3, [r3, #2]
 8002036:	ee07 3a90 	vmov	s15, r3
								+ arm_cos_f32(theta)*RefY_case2[j]
 800203a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800203e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002042:	eeb0 0a67 	vmov.f32	s0, s15
 8002046:	f001 f8b3 	bl	80031b0 <arm_cos_f32>
 800204a:	eeb0 7a40 	vmov.f32	s14, s0
 800204e:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	3338      	adds	r3, #56	; 0x38
 8002056:	443b      	add	r3, r7
 8002058:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 800205c:	ee07 3a90 	vmov	s15, r3
 8002060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002068:	ee38 8a27 	vadd.f32	s16, s16, s15
								+ arm_sin_f32(theta)*RefX_case2[i];
 800206c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002070:	eeb0 0a67 	vmov.f32	s0, s15
 8002074:	f001 f922 	bl	80032bc <arm_sin_f32>
 8002078:	eeb0 7a40 	vmov.f32	s14, s0
 800207c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	3338      	adds	r3, #56	; 0x38
 8002084:	443b      	add	r3, r7
 8002086:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800208a:	ee07 3a90 	vmov	s15, r3
 800208e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002096:	ee78 7a27 	vadd.f32	s15, s16, s15
				temp->Holes_Y[ind] = temp->Edge1_Y
 800209a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800209e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020a2:	ee17 2a90 	vmov	r2, s15
 80020a6:	b291      	uxth	r1, r2
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	330c      	adds	r3, #12
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	4413      	add	r3, r2
 80020b0:	460a      	mov	r2, r1
 80020b2:	805a      	strh	r2, [r3, #2]
				ind += 1;
 80020b4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80020b8:	3301      	adds	r3, #1
 80020ba:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			for(j=0;j<3;j++)
 80020be:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	3301      	adds	r3, #1
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80020cc:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	f77f af6f 	ble.w	8001fb4 <TrayLocalization+0x304>
		for(i=0;i<3;i++)
 80020d6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	3301      	adds	r3, #1
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80020e4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	f77f af4c 	ble.w	8001f86 <TrayLocalization+0x2d6>
			}
		}
		break;
 80020ee:	e000      	b.n	80020f2 <TrayLocalization+0x442>
	case 0:
		break;
 80020f0:	bf00      	nop
	}
}
 80020f2:	bf00      	nop
 80020f4:	3738      	adds	r7, #56	; 0x38
 80020f6:	46bd      	mov	sp, r7
 80020f8:	ecbd 8b02 	vpop	{d8}
 80020fc:	bdb0      	pop	{r4, r5, r7, pc}
 80020fe:	bf00      	nop

08002100 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08a      	sub	sp, #40	; 0x28
 8002104:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002106:	f107 0314 	add.w	r3, r7, #20
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	60da      	str	r2, [r3, #12]
 8002114:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	4b41      	ldr	r3, [pc, #260]	; (8002220 <MX_GPIO_Init+0x120>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	4a40      	ldr	r2, [pc, #256]	; (8002220 <MX_GPIO_Init+0x120>)
 8002120:	f043 0304 	orr.w	r3, r3, #4
 8002124:	6313      	str	r3, [r2, #48]	; 0x30
 8002126:	4b3e      	ldr	r3, [pc, #248]	; (8002220 <MX_GPIO_Init+0x120>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	f003 0304 	and.w	r3, r3, #4
 800212e:	613b      	str	r3, [r7, #16]
 8002130:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	4b3a      	ldr	r3, [pc, #232]	; (8002220 <MX_GPIO_Init+0x120>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	4a39      	ldr	r2, [pc, #228]	; (8002220 <MX_GPIO_Init+0x120>)
 800213c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002140:	6313      	str	r3, [r2, #48]	; 0x30
 8002142:	4b37      	ldr	r3, [pc, #220]	; (8002220 <MX_GPIO_Init+0x120>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	4b33      	ldr	r3, [pc, #204]	; (8002220 <MX_GPIO_Init+0x120>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	4a32      	ldr	r2, [pc, #200]	; (8002220 <MX_GPIO_Init+0x120>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6313      	str	r3, [r2, #48]	; 0x30
 800215e:	4b30      	ldr	r3, [pc, #192]	; (8002220 <MX_GPIO_Init+0x120>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	60bb      	str	r3, [r7, #8]
 8002168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	607b      	str	r3, [r7, #4]
 800216e:	4b2c      	ldr	r3, [pc, #176]	; (8002220 <MX_GPIO_Init+0x120>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	4a2b      	ldr	r2, [pc, #172]	; (8002220 <MX_GPIO_Init+0x120>)
 8002174:	f043 0302 	orr.w	r3, r3, #2
 8002178:	6313      	str	r3, [r2, #48]	; 0x30
 800217a:	4b29      	ldr	r3, [pc, #164]	; (8002220 <MX_GPIO_Init+0x120>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	607b      	str	r3, [r7, #4]
 8002184:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002186:	2200      	movs	r2, #0
 8002188:	2120      	movs	r1, #32
 800218a:	4826      	ldr	r0, [pc, #152]	; (8002224 <MX_GPIO_Init+0x124>)
 800218c:	f002 f916 	bl	80043bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8002190:	2200      	movs	r2, #0
 8002192:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002196:	4824      	ldr	r0, [pc, #144]	; (8002228 <MX_GPIO_Init+0x128>)
 8002198:	f002 f910 	bl	80043bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800219c:	2200      	movs	r2, #0
 800219e:	2140      	movs	r1, #64	; 0x40
 80021a0:	4822      	ldr	r0, [pc, #136]	; (800222c <MX_GPIO_Init+0x12c>)
 80021a2:	f002 f90b 	bl	80043bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80021a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021ac:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80021b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80021b6:	f107 0314 	add.w	r3, r7, #20
 80021ba:	4619      	mov	r1, r3
 80021bc:	481b      	ldr	r0, [pc, #108]	; (800222c <MX_GPIO_Init+0x12c>)
 80021be:	f001 ff79 	bl	80040b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80021c2:	2320      	movs	r3, #32
 80021c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c6:	2301      	movs	r3, #1
 80021c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ce:	2300      	movs	r3, #0
 80021d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80021d2:	f107 0314 	add.w	r3, r7, #20
 80021d6:	4619      	mov	r1, r3
 80021d8:	4812      	ldr	r0, [pc, #72]	; (8002224 <MX_GPIO_Init+0x124>)
 80021da:	f001 ff6b 	bl	80040b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e4:	2301      	movs	r3, #1
 80021e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ec:	2300      	movs	r3, #0
 80021ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f0:	f107 0314 	add.w	r3, r7, #20
 80021f4:	4619      	mov	r1, r3
 80021f6:	480c      	ldr	r0, [pc, #48]	; (8002228 <MX_GPIO_Init+0x128>)
 80021f8:	f001 ff5c 	bl	80040b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021fc:	2340      	movs	r3, #64	; 0x40
 80021fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002200:	2301      	movs	r3, #1
 8002202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2300      	movs	r3, #0
 800220a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800220c:	f107 0314 	add.w	r3, r7, #20
 8002210:	4619      	mov	r1, r3
 8002212:	4806      	ldr	r0, [pc, #24]	; (800222c <MX_GPIO_Init+0x12c>)
 8002214:	f001 ff4e 	bl	80040b4 <HAL_GPIO_Init>

}
 8002218:	bf00      	nop
 800221a:	3728      	adds	r7, #40	; 0x28
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40023800 	.word	0x40023800
 8002224:	40020000 	.word	0x40020000
 8002228:	40020400 	.word	0x40020400
 800222c:	40020800 	.word	0x40020800

08002230 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002234:	4b12      	ldr	r3, [pc, #72]	; (8002280 <MX_I2C1_Init+0x50>)
 8002236:	4a13      	ldr	r2, [pc, #76]	; (8002284 <MX_I2C1_Init+0x54>)
 8002238:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800223a:	4b11      	ldr	r3, [pc, #68]	; (8002280 <MX_I2C1_Init+0x50>)
 800223c:	4a12      	ldr	r2, [pc, #72]	; (8002288 <MX_I2C1_Init+0x58>)
 800223e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002240:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <MX_I2C1_Init+0x50>)
 8002242:	2200      	movs	r2, #0
 8002244:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002246:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <MX_I2C1_Init+0x50>)
 8002248:	2200      	movs	r2, #0
 800224a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <MX_I2C1_Init+0x50>)
 800224e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002252:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002254:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <MX_I2C1_Init+0x50>)
 8002256:	2200      	movs	r2, #0
 8002258:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800225a:	4b09      	ldr	r3, [pc, #36]	; (8002280 <MX_I2C1_Init+0x50>)
 800225c:	2200      	movs	r2, #0
 800225e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002260:	4b07      	ldr	r3, [pc, #28]	; (8002280 <MX_I2C1_Init+0x50>)
 8002262:	2200      	movs	r2, #0
 8002264:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002266:	4b06      	ldr	r3, [pc, #24]	; (8002280 <MX_I2C1_Init+0x50>)
 8002268:	2200      	movs	r2, #0
 800226a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800226c:	4804      	ldr	r0, [pc, #16]	; (8002280 <MX_I2C1_Init+0x50>)
 800226e:	f002 f8bf 	bl	80043f0 <HAL_I2C_Init>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002278:	f000 fa06 	bl	8002688 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800227c:	bf00      	nop
 800227e:	bd80      	pop	{r7, pc}
 8002280:	2000009c 	.word	0x2000009c
 8002284:	40005400 	.word	0x40005400
 8002288:	00061a80 	.word	0x00061a80

0800228c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08a      	sub	sp, #40	; 0x28
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a19      	ldr	r2, [pc, #100]	; (8002310 <HAL_I2C_MspInit+0x84>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d12b      	bne.n	8002306 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	4b18      	ldr	r3, [pc, #96]	; (8002314 <HAL_I2C_MspInit+0x88>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	4a17      	ldr	r2, [pc, #92]	; (8002314 <HAL_I2C_MspInit+0x88>)
 80022b8:	f043 0302 	orr.w	r3, r3, #2
 80022bc:	6313      	str	r3, [r2, #48]	; 0x30
 80022be:	4b15      	ldr	r3, [pc, #84]	; (8002314 <HAL_I2C_MspInit+0x88>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022ca:	23c0      	movs	r3, #192	; 0xc0
 80022cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ce:	2312      	movs	r3, #18
 80022d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d6:	2303      	movs	r3, #3
 80022d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022da:	2304      	movs	r3, #4
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022de:	f107 0314 	add.w	r3, r7, #20
 80022e2:	4619      	mov	r1, r3
 80022e4:	480c      	ldr	r0, [pc, #48]	; (8002318 <HAL_I2C_MspInit+0x8c>)
 80022e6:	f001 fee5 	bl	80040b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	4b09      	ldr	r3, [pc, #36]	; (8002314 <HAL_I2C_MspInit+0x88>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	4a08      	ldr	r2, [pc, #32]	; (8002314 <HAL_I2C_MspInit+0x88>)
 80022f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022f8:	6413      	str	r3, [r2, #64]	; 0x40
 80022fa:	4b06      	ldr	r3, [pc, #24]	; (8002314 <HAL_I2C_MspInit+0x88>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002306:	bf00      	nop
 8002308:	3728      	adds	r7, #40	; 0x28
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40005400 	.word	0x40005400
 8002314:	40023800 	.word	0x40023800
 8002318:	40020400 	.word	0x40020400

0800231c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002322:	f001 fd43 	bl	8003dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002326:	f000 f891 	bl	800244c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800232a:	f7ff fee9 	bl	8002100 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800232e:	f000 fc7d 	bl	8002c2c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8002332:	f000 fa31 	bl	8002798 <MX_TIM2_Init>
  MX_TIM5_Init();
 8002336:	f000 fb47 	bl	80029c8 <MX_TIM5_Init>
  MX_TIM3_Init();
 800233a:	f000 fa81 	bl	8002840 <MX_TIM3_Init>
  MX_I2C1_Init();
 800233e:	f7ff ff77 	bl	8002230 <MX_I2C1_Init>
  MX_TIM4_Init();
 8002342:	f000 faf3 	bl	800292c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  //Setup Initial vaules
  InitKalmanStruct(&KF,Var_Q,Var_R);
 8002346:	4b2f      	ldr	r3, [pc, #188]	; (8002404 <main+0xe8>)
 8002348:	edd3 7a00 	vldr	s15, [r3]
 800234c:	4b2e      	ldr	r3, [pc, #184]	; (8002408 <main+0xec>)
 800234e:	ed93 7a00 	vldr	s14, [r3]
 8002352:	eef0 0a47 	vmov.f32	s1, s14
 8002356:	eeb0 0a67 	vmov.f32	s0, s15
 800235a:	482c      	ldr	r0, [pc, #176]	; (800240c <main+0xf0>)
 800235c:	f7fe fe88 	bl	8001070 <InitKalmanStruct>
  InitReadEncoder(&ReadEncoderParam, 1000);
 8002360:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002364:	482a      	ldr	r0, [pc, #168]	; (8002410 <main+0xf4>)
 8002366:	f7ff fc6e 	bl	8001c46 <InitReadEncoder>
  QuinticSetup(&QuinticVar, vmax, amax);
 800236a:	4b2a      	ldr	r3, [pc, #168]	; (8002414 <main+0xf8>)
 800236c:	edd3 7a00 	vldr	s15, [r3]
 8002370:	4b29      	ldr	r3, [pc, #164]	; (8002418 <main+0xfc>)
 8002372:	ed93 7a00 	vldr	s14, [r3]
 8002376:	eef0 0a47 	vmov.f32	s1, s14
 800237a:	eeb0 0a67 	vmov.f32	s0, s15
 800237e:	4827      	ldr	r0, [pc, #156]	; (800241c <main+0x100>)
 8002380:	f7ff f8f7 	bl	8001572 <QuinticSetup>
  PIDSetup(&PositionLoop, 2.36, 0, 0);
 8002384:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8002420 <main+0x104>
 8002388:	eddf 0a25 	vldr	s1, [pc, #148]	; 8002420 <main+0x104>
 800238c:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8002424 <main+0x108>
 8002390:	4825      	ldr	r0, [pc, #148]	; (8002428 <main+0x10c>)
 8002392:	f7ff f863 	bl	800145c <PIDSetup>
  PIDSetup(&VelocityLoop, 2.8, 0, 0);
 8002396:	ed9f 1a22 	vldr	s2, [pc, #136]	; 8002420 <main+0x104>
 800239a:	eddf 0a21 	vldr	s1, [pc, #132]	; 8002420 <main+0x104>
 800239e:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800242c <main+0x110>
 80023a2:	4823      	ldr	r0, [pc, #140]	; (8002430 <main+0x114>)
 80023a4:	f7ff f85a 	bl	800145c <PIDSetup>
  TraySetup(&PickTray, 4644, 37399, 8774, 37358);
 80023a8:	f249 13ee 	movw	r3, #37358	; 0x91ee
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	f242 2346 	movw	r3, #8774	; 0x2246
 80023b2:	f249 2217 	movw	r2, #37399	; 0x9217
 80023b6:	f241 2124 	movw	r1, #4644	; 0x1224
 80023ba:	481e      	ldr	r0, [pc, #120]	; (8002434 <main+0x118>)
 80023bc:	f7ff fc57 	bl	8001c6e <TraySetup>
  TraySetup(&PlaceTray, 15052, 19020, 17984, 17326);
 80023c0:	f244 33ae 	movw	r3, #17326	; 0x43ae
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	f244 6340 	movw	r3, #17984	; 0x4640
 80023ca:	f644 224c 	movw	r2, #19020	; 0x4a4c
 80023ce:	f643 21cc 	movw	r1, #15052	; 0x3acc
 80023d2:	4819      	ldr	r0, [pc, #100]	; (8002438 <main+0x11c>)
 80023d4:	f7ff fc4b 	bl	8001c6e <TraySetup>
  TrayLocalization(&PickTray);
 80023d8:	4816      	ldr	r0, [pc, #88]	; (8002434 <main+0x118>)
 80023da:	f7ff fc69 	bl	8001cb0 <TrayLocalization>
  TrayLocalization(&PlaceTray);
 80023de:	4816      	ldr	r0, [pc, #88]	; (8002438 <main+0x11c>)
 80023e0:	f7ff fc66 	bl	8001cb0 <TrayLocalization>
  //Timers Start
  HAL_TIM_Base_Start_IT(&htim4);
 80023e4:	4815      	ldr	r0, [pc, #84]	; (800243c <main+0x120>)
 80023e6:	f002 fe2f 	bl	8005048 <HAL_TIM_Base_Start_IT>

  //Start QEI
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2);
 80023ea:	2104      	movs	r1, #4
 80023ec:	4814      	ldr	r0, [pc, #80]	; (8002440 <main+0x124>)
 80023ee:	f003 f83d 	bl	800546c <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);//Start PWM
 80023f2:	2108      	movs	r1, #8
 80023f4:	4813      	ldr	r0, [pc, #76]	; (8002444 <main+0x128>)
 80023f6:	f002 fee3 	bl	80051c0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 80023fa:	4813      	ldr	r0, [pc, #76]	; (8002448 <main+0x12c>)
 80023fc:	f002 fe24 	bl	8005048 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002400:	e7fe      	b.n	8002400 <main+0xe4>
 8002402:	bf00      	nop
 8002404:	20000008 	.word	0x20000008
 8002408:	2000000c 	.word	0x2000000c
 800240c:	200001a8 	.word	0x200001a8
 8002410:	200000f0 	.word	0x200000f0
 8002414:	20000000 	.word	0x20000000
 8002418:	20000004 	.word	0x20000004
 800241c:	20000110 	.word	0x20000110
 8002420:	00000000 	.word	0x00000000
 8002424:	40170a3d 	.word	0x40170a3d
 8002428:	20000160 	.word	0x20000160
 800242c:	40333333 	.word	0x40333333
 8002430:	20000184 	.word	0x20000184
 8002434:	200003c4 	.word	0x200003c4
 8002438:	2000045c 	.word	0x2000045c
 800243c:	20000584 	.word	0x20000584
 8002440:	200004f4 	.word	0x200004f4
 8002444:	2000053c 	.word	0x2000053c
 8002448:	200005cc 	.word	0x200005cc

0800244c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b094      	sub	sp, #80	; 0x50
 8002450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002452:	f107 0320 	add.w	r3, r7, #32
 8002456:	2230      	movs	r2, #48	; 0x30
 8002458:	2100      	movs	r1, #0
 800245a:	4618      	mov	r0, r3
 800245c:	f004 f988 	bl	8006770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002460:	f107 030c 	add.w	r3, r7, #12
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002470:	2300      	movs	r3, #0
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	4b27      	ldr	r3, [pc, #156]	; (8002514 <SystemClock_Config+0xc8>)
 8002476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002478:	4a26      	ldr	r2, [pc, #152]	; (8002514 <SystemClock_Config+0xc8>)
 800247a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800247e:	6413      	str	r3, [r2, #64]	; 0x40
 8002480:	4b24      	ldr	r3, [pc, #144]	; (8002514 <SystemClock_Config+0xc8>)
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800248c:	2300      	movs	r3, #0
 800248e:	607b      	str	r3, [r7, #4]
 8002490:	4b21      	ldr	r3, [pc, #132]	; (8002518 <SystemClock_Config+0xcc>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a20      	ldr	r2, [pc, #128]	; (8002518 <SystemClock_Config+0xcc>)
 8002496:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	4b1e      	ldr	r3, [pc, #120]	; (8002518 <SystemClock_Config+0xcc>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024a4:	607b      	str	r3, [r7, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024a8:	2302      	movs	r3, #2
 80024aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024ac:	2301      	movs	r3, #1
 80024ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024b0:	2310      	movs	r3, #16
 80024b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024b4:	2302      	movs	r3, #2
 80024b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024b8:	2300      	movs	r3, #0
 80024ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80024bc:	2308      	movs	r3, #8
 80024be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80024c0:	2364      	movs	r3, #100	; 0x64
 80024c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024c4:	2302      	movs	r3, #2
 80024c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80024c8:	2304      	movs	r3, #4
 80024ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024cc:	f107 0320 	add.w	r3, r7, #32
 80024d0:	4618      	mov	r0, r3
 80024d2:	f002 f8d1 	bl	8004678 <HAL_RCC_OscConfig>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80024dc:	f000 f8d4 	bl	8002688 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024e0:	230f      	movs	r3, #15
 80024e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024e4:	2302      	movs	r3, #2
 80024e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80024f6:	f107 030c 	add.w	r3, r7, #12
 80024fa:	2103      	movs	r1, #3
 80024fc:	4618      	mov	r0, r3
 80024fe:	f002 fb33 	bl	8004b68 <HAL_RCC_ClockConfig>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002508:	f000 f8be 	bl	8002688 <Error_Handler>
  }
}
 800250c:	bf00      	nop
 800250e:	3750      	adds	r7, #80	; 0x50
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40023800 	.word	0x40023800
 8002518:	40007000 	.word	0x40007000

0800251c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800251c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002520:	b085      	sub	sp, #20
 8002522:	af00      	add	r7, sp, #0
 8002524:	60f8      	str	r0, [r7, #12]
	if(htim == &htim4)
 8002526:	68f9      	ldr	r1, [r7, #12]
 8002528:	484d      	ldr	r0, [pc, #308]	; (8002660 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800252a:	4281      	cmp	r1, r0
 800252c:	f040 8093 	bne.w	8002656 <HAL_TIM_PeriodElapsedCallback+0x13a>
//		}
//		else
//		{
//			ReadEncoderParam.MotorSetDuty = 0;
//		}
		QEIData.QEIPosition = __HAL_TIM_GET_COUNTER(&htim2);
 8002530:	494c      	ldr	r1, [pc, #304]	; (8002664 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002532:	6809      	ldr	r1, [r1, #0]
 8002534:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8002536:	2000      	movs	r0, #0
 8002538:	468a      	mov	sl, r1
 800253a:	4683      	mov	fp, r0
 800253c:	494a      	ldr	r1, [pc, #296]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800253e:	e9c1 ab02 	strd	sl, fp, [r1, #8]
		QEIData.QEIVelocity = (QEIData.QEIPosition - QEIData.QEIPosition_minus)*2500;
 8002542:	4949      	ldr	r1, [pc, #292]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002544:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8002548:	4682      	mov	sl, r0
 800254a:	468b      	mov	fp, r1
 800254c:	4946      	ldr	r1, [pc, #280]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800254e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002552:	4656      	mov	r6, sl
 8002554:	1a32      	subs	r2, r6, r0
 8002556:	465e      	mov	r6, fp
 8002558:	eb66 0301 	sbc.w	r3, r6, r1
 800255c:	4610      	mov	r0, r2
 800255e:	4619      	mov	r1, r3
 8002560:	f04f 0a00 	mov.w	sl, #0
 8002564:	f04f 0b00 	mov.w	fp, #0
 8002568:	008e      	lsls	r6, r1, #2
 800256a:	46b3      	mov	fp, r6
 800256c:	465e      	mov	r6, fp
 800256e:	ea46 7690 	orr.w	r6, r6, r0, lsr #30
 8002572:	46b3      	mov	fp, r6
 8002574:	0081      	lsls	r1, r0, #2
 8002576:	468a      	mov	sl, r1
 8002578:	4650      	mov	r0, sl
 800257a:	4659      	mov	r1, fp
 800257c:	eb10 0802 	adds.w	r8, r0, r2
 8002580:	eb41 0903 	adc.w	r9, r1, r3
 8002584:	f04f 0000 	mov.w	r0, #0
 8002588:	f04f 0100 	mov.w	r1, #0
 800258c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002590:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
 8002594:	ea4f 00c8 	mov.w	r0, r8, lsl #3
 8002598:	4680      	mov	r8, r0
 800259a:	4689      	mov	r9, r1
 800259c:	ebb8 0402 	subs.w	r4, r8, r2
 80025a0:	eb69 0503 	sbc.w	r5, r9, r3
 80025a4:	f04f 0000 	mov.w	r0, #0
 80025a8:	f04f 0100 	mov.w	r1, #0
 80025ac:	0129      	lsls	r1, r5, #4
 80025ae:	ea41 7114 	orr.w	r1, r1, r4, lsr #28
 80025b2:	0120      	lsls	r0, r4, #4
 80025b4:	4604      	mov	r4, r0
 80025b6:	460d      	mov	r5, r1
 80025b8:	18a1      	adds	r1, r4, r2
 80025ba:	6039      	str	r1, [r7, #0]
 80025bc:	eb45 0303 	adc.w	r3, r5, r3
 80025c0:	607b      	str	r3, [r7, #4]
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025ce:	4629      	mov	r1, r5
 80025d0:	008b      	lsls	r3, r1, #2
 80025d2:	4621      	mov	r1, r4
 80025d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025d8:	4621      	mov	r1, r4
 80025da:	008a      	lsls	r2, r1, #2
 80025dc:	4922      	ldr	r1, [pc, #136]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80025de:	e9c1 2304 	strd	r2, r3, [r1, #16]
		KF.z = QEIData.QEIVelocity;
 80025e2:	4b21      	ldr	r3, [pc, #132]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80025e4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80025e8:	4610      	mov	r0, r2
 80025ea:	4619      	mov	r1, r3
 80025ec:	f7fe fb80 	bl	8000cf0 <__aeabi_l2f>
 80025f0:	4603      	mov	r3, r0
 80025f2:	4a1e      	ldr	r2, [pc, #120]	; (800266c <HAL_TIM_PeriodElapsedCallback+0x150>)
 80025f4:	65d3      	str	r3, [r2, #92]	; 0x5c
		kalman_filter();
 80025f6:	f7fe fe95 	bl	8001324 <kalman_filter>
		ZEstimateVelocity = KF.x_hat[1];
 80025fa:	4b1c      	ldr	r3, [pc, #112]	; (800266c <HAL_TIM_PeriodElapsedCallback+0x150>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	4a1c      	ldr	r2, [pc, #112]	; (8002670 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002600:	6013      	str	r3, [r2, #0]

		QuinticRun(&QuinticVar,0.0004);
 8002602:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8002674 <HAL_TIM_PeriodElapsedCallback+0x158>
 8002606:	481c      	ldr	r0, [pc, #112]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002608:	f7ff facc 	bl	8001ba4 <QuinticRun>
		PIDRun(&VelocityLoop, KF.x_hat[1], QuinticVar.current_velo);
 800260c:	4b17      	ldr	r3, [pc, #92]	; (800266c <HAL_TIM_PeriodElapsedCallback+0x150>)
 800260e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002612:	4b19      	ldr	r3, [pc, #100]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002614:	ed93 7a04 	vldr	s14, [r3, #16]
 8002618:	eef0 0a47 	vmov.f32	s1, s14
 800261c:	eeb0 0a67 	vmov.f32	s0, s15
 8002620:	4816      	ldr	r0, [pc, #88]	; (800267c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002622:	f7fe ff49 	bl	80014b8 <PIDRun>
		QEIData.QEIPosition_minus = QEIData.QEIPosition;
 8002626:	4b10      	ldr	r3, [pc, #64]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002628:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800262c:	490e      	ldr	r1, [pc, #56]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800262e:	e9c1 2300 	strd	r2, r3, [r1]
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,abs(VelocityLoop.U));
 8002632:	4b12      	ldr	r3, [pc, #72]	; (800267c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800263a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800263e:	4b10      	ldr	r3, [pc, #64]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, QuinticVar.Dir);
 8002644:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002646:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800264a:	b2db      	uxtb	r3, r3
 800264c:	461a      	mov	r2, r3
 800264e:	2140      	movs	r1, #64	; 0x40
 8002650:	480c      	ldr	r0, [pc, #48]	; (8002684 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002652:	f001 feb3 	bl	80043bc <HAL_GPIO_WritePin>
//		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,ReadEncoderParam.MotorSetDuty*500);
//		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, ReadEncoderParam.DIR);
	}
}
 8002656:	bf00      	nop
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002660:	20000584 	.word	0x20000584
 8002664:	200004f4 	.word	0x200004f4
 8002668:	200000f8 	.word	0x200000f8
 800266c:	200001a8 	.word	0x200001a8
 8002670:	200003c0 	.word	0x200003c0
 8002674:	39d1b717 	.word	0x39d1b717
 8002678:	20000110 	.word	0x20000110
 800267c:	20000184 	.word	0x20000184
 8002680:	2000053c 	.word	0x2000053c
 8002684:	40020800 	.word	0x40020800

08002688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800268c:	b672      	cpsid	i
}
 800268e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002690:	e7fe      	b.n	8002690 <Error_Handler+0x8>
	...

08002694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	607b      	str	r3, [r7, #4]
 800269e:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <HAL_MspInit+0x4c>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	4a0f      	ldr	r2, [pc, #60]	; (80026e0 <HAL_MspInit+0x4c>)
 80026a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026a8:	6453      	str	r3, [r2, #68]	; 0x44
 80026aa:	4b0d      	ldr	r3, [pc, #52]	; (80026e0 <HAL_MspInit+0x4c>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b2:	607b      	str	r3, [r7, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	603b      	str	r3, [r7, #0]
 80026ba:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <HAL_MspInit+0x4c>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	4a08      	ldr	r2, [pc, #32]	; (80026e0 <HAL_MspInit+0x4c>)
 80026c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c4:	6413      	str	r3, [r2, #64]	; 0x40
 80026c6:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <HAL_MspInit+0x4c>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80026d2:	2007      	movs	r0, #7
 80026d4:	f001 fcac 	bl	8004030 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40023800 	.word	0x40023800

080026e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026e8:	e7fe      	b.n	80026e8 <NMI_Handler+0x4>

080026ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ea:	b480      	push	{r7}
 80026ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026ee:	e7fe      	b.n	80026ee <HardFault_Handler+0x4>

080026f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026f4:	e7fe      	b.n	80026f4 <MemManage_Handler+0x4>

080026f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026f6:	b480      	push	{r7}
 80026f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026fa:	e7fe      	b.n	80026fa <BusFault_Handler+0x4>

080026fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002700:	e7fe      	b.n	8002700 <UsageFault_Handler+0x4>

08002702 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002702:	b480      	push	{r7}
 8002704:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002706:	bf00      	nop
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002714:	bf00      	nop
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800271e:	b480      	push	{r7}
 8002720:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002722:	bf00      	nop
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002730:	f001 fb8e 	bl	8003e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002734:	bf00      	nop
 8002736:	bd80      	pop	{r7, pc}

08002738 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800273c:	4802      	ldr	r0, [pc, #8]	; (8002748 <TIM2_IRQHandler+0x10>)
 800273e:	f002 ff23 	bl	8005588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	200004f4 	.word	0x200004f4

0800274c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002750:	4802      	ldr	r0, [pc, #8]	; (800275c <TIM3_IRQHandler+0x10>)
 8002752:	f002 ff19 	bl	8005588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	2000053c 	.word	0x2000053c

08002760 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002764:	4802      	ldr	r0, [pc, #8]	; (8002770 <TIM4_IRQHandler+0x10>)
 8002766:	f002 ff0f 	bl	8005588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000584 	.word	0x20000584

08002774 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <SystemInit+0x20>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277e:	4a05      	ldr	r2, [pc, #20]	; (8002794 <SystemInit+0x20>)
 8002780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08c      	sub	sp, #48	; 0x30
 800279c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800279e:	f107 030c 	add.w	r3, r7, #12
 80027a2:	2224      	movs	r2, #36	; 0x24
 80027a4:	2100      	movs	r1, #0
 80027a6:	4618      	mov	r0, r3
 80027a8:	f003 ffe2 	bl	8006770 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ac:	1d3b      	adds	r3, r7, #4
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027b4:	4b21      	ldr	r3, [pc, #132]	; (800283c <MX_TIM2_Init+0xa4>)
 80027b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80027bc:	4b1f      	ldr	r3, [pc, #124]	; (800283c <MX_TIM2_Init+0xa4>)
 80027be:	2200      	movs	r2, #0
 80027c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c2:	4b1e      	ldr	r3, [pc, #120]	; (800283c <MX_TIM2_Init+0xa4>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80027c8:	4b1c      	ldr	r3, [pc, #112]	; (800283c <MX_TIM2_Init+0xa4>)
 80027ca:	f04f 32ff 	mov.w	r2, #4294967295
 80027ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027d0:	4b1a      	ldr	r3, [pc, #104]	; (800283c <MX_TIM2_Init+0xa4>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027d6:	4b19      	ldr	r3, [pc, #100]	; (800283c <MX_TIM2_Init+0xa4>)
 80027d8:	2200      	movs	r2, #0
 80027da:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80027dc:	2303      	movs	r3, #3
 80027de:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80027e0:	2300      	movs	r3, #0
 80027e2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80027e4:	2301      	movs	r3, #1
 80027e6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80027e8:	2300      	movs	r3, #0
 80027ea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80027f0:	2300      	movs	r3, #0
 80027f2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80027f4:	2301      	movs	r3, #1
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80027f8:	2300      	movs	r3, #0
 80027fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80027fc:	2300      	movs	r3, #0
 80027fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002800:	f107 030c 	add.w	r3, r7, #12
 8002804:	4619      	mov	r1, r3
 8002806:	480d      	ldr	r0, [pc, #52]	; (800283c <MX_TIM2_Init+0xa4>)
 8002808:	f002 fd8a 	bl	8005320 <HAL_TIM_Encoder_Init>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002812:	f7ff ff39 	bl	8002688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002816:	2300      	movs	r3, #0
 8002818:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800281a:	2300      	movs	r3, #0
 800281c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800281e:	1d3b      	adds	r3, r7, #4
 8002820:	4619      	mov	r1, r3
 8002822:	4806      	ldr	r0, [pc, #24]	; (800283c <MX_TIM2_Init+0xa4>)
 8002824:	f003 fc36 	bl	8006094 <HAL_TIMEx_MasterConfigSynchronization>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800282e:	f7ff ff2b 	bl	8002688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002832:	bf00      	nop
 8002834:	3730      	adds	r7, #48	; 0x30
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	200004f4 	.word	0x200004f4

08002840 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08e      	sub	sp, #56	; 0x38
 8002844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002846:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	605a      	str	r2, [r3, #4]
 8002850:	609a      	str	r2, [r3, #8]
 8002852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002854:	f107 0320 	add.w	r3, r7, #32
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800285e:	1d3b      	adds	r3, r7, #4
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	605a      	str	r2, [r3, #4]
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	60da      	str	r2, [r3, #12]
 800286a:	611a      	str	r2, [r3, #16]
 800286c:	615a      	str	r2, [r3, #20]
 800286e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002870:	4b2c      	ldr	r3, [pc, #176]	; (8002924 <MX_TIM3_Init+0xe4>)
 8002872:	4a2d      	ldr	r2, [pc, #180]	; (8002928 <MX_TIM3_Init+0xe8>)
 8002874:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002876:	4b2b      	ldr	r3, [pc, #172]	; (8002924 <MX_TIM3_Init+0xe4>)
 8002878:	2200      	movs	r2, #0
 800287a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800287c:	4b29      	ldr	r3, [pc, #164]	; (8002924 <MX_TIM3_Init+0xe4>)
 800287e:	2200      	movs	r2, #0
 8002880:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8002882:	4b28      	ldr	r3, [pc, #160]	; (8002924 <MX_TIM3_Init+0xe4>)
 8002884:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002888:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800288a:	4b26      	ldr	r3, [pc, #152]	; (8002924 <MX_TIM3_Init+0xe4>)
 800288c:	2200      	movs	r2, #0
 800288e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002890:	4b24      	ldr	r3, [pc, #144]	; (8002924 <MX_TIM3_Init+0xe4>)
 8002892:	2200      	movs	r2, #0
 8002894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002896:	4823      	ldr	r0, [pc, #140]	; (8002924 <MX_TIM3_Init+0xe4>)
 8002898:	f002 fb86 	bl	8004fa8 <HAL_TIM_Base_Init>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80028a2:	f7ff fef1 	bl	8002688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80028ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028b0:	4619      	mov	r1, r3
 80028b2:	481c      	ldr	r0, [pc, #112]	; (8002924 <MX_TIM3_Init+0xe4>)
 80028b4:	f003 f832 	bl	800591c <HAL_TIM_ConfigClockSource>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80028be:	f7ff fee3 	bl	8002688 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80028c2:	4818      	ldr	r0, [pc, #96]	; (8002924 <MX_TIM3_Init+0xe4>)
 80028c4:	f002 fc22 	bl	800510c <HAL_TIM_PWM_Init>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80028ce:	f7ff fedb 	bl	8002688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028d2:	2300      	movs	r3, #0
 80028d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028d6:	2300      	movs	r3, #0
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028da:	f107 0320 	add.w	r3, r7, #32
 80028de:	4619      	mov	r1, r3
 80028e0:	4810      	ldr	r0, [pc, #64]	; (8002924 <MX_TIM3_Init+0xe4>)
 80028e2:	f003 fbd7 	bl	8006094 <HAL_TIMEx_MasterConfigSynchronization>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80028ec:	f7ff fecc 	bl	8002688 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028f0:	2360      	movs	r3, #96	; 0x60
 80028f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028f8:	2300      	movs	r3, #0
 80028fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002900:	1d3b      	adds	r3, r7, #4
 8002902:	2208      	movs	r2, #8
 8002904:	4619      	mov	r1, r3
 8002906:	4807      	ldr	r0, [pc, #28]	; (8002924 <MX_TIM3_Init+0xe4>)
 8002908:	f002 ff46 	bl	8005798 <HAL_TIM_PWM_ConfigChannel>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002912:	f7ff feb9 	bl	8002688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002916:	4803      	ldr	r0, [pc, #12]	; (8002924 <MX_TIM3_Init+0xe4>)
 8002918:	f000 f94e 	bl	8002bb8 <HAL_TIM_MspPostInit>

}
 800291c:	bf00      	nop
 800291e:	3738      	adds	r7, #56	; 0x38
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	2000053c 	.word	0x2000053c
 8002928:	40000400 	.word	0x40000400

0800292c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002932:	f107 0308 	add.w	r3, r7, #8
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	605a      	str	r2, [r3, #4]
 800293c:	609a      	str	r2, [r3, #8]
 800293e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002940:	463b      	mov	r3, r7
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002948:	4b1d      	ldr	r3, [pc, #116]	; (80029c0 <MX_TIM4_Init+0x94>)
 800294a:	4a1e      	ldr	r2, [pc, #120]	; (80029c4 <MX_TIM4_Init+0x98>)
 800294c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 800294e:	4b1c      	ldr	r3, [pc, #112]	; (80029c0 <MX_TIM4_Init+0x94>)
 8002950:	2263      	movs	r2, #99	; 0x63
 8002952:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002954:	4b1a      	ldr	r3, [pc, #104]	; (80029c0 <MX_TIM4_Init+0x94>)
 8002956:	2200      	movs	r2, #0
 8002958:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 800295a:	4b19      	ldr	r3, [pc, #100]	; (80029c0 <MX_TIM4_Init+0x94>)
 800295c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002960:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002962:	4b17      	ldr	r3, [pc, #92]	; (80029c0 <MX_TIM4_Init+0x94>)
 8002964:	2200      	movs	r2, #0
 8002966:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002968:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <MX_TIM4_Init+0x94>)
 800296a:	2200      	movs	r2, #0
 800296c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800296e:	4814      	ldr	r0, [pc, #80]	; (80029c0 <MX_TIM4_Init+0x94>)
 8002970:	f002 fb1a 	bl	8004fa8 <HAL_TIM_Base_Init>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800297a:	f7ff fe85 	bl	8002688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800297e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002982:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002984:	f107 0308 	add.w	r3, r7, #8
 8002988:	4619      	mov	r1, r3
 800298a:	480d      	ldr	r0, [pc, #52]	; (80029c0 <MX_TIM4_Init+0x94>)
 800298c:	f002 ffc6 	bl	800591c <HAL_TIM_ConfigClockSource>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002996:	f7ff fe77 	bl	8002688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800299a:	2300      	movs	r3, #0
 800299c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800299e:	2300      	movs	r3, #0
 80029a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80029a2:	463b      	mov	r3, r7
 80029a4:	4619      	mov	r1, r3
 80029a6:	4806      	ldr	r0, [pc, #24]	; (80029c0 <MX_TIM4_Init+0x94>)
 80029a8:	f003 fb74 	bl	8006094 <HAL_TIMEx_MasterConfigSynchronization>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80029b2:	f7ff fe69 	bl	8002688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80029b6:	bf00      	nop
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000584 	.word	0x20000584
 80029c4:	40000800 	.word	0x40000800

080029c8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029ce:	f107 0308 	add.w	r3, r7, #8
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	605a      	str	r2, [r3, #4]
 80029d8:	609a      	str	r2, [r3, #8]
 80029da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029dc:	463b      	mov	r3, r7
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80029e4:	4b1d      	ldr	r3, [pc, #116]	; (8002a5c <MX_TIM5_Init+0x94>)
 80029e6:	4a1e      	ldr	r2, [pc, #120]	; (8002a60 <MX_TIM5_Init+0x98>)
 80029e8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 80029ea:	4b1c      	ldr	r3, [pc, #112]	; (8002a5c <MX_TIM5_Init+0x94>)
 80029ec:	2253      	movs	r2, #83	; 0x53
 80029ee:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029f0:	4b1a      	ldr	r3, [pc, #104]	; (8002a5c <MX_TIM5_Init+0x94>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80029f6:	4b19      	ldr	r3, [pc, #100]	; (8002a5c <MX_TIM5_Init+0x94>)
 80029f8:	f04f 32ff 	mov.w	r2, #4294967295
 80029fc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029fe:	4b17      	ldr	r3, [pc, #92]	; (8002a5c <MX_TIM5_Init+0x94>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a04:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <MX_TIM5_Init+0x94>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002a0a:	4814      	ldr	r0, [pc, #80]	; (8002a5c <MX_TIM5_Init+0x94>)
 8002a0c:	f002 facc 	bl	8004fa8 <HAL_TIM_Base_Init>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002a16:	f7ff fe37 	bl	8002688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002a20:	f107 0308 	add.w	r3, r7, #8
 8002a24:	4619      	mov	r1, r3
 8002a26:	480d      	ldr	r0, [pc, #52]	; (8002a5c <MX_TIM5_Init+0x94>)
 8002a28:	f002 ff78 	bl	800591c <HAL_TIM_ConfigClockSource>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002a32:	f7ff fe29 	bl	8002688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a36:	2300      	movs	r3, #0
 8002a38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002a3e:	463b      	mov	r3, r7
 8002a40:	4619      	mov	r1, r3
 8002a42:	4806      	ldr	r0, [pc, #24]	; (8002a5c <MX_TIM5_Init+0x94>)
 8002a44:	f003 fb26 	bl	8006094 <HAL_TIMEx_MasterConfigSynchronization>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002a4e:	f7ff fe1b 	bl	8002688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002a52:	bf00      	nop
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	200005cc 	.word	0x200005cc
 8002a60:	40000c00 	.word	0x40000c00

08002a64 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08a      	sub	sp, #40	; 0x28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6c:	f107 0314 	add.w	r3, r7, #20
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	60da      	str	r2, [r3, #12]
 8002a7a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a84:	d133      	bne.n	8002aee <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	4b1b      	ldr	r3, [pc, #108]	; (8002af8 <HAL_TIM_Encoder_MspInit+0x94>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	4a1a      	ldr	r2, [pc, #104]	; (8002af8 <HAL_TIM_Encoder_MspInit+0x94>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	6413      	str	r3, [r2, #64]	; 0x40
 8002a96:	4b18      	ldr	r3, [pc, #96]	; (8002af8 <HAL_TIM_Encoder_MspInit+0x94>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <HAL_TIM_Encoder_MspInit+0x94>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	4a13      	ldr	r2, [pc, #76]	; (8002af8 <HAL_TIM_Encoder_MspInit+0x94>)
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab2:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <HAL_TIM_Encoder_MspInit+0x94>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aca:	2300      	movs	r3, #0
 8002acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad2:	f107 0314 	add.w	r3, r7, #20
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4808      	ldr	r0, [pc, #32]	; (8002afc <HAL_TIM_Encoder_MspInit+0x98>)
 8002ada:	f001 faeb 	bl	80040b4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002ade:	2200      	movs	r2, #0
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	201c      	movs	r0, #28
 8002ae4:	f001 faaf 	bl	8004046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ae8:	201c      	movs	r0, #28
 8002aea:	f001 fac8 	bl	800407e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002aee:	bf00      	nop
 8002af0:	3728      	adds	r7, #40	; 0x28
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40020000 	.word	0x40020000

08002b00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a26      	ldr	r2, [pc, #152]	; (8002ba8 <HAL_TIM_Base_MspInit+0xa8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d116      	bne.n	8002b40 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	4b25      	ldr	r3, [pc, #148]	; (8002bac <HAL_TIM_Base_MspInit+0xac>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	4a24      	ldr	r2, [pc, #144]	; (8002bac <HAL_TIM_Base_MspInit+0xac>)
 8002b1c:	f043 0302 	orr.w	r3, r3, #2
 8002b20:	6413      	str	r3, [r2, #64]	; 0x40
 8002b22:	4b22      	ldr	r3, [pc, #136]	; (8002bac <HAL_TIM_Base_MspInit+0xac>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002b2e:	2200      	movs	r2, #0
 8002b30:	2100      	movs	r1, #0
 8002b32:	201d      	movs	r0, #29
 8002b34:	f001 fa87 	bl	8004046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b38:	201d      	movs	r0, #29
 8002b3a:	f001 faa0 	bl	800407e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002b3e:	e02e      	b.n	8002b9e <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM4)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a1a      	ldr	r2, [pc, #104]	; (8002bb0 <HAL_TIM_Base_MspInit+0xb0>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d116      	bne.n	8002b78 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	613b      	str	r3, [r7, #16]
 8002b4e:	4b17      	ldr	r3, [pc, #92]	; (8002bac <HAL_TIM_Base_MspInit+0xac>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	4a16      	ldr	r2, [pc, #88]	; (8002bac <HAL_TIM_Base_MspInit+0xac>)
 8002b54:	f043 0304 	orr.w	r3, r3, #4
 8002b58:	6413      	str	r3, [r2, #64]	; 0x40
 8002b5a:	4b14      	ldr	r3, [pc, #80]	; (8002bac <HAL_TIM_Base_MspInit+0xac>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002b66:	2200      	movs	r2, #0
 8002b68:	2100      	movs	r1, #0
 8002b6a:	201e      	movs	r0, #30
 8002b6c:	f001 fa6b 	bl	8004046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002b70:	201e      	movs	r0, #30
 8002b72:	f001 fa84 	bl	800407e <HAL_NVIC_EnableIRQ>
}
 8002b76:	e012      	b.n	8002b9e <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM5)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a0d      	ldr	r2, [pc, #52]	; (8002bb4 <HAL_TIM_Base_MspInit+0xb4>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d10d      	bne.n	8002b9e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	4b09      	ldr	r3, [pc, #36]	; (8002bac <HAL_TIM_Base_MspInit+0xac>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	4a08      	ldr	r2, [pc, #32]	; (8002bac <HAL_TIM_Base_MspInit+0xac>)
 8002b8c:	f043 0308 	orr.w	r3, r3, #8
 8002b90:	6413      	str	r3, [r2, #64]	; 0x40
 8002b92:	4b06      	ldr	r3, [pc, #24]	; (8002bac <HAL_TIM_Base_MspInit+0xac>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
}
 8002b9e:	bf00      	nop
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40000400 	.word	0x40000400
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	40000800 	.word	0x40000800
 8002bb4:	40000c00 	.word	0x40000c00

08002bb8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b088      	sub	sp, #32
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc0:	f107 030c 	add.w	r3, r7, #12
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	60da      	str	r2, [r3, #12]
 8002bce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a12      	ldr	r2, [pc, #72]	; (8002c20 <HAL_TIM_MspPostInit+0x68>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d11e      	bne.n	8002c18 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60bb      	str	r3, [r7, #8]
 8002bde:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <HAL_TIM_MspPostInit+0x6c>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	4a10      	ldr	r2, [pc, #64]	; (8002c24 <HAL_TIM_MspPostInit+0x6c>)
 8002be4:	f043 0304 	orr.w	r3, r3, #4
 8002be8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bea:	4b0e      	ldr	r3, [pc, #56]	; (8002c24 <HAL_TIM_MspPostInit+0x6c>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	60bb      	str	r3, [r7, #8]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002bf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bfa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c04:	2300      	movs	r3, #0
 8002c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c08:	2302      	movs	r3, #2
 8002c0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c0c:	f107 030c 	add.w	r3, r7, #12
 8002c10:	4619      	mov	r1, r3
 8002c12:	4805      	ldr	r0, [pc, #20]	; (8002c28 <HAL_TIM_MspPostInit+0x70>)
 8002c14:	f001 fa4e 	bl	80040b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002c18:	bf00      	nop
 8002c1a:	3720      	adds	r7, #32
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40000400 	.word	0x40000400
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40020800 	.word	0x40020800

08002c2c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c30:	4b11      	ldr	r3, [pc, #68]	; (8002c78 <MX_USART2_UART_Init+0x4c>)
 8002c32:	4a12      	ldr	r2, [pc, #72]	; (8002c7c <MX_USART2_UART_Init+0x50>)
 8002c34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c36:	4b10      	ldr	r3, [pc, #64]	; (8002c78 <MX_USART2_UART_Init+0x4c>)
 8002c38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c3e:	4b0e      	ldr	r3, [pc, #56]	; (8002c78 <MX_USART2_UART_Init+0x4c>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c44:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <MX_USART2_UART_Init+0x4c>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c4a:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <MX_USART2_UART_Init+0x4c>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c50:	4b09      	ldr	r3, [pc, #36]	; (8002c78 <MX_USART2_UART_Init+0x4c>)
 8002c52:	220c      	movs	r2, #12
 8002c54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c56:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <MX_USART2_UART_Init+0x4c>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c5c:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <MX_USART2_UART_Init+0x4c>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c62:	4805      	ldr	r0, [pc, #20]	; (8002c78 <MX_USART2_UART_Init+0x4c>)
 8002c64:	f003 fa98 	bl	8006198 <HAL_UART_Init>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c6e:	f7ff fd0b 	bl	8002688 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000614 	.word	0x20000614
 8002c7c:	40004400 	.word	0x40004400

08002c80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08a      	sub	sp, #40	; 0x28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c88:	f107 0314 	add.w	r3, r7, #20
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	60da      	str	r2, [r3, #12]
 8002c96:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a19      	ldr	r2, [pc, #100]	; (8002d04 <HAL_UART_MspInit+0x84>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d12b      	bne.n	8002cfa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	4b18      	ldr	r3, [pc, #96]	; (8002d08 <HAL_UART_MspInit+0x88>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	4a17      	ldr	r2, [pc, #92]	; (8002d08 <HAL_UART_MspInit+0x88>)
 8002cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb2:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <HAL_UART_MspInit+0x88>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <HAL_UART_MspInit+0x88>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	4a10      	ldr	r2, [pc, #64]	; (8002d08 <HAL_UART_MspInit+0x88>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cce:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <HAL_UART_MspInit+0x88>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002cda:	230c      	movs	r3, #12
 8002cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cea:	2307      	movs	r3, #7
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cee:	f107 0314 	add.w	r3, r7, #20
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4805      	ldr	r0, [pc, #20]	; (8002d0c <HAL_UART_MspInit+0x8c>)
 8002cf6:	f001 f9dd 	bl	80040b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002cfa:	bf00      	nop
 8002cfc:	3728      	adds	r7, #40	; 0x28
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40004400 	.word	0x40004400
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	40020000 	.word	0x40020000

08002d10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d14:	480d      	ldr	r0, [pc, #52]	; (8002d4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d16:	490e      	ldr	r1, [pc, #56]	; (8002d50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d18:	4a0e      	ldr	r2, [pc, #56]	; (8002d54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d1c:	e002      	b.n	8002d24 <LoopCopyDataInit>

08002d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d22:	3304      	adds	r3, #4

08002d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d28:	d3f9      	bcc.n	8002d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d2a:	4a0b      	ldr	r2, [pc, #44]	; (8002d58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d2c:	4c0b      	ldr	r4, [pc, #44]	; (8002d5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d30:	e001      	b.n	8002d36 <LoopFillZerobss>

08002d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d34:	3204      	adds	r2, #4

08002d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d38:	d3fb      	bcc.n	8002d32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d3a:	f7ff fd1b 	bl	8002774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d3e:	f003 fcf3 	bl	8006728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d42:	f7ff faeb 	bl	800231c <main>
  bx  lr    
 8002d46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d50:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002d54:	08008718 	.word	0x08008718
  ldr r2, =_sbss
 8002d58:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002d5c:	2000065c 	.word	0x2000065c

08002d60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d60:	e7fe      	b.n	8002d60 <ADC_IRQHandler>
	...

08002d64 <arm_atan2_f32>:
                   and compute the right angle.
*/


arm_status arm_atan2_f32(float32_t y,float32_t x,float32_t *result)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b0a1      	sub	sp, #132	; 0x84
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	ed87 0a03 	vstr	s0, [r7, #12]
 8002d6e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002d72:	6078      	str	r0, [r7, #4]
    if (x > 0.0f)
 8002d74:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d80:	f340 808e 	ble.w	8002ea0 <arm_atan2_f32+0x13c>
    {
        *result=arm_atan_f32(y/x);
 8002d84:	edd7 6a03 	vldr	s13, [r7, #12]
 8002d88:	ed97 7a02 	vldr	s14, [r7, #8]
 8002d8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d90:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
   int sign=0;
 8002d94:	2300      	movs	r3, #0
 8002d96:	67bb      	str	r3, [r7, #120]	; 0x78
   float32_t res=0.0f;
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	677b      	str	r3, [r7, #116]	; 0x74
   if (x < 0.0f)
 8002d9e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002da2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002daa:	d507      	bpl.n	8002dbc <arm_atan2_f32+0x58>
      sign=1;
 8002dac:	2301      	movs	r3, #1
 8002dae:	67bb      	str	r3, [r7, #120]	; 0x78
      x=-x;
 8002db0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002db4:	eef1 7a67 	vneg.f32	s15, s15
 8002db8:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
   if (x > 1.0f)
 8002dbc:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002dc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002dc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dcc:	dd31      	ble.n	8002e32 <arm_atan2_f32+0xce>
      x = 1.0f / x;
 8002dce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dd2:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002dd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dda:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
 8002dde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002de0:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8002de2:	4bb5      	ldr	r3, [pc, #724]	; (80030b8 <arm_atan2_f32+0x354>)
 8002de4:	66fb      	str	r3, [r7, #108]	; 0x6c
    int i=1;
 8002de6:	2301      	movs	r3, #1
 8002de8:	66bb      	str	r3, [r7, #104]	; 0x68
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002dea:	2301      	movs	r3, #1
 8002dec:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dee:	e014      	b.n	8002e1a <arm_atan2_f32+0xb6>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8002df0:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002df4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002df8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dfe:	f1c3 0309 	rsb	r3, r3, #9
 8002e02:	4aae      	ldr	r2, [pc, #696]	; (80030bc <arm_atan2_f32+0x358>)
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	edd3 7a00 	vldr	s15, [r3]
 8002e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e10:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002e14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e16:	3301      	adds	r3, #1
 8002e18:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e1c:	2b09      	cmp	r3, #9
 8002e1e:	dde7      	ble.n	8002df0 <arm_atan2_f32+0x8c>
    return(res);
 8002e20:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8002e24:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80030c0 <arm_atan2_f32+0x35c>
 8002e28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e2c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
 8002e30:	e028      	b.n	8002e84 <arm_atan2_f32+0x120>
 8002e32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e34:	667b      	str	r3, [r7, #100]	; 0x64
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8002e36:	4ba0      	ldr	r3, [pc, #640]	; (80030b8 <arm_atan2_f32+0x354>)
 8002e38:	663b      	str	r3, [r7, #96]	; 0x60
    int i=1;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002e3e:	2301      	movs	r3, #1
 8002e40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e42:	e014      	b.n	8002e6e <arm_atan2_f32+0x10a>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8002e44:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002e48:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002e4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e52:	f1c3 0309 	rsb	r3, r3, #9
 8002e56:	4a99      	ldr	r2, [pc, #612]	; (80030bc <arm_atan2_f32+0x358>)
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	edd3 7a00 	vldr	s15, [r3]
 8002e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e64:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002e68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e70:	2b09      	cmp	r3, #9
 8002e72:	dde7      	ble.n	8002e44 <arm_atan2_f32+0xe0>
    return(res);
 8002e74:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
     res += arm_atan_limited_f32(x);
 8002e78:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e80:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
   if (sign)
 8002e84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d005      	beq.n	8002e96 <arm_atan2_f32+0x132>
     res = -res;
 8002e8a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002e8e:	eef1 7a67 	vneg.f32	s15, s15
 8002e92:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
   return(res);
 8002e96:	6f7a      	ldr	r2, [r7, #116]	; 0x74
        *result=arm_atan_f32(y/x);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	601a      	str	r2, [r3, #0]
        return(ARM_MATH_SUCCESS);
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	e175      	b.n	800318c <arm_atan2_f32+0x428>
    }
    if (x < 0.0f)
 8002ea0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ea4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eac:	f140 814d 	bpl.w	800314a <arm_atan2_f32+0x3e6>
    {
        if (y > 0.0f)
 8002eb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002eb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ebc:	f340 8093 	ble.w	8002fe6 <arm_atan2_f32+0x282>
        {
           *result=arm_atan_f32(y/x) + PI;
 8002ec0:	edd7 6a03 	vldr	s13, [r7, #12]
 8002ec4:	ed97 7a02 	vldr	s14, [r7, #8]
 8002ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ecc:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
   int sign=0;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	657b      	str	r3, [r7, #84]	; 0x54
   float32_t res=0.0f;
 8002ed4:	f04f 0300 	mov.w	r3, #0
 8002ed8:	653b      	str	r3, [r7, #80]	; 0x50
   if (x < 0.0f)
 8002eda:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002ede:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee6:	d507      	bpl.n	8002ef8 <arm_atan2_f32+0x194>
      sign=1;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	657b      	str	r3, [r7, #84]	; 0x54
      x=-x;
 8002eec:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002ef0:	eef1 7a67 	vneg.f32	s15, s15
 8002ef4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
   if (x > 1.0f)
 8002ef8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002efc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f08:	dd31      	ble.n	8002f6e <arm_atan2_f32+0x20a>
      x = 1.0f / x;
 8002f0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f0e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f16:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8002f1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8002f1e:	4b66      	ldr	r3, [pc, #408]	; (80030b8 <arm_atan2_f32+0x354>)
 8002f20:	64bb      	str	r3, [r7, #72]	; 0x48
    int i=1;
 8002f22:	2301      	movs	r3, #1
 8002f24:	647b      	str	r3, [r7, #68]	; 0x44
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002f26:	2301      	movs	r3, #1
 8002f28:	647b      	str	r3, [r7, #68]	; 0x44
 8002f2a:	e014      	b.n	8002f56 <arm_atan2_f32+0x1f2>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8002f2c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002f30:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002f34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f3a:	f1c3 0309 	rsb	r3, r3, #9
 8002f3e:	4a5f      	ldr	r2, [pc, #380]	; (80030bc <arm_atan2_f32+0x358>)
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	edd3 7a00 	vldr	s15, [r3]
 8002f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f4c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f52:	3301      	adds	r3, #1
 8002f54:	647b      	str	r3, [r7, #68]	; 0x44
 8002f56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f58:	2b09      	cmp	r3, #9
 8002f5a:	dde7      	ble.n	8002f2c <arm_atan2_f32+0x1c8>
    return(res);
 8002f5c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8002f60:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80030c0 <arm_atan2_f32+0x35c>
 8002f64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f68:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8002f6c:	e028      	b.n	8002fc0 <arm_atan2_f32+0x25c>
 8002f6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f70:	643b      	str	r3, [r7, #64]	; 0x40
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8002f72:	4b51      	ldr	r3, [pc, #324]	; (80030b8 <arm_atan2_f32+0x354>)
 8002f74:	63fb      	str	r3, [r7, #60]	; 0x3c
    int i=1;
 8002f76:	2301      	movs	r3, #1
 8002f78:	63bb      	str	r3, [r7, #56]	; 0x38
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f7e:	e014      	b.n	8002faa <arm_atan2_f32+0x246>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8002f80:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002f84:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002f88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8e:	f1c3 0309 	rsb	r3, r3, #9
 8002f92:	4a4a      	ldr	r2, [pc, #296]	; (80030bc <arm_atan2_f32+0x358>)
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	edd3 7a00 	vldr	s15, [r3]
 8002f9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fa0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fac:	2b09      	cmp	r3, #9
 8002fae:	dde7      	ble.n	8002f80 <arm_atan2_f32+0x21c>
    return(res);
 8002fb0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
     res += arm_atan_limited_f32(x);
 8002fb4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fbc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
   if (sign)
 8002fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d005      	beq.n	8002fd2 <arm_atan2_f32+0x26e>
     res = -res;
 8002fc6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002fca:	eef1 7a67 	vneg.f32	s15, s15
 8002fce:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
   return(res);
 8002fd2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
           *result=arm_atan_f32(y/x) + PI;
 8002fd6:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80030c4 <arm_atan2_f32+0x360>
 8002fda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	edc3 7a00 	vstr	s15, [r3]
 8002fe4:	e0af      	b.n	8003146 <arm_atan2_f32+0x3e2>
        }
        else if (y < 0.0f)
 8002fe6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff2:	f140 809c 	bpl.w	800312e <arm_atan2_f32+0x3ca>
        {
           *result=arm_atan_f32(y/x) - PI;
 8002ff6:	edd7 6a03 	vldr	s13, [r7, #12]
 8002ffa:	ed97 7a02 	vldr	s14, [r7, #8]
 8002ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003002:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
   int sign=0;
 8003006:	2300      	movs	r3, #0
 8003008:	633b      	str	r3, [r7, #48]	; 0x30
   float32_t res=0.0f;
 800300a:	f04f 0300 	mov.w	r3, #0
 800300e:	62fb      	str	r3, [r7, #44]	; 0x2c
   if (x < 0.0f)
 8003010:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003014:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800301c:	d507      	bpl.n	800302e <arm_atan2_f32+0x2ca>
      sign=1;
 800301e:	2301      	movs	r3, #1
 8003020:	633b      	str	r3, [r7, #48]	; 0x30
      x=-x;
 8003022:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003026:	eef1 7a67 	vneg.f32	s15, s15
 800302a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
   if (x > 1.0f)
 800302e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003032:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003036:	eef4 7ac7 	vcmpe.f32	s15, s14
 800303a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800303e:	dd31      	ble.n	80030a4 <arm_atan2_f32+0x340>
      x = 1.0f / x;
 8003040:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003044:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003048:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800304c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8003050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003052:	62bb      	str	r3, [r7, #40]	; 0x28
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8003054:	4b18      	ldr	r3, [pc, #96]	; (80030b8 <arm_atan2_f32+0x354>)
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
    int i=1;
 8003058:	2301      	movs	r3, #1
 800305a:	623b      	str	r3, [r7, #32]
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 800305c:	2301      	movs	r3, #1
 800305e:	623b      	str	r3, [r7, #32]
 8003060:	e014      	b.n	800308c <arm_atan2_f32+0x328>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8003062:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003066:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800306a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	f1c3 0309 	rsb	r3, r3, #9
 8003074:	4a11      	ldr	r2, [pc, #68]	; (80030bc <arm_atan2_f32+0x358>)
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4413      	add	r3, r2
 800307a:	edd3 7a00 	vldr	s15, [r3]
 800307e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003082:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	3301      	adds	r3, #1
 800308a:	623b      	str	r3, [r7, #32]
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	2b09      	cmp	r3, #9
 8003090:	dde7      	ble.n	8003062 <arm_atan2_f32+0x2fe>
    return(res);
 8003092:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8003096:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80030c0 <arm_atan2_f32+0x35c>
 800309a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800309e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 80030a2:	e031      	b.n	8003108 <arm_atan2_f32+0x3a4>
 80030a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a6:	61fb      	str	r3, [r7, #28]
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 80030a8:	4b03      	ldr	r3, [pc, #12]	; (80030b8 <arm_atan2_f32+0x354>)
 80030aa:	61bb      	str	r3, [r7, #24]
    int i=1;
 80030ac:	2301      	movs	r3, #1
 80030ae:	617b      	str	r3, [r7, #20]
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80030b0:	2301      	movs	r3, #1
 80030b2:	617b      	str	r3, [r7, #20]
 80030b4:	e01d      	b.n	80030f2 <arm_atan2_f32+0x38e>
 80030b6:	bf00      	nop
 80030b8:	bd0492a5 	.word	0xbd0492a5
 80030bc:	08008698 	.word	0x08008698
 80030c0:	3fc90fdb 	.word	0x3fc90fdb
 80030c4:	40490fdb 	.word	0x40490fdb
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80030c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80030cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80030d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f1c3 0309 	rsb	r3, r3, #9
 80030da:	4a2f      	ldr	r2, [pc, #188]	; (8003198 <arm_atan2_f32+0x434>)
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	edd3 7a00 	vldr	s15, [r3]
 80030e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030e8:	edc7 7a06 	vstr	s15, [r7, #24]
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	3301      	adds	r3, #1
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2b09      	cmp	r3, #9
 80030f6:	dde7      	ble.n	80030c8 <arm_atan2_f32+0x364>
    return(res);
 80030f8:	edd7 7a06 	vldr	s15, [r7, #24]
     res += arm_atan_limited_f32(x);
 80030fc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003100:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003104:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
   if (sign)
 8003108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310a:	2b00      	cmp	r3, #0
 800310c:	d005      	beq.n	800311a <arm_atan2_f32+0x3b6>
     res = -res;
 800310e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003112:	eef1 7a67 	vneg.f32	s15, s15
 8003116:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
   return(res);
 800311a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
           *result=arm_atan_f32(y/x) - PI;
 800311e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800319c <arm_atan2_f32+0x438>
 8003122:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	edc3 7a00 	vstr	s15, [r3]
 800312c:	e00b      	b.n	8003146 <arm_atan2_f32+0x3e2>
        }
        else
        {
            if (signbit(y))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <arm_atan2_f32+0x3dc>
            {
               *result= -PI;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a19      	ldr	r2, [pc, #100]	; (80031a0 <arm_atan2_f32+0x43c>)
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	e002      	b.n	8003146 <arm_atan2_f32+0x3e2>
            }
            else
            {
               *result= PI;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a18      	ldr	r2, [pc, #96]	; (80031a4 <arm_atan2_f32+0x440>)
 8003144:	601a      	str	r2, [r3, #0]
            }
        }
        return(ARM_MATH_SUCCESS);
 8003146:	2300      	movs	r3, #0
 8003148:	e020      	b.n	800318c <arm_atan2_f32+0x428>
    }
    if (x == 0.0f)
 800314a:	edd7 7a02 	vldr	s15, [r7, #8]
 800314e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003156:	d117      	bne.n	8003188 <arm_atan2_f32+0x424>
    {
        if (y > 0.0f)
 8003158:	edd7 7a03 	vldr	s15, [r7, #12]
 800315c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003164:	dd04      	ble.n	8003170 <arm_atan2_f32+0x40c>
        {
            *result=PIHALFF32;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a0f      	ldr	r2, [pc, #60]	; (80031a8 <arm_atan2_f32+0x444>)
 800316a:	601a      	str	r2, [r3, #0]
            return(ARM_MATH_SUCCESS);
 800316c:	2300      	movs	r3, #0
 800316e:	e00d      	b.n	800318c <arm_atan2_f32+0x428>
        }
        if (y < 0.0f)
 8003170:	edd7 7a03 	vldr	s15, [r7, #12]
 8003174:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800317c:	d504      	bpl.n	8003188 <arm_atan2_f32+0x424>
        {
            *result=-PIHALFF32;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a0a      	ldr	r2, [pc, #40]	; (80031ac <arm_atan2_f32+0x448>)
 8003182:	601a      	str	r2, [r3, #0]
            return(ARM_MATH_SUCCESS);
 8003184:	2300      	movs	r3, #0
 8003186:	e001      	b.n	800318c <arm_atan2_f32+0x428>
        }
    }
    

    return(ARM_MATH_NANINF);
 8003188:	f06f 0303 	mvn.w	r3, #3

}
 800318c:	4618      	mov	r0, r3
 800318e:	3784      	adds	r7, #132	; 0x84
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	08008698 	.word	0x08008698
 800319c:	40490fdb 	.word	0x40490fdb
 80031a0:	c0490fdb 	.word	0xc0490fdb
 80031a4:	40490fdb 	.word	0x40490fdb
 80031a8:	3fc90fdb 	.word	0x3fc90fdb
 80031ac:	bfc90fdb 	.word	0xbfc90fdb

080031b0 <arm_cos_f32>:
  @param[in]     x  input value in radians
  @return        cos(x)
 */
float32_t arm_cos_f32(
  float32_t x)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b08b      	sub	sp, #44	; 0x2c
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 80031ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80031be:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80032b0 <arm_cos_f32+0x100>
 80031c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031c6:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80031ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031ce:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 80031d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80031d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031da:	ee17 3a90 	vmov	r3, s15
 80031de:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 80031e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80031e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ec:	d502      	bpl.n	80031f4 <arm_cos_f32+0x44>
  {
    n--;
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	3b01      	subs	r3, #1
 80031f2:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	ee07 3a90 	vmov	s15, r3
 80031fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031fe:	ed97 7a06 	vldr	s14, [r7, #24]
 8003202:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003206:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 800320a:	edd7 7a06 	vldr	s15, [r7, #24]
 800320e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80032b4 <arm_cos_f32+0x104>
 8003212:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003216:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 800321a:	edd7 7a07 	vldr	s15, [r7, #28]
 800321e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003222:	ee17 3a90 	vmov	r3, s15
 8003226:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 8003228:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800322a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800322e:	d309      	bcc.n	8003244 <arm_cos_f32+0x94>
    index = 0;
 8003230:	2300      	movs	r3, #0
 8003232:	84fb      	strh	r3, [r7, #38]	; 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 8003234:	edd7 7a07 	vldr	s15, [r7, #28]
 8003238:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80032b4 <arm_cos_f32+0x104>
 800323c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003240:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8003244:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003246:	ee07 3a90 	vmov	s15, r3
 800324a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800324e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003252:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003256:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 800325a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800325c:	4a16      	ldr	r2, [pc, #88]	; (80032b8 <arm_cos_f32+0x108>)
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8003266:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003268:	3301      	adds	r3, #1
 800326a:	4a13      	ldr	r2, [pc, #76]	; (80032b8 <arm_cos_f32+0x108>)
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  cosVal = (1.0f - fract) * a + fract * b;
 8003274:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003278:	edd7 7a05 	vldr	s15, [r7, #20]
 800327c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003280:	edd7 7a04 	vldr	s15, [r7, #16]
 8003284:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003288:	edd7 6a05 	vldr	s13, [r7, #20]
 800328c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003290:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003294:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003298:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (cosVal);
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	ee07 3a90 	vmov	s15, r3
}
 80032a2:	eeb0 0a67 	vmov.f32	s0, s15
 80032a6:	372c      	adds	r7, #44	; 0x2c
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	3e22f983 	.word	0x3e22f983
 80032b4:	44000000 	.word	0x44000000
 80032b8:	08007e94 	.word	0x08007e94

080032bc <arm_sin_f32>:
  @return        sin(x)
 */

float32_t arm_sin_f32(
  float32_t x)
{
 80032bc:	b480      	push	{r7}
 80032be:	b08b      	sub	sp, #44	; 0x2c
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 80032c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80032ca:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80033b4 <arm_sin_f32+0xf8>
 80032ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032d2:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 80032d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80032da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032de:	ee17 3a90 	vmov	r3, s15
 80032e2:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 80032e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80032e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f0:	d502      	bpl.n	80032f8 <arm_sin_f32+0x3c>
  {
    n--;
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	3b01      	subs	r3, #1
 80032f6:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	ee07 3a90 	vmov	s15, r3
 80032fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003302:	ed97 7a06 	vldr	s14, [r7, #24]
 8003306:	ee77 7a67 	vsub.f32	s15, s14, s15
 800330a:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 800330e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003312:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80033b8 <arm_sin_f32+0xfc>
 8003316:	ee67 7a87 	vmul.f32	s15, s15, s14
 800331a:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 800331e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003326:	ee17 3a90 	vmov	r3, s15
 800332a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 800332c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800332e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003332:	d309      	bcc.n	8003348 <arm_sin_f32+0x8c>
    index = 0;
 8003334:	2300      	movs	r3, #0
 8003336:	84fb      	strh	r3, [r7, #38]	; 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 8003338:	edd7 7a07 	vldr	s15, [r7, #28]
 800333c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80033b8 <arm_sin_f32+0xfc>
 8003340:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003344:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8003348:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800334a:	ee07 3a90 	vmov	s15, r3
 800334e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003352:	ed97 7a07 	vldr	s14, [r7, #28]
 8003356:	ee77 7a67 	vsub.f32	s15, s14, s15
 800335a:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 800335e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003360:	4a16      	ldr	r2, [pc, #88]	; (80033bc <arm_sin_f32+0x100>)
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 800336a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800336c:	3301      	adds	r3, #1
 800336e:	4a13      	ldr	r2, [pc, #76]	; (80033bc <arm_sin_f32+0x100>)
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 8003378:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800337c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003380:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003384:	edd7 7a04 	vldr	s15, [r7, #16]
 8003388:	ee27 7a27 	vmul.f32	s14, s14, s15
 800338c:	edd7 6a05 	vldr	s13, [r7, #20]
 8003390:	edd7 7a03 	vldr	s15, [r7, #12]
 8003394:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800339c:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (sinVal);
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	ee07 3a90 	vmov	s15, r3
}
 80033a6:	eeb0 0a67 	vmov.f32	s0, s15
 80033aa:	372c      	adds	r7, #44	; 0x2c
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	3e22f983 	.word	0x3e22f983
 80033b8:	44000000 	.word	0x44000000
 80033bc:	08007e94 	.word	0x08007e94

080033c0 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b08b      	sub	sp, #44	; 0x2c
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	461a      	mov	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	885b      	ldrh	r3, [r3, #2]
 80033e8:	fb02 f303 	mul.w	r3, r2, r3
 80033ec:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 80033f2:	e013      	b.n	800341c <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	1d1a      	adds	r2, r3, #4
 80033f8:	627a      	str	r2, [r7, #36]	; 0x24
 80033fa:	ed93 7a00 	vldr	s14, [r3]
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	1d1a      	adds	r2, r3, #4
 8003402:	623a      	str	r2, [r7, #32]
 8003404:	edd3 7a00 	vldr	s15, [r3]
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	1d1a      	adds	r2, r3, #4
 800340c:	61fa      	str	r2, [r7, #28]
 800340e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003412:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	3b01      	subs	r3, #1
 800341a:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1e8      	bne.n	80033f4 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8003422:	2300      	movs	r3, #0
 8003424:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8003426:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800342a:	4618      	mov	r0, r3
 800342c:	372c      	adds	r7, #44	; 0x2c
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8003436:	b480      	push	{r7}
 8003438:	b085      	sub	sp, #20
 800343a:	af00      	add	r7, sp, #0
 800343c:	60f8      	str	r0, [r7, #12]
 800343e:	607b      	str	r3, [r7, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	817b      	strh	r3, [r7, #10]
 8003444:	4613      	mov	r3, r2
 8003446:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	897a      	ldrh	r2, [r7, #10]
 800344c:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	893a      	ldrh	r2, [r7, #8]
 8003452:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	605a      	str	r2, [r3, #4]
}
 800345a:	bf00      	nop
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8003466:	b480      	push	{r7}
 8003468:	b0bb      	sub	sp, #236	; 0xec
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
 800346e:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	667b      	str	r3, [r7, #100]	; 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	663b      	str	r3, [r7, #96]	; 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	881b      	ldrh	r3, [r3, #0]
 8003480:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	885b      	ldrh	r3, [r3, #2]
 8003486:	65bb      	str	r3, [r7, #88]	; 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003490:	f04f 0300 	mov.w	r3, #0
 8003494:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 8003496:	2300      	movs	r3, #0
 8003498:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800349c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800349e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 80034a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 80034a8:	e03b      	b.n	8003522 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 80034aa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80034ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 80034b6:	e00c      	b.n	80034d2 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 80034b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034bc:	1d1a      	adds	r2, r3, #4
 80034be:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
        j--;
 80034c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80034cc:	3b01      	subs	r3, #1
 80034ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 80034d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1ee      	bne.n	80034b8 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 80034da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034de:	1d1a      	adds	r2, r3, #4
 80034e0:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80034e4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80034e8:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 80034ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80034ee:	3b01      	subs	r3, #1
 80034f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 80034f4:	e00c      	b.n	8003510 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 80034f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034fa:	1d1a      	adds	r2, r3, #4
 80034fc:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
        j--;
 8003506:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800350a:	3b01      	subs	r3, #1
 800350c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 8003510:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1ee      	bne.n	80034f6 <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 8003518:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800351c:	3b01      	subs	r3, #1
 800351e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    while (rowCnt > 0U)
 8003522:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1bf      	bne.n	80034aa <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800352a:	2300      	movs	r3, #0
 800352c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003530:	e2c7      	b.n	8003ac2 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 8003532:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003536:	653b      	str	r3, [r7, #80]	; 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	885b      	ldrh	r3, [r3, #2]
 8003540:	3301      	adds	r3, #1
 8003542:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8003546:	fb01 f303 	mul.w	r3, r1, r3
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      pivot = *pTmp;
 8003552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      selectedRow = column;
 800355c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003560:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8003564:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003568:	3301      	adds	r3, #1
 800356a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800356e:	e02c      	b.n	80035ca <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	885b      	ldrh	r3, [r3, #2]
 8003578:	4619      	mov	r1, r3
 800357a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800357e:	fb03 f101 	mul.w	r1, r3, r1
 8003582:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003586:	440b      	add	r3, r1
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
          newPivot = *pTmp;
 8003590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	657b      	str	r3, [r7, #84]	; 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 8003598:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800359c:	eeb0 7ae7 	vabs.f32	s14, s15
 80035a0:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80035a4:	eef0 7ae7 	vabs.f32	s15, s15
 80035a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b0:	dd06      	ble.n	80035c0 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 80035b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            pivot = newPivot;
 80035ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 80035c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035c4:	3301      	adds	r3, #1
 80035c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80035ca:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80035ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d3cd      	bcc.n	8003570 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 80035d4:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80035d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80035dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e0:	f000 809b 	beq.w	800371a <arm_mat_inverse_f32+0x2b4>
 80035e4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80035e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035ec:	429a      	cmp	r2, r3
 80035ee:	f000 8094 	beq.w	800371a <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	885b      	ldrh	r3, [r3, #2]
 8003606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003608:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800360a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	64bb      	str	r3, [r7, #72]	; 0x48
 8003612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003614:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003616:	fb03 f202 	mul.w	r2, r3, r2
 800361a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800361e:	4413      	add	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003626:	4413      	add	r3, r2
 8003628:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800362c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800362e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003632:	fb03 f202 	mul.w	r2, r3, r2
 8003636:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800363a:	4413      	add	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003642:	4413      	add	r3, r2
 8003644:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003648:	2300      	movs	r3, #0
 800364a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800364e:	e018      	b.n	8003682 <arm_mat_inverse_f32+0x21c>
 8003650:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	63bb      	str	r3, [r7, #56]	; 0x38
 8003658:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800365c:	1d1a      	adds	r2, r3, #4
 800365e:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8003662:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003666:	6812      	ldr	r2, [r2, #0]
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800366e:	1d1a      	adds	r2, r3, #4
 8003670:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003674:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800367c:	3301      	adds	r3, #1
 800367e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003682:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003688:	429a      	cmp	r2, r3
 800368a:	dbe1      	blt.n	8003650 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	885b      	ldrh	r3, [r3, #2]
 80036a0:	647b      	str	r3, [r7, #68]	; 0x44
 80036a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036a4:	643b      	str	r3, [r7, #64]	; 0x40
 80036a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80036aa:	fb02 f303 	mul.w	r3, r2, r3
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80036b4:	4413      	add	r3, r2
 80036b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80036ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80036c0:	fb02 f303 	mul.w	r3, r2, r3
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80036ca:	4413      	add	r3, r2
 80036cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80036d0:	2300      	movs	r3, #0
 80036d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036d6:	e018      	b.n	800370a <arm_mat_inverse_f32+0x2a4>
 80036d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036e4:	1d1a      	adds	r2, r3, #4
 80036e6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80036ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80036ee:	6812      	ldr	r2, [r2, #0]
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80036f6:	1d1a      	adds	r2, r3, #4
 80036f8:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80036fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003704:	3301      	adds	r3, #1
 8003706:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800370a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800370e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003710:	429a      	cmp	r2, r3
 8003712:	dbe1      	blt.n	80036d8 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8003714:	2301      	movs	r3, #1
 8003716:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800371a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800371e:	2b01      	cmp	r3, #1
 8003720:	d009      	beq.n	8003736 <arm_mat_inverse_f32+0x2d0>
 8003722:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8003726:	eef5 7a40 	vcmp.f32	s15, #0.0
 800372a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800372e:	d102      	bne.n	8003736 <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 8003730:	f06f 0304 	mvn.w	r3, #4
 8003734:	e208      	b.n	8003b48 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 8003736:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800373a:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 800373e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003742:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	885b      	ldrh	r3, [r3, #2]
 8003752:	637b      	str	r3, [r7, #52]	; 0x34
 8003754:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003756:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	633b      	str	r3, [r7, #48]	; 0x30
 800375e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003760:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003762:	fb03 f202 	mul.w	r2, r3, r2
 8003766:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800376a:	4413      	add	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8003772:	4413      	add	r3, r2
 8003774:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003778:	2300      	movs	r3, #0
 800377a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800377e:	e011      	b.n	80037a4 <arm_mat_inverse_f32+0x33e>
 8003780:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003784:	1d1a      	adds	r2, r3, #4
 8003786:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800378a:	ed93 7a00 	vldr	s14, [r3]
 800378e:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8003792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003796:	edc3 7a00 	vstr	s15, [r3]
 800379a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800379e:	3301      	adds	r3, #1
 80037a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80037a4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80037a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037aa:	429a      	cmp	r2, r3
 80037ac:	dbe8      	blt.n	8003780 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	885b      	ldrh	r3, [r3, #2]
 80037ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037be:	62bb      	str	r3, [r7, #40]	; 0x28
 80037c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80037c4:	fb02 f303 	mul.w	r3, r2, r3
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80037ce:	4413      	add	r3, r2
 80037d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80037d4:	2300      	movs	r3, #0
 80037d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80037da:	e011      	b.n	8003800 <arm_mat_inverse_f32+0x39a>
 80037dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037e0:	1d1a      	adds	r2, r3, #4
 80037e2:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80037e6:	ed93 7a00 	vldr	s14, [r3]
 80037ea:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80037ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f2:	edc3 7a00 	vstr	s15, [r3]
 80037f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037fa:	3301      	adds	r3, #1
 80037fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003800:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003806:	429a      	cmp	r2, r3
 8003808:	dbe8      	blt.n	80037dc <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800380a:	2300      	movs	r3, #0
 800380c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      for (;rowNb < pivotRow; rowNb++)
 8003810:	e0ae      	b.n	8003970 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	885b      	ldrh	r3, [r3, #2]
 800381a:	4619      	mov	r1, r3
 800381c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003820:	fb03 f101 	mul.w	r1, r3, r1
 8003824:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003828:	440b      	add	r3, r1
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           pivot = *pTmp;
 8003832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	885b      	ldrh	r3, [r3, #2]
 8003850:	617b      	str	r3, [r7, #20]
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	613b      	str	r3, [r7, #16]
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003862:	fb03 f202 	mul.w	r2, r3, r2
 8003866:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800386a:	4413      	add	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003872:	4413      	add	r3, r2
 8003874:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800387c:	fb03 f202 	mul.w	r2, r3, r2
 8003880:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003884:	4413      	add	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800388c:	4413      	add	r3, r2
 800388e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003892:	2300      	movs	r3, #0
 8003894:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003898:	e01a      	b.n	80038d0 <arm_mat_inverse_f32+0x46a>
 800389a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800389e:	1d1a      	adds	r2, r3, #4
 80038a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80038a4:	ed93 7a00 	vldr	s14, [r3]
 80038a8:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80038ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038b4:	1d1a      	adds	r2, r3, #4
 80038b6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80038ba:	ed93 7a00 	vldr	s14, [r3]
 80038be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038c2:	edc3 7a00 	vstr	s15, [r3]
 80038c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80038ca:	3301      	adds	r3, #1
 80038cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80038d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	dbdf      	blt.n	800389a <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	885b      	ldrh	r3, [r3, #2]
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	60bb      	str	r3, [r7, #8]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80038fa:	fb02 f303 	mul.w	r3, r2, r3
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003904:	4413      	add	r3, r2
 8003906:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800390e:	fb02 f303 	mul.w	r3, r2, r3
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003918:	4413      	add	r3, r2
 800391a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800391e:	2300      	movs	r3, #0
 8003920:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003924:	e01a      	b.n	800395c <arm_mat_inverse_f32+0x4f6>
 8003926:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800392a:	1d1a      	adds	r2, r3, #4
 800392c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003930:	ed93 7a00 	vldr	s14, [r3]
 8003934:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8003938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800393c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003940:	1d1a      	adds	r2, r3, #4
 8003942:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003946:	ed93 7a00 	vldr	s14, [r3]
 800394a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800394e:	edc3 7a00 	vstr	s15, [r3]
 8003952:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003956:	3301      	adds	r3, #1
 8003958:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800395c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	429a      	cmp	r2, r3
 8003964:	dbdf      	blt.n	8003926 <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 8003966:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800396a:	3301      	adds	r3, #1
 800396c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003970:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003976:	429a      	cmp	r2, r3
 8003978:	f4ff af4b 	bcc.w	8003812 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800397c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800397e:	3301      	adds	r3, #1
 8003980:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003984:	e092      	b.n	8003aac <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	885b      	ldrh	r3, [r3, #2]
 800398e:	4619      	mov	r1, r3
 8003990:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003994:	fb03 f101 	mul.w	r1, r3, r1
 8003998:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800399c:	440b      	add	r3, r1
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           pivot = *pTmp;
 80039a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	677b      	str	r3, [r7, #116]	; 0x74
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	885b      	ldrh	r3, [r3, #2]
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
 80039c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	623b      	str	r3, [r7, #32]
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80039d2:	fb03 f202 	mul.w	r2, r3, r2
 80039d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039da:	4413      	add	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80039e0:	4413      	add	r3, r2
 80039e2:	67bb      	str	r3, [r7, #120]	; 0x78
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80039e8:	fb03 f202 	mul.w	r2, r3, r2
 80039ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039f0:	4413      	add	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80039f6:	4413      	add	r3, r2
 80039f8:	677b      	str	r3, [r7, #116]	; 0x74
 80039fa:	2300      	movs	r3, #0
 80039fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80039fe:	e014      	b.n	8003a2a <arm_mat_inverse_f32+0x5c4>
 8003a00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a02:	1d1a      	adds	r2, r3, #4
 8003a04:	677a      	str	r2, [r7, #116]	; 0x74
 8003a06:	ed93 7a00 	vldr	s14, [r3]
 8003a0a:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8003a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a14:	1d1a      	adds	r2, r3, #4
 8003a16:	67ba      	str	r2, [r7, #120]	; 0x78
 8003a18:	ed93 7a00 	vldr	s14, [r3]
 8003a1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a20:	edc3 7a00 	vstr	s15, [r3]
 8003a24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a26:	3301      	adds	r3, #1
 8003a28:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a2a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	dbe6      	blt.n	8003a00 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	885b      	ldrh	r3, [r3, #2]
 8003a42:	61fb      	str	r3, [r7, #28]
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	61bb      	str	r3, [r7, #24]
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003a4e:	fb02 f303 	mul.w	r3, r2, r3
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a56:	4413      	add	r3, r2
 8003a58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003a5e:	fb02 f303 	mul.w	r3, r2, r3
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a66:	4413      	add	r3, r2
 8003a68:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	673b      	str	r3, [r7, #112]	; 0x70
 8003a6e:	e014      	b.n	8003a9a <arm_mat_inverse_f32+0x634>
 8003a70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a72:	1d1a      	adds	r2, r3, #4
 8003a74:	66ba      	str	r2, [r7, #104]	; 0x68
 8003a76:	ed93 7a00 	vldr	s14, [r3]
 8003a7a:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8003a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a84:	1d1a      	adds	r2, r3, #4
 8003a86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a88:	ed93 7a00 	vldr	s14, [r3]
 8003a8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a90:	edc3 7a00 	vstr	s15, [r3]
 8003a94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a96:	3301      	adds	r3, #1
 8003a98:	673b      	str	r3, [r7, #112]	; 0x70
 8003a9a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	dbe6      	blt.n	8003a70 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8003aa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003aac:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003ab0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	f4ff af67 	bcc.w	8003986 <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 8003ab8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003abc:	3301      	adds	r3, #1
 8003abe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ac2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ac6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	f4ff ad32 	bcc.w	8003532 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 8003ad4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d033      	beq.n	8003b44 <arm_mat_inverse_f32+0x6de>
 8003adc:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8003ae0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae8:	d12c      	bne.n	8003b44 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	667b      	str	r3, [r7, #100]	; 0x64
      for (i = 0; i < numRows * numCols; i++)
 8003af0:	2300      	movs	r3, #0
 8003af2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003af6:	e010      	b.n	8003b1a <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 8003af8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003b00:	4413      	add	r3, r2
 8003b02:	edd3 7a00 	vldr	s15, [r3]
 8003b06:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b0e:	d10d      	bne.n	8003b2c <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 8003b10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b14:	3301      	adds	r3, #1
 8003b16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b1e:	fb02 f303 	mul.w	r3, r2, r3
 8003b22:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d3e6      	bcc.n	8003af8 <arm_mat_inverse_f32+0x692>
 8003b2a:	e000      	b.n	8003b2e <arm_mat_inverse_f32+0x6c8>
            break;
 8003b2c:	bf00      	nop
      }

      if (i == numRows * numCols)
 8003b2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b32:	fb02 f303 	mul.w	r3, r2, r3
 8003b36:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d102      	bne.n	8003b44 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 8003b3e:	23fb      	movs	r3, #251	; 0xfb
 8003b40:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
    }
  }

  /* Return to application */
  return (status);
 8003b44:	f997 30c3 	ldrsb.w	r3, [r7, #195]	; 0xc3
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	37ec      	adds	r7, #236	; 0xec
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b093      	sub	sp, #76	; 0x4c
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	643b      	str	r3, [r7, #64]	; 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	885b      	ldrh	r3, [r3, #2]
 8003b88:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	885b      	ldrh	r3, [r3, #2]
 8003b8e:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 8003b90:	2300      	movs	r3, #0
 8003b92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b94:	8b7b      	ldrh	r3, [r7, #26]
 8003b96:	62bb      	str	r3, [r7, #40]	; 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 8003b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	69fa      	ldr	r2, [r7, #28]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	63bb      	str	r3, [r7, #56]	; 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 8003ba2:	8b3b      	ldrh	r3, [r7, #24]
 8003ba4:	633b      	str	r3, [r7, #48]	; 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	643b      	str	r3, [r7, #64]	; 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8003bac:	f04f 0300 	mov.w	r3, #0
 8003bb0:	637b      	str	r3, [r7, #52]	; 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 8003bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bb4:	647b      	str	r3, [r7, #68]	; 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 8003bb6:	8afb      	ldrh	r3, [r7, #22]
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 8003bba:	e017      	b.n	8003bec <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 8003bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bbe:	1d1a      	adds	r2, r3, #4
 8003bc0:	647a      	str	r2, [r7, #68]	; 0x44
 8003bc2:	ed93 7a00 	vldr	s14, [r3]
 8003bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bc8:	edd3 7a00 	vldr	s15, [r3]
 8003bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bd0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bd8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
          pIn2 += numColsB;
 8003bdc:	8b3b      	ldrh	r3, [r7, #24]
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003be2:	4413      	add	r3, r2
 8003be4:	643b      	str	r3, [r7, #64]	; 0x40

          /* Decrement loop counter */
          colCnt--;
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	3b01      	subs	r3, #1
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
        while (colCnt > 0U)
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1e4      	bne.n	8003bbc <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 8003bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf4:	1d1a      	adds	r2, r3, #4
 8003bf6:	63ba      	str	r2, [r7, #56]	; 0x38
 8003bf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bfa:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	633b      	str	r3, [r7, #48]	; 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 8003c02:	8b3a      	ldrh	r2, [r7, #24]
 8003c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	6a3a      	ldr	r2, [r7, #32]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	643b      	str	r3, [r7, #64]	; 0x40

      } while (col > 0U);
 8003c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1ca      	bne.n	8003bac <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 8003c16:	8b3b      	ldrh	r3, [r7, #24]
 8003c18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c1a:	4413      	add	r3, r2
 8003c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pInA = pInA + numColsA;
 8003c1e:	8afb      	ldrh	r3, [r7, #22]
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c24:	4413      	add	r3, r2
 8003c26:	63fb      	str	r3, [r7, #60]	; 0x3c

      /* Decrement row loop counter */
      row--;
 8003c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	62bb      	str	r3, [r7, #40]	; 0x28

    } while (row > 0U);
 8003c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1b1      	bne.n	8003b98 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8003c34:	2300      	movs	r3, #0
 8003c36:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 8003c38:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	374c      	adds	r7, #76	; 0x4c
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b08b      	sub	sp, #44	; 0x2c
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c54:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	881b      	ldrh	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	885b      	ldrh	r3, [r3, #2]
 8003c6c:	fb02 f303 	mul.w	r3, r2, r3
 8003c70:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8003c76:	e010      	b.n	8003c9a <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8003c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7a:	1d1a      	adds	r2, r3, #4
 8003c7c:	627a      	str	r2, [r7, #36]	; 0x24
 8003c7e:	ed93 7a00 	vldr	s14, [r3]
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	1d1a      	adds	r2, r3, #4
 8003c86:	623a      	str	r2, [r7, #32]
 8003c88:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c90:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	3b01      	subs	r3, #1
 8003c98:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1eb      	bne.n	8003c78 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 8003ca4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	372c      	adds	r7, #44	; 0x2c
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b08b      	sub	sp, #44	; 0x2c
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	881b      	ldrh	r3, [r3, #0]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	885b      	ldrh	r3, [r3, #2]
 8003cdc:	fb02 f303 	mul.w	r3, r2, r3
 8003ce0:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8003ce6:	e013      	b.n	8003d10 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cea:	1d1a      	adds	r2, r3, #4
 8003cec:	627a      	str	r2, [r7, #36]	; 0x24
 8003cee:	ed93 7a00 	vldr	s14, [r3]
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	1d1a      	adds	r2, r3, #4
 8003cf6:	623a      	str	r2, [r7, #32]
 8003cf8:	edd3 7a00 	vldr	s15, [r3]
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	1d1a      	adds	r2, r3, #4
 8003d00:	61fa      	str	r2, [r7, #28]
 8003d02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d06:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1e8      	bne.n	8003ce8 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8003d16:	2300      	movs	r3, #0
 8003d18:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8003d1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	372c      	adds	r7, #44	; 0x2c
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b08b      	sub	sp, #44	; 0x2c
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
 8003d32:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	885b      	ldrh	r3, [r3, #2]
 8003d4a:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8003d4c:	89fb      	ldrh	r3, [r7, #14]
 8003d4e:	61bb      	str	r3, [r7, #24]
 8003d50:	2300      	movs	r3, #0
 8003d52:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8003d5e:	89bb      	ldrh	r3, [r7, #12]
 8003d60:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8003d62:	e00d      	b.n	8003d80 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	1d1a      	adds	r2, r3, #4
 8003d68:	627a      	str	r2, [r7, #36]	; 0x24
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8003d70:	89fb      	ldrh	r3, [r7, #14]
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	6a3a      	ldr	r2, [r7, #32]
 8003d76:	4413      	add	r3, r2
 8003d78:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1ee      	bne.n	8003d64 <arm_mat_trans_f32+0x3a>
      }

      i++;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1dd      	bne.n	8003d54 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 8003d9c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	372c      	adds	r7, #44	; 0x2c
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003db0:	4b0e      	ldr	r3, [pc, #56]	; (8003dec <HAL_Init+0x40>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a0d      	ldr	r2, [pc, #52]	; (8003dec <HAL_Init+0x40>)
 8003db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003dbc:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <HAL_Init+0x40>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a0a      	ldr	r2, [pc, #40]	; (8003dec <HAL_Init+0x40>)
 8003dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dc8:	4b08      	ldr	r3, [pc, #32]	; (8003dec <HAL_Init+0x40>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a07      	ldr	r2, [pc, #28]	; (8003dec <HAL_Init+0x40>)
 8003dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dd4:	2003      	movs	r0, #3
 8003dd6:	f000 f92b 	bl	8004030 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003dda:	2000      	movs	r0, #0
 8003ddc:	f000 f808 	bl	8003df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003de0:	f7fe fc58 	bl	8002694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	40023c00 	.word	0x40023c00

08003df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003df8:	4b12      	ldr	r3, [pc, #72]	; (8003e44 <HAL_InitTick+0x54>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	4b12      	ldr	r3, [pc, #72]	; (8003e48 <HAL_InitTick+0x58>)
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	4619      	mov	r1, r3
 8003e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 f943 	bl	800409a <HAL_SYSTICK_Config>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e00e      	b.n	8003e3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b0f      	cmp	r3, #15
 8003e22:	d80a      	bhi.n	8003e3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e24:	2200      	movs	r2, #0
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	f04f 30ff 	mov.w	r0, #4294967295
 8003e2c:	f000 f90b 	bl	8004046 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e30:	4a06      	ldr	r2, [pc, #24]	; (8003e4c <HAL_InitTick+0x5c>)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
 8003e38:	e000      	b.n	8003e3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	20000010 	.word	0x20000010
 8003e48:	20000018 	.word	0x20000018
 8003e4c:	20000014 	.word	0x20000014

08003e50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e54:	4b06      	ldr	r3, [pc, #24]	; (8003e70 <HAL_IncTick+0x20>)
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	4b06      	ldr	r3, [pc, #24]	; (8003e74 <HAL_IncTick+0x24>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4413      	add	r3, r2
 8003e60:	4a04      	ldr	r2, [pc, #16]	; (8003e74 <HAL_IncTick+0x24>)
 8003e62:	6013      	str	r3, [r2, #0]
}
 8003e64:	bf00      	nop
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	20000018 	.word	0x20000018
 8003e74:	20000658 	.word	0x20000658

08003e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8003e7c:	4b03      	ldr	r3, [pc, #12]	; (8003e8c <HAL_GetTick+0x14>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	20000658 	.word	0x20000658

08003e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ea0:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003eac:	4013      	ands	r3, r2
 8003eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003eb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ec2:	4a04      	ldr	r2, [pc, #16]	; (8003ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	60d3      	str	r3, [r2, #12]
}
 8003ec8:	bf00      	nop
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	e000ed00 	.word	0xe000ed00

08003ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003edc:	4b04      	ldr	r3, [pc, #16]	; (8003ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	0a1b      	lsrs	r3, r3, #8
 8003ee2:	f003 0307 	and.w	r3, r3, #7
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	e000ed00 	.word	0xe000ed00

08003ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	4603      	mov	r3, r0
 8003efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	db0b      	blt.n	8003f1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f06:	79fb      	ldrb	r3, [r7, #7]
 8003f08:	f003 021f 	and.w	r2, r3, #31
 8003f0c:	4907      	ldr	r1, [pc, #28]	; (8003f2c <__NVIC_EnableIRQ+0x38>)
 8003f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	2001      	movs	r0, #1
 8003f16:	fa00 f202 	lsl.w	r2, r0, r2
 8003f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	e000e100 	.word	0xe000e100

08003f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	4603      	mov	r3, r0
 8003f38:	6039      	str	r1, [r7, #0]
 8003f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	db0a      	blt.n	8003f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	490c      	ldr	r1, [pc, #48]	; (8003f7c <__NVIC_SetPriority+0x4c>)
 8003f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f4e:	0112      	lsls	r2, r2, #4
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	440b      	add	r3, r1
 8003f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f58:	e00a      	b.n	8003f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	4908      	ldr	r1, [pc, #32]	; (8003f80 <__NVIC_SetPriority+0x50>)
 8003f60:	79fb      	ldrb	r3, [r7, #7]
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	3b04      	subs	r3, #4
 8003f68:	0112      	lsls	r2, r2, #4
 8003f6a:	b2d2      	uxtb	r2, r2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	761a      	strb	r2, [r3, #24]
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	e000e100 	.word	0xe000e100
 8003f80:	e000ed00 	.word	0xe000ed00

08003f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b089      	sub	sp, #36	; 0x24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f1c3 0307 	rsb	r3, r3, #7
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	bf28      	it	cs
 8003fa2:	2304      	movcs	r3, #4
 8003fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	2b06      	cmp	r3, #6
 8003fac:	d902      	bls.n	8003fb4 <NVIC_EncodePriority+0x30>
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	3b03      	subs	r3, #3
 8003fb2:	e000      	b.n	8003fb6 <NVIC_EncodePriority+0x32>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	43da      	mvns	r2, r3
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	401a      	ands	r2, r3
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd6:	43d9      	mvns	r1, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fdc:	4313      	orrs	r3, r2
         );
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3724      	adds	r7, #36	; 0x24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
	...

08003fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ffc:	d301      	bcc.n	8004002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ffe:	2301      	movs	r3, #1
 8004000:	e00f      	b.n	8004022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004002:	4a0a      	ldr	r2, [pc, #40]	; (800402c <SysTick_Config+0x40>)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3b01      	subs	r3, #1
 8004008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800400a:	210f      	movs	r1, #15
 800400c:	f04f 30ff 	mov.w	r0, #4294967295
 8004010:	f7ff ff8e 	bl	8003f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004014:	4b05      	ldr	r3, [pc, #20]	; (800402c <SysTick_Config+0x40>)
 8004016:	2200      	movs	r2, #0
 8004018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800401a:	4b04      	ldr	r3, [pc, #16]	; (800402c <SysTick_Config+0x40>)
 800401c:	2207      	movs	r2, #7
 800401e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	e000e010 	.word	0xe000e010

08004030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7ff ff29 	bl	8003e90 <__NVIC_SetPriorityGrouping>
}
 800403e:	bf00      	nop
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004046:	b580      	push	{r7, lr}
 8004048:	b086      	sub	sp, #24
 800404a:	af00      	add	r7, sp, #0
 800404c:	4603      	mov	r3, r0
 800404e:	60b9      	str	r1, [r7, #8]
 8004050:	607a      	str	r2, [r7, #4]
 8004052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004054:	2300      	movs	r3, #0
 8004056:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004058:	f7ff ff3e 	bl	8003ed8 <__NVIC_GetPriorityGrouping>
 800405c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	68b9      	ldr	r1, [r7, #8]
 8004062:	6978      	ldr	r0, [r7, #20]
 8004064:	f7ff ff8e 	bl	8003f84 <NVIC_EncodePriority>
 8004068:	4602      	mov	r2, r0
 800406a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800406e:	4611      	mov	r1, r2
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff ff5d 	bl	8003f30 <__NVIC_SetPriority>
}
 8004076:	bf00      	nop
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b082      	sub	sp, #8
 8004082:	af00      	add	r7, sp, #0
 8004084:	4603      	mov	r3, r0
 8004086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff ff31 	bl	8003ef4 <__NVIC_EnableIRQ>
}
 8004092:	bf00      	nop
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b082      	sub	sp, #8
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7ff ffa2 	bl	8003fec <SysTick_Config>
 80040a8:	4603      	mov	r3, r0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
	...

080040b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b089      	sub	sp, #36	; 0x24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040be:	2300      	movs	r3, #0
 80040c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040c6:	2300      	movs	r3, #0
 80040c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ca:	2300      	movs	r3, #0
 80040cc:	61fb      	str	r3, [r7, #28]
 80040ce:	e159      	b.n	8004384 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040d0:	2201      	movs	r2, #1
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4013      	ands	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	f040 8148 	bne.w	800437e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d005      	beq.n	8004106 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004102:	2b02      	cmp	r3, #2
 8004104:	d130      	bne.n	8004168 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	2203      	movs	r2, #3
 8004112:	fa02 f303 	lsl.w	r3, r2, r3
 8004116:	43db      	mvns	r3, r3
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	4013      	ands	r3, r2
 800411c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	68da      	ldr	r2, [r3, #12]
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	fa02 f303 	lsl.w	r3, r2, r3
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	4313      	orrs	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800413c:	2201      	movs	r2, #1
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	43db      	mvns	r3, r3
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	4013      	ands	r3, r2
 800414a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	091b      	lsrs	r3, r3, #4
 8004152:	f003 0201 	and.w	r2, r3, #1
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	4313      	orrs	r3, r2
 8004160:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f003 0303 	and.w	r3, r3, #3
 8004170:	2b03      	cmp	r3, #3
 8004172:	d017      	beq.n	80041a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	2203      	movs	r2, #3
 8004180:	fa02 f303 	lsl.w	r3, r2, r3
 8004184:	43db      	mvns	r3, r3
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	4013      	ands	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	4313      	orrs	r3, r2
 800419c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f003 0303 	and.w	r3, r3, #3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d123      	bne.n	80041f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	08da      	lsrs	r2, r3, #3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3208      	adds	r2, #8
 80041b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	220f      	movs	r2, #15
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	43db      	mvns	r3, r3
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	4013      	ands	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	691a      	ldr	r2, [r3, #16]
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	f003 0307 	and.w	r3, r3, #7
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	08da      	lsrs	r2, r3, #3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3208      	adds	r2, #8
 80041f2:	69b9      	ldr	r1, [r7, #24]
 80041f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	2203      	movs	r2, #3
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	43db      	mvns	r3, r3
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	4013      	ands	r3, r2
 800420e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f003 0203 	and.w	r2, r3, #3
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	fa02 f303 	lsl.w	r3, r2, r3
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	4313      	orrs	r3, r2
 8004224:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 80a2 	beq.w	800437e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800423a:	2300      	movs	r3, #0
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	4b57      	ldr	r3, [pc, #348]	; (800439c <HAL_GPIO_Init+0x2e8>)
 8004240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004242:	4a56      	ldr	r2, [pc, #344]	; (800439c <HAL_GPIO_Init+0x2e8>)
 8004244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004248:	6453      	str	r3, [r2, #68]	; 0x44
 800424a:	4b54      	ldr	r3, [pc, #336]	; (800439c <HAL_GPIO_Init+0x2e8>)
 800424c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004256:	4a52      	ldr	r2, [pc, #328]	; (80043a0 <HAL_GPIO_Init+0x2ec>)
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	089b      	lsrs	r3, r3, #2
 800425c:	3302      	adds	r3, #2
 800425e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004262:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f003 0303 	and.w	r3, r3, #3
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	220f      	movs	r2, #15
 800426e:	fa02 f303 	lsl.w	r3, r2, r3
 8004272:	43db      	mvns	r3, r3
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	4013      	ands	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a49      	ldr	r2, [pc, #292]	; (80043a4 <HAL_GPIO_Init+0x2f0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d019      	beq.n	80042b6 <HAL_GPIO_Init+0x202>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a48      	ldr	r2, [pc, #288]	; (80043a8 <HAL_GPIO_Init+0x2f4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d013      	beq.n	80042b2 <HAL_GPIO_Init+0x1fe>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a47      	ldr	r2, [pc, #284]	; (80043ac <HAL_GPIO_Init+0x2f8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d00d      	beq.n	80042ae <HAL_GPIO_Init+0x1fa>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a46      	ldr	r2, [pc, #280]	; (80043b0 <HAL_GPIO_Init+0x2fc>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d007      	beq.n	80042aa <HAL_GPIO_Init+0x1f6>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a45      	ldr	r2, [pc, #276]	; (80043b4 <HAL_GPIO_Init+0x300>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d101      	bne.n	80042a6 <HAL_GPIO_Init+0x1f2>
 80042a2:	2304      	movs	r3, #4
 80042a4:	e008      	b.n	80042b8 <HAL_GPIO_Init+0x204>
 80042a6:	2307      	movs	r3, #7
 80042a8:	e006      	b.n	80042b8 <HAL_GPIO_Init+0x204>
 80042aa:	2303      	movs	r3, #3
 80042ac:	e004      	b.n	80042b8 <HAL_GPIO_Init+0x204>
 80042ae:	2302      	movs	r3, #2
 80042b0:	e002      	b.n	80042b8 <HAL_GPIO_Init+0x204>
 80042b2:	2301      	movs	r3, #1
 80042b4:	e000      	b.n	80042b8 <HAL_GPIO_Init+0x204>
 80042b6:	2300      	movs	r3, #0
 80042b8:	69fa      	ldr	r2, [r7, #28]
 80042ba:	f002 0203 	and.w	r2, r2, #3
 80042be:	0092      	lsls	r2, r2, #2
 80042c0:	4093      	lsls	r3, r2
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042c8:	4935      	ldr	r1, [pc, #212]	; (80043a0 <HAL_GPIO_Init+0x2ec>)
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	089b      	lsrs	r3, r3, #2
 80042ce:	3302      	adds	r3, #2
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042d6:	4b38      	ldr	r3, [pc, #224]	; (80043b8 <HAL_GPIO_Init+0x304>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	43db      	mvns	r3, r3
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	4013      	ands	r3, r2
 80042e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042fa:	4a2f      	ldr	r2, [pc, #188]	; (80043b8 <HAL_GPIO_Init+0x304>)
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004300:	4b2d      	ldr	r3, [pc, #180]	; (80043b8 <HAL_GPIO_Init+0x304>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	43db      	mvns	r3, r3
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	4013      	ands	r3, r2
 800430e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d003      	beq.n	8004324 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	4313      	orrs	r3, r2
 8004322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004324:	4a24      	ldr	r2, [pc, #144]	; (80043b8 <HAL_GPIO_Init+0x304>)
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800432a:	4b23      	ldr	r3, [pc, #140]	; (80043b8 <HAL_GPIO_Init+0x304>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	43db      	mvns	r3, r3
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	4013      	ands	r3, r2
 8004338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	4313      	orrs	r3, r2
 800434c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800434e:	4a1a      	ldr	r2, [pc, #104]	; (80043b8 <HAL_GPIO_Init+0x304>)
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004354:	4b18      	ldr	r3, [pc, #96]	; (80043b8 <HAL_GPIO_Init+0x304>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	43db      	mvns	r3, r3
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	4013      	ands	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d003      	beq.n	8004378 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	4313      	orrs	r3, r2
 8004376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004378:	4a0f      	ldr	r2, [pc, #60]	; (80043b8 <HAL_GPIO_Init+0x304>)
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	3301      	adds	r3, #1
 8004382:	61fb      	str	r3, [r7, #28]
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	2b0f      	cmp	r3, #15
 8004388:	f67f aea2 	bls.w	80040d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800438c:	bf00      	nop
 800438e:	bf00      	nop
 8004390:	3724      	adds	r7, #36	; 0x24
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	40023800 	.word	0x40023800
 80043a0:	40013800 	.word	0x40013800
 80043a4:	40020000 	.word	0x40020000
 80043a8:	40020400 	.word	0x40020400
 80043ac:	40020800 	.word	0x40020800
 80043b0:	40020c00 	.word	0x40020c00
 80043b4:	40021000 	.word	0x40021000
 80043b8:	40013c00 	.word	0x40013c00

080043bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	460b      	mov	r3, r1
 80043c6:	807b      	strh	r3, [r7, #2]
 80043c8:	4613      	mov	r3, r2
 80043ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043cc:	787b      	ldrb	r3, [r7, #1]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043d2:	887a      	ldrh	r2, [r7, #2]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043d8:	e003      	b.n	80043e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043da:	887b      	ldrh	r3, [r7, #2]
 80043dc:	041a      	lsls	r2, r3, #16
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	619a      	str	r2, [r3, #24]
}
 80043e2:	bf00      	nop
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
	...

080043f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e12b      	b.n	800465a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d106      	bne.n	800441c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7fd ff38 	bl	800228c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2224      	movs	r2, #36	; 0x24
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0201 	bic.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004442:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004452:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004454:	f000 fd80 	bl	8004f58 <HAL_RCC_GetPCLK1Freq>
 8004458:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	4a81      	ldr	r2, [pc, #516]	; (8004664 <HAL_I2C_Init+0x274>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d807      	bhi.n	8004474 <HAL_I2C_Init+0x84>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4a80      	ldr	r2, [pc, #512]	; (8004668 <HAL_I2C_Init+0x278>)
 8004468:	4293      	cmp	r3, r2
 800446a:	bf94      	ite	ls
 800446c:	2301      	movls	r3, #1
 800446e:	2300      	movhi	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	e006      	b.n	8004482 <HAL_I2C_Init+0x92>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4a7d      	ldr	r2, [pc, #500]	; (800466c <HAL_I2C_Init+0x27c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	bf94      	ite	ls
 800447c:	2301      	movls	r3, #1
 800447e:	2300      	movhi	r3, #0
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e0e7      	b.n	800465a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4a78      	ldr	r2, [pc, #480]	; (8004670 <HAL_I2C_Init+0x280>)
 800448e:	fba2 2303 	umull	r2, r3, r2, r3
 8004492:	0c9b      	lsrs	r3, r3, #18
 8004494:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	4a6a      	ldr	r2, [pc, #424]	; (8004664 <HAL_I2C_Init+0x274>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d802      	bhi.n	80044c4 <HAL_I2C_Init+0xd4>
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	3301      	adds	r3, #1
 80044c2:	e009      	b.n	80044d8 <HAL_I2C_Init+0xe8>
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80044ca:	fb02 f303 	mul.w	r3, r2, r3
 80044ce:	4a69      	ldr	r2, [pc, #420]	; (8004674 <HAL_I2C_Init+0x284>)
 80044d0:	fba2 2303 	umull	r2, r3, r2, r3
 80044d4:	099b      	lsrs	r3, r3, #6
 80044d6:	3301      	adds	r3, #1
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6812      	ldr	r2, [r2, #0]
 80044dc:	430b      	orrs	r3, r1
 80044de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80044ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	495c      	ldr	r1, [pc, #368]	; (8004664 <HAL_I2C_Init+0x274>)
 80044f4:	428b      	cmp	r3, r1
 80044f6:	d819      	bhi.n	800452c <HAL_I2C_Init+0x13c>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	1e59      	subs	r1, r3, #1
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	fbb1 f3f3 	udiv	r3, r1, r3
 8004506:	1c59      	adds	r1, r3, #1
 8004508:	f640 73fc 	movw	r3, #4092	; 0xffc
 800450c:	400b      	ands	r3, r1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <HAL_I2C_Init+0x138>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	1e59      	subs	r1, r3, #1
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004520:	3301      	adds	r3, #1
 8004522:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004526:	e051      	b.n	80045cc <HAL_I2C_Init+0x1dc>
 8004528:	2304      	movs	r3, #4
 800452a:	e04f      	b.n	80045cc <HAL_I2C_Init+0x1dc>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d111      	bne.n	8004558 <HAL_I2C_Init+0x168>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	1e58      	subs	r0, r3, #1
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6859      	ldr	r1, [r3, #4]
 800453c:	460b      	mov	r3, r1
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	440b      	add	r3, r1
 8004542:	fbb0 f3f3 	udiv	r3, r0, r3
 8004546:	3301      	adds	r3, #1
 8004548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800454c:	2b00      	cmp	r3, #0
 800454e:	bf0c      	ite	eq
 8004550:	2301      	moveq	r3, #1
 8004552:	2300      	movne	r3, #0
 8004554:	b2db      	uxtb	r3, r3
 8004556:	e012      	b.n	800457e <HAL_I2C_Init+0x18e>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	1e58      	subs	r0, r3, #1
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6859      	ldr	r1, [r3, #4]
 8004560:	460b      	mov	r3, r1
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	0099      	lsls	r1, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	fbb0 f3f3 	udiv	r3, r0, r3
 800456e:	3301      	adds	r3, #1
 8004570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004574:	2b00      	cmp	r3, #0
 8004576:	bf0c      	ite	eq
 8004578:	2301      	moveq	r3, #1
 800457a:	2300      	movne	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <HAL_I2C_Init+0x196>
 8004582:	2301      	movs	r3, #1
 8004584:	e022      	b.n	80045cc <HAL_I2C_Init+0x1dc>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10e      	bne.n	80045ac <HAL_I2C_Init+0x1bc>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	1e58      	subs	r0, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6859      	ldr	r1, [r3, #4]
 8004596:	460b      	mov	r3, r1
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	440b      	add	r3, r1
 800459c:	fbb0 f3f3 	udiv	r3, r0, r3
 80045a0:	3301      	adds	r3, #1
 80045a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045aa:	e00f      	b.n	80045cc <HAL_I2C_Init+0x1dc>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	1e58      	subs	r0, r3, #1
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6859      	ldr	r1, [r3, #4]
 80045b4:	460b      	mov	r3, r1
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	440b      	add	r3, r1
 80045ba:	0099      	lsls	r1, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	fbb0 f3f3 	udiv	r3, r0, r3
 80045c2:	3301      	adds	r3, #1
 80045c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	6809      	ldr	r1, [r1, #0]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	69da      	ldr	r2, [r3, #28]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	431a      	orrs	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80045fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	6911      	ldr	r1, [r2, #16]
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	68d2      	ldr	r2, [r2, #12]
 8004606:	4311      	orrs	r1, r2
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6812      	ldr	r2, [r2, #0]
 800460c:	430b      	orrs	r3, r1
 800460e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	695a      	ldr	r2, [r3, #20]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f042 0201 	orr.w	r2, r2, #1
 800463a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2220      	movs	r2, #32
 8004646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	000186a0 	.word	0x000186a0
 8004668:	001e847f 	.word	0x001e847f
 800466c:	003d08ff 	.word	0x003d08ff
 8004670:	431bde83 	.word	0x431bde83
 8004674:	10624dd3 	.word	0x10624dd3

08004678 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e267      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d075      	beq.n	8004782 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004696:	4b88      	ldr	r3, [pc, #544]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 030c 	and.w	r3, r3, #12
 800469e:	2b04      	cmp	r3, #4
 80046a0:	d00c      	beq.n	80046bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046a2:	4b85      	ldr	r3, [pc, #532]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046aa:	2b08      	cmp	r3, #8
 80046ac:	d112      	bne.n	80046d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ae:	4b82      	ldr	r3, [pc, #520]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046ba:	d10b      	bne.n	80046d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046bc:	4b7e      	ldr	r3, [pc, #504]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d05b      	beq.n	8004780 <HAL_RCC_OscConfig+0x108>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d157      	bne.n	8004780 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e242      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046dc:	d106      	bne.n	80046ec <HAL_RCC_OscConfig+0x74>
 80046de:	4b76      	ldr	r3, [pc, #472]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a75      	ldr	r2, [pc, #468]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 80046e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e8:	6013      	str	r3, [r2, #0]
 80046ea:	e01d      	b.n	8004728 <HAL_RCC_OscConfig+0xb0>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046f4:	d10c      	bne.n	8004710 <HAL_RCC_OscConfig+0x98>
 80046f6:	4b70      	ldr	r3, [pc, #448]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a6f      	ldr	r2, [pc, #444]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 80046fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	4b6d      	ldr	r3, [pc, #436]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a6c      	ldr	r2, [pc, #432]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 8004708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800470c:	6013      	str	r3, [r2, #0]
 800470e:	e00b      	b.n	8004728 <HAL_RCC_OscConfig+0xb0>
 8004710:	4b69      	ldr	r3, [pc, #420]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a68      	ldr	r2, [pc, #416]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 8004716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800471a:	6013      	str	r3, [r2, #0]
 800471c:	4b66      	ldr	r3, [pc, #408]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a65      	ldr	r2, [pc, #404]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 8004722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d013      	beq.n	8004758 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004730:	f7ff fba2 	bl	8003e78 <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004738:	f7ff fb9e 	bl	8003e78 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b64      	cmp	r3, #100	; 0x64
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e207      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800474a:	4b5b      	ldr	r3, [pc, #364]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0f0      	beq.n	8004738 <HAL_RCC_OscConfig+0xc0>
 8004756:	e014      	b.n	8004782 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004758:	f7ff fb8e 	bl	8003e78 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004760:	f7ff fb8a 	bl	8003e78 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b64      	cmp	r3, #100	; 0x64
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e1f3      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004772:	4b51      	ldr	r3, [pc, #324]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1f0      	bne.n	8004760 <HAL_RCC_OscConfig+0xe8>
 800477e:	e000      	b.n	8004782 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d063      	beq.n	8004856 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800478e:	4b4a      	ldr	r3, [pc, #296]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 030c 	and.w	r3, r3, #12
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00b      	beq.n	80047b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800479a:	4b47      	ldr	r3, [pc, #284]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047a2:	2b08      	cmp	r3, #8
 80047a4:	d11c      	bne.n	80047e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047a6:	4b44      	ldr	r3, [pc, #272]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d116      	bne.n	80047e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047b2:	4b41      	ldr	r3, [pc, #260]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d005      	beq.n	80047ca <HAL_RCC_OscConfig+0x152>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d001      	beq.n	80047ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e1c7      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ca:	4b3b      	ldr	r3, [pc, #236]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	4937      	ldr	r1, [pc, #220]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047de:	e03a      	b.n	8004856 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d020      	beq.n	800482a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047e8:	4b34      	ldr	r3, [pc, #208]	; (80048bc <HAL_RCC_OscConfig+0x244>)
 80047ea:	2201      	movs	r2, #1
 80047ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ee:	f7ff fb43 	bl	8003e78 <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f4:	e008      	b.n	8004808 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047f6:	f7ff fb3f 	bl	8003e78 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e1a8      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004808:	4b2b      	ldr	r3, [pc, #172]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0f0      	beq.n	80047f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004814:	4b28      	ldr	r3, [pc, #160]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	00db      	lsls	r3, r3, #3
 8004822:	4925      	ldr	r1, [pc, #148]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 8004824:	4313      	orrs	r3, r2
 8004826:	600b      	str	r3, [r1, #0]
 8004828:	e015      	b.n	8004856 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800482a:	4b24      	ldr	r3, [pc, #144]	; (80048bc <HAL_RCC_OscConfig+0x244>)
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004830:	f7ff fb22 	bl	8003e78 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004838:	f7ff fb1e 	bl	8003e78 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e187      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800484a:	4b1b      	ldr	r3, [pc, #108]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1f0      	bne.n	8004838 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b00      	cmp	r3, #0
 8004860:	d036      	beq.n	80048d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d016      	beq.n	8004898 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800486a:	4b15      	ldr	r3, [pc, #84]	; (80048c0 <HAL_RCC_OscConfig+0x248>)
 800486c:	2201      	movs	r2, #1
 800486e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004870:	f7ff fb02 	bl	8003e78 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004878:	f7ff fafe 	bl	8003e78 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e167      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800488a:	4b0b      	ldr	r3, [pc, #44]	; (80048b8 <HAL_RCC_OscConfig+0x240>)
 800488c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0f0      	beq.n	8004878 <HAL_RCC_OscConfig+0x200>
 8004896:	e01b      	b.n	80048d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004898:	4b09      	ldr	r3, [pc, #36]	; (80048c0 <HAL_RCC_OscConfig+0x248>)
 800489a:	2200      	movs	r2, #0
 800489c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800489e:	f7ff faeb 	bl	8003e78 <HAL_GetTick>
 80048a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048a4:	e00e      	b.n	80048c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048a6:	f7ff fae7 	bl	8003e78 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d907      	bls.n	80048c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e150      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
 80048b8:	40023800 	.word	0x40023800
 80048bc:	42470000 	.word	0x42470000
 80048c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048c4:	4b88      	ldr	r3, [pc, #544]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 80048c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1ea      	bne.n	80048a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 8097 	beq.w	8004a0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048de:	2300      	movs	r3, #0
 80048e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048e2:	4b81      	ldr	r3, [pc, #516]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10f      	bne.n	800490e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ee:	2300      	movs	r3, #0
 80048f0:	60bb      	str	r3, [r7, #8]
 80048f2:	4b7d      	ldr	r3, [pc, #500]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	4a7c      	ldr	r2, [pc, #496]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 80048f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048fc:	6413      	str	r3, [r2, #64]	; 0x40
 80048fe:	4b7a      	ldr	r3, [pc, #488]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004906:	60bb      	str	r3, [r7, #8]
 8004908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800490a:	2301      	movs	r3, #1
 800490c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800490e:	4b77      	ldr	r3, [pc, #476]	; (8004aec <HAL_RCC_OscConfig+0x474>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004916:	2b00      	cmp	r3, #0
 8004918:	d118      	bne.n	800494c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800491a:	4b74      	ldr	r3, [pc, #464]	; (8004aec <HAL_RCC_OscConfig+0x474>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a73      	ldr	r2, [pc, #460]	; (8004aec <HAL_RCC_OscConfig+0x474>)
 8004920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004924:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004926:	f7ff faa7 	bl	8003e78 <HAL_GetTick>
 800492a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800492c:	e008      	b.n	8004940 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800492e:	f7ff faa3 	bl	8003e78 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e10c      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004940:	4b6a      	ldr	r3, [pc, #424]	; (8004aec <HAL_RCC_OscConfig+0x474>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0f0      	beq.n	800492e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d106      	bne.n	8004962 <HAL_RCC_OscConfig+0x2ea>
 8004954:	4b64      	ldr	r3, [pc, #400]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004958:	4a63      	ldr	r2, [pc, #396]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 800495a:	f043 0301 	orr.w	r3, r3, #1
 800495e:	6713      	str	r3, [r2, #112]	; 0x70
 8004960:	e01c      	b.n	800499c <HAL_RCC_OscConfig+0x324>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	2b05      	cmp	r3, #5
 8004968:	d10c      	bne.n	8004984 <HAL_RCC_OscConfig+0x30c>
 800496a:	4b5f      	ldr	r3, [pc, #380]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 800496c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496e:	4a5e      	ldr	r2, [pc, #376]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004970:	f043 0304 	orr.w	r3, r3, #4
 8004974:	6713      	str	r3, [r2, #112]	; 0x70
 8004976:	4b5c      	ldr	r3, [pc, #368]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497a:	4a5b      	ldr	r2, [pc, #364]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 800497c:	f043 0301 	orr.w	r3, r3, #1
 8004980:	6713      	str	r3, [r2, #112]	; 0x70
 8004982:	e00b      	b.n	800499c <HAL_RCC_OscConfig+0x324>
 8004984:	4b58      	ldr	r3, [pc, #352]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004988:	4a57      	ldr	r2, [pc, #348]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 800498a:	f023 0301 	bic.w	r3, r3, #1
 800498e:	6713      	str	r3, [r2, #112]	; 0x70
 8004990:	4b55      	ldr	r3, [pc, #340]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004994:	4a54      	ldr	r2, [pc, #336]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004996:	f023 0304 	bic.w	r3, r3, #4
 800499a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d015      	beq.n	80049d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a4:	f7ff fa68 	bl	8003e78 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049aa:	e00a      	b.n	80049c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049ac:	f7ff fa64 	bl	8003e78 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e0cb      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c2:	4b49      	ldr	r3, [pc, #292]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 80049c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0ee      	beq.n	80049ac <HAL_RCC_OscConfig+0x334>
 80049ce:	e014      	b.n	80049fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049d0:	f7ff fa52 	bl	8003e78 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049d6:	e00a      	b.n	80049ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049d8:	f7ff fa4e 	bl	8003e78 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e0b5      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ee:	4b3e      	ldr	r3, [pc, #248]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 80049f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1ee      	bne.n	80049d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049fa:	7dfb      	ldrb	r3, [r7, #23]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d105      	bne.n	8004a0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a00:	4b39      	ldr	r3, [pc, #228]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a04:	4a38      	ldr	r2, [pc, #224]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004a06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 80a1 	beq.w	8004b58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a16:	4b34      	ldr	r3, [pc, #208]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 030c 	and.w	r3, r3, #12
 8004a1e:	2b08      	cmp	r3, #8
 8004a20:	d05c      	beq.n	8004adc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d141      	bne.n	8004aae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a2a:	4b31      	ldr	r3, [pc, #196]	; (8004af0 <HAL_RCC_OscConfig+0x478>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a30:	f7ff fa22 	bl	8003e78 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a38:	f7ff fa1e 	bl	8003e78 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e087      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a4a:	4b27      	ldr	r3, [pc, #156]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1f0      	bne.n	8004a38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	69da      	ldr	r2, [r3, #28]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	019b      	lsls	r3, r3, #6
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6c:	085b      	lsrs	r3, r3, #1
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	041b      	lsls	r3, r3, #16
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a78:	061b      	lsls	r3, r3, #24
 8004a7a:	491b      	ldr	r1, [pc, #108]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a80:	4b1b      	ldr	r3, [pc, #108]	; (8004af0 <HAL_RCC_OscConfig+0x478>)
 8004a82:	2201      	movs	r2, #1
 8004a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a86:	f7ff f9f7 	bl	8003e78 <HAL_GetTick>
 8004a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a8e:	f7ff f9f3 	bl	8003e78 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e05c      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aa0:	4b11      	ldr	r3, [pc, #68]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0f0      	beq.n	8004a8e <HAL_RCC_OscConfig+0x416>
 8004aac:	e054      	b.n	8004b58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aae:	4b10      	ldr	r3, [pc, #64]	; (8004af0 <HAL_RCC_OscConfig+0x478>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab4:	f7ff f9e0 	bl	8003e78 <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004abc:	f7ff f9dc 	bl	8003e78 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e045      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ace:	4b06      	ldr	r3, [pc, #24]	; (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f0      	bne.n	8004abc <HAL_RCC_OscConfig+0x444>
 8004ada:	e03d      	b.n	8004b58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d107      	bne.n	8004af4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e038      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	40007000 	.word	0x40007000
 8004af0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004af4:	4b1b      	ldr	r3, [pc, #108]	; (8004b64 <HAL_RCC_OscConfig+0x4ec>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d028      	beq.n	8004b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d121      	bne.n	8004b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d11a      	bne.n	8004b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b24:	4013      	ands	r3, r2
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d111      	bne.n	8004b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3a:	085b      	lsrs	r3, r3, #1
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d107      	bne.n	8004b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d001      	beq.n	8004b58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e000      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3718      	adds	r7, #24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	40023800 	.word	0x40023800

08004b68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e0cc      	b.n	8004d16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b7c:	4b68      	ldr	r3, [pc, #416]	; (8004d20 <HAL_RCC_ClockConfig+0x1b8>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0307 	and.w	r3, r3, #7
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d90c      	bls.n	8004ba4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b8a:	4b65      	ldr	r3, [pc, #404]	; (8004d20 <HAL_RCC_ClockConfig+0x1b8>)
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b92:	4b63      	ldr	r3, [pc, #396]	; (8004d20 <HAL_RCC_ClockConfig+0x1b8>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0307 	and.w	r3, r3, #7
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d001      	beq.n	8004ba4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e0b8      	b.n	8004d16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d020      	beq.n	8004bf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0304 	and.w	r3, r3, #4
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d005      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bbc:	4b59      	ldr	r3, [pc, #356]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	4a58      	ldr	r2, [pc, #352]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0308 	and.w	r3, r3, #8
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d005      	beq.n	8004be0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bd4:	4b53      	ldr	r3, [pc, #332]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	4a52      	ldr	r2, [pc, #328]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004bda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004be0:	4b50      	ldr	r3, [pc, #320]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	494d      	ldr	r1, [pc, #308]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d044      	beq.n	8004c88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d107      	bne.n	8004c16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c06:	4b47      	ldr	r3, [pc, #284]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d119      	bne.n	8004c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e07f      	b.n	8004d16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d003      	beq.n	8004c26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	d107      	bne.n	8004c36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c26:	4b3f      	ldr	r3, [pc, #252]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d109      	bne.n	8004c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e06f      	b.n	8004d16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c36:	4b3b      	ldr	r3, [pc, #236]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e067      	b.n	8004d16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c46:	4b37      	ldr	r3, [pc, #220]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f023 0203 	bic.w	r2, r3, #3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	4934      	ldr	r1, [pc, #208]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c58:	f7ff f90e 	bl	8003e78 <HAL_GetTick>
 8004c5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c5e:	e00a      	b.n	8004c76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c60:	f7ff f90a 	bl	8003e78 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e04f      	b.n	8004d16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c76:	4b2b      	ldr	r3, [pc, #172]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 020c 	and.w	r2, r3, #12
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d1eb      	bne.n	8004c60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c88:	4b25      	ldr	r3, [pc, #148]	; (8004d20 <HAL_RCC_ClockConfig+0x1b8>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d20c      	bcs.n	8004cb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c96:	4b22      	ldr	r3, [pc, #136]	; (8004d20 <HAL_RCC_ClockConfig+0x1b8>)
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c9e:	4b20      	ldr	r3, [pc, #128]	; (8004d20 <HAL_RCC_ClockConfig+0x1b8>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0307 	and.w	r3, r3, #7
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d001      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e032      	b.n	8004d16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d008      	beq.n	8004cce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cbc:	4b19      	ldr	r3, [pc, #100]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	4916      	ldr	r1, [pc, #88]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d009      	beq.n	8004cee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cda:	4b12      	ldr	r3, [pc, #72]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	490e      	ldr	r1, [pc, #56]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cee:	f000 f821 	bl	8004d34 <HAL_RCC_GetSysClockFreq>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	091b      	lsrs	r3, r3, #4
 8004cfa:	f003 030f 	and.w	r3, r3, #15
 8004cfe:	490a      	ldr	r1, [pc, #40]	; (8004d28 <HAL_RCC_ClockConfig+0x1c0>)
 8004d00:	5ccb      	ldrb	r3, [r1, r3]
 8004d02:	fa22 f303 	lsr.w	r3, r2, r3
 8004d06:	4a09      	ldr	r2, [pc, #36]	; (8004d2c <HAL_RCC_ClockConfig+0x1c4>)
 8004d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d0a:	4b09      	ldr	r3, [pc, #36]	; (8004d30 <HAL_RCC_ClockConfig+0x1c8>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7ff f86e 	bl	8003df0 <HAL_InitTick>

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	40023c00 	.word	0x40023c00
 8004d24:	40023800 	.word	0x40023800
 8004d28:	08007e7c 	.word	0x08007e7c
 8004d2c:	20000010 	.word	0x20000010
 8004d30:	20000014 	.word	0x20000014

08004d34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d38:	b094      	sub	sp, #80	; 0x50
 8004d3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	647b      	str	r3, [r7, #68]	; 0x44
 8004d40:	2300      	movs	r3, #0
 8004d42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d44:	2300      	movs	r3, #0
 8004d46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d4c:	4b79      	ldr	r3, [pc, #484]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f003 030c 	and.w	r3, r3, #12
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d00d      	beq.n	8004d74 <HAL_RCC_GetSysClockFreq+0x40>
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	f200 80e1 	bhi.w	8004f20 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d002      	beq.n	8004d68 <HAL_RCC_GetSysClockFreq+0x34>
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d003      	beq.n	8004d6e <HAL_RCC_GetSysClockFreq+0x3a>
 8004d66:	e0db      	b.n	8004f20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d68:	4b73      	ldr	r3, [pc, #460]	; (8004f38 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d6a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004d6c:	e0db      	b.n	8004f26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d6e:	4b73      	ldr	r3, [pc, #460]	; (8004f3c <HAL_RCC_GetSysClockFreq+0x208>)
 8004d70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d72:	e0d8      	b.n	8004f26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d74:	4b6f      	ldr	r3, [pc, #444]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d7c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d7e:	4b6d      	ldr	r3, [pc, #436]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d063      	beq.n	8004e52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d8a:	4b6a      	ldr	r3, [pc, #424]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	099b      	lsrs	r3, r3, #6
 8004d90:	2200      	movs	r2, #0
 8004d92:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d9c:	633b      	str	r3, [r7, #48]	; 0x30
 8004d9e:	2300      	movs	r3, #0
 8004da0:	637b      	str	r3, [r7, #52]	; 0x34
 8004da2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004da6:	4622      	mov	r2, r4
 8004da8:	462b      	mov	r3, r5
 8004daa:	f04f 0000 	mov.w	r0, #0
 8004dae:	f04f 0100 	mov.w	r1, #0
 8004db2:	0159      	lsls	r1, r3, #5
 8004db4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004db8:	0150      	lsls	r0, r2, #5
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4621      	mov	r1, r4
 8004dc0:	1a51      	subs	r1, r2, r1
 8004dc2:	6139      	str	r1, [r7, #16]
 8004dc4:	4629      	mov	r1, r5
 8004dc6:	eb63 0301 	sbc.w	r3, r3, r1
 8004dca:	617b      	str	r3, [r7, #20]
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dd8:	4659      	mov	r1, fp
 8004dda:	018b      	lsls	r3, r1, #6
 8004ddc:	4651      	mov	r1, sl
 8004dde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004de2:	4651      	mov	r1, sl
 8004de4:	018a      	lsls	r2, r1, #6
 8004de6:	4651      	mov	r1, sl
 8004de8:	ebb2 0801 	subs.w	r8, r2, r1
 8004dec:	4659      	mov	r1, fp
 8004dee:	eb63 0901 	sbc.w	r9, r3, r1
 8004df2:	f04f 0200 	mov.w	r2, #0
 8004df6:	f04f 0300 	mov.w	r3, #0
 8004dfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e06:	4690      	mov	r8, r2
 8004e08:	4699      	mov	r9, r3
 8004e0a:	4623      	mov	r3, r4
 8004e0c:	eb18 0303 	adds.w	r3, r8, r3
 8004e10:	60bb      	str	r3, [r7, #8]
 8004e12:	462b      	mov	r3, r5
 8004e14:	eb49 0303 	adc.w	r3, r9, r3
 8004e18:	60fb      	str	r3, [r7, #12]
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	f04f 0300 	mov.w	r3, #0
 8004e22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e26:	4629      	mov	r1, r5
 8004e28:	024b      	lsls	r3, r1, #9
 8004e2a:	4621      	mov	r1, r4
 8004e2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e30:	4621      	mov	r1, r4
 8004e32:	024a      	lsls	r2, r1, #9
 8004e34:	4610      	mov	r0, r2
 8004e36:	4619      	mov	r1, r3
 8004e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e44:	f7fb ff92 	bl	8000d6c <__aeabi_uldivmod>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e50:	e058      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e52:	4b38      	ldr	r3, [pc, #224]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	099b      	lsrs	r3, r3, #6
 8004e58:	2200      	movs	r2, #0
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	4611      	mov	r1, r2
 8004e5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e62:	623b      	str	r3, [r7, #32]
 8004e64:	2300      	movs	r3, #0
 8004e66:	627b      	str	r3, [r7, #36]	; 0x24
 8004e68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e6c:	4642      	mov	r2, r8
 8004e6e:	464b      	mov	r3, r9
 8004e70:	f04f 0000 	mov.w	r0, #0
 8004e74:	f04f 0100 	mov.w	r1, #0
 8004e78:	0159      	lsls	r1, r3, #5
 8004e7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e7e:	0150      	lsls	r0, r2, #5
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4641      	mov	r1, r8
 8004e86:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e8a:	4649      	mov	r1, r9
 8004e8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e90:	f04f 0200 	mov.w	r2, #0
 8004e94:	f04f 0300 	mov.w	r3, #0
 8004e98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ea0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ea4:	ebb2 040a 	subs.w	r4, r2, sl
 8004ea8:	eb63 050b 	sbc.w	r5, r3, fp
 8004eac:	f04f 0200 	mov.w	r2, #0
 8004eb0:	f04f 0300 	mov.w	r3, #0
 8004eb4:	00eb      	lsls	r3, r5, #3
 8004eb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004eba:	00e2      	lsls	r2, r4, #3
 8004ebc:	4614      	mov	r4, r2
 8004ebe:	461d      	mov	r5, r3
 8004ec0:	4643      	mov	r3, r8
 8004ec2:	18e3      	adds	r3, r4, r3
 8004ec4:	603b      	str	r3, [r7, #0]
 8004ec6:	464b      	mov	r3, r9
 8004ec8:	eb45 0303 	adc.w	r3, r5, r3
 8004ecc:	607b      	str	r3, [r7, #4]
 8004ece:	f04f 0200 	mov.w	r2, #0
 8004ed2:	f04f 0300 	mov.w	r3, #0
 8004ed6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004eda:	4629      	mov	r1, r5
 8004edc:	028b      	lsls	r3, r1, #10
 8004ede:	4621      	mov	r1, r4
 8004ee0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ee4:	4621      	mov	r1, r4
 8004ee6:	028a      	lsls	r2, r1, #10
 8004ee8:	4610      	mov	r0, r2
 8004eea:	4619      	mov	r1, r3
 8004eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eee:	2200      	movs	r2, #0
 8004ef0:	61bb      	str	r3, [r7, #24]
 8004ef2:	61fa      	str	r2, [r7, #28]
 8004ef4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ef8:	f7fb ff38 	bl	8000d6c <__aeabi_uldivmod>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4613      	mov	r3, r2
 8004f02:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f04:	4b0b      	ldr	r3, [pc, #44]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	0c1b      	lsrs	r3, r3, #16
 8004f0a:	f003 0303 	and.w	r3, r3, #3
 8004f0e:	3301      	adds	r3, #1
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004f14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f1e:	e002      	b.n	8004f26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f20:	4b05      	ldr	r3, [pc, #20]	; (8004f38 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3750      	adds	r7, #80	; 0x50
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f32:	bf00      	nop
 8004f34:	40023800 	.word	0x40023800
 8004f38:	00f42400 	.word	0x00f42400
 8004f3c:	007a1200 	.word	0x007a1200

08004f40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f44:	4b03      	ldr	r3, [pc, #12]	; (8004f54 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f46:	681b      	ldr	r3, [r3, #0]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	20000010 	.word	0x20000010

08004f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f5c:	f7ff fff0 	bl	8004f40 <HAL_RCC_GetHCLKFreq>
 8004f60:	4602      	mov	r2, r0
 8004f62:	4b05      	ldr	r3, [pc, #20]	; (8004f78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	0a9b      	lsrs	r3, r3, #10
 8004f68:	f003 0307 	and.w	r3, r3, #7
 8004f6c:	4903      	ldr	r1, [pc, #12]	; (8004f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f6e:	5ccb      	ldrb	r3, [r1, r3]
 8004f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	40023800 	.word	0x40023800
 8004f7c:	08007e8c 	.word	0x08007e8c

08004f80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f84:	f7ff ffdc 	bl	8004f40 <HAL_RCC_GetHCLKFreq>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	4b05      	ldr	r3, [pc, #20]	; (8004fa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	0b5b      	lsrs	r3, r3, #13
 8004f90:	f003 0307 	and.w	r3, r3, #7
 8004f94:	4903      	ldr	r1, [pc, #12]	; (8004fa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f96:	5ccb      	ldrb	r3, [r1, r3]
 8004f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	08007e8c 	.word	0x08007e8c

08004fa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e041      	b.n	800503e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d106      	bne.n	8004fd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7fd fd96 	bl	8002b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4610      	mov	r0, r2
 8004fe8:	f000 fd88 	bl	8005afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
	...

08005048 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b01      	cmp	r3, #1
 800505a:	d001      	beq.n	8005060 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e044      	b.n	80050ea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68da      	ldr	r2, [r3, #12]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0201 	orr.w	r2, r2, #1
 8005076:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a1e      	ldr	r2, [pc, #120]	; (80050f8 <HAL_TIM_Base_Start_IT+0xb0>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d018      	beq.n	80050b4 <HAL_TIM_Base_Start_IT+0x6c>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800508a:	d013      	beq.n	80050b4 <HAL_TIM_Base_Start_IT+0x6c>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a1a      	ldr	r2, [pc, #104]	; (80050fc <HAL_TIM_Base_Start_IT+0xb4>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d00e      	beq.n	80050b4 <HAL_TIM_Base_Start_IT+0x6c>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a19      	ldr	r2, [pc, #100]	; (8005100 <HAL_TIM_Base_Start_IT+0xb8>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d009      	beq.n	80050b4 <HAL_TIM_Base_Start_IT+0x6c>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a17      	ldr	r2, [pc, #92]	; (8005104 <HAL_TIM_Base_Start_IT+0xbc>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d004      	beq.n	80050b4 <HAL_TIM_Base_Start_IT+0x6c>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a16      	ldr	r2, [pc, #88]	; (8005108 <HAL_TIM_Base_Start_IT+0xc0>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d111      	bne.n	80050d8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2b06      	cmp	r3, #6
 80050c4:	d010      	beq.n	80050e8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f042 0201 	orr.w	r2, r2, #1
 80050d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d6:	e007      	b.n	80050e8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0201 	orr.w	r2, r2, #1
 80050e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	40010000 	.word	0x40010000
 80050fc:	40000400 	.word	0x40000400
 8005100:	40000800 	.word	0x40000800
 8005104:	40000c00 	.word	0x40000c00
 8005108:	40014000 	.word	0x40014000

0800510c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e041      	b.n	80051a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d106      	bne.n	8005138 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f839 	bl	80051aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	3304      	adds	r3, #4
 8005148:	4619      	mov	r1, r3
 800514a:	4610      	mov	r0, r2
 800514c:	f000 fcd6 	bl	8005afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b083      	sub	sp, #12
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051b2:	bf00      	nop
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
	...

080051c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d109      	bne.n	80051e4 <HAL_TIM_PWM_Start+0x24>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b01      	cmp	r3, #1
 80051da:	bf14      	ite	ne
 80051dc:	2301      	movne	r3, #1
 80051de:	2300      	moveq	r3, #0
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	e022      	b.n	800522a <HAL_TIM_PWM_Start+0x6a>
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	2b04      	cmp	r3, #4
 80051e8:	d109      	bne.n	80051fe <HAL_TIM_PWM_Start+0x3e>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	bf14      	ite	ne
 80051f6:	2301      	movne	r3, #1
 80051f8:	2300      	moveq	r3, #0
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	e015      	b.n	800522a <HAL_TIM_PWM_Start+0x6a>
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b08      	cmp	r3, #8
 8005202:	d109      	bne.n	8005218 <HAL_TIM_PWM_Start+0x58>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b01      	cmp	r3, #1
 800520e:	bf14      	ite	ne
 8005210:	2301      	movne	r3, #1
 8005212:	2300      	moveq	r3, #0
 8005214:	b2db      	uxtb	r3, r3
 8005216:	e008      	b.n	800522a <HAL_TIM_PWM_Start+0x6a>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b01      	cmp	r3, #1
 8005222:	bf14      	ite	ne
 8005224:	2301      	movne	r3, #1
 8005226:	2300      	moveq	r3, #0
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e068      	b.n	8005304 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d104      	bne.n	8005242 <HAL_TIM_PWM_Start+0x82>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005240:	e013      	b.n	800526a <HAL_TIM_PWM_Start+0xaa>
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b04      	cmp	r3, #4
 8005246:	d104      	bne.n	8005252 <HAL_TIM_PWM_Start+0x92>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005250:	e00b      	b.n	800526a <HAL_TIM_PWM_Start+0xaa>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b08      	cmp	r3, #8
 8005256:	d104      	bne.n	8005262 <HAL_TIM_PWM_Start+0xa2>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2202      	movs	r2, #2
 800525c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005260:	e003      	b.n	800526a <HAL_TIM_PWM_Start+0xaa>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2202      	movs	r2, #2
 8005266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2201      	movs	r2, #1
 8005270:	6839      	ldr	r1, [r7, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f000 fee8 	bl	8006048 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a23      	ldr	r2, [pc, #140]	; (800530c <HAL_TIM_PWM_Start+0x14c>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d107      	bne.n	8005292 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005290:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a1d      	ldr	r2, [pc, #116]	; (800530c <HAL_TIM_PWM_Start+0x14c>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d018      	beq.n	80052ce <HAL_TIM_PWM_Start+0x10e>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a4:	d013      	beq.n	80052ce <HAL_TIM_PWM_Start+0x10e>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a19      	ldr	r2, [pc, #100]	; (8005310 <HAL_TIM_PWM_Start+0x150>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d00e      	beq.n	80052ce <HAL_TIM_PWM_Start+0x10e>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a17      	ldr	r2, [pc, #92]	; (8005314 <HAL_TIM_PWM_Start+0x154>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d009      	beq.n	80052ce <HAL_TIM_PWM_Start+0x10e>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a16      	ldr	r2, [pc, #88]	; (8005318 <HAL_TIM_PWM_Start+0x158>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d004      	beq.n	80052ce <HAL_TIM_PWM_Start+0x10e>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a14      	ldr	r2, [pc, #80]	; (800531c <HAL_TIM_PWM_Start+0x15c>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d111      	bne.n	80052f2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f003 0307 	and.w	r3, r3, #7
 80052d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2b06      	cmp	r3, #6
 80052de:	d010      	beq.n	8005302 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 0201 	orr.w	r2, r2, #1
 80052ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f0:	e007      	b.n	8005302 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f042 0201 	orr.w	r2, r2, #1
 8005300:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	40010000 	.word	0x40010000
 8005310:	40000400 	.word	0x40000400
 8005314:	40000800 	.word	0x40000800
 8005318:	40000c00 	.word	0x40000c00
 800531c:	40014000 	.word	0x40014000

08005320 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e097      	b.n	8005464 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	d106      	bne.n	800534e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f7fd fb8b 	bl	8002a64 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2202      	movs	r2, #2
 8005352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	6812      	ldr	r2, [r2, #0]
 8005360:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005364:	f023 0307 	bic.w	r3, r3, #7
 8005368:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	3304      	adds	r3, #4
 8005372:	4619      	mov	r1, r3
 8005374:	4610      	mov	r0, r2
 8005376:	f000 fbc1 	bl	8005afc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	4313      	orrs	r3, r2
 800539a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053a2:	f023 0303 	bic.w	r3, r3, #3
 80053a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	689a      	ldr	r2, [r3, #8]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	021b      	lsls	r3, r3, #8
 80053b2:	4313      	orrs	r3, r2
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80053c0:	f023 030c 	bic.w	r3, r3, #12
 80053c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68da      	ldr	r2, [r3, #12]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	021b      	lsls	r3, r3, #8
 80053dc:	4313      	orrs	r3, r2
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	011a      	lsls	r2, r3, #4
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	031b      	lsls	r3, r3, #12
 80053f0:	4313      	orrs	r3, r2
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80053fe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005406:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	011b      	lsls	r3, r3, #4
 8005412:	4313      	orrs	r3, r2
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3718      	adds	r7, #24
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800547c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005484:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800548c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005494:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d110      	bne.n	80054be <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800549c:	7bfb      	ldrb	r3, [r7, #15]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d102      	bne.n	80054a8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80054a2:	7b7b      	ldrb	r3, [r7, #13]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d001      	beq.n	80054ac <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e069      	b.n	8005580 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2202      	movs	r2, #2
 80054b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054bc:	e031      	b.n	8005522 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	2b04      	cmp	r3, #4
 80054c2:	d110      	bne.n	80054e6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054c4:	7bbb      	ldrb	r3, [r7, #14]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d102      	bne.n	80054d0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054ca:	7b3b      	ldrb	r3, [r7, #12]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d001      	beq.n	80054d4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e055      	b.n	8005580 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054e4:	e01d      	b.n	8005522 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054e6:	7bfb      	ldrb	r3, [r7, #15]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d108      	bne.n	80054fe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054ec:	7bbb      	ldrb	r3, [r7, #14]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d105      	bne.n	80054fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054f2:	7b7b      	ldrb	r3, [r7, #13]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d102      	bne.n	80054fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054f8:	7b3b      	ldrb	r3, [r7, #12]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d001      	beq.n	8005502 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e03e      	b.n	8005580 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2202      	movs	r2, #2
 8005506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2202      	movs	r2, #2
 800550e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2202      	movs	r2, #2
 8005516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2202      	movs	r2, #2
 800551e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d003      	beq.n	8005530 <HAL_TIM_Encoder_Start+0xc4>
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	2b04      	cmp	r3, #4
 800552c:	d008      	beq.n	8005540 <HAL_TIM_Encoder_Start+0xd4>
 800552e:	e00f      	b.n	8005550 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2201      	movs	r2, #1
 8005536:	2100      	movs	r1, #0
 8005538:	4618      	mov	r0, r3
 800553a:	f000 fd85 	bl	8006048 <TIM_CCxChannelCmd>
      break;
 800553e:	e016      	b.n	800556e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2201      	movs	r2, #1
 8005546:	2104      	movs	r1, #4
 8005548:	4618      	mov	r0, r3
 800554a:	f000 fd7d 	bl	8006048 <TIM_CCxChannelCmd>
      break;
 800554e:	e00e      	b.n	800556e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2201      	movs	r2, #1
 8005556:	2100      	movs	r1, #0
 8005558:	4618      	mov	r0, r3
 800555a:	f000 fd75 	bl	8006048 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2201      	movs	r2, #1
 8005564:	2104      	movs	r1, #4
 8005566:	4618      	mov	r0, r3
 8005568:	f000 fd6e 	bl	8006048 <TIM_CCxChannelCmd>
      break;
 800556c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f042 0201 	orr.w	r2, r2, #1
 800557c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b02      	cmp	r3, #2
 800559c:	d122      	bne.n	80055e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d11b      	bne.n	80055e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f06f 0202 	mvn.w	r2, #2
 80055b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	f003 0303 	and.w	r3, r3, #3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fa77 	bl	8005abe <HAL_TIM_IC_CaptureCallback>
 80055d0:	e005      	b.n	80055de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fa69 	bl	8005aaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 fa7a 	bl	8005ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	f003 0304 	and.w	r3, r3, #4
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	d122      	bne.n	8005638 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f003 0304 	and.w	r3, r3, #4
 80055fc:	2b04      	cmp	r3, #4
 80055fe:	d11b      	bne.n	8005638 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f06f 0204 	mvn.w	r2, #4
 8005608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2202      	movs	r2, #2
 800560e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 fa4d 	bl	8005abe <HAL_TIM_IC_CaptureCallback>
 8005624:	e005      	b.n	8005632 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 fa3f 	bl	8005aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 fa50 	bl	8005ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b08      	cmp	r3, #8
 8005644:	d122      	bne.n	800568c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f003 0308 	and.w	r3, r3, #8
 8005650:	2b08      	cmp	r3, #8
 8005652:	d11b      	bne.n	800568c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f06f 0208 	mvn.w	r2, #8
 800565c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2204      	movs	r2, #4
 8005662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	f003 0303 	and.w	r3, r3, #3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 fa23 	bl	8005abe <HAL_TIM_IC_CaptureCallback>
 8005678:	e005      	b.n	8005686 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 fa15 	bl	8005aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 fa26 	bl	8005ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	f003 0310 	and.w	r3, r3, #16
 8005696:	2b10      	cmp	r3, #16
 8005698:	d122      	bne.n	80056e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f003 0310 	and.w	r3, r3, #16
 80056a4:	2b10      	cmp	r3, #16
 80056a6:	d11b      	bne.n	80056e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f06f 0210 	mvn.w	r2, #16
 80056b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2208      	movs	r2, #8
 80056b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	69db      	ldr	r3, [r3, #28]
 80056be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f9f9 	bl	8005abe <HAL_TIM_IC_CaptureCallback>
 80056cc:	e005      	b.n	80056da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f9eb 	bl	8005aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f9fc 	bl	8005ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d10e      	bne.n	800570c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d107      	bne.n	800570c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f06f 0201 	mvn.w	r2, #1
 8005704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7fc ff08 	bl	800251c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005716:	2b80      	cmp	r3, #128	; 0x80
 8005718:	d10e      	bne.n	8005738 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005724:	2b80      	cmp	r3, #128	; 0x80
 8005726:	d107      	bne.n	8005738 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 fd26 	bl	8006184 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005742:	2b40      	cmp	r3, #64	; 0x40
 8005744:	d10e      	bne.n	8005764 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005750:	2b40      	cmp	r3, #64	; 0x40
 8005752:	d107      	bne.n	8005764 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800575c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f9c1 	bl	8005ae6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	f003 0320 	and.w	r3, r3, #32
 800576e:	2b20      	cmp	r3, #32
 8005770:	d10e      	bne.n	8005790 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f003 0320 	and.w	r3, r3, #32
 800577c:	2b20      	cmp	r3, #32
 800577e:	d107      	bne.n	8005790 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f06f 0220 	mvn.w	r2, #32
 8005788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 fcf0 	bl	8006170 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005790:	bf00      	nop
 8005792:	3708      	adds	r7, #8
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057a4:	2300      	movs	r3, #0
 80057a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d101      	bne.n	80057b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057b2:	2302      	movs	r3, #2
 80057b4:	e0ae      	b.n	8005914 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b0c      	cmp	r3, #12
 80057c2:	f200 809f 	bhi.w	8005904 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80057c6:	a201      	add	r2, pc, #4	; (adr r2, 80057cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057cc:	08005801 	.word	0x08005801
 80057d0:	08005905 	.word	0x08005905
 80057d4:	08005905 	.word	0x08005905
 80057d8:	08005905 	.word	0x08005905
 80057dc:	08005841 	.word	0x08005841
 80057e0:	08005905 	.word	0x08005905
 80057e4:	08005905 	.word	0x08005905
 80057e8:	08005905 	.word	0x08005905
 80057ec:	08005883 	.word	0x08005883
 80057f0:	08005905 	.word	0x08005905
 80057f4:	08005905 	.word	0x08005905
 80057f8:	08005905 	.word	0x08005905
 80057fc:	080058c3 	.word	0x080058c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68b9      	ldr	r1, [r7, #8]
 8005806:	4618      	mov	r0, r3
 8005808:	f000 f9f8 	bl	8005bfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	699a      	ldr	r2, [r3, #24]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0208 	orr.w	r2, r2, #8
 800581a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699a      	ldr	r2, [r3, #24]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 0204 	bic.w	r2, r2, #4
 800582a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6999      	ldr	r1, [r3, #24]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	691a      	ldr	r2, [r3, #16]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	619a      	str	r2, [r3, #24]
      break;
 800583e:	e064      	b.n	800590a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68b9      	ldr	r1, [r7, #8]
 8005846:	4618      	mov	r0, r3
 8005848:	f000 fa3e 	bl	8005cc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699a      	ldr	r2, [r3, #24]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800585a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	699a      	ldr	r2, [r3, #24]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800586a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6999      	ldr	r1, [r3, #24]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	021a      	lsls	r2, r3, #8
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	430a      	orrs	r2, r1
 800587e:	619a      	str	r2, [r3, #24]
      break;
 8005880:	e043      	b.n	800590a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68b9      	ldr	r1, [r7, #8]
 8005888:	4618      	mov	r0, r3
 800588a:	f000 fa89 	bl	8005da0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	69da      	ldr	r2, [r3, #28]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f042 0208 	orr.w	r2, r2, #8
 800589c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	69da      	ldr	r2, [r3, #28]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0204 	bic.w	r2, r2, #4
 80058ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69d9      	ldr	r1, [r3, #28]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	691a      	ldr	r2, [r3, #16]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	61da      	str	r2, [r3, #28]
      break;
 80058c0:	e023      	b.n	800590a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68b9      	ldr	r1, [r7, #8]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f000 fad3 	bl	8005e74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69da      	ldr	r2, [r3, #28]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	69da      	ldr	r2, [r3, #28]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	69d9      	ldr	r1, [r3, #28]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	021a      	lsls	r2, r3, #8
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	61da      	str	r2, [r3, #28]
      break;
 8005902:	e002      	b.n	800590a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	75fb      	strb	r3, [r7, #23]
      break;
 8005908:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005912:	7dfb      	ldrb	r3, [r7, #23]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3718      	adds	r7, #24
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005926:	2300      	movs	r3, #0
 8005928:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_TIM_ConfigClockSource+0x1c>
 8005934:	2302      	movs	r3, #2
 8005936:	e0b4      	b.n	8005aa2 <HAL_TIM_ConfigClockSource+0x186>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800595e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005970:	d03e      	beq.n	80059f0 <HAL_TIM_ConfigClockSource+0xd4>
 8005972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005976:	f200 8087 	bhi.w	8005a88 <HAL_TIM_ConfigClockSource+0x16c>
 800597a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800597e:	f000 8086 	beq.w	8005a8e <HAL_TIM_ConfigClockSource+0x172>
 8005982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005986:	d87f      	bhi.n	8005a88 <HAL_TIM_ConfigClockSource+0x16c>
 8005988:	2b70      	cmp	r3, #112	; 0x70
 800598a:	d01a      	beq.n	80059c2 <HAL_TIM_ConfigClockSource+0xa6>
 800598c:	2b70      	cmp	r3, #112	; 0x70
 800598e:	d87b      	bhi.n	8005a88 <HAL_TIM_ConfigClockSource+0x16c>
 8005990:	2b60      	cmp	r3, #96	; 0x60
 8005992:	d050      	beq.n	8005a36 <HAL_TIM_ConfigClockSource+0x11a>
 8005994:	2b60      	cmp	r3, #96	; 0x60
 8005996:	d877      	bhi.n	8005a88 <HAL_TIM_ConfigClockSource+0x16c>
 8005998:	2b50      	cmp	r3, #80	; 0x50
 800599a:	d03c      	beq.n	8005a16 <HAL_TIM_ConfigClockSource+0xfa>
 800599c:	2b50      	cmp	r3, #80	; 0x50
 800599e:	d873      	bhi.n	8005a88 <HAL_TIM_ConfigClockSource+0x16c>
 80059a0:	2b40      	cmp	r3, #64	; 0x40
 80059a2:	d058      	beq.n	8005a56 <HAL_TIM_ConfigClockSource+0x13a>
 80059a4:	2b40      	cmp	r3, #64	; 0x40
 80059a6:	d86f      	bhi.n	8005a88 <HAL_TIM_ConfigClockSource+0x16c>
 80059a8:	2b30      	cmp	r3, #48	; 0x30
 80059aa:	d064      	beq.n	8005a76 <HAL_TIM_ConfigClockSource+0x15a>
 80059ac:	2b30      	cmp	r3, #48	; 0x30
 80059ae:	d86b      	bhi.n	8005a88 <HAL_TIM_ConfigClockSource+0x16c>
 80059b0:	2b20      	cmp	r3, #32
 80059b2:	d060      	beq.n	8005a76 <HAL_TIM_ConfigClockSource+0x15a>
 80059b4:	2b20      	cmp	r3, #32
 80059b6:	d867      	bhi.n	8005a88 <HAL_TIM_ConfigClockSource+0x16c>
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d05c      	beq.n	8005a76 <HAL_TIM_ConfigClockSource+0x15a>
 80059bc:	2b10      	cmp	r3, #16
 80059be:	d05a      	beq.n	8005a76 <HAL_TIM_ConfigClockSource+0x15a>
 80059c0:	e062      	b.n	8005a88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6818      	ldr	r0, [r3, #0]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	6899      	ldr	r1, [r3, #8]
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	f000 fb19 	bl	8006008 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	609a      	str	r2, [r3, #8]
      break;
 80059ee:	e04f      	b.n	8005a90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6818      	ldr	r0, [r3, #0]
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	6899      	ldr	r1, [r3, #8]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	f000 fb02 	bl	8006008 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689a      	ldr	r2, [r3, #8]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a12:	609a      	str	r2, [r3, #8]
      break;
 8005a14:	e03c      	b.n	8005a90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6818      	ldr	r0, [r3, #0]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	6859      	ldr	r1, [r3, #4]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	461a      	mov	r2, r3
 8005a24:	f000 fa76 	bl	8005f14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2150      	movs	r1, #80	; 0x50
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 facf 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 8005a34:	e02c      	b.n	8005a90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6818      	ldr	r0, [r3, #0]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	6859      	ldr	r1, [r3, #4]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	461a      	mov	r2, r3
 8005a44:	f000 fa95 	bl	8005f72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2160      	movs	r1, #96	; 0x60
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 fabf 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 8005a54:	e01c      	b.n	8005a90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6818      	ldr	r0, [r3, #0]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	6859      	ldr	r1, [r3, #4]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	461a      	mov	r2, r3
 8005a64:	f000 fa56 	bl	8005f14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2140      	movs	r1, #64	; 0x40
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 faaf 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 8005a74:	e00c      	b.n	8005a90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4619      	mov	r1, r3
 8005a80:	4610      	mov	r0, r2
 8005a82:	f000 faa6 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 8005a86:	e003      	b.n	8005a90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a8c:	e000      	b.n	8005a90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b083      	sub	sp, #12
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ab2:	bf00      	nop
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b083      	sub	sp, #12
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b083      	sub	sp, #12
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005aee:	bf00      	nop
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
	...

08005afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a34      	ldr	r2, [pc, #208]	; (8005be0 <TIM_Base_SetConfig+0xe4>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d00f      	beq.n	8005b34 <TIM_Base_SetConfig+0x38>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b1a:	d00b      	beq.n	8005b34 <TIM_Base_SetConfig+0x38>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a31      	ldr	r2, [pc, #196]	; (8005be4 <TIM_Base_SetConfig+0xe8>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d007      	beq.n	8005b34 <TIM_Base_SetConfig+0x38>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a30      	ldr	r2, [pc, #192]	; (8005be8 <TIM_Base_SetConfig+0xec>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d003      	beq.n	8005b34 <TIM_Base_SetConfig+0x38>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a2f      	ldr	r2, [pc, #188]	; (8005bec <TIM_Base_SetConfig+0xf0>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d108      	bne.n	8005b46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a25      	ldr	r2, [pc, #148]	; (8005be0 <TIM_Base_SetConfig+0xe4>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d01b      	beq.n	8005b86 <TIM_Base_SetConfig+0x8a>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b54:	d017      	beq.n	8005b86 <TIM_Base_SetConfig+0x8a>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a22      	ldr	r2, [pc, #136]	; (8005be4 <TIM_Base_SetConfig+0xe8>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d013      	beq.n	8005b86 <TIM_Base_SetConfig+0x8a>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a21      	ldr	r2, [pc, #132]	; (8005be8 <TIM_Base_SetConfig+0xec>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d00f      	beq.n	8005b86 <TIM_Base_SetConfig+0x8a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a20      	ldr	r2, [pc, #128]	; (8005bec <TIM_Base_SetConfig+0xf0>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d00b      	beq.n	8005b86 <TIM_Base_SetConfig+0x8a>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a1f      	ldr	r2, [pc, #124]	; (8005bf0 <TIM_Base_SetConfig+0xf4>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d007      	beq.n	8005b86 <TIM_Base_SetConfig+0x8a>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a1e      	ldr	r2, [pc, #120]	; (8005bf4 <TIM_Base_SetConfig+0xf8>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d003      	beq.n	8005b86 <TIM_Base_SetConfig+0x8a>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a1d      	ldr	r2, [pc, #116]	; (8005bf8 <TIM_Base_SetConfig+0xfc>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d108      	bne.n	8005b98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	689a      	ldr	r2, [r3, #8]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a08      	ldr	r2, [pc, #32]	; (8005be0 <TIM_Base_SetConfig+0xe4>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d103      	bne.n	8005bcc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	691a      	ldr	r2, [r3, #16]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	615a      	str	r2, [r3, #20]
}
 8005bd2:	bf00      	nop
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	40010000 	.word	0x40010000
 8005be4:	40000400 	.word	0x40000400
 8005be8:	40000800 	.word	0x40000800
 8005bec:	40000c00 	.word	0x40000c00
 8005bf0:	40014000 	.word	0x40014000
 8005bf4:	40014400 	.word	0x40014400
 8005bf8:	40014800 	.word	0x40014800

08005bfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	f023 0201 	bic.w	r2, r3, #1
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f023 0303 	bic.w	r3, r3, #3
 8005c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f023 0302 	bic.w	r3, r3, #2
 8005c44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a1c      	ldr	r2, [pc, #112]	; (8005cc4 <TIM_OC1_SetConfig+0xc8>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d10c      	bne.n	8005c72 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f023 0308 	bic.w	r3, r3, #8
 8005c5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f023 0304 	bic.w	r3, r3, #4
 8005c70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a13      	ldr	r2, [pc, #76]	; (8005cc4 <TIM_OC1_SetConfig+0xc8>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d111      	bne.n	8005c9e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	621a      	str	r2, [r3, #32]
}
 8005cb8:	bf00      	nop
 8005cba:	371c      	adds	r7, #28
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr
 8005cc4:	40010000 	.word	0x40010000

08005cc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	f023 0210 	bic.w	r2, r3, #16
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	021b      	lsls	r3, r3, #8
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f023 0320 	bic.w	r3, r3, #32
 8005d12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	011b      	lsls	r3, r3, #4
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a1e      	ldr	r2, [pc, #120]	; (8005d9c <TIM_OC2_SetConfig+0xd4>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d10d      	bne.n	8005d44 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	011b      	lsls	r3, r3, #4
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a15      	ldr	r2, [pc, #84]	; (8005d9c <TIM_OC2_SetConfig+0xd4>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d113      	bne.n	8005d74 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	621a      	str	r2, [r3, #32]
}
 8005d8e:	bf00      	nop
 8005d90:	371c      	adds	r7, #28
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	40010000 	.word	0x40010000

08005da0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b087      	sub	sp, #28
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f023 0303 	bic.w	r3, r3, #3
 8005dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	021b      	lsls	r3, r3, #8
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a1d      	ldr	r2, [pc, #116]	; (8005e70 <TIM_OC3_SetConfig+0xd0>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d10d      	bne.n	8005e1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	021b      	lsls	r3, r3, #8
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a14      	ldr	r2, [pc, #80]	; (8005e70 <TIM_OC3_SetConfig+0xd0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d113      	bne.n	8005e4a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	011b      	lsls	r3, r3, #4
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	011b      	lsls	r3, r3, #4
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	621a      	str	r2, [r3, #32]
}
 8005e64:	bf00      	nop
 8005e66:	371c      	adds	r7, #28
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	40010000 	.word	0x40010000

08005e74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	021b      	lsls	r3, r3, #8
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ebe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	031b      	lsls	r3, r3, #12
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a10      	ldr	r2, [pc, #64]	; (8005f10 <TIM_OC4_SetConfig+0x9c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d109      	bne.n	8005ee8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005eda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	019b      	lsls	r3, r3, #6
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	621a      	str	r2, [r3, #32]
}
 8005f02:	bf00      	nop
 8005f04:	371c      	adds	r7, #28
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	40010000 	.word	0x40010000

08005f14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6a1b      	ldr	r3, [r3, #32]
 8005f24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	f023 0201 	bic.w	r2, r3, #1
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	011b      	lsls	r3, r3, #4
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f023 030a 	bic.w	r3, r3, #10
 8005f50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	621a      	str	r2, [r3, #32]
}
 8005f66:	bf00      	nop
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b087      	sub	sp, #28
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	60f8      	str	r0, [r7, #12]
 8005f7a:	60b9      	str	r1, [r7, #8]
 8005f7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	f023 0210 	bic.w	r2, r3, #16
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	031b      	lsls	r3, r3, #12
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	011b      	lsls	r3, r3, #4
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	621a      	str	r2, [r3, #32]
}
 8005fc6:	bf00      	nop
 8005fc8:	371c      	adds	r7, #28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b085      	sub	sp, #20
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	f043 0307 	orr.w	r3, r3, #7
 8005ff4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	609a      	str	r2, [r3, #8]
}
 8005ffc:	bf00      	nop
 8005ffe:	3714      	adds	r7, #20
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006022:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	021a      	lsls	r2, r3, #8
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	431a      	orrs	r2, r3
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	4313      	orrs	r3, r2
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	4313      	orrs	r3, r2
 8006034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	609a      	str	r2, [r3, #8]
}
 800603c:	bf00      	nop
 800603e:	371c      	adds	r7, #28
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f003 031f 	and.w	r3, r3, #31
 800605a:	2201      	movs	r2, #1
 800605c:	fa02 f303 	lsl.w	r3, r2, r3
 8006060:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6a1a      	ldr	r2, [r3, #32]
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	43db      	mvns	r3, r3
 800606a:	401a      	ands	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6a1a      	ldr	r2, [r3, #32]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f003 031f 	and.w	r3, r3, #31
 800607a:	6879      	ldr	r1, [r7, #4]
 800607c:	fa01 f303 	lsl.w	r3, r1, r3
 8006080:	431a      	orrs	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	621a      	str	r2, [r3, #32]
}
 8006086:	bf00      	nop
 8006088:	371c      	adds	r7, #28
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
	...

08006094 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d101      	bne.n	80060ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060a8:	2302      	movs	r3, #2
 80060aa:	e050      	b.n	800614e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2202      	movs	r2, #2
 80060b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	4313      	orrs	r3, r2
 80060dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a1c      	ldr	r2, [pc, #112]	; (800615c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d018      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060f8:	d013      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a18      	ldr	r2, [pc, #96]	; (8006160 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d00e      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a16      	ldr	r2, [pc, #88]	; (8006164 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d009      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a15      	ldr	r2, [pc, #84]	; (8006168 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d004      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a13      	ldr	r2, [pc, #76]	; (800616c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d10c      	bne.n	800613c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006128:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	4313      	orrs	r3, r2
 8006132:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	40010000 	.word	0x40010000
 8006160:	40000400 	.word	0x40000400
 8006164:	40000800 	.word	0x40000800
 8006168:	40000c00 	.word	0x40000c00
 800616c:	40014000 	.word	0x40014000

08006170 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e03f      	b.n	800622a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d106      	bne.n	80061c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7fc fd5e 	bl	8002c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2224      	movs	r2, #36	; 0x24
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f829 	bl	8006234 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	691a      	ldr	r2, [r3, #16]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	695a      	ldr	r2, [r3, #20]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006200:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68da      	ldr	r2, [r3, #12]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006210:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2220      	movs	r2, #32
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2220      	movs	r2, #32
 8006224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
	...

08006234 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006238:	b0c0      	sub	sp, #256	; 0x100
 800623a:	af00      	add	r7, sp, #0
 800623c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800624c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006250:	68d9      	ldr	r1, [r3, #12]
 8006252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	ea40 0301 	orr.w	r3, r0, r1
 800625c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800625e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006262:	689a      	ldr	r2, [r3, #8]
 8006264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	431a      	orrs	r2, r3
 800626c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	431a      	orrs	r2, r3
 8006274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	4313      	orrs	r3, r2
 800627c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800628c:	f021 010c 	bic.w	r1, r1, #12
 8006290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800629a:	430b      	orrs	r3, r1
 800629c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800629e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80062aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ae:	6999      	ldr	r1, [r3, #24]
 80062b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	ea40 0301 	orr.w	r3, r0, r1
 80062ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	4b8f      	ldr	r3, [pc, #572]	; (8006500 <UART_SetConfig+0x2cc>)
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d005      	beq.n	80062d4 <UART_SetConfig+0xa0>
 80062c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	4b8d      	ldr	r3, [pc, #564]	; (8006504 <UART_SetConfig+0x2d0>)
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d104      	bne.n	80062de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062d4:	f7fe fe54 	bl	8004f80 <HAL_RCC_GetPCLK2Freq>
 80062d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80062dc:	e003      	b.n	80062e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062de:	f7fe fe3b 	bl	8004f58 <HAL_RCC_GetPCLK1Freq>
 80062e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ea:	69db      	ldr	r3, [r3, #28]
 80062ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062f0:	f040 810c 	bne.w	800650c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062f8:	2200      	movs	r2, #0
 80062fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006302:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006306:	4622      	mov	r2, r4
 8006308:	462b      	mov	r3, r5
 800630a:	1891      	adds	r1, r2, r2
 800630c:	65b9      	str	r1, [r7, #88]	; 0x58
 800630e:	415b      	adcs	r3, r3
 8006310:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006312:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006316:	4621      	mov	r1, r4
 8006318:	eb12 0801 	adds.w	r8, r2, r1
 800631c:	4629      	mov	r1, r5
 800631e:	eb43 0901 	adc.w	r9, r3, r1
 8006322:	f04f 0200 	mov.w	r2, #0
 8006326:	f04f 0300 	mov.w	r3, #0
 800632a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800632e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006332:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006336:	4690      	mov	r8, r2
 8006338:	4699      	mov	r9, r3
 800633a:	4623      	mov	r3, r4
 800633c:	eb18 0303 	adds.w	r3, r8, r3
 8006340:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006344:	462b      	mov	r3, r5
 8006346:	eb49 0303 	adc.w	r3, r9, r3
 800634a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800634e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800635a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800635e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006362:	460b      	mov	r3, r1
 8006364:	18db      	adds	r3, r3, r3
 8006366:	653b      	str	r3, [r7, #80]	; 0x50
 8006368:	4613      	mov	r3, r2
 800636a:	eb42 0303 	adc.w	r3, r2, r3
 800636e:	657b      	str	r3, [r7, #84]	; 0x54
 8006370:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006374:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006378:	f7fa fcf8 	bl	8000d6c <__aeabi_uldivmod>
 800637c:	4602      	mov	r2, r0
 800637e:	460b      	mov	r3, r1
 8006380:	4b61      	ldr	r3, [pc, #388]	; (8006508 <UART_SetConfig+0x2d4>)
 8006382:	fba3 2302 	umull	r2, r3, r3, r2
 8006386:	095b      	lsrs	r3, r3, #5
 8006388:	011c      	lsls	r4, r3, #4
 800638a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800638e:	2200      	movs	r2, #0
 8006390:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006394:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006398:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800639c:	4642      	mov	r2, r8
 800639e:	464b      	mov	r3, r9
 80063a0:	1891      	adds	r1, r2, r2
 80063a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80063a4:	415b      	adcs	r3, r3
 80063a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80063ac:	4641      	mov	r1, r8
 80063ae:	eb12 0a01 	adds.w	sl, r2, r1
 80063b2:	4649      	mov	r1, r9
 80063b4:	eb43 0b01 	adc.w	fp, r3, r1
 80063b8:	f04f 0200 	mov.w	r2, #0
 80063bc:	f04f 0300 	mov.w	r3, #0
 80063c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063cc:	4692      	mov	sl, r2
 80063ce:	469b      	mov	fp, r3
 80063d0:	4643      	mov	r3, r8
 80063d2:	eb1a 0303 	adds.w	r3, sl, r3
 80063d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063da:	464b      	mov	r3, r9
 80063dc:	eb4b 0303 	adc.w	r3, fp, r3
 80063e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80063f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80063f8:	460b      	mov	r3, r1
 80063fa:	18db      	adds	r3, r3, r3
 80063fc:	643b      	str	r3, [r7, #64]	; 0x40
 80063fe:	4613      	mov	r3, r2
 8006400:	eb42 0303 	adc.w	r3, r2, r3
 8006404:	647b      	str	r3, [r7, #68]	; 0x44
 8006406:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800640a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800640e:	f7fa fcad 	bl	8000d6c <__aeabi_uldivmod>
 8006412:	4602      	mov	r2, r0
 8006414:	460b      	mov	r3, r1
 8006416:	4611      	mov	r1, r2
 8006418:	4b3b      	ldr	r3, [pc, #236]	; (8006508 <UART_SetConfig+0x2d4>)
 800641a:	fba3 2301 	umull	r2, r3, r3, r1
 800641e:	095b      	lsrs	r3, r3, #5
 8006420:	2264      	movs	r2, #100	; 0x64
 8006422:	fb02 f303 	mul.w	r3, r2, r3
 8006426:	1acb      	subs	r3, r1, r3
 8006428:	00db      	lsls	r3, r3, #3
 800642a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800642e:	4b36      	ldr	r3, [pc, #216]	; (8006508 <UART_SetConfig+0x2d4>)
 8006430:	fba3 2302 	umull	r2, r3, r3, r2
 8006434:	095b      	lsrs	r3, r3, #5
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800643c:	441c      	add	r4, r3
 800643e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006442:	2200      	movs	r2, #0
 8006444:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006448:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800644c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006450:	4642      	mov	r2, r8
 8006452:	464b      	mov	r3, r9
 8006454:	1891      	adds	r1, r2, r2
 8006456:	63b9      	str	r1, [r7, #56]	; 0x38
 8006458:	415b      	adcs	r3, r3
 800645a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800645c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006460:	4641      	mov	r1, r8
 8006462:	1851      	adds	r1, r2, r1
 8006464:	6339      	str	r1, [r7, #48]	; 0x30
 8006466:	4649      	mov	r1, r9
 8006468:	414b      	adcs	r3, r1
 800646a:	637b      	str	r3, [r7, #52]	; 0x34
 800646c:	f04f 0200 	mov.w	r2, #0
 8006470:	f04f 0300 	mov.w	r3, #0
 8006474:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006478:	4659      	mov	r1, fp
 800647a:	00cb      	lsls	r3, r1, #3
 800647c:	4651      	mov	r1, sl
 800647e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006482:	4651      	mov	r1, sl
 8006484:	00ca      	lsls	r2, r1, #3
 8006486:	4610      	mov	r0, r2
 8006488:	4619      	mov	r1, r3
 800648a:	4603      	mov	r3, r0
 800648c:	4642      	mov	r2, r8
 800648e:	189b      	adds	r3, r3, r2
 8006490:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006494:	464b      	mov	r3, r9
 8006496:	460a      	mov	r2, r1
 8006498:	eb42 0303 	adc.w	r3, r2, r3
 800649c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80064ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80064b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80064b4:	460b      	mov	r3, r1
 80064b6:	18db      	adds	r3, r3, r3
 80064b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80064ba:	4613      	mov	r3, r2
 80064bc:	eb42 0303 	adc.w	r3, r2, r3
 80064c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80064ca:	f7fa fc4f 	bl	8000d6c <__aeabi_uldivmod>
 80064ce:	4602      	mov	r2, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	4b0d      	ldr	r3, [pc, #52]	; (8006508 <UART_SetConfig+0x2d4>)
 80064d4:	fba3 1302 	umull	r1, r3, r3, r2
 80064d8:	095b      	lsrs	r3, r3, #5
 80064da:	2164      	movs	r1, #100	; 0x64
 80064dc:	fb01 f303 	mul.w	r3, r1, r3
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	00db      	lsls	r3, r3, #3
 80064e4:	3332      	adds	r3, #50	; 0x32
 80064e6:	4a08      	ldr	r2, [pc, #32]	; (8006508 <UART_SetConfig+0x2d4>)
 80064e8:	fba2 2303 	umull	r2, r3, r2, r3
 80064ec:	095b      	lsrs	r3, r3, #5
 80064ee:	f003 0207 	and.w	r2, r3, #7
 80064f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4422      	add	r2, r4
 80064fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064fc:	e105      	b.n	800670a <UART_SetConfig+0x4d6>
 80064fe:	bf00      	nop
 8006500:	40011000 	.word	0x40011000
 8006504:	40011400 	.word	0x40011400
 8006508:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800650c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006510:	2200      	movs	r2, #0
 8006512:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006516:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800651a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800651e:	4642      	mov	r2, r8
 8006520:	464b      	mov	r3, r9
 8006522:	1891      	adds	r1, r2, r2
 8006524:	6239      	str	r1, [r7, #32]
 8006526:	415b      	adcs	r3, r3
 8006528:	627b      	str	r3, [r7, #36]	; 0x24
 800652a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800652e:	4641      	mov	r1, r8
 8006530:	1854      	adds	r4, r2, r1
 8006532:	4649      	mov	r1, r9
 8006534:	eb43 0501 	adc.w	r5, r3, r1
 8006538:	f04f 0200 	mov.w	r2, #0
 800653c:	f04f 0300 	mov.w	r3, #0
 8006540:	00eb      	lsls	r3, r5, #3
 8006542:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006546:	00e2      	lsls	r2, r4, #3
 8006548:	4614      	mov	r4, r2
 800654a:	461d      	mov	r5, r3
 800654c:	4643      	mov	r3, r8
 800654e:	18e3      	adds	r3, r4, r3
 8006550:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006554:	464b      	mov	r3, r9
 8006556:	eb45 0303 	adc.w	r3, r5, r3
 800655a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800655e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800656a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800656e:	f04f 0200 	mov.w	r2, #0
 8006572:	f04f 0300 	mov.w	r3, #0
 8006576:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800657a:	4629      	mov	r1, r5
 800657c:	008b      	lsls	r3, r1, #2
 800657e:	4621      	mov	r1, r4
 8006580:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006584:	4621      	mov	r1, r4
 8006586:	008a      	lsls	r2, r1, #2
 8006588:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800658c:	f7fa fbee 	bl	8000d6c <__aeabi_uldivmod>
 8006590:	4602      	mov	r2, r0
 8006592:	460b      	mov	r3, r1
 8006594:	4b60      	ldr	r3, [pc, #384]	; (8006718 <UART_SetConfig+0x4e4>)
 8006596:	fba3 2302 	umull	r2, r3, r3, r2
 800659a:	095b      	lsrs	r3, r3, #5
 800659c:	011c      	lsls	r4, r3, #4
 800659e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065a2:	2200      	movs	r2, #0
 80065a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80065a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80065ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80065b0:	4642      	mov	r2, r8
 80065b2:	464b      	mov	r3, r9
 80065b4:	1891      	adds	r1, r2, r2
 80065b6:	61b9      	str	r1, [r7, #24]
 80065b8:	415b      	adcs	r3, r3
 80065ba:	61fb      	str	r3, [r7, #28]
 80065bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065c0:	4641      	mov	r1, r8
 80065c2:	1851      	adds	r1, r2, r1
 80065c4:	6139      	str	r1, [r7, #16]
 80065c6:	4649      	mov	r1, r9
 80065c8:	414b      	adcs	r3, r1
 80065ca:	617b      	str	r3, [r7, #20]
 80065cc:	f04f 0200 	mov.w	r2, #0
 80065d0:	f04f 0300 	mov.w	r3, #0
 80065d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065d8:	4659      	mov	r1, fp
 80065da:	00cb      	lsls	r3, r1, #3
 80065dc:	4651      	mov	r1, sl
 80065de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065e2:	4651      	mov	r1, sl
 80065e4:	00ca      	lsls	r2, r1, #3
 80065e6:	4610      	mov	r0, r2
 80065e8:	4619      	mov	r1, r3
 80065ea:	4603      	mov	r3, r0
 80065ec:	4642      	mov	r2, r8
 80065ee:	189b      	adds	r3, r3, r2
 80065f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065f4:	464b      	mov	r3, r9
 80065f6:	460a      	mov	r2, r1
 80065f8:	eb42 0303 	adc.w	r3, r2, r3
 80065fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	67bb      	str	r3, [r7, #120]	; 0x78
 800660a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800660c:	f04f 0200 	mov.w	r2, #0
 8006610:	f04f 0300 	mov.w	r3, #0
 8006614:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006618:	4649      	mov	r1, r9
 800661a:	008b      	lsls	r3, r1, #2
 800661c:	4641      	mov	r1, r8
 800661e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006622:	4641      	mov	r1, r8
 8006624:	008a      	lsls	r2, r1, #2
 8006626:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800662a:	f7fa fb9f 	bl	8000d6c <__aeabi_uldivmod>
 800662e:	4602      	mov	r2, r0
 8006630:	460b      	mov	r3, r1
 8006632:	4b39      	ldr	r3, [pc, #228]	; (8006718 <UART_SetConfig+0x4e4>)
 8006634:	fba3 1302 	umull	r1, r3, r3, r2
 8006638:	095b      	lsrs	r3, r3, #5
 800663a:	2164      	movs	r1, #100	; 0x64
 800663c:	fb01 f303 	mul.w	r3, r1, r3
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	011b      	lsls	r3, r3, #4
 8006644:	3332      	adds	r3, #50	; 0x32
 8006646:	4a34      	ldr	r2, [pc, #208]	; (8006718 <UART_SetConfig+0x4e4>)
 8006648:	fba2 2303 	umull	r2, r3, r2, r3
 800664c:	095b      	lsrs	r3, r3, #5
 800664e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006652:	441c      	add	r4, r3
 8006654:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006658:	2200      	movs	r2, #0
 800665a:	673b      	str	r3, [r7, #112]	; 0x70
 800665c:	677a      	str	r2, [r7, #116]	; 0x74
 800665e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006662:	4642      	mov	r2, r8
 8006664:	464b      	mov	r3, r9
 8006666:	1891      	adds	r1, r2, r2
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	415b      	adcs	r3, r3
 800666c:	60fb      	str	r3, [r7, #12]
 800666e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006672:	4641      	mov	r1, r8
 8006674:	1851      	adds	r1, r2, r1
 8006676:	6039      	str	r1, [r7, #0]
 8006678:	4649      	mov	r1, r9
 800667a:	414b      	adcs	r3, r1
 800667c:	607b      	str	r3, [r7, #4]
 800667e:	f04f 0200 	mov.w	r2, #0
 8006682:	f04f 0300 	mov.w	r3, #0
 8006686:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800668a:	4659      	mov	r1, fp
 800668c:	00cb      	lsls	r3, r1, #3
 800668e:	4651      	mov	r1, sl
 8006690:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006694:	4651      	mov	r1, sl
 8006696:	00ca      	lsls	r2, r1, #3
 8006698:	4610      	mov	r0, r2
 800669a:	4619      	mov	r1, r3
 800669c:	4603      	mov	r3, r0
 800669e:	4642      	mov	r2, r8
 80066a0:	189b      	adds	r3, r3, r2
 80066a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80066a4:	464b      	mov	r3, r9
 80066a6:	460a      	mov	r2, r1
 80066a8:	eb42 0303 	adc.w	r3, r2, r3
 80066ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	663b      	str	r3, [r7, #96]	; 0x60
 80066b8:	667a      	str	r2, [r7, #100]	; 0x64
 80066ba:	f04f 0200 	mov.w	r2, #0
 80066be:	f04f 0300 	mov.w	r3, #0
 80066c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80066c6:	4649      	mov	r1, r9
 80066c8:	008b      	lsls	r3, r1, #2
 80066ca:	4641      	mov	r1, r8
 80066cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066d0:	4641      	mov	r1, r8
 80066d2:	008a      	lsls	r2, r1, #2
 80066d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80066d8:	f7fa fb48 	bl	8000d6c <__aeabi_uldivmod>
 80066dc:	4602      	mov	r2, r0
 80066de:	460b      	mov	r3, r1
 80066e0:	4b0d      	ldr	r3, [pc, #52]	; (8006718 <UART_SetConfig+0x4e4>)
 80066e2:	fba3 1302 	umull	r1, r3, r3, r2
 80066e6:	095b      	lsrs	r3, r3, #5
 80066e8:	2164      	movs	r1, #100	; 0x64
 80066ea:	fb01 f303 	mul.w	r3, r1, r3
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	011b      	lsls	r3, r3, #4
 80066f2:	3332      	adds	r3, #50	; 0x32
 80066f4:	4a08      	ldr	r2, [pc, #32]	; (8006718 <UART_SetConfig+0x4e4>)
 80066f6:	fba2 2303 	umull	r2, r3, r2, r3
 80066fa:	095b      	lsrs	r3, r3, #5
 80066fc:	f003 020f 	and.w	r2, r3, #15
 8006700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4422      	add	r2, r4
 8006708:	609a      	str	r2, [r3, #8]
}
 800670a:	bf00      	nop
 800670c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006710:	46bd      	mov	sp, r7
 8006712:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006716:	bf00      	nop
 8006718:	51eb851f 	.word	0x51eb851f

0800671c <__errno>:
 800671c:	4b01      	ldr	r3, [pc, #4]	; (8006724 <__errno+0x8>)
 800671e:	6818      	ldr	r0, [r3, #0]
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	2000001c 	.word	0x2000001c

08006728 <__libc_init_array>:
 8006728:	b570      	push	{r4, r5, r6, lr}
 800672a:	4d0d      	ldr	r5, [pc, #52]	; (8006760 <__libc_init_array+0x38>)
 800672c:	4c0d      	ldr	r4, [pc, #52]	; (8006764 <__libc_init_array+0x3c>)
 800672e:	1b64      	subs	r4, r4, r5
 8006730:	10a4      	asrs	r4, r4, #2
 8006732:	2600      	movs	r6, #0
 8006734:	42a6      	cmp	r6, r4
 8006736:	d109      	bne.n	800674c <__libc_init_array+0x24>
 8006738:	4d0b      	ldr	r5, [pc, #44]	; (8006768 <__libc_init_array+0x40>)
 800673a:	4c0c      	ldr	r4, [pc, #48]	; (800676c <__libc_init_array+0x44>)
 800673c:	f001 fb58 	bl	8007df0 <_init>
 8006740:	1b64      	subs	r4, r4, r5
 8006742:	10a4      	asrs	r4, r4, #2
 8006744:	2600      	movs	r6, #0
 8006746:	42a6      	cmp	r6, r4
 8006748:	d105      	bne.n	8006756 <__libc_init_array+0x2e>
 800674a:	bd70      	pop	{r4, r5, r6, pc}
 800674c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006750:	4798      	blx	r3
 8006752:	3601      	adds	r6, #1
 8006754:	e7ee      	b.n	8006734 <__libc_init_array+0xc>
 8006756:	f855 3b04 	ldr.w	r3, [r5], #4
 800675a:	4798      	blx	r3
 800675c:	3601      	adds	r6, #1
 800675e:	e7f2      	b.n	8006746 <__libc_init_array+0x1e>
 8006760:	08008710 	.word	0x08008710
 8006764:	08008710 	.word	0x08008710
 8006768:	08008710 	.word	0x08008710
 800676c:	08008714 	.word	0x08008714

08006770 <memset>:
 8006770:	4402      	add	r2, r0
 8006772:	4603      	mov	r3, r0
 8006774:	4293      	cmp	r3, r2
 8006776:	d100      	bne.n	800677a <memset+0xa>
 8006778:	4770      	bx	lr
 800677a:	f803 1b01 	strb.w	r1, [r3], #1
 800677e:	e7f9      	b.n	8006774 <memset+0x4>

08006780 <pow>:
 8006780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006782:	ed2d 8b02 	vpush	{d8}
 8006786:	eeb0 8a40 	vmov.f32	s16, s0
 800678a:	eef0 8a60 	vmov.f32	s17, s1
 800678e:	ec55 4b11 	vmov	r4, r5, d1
 8006792:	f000 f909 	bl	80069a8 <__ieee754_pow>
 8006796:	4622      	mov	r2, r4
 8006798:	462b      	mov	r3, r5
 800679a:	4620      	mov	r0, r4
 800679c:	4629      	mov	r1, r5
 800679e:	ec57 6b10 	vmov	r6, r7, d0
 80067a2:	f7fa f96f 	bl	8000a84 <__aeabi_dcmpun>
 80067a6:	2800      	cmp	r0, #0
 80067a8:	d13b      	bne.n	8006822 <pow+0xa2>
 80067aa:	ec51 0b18 	vmov	r0, r1, d8
 80067ae:	2200      	movs	r2, #0
 80067b0:	2300      	movs	r3, #0
 80067b2:	f7fa f935 	bl	8000a20 <__aeabi_dcmpeq>
 80067b6:	b1b8      	cbz	r0, 80067e8 <pow+0x68>
 80067b8:	2200      	movs	r2, #0
 80067ba:	2300      	movs	r3, #0
 80067bc:	4620      	mov	r0, r4
 80067be:	4629      	mov	r1, r5
 80067c0:	f7fa f92e 	bl	8000a20 <__aeabi_dcmpeq>
 80067c4:	2800      	cmp	r0, #0
 80067c6:	d146      	bne.n	8006856 <pow+0xd6>
 80067c8:	ec45 4b10 	vmov	d0, r4, r5
 80067cc:	f001 f9f9 	bl	8007bc2 <finite>
 80067d0:	b338      	cbz	r0, 8006822 <pow+0xa2>
 80067d2:	2200      	movs	r2, #0
 80067d4:	2300      	movs	r3, #0
 80067d6:	4620      	mov	r0, r4
 80067d8:	4629      	mov	r1, r5
 80067da:	f7fa f92b 	bl	8000a34 <__aeabi_dcmplt>
 80067de:	b300      	cbz	r0, 8006822 <pow+0xa2>
 80067e0:	f7ff ff9c 	bl	800671c <__errno>
 80067e4:	2322      	movs	r3, #34	; 0x22
 80067e6:	e01b      	b.n	8006820 <pow+0xa0>
 80067e8:	ec47 6b10 	vmov	d0, r6, r7
 80067ec:	f001 f9e9 	bl	8007bc2 <finite>
 80067f0:	b9e0      	cbnz	r0, 800682c <pow+0xac>
 80067f2:	eeb0 0a48 	vmov.f32	s0, s16
 80067f6:	eef0 0a68 	vmov.f32	s1, s17
 80067fa:	f001 f9e2 	bl	8007bc2 <finite>
 80067fe:	b1a8      	cbz	r0, 800682c <pow+0xac>
 8006800:	ec45 4b10 	vmov	d0, r4, r5
 8006804:	f001 f9dd 	bl	8007bc2 <finite>
 8006808:	b180      	cbz	r0, 800682c <pow+0xac>
 800680a:	4632      	mov	r2, r6
 800680c:	463b      	mov	r3, r7
 800680e:	4630      	mov	r0, r6
 8006810:	4639      	mov	r1, r7
 8006812:	f7fa f937 	bl	8000a84 <__aeabi_dcmpun>
 8006816:	2800      	cmp	r0, #0
 8006818:	d0e2      	beq.n	80067e0 <pow+0x60>
 800681a:	f7ff ff7f 	bl	800671c <__errno>
 800681e:	2321      	movs	r3, #33	; 0x21
 8006820:	6003      	str	r3, [r0, #0]
 8006822:	ecbd 8b02 	vpop	{d8}
 8006826:	ec47 6b10 	vmov	d0, r6, r7
 800682a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800682c:	2200      	movs	r2, #0
 800682e:	2300      	movs	r3, #0
 8006830:	4630      	mov	r0, r6
 8006832:	4639      	mov	r1, r7
 8006834:	f7fa f8f4 	bl	8000a20 <__aeabi_dcmpeq>
 8006838:	2800      	cmp	r0, #0
 800683a:	d0f2      	beq.n	8006822 <pow+0xa2>
 800683c:	eeb0 0a48 	vmov.f32	s0, s16
 8006840:	eef0 0a68 	vmov.f32	s1, s17
 8006844:	f001 f9bd 	bl	8007bc2 <finite>
 8006848:	2800      	cmp	r0, #0
 800684a:	d0ea      	beq.n	8006822 <pow+0xa2>
 800684c:	ec45 4b10 	vmov	d0, r4, r5
 8006850:	f001 f9b7 	bl	8007bc2 <finite>
 8006854:	e7c3      	b.n	80067de <pow+0x5e>
 8006856:	4f01      	ldr	r7, [pc, #4]	; (800685c <pow+0xdc>)
 8006858:	2600      	movs	r6, #0
 800685a:	e7e2      	b.n	8006822 <pow+0xa2>
 800685c:	3ff00000 	.word	0x3ff00000

08006860 <sqrt>:
 8006860:	b538      	push	{r3, r4, r5, lr}
 8006862:	ed2d 8b02 	vpush	{d8}
 8006866:	ec55 4b10 	vmov	r4, r5, d0
 800686a:	f000 fdcb 	bl	8007404 <__ieee754_sqrt>
 800686e:	4622      	mov	r2, r4
 8006870:	462b      	mov	r3, r5
 8006872:	4620      	mov	r0, r4
 8006874:	4629      	mov	r1, r5
 8006876:	eeb0 8a40 	vmov.f32	s16, s0
 800687a:	eef0 8a60 	vmov.f32	s17, s1
 800687e:	f7fa f901 	bl	8000a84 <__aeabi_dcmpun>
 8006882:	b990      	cbnz	r0, 80068aa <sqrt+0x4a>
 8006884:	2200      	movs	r2, #0
 8006886:	2300      	movs	r3, #0
 8006888:	4620      	mov	r0, r4
 800688a:	4629      	mov	r1, r5
 800688c:	f7fa f8d2 	bl	8000a34 <__aeabi_dcmplt>
 8006890:	b158      	cbz	r0, 80068aa <sqrt+0x4a>
 8006892:	f7ff ff43 	bl	800671c <__errno>
 8006896:	2321      	movs	r3, #33	; 0x21
 8006898:	6003      	str	r3, [r0, #0]
 800689a:	2200      	movs	r2, #0
 800689c:	2300      	movs	r3, #0
 800689e:	4610      	mov	r0, r2
 80068a0:	4619      	mov	r1, r3
 80068a2:	f7f9 ff7f 	bl	80007a4 <__aeabi_ddiv>
 80068a6:	ec41 0b18 	vmov	d8, r0, r1
 80068aa:	eeb0 0a48 	vmov.f32	s0, s16
 80068ae:	eef0 0a68 	vmov.f32	s1, s17
 80068b2:	ecbd 8b02 	vpop	{d8}
 80068b6:	bd38      	pop	{r3, r4, r5, pc}

080068b8 <powf>:
 80068b8:	b508      	push	{r3, lr}
 80068ba:	ed2d 8b04 	vpush	{d8-d9}
 80068be:	eeb0 8a60 	vmov.f32	s16, s1
 80068c2:	eeb0 9a40 	vmov.f32	s18, s0
 80068c6:	f000 fe4f 	bl	8007568 <__ieee754_powf>
 80068ca:	eeb4 8a48 	vcmp.f32	s16, s16
 80068ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068d2:	eef0 8a40 	vmov.f32	s17, s0
 80068d6:	d63e      	bvs.n	8006956 <powf+0x9e>
 80068d8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80068dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068e0:	d112      	bne.n	8006908 <powf+0x50>
 80068e2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80068e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068ea:	d039      	beq.n	8006960 <powf+0xa8>
 80068ec:	eeb0 0a48 	vmov.f32	s0, s16
 80068f0:	f001 f9ff 	bl	8007cf2 <finitef>
 80068f4:	b378      	cbz	r0, 8006956 <powf+0x9e>
 80068f6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80068fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068fe:	d52a      	bpl.n	8006956 <powf+0x9e>
 8006900:	f7ff ff0c 	bl	800671c <__errno>
 8006904:	2322      	movs	r3, #34	; 0x22
 8006906:	e014      	b.n	8006932 <powf+0x7a>
 8006908:	f001 f9f3 	bl	8007cf2 <finitef>
 800690c:	b998      	cbnz	r0, 8006936 <powf+0x7e>
 800690e:	eeb0 0a49 	vmov.f32	s0, s18
 8006912:	f001 f9ee 	bl	8007cf2 <finitef>
 8006916:	b170      	cbz	r0, 8006936 <powf+0x7e>
 8006918:	eeb0 0a48 	vmov.f32	s0, s16
 800691c:	f001 f9e9 	bl	8007cf2 <finitef>
 8006920:	b148      	cbz	r0, 8006936 <powf+0x7e>
 8006922:	eef4 8a68 	vcmp.f32	s17, s17
 8006926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800692a:	d7e9      	bvc.n	8006900 <powf+0x48>
 800692c:	f7ff fef6 	bl	800671c <__errno>
 8006930:	2321      	movs	r3, #33	; 0x21
 8006932:	6003      	str	r3, [r0, #0]
 8006934:	e00f      	b.n	8006956 <powf+0x9e>
 8006936:	eef5 8a40 	vcmp.f32	s17, #0.0
 800693a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800693e:	d10a      	bne.n	8006956 <powf+0x9e>
 8006940:	eeb0 0a49 	vmov.f32	s0, s18
 8006944:	f001 f9d5 	bl	8007cf2 <finitef>
 8006948:	b128      	cbz	r0, 8006956 <powf+0x9e>
 800694a:	eeb0 0a48 	vmov.f32	s0, s16
 800694e:	f001 f9d0 	bl	8007cf2 <finitef>
 8006952:	2800      	cmp	r0, #0
 8006954:	d1d4      	bne.n	8006900 <powf+0x48>
 8006956:	eeb0 0a68 	vmov.f32	s0, s17
 800695a:	ecbd 8b04 	vpop	{d8-d9}
 800695e:	bd08      	pop	{r3, pc}
 8006960:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8006964:	e7f7      	b.n	8006956 <powf+0x9e>
	...

08006968 <sqrtf>:
 8006968:	b508      	push	{r3, lr}
 800696a:	ed2d 8b02 	vpush	{d8}
 800696e:	eeb0 8a40 	vmov.f32	s16, s0
 8006972:	f001 f8c7 	bl	8007b04 <__ieee754_sqrtf>
 8006976:	eeb4 8a48 	vcmp.f32	s16, s16
 800697a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800697e:	d60c      	bvs.n	800699a <sqrtf+0x32>
 8006980:	eddf 8a07 	vldr	s17, [pc, #28]	; 80069a0 <sqrtf+0x38>
 8006984:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800698c:	d505      	bpl.n	800699a <sqrtf+0x32>
 800698e:	f7ff fec5 	bl	800671c <__errno>
 8006992:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006996:	2321      	movs	r3, #33	; 0x21
 8006998:	6003      	str	r3, [r0, #0]
 800699a:	ecbd 8b02 	vpop	{d8}
 800699e:	bd08      	pop	{r3, pc}
	...

080069a8 <__ieee754_pow>:
 80069a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ac:	ed2d 8b06 	vpush	{d8-d10}
 80069b0:	b089      	sub	sp, #36	; 0x24
 80069b2:	ed8d 1b00 	vstr	d1, [sp]
 80069b6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80069ba:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80069be:	ea58 0102 	orrs.w	r1, r8, r2
 80069c2:	ec57 6b10 	vmov	r6, r7, d0
 80069c6:	d115      	bne.n	80069f4 <__ieee754_pow+0x4c>
 80069c8:	19b3      	adds	r3, r6, r6
 80069ca:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80069ce:	4152      	adcs	r2, r2
 80069d0:	4299      	cmp	r1, r3
 80069d2:	4b89      	ldr	r3, [pc, #548]	; (8006bf8 <__ieee754_pow+0x250>)
 80069d4:	4193      	sbcs	r3, r2
 80069d6:	f080 84d2 	bcs.w	800737e <__ieee754_pow+0x9d6>
 80069da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069de:	4630      	mov	r0, r6
 80069e0:	4639      	mov	r1, r7
 80069e2:	f7f9 fbff 	bl	80001e4 <__adddf3>
 80069e6:	ec41 0b10 	vmov	d0, r0, r1
 80069ea:	b009      	add	sp, #36	; 0x24
 80069ec:	ecbd 8b06 	vpop	{d8-d10}
 80069f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f4:	4b81      	ldr	r3, [pc, #516]	; (8006bfc <__ieee754_pow+0x254>)
 80069f6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80069fa:	429c      	cmp	r4, r3
 80069fc:	ee10 aa10 	vmov	sl, s0
 8006a00:	463d      	mov	r5, r7
 8006a02:	dc06      	bgt.n	8006a12 <__ieee754_pow+0x6a>
 8006a04:	d101      	bne.n	8006a0a <__ieee754_pow+0x62>
 8006a06:	2e00      	cmp	r6, #0
 8006a08:	d1e7      	bne.n	80069da <__ieee754_pow+0x32>
 8006a0a:	4598      	cmp	r8, r3
 8006a0c:	dc01      	bgt.n	8006a12 <__ieee754_pow+0x6a>
 8006a0e:	d10f      	bne.n	8006a30 <__ieee754_pow+0x88>
 8006a10:	b172      	cbz	r2, 8006a30 <__ieee754_pow+0x88>
 8006a12:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006a16:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8006a1a:	ea55 050a 	orrs.w	r5, r5, sl
 8006a1e:	d1dc      	bne.n	80069da <__ieee754_pow+0x32>
 8006a20:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006a24:	18db      	adds	r3, r3, r3
 8006a26:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006a2a:	4152      	adcs	r2, r2
 8006a2c:	429d      	cmp	r5, r3
 8006a2e:	e7d0      	b.n	80069d2 <__ieee754_pow+0x2a>
 8006a30:	2d00      	cmp	r5, #0
 8006a32:	da3b      	bge.n	8006aac <__ieee754_pow+0x104>
 8006a34:	4b72      	ldr	r3, [pc, #456]	; (8006c00 <__ieee754_pow+0x258>)
 8006a36:	4598      	cmp	r8, r3
 8006a38:	dc51      	bgt.n	8006ade <__ieee754_pow+0x136>
 8006a3a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006a3e:	4598      	cmp	r8, r3
 8006a40:	f340 84ac 	ble.w	800739c <__ieee754_pow+0x9f4>
 8006a44:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006a48:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006a4c:	2b14      	cmp	r3, #20
 8006a4e:	dd0f      	ble.n	8006a70 <__ieee754_pow+0xc8>
 8006a50:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006a54:	fa22 f103 	lsr.w	r1, r2, r3
 8006a58:	fa01 f303 	lsl.w	r3, r1, r3
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	f040 849d 	bne.w	800739c <__ieee754_pow+0x9f4>
 8006a62:	f001 0101 	and.w	r1, r1, #1
 8006a66:	f1c1 0302 	rsb	r3, r1, #2
 8006a6a:	9304      	str	r3, [sp, #16]
 8006a6c:	b182      	cbz	r2, 8006a90 <__ieee754_pow+0xe8>
 8006a6e:	e05f      	b.n	8006b30 <__ieee754_pow+0x188>
 8006a70:	2a00      	cmp	r2, #0
 8006a72:	d15b      	bne.n	8006b2c <__ieee754_pow+0x184>
 8006a74:	f1c3 0314 	rsb	r3, r3, #20
 8006a78:	fa48 f103 	asr.w	r1, r8, r3
 8006a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a80:	4543      	cmp	r3, r8
 8006a82:	f040 8488 	bne.w	8007396 <__ieee754_pow+0x9ee>
 8006a86:	f001 0101 	and.w	r1, r1, #1
 8006a8a:	f1c1 0302 	rsb	r3, r1, #2
 8006a8e:	9304      	str	r3, [sp, #16]
 8006a90:	4b5c      	ldr	r3, [pc, #368]	; (8006c04 <__ieee754_pow+0x25c>)
 8006a92:	4598      	cmp	r8, r3
 8006a94:	d132      	bne.n	8006afc <__ieee754_pow+0x154>
 8006a96:	f1b9 0f00 	cmp.w	r9, #0
 8006a9a:	f280 8478 	bge.w	800738e <__ieee754_pow+0x9e6>
 8006a9e:	4959      	ldr	r1, [pc, #356]	; (8006c04 <__ieee754_pow+0x25c>)
 8006aa0:	4632      	mov	r2, r6
 8006aa2:	463b      	mov	r3, r7
 8006aa4:	2000      	movs	r0, #0
 8006aa6:	f7f9 fe7d 	bl	80007a4 <__aeabi_ddiv>
 8006aaa:	e79c      	b.n	80069e6 <__ieee754_pow+0x3e>
 8006aac:	2300      	movs	r3, #0
 8006aae:	9304      	str	r3, [sp, #16]
 8006ab0:	2a00      	cmp	r2, #0
 8006ab2:	d13d      	bne.n	8006b30 <__ieee754_pow+0x188>
 8006ab4:	4b51      	ldr	r3, [pc, #324]	; (8006bfc <__ieee754_pow+0x254>)
 8006ab6:	4598      	cmp	r8, r3
 8006ab8:	d1ea      	bne.n	8006a90 <__ieee754_pow+0xe8>
 8006aba:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006abe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006ac2:	ea53 030a 	orrs.w	r3, r3, sl
 8006ac6:	f000 845a 	beq.w	800737e <__ieee754_pow+0x9d6>
 8006aca:	4b4f      	ldr	r3, [pc, #316]	; (8006c08 <__ieee754_pow+0x260>)
 8006acc:	429c      	cmp	r4, r3
 8006ace:	dd08      	ble.n	8006ae2 <__ieee754_pow+0x13a>
 8006ad0:	f1b9 0f00 	cmp.w	r9, #0
 8006ad4:	f2c0 8457 	blt.w	8007386 <__ieee754_pow+0x9de>
 8006ad8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006adc:	e783      	b.n	80069e6 <__ieee754_pow+0x3e>
 8006ade:	2302      	movs	r3, #2
 8006ae0:	e7e5      	b.n	8006aae <__ieee754_pow+0x106>
 8006ae2:	f1b9 0f00 	cmp.w	r9, #0
 8006ae6:	f04f 0000 	mov.w	r0, #0
 8006aea:	f04f 0100 	mov.w	r1, #0
 8006aee:	f6bf af7a 	bge.w	80069e6 <__ieee754_pow+0x3e>
 8006af2:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006af6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006afa:	e774      	b.n	80069e6 <__ieee754_pow+0x3e>
 8006afc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006b00:	d106      	bne.n	8006b10 <__ieee754_pow+0x168>
 8006b02:	4632      	mov	r2, r6
 8006b04:	463b      	mov	r3, r7
 8006b06:	4630      	mov	r0, r6
 8006b08:	4639      	mov	r1, r7
 8006b0a:	f7f9 fd21 	bl	8000550 <__aeabi_dmul>
 8006b0e:	e76a      	b.n	80069e6 <__ieee754_pow+0x3e>
 8006b10:	4b3e      	ldr	r3, [pc, #248]	; (8006c0c <__ieee754_pow+0x264>)
 8006b12:	4599      	cmp	r9, r3
 8006b14:	d10c      	bne.n	8006b30 <__ieee754_pow+0x188>
 8006b16:	2d00      	cmp	r5, #0
 8006b18:	db0a      	blt.n	8006b30 <__ieee754_pow+0x188>
 8006b1a:	ec47 6b10 	vmov	d0, r6, r7
 8006b1e:	b009      	add	sp, #36	; 0x24
 8006b20:	ecbd 8b06 	vpop	{d8-d10}
 8006b24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b28:	f000 bc6c 	b.w	8007404 <__ieee754_sqrt>
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	9304      	str	r3, [sp, #16]
 8006b30:	ec47 6b10 	vmov	d0, r6, r7
 8006b34:	f001 f83c 	bl	8007bb0 <fabs>
 8006b38:	ec51 0b10 	vmov	r0, r1, d0
 8006b3c:	f1ba 0f00 	cmp.w	sl, #0
 8006b40:	d129      	bne.n	8006b96 <__ieee754_pow+0x1ee>
 8006b42:	b124      	cbz	r4, 8006b4e <__ieee754_pow+0x1a6>
 8006b44:	4b2f      	ldr	r3, [pc, #188]	; (8006c04 <__ieee754_pow+0x25c>)
 8006b46:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d123      	bne.n	8006b96 <__ieee754_pow+0x1ee>
 8006b4e:	f1b9 0f00 	cmp.w	r9, #0
 8006b52:	da05      	bge.n	8006b60 <__ieee754_pow+0x1b8>
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	2000      	movs	r0, #0
 8006b5a:	492a      	ldr	r1, [pc, #168]	; (8006c04 <__ieee754_pow+0x25c>)
 8006b5c:	f7f9 fe22 	bl	80007a4 <__aeabi_ddiv>
 8006b60:	2d00      	cmp	r5, #0
 8006b62:	f6bf af40 	bge.w	80069e6 <__ieee754_pow+0x3e>
 8006b66:	9b04      	ldr	r3, [sp, #16]
 8006b68:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006b6c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006b70:	4323      	orrs	r3, r4
 8006b72:	d108      	bne.n	8006b86 <__ieee754_pow+0x1de>
 8006b74:	4602      	mov	r2, r0
 8006b76:	460b      	mov	r3, r1
 8006b78:	4610      	mov	r0, r2
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	f7f9 fb30 	bl	80001e0 <__aeabi_dsub>
 8006b80:	4602      	mov	r2, r0
 8006b82:	460b      	mov	r3, r1
 8006b84:	e78f      	b.n	8006aa6 <__ieee754_pow+0xfe>
 8006b86:	9b04      	ldr	r3, [sp, #16]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	f47f af2c 	bne.w	80069e6 <__ieee754_pow+0x3e>
 8006b8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b92:	4619      	mov	r1, r3
 8006b94:	e727      	b.n	80069e6 <__ieee754_pow+0x3e>
 8006b96:	0feb      	lsrs	r3, r5, #31
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	9306      	str	r3, [sp, #24]
 8006b9c:	9a06      	ldr	r2, [sp, #24]
 8006b9e:	9b04      	ldr	r3, [sp, #16]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	d102      	bne.n	8006baa <__ieee754_pow+0x202>
 8006ba4:	4632      	mov	r2, r6
 8006ba6:	463b      	mov	r3, r7
 8006ba8:	e7e6      	b.n	8006b78 <__ieee754_pow+0x1d0>
 8006baa:	4b19      	ldr	r3, [pc, #100]	; (8006c10 <__ieee754_pow+0x268>)
 8006bac:	4598      	cmp	r8, r3
 8006bae:	f340 80fb 	ble.w	8006da8 <__ieee754_pow+0x400>
 8006bb2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006bb6:	4598      	cmp	r8, r3
 8006bb8:	4b13      	ldr	r3, [pc, #76]	; (8006c08 <__ieee754_pow+0x260>)
 8006bba:	dd0c      	ble.n	8006bd6 <__ieee754_pow+0x22e>
 8006bbc:	429c      	cmp	r4, r3
 8006bbe:	dc0f      	bgt.n	8006be0 <__ieee754_pow+0x238>
 8006bc0:	f1b9 0f00 	cmp.w	r9, #0
 8006bc4:	da0f      	bge.n	8006be6 <__ieee754_pow+0x23e>
 8006bc6:	2000      	movs	r0, #0
 8006bc8:	b009      	add	sp, #36	; 0x24
 8006bca:	ecbd 8b06 	vpop	{d8-d10}
 8006bce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd2:	f000 bfc1 	b.w	8007b58 <__math_oflow>
 8006bd6:	429c      	cmp	r4, r3
 8006bd8:	dbf2      	blt.n	8006bc0 <__ieee754_pow+0x218>
 8006bda:	4b0a      	ldr	r3, [pc, #40]	; (8006c04 <__ieee754_pow+0x25c>)
 8006bdc:	429c      	cmp	r4, r3
 8006bde:	dd19      	ble.n	8006c14 <__ieee754_pow+0x26c>
 8006be0:	f1b9 0f00 	cmp.w	r9, #0
 8006be4:	dcef      	bgt.n	8006bc6 <__ieee754_pow+0x21e>
 8006be6:	2000      	movs	r0, #0
 8006be8:	b009      	add	sp, #36	; 0x24
 8006bea:	ecbd 8b06 	vpop	{d8-d10}
 8006bee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf2:	f000 bfa8 	b.w	8007b46 <__math_uflow>
 8006bf6:	bf00      	nop
 8006bf8:	fff00000 	.word	0xfff00000
 8006bfc:	7ff00000 	.word	0x7ff00000
 8006c00:	433fffff 	.word	0x433fffff
 8006c04:	3ff00000 	.word	0x3ff00000
 8006c08:	3fefffff 	.word	0x3fefffff
 8006c0c:	3fe00000 	.word	0x3fe00000
 8006c10:	41e00000 	.word	0x41e00000
 8006c14:	4b60      	ldr	r3, [pc, #384]	; (8006d98 <__ieee754_pow+0x3f0>)
 8006c16:	2200      	movs	r2, #0
 8006c18:	f7f9 fae2 	bl	80001e0 <__aeabi_dsub>
 8006c1c:	a354      	add	r3, pc, #336	; (adr r3, 8006d70 <__ieee754_pow+0x3c8>)
 8006c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c22:	4604      	mov	r4, r0
 8006c24:	460d      	mov	r5, r1
 8006c26:	f7f9 fc93 	bl	8000550 <__aeabi_dmul>
 8006c2a:	a353      	add	r3, pc, #332	; (adr r3, 8006d78 <__ieee754_pow+0x3d0>)
 8006c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c30:	4606      	mov	r6, r0
 8006c32:	460f      	mov	r7, r1
 8006c34:	4620      	mov	r0, r4
 8006c36:	4629      	mov	r1, r5
 8006c38:	f7f9 fc8a 	bl	8000550 <__aeabi_dmul>
 8006c3c:	4b57      	ldr	r3, [pc, #348]	; (8006d9c <__ieee754_pow+0x3f4>)
 8006c3e:	4682      	mov	sl, r0
 8006c40:	468b      	mov	fp, r1
 8006c42:	2200      	movs	r2, #0
 8006c44:	4620      	mov	r0, r4
 8006c46:	4629      	mov	r1, r5
 8006c48:	f7f9 fc82 	bl	8000550 <__aeabi_dmul>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	460b      	mov	r3, r1
 8006c50:	a14b      	add	r1, pc, #300	; (adr r1, 8006d80 <__ieee754_pow+0x3d8>)
 8006c52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c56:	f7f9 fac3 	bl	80001e0 <__aeabi_dsub>
 8006c5a:	4622      	mov	r2, r4
 8006c5c:	462b      	mov	r3, r5
 8006c5e:	f7f9 fc77 	bl	8000550 <__aeabi_dmul>
 8006c62:	4602      	mov	r2, r0
 8006c64:	460b      	mov	r3, r1
 8006c66:	2000      	movs	r0, #0
 8006c68:	494d      	ldr	r1, [pc, #308]	; (8006da0 <__ieee754_pow+0x3f8>)
 8006c6a:	f7f9 fab9 	bl	80001e0 <__aeabi_dsub>
 8006c6e:	4622      	mov	r2, r4
 8006c70:	4680      	mov	r8, r0
 8006c72:	4689      	mov	r9, r1
 8006c74:	462b      	mov	r3, r5
 8006c76:	4620      	mov	r0, r4
 8006c78:	4629      	mov	r1, r5
 8006c7a:	f7f9 fc69 	bl	8000550 <__aeabi_dmul>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	460b      	mov	r3, r1
 8006c82:	4640      	mov	r0, r8
 8006c84:	4649      	mov	r1, r9
 8006c86:	f7f9 fc63 	bl	8000550 <__aeabi_dmul>
 8006c8a:	a33f      	add	r3, pc, #252	; (adr r3, 8006d88 <__ieee754_pow+0x3e0>)
 8006c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c90:	f7f9 fc5e 	bl	8000550 <__aeabi_dmul>
 8006c94:	4602      	mov	r2, r0
 8006c96:	460b      	mov	r3, r1
 8006c98:	4650      	mov	r0, sl
 8006c9a:	4659      	mov	r1, fp
 8006c9c:	f7f9 faa0 	bl	80001e0 <__aeabi_dsub>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4680      	mov	r8, r0
 8006ca6:	4689      	mov	r9, r1
 8006ca8:	4630      	mov	r0, r6
 8006caa:	4639      	mov	r1, r7
 8006cac:	f7f9 fa9a 	bl	80001e4 <__adddf3>
 8006cb0:	2000      	movs	r0, #0
 8006cb2:	4632      	mov	r2, r6
 8006cb4:	463b      	mov	r3, r7
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	460d      	mov	r5, r1
 8006cba:	f7f9 fa91 	bl	80001e0 <__aeabi_dsub>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	4640      	mov	r0, r8
 8006cc4:	4649      	mov	r1, r9
 8006cc6:	f7f9 fa8b 	bl	80001e0 <__aeabi_dsub>
 8006cca:	9b04      	ldr	r3, [sp, #16]
 8006ccc:	9a06      	ldr	r2, [sp, #24]
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	4682      	mov	sl, r0
 8006cd4:	468b      	mov	fp, r1
 8006cd6:	f040 81e7 	bne.w	80070a8 <__ieee754_pow+0x700>
 8006cda:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006d90 <__ieee754_pow+0x3e8>
 8006cde:	eeb0 8a47 	vmov.f32	s16, s14
 8006ce2:	eef0 8a67 	vmov.f32	s17, s15
 8006ce6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006cea:	2600      	movs	r6, #0
 8006cec:	4632      	mov	r2, r6
 8006cee:	463b      	mov	r3, r7
 8006cf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006cf4:	f7f9 fa74 	bl	80001e0 <__aeabi_dsub>
 8006cf8:	4622      	mov	r2, r4
 8006cfa:	462b      	mov	r3, r5
 8006cfc:	f7f9 fc28 	bl	8000550 <__aeabi_dmul>
 8006d00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d04:	4680      	mov	r8, r0
 8006d06:	4689      	mov	r9, r1
 8006d08:	4650      	mov	r0, sl
 8006d0a:	4659      	mov	r1, fp
 8006d0c:	f7f9 fc20 	bl	8000550 <__aeabi_dmul>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	4640      	mov	r0, r8
 8006d16:	4649      	mov	r1, r9
 8006d18:	f7f9 fa64 	bl	80001e4 <__adddf3>
 8006d1c:	4632      	mov	r2, r6
 8006d1e:	463b      	mov	r3, r7
 8006d20:	4680      	mov	r8, r0
 8006d22:	4689      	mov	r9, r1
 8006d24:	4620      	mov	r0, r4
 8006d26:	4629      	mov	r1, r5
 8006d28:	f7f9 fc12 	bl	8000550 <__aeabi_dmul>
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	4604      	mov	r4, r0
 8006d30:	460d      	mov	r5, r1
 8006d32:	4602      	mov	r2, r0
 8006d34:	4649      	mov	r1, r9
 8006d36:	4640      	mov	r0, r8
 8006d38:	f7f9 fa54 	bl	80001e4 <__adddf3>
 8006d3c:	4b19      	ldr	r3, [pc, #100]	; (8006da4 <__ieee754_pow+0x3fc>)
 8006d3e:	4299      	cmp	r1, r3
 8006d40:	ec45 4b19 	vmov	d9, r4, r5
 8006d44:	4606      	mov	r6, r0
 8006d46:	460f      	mov	r7, r1
 8006d48:	468b      	mov	fp, r1
 8006d4a:	f340 82f1 	ble.w	8007330 <__ieee754_pow+0x988>
 8006d4e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006d52:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006d56:	4303      	orrs	r3, r0
 8006d58:	f000 81e4 	beq.w	8007124 <__ieee754_pow+0x77c>
 8006d5c:	ec51 0b18 	vmov	r0, r1, d8
 8006d60:	2200      	movs	r2, #0
 8006d62:	2300      	movs	r3, #0
 8006d64:	f7f9 fe66 	bl	8000a34 <__aeabi_dcmplt>
 8006d68:	3800      	subs	r0, #0
 8006d6a:	bf18      	it	ne
 8006d6c:	2001      	movne	r0, #1
 8006d6e:	e72b      	b.n	8006bc8 <__ieee754_pow+0x220>
 8006d70:	60000000 	.word	0x60000000
 8006d74:	3ff71547 	.word	0x3ff71547
 8006d78:	f85ddf44 	.word	0xf85ddf44
 8006d7c:	3e54ae0b 	.word	0x3e54ae0b
 8006d80:	55555555 	.word	0x55555555
 8006d84:	3fd55555 	.word	0x3fd55555
 8006d88:	652b82fe 	.word	0x652b82fe
 8006d8c:	3ff71547 	.word	0x3ff71547
 8006d90:	00000000 	.word	0x00000000
 8006d94:	bff00000 	.word	0xbff00000
 8006d98:	3ff00000 	.word	0x3ff00000
 8006d9c:	3fd00000 	.word	0x3fd00000
 8006da0:	3fe00000 	.word	0x3fe00000
 8006da4:	408fffff 	.word	0x408fffff
 8006da8:	4bd5      	ldr	r3, [pc, #852]	; (8007100 <__ieee754_pow+0x758>)
 8006daa:	402b      	ands	r3, r5
 8006dac:	2200      	movs	r2, #0
 8006dae:	b92b      	cbnz	r3, 8006dbc <__ieee754_pow+0x414>
 8006db0:	4bd4      	ldr	r3, [pc, #848]	; (8007104 <__ieee754_pow+0x75c>)
 8006db2:	f7f9 fbcd 	bl	8000550 <__aeabi_dmul>
 8006db6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006dba:	460c      	mov	r4, r1
 8006dbc:	1523      	asrs	r3, r4, #20
 8006dbe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006dc2:	4413      	add	r3, r2
 8006dc4:	9305      	str	r3, [sp, #20]
 8006dc6:	4bd0      	ldr	r3, [pc, #832]	; (8007108 <__ieee754_pow+0x760>)
 8006dc8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006dcc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006dd0:	429c      	cmp	r4, r3
 8006dd2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006dd6:	dd08      	ble.n	8006dea <__ieee754_pow+0x442>
 8006dd8:	4bcc      	ldr	r3, [pc, #816]	; (800710c <__ieee754_pow+0x764>)
 8006dda:	429c      	cmp	r4, r3
 8006ddc:	f340 8162 	ble.w	80070a4 <__ieee754_pow+0x6fc>
 8006de0:	9b05      	ldr	r3, [sp, #20]
 8006de2:	3301      	adds	r3, #1
 8006de4:	9305      	str	r3, [sp, #20]
 8006de6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006dea:	2400      	movs	r4, #0
 8006dec:	00e3      	lsls	r3, r4, #3
 8006dee:	9307      	str	r3, [sp, #28]
 8006df0:	4bc7      	ldr	r3, [pc, #796]	; (8007110 <__ieee754_pow+0x768>)
 8006df2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006df6:	ed93 7b00 	vldr	d7, [r3]
 8006dfa:	4629      	mov	r1, r5
 8006dfc:	ec53 2b17 	vmov	r2, r3, d7
 8006e00:	eeb0 9a47 	vmov.f32	s18, s14
 8006e04:	eef0 9a67 	vmov.f32	s19, s15
 8006e08:	4682      	mov	sl, r0
 8006e0a:	f7f9 f9e9 	bl	80001e0 <__aeabi_dsub>
 8006e0e:	4652      	mov	r2, sl
 8006e10:	4606      	mov	r6, r0
 8006e12:	460f      	mov	r7, r1
 8006e14:	462b      	mov	r3, r5
 8006e16:	ec51 0b19 	vmov	r0, r1, d9
 8006e1a:	f7f9 f9e3 	bl	80001e4 <__adddf3>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	460b      	mov	r3, r1
 8006e22:	2000      	movs	r0, #0
 8006e24:	49bb      	ldr	r1, [pc, #748]	; (8007114 <__ieee754_pow+0x76c>)
 8006e26:	f7f9 fcbd 	bl	80007a4 <__aeabi_ddiv>
 8006e2a:	ec41 0b1a 	vmov	d10, r0, r1
 8006e2e:	4602      	mov	r2, r0
 8006e30:	460b      	mov	r3, r1
 8006e32:	4630      	mov	r0, r6
 8006e34:	4639      	mov	r1, r7
 8006e36:	f7f9 fb8b 	bl	8000550 <__aeabi_dmul>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e40:	9302      	str	r3, [sp, #8]
 8006e42:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006e46:	46ab      	mov	fp, r5
 8006e48:	106d      	asrs	r5, r5, #1
 8006e4a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006e4e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006e52:	ec41 0b18 	vmov	d8, r0, r1
 8006e56:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	4640      	mov	r0, r8
 8006e5e:	4649      	mov	r1, r9
 8006e60:	4614      	mov	r4, r2
 8006e62:	461d      	mov	r5, r3
 8006e64:	f7f9 fb74 	bl	8000550 <__aeabi_dmul>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	4630      	mov	r0, r6
 8006e6e:	4639      	mov	r1, r7
 8006e70:	f7f9 f9b6 	bl	80001e0 <__aeabi_dsub>
 8006e74:	ec53 2b19 	vmov	r2, r3, d9
 8006e78:	4606      	mov	r6, r0
 8006e7a:	460f      	mov	r7, r1
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	4629      	mov	r1, r5
 8006e80:	f7f9 f9ae 	bl	80001e0 <__aeabi_dsub>
 8006e84:	4602      	mov	r2, r0
 8006e86:	460b      	mov	r3, r1
 8006e88:	4650      	mov	r0, sl
 8006e8a:	4659      	mov	r1, fp
 8006e8c:	f7f9 f9a8 	bl	80001e0 <__aeabi_dsub>
 8006e90:	4642      	mov	r2, r8
 8006e92:	464b      	mov	r3, r9
 8006e94:	f7f9 fb5c 	bl	8000550 <__aeabi_dmul>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	4630      	mov	r0, r6
 8006e9e:	4639      	mov	r1, r7
 8006ea0:	f7f9 f99e 	bl	80001e0 <__aeabi_dsub>
 8006ea4:	ec53 2b1a 	vmov	r2, r3, d10
 8006ea8:	f7f9 fb52 	bl	8000550 <__aeabi_dmul>
 8006eac:	ec53 2b18 	vmov	r2, r3, d8
 8006eb0:	ec41 0b19 	vmov	d9, r0, r1
 8006eb4:	ec51 0b18 	vmov	r0, r1, d8
 8006eb8:	f7f9 fb4a 	bl	8000550 <__aeabi_dmul>
 8006ebc:	a37c      	add	r3, pc, #496	; (adr r3, 80070b0 <__ieee754_pow+0x708>)
 8006ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec2:	4604      	mov	r4, r0
 8006ec4:	460d      	mov	r5, r1
 8006ec6:	f7f9 fb43 	bl	8000550 <__aeabi_dmul>
 8006eca:	a37b      	add	r3, pc, #492	; (adr r3, 80070b8 <__ieee754_pow+0x710>)
 8006ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed0:	f7f9 f988 	bl	80001e4 <__adddf3>
 8006ed4:	4622      	mov	r2, r4
 8006ed6:	462b      	mov	r3, r5
 8006ed8:	f7f9 fb3a 	bl	8000550 <__aeabi_dmul>
 8006edc:	a378      	add	r3, pc, #480	; (adr r3, 80070c0 <__ieee754_pow+0x718>)
 8006ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee2:	f7f9 f97f 	bl	80001e4 <__adddf3>
 8006ee6:	4622      	mov	r2, r4
 8006ee8:	462b      	mov	r3, r5
 8006eea:	f7f9 fb31 	bl	8000550 <__aeabi_dmul>
 8006eee:	a376      	add	r3, pc, #472	; (adr r3, 80070c8 <__ieee754_pow+0x720>)
 8006ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef4:	f7f9 f976 	bl	80001e4 <__adddf3>
 8006ef8:	4622      	mov	r2, r4
 8006efa:	462b      	mov	r3, r5
 8006efc:	f7f9 fb28 	bl	8000550 <__aeabi_dmul>
 8006f00:	a373      	add	r3, pc, #460	; (adr r3, 80070d0 <__ieee754_pow+0x728>)
 8006f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f06:	f7f9 f96d 	bl	80001e4 <__adddf3>
 8006f0a:	4622      	mov	r2, r4
 8006f0c:	462b      	mov	r3, r5
 8006f0e:	f7f9 fb1f 	bl	8000550 <__aeabi_dmul>
 8006f12:	a371      	add	r3, pc, #452	; (adr r3, 80070d8 <__ieee754_pow+0x730>)
 8006f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f18:	f7f9 f964 	bl	80001e4 <__adddf3>
 8006f1c:	4622      	mov	r2, r4
 8006f1e:	4606      	mov	r6, r0
 8006f20:	460f      	mov	r7, r1
 8006f22:	462b      	mov	r3, r5
 8006f24:	4620      	mov	r0, r4
 8006f26:	4629      	mov	r1, r5
 8006f28:	f7f9 fb12 	bl	8000550 <__aeabi_dmul>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	460b      	mov	r3, r1
 8006f30:	4630      	mov	r0, r6
 8006f32:	4639      	mov	r1, r7
 8006f34:	f7f9 fb0c 	bl	8000550 <__aeabi_dmul>
 8006f38:	4642      	mov	r2, r8
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	460d      	mov	r5, r1
 8006f3e:	464b      	mov	r3, r9
 8006f40:	ec51 0b18 	vmov	r0, r1, d8
 8006f44:	f7f9 f94e 	bl	80001e4 <__adddf3>
 8006f48:	ec53 2b19 	vmov	r2, r3, d9
 8006f4c:	f7f9 fb00 	bl	8000550 <__aeabi_dmul>
 8006f50:	4622      	mov	r2, r4
 8006f52:	462b      	mov	r3, r5
 8006f54:	f7f9 f946 	bl	80001e4 <__adddf3>
 8006f58:	4642      	mov	r2, r8
 8006f5a:	4682      	mov	sl, r0
 8006f5c:	468b      	mov	fp, r1
 8006f5e:	464b      	mov	r3, r9
 8006f60:	4640      	mov	r0, r8
 8006f62:	4649      	mov	r1, r9
 8006f64:	f7f9 faf4 	bl	8000550 <__aeabi_dmul>
 8006f68:	4b6b      	ldr	r3, [pc, #428]	; (8007118 <__ieee754_pow+0x770>)
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	4606      	mov	r6, r0
 8006f6e:	460f      	mov	r7, r1
 8006f70:	f7f9 f938 	bl	80001e4 <__adddf3>
 8006f74:	4652      	mov	r2, sl
 8006f76:	465b      	mov	r3, fp
 8006f78:	f7f9 f934 	bl	80001e4 <__adddf3>
 8006f7c:	2000      	movs	r0, #0
 8006f7e:	4604      	mov	r4, r0
 8006f80:	460d      	mov	r5, r1
 8006f82:	4602      	mov	r2, r0
 8006f84:	460b      	mov	r3, r1
 8006f86:	4640      	mov	r0, r8
 8006f88:	4649      	mov	r1, r9
 8006f8a:	f7f9 fae1 	bl	8000550 <__aeabi_dmul>
 8006f8e:	4b62      	ldr	r3, [pc, #392]	; (8007118 <__ieee754_pow+0x770>)
 8006f90:	4680      	mov	r8, r0
 8006f92:	4689      	mov	r9, r1
 8006f94:	2200      	movs	r2, #0
 8006f96:	4620      	mov	r0, r4
 8006f98:	4629      	mov	r1, r5
 8006f9a:	f7f9 f921 	bl	80001e0 <__aeabi_dsub>
 8006f9e:	4632      	mov	r2, r6
 8006fa0:	463b      	mov	r3, r7
 8006fa2:	f7f9 f91d 	bl	80001e0 <__aeabi_dsub>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	460b      	mov	r3, r1
 8006faa:	4650      	mov	r0, sl
 8006fac:	4659      	mov	r1, fp
 8006fae:	f7f9 f917 	bl	80001e0 <__aeabi_dsub>
 8006fb2:	ec53 2b18 	vmov	r2, r3, d8
 8006fb6:	f7f9 facb 	bl	8000550 <__aeabi_dmul>
 8006fba:	4622      	mov	r2, r4
 8006fbc:	4606      	mov	r6, r0
 8006fbe:	460f      	mov	r7, r1
 8006fc0:	462b      	mov	r3, r5
 8006fc2:	ec51 0b19 	vmov	r0, r1, d9
 8006fc6:	f7f9 fac3 	bl	8000550 <__aeabi_dmul>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	460b      	mov	r3, r1
 8006fce:	4630      	mov	r0, r6
 8006fd0:	4639      	mov	r1, r7
 8006fd2:	f7f9 f907 	bl	80001e4 <__adddf3>
 8006fd6:	4606      	mov	r6, r0
 8006fd8:	460f      	mov	r7, r1
 8006fda:	4602      	mov	r2, r0
 8006fdc:	460b      	mov	r3, r1
 8006fde:	4640      	mov	r0, r8
 8006fe0:	4649      	mov	r1, r9
 8006fe2:	f7f9 f8ff 	bl	80001e4 <__adddf3>
 8006fe6:	a33e      	add	r3, pc, #248	; (adr r3, 80070e0 <__ieee754_pow+0x738>)
 8006fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fec:	2000      	movs	r0, #0
 8006fee:	4604      	mov	r4, r0
 8006ff0:	460d      	mov	r5, r1
 8006ff2:	f7f9 faad 	bl	8000550 <__aeabi_dmul>
 8006ff6:	4642      	mov	r2, r8
 8006ff8:	ec41 0b18 	vmov	d8, r0, r1
 8006ffc:	464b      	mov	r3, r9
 8006ffe:	4620      	mov	r0, r4
 8007000:	4629      	mov	r1, r5
 8007002:	f7f9 f8ed 	bl	80001e0 <__aeabi_dsub>
 8007006:	4602      	mov	r2, r0
 8007008:	460b      	mov	r3, r1
 800700a:	4630      	mov	r0, r6
 800700c:	4639      	mov	r1, r7
 800700e:	f7f9 f8e7 	bl	80001e0 <__aeabi_dsub>
 8007012:	a335      	add	r3, pc, #212	; (adr r3, 80070e8 <__ieee754_pow+0x740>)
 8007014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007018:	f7f9 fa9a 	bl	8000550 <__aeabi_dmul>
 800701c:	a334      	add	r3, pc, #208	; (adr r3, 80070f0 <__ieee754_pow+0x748>)
 800701e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007022:	4606      	mov	r6, r0
 8007024:	460f      	mov	r7, r1
 8007026:	4620      	mov	r0, r4
 8007028:	4629      	mov	r1, r5
 800702a:	f7f9 fa91 	bl	8000550 <__aeabi_dmul>
 800702e:	4602      	mov	r2, r0
 8007030:	460b      	mov	r3, r1
 8007032:	4630      	mov	r0, r6
 8007034:	4639      	mov	r1, r7
 8007036:	f7f9 f8d5 	bl	80001e4 <__adddf3>
 800703a:	9a07      	ldr	r2, [sp, #28]
 800703c:	4b37      	ldr	r3, [pc, #220]	; (800711c <__ieee754_pow+0x774>)
 800703e:	4413      	add	r3, r2
 8007040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007044:	f7f9 f8ce 	bl	80001e4 <__adddf3>
 8007048:	4682      	mov	sl, r0
 800704a:	9805      	ldr	r0, [sp, #20]
 800704c:	468b      	mov	fp, r1
 800704e:	f7f9 fa15 	bl	800047c <__aeabi_i2d>
 8007052:	9a07      	ldr	r2, [sp, #28]
 8007054:	4b32      	ldr	r3, [pc, #200]	; (8007120 <__ieee754_pow+0x778>)
 8007056:	4413      	add	r3, r2
 8007058:	e9d3 8900 	ldrd	r8, r9, [r3]
 800705c:	4606      	mov	r6, r0
 800705e:	460f      	mov	r7, r1
 8007060:	4652      	mov	r2, sl
 8007062:	465b      	mov	r3, fp
 8007064:	ec51 0b18 	vmov	r0, r1, d8
 8007068:	f7f9 f8bc 	bl	80001e4 <__adddf3>
 800706c:	4642      	mov	r2, r8
 800706e:	464b      	mov	r3, r9
 8007070:	f7f9 f8b8 	bl	80001e4 <__adddf3>
 8007074:	4632      	mov	r2, r6
 8007076:	463b      	mov	r3, r7
 8007078:	f7f9 f8b4 	bl	80001e4 <__adddf3>
 800707c:	2000      	movs	r0, #0
 800707e:	4632      	mov	r2, r6
 8007080:	463b      	mov	r3, r7
 8007082:	4604      	mov	r4, r0
 8007084:	460d      	mov	r5, r1
 8007086:	f7f9 f8ab 	bl	80001e0 <__aeabi_dsub>
 800708a:	4642      	mov	r2, r8
 800708c:	464b      	mov	r3, r9
 800708e:	f7f9 f8a7 	bl	80001e0 <__aeabi_dsub>
 8007092:	ec53 2b18 	vmov	r2, r3, d8
 8007096:	f7f9 f8a3 	bl	80001e0 <__aeabi_dsub>
 800709a:	4602      	mov	r2, r0
 800709c:	460b      	mov	r3, r1
 800709e:	4650      	mov	r0, sl
 80070a0:	4659      	mov	r1, fp
 80070a2:	e610      	b.n	8006cc6 <__ieee754_pow+0x31e>
 80070a4:	2401      	movs	r4, #1
 80070a6:	e6a1      	b.n	8006dec <__ieee754_pow+0x444>
 80070a8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80070f8 <__ieee754_pow+0x750>
 80070ac:	e617      	b.n	8006cde <__ieee754_pow+0x336>
 80070ae:	bf00      	nop
 80070b0:	4a454eef 	.word	0x4a454eef
 80070b4:	3fca7e28 	.word	0x3fca7e28
 80070b8:	93c9db65 	.word	0x93c9db65
 80070bc:	3fcd864a 	.word	0x3fcd864a
 80070c0:	a91d4101 	.word	0xa91d4101
 80070c4:	3fd17460 	.word	0x3fd17460
 80070c8:	518f264d 	.word	0x518f264d
 80070cc:	3fd55555 	.word	0x3fd55555
 80070d0:	db6fabff 	.word	0xdb6fabff
 80070d4:	3fdb6db6 	.word	0x3fdb6db6
 80070d8:	33333303 	.word	0x33333303
 80070dc:	3fe33333 	.word	0x3fe33333
 80070e0:	e0000000 	.word	0xe0000000
 80070e4:	3feec709 	.word	0x3feec709
 80070e8:	dc3a03fd 	.word	0xdc3a03fd
 80070ec:	3feec709 	.word	0x3feec709
 80070f0:	145b01f5 	.word	0x145b01f5
 80070f4:	be3e2fe0 	.word	0xbe3e2fe0
 80070f8:	00000000 	.word	0x00000000
 80070fc:	3ff00000 	.word	0x3ff00000
 8007100:	7ff00000 	.word	0x7ff00000
 8007104:	43400000 	.word	0x43400000
 8007108:	0003988e 	.word	0x0003988e
 800710c:	000bb679 	.word	0x000bb679
 8007110:	080086c0 	.word	0x080086c0
 8007114:	3ff00000 	.word	0x3ff00000
 8007118:	40080000 	.word	0x40080000
 800711c:	080086e0 	.word	0x080086e0
 8007120:	080086d0 	.word	0x080086d0
 8007124:	a3b5      	add	r3, pc, #724	; (adr r3, 80073fc <__ieee754_pow+0xa54>)
 8007126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712a:	4640      	mov	r0, r8
 800712c:	4649      	mov	r1, r9
 800712e:	f7f9 f859 	bl	80001e4 <__adddf3>
 8007132:	4622      	mov	r2, r4
 8007134:	ec41 0b1a 	vmov	d10, r0, r1
 8007138:	462b      	mov	r3, r5
 800713a:	4630      	mov	r0, r6
 800713c:	4639      	mov	r1, r7
 800713e:	f7f9 f84f 	bl	80001e0 <__aeabi_dsub>
 8007142:	4602      	mov	r2, r0
 8007144:	460b      	mov	r3, r1
 8007146:	ec51 0b1a 	vmov	r0, r1, d10
 800714a:	f7f9 fc91 	bl	8000a70 <__aeabi_dcmpgt>
 800714e:	2800      	cmp	r0, #0
 8007150:	f47f ae04 	bne.w	8006d5c <__ieee754_pow+0x3b4>
 8007154:	4aa4      	ldr	r2, [pc, #656]	; (80073e8 <__ieee754_pow+0xa40>)
 8007156:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800715a:	4293      	cmp	r3, r2
 800715c:	f340 8108 	ble.w	8007370 <__ieee754_pow+0x9c8>
 8007160:	151b      	asrs	r3, r3, #20
 8007162:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007166:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800716a:	fa4a f303 	asr.w	r3, sl, r3
 800716e:	445b      	add	r3, fp
 8007170:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007174:	4e9d      	ldr	r6, [pc, #628]	; (80073ec <__ieee754_pow+0xa44>)
 8007176:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800717a:	4116      	asrs	r6, r2
 800717c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007180:	2000      	movs	r0, #0
 8007182:	ea23 0106 	bic.w	r1, r3, r6
 8007186:	f1c2 0214 	rsb	r2, r2, #20
 800718a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800718e:	fa4a fa02 	asr.w	sl, sl, r2
 8007192:	f1bb 0f00 	cmp.w	fp, #0
 8007196:	4602      	mov	r2, r0
 8007198:	460b      	mov	r3, r1
 800719a:	4620      	mov	r0, r4
 800719c:	4629      	mov	r1, r5
 800719e:	bfb8      	it	lt
 80071a0:	f1ca 0a00 	rsblt	sl, sl, #0
 80071a4:	f7f9 f81c 	bl	80001e0 <__aeabi_dsub>
 80071a8:	ec41 0b19 	vmov	d9, r0, r1
 80071ac:	4642      	mov	r2, r8
 80071ae:	464b      	mov	r3, r9
 80071b0:	ec51 0b19 	vmov	r0, r1, d9
 80071b4:	f7f9 f816 	bl	80001e4 <__adddf3>
 80071b8:	a37b      	add	r3, pc, #492	; (adr r3, 80073a8 <__ieee754_pow+0xa00>)
 80071ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071be:	2000      	movs	r0, #0
 80071c0:	4604      	mov	r4, r0
 80071c2:	460d      	mov	r5, r1
 80071c4:	f7f9 f9c4 	bl	8000550 <__aeabi_dmul>
 80071c8:	ec53 2b19 	vmov	r2, r3, d9
 80071cc:	4606      	mov	r6, r0
 80071ce:	460f      	mov	r7, r1
 80071d0:	4620      	mov	r0, r4
 80071d2:	4629      	mov	r1, r5
 80071d4:	f7f9 f804 	bl	80001e0 <__aeabi_dsub>
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	4640      	mov	r0, r8
 80071de:	4649      	mov	r1, r9
 80071e0:	f7f8 fffe 	bl	80001e0 <__aeabi_dsub>
 80071e4:	a372      	add	r3, pc, #456	; (adr r3, 80073b0 <__ieee754_pow+0xa08>)
 80071e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ea:	f7f9 f9b1 	bl	8000550 <__aeabi_dmul>
 80071ee:	a372      	add	r3, pc, #456	; (adr r3, 80073b8 <__ieee754_pow+0xa10>)
 80071f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f4:	4680      	mov	r8, r0
 80071f6:	4689      	mov	r9, r1
 80071f8:	4620      	mov	r0, r4
 80071fa:	4629      	mov	r1, r5
 80071fc:	f7f9 f9a8 	bl	8000550 <__aeabi_dmul>
 8007200:	4602      	mov	r2, r0
 8007202:	460b      	mov	r3, r1
 8007204:	4640      	mov	r0, r8
 8007206:	4649      	mov	r1, r9
 8007208:	f7f8 ffec 	bl	80001e4 <__adddf3>
 800720c:	4604      	mov	r4, r0
 800720e:	460d      	mov	r5, r1
 8007210:	4602      	mov	r2, r0
 8007212:	460b      	mov	r3, r1
 8007214:	4630      	mov	r0, r6
 8007216:	4639      	mov	r1, r7
 8007218:	f7f8 ffe4 	bl	80001e4 <__adddf3>
 800721c:	4632      	mov	r2, r6
 800721e:	463b      	mov	r3, r7
 8007220:	4680      	mov	r8, r0
 8007222:	4689      	mov	r9, r1
 8007224:	f7f8 ffdc 	bl	80001e0 <__aeabi_dsub>
 8007228:	4602      	mov	r2, r0
 800722a:	460b      	mov	r3, r1
 800722c:	4620      	mov	r0, r4
 800722e:	4629      	mov	r1, r5
 8007230:	f7f8 ffd6 	bl	80001e0 <__aeabi_dsub>
 8007234:	4642      	mov	r2, r8
 8007236:	4606      	mov	r6, r0
 8007238:	460f      	mov	r7, r1
 800723a:	464b      	mov	r3, r9
 800723c:	4640      	mov	r0, r8
 800723e:	4649      	mov	r1, r9
 8007240:	f7f9 f986 	bl	8000550 <__aeabi_dmul>
 8007244:	a35e      	add	r3, pc, #376	; (adr r3, 80073c0 <__ieee754_pow+0xa18>)
 8007246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724a:	4604      	mov	r4, r0
 800724c:	460d      	mov	r5, r1
 800724e:	f7f9 f97f 	bl	8000550 <__aeabi_dmul>
 8007252:	a35d      	add	r3, pc, #372	; (adr r3, 80073c8 <__ieee754_pow+0xa20>)
 8007254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007258:	f7f8 ffc2 	bl	80001e0 <__aeabi_dsub>
 800725c:	4622      	mov	r2, r4
 800725e:	462b      	mov	r3, r5
 8007260:	f7f9 f976 	bl	8000550 <__aeabi_dmul>
 8007264:	a35a      	add	r3, pc, #360	; (adr r3, 80073d0 <__ieee754_pow+0xa28>)
 8007266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726a:	f7f8 ffbb 	bl	80001e4 <__adddf3>
 800726e:	4622      	mov	r2, r4
 8007270:	462b      	mov	r3, r5
 8007272:	f7f9 f96d 	bl	8000550 <__aeabi_dmul>
 8007276:	a358      	add	r3, pc, #352	; (adr r3, 80073d8 <__ieee754_pow+0xa30>)
 8007278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727c:	f7f8 ffb0 	bl	80001e0 <__aeabi_dsub>
 8007280:	4622      	mov	r2, r4
 8007282:	462b      	mov	r3, r5
 8007284:	f7f9 f964 	bl	8000550 <__aeabi_dmul>
 8007288:	a355      	add	r3, pc, #340	; (adr r3, 80073e0 <__ieee754_pow+0xa38>)
 800728a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728e:	f7f8 ffa9 	bl	80001e4 <__adddf3>
 8007292:	4622      	mov	r2, r4
 8007294:	462b      	mov	r3, r5
 8007296:	f7f9 f95b 	bl	8000550 <__aeabi_dmul>
 800729a:	4602      	mov	r2, r0
 800729c:	460b      	mov	r3, r1
 800729e:	4640      	mov	r0, r8
 80072a0:	4649      	mov	r1, r9
 80072a2:	f7f8 ff9d 	bl	80001e0 <__aeabi_dsub>
 80072a6:	4604      	mov	r4, r0
 80072a8:	460d      	mov	r5, r1
 80072aa:	4602      	mov	r2, r0
 80072ac:	460b      	mov	r3, r1
 80072ae:	4640      	mov	r0, r8
 80072b0:	4649      	mov	r1, r9
 80072b2:	f7f9 f94d 	bl	8000550 <__aeabi_dmul>
 80072b6:	2200      	movs	r2, #0
 80072b8:	ec41 0b19 	vmov	d9, r0, r1
 80072bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80072c0:	4620      	mov	r0, r4
 80072c2:	4629      	mov	r1, r5
 80072c4:	f7f8 ff8c 	bl	80001e0 <__aeabi_dsub>
 80072c8:	4602      	mov	r2, r0
 80072ca:	460b      	mov	r3, r1
 80072cc:	ec51 0b19 	vmov	r0, r1, d9
 80072d0:	f7f9 fa68 	bl	80007a4 <__aeabi_ddiv>
 80072d4:	4632      	mov	r2, r6
 80072d6:	4604      	mov	r4, r0
 80072d8:	460d      	mov	r5, r1
 80072da:	463b      	mov	r3, r7
 80072dc:	4640      	mov	r0, r8
 80072de:	4649      	mov	r1, r9
 80072e0:	f7f9 f936 	bl	8000550 <__aeabi_dmul>
 80072e4:	4632      	mov	r2, r6
 80072e6:	463b      	mov	r3, r7
 80072e8:	f7f8 ff7c 	bl	80001e4 <__adddf3>
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	4620      	mov	r0, r4
 80072f2:	4629      	mov	r1, r5
 80072f4:	f7f8 ff74 	bl	80001e0 <__aeabi_dsub>
 80072f8:	4642      	mov	r2, r8
 80072fa:	464b      	mov	r3, r9
 80072fc:	f7f8 ff70 	bl	80001e0 <__aeabi_dsub>
 8007300:	460b      	mov	r3, r1
 8007302:	4602      	mov	r2, r0
 8007304:	493a      	ldr	r1, [pc, #232]	; (80073f0 <__ieee754_pow+0xa48>)
 8007306:	2000      	movs	r0, #0
 8007308:	f7f8 ff6a 	bl	80001e0 <__aeabi_dsub>
 800730c:	ec41 0b10 	vmov	d0, r0, r1
 8007310:	ee10 3a90 	vmov	r3, s1
 8007314:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007318:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800731c:	da2b      	bge.n	8007376 <__ieee754_pow+0x9ce>
 800731e:	4650      	mov	r0, sl
 8007320:	f000 fc5a 	bl	8007bd8 <scalbn>
 8007324:	ec51 0b10 	vmov	r0, r1, d0
 8007328:	ec53 2b18 	vmov	r2, r3, d8
 800732c:	f7ff bbed 	b.w	8006b0a <__ieee754_pow+0x162>
 8007330:	4b30      	ldr	r3, [pc, #192]	; (80073f4 <__ieee754_pow+0xa4c>)
 8007332:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007336:	429e      	cmp	r6, r3
 8007338:	f77f af0c 	ble.w	8007154 <__ieee754_pow+0x7ac>
 800733c:	4b2e      	ldr	r3, [pc, #184]	; (80073f8 <__ieee754_pow+0xa50>)
 800733e:	440b      	add	r3, r1
 8007340:	4303      	orrs	r3, r0
 8007342:	d009      	beq.n	8007358 <__ieee754_pow+0x9b0>
 8007344:	ec51 0b18 	vmov	r0, r1, d8
 8007348:	2200      	movs	r2, #0
 800734a:	2300      	movs	r3, #0
 800734c:	f7f9 fb72 	bl	8000a34 <__aeabi_dcmplt>
 8007350:	3800      	subs	r0, #0
 8007352:	bf18      	it	ne
 8007354:	2001      	movne	r0, #1
 8007356:	e447      	b.n	8006be8 <__ieee754_pow+0x240>
 8007358:	4622      	mov	r2, r4
 800735a:	462b      	mov	r3, r5
 800735c:	f7f8 ff40 	bl	80001e0 <__aeabi_dsub>
 8007360:	4642      	mov	r2, r8
 8007362:	464b      	mov	r3, r9
 8007364:	f7f9 fb7a 	bl	8000a5c <__aeabi_dcmpge>
 8007368:	2800      	cmp	r0, #0
 800736a:	f43f aef3 	beq.w	8007154 <__ieee754_pow+0x7ac>
 800736e:	e7e9      	b.n	8007344 <__ieee754_pow+0x99c>
 8007370:	f04f 0a00 	mov.w	sl, #0
 8007374:	e71a      	b.n	80071ac <__ieee754_pow+0x804>
 8007376:	ec51 0b10 	vmov	r0, r1, d0
 800737a:	4619      	mov	r1, r3
 800737c:	e7d4      	b.n	8007328 <__ieee754_pow+0x980>
 800737e:	491c      	ldr	r1, [pc, #112]	; (80073f0 <__ieee754_pow+0xa48>)
 8007380:	2000      	movs	r0, #0
 8007382:	f7ff bb30 	b.w	80069e6 <__ieee754_pow+0x3e>
 8007386:	2000      	movs	r0, #0
 8007388:	2100      	movs	r1, #0
 800738a:	f7ff bb2c 	b.w	80069e6 <__ieee754_pow+0x3e>
 800738e:	4630      	mov	r0, r6
 8007390:	4639      	mov	r1, r7
 8007392:	f7ff bb28 	b.w	80069e6 <__ieee754_pow+0x3e>
 8007396:	9204      	str	r2, [sp, #16]
 8007398:	f7ff bb7a 	b.w	8006a90 <__ieee754_pow+0xe8>
 800739c:	2300      	movs	r3, #0
 800739e:	f7ff bb64 	b.w	8006a6a <__ieee754_pow+0xc2>
 80073a2:	bf00      	nop
 80073a4:	f3af 8000 	nop.w
 80073a8:	00000000 	.word	0x00000000
 80073ac:	3fe62e43 	.word	0x3fe62e43
 80073b0:	fefa39ef 	.word	0xfefa39ef
 80073b4:	3fe62e42 	.word	0x3fe62e42
 80073b8:	0ca86c39 	.word	0x0ca86c39
 80073bc:	be205c61 	.word	0xbe205c61
 80073c0:	72bea4d0 	.word	0x72bea4d0
 80073c4:	3e663769 	.word	0x3e663769
 80073c8:	c5d26bf1 	.word	0xc5d26bf1
 80073cc:	3ebbbd41 	.word	0x3ebbbd41
 80073d0:	af25de2c 	.word	0xaf25de2c
 80073d4:	3f11566a 	.word	0x3f11566a
 80073d8:	16bebd93 	.word	0x16bebd93
 80073dc:	3f66c16c 	.word	0x3f66c16c
 80073e0:	5555553e 	.word	0x5555553e
 80073e4:	3fc55555 	.word	0x3fc55555
 80073e8:	3fe00000 	.word	0x3fe00000
 80073ec:	000fffff 	.word	0x000fffff
 80073f0:	3ff00000 	.word	0x3ff00000
 80073f4:	4090cbff 	.word	0x4090cbff
 80073f8:	3f6f3400 	.word	0x3f6f3400
 80073fc:	652b82fe 	.word	0x652b82fe
 8007400:	3c971547 	.word	0x3c971547

08007404 <__ieee754_sqrt>:
 8007404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007408:	ec55 4b10 	vmov	r4, r5, d0
 800740c:	4e55      	ldr	r6, [pc, #340]	; (8007564 <__ieee754_sqrt+0x160>)
 800740e:	43ae      	bics	r6, r5
 8007410:	ee10 0a10 	vmov	r0, s0
 8007414:	ee10 3a10 	vmov	r3, s0
 8007418:	462a      	mov	r2, r5
 800741a:	4629      	mov	r1, r5
 800741c:	d110      	bne.n	8007440 <__ieee754_sqrt+0x3c>
 800741e:	ee10 2a10 	vmov	r2, s0
 8007422:	462b      	mov	r3, r5
 8007424:	f7f9 f894 	bl	8000550 <__aeabi_dmul>
 8007428:	4602      	mov	r2, r0
 800742a:	460b      	mov	r3, r1
 800742c:	4620      	mov	r0, r4
 800742e:	4629      	mov	r1, r5
 8007430:	f7f8 fed8 	bl	80001e4 <__adddf3>
 8007434:	4604      	mov	r4, r0
 8007436:	460d      	mov	r5, r1
 8007438:	ec45 4b10 	vmov	d0, r4, r5
 800743c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007440:	2d00      	cmp	r5, #0
 8007442:	dc10      	bgt.n	8007466 <__ieee754_sqrt+0x62>
 8007444:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007448:	4330      	orrs	r0, r6
 800744a:	d0f5      	beq.n	8007438 <__ieee754_sqrt+0x34>
 800744c:	b15d      	cbz	r5, 8007466 <__ieee754_sqrt+0x62>
 800744e:	ee10 2a10 	vmov	r2, s0
 8007452:	462b      	mov	r3, r5
 8007454:	ee10 0a10 	vmov	r0, s0
 8007458:	f7f8 fec2 	bl	80001e0 <__aeabi_dsub>
 800745c:	4602      	mov	r2, r0
 800745e:	460b      	mov	r3, r1
 8007460:	f7f9 f9a0 	bl	80007a4 <__aeabi_ddiv>
 8007464:	e7e6      	b.n	8007434 <__ieee754_sqrt+0x30>
 8007466:	1512      	asrs	r2, r2, #20
 8007468:	d074      	beq.n	8007554 <__ieee754_sqrt+0x150>
 800746a:	07d4      	lsls	r4, r2, #31
 800746c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007470:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8007474:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007478:	bf5e      	ittt	pl
 800747a:	0fda      	lsrpl	r2, r3, #31
 800747c:	005b      	lslpl	r3, r3, #1
 800747e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8007482:	2400      	movs	r4, #0
 8007484:	0fda      	lsrs	r2, r3, #31
 8007486:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800748a:	107f      	asrs	r7, r7, #1
 800748c:	005b      	lsls	r3, r3, #1
 800748e:	2516      	movs	r5, #22
 8007490:	4620      	mov	r0, r4
 8007492:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007496:	1886      	adds	r6, r0, r2
 8007498:	428e      	cmp	r6, r1
 800749a:	bfde      	ittt	le
 800749c:	1b89      	suble	r1, r1, r6
 800749e:	18b0      	addle	r0, r6, r2
 80074a0:	18a4      	addle	r4, r4, r2
 80074a2:	0049      	lsls	r1, r1, #1
 80074a4:	3d01      	subs	r5, #1
 80074a6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80074aa:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80074ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80074b2:	d1f0      	bne.n	8007496 <__ieee754_sqrt+0x92>
 80074b4:	462a      	mov	r2, r5
 80074b6:	f04f 0e20 	mov.w	lr, #32
 80074ba:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80074be:	4281      	cmp	r1, r0
 80074c0:	eb06 0c05 	add.w	ip, r6, r5
 80074c4:	dc02      	bgt.n	80074cc <__ieee754_sqrt+0xc8>
 80074c6:	d113      	bne.n	80074f0 <__ieee754_sqrt+0xec>
 80074c8:	459c      	cmp	ip, r3
 80074ca:	d811      	bhi.n	80074f0 <__ieee754_sqrt+0xec>
 80074cc:	f1bc 0f00 	cmp.w	ip, #0
 80074d0:	eb0c 0506 	add.w	r5, ip, r6
 80074d4:	da43      	bge.n	800755e <__ieee754_sqrt+0x15a>
 80074d6:	2d00      	cmp	r5, #0
 80074d8:	db41      	blt.n	800755e <__ieee754_sqrt+0x15a>
 80074da:	f100 0801 	add.w	r8, r0, #1
 80074de:	1a09      	subs	r1, r1, r0
 80074e0:	459c      	cmp	ip, r3
 80074e2:	bf88      	it	hi
 80074e4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80074e8:	eba3 030c 	sub.w	r3, r3, ip
 80074ec:	4432      	add	r2, r6
 80074ee:	4640      	mov	r0, r8
 80074f0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80074f4:	f1be 0e01 	subs.w	lr, lr, #1
 80074f8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80074fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007500:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007504:	d1db      	bne.n	80074be <__ieee754_sqrt+0xba>
 8007506:	430b      	orrs	r3, r1
 8007508:	d006      	beq.n	8007518 <__ieee754_sqrt+0x114>
 800750a:	1c50      	adds	r0, r2, #1
 800750c:	bf13      	iteet	ne
 800750e:	3201      	addne	r2, #1
 8007510:	3401      	addeq	r4, #1
 8007512:	4672      	moveq	r2, lr
 8007514:	f022 0201 	bicne.w	r2, r2, #1
 8007518:	1063      	asrs	r3, r4, #1
 800751a:	0852      	lsrs	r2, r2, #1
 800751c:	07e1      	lsls	r1, r4, #31
 800751e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007522:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007526:	bf48      	it	mi
 8007528:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800752c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007530:	4614      	mov	r4, r2
 8007532:	e781      	b.n	8007438 <__ieee754_sqrt+0x34>
 8007534:	0ad9      	lsrs	r1, r3, #11
 8007536:	3815      	subs	r0, #21
 8007538:	055b      	lsls	r3, r3, #21
 800753a:	2900      	cmp	r1, #0
 800753c:	d0fa      	beq.n	8007534 <__ieee754_sqrt+0x130>
 800753e:	02cd      	lsls	r5, r1, #11
 8007540:	d50a      	bpl.n	8007558 <__ieee754_sqrt+0x154>
 8007542:	f1c2 0420 	rsb	r4, r2, #32
 8007546:	fa23 f404 	lsr.w	r4, r3, r4
 800754a:	1e55      	subs	r5, r2, #1
 800754c:	4093      	lsls	r3, r2
 800754e:	4321      	orrs	r1, r4
 8007550:	1b42      	subs	r2, r0, r5
 8007552:	e78a      	b.n	800746a <__ieee754_sqrt+0x66>
 8007554:	4610      	mov	r0, r2
 8007556:	e7f0      	b.n	800753a <__ieee754_sqrt+0x136>
 8007558:	0049      	lsls	r1, r1, #1
 800755a:	3201      	adds	r2, #1
 800755c:	e7ef      	b.n	800753e <__ieee754_sqrt+0x13a>
 800755e:	4680      	mov	r8, r0
 8007560:	e7bd      	b.n	80074de <__ieee754_sqrt+0xda>
 8007562:	bf00      	nop
 8007564:	7ff00000 	.word	0x7ff00000

08007568 <__ieee754_powf>:
 8007568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800756c:	ee10 4a90 	vmov	r4, s1
 8007570:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8007574:	ed2d 8b02 	vpush	{d8}
 8007578:	ee10 6a10 	vmov	r6, s0
 800757c:	eeb0 8a40 	vmov.f32	s16, s0
 8007580:	eef0 8a60 	vmov.f32	s17, s1
 8007584:	d10c      	bne.n	80075a0 <__ieee754_powf+0x38>
 8007586:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800758a:	0076      	lsls	r6, r6, #1
 800758c:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8007590:	f240 8296 	bls.w	8007ac0 <__ieee754_powf+0x558>
 8007594:	ee38 0a28 	vadd.f32	s0, s16, s17
 8007598:	ecbd 8b02 	vpop	{d8}
 800759c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075a0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80075a4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80075a8:	dcf4      	bgt.n	8007594 <__ieee754_powf+0x2c>
 80075aa:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80075ae:	dd08      	ble.n	80075c2 <__ieee754_powf+0x5a>
 80075b0:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 80075b4:	d1ee      	bne.n	8007594 <__ieee754_powf+0x2c>
 80075b6:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 80075ba:	0064      	lsls	r4, r4, #1
 80075bc:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80075c0:	e7e6      	b.n	8007590 <__ieee754_powf+0x28>
 80075c2:	2e00      	cmp	r6, #0
 80075c4:	da20      	bge.n	8007608 <__ieee754_powf+0xa0>
 80075c6:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 80075ca:	da2d      	bge.n	8007628 <__ieee754_powf+0xc0>
 80075cc:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80075d0:	f2c0 827f 	blt.w	8007ad2 <__ieee754_powf+0x56a>
 80075d4:	ea4f 53e8 	mov.w	r3, r8, asr #23
 80075d8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80075dc:	fa48 f703 	asr.w	r7, r8, r3
 80075e0:	fa07 f303 	lsl.w	r3, r7, r3
 80075e4:	4543      	cmp	r3, r8
 80075e6:	f040 8274 	bne.w	8007ad2 <__ieee754_powf+0x56a>
 80075ea:	f007 0701 	and.w	r7, r7, #1
 80075ee:	f1c7 0702 	rsb	r7, r7, #2
 80075f2:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80075f6:	d11f      	bne.n	8007638 <__ieee754_powf+0xd0>
 80075f8:	2c00      	cmp	r4, #0
 80075fa:	f280 8267 	bge.w	8007acc <__ieee754_powf+0x564>
 80075fe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007602:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8007606:	e7c7      	b.n	8007598 <__ieee754_powf+0x30>
 8007608:	2700      	movs	r7, #0
 800760a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800760e:	d1f0      	bne.n	80075f2 <__ieee754_powf+0x8a>
 8007610:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8007614:	f000 8254 	beq.w	8007ac0 <__ieee754_powf+0x558>
 8007618:	dd08      	ble.n	800762c <__ieee754_powf+0xc4>
 800761a:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8007924 <__ieee754_powf+0x3bc>
 800761e:	2c00      	cmp	r4, #0
 8007620:	bfa8      	it	ge
 8007622:	eeb0 0a68 	vmovge.f32	s0, s17
 8007626:	e7b7      	b.n	8007598 <__ieee754_powf+0x30>
 8007628:	2702      	movs	r7, #2
 800762a:	e7ee      	b.n	800760a <__ieee754_powf+0xa2>
 800762c:	2c00      	cmp	r4, #0
 800762e:	f280 824a 	bge.w	8007ac6 <__ieee754_powf+0x55e>
 8007632:	eeb1 0a68 	vneg.f32	s0, s17
 8007636:	e7af      	b.n	8007598 <__ieee754_powf+0x30>
 8007638:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800763c:	d102      	bne.n	8007644 <__ieee754_powf+0xdc>
 800763e:	ee28 0a08 	vmul.f32	s0, s16, s16
 8007642:	e7a9      	b.n	8007598 <__ieee754_powf+0x30>
 8007644:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8007648:	eeb0 0a48 	vmov.f32	s0, s16
 800764c:	d107      	bne.n	800765e <__ieee754_powf+0xf6>
 800764e:	2e00      	cmp	r6, #0
 8007650:	db05      	blt.n	800765e <__ieee754_powf+0xf6>
 8007652:	ecbd 8b02 	vpop	{d8}
 8007656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800765a:	f000 ba53 	b.w	8007b04 <__ieee754_sqrtf>
 800765e:	f000 fb41 	bl	8007ce4 <fabsf>
 8007662:	b125      	cbz	r5, 800766e <__ieee754_powf+0x106>
 8007664:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8007668:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800766c:	d116      	bne.n	800769c <__ieee754_powf+0x134>
 800766e:	2c00      	cmp	r4, #0
 8007670:	bfbc      	itt	lt
 8007672:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8007676:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800767a:	2e00      	cmp	r6, #0
 800767c:	da8c      	bge.n	8007598 <__ieee754_powf+0x30>
 800767e:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8007682:	ea55 0307 	orrs.w	r3, r5, r7
 8007686:	d104      	bne.n	8007692 <__ieee754_powf+0x12a>
 8007688:	ee70 7a40 	vsub.f32	s15, s0, s0
 800768c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007690:	e782      	b.n	8007598 <__ieee754_powf+0x30>
 8007692:	2f01      	cmp	r7, #1
 8007694:	d180      	bne.n	8007598 <__ieee754_powf+0x30>
 8007696:	eeb1 0a40 	vneg.f32	s0, s0
 800769a:	e77d      	b.n	8007598 <__ieee754_powf+0x30>
 800769c:	0ff0      	lsrs	r0, r6, #31
 800769e:	3801      	subs	r0, #1
 80076a0:	ea57 0300 	orrs.w	r3, r7, r0
 80076a4:	d104      	bne.n	80076b0 <__ieee754_powf+0x148>
 80076a6:	ee38 8a48 	vsub.f32	s16, s16, s16
 80076aa:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80076ae:	e773      	b.n	8007598 <__ieee754_powf+0x30>
 80076b0:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 80076b4:	dd74      	ble.n	80077a0 <__ieee754_powf+0x238>
 80076b6:	4b9c      	ldr	r3, [pc, #624]	; (8007928 <__ieee754_powf+0x3c0>)
 80076b8:	429d      	cmp	r5, r3
 80076ba:	dc08      	bgt.n	80076ce <__ieee754_powf+0x166>
 80076bc:	2c00      	cmp	r4, #0
 80076be:	da0b      	bge.n	80076d8 <__ieee754_powf+0x170>
 80076c0:	2000      	movs	r0, #0
 80076c2:	ecbd 8b02 	vpop	{d8}
 80076c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076ca:	f000 ba6b 	b.w	8007ba4 <__math_oflowf>
 80076ce:	4b97      	ldr	r3, [pc, #604]	; (800792c <__ieee754_powf+0x3c4>)
 80076d0:	429d      	cmp	r5, r3
 80076d2:	dd08      	ble.n	80076e6 <__ieee754_powf+0x17e>
 80076d4:	2c00      	cmp	r4, #0
 80076d6:	dcf3      	bgt.n	80076c0 <__ieee754_powf+0x158>
 80076d8:	2000      	movs	r0, #0
 80076da:	ecbd 8b02 	vpop	{d8}
 80076de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076e2:	f000 ba59 	b.w	8007b98 <__math_uflowf>
 80076e6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80076ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 80076ee:	eddf 6a90 	vldr	s13, [pc, #576]	; 8007930 <__ieee754_powf+0x3c8>
 80076f2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80076f6:	eee0 6a67 	vfms.f32	s13, s0, s15
 80076fa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80076fe:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8007702:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800770a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8007934 <__ieee754_powf+0x3cc>
 800770e:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8007712:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8007938 <__ieee754_powf+0x3d0>
 8007716:	eee0 7a07 	vfma.f32	s15, s0, s14
 800771a:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800793c <__ieee754_powf+0x3d4>
 800771e:	eef0 6a67 	vmov.f32	s13, s15
 8007722:	eee0 6a07 	vfma.f32	s13, s0, s14
 8007726:	ee16 3a90 	vmov	r3, s13
 800772a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800772e:	f023 030f 	bic.w	r3, r3, #15
 8007732:	ee00 3a90 	vmov	s1, r3
 8007736:	eee0 0a47 	vfms.f32	s1, s0, s14
 800773a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800773e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8007742:	f024 040f 	bic.w	r4, r4, #15
 8007746:	ee07 4a10 	vmov	s14, r4
 800774a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800774e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8007752:	ee07 3a90 	vmov	s15, r3
 8007756:	eee7 0a27 	vfma.f32	s1, s14, s15
 800775a:	3f01      	subs	r7, #1
 800775c:	ea57 0200 	orrs.w	r2, r7, r0
 8007760:	ee07 4a10 	vmov	s14, r4
 8007764:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007768:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800776c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8007770:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8007774:	ee17 4a10 	vmov	r4, s14
 8007778:	bf08      	it	eq
 800777a:	eeb0 8a40 	vmoveq.f32	s16, s0
 800777e:	2c00      	cmp	r4, #0
 8007780:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007784:	f340 817e 	ble.w	8007a84 <__ieee754_powf+0x51c>
 8007788:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800778c:	f340 80f8 	ble.w	8007980 <__ieee754_powf+0x418>
 8007790:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007798:	bf4c      	ite	mi
 800779a:	2001      	movmi	r0, #1
 800779c:	2000      	movpl	r0, #0
 800779e:	e790      	b.n	80076c2 <__ieee754_powf+0x15a>
 80077a0:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 80077a4:	bf01      	itttt	eq
 80077a6:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8007940 <__ieee754_powf+0x3d8>
 80077aa:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80077ae:	f06f 0217 	mvneq.w	r2, #23
 80077b2:	ee17 5a90 	vmoveq	r5, s15
 80077b6:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80077ba:	bf18      	it	ne
 80077bc:	2200      	movne	r2, #0
 80077be:	3b7f      	subs	r3, #127	; 0x7f
 80077c0:	4413      	add	r3, r2
 80077c2:	4a60      	ldr	r2, [pc, #384]	; (8007944 <__ieee754_powf+0x3dc>)
 80077c4:	f3c5 0516 	ubfx	r5, r5, #0, #23
 80077c8:	4295      	cmp	r5, r2
 80077ca:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 80077ce:	dd06      	ble.n	80077de <__ieee754_powf+0x276>
 80077d0:	4a5d      	ldr	r2, [pc, #372]	; (8007948 <__ieee754_powf+0x3e0>)
 80077d2:	4295      	cmp	r5, r2
 80077d4:	f340 80a4 	ble.w	8007920 <__ieee754_powf+0x3b8>
 80077d8:	3301      	adds	r3, #1
 80077da:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80077de:	2500      	movs	r5, #0
 80077e0:	4a5a      	ldr	r2, [pc, #360]	; (800794c <__ieee754_powf+0x3e4>)
 80077e2:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80077e6:	ee07 1a90 	vmov	s15, r1
 80077ea:	ed92 7a00 	vldr	s14, [r2]
 80077ee:	4a58      	ldr	r2, [pc, #352]	; (8007950 <__ieee754_powf+0x3e8>)
 80077f0:	ee37 6a27 	vadd.f32	s12, s14, s15
 80077f4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80077f8:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80077fc:	1049      	asrs	r1, r1, #1
 80077fe:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8007802:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8007806:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800780a:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800780e:	ee06 1a10 	vmov	s12, r1
 8007812:	ee65 4a26 	vmul.f32	s9, s10, s13
 8007816:	ee36 7a47 	vsub.f32	s14, s12, s14
 800781a:	ee14 6a90 	vmov	r6, s9
 800781e:	4016      	ands	r6, r2
 8007820:	ee05 6a90 	vmov	s11, r6
 8007824:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8007828:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800782c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8007954 <__ieee754_powf+0x3ec>
 8007830:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8007834:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8007838:	ee25 6a26 	vmul.f32	s12, s10, s13
 800783c:	eddf 6a46 	vldr	s13, [pc, #280]	; 8007958 <__ieee754_powf+0x3f0>
 8007840:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8007844:	eddf 6a45 	vldr	s13, [pc, #276]	; 800795c <__ieee754_powf+0x3f4>
 8007848:	eee7 6a27 	vfma.f32	s13, s14, s15
 800784c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007930 <__ieee754_powf+0x3c8>
 8007850:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007854:	eddf 6a42 	vldr	s13, [pc, #264]	; 8007960 <__ieee754_powf+0x3f8>
 8007858:	eee7 6a27 	vfma.f32	s13, s14, s15
 800785c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8007964 <__ieee754_powf+0x3fc>
 8007860:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007864:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8007868:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800786c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8007870:	eee5 6a07 	vfma.f32	s13, s10, s14
 8007874:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8007878:	eef0 7a45 	vmov.f32	s15, s10
 800787c:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8007880:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007884:	ee17 1a90 	vmov	r1, s15
 8007888:	4011      	ands	r1, r2
 800788a:	ee07 1a90 	vmov	s15, r1
 800788e:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8007892:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8007896:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800789a:	ee27 7a24 	vmul.f32	s14, s14, s9
 800789e:	eea6 7a27 	vfma.f32	s14, s12, s15
 80078a2:	eeb0 6a47 	vmov.f32	s12, s14
 80078a6:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80078aa:	ee16 1a10 	vmov	r1, s12
 80078ae:	4011      	ands	r1, r2
 80078b0:	ee06 1a90 	vmov	s13, r1
 80078b4:	eee5 6ae7 	vfms.f32	s13, s11, s15
 80078b8:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007968 <__ieee754_powf+0x400>
 80078bc:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800796c <__ieee754_powf+0x404>
 80078c0:	ee37 7a66 	vsub.f32	s14, s14, s13
 80078c4:	ee06 1a10 	vmov	s12, r1
 80078c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80078cc:	eddf 7a28 	vldr	s15, [pc, #160]	; 8007970 <__ieee754_powf+0x408>
 80078d0:	4928      	ldr	r1, [pc, #160]	; (8007974 <__ieee754_powf+0x40c>)
 80078d2:	eea6 7a27 	vfma.f32	s14, s12, s15
 80078d6:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80078da:	edd1 7a00 	vldr	s15, [r1]
 80078de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80078e2:	ee07 3a90 	vmov	s15, r3
 80078e6:	4b24      	ldr	r3, [pc, #144]	; (8007978 <__ieee754_powf+0x410>)
 80078e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80078ec:	eef0 7a47 	vmov.f32	s15, s14
 80078f0:	eee6 7a25 	vfma.f32	s15, s12, s11
 80078f4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80078f8:	edd5 0a00 	vldr	s1, [r5]
 80078fc:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8007900:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007904:	ee17 3a90 	vmov	r3, s15
 8007908:	4013      	ands	r3, r2
 800790a:	ee07 3a90 	vmov	s15, r3
 800790e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8007912:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8007916:	eee6 6a65 	vfms.f32	s13, s12, s11
 800791a:	ee77 7a66 	vsub.f32	s15, s14, s13
 800791e:	e70e      	b.n	800773e <__ieee754_powf+0x1d6>
 8007920:	2501      	movs	r5, #1
 8007922:	e75d      	b.n	80077e0 <__ieee754_powf+0x278>
 8007924:	00000000 	.word	0x00000000
 8007928:	3f7ffff3 	.word	0x3f7ffff3
 800792c:	3f800007 	.word	0x3f800007
 8007930:	3eaaaaab 	.word	0x3eaaaaab
 8007934:	3fb8aa3b 	.word	0x3fb8aa3b
 8007938:	36eca570 	.word	0x36eca570
 800793c:	3fb8aa00 	.word	0x3fb8aa00
 8007940:	4b800000 	.word	0x4b800000
 8007944:	001cc471 	.word	0x001cc471
 8007948:	005db3d6 	.word	0x005db3d6
 800794c:	080086f0 	.word	0x080086f0
 8007950:	fffff000 	.word	0xfffff000
 8007954:	3e6c3255 	.word	0x3e6c3255
 8007958:	3e53f142 	.word	0x3e53f142
 800795c:	3e8ba305 	.word	0x3e8ba305
 8007960:	3edb6db7 	.word	0x3edb6db7
 8007964:	3f19999a 	.word	0x3f19999a
 8007968:	3f76384f 	.word	0x3f76384f
 800796c:	3f763800 	.word	0x3f763800
 8007970:	369dc3a0 	.word	0x369dc3a0
 8007974:	08008700 	.word	0x08008700
 8007978:	080086f8 	.word	0x080086f8
 800797c:	3338aa3c 	.word	0x3338aa3c
 8007980:	f040 8095 	bne.w	8007aae <__ieee754_powf+0x546>
 8007984:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800797c <__ieee754_powf+0x414>
 8007988:	ee37 7a67 	vsub.f32	s14, s14, s15
 800798c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8007990:	eef4 6ac7 	vcmpe.f32	s13, s14
 8007994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007998:	f73f aefa 	bgt.w	8007790 <__ieee754_powf+0x228>
 800799c:	15db      	asrs	r3, r3, #23
 800799e:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80079a2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80079a6:	4103      	asrs	r3, r0
 80079a8:	4423      	add	r3, r4
 80079aa:	494b      	ldr	r1, [pc, #300]	; (8007ad8 <__ieee754_powf+0x570>)
 80079ac:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80079b0:	3a7f      	subs	r2, #127	; 0x7f
 80079b2:	4111      	asrs	r1, r2
 80079b4:	ea23 0101 	bic.w	r1, r3, r1
 80079b8:	ee07 1a10 	vmov	s14, r1
 80079bc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80079c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80079c4:	f1c2 0217 	rsb	r2, r2, #23
 80079c8:	4110      	asrs	r0, r2
 80079ca:	2c00      	cmp	r4, #0
 80079cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80079d0:	bfb8      	it	lt
 80079d2:	4240      	neglt	r0, r0
 80079d4:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80079d8:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8007adc <__ieee754_powf+0x574>
 80079dc:	eddf 6a40 	vldr	s13, [pc, #256]	; 8007ae0 <__ieee754_powf+0x578>
 80079e0:	ee17 3a10 	vmov	r3, s14
 80079e4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80079e8:	f023 030f 	bic.w	r3, r3, #15
 80079ec:	ee07 3a10 	vmov	s14, r3
 80079f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079f4:	ee27 0a00 	vmul.f32	s0, s14, s0
 80079f8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80079fc:	eddf 7a39 	vldr	s15, [pc, #228]	; 8007ae4 <__ieee754_powf+0x57c>
 8007a00:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8007a04:	eef0 7a40 	vmov.f32	s15, s0
 8007a08:	eee7 7a26 	vfma.f32	s15, s14, s13
 8007a0c:	eeb0 6a67 	vmov.f32	s12, s15
 8007a10:	eea7 6a66 	vfms.f32	s12, s14, s13
 8007a14:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8007a18:	ee30 0a46 	vsub.f32	s0, s0, s12
 8007a1c:	eddf 6a32 	vldr	s13, [pc, #200]	; 8007ae8 <__ieee754_powf+0x580>
 8007a20:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8007aec <__ieee754_powf+0x584>
 8007a24:	eee7 6a06 	vfma.f32	s13, s14, s12
 8007a28:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8007af0 <__ieee754_powf+0x588>
 8007a2c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8007a30:	eddf 6a30 	vldr	s13, [pc, #192]	; 8007af4 <__ieee754_powf+0x58c>
 8007a34:	eee6 6a07 	vfma.f32	s13, s12, s14
 8007a38:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8007af8 <__ieee754_powf+0x590>
 8007a3c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8007a40:	eef0 6a67 	vmov.f32	s13, s15
 8007a44:	eee6 6a47 	vfms.f32	s13, s12, s14
 8007a48:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007a4c:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8007a50:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8007a54:	eea7 0a80 	vfma.f32	s0, s15, s0
 8007a58:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007a5c:	ee37 0a40 	vsub.f32	s0, s14, s0
 8007a60:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007a64:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007a68:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007a6c:	ee10 3a10 	vmov	r3, s0
 8007a70:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8007a74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a78:	da1f      	bge.n	8007aba <__ieee754_powf+0x552>
 8007a7a:	f000 f947 	bl	8007d0c <scalbnf>
 8007a7e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007a82:	e589      	b.n	8007598 <__ieee754_powf+0x30>
 8007a84:	4a1d      	ldr	r2, [pc, #116]	; (8007afc <__ieee754_powf+0x594>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	dd07      	ble.n	8007a9a <__ieee754_powf+0x532>
 8007a8a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a92:	bf4c      	ite	mi
 8007a94:	2001      	movmi	r0, #1
 8007a96:	2000      	movpl	r0, #0
 8007a98:	e61f      	b.n	80076da <__ieee754_powf+0x172>
 8007a9a:	d108      	bne.n	8007aae <__ieee754_powf+0x546>
 8007a9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007aa0:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8007aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aa8:	f6ff af78 	blt.w	800799c <__ieee754_powf+0x434>
 8007aac:	e7ed      	b.n	8007a8a <__ieee754_powf+0x522>
 8007aae:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8007ab2:	f73f af73 	bgt.w	800799c <__ieee754_powf+0x434>
 8007ab6:	2000      	movs	r0, #0
 8007ab8:	e78c      	b.n	80079d4 <__ieee754_powf+0x46c>
 8007aba:	ee00 3a10 	vmov	s0, r3
 8007abe:	e7de      	b.n	8007a7e <__ieee754_powf+0x516>
 8007ac0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007ac4:	e568      	b.n	8007598 <__ieee754_powf+0x30>
 8007ac6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8007b00 <__ieee754_powf+0x598>
 8007aca:	e565      	b.n	8007598 <__ieee754_powf+0x30>
 8007acc:	eeb0 0a48 	vmov.f32	s0, s16
 8007ad0:	e562      	b.n	8007598 <__ieee754_powf+0x30>
 8007ad2:	2700      	movs	r7, #0
 8007ad4:	e58d      	b.n	80075f2 <__ieee754_powf+0x8a>
 8007ad6:	bf00      	nop
 8007ad8:	007fffff 	.word	0x007fffff
 8007adc:	35bfbe8c 	.word	0x35bfbe8c
 8007ae0:	3f317200 	.word	0x3f317200
 8007ae4:	3f317218 	.word	0x3f317218
 8007ae8:	b5ddea0e 	.word	0xb5ddea0e
 8007aec:	3331bb4c 	.word	0x3331bb4c
 8007af0:	388ab355 	.word	0x388ab355
 8007af4:	bb360b61 	.word	0xbb360b61
 8007af8:	3e2aaaab 	.word	0x3e2aaaab
 8007afc:	43160000 	.word	0x43160000
 8007b00:	00000000 	.word	0x00000000

08007b04 <__ieee754_sqrtf>:
 8007b04:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007b08:	4770      	bx	lr

08007b0a <with_errno>:
 8007b0a:	b570      	push	{r4, r5, r6, lr}
 8007b0c:	4604      	mov	r4, r0
 8007b0e:	460d      	mov	r5, r1
 8007b10:	4616      	mov	r6, r2
 8007b12:	f7fe fe03 	bl	800671c <__errno>
 8007b16:	4629      	mov	r1, r5
 8007b18:	6006      	str	r6, [r0, #0]
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	bd70      	pop	{r4, r5, r6, pc}

08007b1e <xflow>:
 8007b1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b20:	4614      	mov	r4, r2
 8007b22:	461d      	mov	r5, r3
 8007b24:	b108      	cbz	r0, 8007b2a <xflow+0xc>
 8007b26:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007b2a:	e9cd 2300 	strd	r2, r3, [sp]
 8007b2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b32:	4620      	mov	r0, r4
 8007b34:	4629      	mov	r1, r5
 8007b36:	f7f8 fd0b 	bl	8000550 <__aeabi_dmul>
 8007b3a:	2222      	movs	r2, #34	; 0x22
 8007b3c:	b003      	add	sp, #12
 8007b3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b42:	f7ff bfe2 	b.w	8007b0a <with_errno>

08007b46 <__math_uflow>:
 8007b46:	b508      	push	{r3, lr}
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007b4e:	f7ff ffe6 	bl	8007b1e <xflow>
 8007b52:	ec41 0b10 	vmov	d0, r0, r1
 8007b56:	bd08      	pop	{r3, pc}

08007b58 <__math_oflow>:
 8007b58:	b508      	push	{r3, lr}
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007b60:	f7ff ffdd 	bl	8007b1e <xflow>
 8007b64:	ec41 0b10 	vmov	d0, r0, r1
 8007b68:	bd08      	pop	{r3, pc}

08007b6a <with_errnof>:
 8007b6a:	b513      	push	{r0, r1, r4, lr}
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007b72:	f7fe fdd3 	bl	800671c <__errno>
 8007b76:	ed9d 0a01 	vldr	s0, [sp, #4]
 8007b7a:	6004      	str	r4, [r0, #0]
 8007b7c:	b002      	add	sp, #8
 8007b7e:	bd10      	pop	{r4, pc}

08007b80 <xflowf>:
 8007b80:	b130      	cbz	r0, 8007b90 <xflowf+0x10>
 8007b82:	eef1 7a40 	vneg.f32	s15, s0
 8007b86:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007b8a:	2022      	movs	r0, #34	; 0x22
 8007b8c:	f7ff bfed 	b.w	8007b6a <with_errnof>
 8007b90:	eef0 7a40 	vmov.f32	s15, s0
 8007b94:	e7f7      	b.n	8007b86 <xflowf+0x6>
	...

08007b98 <__math_uflowf>:
 8007b98:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007ba0 <__math_uflowf+0x8>
 8007b9c:	f7ff bff0 	b.w	8007b80 <xflowf>
 8007ba0:	10000000 	.word	0x10000000

08007ba4 <__math_oflowf>:
 8007ba4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007bac <__math_oflowf+0x8>
 8007ba8:	f7ff bfea 	b.w	8007b80 <xflowf>
 8007bac:	70000000 	.word	0x70000000

08007bb0 <fabs>:
 8007bb0:	ec51 0b10 	vmov	r0, r1, d0
 8007bb4:	ee10 2a10 	vmov	r2, s0
 8007bb8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007bbc:	ec43 2b10 	vmov	d0, r2, r3
 8007bc0:	4770      	bx	lr

08007bc2 <finite>:
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	ed8d 0b00 	vstr	d0, [sp]
 8007bc8:	9801      	ldr	r0, [sp, #4]
 8007bca:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007bce:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007bd2:	0fc0      	lsrs	r0, r0, #31
 8007bd4:	b002      	add	sp, #8
 8007bd6:	4770      	bx	lr

08007bd8 <scalbn>:
 8007bd8:	b570      	push	{r4, r5, r6, lr}
 8007bda:	ec55 4b10 	vmov	r4, r5, d0
 8007bde:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007be2:	4606      	mov	r6, r0
 8007be4:	462b      	mov	r3, r5
 8007be6:	b99a      	cbnz	r2, 8007c10 <scalbn+0x38>
 8007be8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007bec:	4323      	orrs	r3, r4
 8007bee:	d036      	beq.n	8007c5e <scalbn+0x86>
 8007bf0:	4b39      	ldr	r3, [pc, #228]	; (8007cd8 <scalbn+0x100>)
 8007bf2:	4629      	mov	r1, r5
 8007bf4:	ee10 0a10 	vmov	r0, s0
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f7f8 fca9 	bl	8000550 <__aeabi_dmul>
 8007bfe:	4b37      	ldr	r3, [pc, #220]	; (8007cdc <scalbn+0x104>)
 8007c00:	429e      	cmp	r6, r3
 8007c02:	4604      	mov	r4, r0
 8007c04:	460d      	mov	r5, r1
 8007c06:	da10      	bge.n	8007c2a <scalbn+0x52>
 8007c08:	a32b      	add	r3, pc, #172	; (adr r3, 8007cb8 <scalbn+0xe0>)
 8007c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0e:	e03a      	b.n	8007c86 <scalbn+0xae>
 8007c10:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007c14:	428a      	cmp	r2, r1
 8007c16:	d10c      	bne.n	8007c32 <scalbn+0x5a>
 8007c18:	ee10 2a10 	vmov	r2, s0
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	4629      	mov	r1, r5
 8007c20:	f7f8 fae0 	bl	80001e4 <__adddf3>
 8007c24:	4604      	mov	r4, r0
 8007c26:	460d      	mov	r5, r1
 8007c28:	e019      	b.n	8007c5e <scalbn+0x86>
 8007c2a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007c2e:	460b      	mov	r3, r1
 8007c30:	3a36      	subs	r2, #54	; 0x36
 8007c32:	4432      	add	r2, r6
 8007c34:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007c38:	428a      	cmp	r2, r1
 8007c3a:	dd08      	ble.n	8007c4e <scalbn+0x76>
 8007c3c:	2d00      	cmp	r5, #0
 8007c3e:	a120      	add	r1, pc, #128	; (adr r1, 8007cc0 <scalbn+0xe8>)
 8007c40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c44:	da1c      	bge.n	8007c80 <scalbn+0xa8>
 8007c46:	a120      	add	r1, pc, #128	; (adr r1, 8007cc8 <scalbn+0xf0>)
 8007c48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c4c:	e018      	b.n	8007c80 <scalbn+0xa8>
 8007c4e:	2a00      	cmp	r2, #0
 8007c50:	dd08      	ble.n	8007c64 <scalbn+0x8c>
 8007c52:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007c56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007c5a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007c5e:	ec45 4b10 	vmov	d0, r4, r5
 8007c62:	bd70      	pop	{r4, r5, r6, pc}
 8007c64:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007c68:	da19      	bge.n	8007c9e <scalbn+0xc6>
 8007c6a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007c6e:	429e      	cmp	r6, r3
 8007c70:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007c74:	dd0a      	ble.n	8007c8c <scalbn+0xb4>
 8007c76:	a112      	add	r1, pc, #72	; (adr r1, 8007cc0 <scalbn+0xe8>)
 8007c78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1e2      	bne.n	8007c46 <scalbn+0x6e>
 8007c80:	a30f      	add	r3, pc, #60	; (adr r3, 8007cc0 <scalbn+0xe8>)
 8007c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c86:	f7f8 fc63 	bl	8000550 <__aeabi_dmul>
 8007c8a:	e7cb      	b.n	8007c24 <scalbn+0x4c>
 8007c8c:	a10a      	add	r1, pc, #40	; (adr r1, 8007cb8 <scalbn+0xe0>)
 8007c8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d0b8      	beq.n	8007c08 <scalbn+0x30>
 8007c96:	a10e      	add	r1, pc, #56	; (adr r1, 8007cd0 <scalbn+0xf8>)
 8007c98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c9c:	e7b4      	b.n	8007c08 <scalbn+0x30>
 8007c9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007ca2:	3236      	adds	r2, #54	; 0x36
 8007ca4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007ca8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007cac:	4620      	mov	r0, r4
 8007cae:	4b0c      	ldr	r3, [pc, #48]	; (8007ce0 <scalbn+0x108>)
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	e7e8      	b.n	8007c86 <scalbn+0xae>
 8007cb4:	f3af 8000 	nop.w
 8007cb8:	c2f8f359 	.word	0xc2f8f359
 8007cbc:	01a56e1f 	.word	0x01a56e1f
 8007cc0:	8800759c 	.word	0x8800759c
 8007cc4:	7e37e43c 	.word	0x7e37e43c
 8007cc8:	8800759c 	.word	0x8800759c
 8007ccc:	fe37e43c 	.word	0xfe37e43c
 8007cd0:	c2f8f359 	.word	0xc2f8f359
 8007cd4:	81a56e1f 	.word	0x81a56e1f
 8007cd8:	43500000 	.word	0x43500000
 8007cdc:	ffff3cb0 	.word	0xffff3cb0
 8007ce0:	3c900000 	.word	0x3c900000

08007ce4 <fabsf>:
 8007ce4:	ee10 3a10 	vmov	r3, s0
 8007ce8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007cec:	ee00 3a10 	vmov	s0, r3
 8007cf0:	4770      	bx	lr

08007cf2 <finitef>:
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007cf8:	9801      	ldr	r0, [sp, #4]
 8007cfa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007cfe:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007d02:	bfac      	ite	ge
 8007d04:	2000      	movge	r0, #0
 8007d06:	2001      	movlt	r0, #1
 8007d08:	b002      	add	sp, #8
 8007d0a:	4770      	bx	lr

08007d0c <scalbnf>:
 8007d0c:	ee10 3a10 	vmov	r3, s0
 8007d10:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007d14:	d025      	beq.n	8007d62 <scalbnf+0x56>
 8007d16:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007d1a:	d302      	bcc.n	8007d22 <scalbnf+0x16>
 8007d1c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007d20:	4770      	bx	lr
 8007d22:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8007d26:	d122      	bne.n	8007d6e <scalbnf+0x62>
 8007d28:	4b2a      	ldr	r3, [pc, #168]	; (8007dd4 <scalbnf+0xc8>)
 8007d2a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007dd8 <scalbnf+0xcc>
 8007d2e:	4298      	cmp	r0, r3
 8007d30:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007d34:	db16      	blt.n	8007d64 <scalbnf+0x58>
 8007d36:	ee10 3a10 	vmov	r3, s0
 8007d3a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007d3e:	3a19      	subs	r2, #25
 8007d40:	4402      	add	r2, r0
 8007d42:	2afe      	cmp	r2, #254	; 0xfe
 8007d44:	dd15      	ble.n	8007d72 <scalbnf+0x66>
 8007d46:	ee10 3a10 	vmov	r3, s0
 8007d4a:	eddf 7a24 	vldr	s15, [pc, #144]	; 8007ddc <scalbnf+0xd0>
 8007d4e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8007de0 <scalbnf+0xd4>
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	eeb0 7a67 	vmov.f32	s14, s15
 8007d58:	bfb8      	it	lt
 8007d5a:	eef0 7a66 	vmovlt.f32	s15, s13
 8007d5e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8007d62:	4770      	bx	lr
 8007d64:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007de4 <scalbnf+0xd8>
 8007d68:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007d6c:	4770      	bx	lr
 8007d6e:	0dd2      	lsrs	r2, r2, #23
 8007d70:	e7e6      	b.n	8007d40 <scalbnf+0x34>
 8007d72:	2a00      	cmp	r2, #0
 8007d74:	dd06      	ble.n	8007d84 <scalbnf+0x78>
 8007d76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007d7a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007d7e:	ee00 3a10 	vmov	s0, r3
 8007d82:	4770      	bx	lr
 8007d84:	f112 0f16 	cmn.w	r2, #22
 8007d88:	da1a      	bge.n	8007dc0 <scalbnf+0xb4>
 8007d8a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007d8e:	4298      	cmp	r0, r3
 8007d90:	ee10 3a10 	vmov	r3, s0
 8007d94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d98:	dd0a      	ble.n	8007db0 <scalbnf+0xa4>
 8007d9a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8007ddc <scalbnf+0xd0>
 8007d9e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007de0 <scalbnf+0xd4>
 8007da2:	eef0 7a40 	vmov.f32	s15, s0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	bf18      	it	ne
 8007daa:	eeb0 0a47 	vmovne.f32	s0, s14
 8007dae:	e7db      	b.n	8007d68 <scalbnf+0x5c>
 8007db0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8007de4 <scalbnf+0xd8>
 8007db4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8007de8 <scalbnf+0xdc>
 8007db8:	eef0 7a40 	vmov.f32	s15, s0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	e7f3      	b.n	8007da8 <scalbnf+0x9c>
 8007dc0:	3219      	adds	r2, #25
 8007dc2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007dc6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007dca:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007dec <scalbnf+0xe0>
 8007dce:	ee07 3a10 	vmov	s14, r3
 8007dd2:	e7c4      	b.n	8007d5e <scalbnf+0x52>
 8007dd4:	ffff3cb0 	.word	0xffff3cb0
 8007dd8:	4c000000 	.word	0x4c000000
 8007ddc:	7149f2ca 	.word	0x7149f2ca
 8007de0:	f149f2ca 	.word	0xf149f2ca
 8007de4:	0da24260 	.word	0x0da24260
 8007de8:	8da24260 	.word	0x8da24260
 8007dec:	33000000 	.word	0x33000000

08007df0 <_init>:
 8007df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007df2:	bf00      	nop
 8007df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007df6:	bc08      	pop	{r3}
 8007df8:	469e      	mov	lr, r3
 8007dfa:	4770      	bx	lr

08007dfc <_fini>:
 8007dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dfe:	bf00      	nop
 8007e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e02:	bc08      	pop	{r3}
 8007e04:	469e      	mov	lr, r3
 8007e06:	4770      	bx	lr
