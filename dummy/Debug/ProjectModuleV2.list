
ProjectModuleV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f58  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080030f0  080030f0  000130f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800315c  0800315c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800315c  0800315c  0001315c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003164  08003164  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003164  08003164  00013164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003168  08003168  00013168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800316c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  2000000c  08003178  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  08003178  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce4f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aba  00000000  00000000  0002ce8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  0002e948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b30  00000000  00000000  0002f520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c3f  00000000  00000000  00030050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df72  00000000  00000000  00046c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ecc9  00000000  00000000  00054c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e38ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031a4  00000000  00000000  000e391c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080030d8 	.word	0x080030d8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080030d8 	.word	0x080030d8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <InitKalmanStruct>:
extern arm_matrix_instance_f32 mat_P, mat_P_minus, mat_Q;
extern arm_matrix_instance_f32 mat_C, mat_R, mat_S, mat_K;
extern arm_matrix_instance_f32 mat_temp3x3A,mat_temp3x3B, mat_temp3x1,mat_temp1x3, mat_temp1x1;

void InitKalmanStruct(Kalman* KF,float32_t q,float32_t r)
{
 80004dc:	b4b0      	push	{r4, r5, r7}
 80004de:	b0a1      	sub	sp, #132	; 0x84
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	ed87 0a02 	vstr	s0, [r7, #8]
 80004e8:	edc7 0a01 	vstr	s1, [r7, #4]
	KF->R = r;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	655a      	str	r2, [r3, #84]	; 0x54
	KF->var_Q = q;
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	68ba      	ldr	r2, [r7, #8]
 80004f6:	659a      	str	r2, [r3, #88]	; 0x58
	KF->D = 0;
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	f04f 0200 	mov.w	r2, #0
 80004fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	float32_t a[9] = {
 8000502:	4b40      	ldr	r3, [pc, #256]	; (8000604 <InitKalmanStruct+0x128>)
 8000504:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000508:	461d      	mov	r5, r3
 800050a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800050c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800050e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000510:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000512:	682b      	ldr	r3, [r5, #0]
 8000514:	6023      	str	r3, [r4, #0]
			1, 0.001, 0.5 * 0.001 * 0.001,
			0, 1, 0.001,
			0, 0, 1
	};
	float iden[9] = {
 8000516:	4b3c      	ldr	r3, [pc, #240]	; (8000608 <InitKalmanStruct+0x12c>)
 8000518:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800051c:	461d      	mov	r5, r3
 800051e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000522:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000526:	682b      	ldr	r3, [r5, #0]
 8000528:	6023      	str	r3, [r4, #0]
			1, 0, 0,
			0, 1, 0,
			0, 0, 1
	};
	int i;
	for(i=0;i<9;i++)
 800052a:	2300      	movs	r3, #0
 800052c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800052e:	e01a      	b.n	8000566 <InitKalmanStruct+0x8a>
	{
		KF->A[i] = a[i];
 8000530:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	3380      	adds	r3, #128	; 0x80
 8000536:	443b      	add	r3, r7
 8000538:	3b28      	subs	r3, #40	; 0x28
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	68f9      	ldr	r1, [r7, #12]
 800053e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000540:	3318      	adds	r3, #24
 8000542:	009b      	lsls	r3, r3, #2
 8000544:	440b      	add	r3, r1
 8000546:	601a      	str	r2, [r3, #0]
		KF->I[i] = iden[i];
 8000548:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	3380      	adds	r3, #128	; 0x80
 800054e:	443b      	add	r3, r7
 8000550:	3b4c      	subs	r3, #76	; 0x4c
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	68f9      	ldr	r1, [r7, #12]
 8000556:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000558:	332e      	adds	r3, #46	; 0x2e
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	440b      	add	r3, r1
 800055e:	601a      	str	r2, [r3, #0]
	for(i=0;i<9;i++)
 8000560:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000562:	3301      	adds	r3, #1
 8000564:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000566:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000568:	2b08      	cmp	r3, #8
 800056a:	dde1      	ble.n	8000530 <InitKalmanStruct+0x54>
	}
	float32_t b[3] = {
 800056c:	f04f 0300 	mov.w	r3, #0
 8000570:	62bb      	str	r3, [r7, #40]	; 0x28
 8000572:	f04f 0300 	mov.w	r3, #0
 8000576:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000578:	f04f 0300 	mov.w	r3, #0
 800057c:	633b      	str	r3, [r7, #48]	; 0x30
			0, 0, 0
	};
	float32_t c[3] = {
 800057e:	f04f 0300 	mov.w	r3, #0
 8000582:	61fb      	str	r3, [r7, #28]
 8000584:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000588:	623b      	str	r3, [r7, #32]
 800058a:	f04f 0300 	mov.w	r3, #0
 800058e:	627b      	str	r3, [r7, #36]	; 0x24
			0, 1, 0
	};
	float32_t g[3] = {
 8000590:	4a1e      	ldr	r2, [pc, #120]	; (800060c <InitKalmanStruct+0x130>)
 8000592:	f107 0310 	add.w	r3, r7, #16
 8000596:	ca07      	ldmia	r2, {r0, r1, r2}
 8000598:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0.001 * 0.001 * 0.001 / 6,
			0.5 * 0.001 * 0.001,
			0.001
	};
	for(i=0;i<3;i++)
 800059c:	2300      	movs	r3, #0
 800059e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80005a0:	e027      	b.n	80005f2 <InitKalmanStruct+0x116>
	{
		KF->B[i] = b[i];
 80005a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	3380      	adds	r3, #128	; 0x80
 80005a8:	443b      	add	r3, r7
 80005aa:	3b58      	subs	r3, #88	; 0x58
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	68f9      	ldr	r1, [r7, #12]
 80005b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005b2:	3320      	adds	r3, #32
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	440b      	add	r3, r1
 80005b8:	3304      	adds	r3, #4
 80005ba:	601a      	str	r2, [r3, #0]
		KF->C[i] = c[i];
 80005bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	3380      	adds	r3, #128	; 0x80
 80005c2:	443b      	add	r3, r7
 80005c4:	3b64      	subs	r3, #100	; 0x64
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	68f9      	ldr	r1, [r7, #12]
 80005ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005cc:	3324      	adds	r3, #36	; 0x24
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	440b      	add	r3, r1
 80005d2:	601a      	str	r2, [r3, #0]
		KF->G[i] = g[i];
 80005d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	3380      	adds	r3, #128	; 0x80
 80005da:	443b      	add	r3, r7
 80005dc:	3b70      	subs	r3, #112	; 0x70
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	68f9      	ldr	r1, [r7, #12]
 80005e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005e4:	3328      	adds	r3, #40	; 0x28
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	440b      	add	r3, r1
 80005ea:	601a      	str	r2, [r3, #0]
	for(i=0;i<3;i++)
 80005ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005ee:	3301      	adds	r3, #1
 80005f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80005f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005f4:	2b02      	cmp	r3, #2
 80005f6:	ddd4      	ble.n	80005a2 <InitKalmanStruct+0xc6>
	}

}
 80005f8:	bf00      	nop
 80005fa:	bf00      	nop
 80005fc:	3784      	adds	r7, #132	; 0x84
 80005fe:	46bd      	mov	sp, r7
 8000600:	bcb0      	pop	{r4, r5, r7}
 8000602:	4770      	bx	lr
 8000604:	080030f0 	.word	0x080030f0
 8000608:	08003114 	.word	0x08003114
 800060c:	08003138 	.word	0x08003138

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000614:	f000 fcb0 	bl	8000f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000618:	f000 f8ce 	bl	80007b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061c:	f000 fa86 	bl	8000b2c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000620:	f000 fa5a 	bl	8000ad8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000624:	f000 f932 	bl	800088c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000628:	f000 f9b4 	bl	8000994 <MX_TIM2_Init>
  MX_TIM5_Init();
 800062c:	f000 fa06 	bl	8000a3c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  InitKalmanStruct(&KF,0.001,0.1);
 8000630:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8000724 <main+0x114>
 8000634:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8000728 <main+0x118>
 8000638:	483c      	ldr	r0, [pc, #240]	; (800072c <main+0x11c>)
 800063a:	f7ff ff4f 	bl	80004dc <InitKalmanStruct>

  arm_mat_init_f32(&mat_A, 3, 3,KF.A);//3x3
 800063e:	4b3c      	ldr	r3, [pc, #240]	; (8000730 <main+0x120>)
 8000640:	2203      	movs	r2, #3
 8000642:	2103      	movs	r1, #3
 8000644:	483b      	ldr	r0, [pc, #236]	; (8000734 <main+0x124>)
 8000646:	f000 fc7e 	bl	8000f46 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_x_hat, 3, 1, KF.x_hat);
 800064a:	4b38      	ldr	r3, [pc, #224]	; (800072c <main+0x11c>)
 800064c:	2201      	movs	r2, #1
 800064e:	2103      	movs	r1, #3
 8000650:	4839      	ldr	r0, [pc, #228]	; (8000738 <main+0x128>)
 8000652:	f000 fc78 	bl	8000f46 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_x_hat_minus, 3, 1, KF.x_hat_minus);
 8000656:	4b39      	ldr	r3, [pc, #228]	; (800073c <main+0x12c>)
 8000658:	2201      	movs	r2, #1
 800065a:	2103      	movs	r1, #3
 800065c:	4838      	ldr	r0, [pc, #224]	; (8000740 <main+0x130>)
 800065e:	f000 fc72 	bl	8000f46 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_B, 3, 1, KF.B);
 8000662:	4b38      	ldr	r3, [pc, #224]	; (8000744 <main+0x134>)
 8000664:	2201      	movs	r2, #1
 8000666:	2103      	movs	r1, #3
 8000668:	4837      	ldr	r0, [pc, #220]	; (8000748 <main+0x138>)
 800066a:	f000 fc6c 	bl	8000f46 <arm_mat_init_f32>
  //arm_mat_init_f32(&mat_u, 1, 1, NULL);  // Set the input control vector if needed
  arm_mat_init_f32(&mat_P, 3, 3, KF.P);//3x3
 800066e:	4b37      	ldr	r3, [pc, #220]	; (800074c <main+0x13c>)
 8000670:	2203      	movs	r2, #3
 8000672:	2103      	movs	r1, #3
 8000674:	4836      	ldr	r0, [pc, #216]	; (8000750 <main+0x140>)
 8000676:	f000 fc66 	bl	8000f46 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_P_minus, 3, 3, KF.P_minus);//3x3
 800067a:	4b36      	ldr	r3, [pc, #216]	; (8000754 <main+0x144>)
 800067c:	2203      	movs	r2, #3
 800067e:	2103      	movs	r1, #3
 8000680:	4835      	ldr	r0, [pc, #212]	; (8000758 <main+0x148>)
 8000682:	f000 fc60 	bl	8000f46 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_Q, 3, 3,KF.Q);//3x3
 8000686:	4b35      	ldr	r3, [pc, #212]	; (800075c <main+0x14c>)
 8000688:	2203      	movs	r2, #3
 800068a:	2103      	movs	r1, #3
 800068c:	4834      	ldr	r0, [pc, #208]	; (8000760 <main+0x150>)
 800068e:	f000 fc5a 	bl	8000f46 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_C, 1, 3, KF.C);//1x3
 8000692:	4b34      	ldr	r3, [pc, #208]	; (8000764 <main+0x154>)
 8000694:	2203      	movs	r2, #3
 8000696:	2101      	movs	r1, #1
 8000698:	4833      	ldr	r0, [pc, #204]	; (8000768 <main+0x158>)
 800069a:	f000 fc54 	bl	8000f46 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_R, 1, 1, &KF.R);//1x1
 800069e:	4b33      	ldr	r3, [pc, #204]	; (800076c <main+0x15c>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	2101      	movs	r1, #1
 80006a4:	4832      	ldr	r0, [pc, #200]	; (8000770 <main+0x160>)
 80006a6:	f000 fc4e 	bl	8000f46 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_S, 1, 1, KF.S);//1x1
 80006aa:	4b32      	ldr	r3, [pc, #200]	; (8000774 <main+0x164>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	2101      	movs	r1, #1
 80006b0:	4831      	ldr	r0, [pc, #196]	; (8000778 <main+0x168>)
 80006b2:	f000 fc48 	bl	8000f46 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_K, 3, 1, KF.K);//3x1
 80006b6:	4b31      	ldr	r3, [pc, #196]	; (800077c <main+0x16c>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	2103      	movs	r1, #3
 80006bc:	4830      	ldr	r0, [pc, #192]	; (8000780 <main+0x170>)
 80006be:	f000 fc42 	bl	8000f46 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_temp3x3A, 3, 3, KF.A);//3x3
 80006c2:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <main+0x120>)
 80006c4:	2203      	movs	r2, #3
 80006c6:	2103      	movs	r1, #3
 80006c8:	482e      	ldr	r0, [pc, #184]	; (8000784 <main+0x174>)
 80006ca:	f000 fc3c 	bl	8000f46 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_temp3x3B, 3, 3, KF.B);//3x3
 80006ce:	4b1d      	ldr	r3, [pc, #116]	; (8000744 <main+0x134>)
 80006d0:	2203      	movs	r2, #3
 80006d2:	2103      	movs	r1, #3
 80006d4:	482c      	ldr	r0, [pc, #176]	; (8000788 <main+0x178>)
 80006d6:	f000 fc36 	bl	8000f46 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_temp3x1, 3, 1, KF.temp3x1);//3x1
 80006da:	4b2c      	ldr	r3, [pc, #176]	; (800078c <main+0x17c>)
 80006dc:	2201      	movs	r2, #1
 80006de:	2103      	movs	r1, #3
 80006e0:	482b      	ldr	r0, [pc, #172]	; (8000790 <main+0x180>)
 80006e2:	f000 fc30 	bl	8000f46 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_temp1x3, 1, 3, KF.temp3x1);//1x3
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <main+0x17c>)
 80006e8:	2203      	movs	r2, #3
 80006ea:	2101      	movs	r1, #1
 80006ec:	4829      	ldr	r0, [pc, #164]	; (8000794 <main+0x184>)
 80006ee:	f000 fc2a 	bl	8000f46 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_temp1x1, 1, 1, &KF.temp1x1);//1x1
 80006f2:	4b29      	ldr	r3, [pc, #164]	; (8000798 <main+0x188>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	2101      	movs	r1, #1
 80006f8:	4828      	ldr	r0, [pc, #160]	; (800079c <main+0x18c>)
 80006fa:	f000 fc24 	bl	8000f46 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_G, 3, 1, KF.G);//3x1
 80006fe:	4b28      	ldr	r3, [pc, #160]	; (80007a0 <main+0x190>)
 8000700:	2201      	movs	r2, #1
 8000702:	2103      	movs	r1, #3
 8000704:	4827      	ldr	r0, [pc, #156]	; (80007a4 <main+0x194>)
 8000706:	f000 fc1e 	bl	8000f46 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_GT, 1, 3, KF.GT);//1x3
 800070a:	4b27      	ldr	r3, [pc, #156]	; (80007a8 <main+0x198>)
 800070c:	2203      	movs	r2, #3
 800070e:	2101      	movs	r1, #1
 8000710:	4826      	ldr	r0, [pc, #152]	; (80007ac <main+0x19c>)
 8000712:	f000 fc18 	bl	8000f46 <arm_mat_init_f32>
  arm_mat_init_f32(&eye, 3, 3, KF.I);//1x3
 8000716:	4b26      	ldr	r3, [pc, #152]	; (80007b0 <main+0x1a0>)
 8000718:	2203      	movs	r2, #3
 800071a:	2103      	movs	r1, #3
 800071c:	4825      	ldr	r0, [pc, #148]	; (80007b4 <main+0x1a4>)
 800071e:	f000 fc12 	bl	8000f46 <arm_mat_init_f32>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000722:	e7fe      	b.n	8000722 <main+0x112>
 8000724:	3dcccccd 	.word	0x3dcccccd
 8000728:	3a83126f 	.word	0x3a83126f
 800072c:	20000144 	.word	0x20000144
 8000730:	200001a4 	.word	0x200001a4
 8000734:	200002c4 	.word	0x200002c4
 8000738:	200002cc 	.word	0x200002cc
 800073c:	20000220 	.word	0x20000220
 8000740:	200002d4 	.word	0x200002d4
 8000744:	200001c8 	.word	0x200001c8
 8000748:	200002dc 	.word	0x200002dc
 800074c:	20000150 	.word	0x20000150
 8000750:	200002fc 	.word	0x200002fc
 8000754:	2000022c 	.word	0x2000022c
 8000758:	20000304 	.word	0x20000304
 800075c:	20000174 	.word	0x20000174
 8000760:	2000030c 	.word	0x2000030c
 8000764:	200001d4 	.word	0x200001d4
 8000768:	20000314 	.word	0x20000314
 800076c:	20000198 	.word	0x20000198
 8000770:	2000031c 	.word	0x2000031c
 8000774:	20000250 	.word	0x20000250
 8000778:	20000324 	.word	0x20000324
 800077c:	20000254 	.word	0x20000254
 8000780:	2000032c 	.word	0x2000032c
 8000784:	20000334 	.word	0x20000334
 8000788:	2000033c 	.word	0x2000033c
 800078c:	200002a8 	.word	0x200002a8
 8000790:	20000344 	.word	0x20000344
 8000794:	2000034c 	.word	0x2000034c
 8000798:	200002c0 	.word	0x200002c0
 800079c:	20000354 	.word	0x20000354
 80007a0:	200001e4 	.word	0x200001e4
 80007a4:	200002ec 	.word	0x200002ec
 80007a8:	200001f0 	.word	0x200001f0
 80007ac:	200002e4 	.word	0x200002e4
 80007b0:	200001fc 	.word	0x200001fc
 80007b4:	200002f4 	.word	0x200002f4

080007b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b094      	sub	sp, #80	; 0x50
 80007bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007be:	f107 0320 	add.w	r3, r7, #32
 80007c2:	2230      	movs	r2, #48	; 0x30
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f002 fc7e 	bl	80030c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007dc:	2300      	movs	r3, #0
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	4b28      	ldr	r3, [pc, #160]	; (8000884 <SystemClock_Config+0xcc>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	4a27      	ldr	r2, [pc, #156]	; (8000884 <SystemClock_Config+0xcc>)
 80007e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ea:	6413      	str	r3, [r2, #64]	; 0x40
 80007ec:	4b25      	ldr	r3, [pc, #148]	; (8000884 <SystemClock_Config+0xcc>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	4b22      	ldr	r3, [pc, #136]	; (8000888 <SystemClock_Config+0xd0>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a21      	ldr	r2, [pc, #132]	; (8000888 <SystemClock_Config+0xd0>)
 8000802:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000806:	6013      	str	r3, [r2, #0]
 8000808:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <SystemClock_Config+0xd0>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000814:	2302      	movs	r3, #2
 8000816:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000818:	2301      	movs	r3, #1
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081c:	2310      	movs	r3, #16
 800081e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000820:	2302      	movs	r3, #2
 8000822:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000824:	2300      	movs	r3, #0
 8000826:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000828:	2310      	movs	r3, #16
 800082a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800082c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000830:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000832:	2304      	movs	r3, #4
 8000834:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000836:	2304      	movs	r3, #4
 8000838:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	f107 0320 	add.w	r3, r7, #32
 800083e:	4618      	mov	r0, r3
 8000840:	f000 fe90 	bl	8001564 <HAL_RCC_OscConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800084a:	f000 f9dd 	bl	8000c08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	230f      	movs	r3, #15
 8000850:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000852:	2302      	movs	r3, #2
 8000854:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800085a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	2102      	movs	r1, #2
 800086a:	4618      	mov	r0, r3
 800086c:	f001 f8f2 	bl	8001a54 <HAL_RCC_ClockConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000876:	f000 f9c7 	bl	8000c08 <Error_Handler>
  }
}
 800087a:	bf00      	nop
 800087c:	3750      	adds	r7, #80	; 0x50
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800
 8000888:	40007000 	.word	0x40007000

0800088c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b092      	sub	sp, #72	; 0x48
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000892:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800089c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
 80008ac:	615a      	str	r2, [r3, #20]
 80008ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	2220      	movs	r2, #32
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f002 fc06 	bl	80030c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008bc:	4b33      	ldr	r3, [pc, #204]	; (800098c <MX_TIM1_Init+0x100>)
 80008be:	4a34      	ldr	r2, [pc, #208]	; (8000990 <MX_TIM1_Init+0x104>)
 80008c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80008c2:	4b32      	ldr	r3, [pc, #200]	; (800098c <MX_TIM1_Init+0x100>)
 80008c4:	2253      	movs	r2, #83	; 0x53
 80008c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c8:	4b30      	ldr	r3, [pc, #192]	; (800098c <MX_TIM1_Init+0x100>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80008ce:	4b2f      	ldr	r3, [pc, #188]	; (800098c <MX_TIM1_Init+0x100>)
 80008d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d6:	4b2d      	ldr	r3, [pc, #180]	; (800098c <MX_TIM1_Init+0x100>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008dc:	4b2b      	ldr	r3, [pc, #172]	; (800098c <MX_TIM1_Init+0x100>)
 80008de:	2200      	movs	r2, #0
 80008e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e2:	4b2a      	ldr	r3, [pc, #168]	; (800098c <MX_TIM1_Init+0x100>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008e8:	4828      	ldr	r0, [pc, #160]	; (800098c <MX_TIM1_Init+0x100>)
 80008ea:	f001 fb22 	bl	8001f32 <HAL_TIM_PWM_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80008f4:	f000 f988 	bl	8000c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f8:	2300      	movs	r3, #0
 80008fa:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000900:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000904:	4619      	mov	r1, r3
 8000906:	4821      	ldr	r0, [pc, #132]	; (800098c <MX_TIM1_Init+0x100>)
 8000908:	f002 f838 	bl	800297c <HAL_TIMEx_MasterConfigSynchronization>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000912:	f000 f979 	bl	8000c08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000916:	2360      	movs	r3, #96	; 0x60
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 800091a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000920:	2300      	movs	r3, #0
 8000922:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000924:	2300      	movs	r3, #0
 8000926:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800092c:	2300      	movs	r3, #0
 800092e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000930:	2300      	movs	r3, #0
 8000932:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000938:	2200      	movs	r2, #0
 800093a:	4619      	mov	r1, r3
 800093c:	4813      	ldr	r0, [pc, #76]	; (800098c <MX_TIM1_Init+0x100>)
 800093e:	f001 fbed 	bl	800211c <HAL_TIM_PWM_ConfigChannel>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000948:	f000 f95e 	bl	8000c08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800094c:	2300      	movs	r3, #0
 800094e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000960:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000964:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	4619      	mov	r1, r3
 800096e:	4807      	ldr	r0, [pc, #28]	; (800098c <MX_TIM1_Init+0x100>)
 8000970:	f002 f872 	bl	8002a58 <HAL_TIMEx_ConfigBreakDeadTime>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 800097a:	f000 f945 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800097e:	4803      	ldr	r0, [pc, #12]	; (800098c <MX_TIM1_Init+0x100>)
 8000980:	f000 f9fa 	bl	8000d78 <HAL_TIM_MspPostInit>

}
 8000984:	bf00      	nop
 8000986:	3748      	adds	r7, #72	; 0x48
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000028 	.word	0x20000028
 8000990:	40010000 	.word	0x40010000

08000994 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08c      	sub	sp, #48	; 0x30
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	2224      	movs	r2, #36	; 0x24
 80009a0:	2100      	movs	r1, #0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f002 fb90 	bl	80030c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009b0:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <MX_TIM2_Init+0xa4>)
 80009b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009b8:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <MX_TIM2_Init+0xa4>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009be:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <MX_TIM2_Init+0xa4>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009c4:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <MX_TIM2_Init+0xa4>)
 80009c6:	f04f 32ff 	mov.w	r2, #4294967295
 80009ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009cc:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <MX_TIM2_Init+0xa4>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d2:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <MX_TIM2_Init+0xa4>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80009d8:	2303      	movs	r3, #3
 80009da:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009dc:	2300      	movs	r3, #0
 80009de:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009e0:	2301      	movs	r3, #1
 80009e2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009ec:	2300      	movs	r3, #0
 80009ee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009f0:	2301      	movs	r3, #1
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	4619      	mov	r1, r3
 8000a02:	480d      	ldr	r0, [pc, #52]	; (8000a38 <MX_TIM2_Init+0xa4>)
 8000a04:	f001 fae4 	bl	8001fd0 <HAL_TIM_Encoder_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000a0e:	f000 f8fb 	bl	8000c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4806      	ldr	r0, [pc, #24]	; (8000a38 <MX_TIM2_Init+0xa4>)
 8000a20:	f001 ffac 	bl	800297c <HAL_TIMEx_MasterConfigSynchronization>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000a2a:	f000 f8ed 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	3730      	adds	r7, #48	; 0x30
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000070 	.word	0x20000070

08000a3c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a42:	f107 0308 	add.w	r3, r7, #8
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a50:	463b      	mov	r3, r7
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000a58:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <MX_TIM5_Init+0x94>)
 8000a5a:	4a1e      	ldr	r2, [pc, #120]	; (8000ad4 <MX_TIM5_Init+0x98>)
 8000a5c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8000a5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <MX_TIM5_Init+0x94>)
 8000a60:	2253      	movs	r2, #83	; 0x53
 8000a62:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a64:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <MX_TIM5_Init+0x94>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000a6a:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <MX_TIM5_Init+0x94>)
 8000a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a70:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a72:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <MX_TIM5_Init+0x94>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a78:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <MX_TIM5_Init+0x94>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000a7e:	4814      	ldr	r0, [pc, #80]	; (8000ad0 <MX_TIM5_Init+0x94>)
 8000a80:	f001 fa08 	bl	8001e94 <HAL_TIM_Base_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000a8a:	f000 f8bd 	bl	8000c08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000a94:	f107 0308 	add.w	r3, r7, #8
 8000a98:	4619      	mov	r1, r3
 8000a9a:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <MX_TIM5_Init+0x94>)
 8000a9c:	f001 fc00 	bl	80022a0 <HAL_TIM_ConfigClockSource>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000aa6:	f000 f8af 	bl	8000c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4806      	ldr	r0, [pc, #24]	; (8000ad0 <MX_TIM5_Init+0x94>)
 8000ab8:	f001 ff60 	bl	800297c <HAL_TIMEx_MasterConfigSynchronization>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000ac2:	f000 f8a1 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	3718      	adds	r7, #24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200000b8 	.word	0x200000b8
 8000ad4:	40000c00 	.word	0x40000c00

08000ad8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <MX_USART2_UART_Init+0x50>)
 8000ae0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000ae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000afe:	220c      	movs	r2, #12
 8000b00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000b10:	f001 fff4 	bl	8002afc <HAL_UART_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b1a:	f000 f875 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000100 	.word	0x20000100
 8000b28:	40004400 	.word	0x40004400

08000b2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
 8000b40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b2d      	ldr	r3, [pc, #180]	; (8000bfc <MX_GPIO_Init+0xd0>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a2c      	ldr	r2, [pc, #176]	; (8000bfc <MX_GPIO_Init+0xd0>)
 8000b4c:	f043 0304 	orr.w	r3, r3, #4
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b2a      	ldr	r3, [pc, #168]	; (8000bfc <MX_GPIO_Init+0xd0>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0304 	and.w	r3, r3, #4
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b26      	ldr	r3, [pc, #152]	; (8000bfc <MX_GPIO_Init+0xd0>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a25      	ldr	r2, [pc, #148]	; (8000bfc <MX_GPIO_Init+0xd0>)
 8000b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <MX_GPIO_Init+0xd0>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <MX_GPIO_Init+0xd0>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a1e      	ldr	r2, [pc, #120]	; (8000bfc <MX_GPIO_Init+0xd0>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <MX_GPIO_Init+0xd0>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <MX_GPIO_Init+0xd0>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a17      	ldr	r2, [pc, #92]	; (8000bfc <MX_GPIO_Init+0xd0>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <MX_GPIO_Init+0xd0>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2120      	movs	r1, #32
 8000bb6:	4812      	ldr	r0, [pc, #72]	; (8000c00 <MX_GPIO_Init+0xd4>)
 8000bb8:	f000 fcba 	bl	8001530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bc2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	480c      	ldr	r0, [pc, #48]	; (8000c04 <MX_GPIO_Init+0xd8>)
 8000bd4:	f000 fb28 	bl	8001228 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bd8:	2320      	movs	r3, #32
 8000bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	4804      	ldr	r0, [pc, #16]	; (8000c00 <MX_GPIO_Init+0xd4>)
 8000bf0:	f000 fb1a 	bl	8001228 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bf4:	bf00      	nop
 8000bf6:	3728      	adds	r7, #40	; 0x28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020000 	.word	0x40020000
 8000c04:	40020800 	.word	0x40020800

08000c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0c:	b672      	cpsid	i
}
 8000c0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <Error_Handler+0x8>
	...

08000c14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	4a0f      	ldr	r2, [pc, #60]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c28:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	603b      	str	r3, [r7, #0]
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	4a08      	ldr	r2, [pc, #32]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c44:	6413      	str	r3, [r2, #64]	; 0x40
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c52:	2007      	movs	r0, #7
 8000c54:	f000 fab4 	bl	80011c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40023800 	.word	0x40023800

08000c64 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a0b      	ldr	r2, [pc, #44]	; (8000ca0 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d10d      	bne.n	8000c92 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <HAL_TIM_PWM_MspInit+0x40>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	4a09      	ldr	r2, [pc, #36]	; (8000ca4 <HAL_TIM_PWM_MspInit+0x40>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6453      	str	r3, [r2, #68]	; 0x44
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <HAL_TIM_PWM_MspInit+0x40>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c92:	bf00      	nop
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	40010000 	.word	0x40010000
 8000ca4:	40023800 	.word	0x40023800

08000ca8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cc8:	d12b      	bne.n	8000d22 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <HAL_TIM_Encoder_MspInit+0x84>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	4a16      	ldr	r2, [pc, #88]	; (8000d2c <HAL_TIM_Encoder_MspInit+0x84>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <HAL_TIM_Encoder_MspInit+0x84>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <HAL_TIM_Encoder_MspInit+0x84>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a0f      	ldr	r2, [pc, #60]	; (8000d2c <HAL_TIM_Encoder_MspInit+0x84>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <HAL_TIM_Encoder_MspInit+0x84>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d02:	2303      	movs	r3, #3
 8000d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d12:	2301      	movs	r3, #1
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4804      	ldr	r0, [pc, #16]	; (8000d30 <HAL_TIM_Encoder_MspInit+0x88>)
 8000d1e:	f000 fa83 	bl	8001228 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d22:	bf00      	nop
 8000d24:	3728      	adds	r7, #40	; 0x28
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020000 	.word	0x40020000

08000d34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <HAL_TIM_Base_MspInit+0x3c>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d10d      	bne.n	8000d62 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <HAL_TIM_Base_MspInit+0x40>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	4a09      	ldr	r2, [pc, #36]	; (8000d74 <HAL_TIM_Base_MspInit+0x40>)
 8000d50:	f043 0308 	orr.w	r3, r3, #8
 8000d54:	6413      	str	r3, [r2, #64]	; 0x40
 8000d56:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <HAL_TIM_Base_MspInit+0x40>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	f003 0308 	and.w	r3, r3, #8
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000d62:	bf00      	nop
 8000d64:	3714      	adds	r7, #20
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	40000c00 	.word	0x40000c00
 8000d74:	40023800 	.word	0x40023800

08000d78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <HAL_TIM_MspPostInit+0x68>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d11e      	bne.n	8000dd8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <HAL_TIM_MspPostInit+0x6c>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a10      	ldr	r2, [pc, #64]	; (8000de4 <HAL_TIM_MspPostInit+0x6c>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <HAL_TIM_MspPostInit+0x6c>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000db6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4805      	ldr	r0, [pc, #20]	; (8000de8 <HAL_TIM_MspPostInit+0x70>)
 8000dd4:	f000 fa28 	bl	8001228 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000dd8:	bf00      	nop
 8000dda:	3720      	adds	r7, #32
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40010000 	.word	0x40010000
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020000 	.word	0x40020000

08000dec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	; 0x28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a19      	ldr	r2, [pc, #100]	; (8000e70 <HAL_UART_MspInit+0x84>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d12b      	bne.n	8000e66 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <HAL_UART_MspInit+0x88>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	4a17      	ldr	r2, [pc, #92]	; (8000e74 <HAL_UART_MspInit+0x88>)
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <HAL_UART_MspInit+0x88>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <HAL_UART_MspInit+0x88>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a10      	ldr	r2, [pc, #64]	; (8000e74 <HAL_UART_MspInit+0x88>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <HAL_UART_MspInit+0x88>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e46:	230c      	movs	r3, #12
 8000e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e52:	2303      	movs	r3, #3
 8000e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e56:	2307      	movs	r3, #7
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4805      	ldr	r0, [pc, #20]	; (8000e78 <HAL_UART_MspInit+0x8c>)
 8000e62:	f000 f9e1 	bl	8001228 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e66:	bf00      	nop
 8000e68:	3728      	adds	r7, #40	; 0x28
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40004400 	.word	0x40004400
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020000 	.word	0x40020000

08000e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <NMI_Handler+0x4>

08000e82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <HardFault_Handler+0x4>

08000e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <MemManage_Handler+0x4>

08000e8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <BusFault_Handler+0x4>

08000e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <UsageFault_Handler+0x4>

08000e9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec8:	f000 f8a8 	bl	800101c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <SystemInit+0x20>)
 8000ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <SystemInit+0x20>)
 8000edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ef4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ef8:	480d      	ldr	r0, [pc, #52]	; (8000f30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000efa:	490e      	ldr	r1, [pc, #56]	; (8000f34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000efc:	4a0e      	ldr	r2, [pc, #56]	; (8000f38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f00:	e002      	b.n	8000f08 <LoopCopyDataInit>

08000f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f06:	3304      	adds	r3, #4

08000f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f0c:	d3f9      	bcc.n	8000f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0e:	4a0b      	ldr	r2, [pc, #44]	; (8000f3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f10:	4c0b      	ldr	r4, [pc, #44]	; (8000f40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f14:	e001      	b.n	8000f1a <LoopFillZerobss>

08000f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f18:	3204      	adds	r2, #4

08000f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f1c:	d3fb      	bcc.n	8000f16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f1e:	f7ff ffd7 	bl	8000ed0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f22:	f002 f8ad 	bl	8003080 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f26:	f7ff fb73 	bl	8000610 <main>
  bx  lr    
 8000f2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f34:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f38:	0800316c 	.word	0x0800316c
  ldr r2, =_sbss
 8000f3c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f40:	20000360 	.word	0x20000360

08000f44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f44:	e7fe      	b.n	8000f44 <ADC_IRQHandler>

08000f46 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b085      	sub	sp, #20
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	60f8      	str	r0, [r7, #12]
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	817b      	strh	r3, [r7, #10]
 8000f54:	4613      	mov	r3, r2
 8000f56:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	897a      	ldrh	r2, [r7, #10]
 8000f5c:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	893a      	ldrh	r2, [r7, #8]
 8000f62:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	605a      	str	r2, [r3, #4]
}
 8000f6a:	bf00      	nop
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_Init+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0d      	ldr	r2, [pc, #52]	; (8000fb8 <HAL_Init+0x40>)
 8000f82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <HAL_Init+0x40>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <HAL_Init+0x40>)
 8000f8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <HAL_Init+0x40>)
 8000f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	f000 f90d 	bl	80011c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f000 f808 	bl	8000fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fac:	f7ff fe32 	bl	8000c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023c00 	.word	0x40023c00

08000fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_InitTick+0x54>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_InitTick+0x58>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 f917 	bl	800120e <HAL_SYSTICK_Config>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00e      	b.n	8001008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b0f      	cmp	r3, #15
 8000fee:	d80a      	bhi.n	8001006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f000 f8ed 	bl	80011d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ffc:	4a06      	ldr	r2, [pc, #24]	; (8001018 <HAL_InitTick+0x5c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	e000      	b.n	8001008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000000 	.word	0x20000000
 8001014:	20000008 	.word	0x20000008
 8001018:	20000004 	.word	0x20000004

0800101c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_IncTick+0x20>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_IncTick+0x24>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <HAL_IncTick+0x24>)
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000008 	.word	0x20000008
 8001040:	2000035c 	.word	0x2000035c

08001044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return uwTick;
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <HAL_GetTick+0x14>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	2000035c 	.word	0x2000035c

0800105c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001078:	4013      	ands	r3, r2
 800107a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001084:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800108c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108e:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	60d3      	str	r3, [r2, #12]
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <__NVIC_GetPriorityGrouping+0x18>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	0a1b      	lsrs	r3, r3, #8
 80010ae:	f003 0307 	and.w	r3, r3, #7
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	6039      	str	r1, [r7, #0]
 80010ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	db0a      	blt.n	80010ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	490c      	ldr	r1, [pc, #48]	; (800110c <__NVIC_SetPriority+0x4c>)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	0112      	lsls	r2, r2, #4
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	440b      	add	r3, r1
 80010e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e8:	e00a      	b.n	8001100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4908      	ldr	r1, [pc, #32]	; (8001110 <__NVIC_SetPriority+0x50>)
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	f003 030f 	and.w	r3, r3, #15
 80010f6:	3b04      	subs	r3, #4
 80010f8:	0112      	lsls	r2, r2, #4
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	440b      	add	r3, r1
 80010fe:	761a      	strb	r2, [r3, #24]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000e100 	.word	0xe000e100
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001114:	b480      	push	{r7}
 8001116:	b089      	sub	sp, #36	; 0x24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f1c3 0307 	rsb	r3, r3, #7
 800112e:	2b04      	cmp	r3, #4
 8001130:	bf28      	it	cs
 8001132:	2304      	movcs	r3, #4
 8001134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3304      	adds	r3, #4
 800113a:	2b06      	cmp	r3, #6
 800113c:	d902      	bls.n	8001144 <NVIC_EncodePriority+0x30>
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3b03      	subs	r3, #3
 8001142:	e000      	b.n	8001146 <NVIC_EncodePriority+0x32>
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001148:	f04f 32ff 	mov.w	r2, #4294967295
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43da      	mvns	r2, r3
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	401a      	ands	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800115c:	f04f 31ff 	mov.w	r1, #4294967295
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	43d9      	mvns	r1, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	4313      	orrs	r3, r2
         );
}
 800116e:	4618      	mov	r0, r3
 8001170:	3724      	adds	r7, #36	; 0x24
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800118c:	d301      	bcc.n	8001192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800118e:	2301      	movs	r3, #1
 8001190:	e00f      	b.n	80011b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001192:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <SysTick_Config+0x40>)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119a:	210f      	movs	r1, #15
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	f7ff ff8e 	bl	80010c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <SysTick_Config+0x40>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011aa:	4b04      	ldr	r3, [pc, #16]	; (80011bc <SysTick_Config+0x40>)
 80011ac:	2207      	movs	r2, #7
 80011ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	e000e010 	.word	0xe000e010

080011c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff ff47 	bl	800105c <__NVIC_SetPriorityGrouping>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b086      	sub	sp, #24
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
 80011e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e8:	f7ff ff5c 	bl	80010a4 <__NVIC_GetPriorityGrouping>
 80011ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	68b9      	ldr	r1, [r7, #8]
 80011f2:	6978      	ldr	r0, [r7, #20]
 80011f4:	f7ff ff8e 	bl	8001114 <NVIC_EncodePriority>
 80011f8:	4602      	mov	r2, r0
 80011fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fe:	4611      	mov	r1, r2
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff5d 	bl	80010c0 <__NVIC_SetPriority>
}
 8001206:	bf00      	nop
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ffb0 	bl	800117c <SysTick_Config>
 800121c:	4603      	mov	r3, r0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001228:	b480      	push	{r7}
 800122a:	b089      	sub	sp, #36	; 0x24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800123a:	2300      	movs	r3, #0
 800123c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
 8001242:	e159      	b.n	80014f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001244:	2201      	movs	r2, #1
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	429a      	cmp	r2, r3
 800125e:	f040 8148 	bne.w	80014f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	2b01      	cmp	r3, #1
 800126c:	d005      	beq.n	800127a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001276:	2b02      	cmp	r3, #2
 8001278:	d130      	bne.n	80012dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	2203      	movs	r2, #3
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	68da      	ldr	r2, [r3, #12]
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012b0:	2201      	movs	r2, #1
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	f003 0201 	and.w	r2, r3, #1
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	d017      	beq.n	8001318 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	2203      	movs	r2, #3
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d123      	bne.n	800136c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	08da      	lsrs	r2, r3, #3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3208      	adds	r2, #8
 800132c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	220f      	movs	r2, #15
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	691a      	ldr	r2, [r3, #16]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	08da      	lsrs	r2, r3, #3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3208      	adds	r2, #8
 8001366:	69b9      	ldr	r1, [r7, #24]
 8001368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	2203      	movs	r2, #3
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0203 	and.w	r2, r3, #3
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f000 80a2 	beq.w	80014f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b57      	ldr	r3, [pc, #348]	; (8001510 <HAL_GPIO_Init+0x2e8>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	4a56      	ldr	r2, [pc, #344]	; (8001510 <HAL_GPIO_Init+0x2e8>)
 80013b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013bc:	6453      	str	r3, [r2, #68]	; 0x44
 80013be:	4b54      	ldr	r3, [pc, #336]	; (8001510 <HAL_GPIO_Init+0x2e8>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ca:	4a52      	ldr	r2, [pc, #328]	; (8001514 <HAL_GPIO_Init+0x2ec>)
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	089b      	lsrs	r3, r3, #2
 80013d0:	3302      	adds	r3, #2
 80013d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	220f      	movs	r2, #15
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a49      	ldr	r2, [pc, #292]	; (8001518 <HAL_GPIO_Init+0x2f0>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d019      	beq.n	800142a <HAL_GPIO_Init+0x202>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a48      	ldr	r2, [pc, #288]	; (800151c <HAL_GPIO_Init+0x2f4>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d013      	beq.n	8001426 <HAL_GPIO_Init+0x1fe>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a47      	ldr	r2, [pc, #284]	; (8001520 <HAL_GPIO_Init+0x2f8>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d00d      	beq.n	8001422 <HAL_GPIO_Init+0x1fa>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a46      	ldr	r2, [pc, #280]	; (8001524 <HAL_GPIO_Init+0x2fc>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d007      	beq.n	800141e <HAL_GPIO_Init+0x1f6>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a45      	ldr	r2, [pc, #276]	; (8001528 <HAL_GPIO_Init+0x300>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d101      	bne.n	800141a <HAL_GPIO_Init+0x1f2>
 8001416:	2304      	movs	r3, #4
 8001418:	e008      	b.n	800142c <HAL_GPIO_Init+0x204>
 800141a:	2307      	movs	r3, #7
 800141c:	e006      	b.n	800142c <HAL_GPIO_Init+0x204>
 800141e:	2303      	movs	r3, #3
 8001420:	e004      	b.n	800142c <HAL_GPIO_Init+0x204>
 8001422:	2302      	movs	r3, #2
 8001424:	e002      	b.n	800142c <HAL_GPIO_Init+0x204>
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <HAL_GPIO_Init+0x204>
 800142a:	2300      	movs	r3, #0
 800142c:	69fa      	ldr	r2, [r7, #28]
 800142e:	f002 0203 	and.w	r2, r2, #3
 8001432:	0092      	lsls	r2, r2, #2
 8001434:	4093      	lsls	r3, r2
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800143c:	4935      	ldr	r1, [pc, #212]	; (8001514 <HAL_GPIO_Init+0x2ec>)
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	089b      	lsrs	r3, r3, #2
 8001442:	3302      	adds	r3, #2
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800144a:	4b38      	ldr	r3, [pc, #224]	; (800152c <HAL_GPIO_Init+0x304>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800146e:	4a2f      	ldr	r2, [pc, #188]	; (800152c <HAL_GPIO_Init+0x304>)
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001474:	4b2d      	ldr	r3, [pc, #180]	; (800152c <HAL_GPIO_Init+0x304>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001498:	4a24      	ldr	r2, [pc, #144]	; (800152c <HAL_GPIO_Init+0x304>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800149e:	4b23      	ldr	r3, [pc, #140]	; (800152c <HAL_GPIO_Init+0x304>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014c2:	4a1a      	ldr	r2, [pc, #104]	; (800152c <HAL_GPIO_Init+0x304>)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_GPIO_Init+0x304>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014ec:	4a0f      	ldr	r2, [pc, #60]	; (800152c <HAL_GPIO_Init+0x304>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3301      	adds	r3, #1
 80014f6:	61fb      	str	r3, [r7, #28]
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	2b0f      	cmp	r3, #15
 80014fc:	f67f aea2 	bls.w	8001244 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001500:	bf00      	nop
 8001502:	bf00      	nop
 8001504:	3724      	adds	r7, #36	; 0x24
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800
 8001514:	40013800 	.word	0x40013800
 8001518:	40020000 	.word	0x40020000
 800151c:	40020400 	.word	0x40020400
 8001520:	40020800 	.word	0x40020800
 8001524:	40020c00 	.word	0x40020c00
 8001528:	40021000 	.word	0x40021000
 800152c:	40013c00 	.word	0x40013c00

08001530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	807b      	strh	r3, [r7, #2]
 800153c:	4613      	mov	r3, r2
 800153e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001540:	787b      	ldrb	r3, [r7, #1]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001546:	887a      	ldrh	r2, [r7, #2]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800154c:	e003      	b.n	8001556 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800154e:	887b      	ldrh	r3, [r7, #2]
 8001550:	041a      	lsls	r2, r3, #16
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	619a      	str	r2, [r3, #24]
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e267      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d075      	beq.n	800166e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001582:	4b88      	ldr	r3, [pc, #544]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	2b04      	cmp	r3, #4
 800158c:	d00c      	beq.n	80015a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800158e:	4b85      	ldr	r3, [pc, #532]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001596:	2b08      	cmp	r3, #8
 8001598:	d112      	bne.n	80015c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800159a:	4b82      	ldr	r3, [pc, #520]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015a6:	d10b      	bne.n	80015c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a8:	4b7e      	ldr	r3, [pc, #504]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d05b      	beq.n	800166c <HAL_RCC_OscConfig+0x108>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d157      	bne.n	800166c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e242      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c8:	d106      	bne.n	80015d8 <HAL_RCC_OscConfig+0x74>
 80015ca:	4b76      	ldr	r3, [pc, #472]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a75      	ldr	r2, [pc, #468]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 80015d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	e01d      	b.n	8001614 <HAL_RCC_OscConfig+0xb0>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015e0:	d10c      	bne.n	80015fc <HAL_RCC_OscConfig+0x98>
 80015e2:	4b70      	ldr	r3, [pc, #448]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a6f      	ldr	r2, [pc, #444]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 80015e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	4b6d      	ldr	r3, [pc, #436]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a6c      	ldr	r2, [pc, #432]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 80015f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	e00b      	b.n	8001614 <HAL_RCC_OscConfig+0xb0>
 80015fc:	4b69      	ldr	r3, [pc, #420]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a68      	ldr	r2, [pc, #416]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 8001602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b66      	ldr	r3, [pc, #408]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a65      	ldr	r2, [pc, #404]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 800160e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d013      	beq.n	8001644 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff fd12 	bl	8001044 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001624:	f7ff fd0e 	bl	8001044 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b64      	cmp	r3, #100	; 0x64
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e207      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001636:	4b5b      	ldr	r3, [pc, #364]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0f0      	beq.n	8001624 <HAL_RCC_OscConfig+0xc0>
 8001642:	e014      	b.n	800166e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7ff fcfe 	bl	8001044 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800164c:	f7ff fcfa 	bl	8001044 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b64      	cmp	r3, #100	; 0x64
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e1f3      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165e:	4b51      	ldr	r3, [pc, #324]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0xe8>
 800166a:	e000      	b.n	800166e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d063      	beq.n	8001742 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800167a:	4b4a      	ldr	r3, [pc, #296]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 030c 	and.w	r3, r3, #12
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00b      	beq.n	800169e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001686:	4b47      	ldr	r3, [pc, #284]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800168e:	2b08      	cmp	r3, #8
 8001690:	d11c      	bne.n	80016cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001692:	4b44      	ldr	r3, [pc, #272]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d116      	bne.n	80016cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800169e:	4b41      	ldr	r3, [pc, #260]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d005      	beq.n	80016b6 <HAL_RCC_OscConfig+0x152>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d001      	beq.n	80016b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e1c7      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b6:	4b3b      	ldr	r3, [pc, #236]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	4937      	ldr	r1, [pc, #220]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ca:	e03a      	b.n	8001742 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d020      	beq.n	8001716 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016d4:	4b34      	ldr	r3, [pc, #208]	; (80017a8 <HAL_RCC_OscConfig+0x244>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016da:	f7ff fcb3 	bl	8001044 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016e2:	f7ff fcaf 	bl	8001044 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e1a8      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f4:	4b2b      	ldr	r3, [pc, #172]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001700:	4b28      	ldr	r3, [pc, #160]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	4925      	ldr	r1, [pc, #148]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 8001710:	4313      	orrs	r3, r2
 8001712:	600b      	str	r3, [r1, #0]
 8001714:	e015      	b.n	8001742 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001716:	4b24      	ldr	r3, [pc, #144]	; (80017a8 <HAL_RCC_OscConfig+0x244>)
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171c:	f7ff fc92 	bl	8001044 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001724:	f7ff fc8e 	bl	8001044 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e187      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001736:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1f0      	bne.n	8001724 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	2b00      	cmp	r3, #0
 800174c:	d036      	beq.n	80017bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d016      	beq.n	8001784 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <HAL_RCC_OscConfig+0x248>)
 8001758:	2201      	movs	r2, #1
 800175a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175c:	f7ff fc72 	bl	8001044 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001764:	f7ff fc6e 	bl	8001044 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e167      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 8001778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0f0      	beq.n	8001764 <HAL_RCC_OscConfig+0x200>
 8001782:	e01b      	b.n	80017bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_RCC_OscConfig+0x248>)
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178a:	f7ff fc5b 	bl	8001044 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001790:	e00e      	b.n	80017b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001792:	f7ff fc57 	bl	8001044 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d907      	bls.n	80017b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e150      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
 80017a4:	40023800 	.word	0x40023800
 80017a8:	42470000 	.word	0x42470000
 80017ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b0:	4b88      	ldr	r3, [pc, #544]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 80017b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1ea      	bne.n	8001792 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 8097 	beq.w	80018f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ca:	2300      	movs	r3, #0
 80017cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ce:	4b81      	ldr	r3, [pc, #516]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d10f      	bne.n	80017fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	4b7d      	ldr	r3, [pc, #500]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	4a7c      	ldr	r2, [pc, #496]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 80017e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ea:	4b7a      	ldr	r3, [pc, #488]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017f6:	2301      	movs	r3, #1
 80017f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fa:	4b77      	ldr	r3, [pc, #476]	; (80019d8 <HAL_RCC_OscConfig+0x474>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001802:	2b00      	cmp	r3, #0
 8001804:	d118      	bne.n	8001838 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001806:	4b74      	ldr	r3, [pc, #464]	; (80019d8 <HAL_RCC_OscConfig+0x474>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a73      	ldr	r2, [pc, #460]	; (80019d8 <HAL_RCC_OscConfig+0x474>)
 800180c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001812:	f7ff fc17 	bl	8001044 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800181a:	f7ff fc13 	bl	8001044 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e10c      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182c:	4b6a      	ldr	r3, [pc, #424]	; (80019d8 <HAL_RCC_OscConfig+0x474>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0f0      	beq.n	800181a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d106      	bne.n	800184e <HAL_RCC_OscConfig+0x2ea>
 8001840:	4b64      	ldr	r3, [pc, #400]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 8001842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001844:	4a63      	ldr	r2, [pc, #396]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6713      	str	r3, [r2, #112]	; 0x70
 800184c:	e01c      	b.n	8001888 <HAL_RCC_OscConfig+0x324>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2b05      	cmp	r3, #5
 8001854:	d10c      	bne.n	8001870 <HAL_RCC_OscConfig+0x30c>
 8001856:	4b5f      	ldr	r3, [pc, #380]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 8001858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185a:	4a5e      	ldr	r2, [pc, #376]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 800185c:	f043 0304 	orr.w	r3, r3, #4
 8001860:	6713      	str	r3, [r2, #112]	; 0x70
 8001862:	4b5c      	ldr	r3, [pc, #368]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 8001864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001866:	4a5b      	ldr	r2, [pc, #364]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6713      	str	r3, [r2, #112]	; 0x70
 800186e:	e00b      	b.n	8001888 <HAL_RCC_OscConfig+0x324>
 8001870:	4b58      	ldr	r3, [pc, #352]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 8001872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001874:	4a57      	ldr	r2, [pc, #348]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 8001876:	f023 0301 	bic.w	r3, r3, #1
 800187a:	6713      	str	r3, [r2, #112]	; 0x70
 800187c:	4b55      	ldr	r3, [pc, #340]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 800187e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001880:	4a54      	ldr	r2, [pc, #336]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 8001882:	f023 0304 	bic.w	r3, r3, #4
 8001886:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d015      	beq.n	80018bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001890:	f7ff fbd8 	bl	8001044 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001896:	e00a      	b.n	80018ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001898:	f7ff fbd4 	bl	8001044 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e0cb      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ae:	4b49      	ldr	r3, [pc, #292]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 80018b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d0ee      	beq.n	8001898 <HAL_RCC_OscConfig+0x334>
 80018ba:	e014      	b.n	80018e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018bc:	f7ff fbc2 	bl	8001044 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c2:	e00a      	b.n	80018da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c4:	f7ff fbbe 	bl	8001044 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e0b5      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018da:	4b3e      	ldr	r3, [pc, #248]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 80018dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1ee      	bne.n	80018c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018e6:	7dfb      	ldrb	r3, [r7, #23]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d105      	bne.n	80018f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ec:	4b39      	ldr	r3, [pc, #228]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	4a38      	ldr	r2, [pc, #224]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 80018f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 80a1 	beq.w	8001a44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001902:	4b34      	ldr	r3, [pc, #208]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 030c 	and.w	r3, r3, #12
 800190a:	2b08      	cmp	r3, #8
 800190c:	d05c      	beq.n	80019c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	2b02      	cmp	r3, #2
 8001914:	d141      	bne.n	800199a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001916:	4b31      	ldr	r3, [pc, #196]	; (80019dc <HAL_RCC_OscConfig+0x478>)
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7ff fb92 	bl	8001044 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001924:	f7ff fb8e 	bl	8001044 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e087      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001936:	4b27      	ldr	r3, [pc, #156]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f0      	bne.n	8001924 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69da      	ldr	r2, [r3, #28]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001950:	019b      	lsls	r3, r3, #6
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001958:	085b      	lsrs	r3, r3, #1
 800195a:	3b01      	subs	r3, #1
 800195c:	041b      	lsls	r3, r3, #16
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001964:	061b      	lsls	r3, r3, #24
 8001966:	491b      	ldr	r1, [pc, #108]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 8001968:	4313      	orrs	r3, r2
 800196a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800196c:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <HAL_RCC_OscConfig+0x478>)
 800196e:	2201      	movs	r2, #1
 8001970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001972:	f7ff fb67 	bl	8001044 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800197a:	f7ff fb63 	bl	8001044 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e05c      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800198c:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0f0      	beq.n	800197a <HAL_RCC_OscConfig+0x416>
 8001998:	e054      	b.n	8001a44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <HAL_RCC_OscConfig+0x478>)
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a0:	f7ff fb50 	bl	8001044 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a8:	f7ff fb4c 	bl	8001044 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e045      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f0      	bne.n	80019a8 <HAL_RCC_OscConfig+0x444>
 80019c6:	e03d      	b.n	8001a44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d107      	bne.n	80019e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e038      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40007000 	.word	0x40007000
 80019dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019e0:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <HAL_RCC_OscConfig+0x4ec>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d028      	beq.n	8001a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d121      	bne.n	8001a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d11a      	bne.n	8001a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a10:	4013      	ands	r3, r2
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d111      	bne.n	8001a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a26:	085b      	lsrs	r3, r3, #1
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d107      	bne.n	8001a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d001      	beq.n	8001a44 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e000      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800

08001a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e0cc      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a68:	4b68      	ldr	r3, [pc, #416]	; (8001c0c <HAL_RCC_ClockConfig+0x1b8>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d90c      	bls.n	8001a90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a76:	4b65      	ldr	r3, [pc, #404]	; (8001c0c <HAL_RCC_ClockConfig+0x1b8>)
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7e:	4b63      	ldr	r3, [pc, #396]	; (8001c0c <HAL_RCC_ClockConfig+0x1b8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d001      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e0b8      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d020      	beq.n	8001ade <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aa8:	4b59      	ldr	r3, [pc, #356]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	4a58      	ldr	r2, [pc, #352]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ab2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0308 	and.w	r3, r3, #8
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ac0:	4b53      	ldr	r3, [pc, #332]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	4a52      	ldr	r2, [pc, #328]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001aca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001acc:	4b50      	ldr	r3, [pc, #320]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	494d      	ldr	r1, [pc, #308]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d044      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d107      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af2:	4b47      	ldr	r3, [pc, #284]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d119      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e07f      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d003      	beq.n	8001b12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d107      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b12:	4b3f      	ldr	r3, [pc, #252]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d109      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e06f      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b22:	4b3b      	ldr	r3, [pc, #236]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e067      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b32:	4b37      	ldr	r3, [pc, #220]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f023 0203 	bic.w	r2, r3, #3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	4934      	ldr	r1, [pc, #208]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b44:	f7ff fa7e 	bl	8001044 <HAL_GetTick>
 8001b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4a:	e00a      	b.n	8001b62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b4c:	f7ff fa7a 	bl	8001044 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e04f      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b62:	4b2b      	ldr	r3, [pc, #172]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 020c 	and.w	r2, r3, #12
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d1eb      	bne.n	8001b4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b74:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <HAL_RCC_ClockConfig+0x1b8>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d20c      	bcs.n	8001b9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b82:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <HAL_RCC_ClockConfig+0x1b8>)
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8a:	4b20      	ldr	r3, [pc, #128]	; (8001c0c <HAL_RCC_ClockConfig+0x1b8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d001      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e032      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d008      	beq.n	8001bba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba8:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	4916      	ldr	r1, [pc, #88]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d009      	beq.n	8001bda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bc6:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	490e      	ldr	r1, [pc, #56]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bda:	f000 f821 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8001bde:	4602      	mov	r2, r0
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	490a      	ldr	r1, [pc, #40]	; (8001c14 <HAL_RCC_ClockConfig+0x1c0>)
 8001bec:	5ccb      	ldrb	r3, [r1, r3]
 8001bee:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf2:	4a09      	ldr	r2, [pc, #36]	; (8001c18 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bf6:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <HAL_RCC_ClockConfig+0x1c8>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff f9de 	bl	8000fbc <HAL_InitTick>

  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40023c00 	.word	0x40023c00
 8001c10:	40023800 	.word	0x40023800
 8001c14:	08003144 	.word	0x08003144
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	20000004 	.word	0x20000004

08001c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c24:	b094      	sub	sp, #80	; 0x50
 8001c26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	647b      	str	r3, [r7, #68]	; 0x44
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c30:	2300      	movs	r3, #0
 8001c32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c38:	4b79      	ldr	r3, [pc, #484]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 030c 	and.w	r3, r3, #12
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d00d      	beq.n	8001c60 <HAL_RCC_GetSysClockFreq+0x40>
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	f200 80e1 	bhi.w	8001e0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d002      	beq.n	8001c54 <HAL_RCC_GetSysClockFreq+0x34>
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d003      	beq.n	8001c5a <HAL_RCC_GetSysClockFreq+0x3a>
 8001c52:	e0db      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c54:	4b73      	ldr	r3, [pc, #460]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c56:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c58:	e0db      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c5a:	4b73      	ldr	r3, [pc, #460]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c5e:	e0d8      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c60:	4b6f      	ldr	r3, [pc, #444]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c68:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c6a:	4b6d      	ldr	r3, [pc, #436]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d063      	beq.n	8001d3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c76:	4b6a      	ldr	r3, [pc, #424]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	099b      	lsrs	r3, r3, #6
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c88:	633b      	str	r3, [r7, #48]	; 0x30
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8001c8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c92:	4622      	mov	r2, r4
 8001c94:	462b      	mov	r3, r5
 8001c96:	f04f 0000 	mov.w	r0, #0
 8001c9a:	f04f 0100 	mov.w	r1, #0
 8001c9e:	0159      	lsls	r1, r3, #5
 8001ca0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ca4:	0150      	lsls	r0, r2, #5
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4621      	mov	r1, r4
 8001cac:	1a51      	subs	r1, r2, r1
 8001cae:	6139      	str	r1, [r7, #16]
 8001cb0:	4629      	mov	r1, r5
 8001cb2:	eb63 0301 	sbc.w	r3, r3, r1
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	f04f 0300 	mov.w	r3, #0
 8001cc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cc4:	4659      	mov	r1, fp
 8001cc6:	018b      	lsls	r3, r1, #6
 8001cc8:	4651      	mov	r1, sl
 8001cca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cce:	4651      	mov	r1, sl
 8001cd0:	018a      	lsls	r2, r1, #6
 8001cd2:	4651      	mov	r1, sl
 8001cd4:	ebb2 0801 	subs.w	r8, r2, r1
 8001cd8:	4659      	mov	r1, fp
 8001cda:	eb63 0901 	sbc.w	r9, r3, r1
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	f04f 0300 	mov.w	r3, #0
 8001ce6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cf2:	4690      	mov	r8, r2
 8001cf4:	4699      	mov	r9, r3
 8001cf6:	4623      	mov	r3, r4
 8001cf8:	eb18 0303 	adds.w	r3, r8, r3
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	462b      	mov	r3, r5
 8001d00:	eb49 0303 	adc.w	r3, r9, r3
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d12:	4629      	mov	r1, r5
 8001d14:	024b      	lsls	r3, r1, #9
 8001d16:	4621      	mov	r1, r4
 8001d18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d1c:	4621      	mov	r1, r4
 8001d1e:	024a      	lsls	r2, r1, #9
 8001d20:	4610      	mov	r0, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d26:	2200      	movs	r2, #0
 8001d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d30:	f7fe fa52 	bl	80001d8 <__aeabi_uldivmod>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4613      	mov	r3, r2
 8001d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d3c:	e058      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d3e:	4b38      	ldr	r3, [pc, #224]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	099b      	lsrs	r3, r3, #6
 8001d44:	2200      	movs	r2, #0
 8001d46:	4618      	mov	r0, r3
 8001d48:	4611      	mov	r1, r2
 8001d4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d4e:	623b      	str	r3, [r7, #32]
 8001d50:	2300      	movs	r3, #0
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
 8001d54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d58:	4642      	mov	r2, r8
 8001d5a:	464b      	mov	r3, r9
 8001d5c:	f04f 0000 	mov.w	r0, #0
 8001d60:	f04f 0100 	mov.w	r1, #0
 8001d64:	0159      	lsls	r1, r3, #5
 8001d66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d6a:	0150      	lsls	r0, r2, #5
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4641      	mov	r1, r8
 8001d72:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d76:	4649      	mov	r1, r9
 8001d78:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d7c:	f04f 0200 	mov.w	r2, #0
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d90:	ebb2 040a 	subs.w	r4, r2, sl
 8001d94:	eb63 050b 	sbc.w	r5, r3, fp
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	f04f 0300 	mov.w	r3, #0
 8001da0:	00eb      	lsls	r3, r5, #3
 8001da2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001da6:	00e2      	lsls	r2, r4, #3
 8001da8:	4614      	mov	r4, r2
 8001daa:	461d      	mov	r5, r3
 8001dac:	4643      	mov	r3, r8
 8001dae:	18e3      	adds	r3, r4, r3
 8001db0:	603b      	str	r3, [r7, #0]
 8001db2:	464b      	mov	r3, r9
 8001db4:	eb45 0303 	adc.w	r3, r5, r3
 8001db8:	607b      	str	r3, [r7, #4]
 8001dba:	f04f 0200 	mov.w	r2, #0
 8001dbe:	f04f 0300 	mov.w	r3, #0
 8001dc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dc6:	4629      	mov	r1, r5
 8001dc8:	028b      	lsls	r3, r1, #10
 8001dca:	4621      	mov	r1, r4
 8001dcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dd0:	4621      	mov	r1, r4
 8001dd2:	028a      	lsls	r2, r1, #10
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dda:	2200      	movs	r2, #0
 8001ddc:	61bb      	str	r3, [r7, #24]
 8001dde:	61fa      	str	r2, [r7, #28]
 8001de0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001de4:	f7fe f9f8 	bl	80001d8 <__aeabi_uldivmod>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4613      	mov	r3, r2
 8001dee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001df0:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	0c1b      	lsrs	r3, r3, #16
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e0a:	e002      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3750      	adds	r7, #80	; 0x50
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e1e:	bf00      	nop
 8001e20:	40023800 	.word	0x40023800
 8001e24:	00f42400 	.word	0x00f42400
 8001e28:	007a1200 	.word	0x007a1200

08001e2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e30:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e32:	681b      	ldr	r3, [r3, #0]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	20000000 	.word	0x20000000

08001e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e48:	f7ff fff0 	bl	8001e2c <HAL_RCC_GetHCLKFreq>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	0a9b      	lsrs	r3, r3, #10
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	4903      	ldr	r1, [pc, #12]	; (8001e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e5a:	5ccb      	ldrb	r3, [r1, r3]
 8001e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40023800 	.word	0x40023800
 8001e68:	08003154 	.word	0x08003154

08001e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e70:	f7ff ffdc 	bl	8001e2c <HAL_RCC_GetHCLKFreq>
 8001e74:	4602      	mov	r2, r0
 8001e76:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	0b5b      	lsrs	r3, r3, #13
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	4903      	ldr	r1, [pc, #12]	; (8001e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e82:	5ccb      	ldrb	r3, [r1, r3]
 8001e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	08003154 	.word	0x08003154

08001e94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e041      	b.n	8001f2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d106      	bne.n	8001ec0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7fe ff3a 	bl	8000d34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3304      	adds	r3, #4
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	f000 faac 	bl	8002430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e041      	b.n	8001fc8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d106      	bne.n	8001f5e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7fe fe83 	bl	8000c64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2202      	movs	r2, #2
 8001f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4610      	mov	r0, r2
 8001f72:	f000 fa5d 	bl	8002430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e097      	b.n	8002114 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d106      	bne.n	8001ffe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7fe fe55 	bl	8000ca8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2202      	movs	r2, #2
 8002002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6812      	ldr	r2, [r2, #0]
 8002010:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002014:	f023 0307 	bic.w	r3, r3, #7
 8002018:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3304      	adds	r3, #4
 8002022:	4619      	mov	r1, r3
 8002024:	4610      	mov	r0, r2
 8002026:	f000 fa03 	bl	8002430 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	4313      	orrs	r3, r2
 800204a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002052:	f023 0303 	bic.w	r3, r3, #3
 8002056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	021b      	lsls	r3, r3, #8
 8002062:	4313      	orrs	r3, r2
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002070:	f023 030c 	bic.w	r3, r3, #12
 8002074:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800207c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002080:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	021b      	lsls	r3, r3, #8
 800208c:	4313      	orrs	r3, r2
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	011a      	lsls	r2, r3, #4
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	031b      	lsls	r3, r3, #12
 80020a0:	4313      	orrs	r3, r2
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80020ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80020b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	4313      	orrs	r3, r2
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002128:	2300      	movs	r3, #0
 800212a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002136:	2302      	movs	r3, #2
 8002138:	e0ae      	b.n	8002298 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b0c      	cmp	r3, #12
 8002146:	f200 809f 	bhi.w	8002288 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800214a:	a201      	add	r2, pc, #4	; (adr r2, 8002150 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800214c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002150:	08002185 	.word	0x08002185
 8002154:	08002289 	.word	0x08002289
 8002158:	08002289 	.word	0x08002289
 800215c:	08002289 	.word	0x08002289
 8002160:	080021c5 	.word	0x080021c5
 8002164:	08002289 	.word	0x08002289
 8002168:	08002289 	.word	0x08002289
 800216c:	08002289 	.word	0x08002289
 8002170:	08002207 	.word	0x08002207
 8002174:	08002289 	.word	0x08002289
 8002178:	08002289 	.word	0x08002289
 800217c:	08002289 	.word	0x08002289
 8002180:	08002247 	.word	0x08002247
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	4618      	mov	r0, r3
 800218c:	f000 f9d0 	bl	8002530 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699a      	ldr	r2, [r3, #24]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0208 	orr.w	r2, r2, #8
 800219e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	699a      	ldr	r2, [r3, #24]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0204 	bic.w	r2, r2, #4
 80021ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6999      	ldr	r1, [r3, #24]
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	691a      	ldr	r2, [r3, #16]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	619a      	str	r2, [r3, #24]
      break;
 80021c2:	e064      	b.n	800228e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68b9      	ldr	r1, [r7, #8]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 fa16 	bl	80025fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	699a      	ldr	r2, [r3, #24]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	699a      	ldr	r2, [r3, #24]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6999      	ldr	r1, [r3, #24]
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	021a      	lsls	r2, r3, #8
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	430a      	orrs	r2, r1
 8002202:	619a      	str	r2, [r3, #24]
      break;
 8002204:	e043      	b.n	800228e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68b9      	ldr	r1, [r7, #8]
 800220c:	4618      	mov	r0, r3
 800220e:	f000 fa61 	bl	80026d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	69da      	ldr	r2, [r3, #28]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f042 0208 	orr.w	r2, r2, #8
 8002220:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	69da      	ldr	r2, [r3, #28]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0204 	bic.w	r2, r2, #4
 8002230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	69d9      	ldr	r1, [r3, #28]
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	691a      	ldr	r2, [r3, #16]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	61da      	str	r2, [r3, #28]
      break;
 8002244:	e023      	b.n	800228e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68b9      	ldr	r1, [r7, #8]
 800224c:	4618      	mov	r0, r3
 800224e:	f000 faab 	bl	80027a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	69da      	ldr	r2, [r3, #28]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002260:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	69da      	ldr	r2, [r3, #28]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002270:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	69d9      	ldr	r1, [r3, #28]
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	021a      	lsls	r2, r3, #8
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	61da      	str	r2, [r3, #28]
      break;
 8002286:	e002      	b.n	800228e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	75fb      	strb	r3, [r7, #23]
      break;
 800228c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002296:	7dfb      	ldrb	r3, [r7, #23]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <HAL_TIM_ConfigClockSource+0x1c>
 80022b8:	2302      	movs	r3, #2
 80022ba:	e0b4      	b.n	8002426 <HAL_TIM_ConfigClockSource+0x186>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2202      	movs	r2, #2
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022f4:	d03e      	beq.n	8002374 <HAL_TIM_ConfigClockSource+0xd4>
 80022f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022fa:	f200 8087 	bhi.w	800240c <HAL_TIM_ConfigClockSource+0x16c>
 80022fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002302:	f000 8086 	beq.w	8002412 <HAL_TIM_ConfigClockSource+0x172>
 8002306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800230a:	d87f      	bhi.n	800240c <HAL_TIM_ConfigClockSource+0x16c>
 800230c:	2b70      	cmp	r3, #112	; 0x70
 800230e:	d01a      	beq.n	8002346 <HAL_TIM_ConfigClockSource+0xa6>
 8002310:	2b70      	cmp	r3, #112	; 0x70
 8002312:	d87b      	bhi.n	800240c <HAL_TIM_ConfigClockSource+0x16c>
 8002314:	2b60      	cmp	r3, #96	; 0x60
 8002316:	d050      	beq.n	80023ba <HAL_TIM_ConfigClockSource+0x11a>
 8002318:	2b60      	cmp	r3, #96	; 0x60
 800231a:	d877      	bhi.n	800240c <HAL_TIM_ConfigClockSource+0x16c>
 800231c:	2b50      	cmp	r3, #80	; 0x50
 800231e:	d03c      	beq.n	800239a <HAL_TIM_ConfigClockSource+0xfa>
 8002320:	2b50      	cmp	r3, #80	; 0x50
 8002322:	d873      	bhi.n	800240c <HAL_TIM_ConfigClockSource+0x16c>
 8002324:	2b40      	cmp	r3, #64	; 0x40
 8002326:	d058      	beq.n	80023da <HAL_TIM_ConfigClockSource+0x13a>
 8002328:	2b40      	cmp	r3, #64	; 0x40
 800232a:	d86f      	bhi.n	800240c <HAL_TIM_ConfigClockSource+0x16c>
 800232c:	2b30      	cmp	r3, #48	; 0x30
 800232e:	d064      	beq.n	80023fa <HAL_TIM_ConfigClockSource+0x15a>
 8002330:	2b30      	cmp	r3, #48	; 0x30
 8002332:	d86b      	bhi.n	800240c <HAL_TIM_ConfigClockSource+0x16c>
 8002334:	2b20      	cmp	r3, #32
 8002336:	d060      	beq.n	80023fa <HAL_TIM_ConfigClockSource+0x15a>
 8002338:	2b20      	cmp	r3, #32
 800233a:	d867      	bhi.n	800240c <HAL_TIM_ConfigClockSource+0x16c>
 800233c:	2b00      	cmp	r3, #0
 800233e:	d05c      	beq.n	80023fa <HAL_TIM_ConfigClockSource+0x15a>
 8002340:	2b10      	cmp	r3, #16
 8002342:	d05a      	beq.n	80023fa <HAL_TIM_ConfigClockSource+0x15a>
 8002344:	e062      	b.n	800240c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6818      	ldr	r0, [r3, #0]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	6899      	ldr	r1, [r3, #8]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	f000 faf1 	bl	800293c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002368:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	609a      	str	r2, [r3, #8]
      break;
 8002372:	e04f      	b.n	8002414 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6818      	ldr	r0, [r3, #0]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	6899      	ldr	r1, [r3, #8]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f000 fada 	bl	800293c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002396:	609a      	str	r2, [r3, #8]
      break;
 8002398:	e03c      	b.n	8002414 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6818      	ldr	r0, [r3, #0]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	6859      	ldr	r1, [r3, #4]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	461a      	mov	r2, r3
 80023a8:	f000 fa4e 	bl	8002848 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2150      	movs	r1, #80	; 0x50
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 faa7 	bl	8002906 <TIM_ITRx_SetConfig>
      break;
 80023b8:	e02c      	b.n	8002414 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	6859      	ldr	r1, [r3, #4]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	461a      	mov	r2, r3
 80023c8:	f000 fa6d 	bl	80028a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2160      	movs	r1, #96	; 0x60
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 fa97 	bl	8002906 <TIM_ITRx_SetConfig>
      break;
 80023d8:	e01c      	b.n	8002414 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	6859      	ldr	r1, [r3, #4]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	461a      	mov	r2, r3
 80023e8:	f000 fa2e 	bl	8002848 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2140      	movs	r1, #64	; 0x40
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 fa87 	bl	8002906 <TIM_ITRx_SetConfig>
      break;
 80023f8:	e00c      	b.n	8002414 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4619      	mov	r1, r3
 8002404:	4610      	mov	r0, r2
 8002406:	f000 fa7e 	bl	8002906 <TIM_ITRx_SetConfig>
      break;
 800240a:	e003      	b.n	8002414 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	73fb      	strb	r3, [r7, #15]
      break;
 8002410:	e000      	b.n	8002414 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002412:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002424:	7bfb      	ldrb	r3, [r7, #15]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a34      	ldr	r2, [pc, #208]	; (8002514 <TIM_Base_SetConfig+0xe4>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d00f      	beq.n	8002468 <TIM_Base_SetConfig+0x38>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800244e:	d00b      	beq.n	8002468 <TIM_Base_SetConfig+0x38>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a31      	ldr	r2, [pc, #196]	; (8002518 <TIM_Base_SetConfig+0xe8>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d007      	beq.n	8002468 <TIM_Base_SetConfig+0x38>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a30      	ldr	r2, [pc, #192]	; (800251c <TIM_Base_SetConfig+0xec>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d003      	beq.n	8002468 <TIM_Base_SetConfig+0x38>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a2f      	ldr	r2, [pc, #188]	; (8002520 <TIM_Base_SetConfig+0xf0>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d108      	bne.n	800247a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800246e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	4313      	orrs	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a25      	ldr	r2, [pc, #148]	; (8002514 <TIM_Base_SetConfig+0xe4>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d01b      	beq.n	80024ba <TIM_Base_SetConfig+0x8a>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002488:	d017      	beq.n	80024ba <TIM_Base_SetConfig+0x8a>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a22      	ldr	r2, [pc, #136]	; (8002518 <TIM_Base_SetConfig+0xe8>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d013      	beq.n	80024ba <TIM_Base_SetConfig+0x8a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a21      	ldr	r2, [pc, #132]	; (800251c <TIM_Base_SetConfig+0xec>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d00f      	beq.n	80024ba <TIM_Base_SetConfig+0x8a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a20      	ldr	r2, [pc, #128]	; (8002520 <TIM_Base_SetConfig+0xf0>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d00b      	beq.n	80024ba <TIM_Base_SetConfig+0x8a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a1f      	ldr	r2, [pc, #124]	; (8002524 <TIM_Base_SetConfig+0xf4>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d007      	beq.n	80024ba <TIM_Base_SetConfig+0x8a>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a1e      	ldr	r2, [pc, #120]	; (8002528 <TIM_Base_SetConfig+0xf8>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d003      	beq.n	80024ba <TIM_Base_SetConfig+0x8a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a1d      	ldr	r2, [pc, #116]	; (800252c <TIM_Base_SetConfig+0xfc>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d108      	bne.n	80024cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a08      	ldr	r2, [pc, #32]	; (8002514 <TIM_Base_SetConfig+0xe4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d103      	bne.n	8002500 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	615a      	str	r2, [r3, #20]
}
 8002506:	bf00      	nop
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40010000 	.word	0x40010000
 8002518:	40000400 	.word	0x40000400
 800251c:	40000800 	.word	0x40000800
 8002520:	40000c00 	.word	0x40000c00
 8002524:	40014000 	.word	0x40014000
 8002528:	40014400 	.word	0x40014400
 800252c:	40014800 	.word	0x40014800

08002530 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	f023 0201 	bic.w	r2, r3, #1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800255e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f023 0303 	bic.w	r3, r3, #3
 8002566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	4313      	orrs	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f023 0302 	bic.w	r3, r3, #2
 8002578:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	4313      	orrs	r3, r2
 8002582:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a1c      	ldr	r2, [pc, #112]	; (80025f8 <TIM_OC1_SetConfig+0xc8>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d10c      	bne.n	80025a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	f023 0308 	bic.w	r3, r3, #8
 8002592:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	4313      	orrs	r3, r2
 800259c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f023 0304 	bic.w	r3, r3, #4
 80025a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a13      	ldr	r2, [pc, #76]	; (80025f8 <TIM_OC1_SetConfig+0xc8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d111      	bne.n	80025d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	621a      	str	r2, [r3, #32]
}
 80025ec:	bf00      	nop
 80025ee:	371c      	adds	r7, #28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	40010000 	.word	0x40010000

080025fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	f023 0210 	bic.w	r2, r3, #16
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800262a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002632:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	021b      	lsls	r3, r3, #8
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4313      	orrs	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f023 0320 	bic.w	r3, r3, #32
 8002646:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	4313      	orrs	r3, r2
 8002652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a1e      	ldr	r2, [pc, #120]	; (80026d0 <TIM_OC2_SetConfig+0xd4>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d10d      	bne.n	8002678 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002662:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	4313      	orrs	r3, r2
 800266e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002676:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a15      	ldr	r2, [pc, #84]	; (80026d0 <TIM_OC2_SetConfig+0xd4>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d113      	bne.n	80026a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002686:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800268e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	621a      	str	r2, [r3, #32]
}
 80026c2:	bf00      	nop
 80026c4:	371c      	adds	r7, #28
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40010000 	.word	0x40010000

080026d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b087      	sub	sp, #28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f023 0303 	bic.w	r3, r3, #3
 800270a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	4313      	orrs	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800271c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	021b      	lsls	r3, r3, #8
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	4313      	orrs	r3, r2
 8002728:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a1d      	ldr	r2, [pc, #116]	; (80027a4 <TIM_OC3_SetConfig+0xd0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d10d      	bne.n	800274e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002738:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	021b      	lsls	r3, r3, #8
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	4313      	orrs	r3, r2
 8002744:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800274c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a14      	ldr	r2, [pc, #80]	; (80027a4 <TIM_OC3_SetConfig+0xd0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d113      	bne.n	800277e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800275c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	4313      	orrs	r3, r2
 8002770:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	4313      	orrs	r3, r2
 800277c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	621a      	str	r2, [r3, #32]
}
 8002798:	bf00      	nop
 800279a:	371c      	adds	r7, #28
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	40010000 	.word	0x40010000

080027a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	021b      	lsls	r3, r3, #8
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	031b      	lsls	r3, r3, #12
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a10      	ldr	r2, [pc, #64]	; (8002844 <TIM_OC4_SetConfig+0x9c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d109      	bne.n	800281c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800280e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	019b      	lsls	r3, r3, #6
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	4313      	orrs	r3, r2
 800281a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	621a      	str	r2, [r3, #32]
}
 8002836:	bf00      	nop
 8002838:	371c      	adds	r7, #28
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40010000 	.word	0x40010000

08002848 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002848:	b480      	push	{r7}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	f023 0201 	bic.w	r2, r3, #1
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002872:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	4313      	orrs	r3, r2
 800287c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f023 030a 	bic.w	r3, r3, #10
 8002884:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	4313      	orrs	r3, r2
 800288c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	621a      	str	r2, [r3, #32]
}
 800289a:	bf00      	nop
 800289c:	371c      	adds	r7, #28
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b087      	sub	sp, #28
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	f023 0210 	bic.w	r2, r3, #16
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	031b      	lsls	r3, r3, #12
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	4313      	orrs	r3, r2
 80028da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	011b      	lsls	r3, r3, #4
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	621a      	str	r2, [r3, #32]
}
 80028fa:	bf00      	nop
 80028fc:	371c      	adds	r7, #28
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002906:	b480      	push	{r7}
 8002908:	b085      	sub	sp, #20
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	f043 0307 	orr.w	r3, r3, #7
 8002928:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	609a      	str	r2, [r3, #8]
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800293c:	b480      	push	{r7}
 800293e:	b087      	sub	sp, #28
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
 8002948:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002956:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	021a      	lsls	r2, r3, #8
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	431a      	orrs	r2, r3
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	4313      	orrs	r3, r2
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	4313      	orrs	r3, r2
 8002968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	609a      	str	r2, [r3, #8]
}
 8002970:	bf00      	nop
 8002972:	371c      	adds	r7, #28
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002990:	2302      	movs	r3, #2
 8002992:	e050      	b.n	8002a36 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a1c      	ldr	r2, [pc, #112]	; (8002a44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d018      	beq.n	8002a0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e0:	d013      	beq.n	8002a0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a18      	ldr	r2, [pc, #96]	; (8002a48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d00e      	beq.n	8002a0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a16      	ldr	r2, [pc, #88]	; (8002a4c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d009      	beq.n	8002a0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a15      	ldr	r2, [pc, #84]	; (8002a50 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d004      	beq.n	8002a0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a13      	ldr	r2, [pc, #76]	; (8002a54 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d10c      	bne.n	8002a24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40010000 	.word	0x40010000
 8002a48:	40000400 	.word	0x40000400
 8002a4c:	40000800 	.word	0x40000800
 8002a50:	40000c00 	.word	0x40000c00
 8002a54:	40014000 	.word	0x40014000

08002a58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d101      	bne.n	8002a74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002a70:	2302      	movs	r3, #2
 8002a72:	e03d      	b.n	8002af0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e03f      	b.n	8002b8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d106      	bne.n	8002b28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7fe f962 	bl	8000dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2224      	movs	r2, #36	; 0x24
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f829 	bl	8002b98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	691a      	ldr	r2, [r3, #16]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695a      	ldr	r2, [r3, #20]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
	...

08002b98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b9c:	b0c0      	sub	sp, #256	; 0x100
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb4:	68d9      	ldr	r1, [r3, #12]
 8002bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	ea40 0301 	orr.w	r3, r0, r1
 8002bc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002bf0:	f021 010c 	bic.w	r1, r1, #12
 8002bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002bfe:	430b      	orrs	r3, r1
 8002c00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c12:	6999      	ldr	r1, [r3, #24]
 8002c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	ea40 0301 	orr.w	r3, r0, r1
 8002c1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	4b8f      	ldr	r3, [pc, #572]	; (8002e64 <UART_SetConfig+0x2cc>)
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d005      	beq.n	8002c38 <UART_SetConfig+0xa0>
 8002c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	4b8d      	ldr	r3, [pc, #564]	; (8002e68 <UART_SetConfig+0x2d0>)
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d104      	bne.n	8002c42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c38:	f7ff f918 	bl	8001e6c <HAL_RCC_GetPCLK2Freq>
 8002c3c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002c40:	e003      	b.n	8002c4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c42:	f7ff f8ff 	bl	8001e44 <HAL_RCC_GetPCLK1Freq>
 8002c46:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c54:	f040 810c 	bne.w	8002e70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c62:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c6a:	4622      	mov	r2, r4
 8002c6c:	462b      	mov	r3, r5
 8002c6e:	1891      	adds	r1, r2, r2
 8002c70:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c72:	415b      	adcs	r3, r3
 8002c74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c7a:	4621      	mov	r1, r4
 8002c7c:	eb12 0801 	adds.w	r8, r2, r1
 8002c80:	4629      	mov	r1, r5
 8002c82:	eb43 0901 	adc.w	r9, r3, r1
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	f04f 0300 	mov.w	r3, #0
 8002c8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c9a:	4690      	mov	r8, r2
 8002c9c:	4699      	mov	r9, r3
 8002c9e:	4623      	mov	r3, r4
 8002ca0:	eb18 0303 	adds.w	r3, r8, r3
 8002ca4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ca8:	462b      	mov	r3, r5
 8002caa:	eb49 0303 	adc.w	r3, r9, r3
 8002cae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002cbe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002cc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	18db      	adds	r3, r3, r3
 8002cca:	653b      	str	r3, [r7, #80]	; 0x50
 8002ccc:	4613      	mov	r3, r2
 8002cce:	eb42 0303 	adc.w	r3, r2, r3
 8002cd2:	657b      	str	r3, [r7, #84]	; 0x54
 8002cd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002cd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002cdc:	f7fd fa7c 	bl	80001d8 <__aeabi_uldivmod>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	4b61      	ldr	r3, [pc, #388]	; (8002e6c <UART_SetConfig+0x2d4>)
 8002ce6:	fba3 2302 	umull	r2, r3, r3, r2
 8002cea:	095b      	lsrs	r3, r3, #5
 8002cec:	011c      	lsls	r4, r3, #4
 8002cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002cf8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002cfc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d00:	4642      	mov	r2, r8
 8002d02:	464b      	mov	r3, r9
 8002d04:	1891      	adds	r1, r2, r2
 8002d06:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d08:	415b      	adcs	r3, r3
 8002d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d10:	4641      	mov	r1, r8
 8002d12:	eb12 0a01 	adds.w	sl, r2, r1
 8002d16:	4649      	mov	r1, r9
 8002d18:	eb43 0b01 	adc.w	fp, r3, r1
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	f04f 0300 	mov.w	r3, #0
 8002d24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d30:	4692      	mov	sl, r2
 8002d32:	469b      	mov	fp, r3
 8002d34:	4643      	mov	r3, r8
 8002d36:	eb1a 0303 	adds.w	r3, sl, r3
 8002d3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d3e:	464b      	mov	r3, r9
 8002d40:	eb4b 0303 	adc.w	r3, fp, r3
 8002d44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d54:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	18db      	adds	r3, r3, r3
 8002d60:	643b      	str	r3, [r7, #64]	; 0x40
 8002d62:	4613      	mov	r3, r2
 8002d64:	eb42 0303 	adc.w	r3, r2, r3
 8002d68:	647b      	str	r3, [r7, #68]	; 0x44
 8002d6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d72:	f7fd fa31 	bl	80001d8 <__aeabi_uldivmod>
 8002d76:	4602      	mov	r2, r0
 8002d78:	460b      	mov	r3, r1
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	4b3b      	ldr	r3, [pc, #236]	; (8002e6c <UART_SetConfig+0x2d4>)
 8002d7e:	fba3 2301 	umull	r2, r3, r3, r1
 8002d82:	095b      	lsrs	r3, r3, #5
 8002d84:	2264      	movs	r2, #100	; 0x64
 8002d86:	fb02 f303 	mul.w	r3, r2, r3
 8002d8a:	1acb      	subs	r3, r1, r3
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d92:	4b36      	ldr	r3, [pc, #216]	; (8002e6c <UART_SetConfig+0x2d4>)
 8002d94:	fba3 2302 	umull	r2, r3, r3, r2
 8002d98:	095b      	lsrs	r3, r3, #5
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002da0:	441c      	add	r4, r3
 8002da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002da6:	2200      	movs	r2, #0
 8002da8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002dac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002db0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002db4:	4642      	mov	r2, r8
 8002db6:	464b      	mov	r3, r9
 8002db8:	1891      	adds	r1, r2, r2
 8002dba:	63b9      	str	r1, [r7, #56]	; 0x38
 8002dbc:	415b      	adcs	r3, r3
 8002dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002dc4:	4641      	mov	r1, r8
 8002dc6:	1851      	adds	r1, r2, r1
 8002dc8:	6339      	str	r1, [r7, #48]	; 0x30
 8002dca:	4649      	mov	r1, r9
 8002dcc:	414b      	adcs	r3, r1
 8002dce:	637b      	str	r3, [r7, #52]	; 0x34
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002ddc:	4659      	mov	r1, fp
 8002dde:	00cb      	lsls	r3, r1, #3
 8002de0:	4651      	mov	r1, sl
 8002de2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002de6:	4651      	mov	r1, sl
 8002de8:	00ca      	lsls	r2, r1, #3
 8002dea:	4610      	mov	r0, r2
 8002dec:	4619      	mov	r1, r3
 8002dee:	4603      	mov	r3, r0
 8002df0:	4642      	mov	r2, r8
 8002df2:	189b      	adds	r3, r3, r2
 8002df4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002df8:	464b      	mov	r3, r9
 8002dfa:	460a      	mov	r2, r1
 8002dfc:	eb42 0303 	adc.w	r3, r2, r3
 8002e00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002e14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e18:	460b      	mov	r3, r1
 8002e1a:	18db      	adds	r3, r3, r3
 8002e1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e1e:	4613      	mov	r3, r2
 8002e20:	eb42 0303 	adc.w	r3, r2, r3
 8002e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002e2e:	f7fd f9d3 	bl	80001d8 <__aeabi_uldivmod>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4b0d      	ldr	r3, [pc, #52]	; (8002e6c <UART_SetConfig+0x2d4>)
 8002e38:	fba3 1302 	umull	r1, r3, r3, r2
 8002e3c:	095b      	lsrs	r3, r3, #5
 8002e3e:	2164      	movs	r1, #100	; 0x64
 8002e40:	fb01 f303 	mul.w	r3, r1, r3
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	3332      	adds	r3, #50	; 0x32
 8002e4a:	4a08      	ldr	r2, [pc, #32]	; (8002e6c <UART_SetConfig+0x2d4>)
 8002e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e50:	095b      	lsrs	r3, r3, #5
 8002e52:	f003 0207 	and.w	r2, r3, #7
 8002e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4422      	add	r2, r4
 8002e5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e60:	e105      	b.n	800306e <UART_SetConfig+0x4d6>
 8002e62:	bf00      	nop
 8002e64:	40011000 	.word	0x40011000
 8002e68:	40011400 	.word	0x40011400
 8002e6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e74:	2200      	movs	r2, #0
 8002e76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e82:	4642      	mov	r2, r8
 8002e84:	464b      	mov	r3, r9
 8002e86:	1891      	adds	r1, r2, r2
 8002e88:	6239      	str	r1, [r7, #32]
 8002e8a:	415b      	adcs	r3, r3
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e92:	4641      	mov	r1, r8
 8002e94:	1854      	adds	r4, r2, r1
 8002e96:	4649      	mov	r1, r9
 8002e98:	eb43 0501 	adc.w	r5, r3, r1
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	f04f 0300 	mov.w	r3, #0
 8002ea4:	00eb      	lsls	r3, r5, #3
 8002ea6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eaa:	00e2      	lsls	r2, r4, #3
 8002eac:	4614      	mov	r4, r2
 8002eae:	461d      	mov	r5, r3
 8002eb0:	4643      	mov	r3, r8
 8002eb2:	18e3      	adds	r3, r4, r3
 8002eb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002eb8:	464b      	mov	r3, r9
 8002eba:	eb45 0303 	adc.w	r3, r5, r3
 8002ebe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ece:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ed2:	f04f 0200 	mov.w	r2, #0
 8002ed6:	f04f 0300 	mov.w	r3, #0
 8002eda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ede:	4629      	mov	r1, r5
 8002ee0:	008b      	lsls	r3, r1, #2
 8002ee2:	4621      	mov	r1, r4
 8002ee4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ee8:	4621      	mov	r1, r4
 8002eea:	008a      	lsls	r2, r1, #2
 8002eec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002ef0:	f7fd f972 	bl	80001d8 <__aeabi_uldivmod>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4b60      	ldr	r3, [pc, #384]	; (800307c <UART_SetConfig+0x4e4>)
 8002efa:	fba3 2302 	umull	r2, r3, r3, r2
 8002efe:	095b      	lsrs	r3, r3, #5
 8002f00:	011c      	lsls	r4, r3, #4
 8002f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f06:	2200      	movs	r2, #0
 8002f08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002f14:	4642      	mov	r2, r8
 8002f16:	464b      	mov	r3, r9
 8002f18:	1891      	adds	r1, r2, r2
 8002f1a:	61b9      	str	r1, [r7, #24]
 8002f1c:	415b      	adcs	r3, r3
 8002f1e:	61fb      	str	r3, [r7, #28]
 8002f20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f24:	4641      	mov	r1, r8
 8002f26:	1851      	adds	r1, r2, r1
 8002f28:	6139      	str	r1, [r7, #16]
 8002f2a:	4649      	mov	r1, r9
 8002f2c:	414b      	adcs	r3, r1
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	f04f 0300 	mov.w	r3, #0
 8002f38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f3c:	4659      	mov	r1, fp
 8002f3e:	00cb      	lsls	r3, r1, #3
 8002f40:	4651      	mov	r1, sl
 8002f42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f46:	4651      	mov	r1, sl
 8002f48:	00ca      	lsls	r2, r1, #3
 8002f4a:	4610      	mov	r0, r2
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4603      	mov	r3, r0
 8002f50:	4642      	mov	r2, r8
 8002f52:	189b      	adds	r3, r3, r2
 8002f54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f58:	464b      	mov	r3, r9
 8002f5a:	460a      	mov	r2, r1
 8002f5c:	eb42 0303 	adc.w	r3, r2, r3
 8002f60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f7c:	4649      	mov	r1, r9
 8002f7e:	008b      	lsls	r3, r1, #2
 8002f80:	4641      	mov	r1, r8
 8002f82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f86:	4641      	mov	r1, r8
 8002f88:	008a      	lsls	r2, r1, #2
 8002f8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f8e:	f7fd f923 	bl	80001d8 <__aeabi_uldivmod>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	4b39      	ldr	r3, [pc, #228]	; (800307c <UART_SetConfig+0x4e4>)
 8002f98:	fba3 1302 	umull	r1, r3, r3, r2
 8002f9c:	095b      	lsrs	r3, r3, #5
 8002f9e:	2164      	movs	r1, #100	; 0x64
 8002fa0:	fb01 f303 	mul.w	r3, r1, r3
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	3332      	adds	r3, #50	; 0x32
 8002faa:	4a34      	ldr	r2, [pc, #208]	; (800307c <UART_SetConfig+0x4e4>)
 8002fac:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb0:	095b      	lsrs	r3, r3, #5
 8002fb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fb6:	441c      	add	r4, r3
 8002fb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	673b      	str	r3, [r7, #112]	; 0x70
 8002fc0:	677a      	str	r2, [r7, #116]	; 0x74
 8002fc2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002fc6:	4642      	mov	r2, r8
 8002fc8:	464b      	mov	r3, r9
 8002fca:	1891      	adds	r1, r2, r2
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	415b      	adcs	r3, r3
 8002fd0:	60fb      	str	r3, [r7, #12]
 8002fd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fd6:	4641      	mov	r1, r8
 8002fd8:	1851      	adds	r1, r2, r1
 8002fda:	6039      	str	r1, [r7, #0]
 8002fdc:	4649      	mov	r1, r9
 8002fde:	414b      	adcs	r3, r1
 8002fe0:	607b      	str	r3, [r7, #4]
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	f04f 0300 	mov.w	r3, #0
 8002fea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002fee:	4659      	mov	r1, fp
 8002ff0:	00cb      	lsls	r3, r1, #3
 8002ff2:	4651      	mov	r1, sl
 8002ff4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ff8:	4651      	mov	r1, sl
 8002ffa:	00ca      	lsls	r2, r1, #3
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	4619      	mov	r1, r3
 8003000:	4603      	mov	r3, r0
 8003002:	4642      	mov	r2, r8
 8003004:	189b      	adds	r3, r3, r2
 8003006:	66bb      	str	r3, [r7, #104]	; 0x68
 8003008:	464b      	mov	r3, r9
 800300a:	460a      	mov	r2, r1
 800300c:	eb42 0303 	adc.w	r3, r2, r3
 8003010:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	663b      	str	r3, [r7, #96]	; 0x60
 800301c:	667a      	str	r2, [r7, #100]	; 0x64
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	f04f 0300 	mov.w	r3, #0
 8003026:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800302a:	4649      	mov	r1, r9
 800302c:	008b      	lsls	r3, r1, #2
 800302e:	4641      	mov	r1, r8
 8003030:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003034:	4641      	mov	r1, r8
 8003036:	008a      	lsls	r2, r1, #2
 8003038:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800303c:	f7fd f8cc 	bl	80001d8 <__aeabi_uldivmod>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4b0d      	ldr	r3, [pc, #52]	; (800307c <UART_SetConfig+0x4e4>)
 8003046:	fba3 1302 	umull	r1, r3, r3, r2
 800304a:	095b      	lsrs	r3, r3, #5
 800304c:	2164      	movs	r1, #100	; 0x64
 800304e:	fb01 f303 	mul.w	r3, r1, r3
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	3332      	adds	r3, #50	; 0x32
 8003058:	4a08      	ldr	r2, [pc, #32]	; (800307c <UART_SetConfig+0x4e4>)
 800305a:	fba2 2303 	umull	r2, r3, r2, r3
 800305e:	095b      	lsrs	r3, r3, #5
 8003060:	f003 020f 	and.w	r2, r3, #15
 8003064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4422      	add	r2, r4
 800306c:	609a      	str	r2, [r3, #8]
}
 800306e:	bf00      	nop
 8003070:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003074:	46bd      	mov	sp, r7
 8003076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800307a:	bf00      	nop
 800307c:	51eb851f 	.word	0x51eb851f

08003080 <__libc_init_array>:
 8003080:	b570      	push	{r4, r5, r6, lr}
 8003082:	4d0d      	ldr	r5, [pc, #52]	; (80030b8 <__libc_init_array+0x38>)
 8003084:	4c0d      	ldr	r4, [pc, #52]	; (80030bc <__libc_init_array+0x3c>)
 8003086:	1b64      	subs	r4, r4, r5
 8003088:	10a4      	asrs	r4, r4, #2
 800308a:	2600      	movs	r6, #0
 800308c:	42a6      	cmp	r6, r4
 800308e:	d109      	bne.n	80030a4 <__libc_init_array+0x24>
 8003090:	4d0b      	ldr	r5, [pc, #44]	; (80030c0 <__libc_init_array+0x40>)
 8003092:	4c0c      	ldr	r4, [pc, #48]	; (80030c4 <__libc_init_array+0x44>)
 8003094:	f000 f820 	bl	80030d8 <_init>
 8003098:	1b64      	subs	r4, r4, r5
 800309a:	10a4      	asrs	r4, r4, #2
 800309c:	2600      	movs	r6, #0
 800309e:	42a6      	cmp	r6, r4
 80030a0:	d105      	bne.n	80030ae <__libc_init_array+0x2e>
 80030a2:	bd70      	pop	{r4, r5, r6, pc}
 80030a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80030a8:	4798      	blx	r3
 80030aa:	3601      	adds	r6, #1
 80030ac:	e7ee      	b.n	800308c <__libc_init_array+0xc>
 80030ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80030b2:	4798      	blx	r3
 80030b4:	3601      	adds	r6, #1
 80030b6:	e7f2      	b.n	800309e <__libc_init_array+0x1e>
 80030b8:	08003164 	.word	0x08003164
 80030bc:	08003164 	.word	0x08003164
 80030c0:	08003164 	.word	0x08003164
 80030c4:	08003168 	.word	0x08003168

080030c8 <memset>:
 80030c8:	4402      	add	r2, r0
 80030ca:	4603      	mov	r3, r0
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d100      	bne.n	80030d2 <memset+0xa>
 80030d0:	4770      	bx	lr
 80030d2:	f803 1b01 	strb.w	r1, [r3], #1
 80030d6:	e7f9      	b.n	80030cc <memset+0x4>

080030d8 <_init>:
 80030d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030da:	bf00      	nop
 80030dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030de:	bc08      	pop	{r3}
 80030e0:	469e      	mov	lr, r3
 80030e2:	4770      	bx	lr

080030e4 <_fini>:
 80030e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030e6:	bf00      	nop
 80030e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ea:	bc08      	pop	{r3}
 80030ec:	469e      	mov	lr, r3
 80030ee:	4770      	bx	lr
