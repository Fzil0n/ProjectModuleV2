
ProjectModuleV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b18  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000900  08007cb0  08007cb0  00017cb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085b0  080085b0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080085b0  080085b0  000185b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085b8  080085b8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085b8  080085b8  000185b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085bc  080085bc  000185bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080085c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e0  20000080  08008640  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000660  08008640  00020660  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015367  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003398  00000000  00000000  00035417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  000387b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  000398a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004fae  00000000  00000000  0003a7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bf14  00000000  00000000  0003f786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093953  00000000  00000000  0005b69a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eefed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a44  00000000  00000000  000ef040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007c98 	.word	0x08007c98

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	08007c98 	.word	0x08007c98

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b974 	b.w	8000ea0 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	468e      	mov	lr, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d14d      	bne.n	8000c7a <__udivmoddi4+0xaa>
 8000bde:	428a      	cmp	r2, r1
 8000be0:	4694      	mov	ip, r2
 8000be2:	d969      	bls.n	8000cb8 <__udivmoddi4+0xe8>
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	b152      	cbz	r2, 8000c00 <__udivmoddi4+0x30>
 8000bea:	fa01 f302 	lsl.w	r3, r1, r2
 8000bee:	f1c2 0120 	rsb	r1, r2, #32
 8000bf2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bf6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bfe:	4094      	lsls	r4, r2
 8000c00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c04:	0c21      	lsrs	r1, r4, #16
 8000c06:	fbbe f6f8 	udiv	r6, lr, r8
 8000c0a:	fa1f f78c 	uxth.w	r7, ip
 8000c0e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c12:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c16:	fb06 f107 	mul.w	r1, r6, r7
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x64>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c26:	f080 811f 	bcs.w	8000e68 <__udivmoddi4+0x298>
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	f240 811c 	bls.w	8000e68 <__udivmoddi4+0x298>
 8000c30:	3e02      	subs	r6, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1a5b      	subs	r3, r3, r1
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c44:	fb00 f707 	mul.w	r7, r0, r7
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x92>
 8000c4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c54:	f080 810a 	bcs.w	8000e6c <__udivmoddi4+0x29c>
 8000c58:	42a7      	cmp	r7, r4
 8000c5a:	f240 8107 	bls.w	8000e6c <__udivmoddi4+0x29c>
 8000c5e:	4464      	add	r4, ip
 8000c60:	3802      	subs	r0, #2
 8000c62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c66:	1be4      	subs	r4, r4, r7
 8000c68:	2600      	movs	r6, #0
 8000c6a:	b11d      	cbz	r5, 8000c74 <__udivmoddi4+0xa4>
 8000c6c:	40d4      	lsrs	r4, r2
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e9c5 4300 	strd	r4, r3, [r5]
 8000c74:	4631      	mov	r1, r6
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d909      	bls.n	8000c92 <__udivmoddi4+0xc2>
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	f000 80ef 	beq.w	8000e62 <__udivmoddi4+0x292>
 8000c84:	2600      	movs	r6, #0
 8000c86:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	fab3 f683 	clz	r6, r3
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d14a      	bne.n	8000d30 <__udivmoddi4+0x160>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xd4>
 8000c9e:	4282      	cmp	r2, r0
 8000ca0:	f200 80f9 	bhi.w	8000e96 <__udivmoddi4+0x2c6>
 8000ca4:	1a84      	subs	r4, r0, r2
 8000ca6:	eb61 0303 	sbc.w	r3, r1, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	469e      	mov	lr, r3
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	d0e0      	beq.n	8000c74 <__udivmoddi4+0xa4>
 8000cb2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cb6:	e7dd      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000cb8:	b902      	cbnz	r2, 8000cbc <__udivmoddi4+0xec>
 8000cba:	deff      	udf	#255	; 0xff
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	2a00      	cmp	r2, #0
 8000cc2:	f040 8092 	bne.w	8000dea <__udivmoddi4+0x21a>
 8000cc6:	eba1 010c 	sub.w	r1, r1, ip
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2601      	movs	r6, #1
 8000cd4:	0c20      	lsrs	r0, r4, #16
 8000cd6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cda:	fb07 1113 	mls	r1, r7, r3, r1
 8000cde:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ce2:	fb0e f003 	mul.w	r0, lr, r3
 8000ce6:	4288      	cmp	r0, r1
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x12c>
 8000cea:	eb1c 0101 	adds.w	r1, ip, r1
 8000cee:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x12a>
 8000cf4:	4288      	cmp	r0, r1
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2c0>
 8000cfa:	4643      	mov	r3, r8
 8000cfc:	1a09      	subs	r1, r1, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d04:	fb07 1110 	mls	r1, r7, r0, r1
 8000d08:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x156>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x154>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d24:	4608      	mov	r0, r1
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d2e:	e79c      	b.n	8000c6a <__udivmoddi4+0x9a>
 8000d30:	f1c6 0720 	rsb	r7, r6, #32
 8000d34:	40b3      	lsls	r3, r6
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d42:	fa01 f306 	lsl.w	r3, r1, r6
 8000d46:	431c      	orrs	r4, r3
 8000d48:	40f9      	lsrs	r1, r7
 8000d4a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d52:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d56:	0c20      	lsrs	r0, r4, #16
 8000d58:	fa1f fe8c 	uxth.w	lr, ip
 8000d5c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d60:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d64:	fb08 f00e 	mul.w	r0, r8, lr
 8000d68:	4288      	cmp	r0, r1
 8000d6a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b8>
 8000d70:	eb1c 0101 	adds.w	r1, ip, r1
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2bc>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2bc>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4461      	add	r1, ip
 8000d88:	1a09      	subs	r1, r1, r0
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d90:	fb09 1110 	mls	r1, r9, r0, r1
 8000d94:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d9c:	458e      	cmp	lr, r1
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1e2>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2b4>
 8000daa:	458e      	cmp	lr, r1
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2b4>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4461      	add	r1, ip
 8000db2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000db6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dba:	eba1 010e 	sub.w	r1, r1, lr
 8000dbe:	42a1      	cmp	r1, r4
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46a6      	mov	lr, r4
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x2a4>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x2a0>
 8000dc8:	b15d      	cbz	r5, 8000de2 <__udivmoddi4+0x212>
 8000dca:	ebb3 0208 	subs.w	r2, r3, r8
 8000dce:	eb61 010e 	sbc.w	r1, r1, lr
 8000dd2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dd6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dda:	40f1      	lsrs	r1, r6
 8000ddc:	431f      	orrs	r7, r3
 8000dde:	e9c5 7100 	strd	r7, r1, [r5]
 8000de2:	2600      	movs	r6, #0
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	f1c2 0320 	rsb	r3, r2, #32
 8000dee:	40d8      	lsrs	r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa21 f303 	lsr.w	r3, r1, r3
 8000df8:	4091      	lsls	r1, r2
 8000dfa:	4301      	orrs	r1, r0
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e08:	fb07 3610 	mls	r6, r7, r0, r3
 8000e0c:	0c0b      	lsrs	r3, r1, #16
 8000e0e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e12:	fb00 f60e 	mul.w	r6, r0, lr
 8000e16:	429e      	cmp	r6, r3
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x260>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b8>
 8000e28:	429e      	cmp	r6, r3
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b8>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1b9b      	subs	r3, r3, r6
 8000e32:	b289      	uxth	r1, r1
 8000e34:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e38:	fb07 3316 	mls	r3, r7, r6, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb06 f30e 	mul.w	r3, r6, lr
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x28a>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2b0>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2b0>
 8000e56:	3e02      	subs	r6, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	1ac9      	subs	r1, r1, r3
 8000e5c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0x104>
 8000e62:	462e      	mov	r6, r5
 8000e64:	4628      	mov	r0, r5
 8000e66:	e705      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000e68:	4606      	mov	r6, r0
 8000e6a:	e6e3      	b.n	8000c34 <__udivmoddi4+0x64>
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	e6f8      	b.n	8000c62 <__udivmoddi4+0x92>
 8000e70:	454b      	cmp	r3, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e80:	4646      	mov	r6, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x28a>
 8000e84:	4620      	mov	r0, r4
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1e2>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x260>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b8>
 8000e90:	3b02      	subs	r3, #2
 8000e92:	4461      	add	r1, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x12c>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e709      	b.n	8000cae <__udivmoddi4+0xde>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x156>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <InitKalmanStruct>:
extern arm_matrix_instance_f32 mat_P, mat_P_minus, mat_Q;
extern arm_matrix_instance_f32 mat_C, mat_R, mat_S, mat_K;
extern arm_matrix_instance_f32 mat_temp3x3A,mat_temp3x3B, mat_temp3x1,mat_temp1x3, mat_temp1x1;

void InitKalmanStruct(Kalman* KF,float32_t q,float32_t r)
{
 8000ea4:	b5b0      	push	{r4, r5, r7, lr}
 8000ea6:	b0a0      	sub	sp, #128	; 0x80
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	ed87 0a02 	vstr	s0, [r7, #8]
 8000eb0:	edc7 0a01 	vstr	s1, [r7, #4]
	KF->R = r;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	655a      	str	r2, [r3, #84]	; 0x54
	KF->var_Q = q;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	68ba      	ldr	r2, [r7, #8]
 8000ebe:	659a      	str	r2, [r3, #88]	; 0x58
	KF->D = 0;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f04f 0200 	mov.w	r2, #0
 8000ec6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	float32_t a[9] = {
 8000eca:	4b8d      	ldr	r3, [pc, #564]	; (8001100 <InitKalmanStruct+0x25c>)
 8000ecc:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000ed0:	461d      	mov	r5, r3
 8000ed2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ed6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eda:	682b      	ldr	r3, [r5, #0]
 8000edc:	6023      	str	r3, [r4, #0]
			1.0, 0.001/2.5, 0.0000005/(2.5*2.5),
			0  , 1.0      , 0.001/2.5,
			0  , 0        , 1.0
	};
	float iden[9] = {
 8000ede:	4b89      	ldr	r3, [pc, #548]	; (8001104 <InitKalmanStruct+0x260>)
 8000ee0:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000ee4:	461d      	mov	r5, r3
 8000ee6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eee:	682b      	ldr	r3, [r5, #0]
 8000ef0:	6023      	str	r3, [r4, #0]
			1.0, 0  , 0,
			0  , 1.0, 0,
			0  , 0  , 1.0
	};
	int i;
	for(i=0;i<9;i++)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000ef6:	e023      	b.n	8000f40 <InitKalmanStruct+0x9c>
	{
		KF->A[i] = a[i];
 8000ef8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	3380      	adds	r3, #128	; 0x80
 8000efe:	443b      	add	r3, r7
 8000f00:	3b28      	subs	r3, #40	; 0x28
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	68f9      	ldr	r1, [r7, #12]
 8000f06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f08:	3318      	adds	r3, #24
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	601a      	str	r2, [r3, #0]
		KF->I[i] = iden[i];
 8000f10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	3380      	adds	r3, #128	; 0x80
 8000f16:	443b      	add	r3, r7
 8000f18:	3b4c      	subs	r3, #76	; 0x4c
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	68f9      	ldr	r1, [r7, #12]
 8000f1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f20:	332e      	adds	r3, #46	; 0x2e
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	440b      	add	r3, r1
 8000f26:	601a      	str	r2, [r3, #0]
		KF->P[i] = 0;
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	3304      	adds	r3, #4
 8000f34:	f04f 0200 	mov.w	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
	for(i=0;i<9;i++)
 8000f3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000f40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f42:	2b08      	cmp	r3, #8
 8000f44:	ddd8      	ble.n	8000ef8 <InitKalmanStruct+0x54>
	}
	float32_t b[3] = {
 8000f46:	f04f 0300 	mov.w	r3, #0
 8000f4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f4c:	f04f 0300 	mov.w	r3, #0
 8000f50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f52:	f04f 0300 	mov.w	r3, #0
 8000f56:	633b      	str	r3, [r7, #48]	; 0x30
			0, 0, 0
	};
	float32_t c[3] = {
 8000f58:	f04f 0300 	mov.w	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
 8000f5e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000f62:	623b      	str	r3, [r7, #32]
 8000f64:	f04f 0300 	mov.w	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
			0, 1, 0
	};
	float32_t g[3] = {
 8000f6a:	4a67      	ldr	r2, [pc, #412]	; (8001108 <InitKalmanStruct+0x264>)
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0.001 * 0.001 * 0.001 / (6*2.5*2.5*2.5),
			0.0000005/(2.5*2.5),
			0.001/2.5
	};

	for(i=0;i<3;i++)
 8000f76:	2300      	movs	r3, #0
 8000f78:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000f7a:	e02e      	b.n	8000fda <InitKalmanStruct+0x136>
	{
		KF->B[i] = b[i];
 8000f7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	3380      	adds	r3, #128	; 0x80
 8000f82:	443b      	add	r3, r7
 8000f84:	3b58      	subs	r3, #88	; 0x58
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	68f9      	ldr	r1, [r7, #12]
 8000f8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f8c:	3320      	adds	r3, #32
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	440b      	add	r3, r1
 8000f92:	3304      	adds	r3, #4
 8000f94:	601a      	str	r2, [r3, #0]
		KF->C[i] = c[i];
 8000f96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	3380      	adds	r3, #128	; 0x80
 8000f9c:	443b      	add	r3, r7
 8000f9e:	3b64      	subs	r3, #100	; 0x64
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	68f9      	ldr	r1, [r7, #12]
 8000fa4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fa6:	3324      	adds	r3, #36	; 0x24
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	440b      	add	r3, r1
 8000fac:	601a      	str	r2, [r3, #0]
		KF->G[i] = g[i];
 8000fae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	3380      	adds	r3, #128	; 0x80
 8000fb4:	443b      	add	r3, r7
 8000fb6:	3b70      	subs	r3, #112	; 0x70
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	68f9      	ldr	r1, [r7, #12]
 8000fbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fbe:	3328      	adds	r3, #40	; 0x28
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	601a      	str	r2, [r3, #0]
		KF->x_hat[i] = 0;
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
	for(i=0;i<3;i++)
 8000fd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000fda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	ddcd      	ble.n	8000f7c <InitKalmanStruct+0xd8>
	}

	  arm_mat_init_f32(&mat_A, 3, 3,KF->A);//3x3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	3360      	adds	r3, #96	; 0x60
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	2103      	movs	r1, #3
 8000fe8:	4848      	ldr	r0, [pc, #288]	; (800110c <InitKalmanStruct+0x268>)
 8000fea:	f002 f97a 	bl	80032e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_x_hat, 3, 1, KF->x_hat);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2103      	movs	r1, #3
 8000ff4:	4846      	ldr	r0, [pc, #280]	; (8001110 <InitKalmanStruct+0x26c>)
 8000ff6:	f002 f974 	bl	80032e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_x_hat_minus, 3, 1, KF->x_hat_minus);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	33dc      	adds	r3, #220	; 0xdc
 8000ffe:	2201      	movs	r2, #1
 8001000:	2103      	movs	r1, #3
 8001002:	4844      	ldr	r0, [pc, #272]	; (8001114 <InitKalmanStruct+0x270>)
 8001004:	f002 f96d 	bl	80032e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_B, 3, 1, KF->B);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	3384      	adds	r3, #132	; 0x84
 800100c:	2201      	movs	r2, #1
 800100e:	2103      	movs	r1, #3
 8001010:	4841      	ldr	r0, [pc, #260]	; (8001118 <InitKalmanStruct+0x274>)
 8001012:	f002 f966 	bl	80032e2 <arm_mat_init_f32>
	  //arm_mat_init_f32(&mat_u, 1, 1, NULL);  // Set the input control vector if needed
	  arm_mat_init_f32(&mat_P, 3, 3, KF->P);//3x3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	330c      	adds	r3, #12
 800101a:	2203      	movs	r2, #3
 800101c:	2103      	movs	r1, #3
 800101e:	483f      	ldr	r0, [pc, #252]	; (800111c <InitKalmanStruct+0x278>)
 8001020:	f002 f95f 	bl	80032e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_P_minus, 3, 3, KF->P_minus);//3x3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	33e8      	adds	r3, #232	; 0xe8
 8001028:	2203      	movs	r2, #3
 800102a:	2103      	movs	r1, #3
 800102c:	483c      	ldr	r0, [pc, #240]	; (8001120 <InitKalmanStruct+0x27c>)
 800102e:	f002 f958 	bl	80032e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_Q, 3, 3,KF->Q);//3x3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	3330      	adds	r3, #48	; 0x30
 8001036:	2203      	movs	r2, #3
 8001038:	2103      	movs	r1, #3
 800103a:	483a      	ldr	r0, [pc, #232]	; (8001124 <InitKalmanStruct+0x280>)
 800103c:	f002 f951 	bl	80032e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_C, 1, 3, KF->C);//1x3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	3390      	adds	r3, #144	; 0x90
 8001044:	2203      	movs	r2, #3
 8001046:	2101      	movs	r1, #1
 8001048:	4837      	ldr	r0, [pc, #220]	; (8001128 <InitKalmanStruct+0x284>)
 800104a:	f002 f94a 	bl	80032e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_R, 1, 1, &KF->R);//1x1
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	3354      	adds	r3, #84	; 0x54
 8001052:	2201      	movs	r2, #1
 8001054:	2101      	movs	r1, #1
 8001056:	4835      	ldr	r0, [pc, #212]	; (800112c <InitKalmanStruct+0x288>)
 8001058:	f002 f943 	bl	80032e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_S, 1, 1, KF->S);//1x1
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001062:	2201      	movs	r2, #1
 8001064:	2101      	movs	r1, #1
 8001066:	4832      	ldr	r0, [pc, #200]	; (8001130 <InitKalmanStruct+0x28c>)
 8001068:	f002 f93b 	bl	80032e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_K, 3, 1, KF->K);//3x1
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001072:	2201      	movs	r2, #1
 8001074:	2103      	movs	r1, #3
 8001076:	482f      	ldr	r0, [pc, #188]	; (8001134 <InitKalmanStruct+0x290>)
 8001078:	f002 f933 	bl	80032e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp3x3A, 3, 3, KF->temp3x3A);//3x3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8001082:	2203      	movs	r2, #3
 8001084:	2103      	movs	r1, #3
 8001086:	482c      	ldr	r0, [pc, #176]	; (8001138 <InitKalmanStruct+0x294>)
 8001088:	f002 f92b 	bl	80032e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp3x3B, 3, 3, KF->temp3x3B);//3x3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001092:	2203      	movs	r2, #3
 8001094:	2103      	movs	r1, #3
 8001096:	4829      	ldr	r0, [pc, #164]	; (800113c <InitKalmanStruct+0x298>)
 8001098:	f002 f923 	bl	80032e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp3x1, 3, 1, KF->temp3x1);//3x1
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80010a2:	2201      	movs	r2, #1
 80010a4:	2103      	movs	r1, #3
 80010a6:	4826      	ldr	r0, [pc, #152]	; (8001140 <InitKalmanStruct+0x29c>)
 80010a8:	f002 f91b 	bl	80032e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp1x3, 1, 3, KF->temp1x3);//1x3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 80010b2:	2203      	movs	r2, #3
 80010b4:	2101      	movs	r1, #1
 80010b6:	4823      	ldr	r0, [pc, #140]	; (8001144 <InitKalmanStruct+0x2a0>)
 80010b8:	f002 f913 	bl	80032e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp1x1, 1, 1, &KF->temp1x1);//1x1
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80010c2:	2201      	movs	r2, #1
 80010c4:	2101      	movs	r1, #1
 80010c6:	4820      	ldr	r0, [pc, #128]	; (8001148 <InitKalmanStruct+0x2a4>)
 80010c8:	f002 f90b 	bl	80032e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_G, 3, 1, KF->G);//3x1
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	33a0      	adds	r3, #160	; 0xa0
 80010d0:	2201      	movs	r2, #1
 80010d2:	2103      	movs	r1, #3
 80010d4:	481d      	ldr	r0, [pc, #116]	; (800114c <InitKalmanStruct+0x2a8>)
 80010d6:	f002 f904 	bl	80032e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_GT, 1, 3, KF->GT);//1x3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	33ac      	adds	r3, #172	; 0xac
 80010de:	2203      	movs	r2, #3
 80010e0:	2101      	movs	r1, #1
 80010e2:	481b      	ldr	r0, [pc, #108]	; (8001150 <InitKalmanStruct+0x2ac>)
 80010e4:	f002 f8fd 	bl	80032e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&eye, 3, 3, KF->I);//1x3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	33b8      	adds	r3, #184	; 0xb8
 80010ec:	2203      	movs	r2, #3
 80010ee:	2103      	movs	r1, #3
 80010f0:	4818      	ldr	r0, [pc, #96]	; (8001154 <InitKalmanStruct+0x2b0>)
 80010f2:	f002 f8f6 	bl	80032e2 <arm_mat_init_f32>

}
 80010f6:	bf00      	nop
 80010f8:	3780      	adds	r7, #128	; 0x80
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bdb0      	pop	{r4, r5, r7, pc}
 80010fe:	bf00      	nop
 8001100:	08007cb0 	.word	0x08007cb0
 8001104:	08007cd4 	.word	0x08007cd4
 8001108:	08007cf8 	.word	0x08007cf8
 800110c:	2000032c 	.word	0x2000032c
 8001110:	20000334 	.word	0x20000334
 8001114:	2000033c 	.word	0x2000033c
 8001118:	20000344 	.word	0x20000344
 800111c:	20000354 	.word	0x20000354
 8001120:	2000035c 	.word	0x2000035c
 8001124:	20000364 	.word	0x20000364
 8001128:	2000037c 	.word	0x2000037c
 800112c:	20000384 	.word	0x20000384
 8001130:	2000038c 	.word	0x2000038c
 8001134:	20000394 	.word	0x20000394
 8001138:	2000039c 	.word	0x2000039c
 800113c:	200003a4 	.word	0x200003a4
 8001140:	200003ac 	.word	0x200003ac
 8001144:	200003b4 	.word	0x200003b4
 8001148:	200003bc 	.word	0x200003bc
 800114c:	20000374 	.word	0x20000374
 8001150:	2000036c 	.word	0x2000036c
 8001154:	2000034c 	.word	0x2000034c

08001158 <kalman_filter>:

void kalman_filter()
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
    //Process model: x_hat_minus = mat_A*x_hat
    arm_mat_mult_f32(&mat_A, &mat_x_hat, &mat_x_hat_minus);			//A*X
 800115c:	4a39      	ldr	r2, [pc, #228]	; (8001244 <kalman_filter+0xec>)
 800115e:	493a      	ldr	r1, [pc, #232]	; (8001248 <kalman_filter+0xf0>)
 8001160:	483a      	ldr	r0, [pc, #232]	; (800124c <kalman_filter+0xf4>)
 8001162:	f002 fc4d 	bl	8003a00 <arm_mat_mult_f32>
    // If an input control vector is used:
    // arm_mat_mult_f32(&mat_B, &mat_u, &mat_temp3x3A);
    // arm_mat_add_f32(&mat_x_hat_minus, &mat_temp3x3A, &mat_x_hat_minus);

    // Predict covariance matrix: P_minus = A * P * A^T + Q
    arm_mat_trans_f32(&mat_A, &mat_temp3x3A);					    //AT
 8001166:	493a      	ldr	r1, [pc, #232]	; (8001250 <kalman_filter+0xf8>)
 8001168:	4838      	ldr	r0, [pc, #224]	; (800124c <kalman_filter+0xf4>)
 800116a:	f002 fd34 	bl	8003bd6 <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_A, &mat_P, &mat_temp3x3B);			    //A*P
 800116e:	4a39      	ldr	r2, [pc, #228]	; (8001254 <kalman_filter+0xfc>)
 8001170:	4939      	ldr	r1, [pc, #228]	; (8001258 <kalman_filter+0x100>)
 8001172:	4836      	ldr	r0, [pc, #216]	; (800124c <kalman_filter+0xf4>)
 8001174:	f002 fc44 	bl	8003a00 <arm_mat_mult_f32>
    arm_mat_mult_f32(&mat_temp3x3B, &mat_temp3x3A, &mat_P_minus);	//A*P*AT
 8001178:	4a38      	ldr	r2, [pc, #224]	; (800125c <kalman_filter+0x104>)
 800117a:	4935      	ldr	r1, [pc, #212]	; (8001250 <kalman_filter+0xf8>)
 800117c:	4835      	ldr	r0, [pc, #212]	; (8001254 <kalman_filter+0xfc>)
 800117e:	f002 fc3f 	bl	8003a00 <arm_mat_mult_f32>
    arm_mat_trans_f32(&mat_G, &mat_GT);								//GT
 8001182:	4937      	ldr	r1, [pc, #220]	; (8001260 <kalman_filter+0x108>)
 8001184:	4837      	ldr	r0, [pc, #220]	; (8001264 <kalman_filter+0x10c>)
 8001186:	f002 fd26 	bl	8003bd6 <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_G, &mat_GT, &mat_Q);						//G*GT
 800118a:	4a37      	ldr	r2, [pc, #220]	; (8001268 <kalman_filter+0x110>)
 800118c:	4934      	ldr	r1, [pc, #208]	; (8001260 <kalman_filter+0x108>)
 800118e:	4835      	ldr	r0, [pc, #212]	; (8001264 <kalman_filter+0x10c>)
 8001190:	f002 fc36 	bl	8003a00 <arm_mat_mult_f32>
    arm_mat_scale_f32(&mat_Q,KF.var_Q, &mat_Q);						//G*GT*var_q
 8001194:	4b35      	ldr	r3, [pc, #212]	; (800126c <kalman_filter+0x114>)
 8001196:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800119a:	4933      	ldr	r1, [pc, #204]	; (8001268 <kalman_filter+0x110>)
 800119c:	eeb0 0a67 	vmov.f32	s0, s15
 80011a0:	4831      	ldr	r0, [pc, #196]	; (8001268 <kalman_filter+0x110>)
 80011a2:	f002 fca7 	bl	8003af4 <arm_mat_scale_f32>
    arm_mat_add_f32(&mat_P_minus, &mat_Q, &mat_P_minus);			//A * P * A^T + Q
 80011a6:	4a2d      	ldr	r2, [pc, #180]	; (800125c <kalman_filter+0x104>)
 80011a8:	492f      	ldr	r1, [pc, #188]	; (8001268 <kalman_filter+0x110>)
 80011aa:	482c      	ldr	r0, [pc, #176]	; (800125c <kalman_filter+0x104>)
 80011ac:	f002 f85e 	bl	800326c <arm_mat_add_f32>

    // Calculate innovation covariance: S = C * P_minus * C^T + R
    arm_mat_mult_f32(&mat_C, &mat_P_minus, &mat_temp1x3);			//C*P
 80011b0:	4a2f      	ldr	r2, [pc, #188]	; (8001270 <kalman_filter+0x118>)
 80011b2:	492a      	ldr	r1, [pc, #168]	; (800125c <kalman_filter+0x104>)
 80011b4:	482f      	ldr	r0, [pc, #188]	; (8001274 <kalman_filter+0x11c>)
 80011b6:	f002 fc23 	bl	8003a00 <arm_mat_mult_f32>
    arm_mat_trans_f32(&mat_C, &mat_temp3x1);						//CT
 80011ba:	492f      	ldr	r1, [pc, #188]	; (8001278 <kalman_filter+0x120>)
 80011bc:	482d      	ldr	r0, [pc, #180]	; (8001274 <kalman_filter+0x11c>)
 80011be:	f002 fd0a 	bl	8003bd6 <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_temp1x3, &mat_temp3x1, &mat_temp1x1);		//C*P*C^T
 80011c2:	4a2e      	ldr	r2, [pc, #184]	; (800127c <kalman_filter+0x124>)
 80011c4:	492c      	ldr	r1, [pc, #176]	; (8001278 <kalman_filter+0x120>)
 80011c6:	482a      	ldr	r0, [pc, #168]	; (8001270 <kalman_filter+0x118>)
 80011c8:	f002 fc1a 	bl	8003a00 <arm_mat_mult_f32>
    arm_mat_add_f32(&mat_temp1x1, &mat_R, &mat_S);					//C*P*C^T + R
 80011cc:	4a2c      	ldr	r2, [pc, #176]	; (8001280 <kalman_filter+0x128>)
 80011ce:	492d      	ldr	r1, [pc, #180]	; (8001284 <kalman_filter+0x12c>)
 80011d0:	482a      	ldr	r0, [pc, #168]	; (800127c <kalman_filter+0x124>)
 80011d2:	f002 f84b 	bl	800326c <arm_mat_add_f32>

    //==> Calculate Kalman gain: K = P_minus * C^T * S^(-1)
    arm_mat_inverse_f32(&mat_S, &mat_temp1x1);						//inv(S)
 80011d6:	4929      	ldr	r1, [pc, #164]	; (800127c <kalman_filter+0x124>)
 80011d8:	4829      	ldr	r0, [pc, #164]	; (8001280 <kalman_filter+0x128>)
 80011da:	f002 f89a 	bl	8003312 <arm_mat_inverse_f32>
    arm_mat_mult_f32(&mat_P_minus, &mat_temp3x1, &mat_temp3x3A);	//P*CT
 80011de:	4a1c      	ldr	r2, [pc, #112]	; (8001250 <kalman_filter+0xf8>)
 80011e0:	4925      	ldr	r1, [pc, #148]	; (8001278 <kalman_filter+0x120>)
 80011e2:	481e      	ldr	r0, [pc, #120]	; (800125c <kalman_filter+0x104>)
 80011e4:	f002 fc0c 	bl	8003a00 <arm_mat_mult_f32>
    arm_mat_mult_f32(&mat_temp3x3A, &mat_temp1x1, &mat_K);			//P*CT*inv(S)
 80011e8:	4a27      	ldr	r2, [pc, #156]	; (8001288 <kalman_filter+0x130>)
 80011ea:	4924      	ldr	r1, [pc, #144]	; (800127c <kalman_filter+0x124>)
 80011ec:	4818      	ldr	r0, [pc, #96]	; (8001250 <kalman_filter+0xf8>)
 80011ee:	f002 fc07 	bl	8003a00 <arm_mat_mult_f32>

    //==> Update state estimate: x_hat = x_hat_minus + K * (z - C * x_hat_minus)
    arm_mat_mult_f32(&mat_C, &mat_x_hat_minus, &mat_temp1x1);		//C*X
 80011f2:	4a22      	ldr	r2, [pc, #136]	; (800127c <kalman_filter+0x124>)
 80011f4:	4913      	ldr	r1, [pc, #76]	; (8001244 <kalman_filter+0xec>)
 80011f6:	481f      	ldr	r0, [pc, #124]	; (8001274 <kalman_filter+0x11c>)
 80011f8:	f002 fc02 	bl	8003a00 <arm_mat_mult_f32>
    //float32_t innovation = z - temp1x1;								//Z-C*X
    arm_mat_scale_f32(&mat_K, KF.z - KF.temp1x1, &mat_temp3x1);			//K*(Z-C*X)
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <kalman_filter+0x114>)
 80011fe:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8001202:	4b1a      	ldr	r3, [pc, #104]	; (800126c <kalman_filter+0x114>)
 8001204:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
 8001208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120c:	491a      	ldr	r1, [pc, #104]	; (8001278 <kalman_filter+0x120>)
 800120e:	eeb0 0a67 	vmov.f32	s0, s15
 8001212:	481d      	ldr	r0, [pc, #116]	; (8001288 <kalman_filter+0x130>)
 8001214:	f002 fc6e 	bl	8003af4 <arm_mat_scale_f32>
    arm_mat_add_f32(&mat_x_hat_minus, &mat_temp3x1, &mat_x_hat);	//X - K*(Z-C*X) ========> X estimate
 8001218:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <kalman_filter+0xf0>)
 800121a:	4917      	ldr	r1, [pc, #92]	; (8001278 <kalman_filter+0x120>)
 800121c:	4809      	ldr	r0, [pc, #36]	; (8001244 <kalman_filter+0xec>)
 800121e:	f002 f825 	bl	800326c <arm_mat_add_f32>

    // Update covariance matrix: P = (I - K * C) * P_minus
    arm_mat_mult_f32(&mat_K, &mat_C, &mat_temp3x3B);				//K*C
 8001222:	4a0c      	ldr	r2, [pc, #48]	; (8001254 <kalman_filter+0xfc>)
 8001224:	4913      	ldr	r1, [pc, #76]	; (8001274 <kalman_filter+0x11c>)
 8001226:	4818      	ldr	r0, [pc, #96]	; (8001288 <kalman_filter+0x130>)
 8001228:	f002 fbea 	bl	8003a00 <arm_mat_mult_f32>
    arm_mat_sub_f32(&eye, &mat_P_minus, &mat_temp3x3A);				//I - K*C
 800122c:	4a08      	ldr	r2, [pc, #32]	; (8001250 <kalman_filter+0xf8>)
 800122e:	490b      	ldr	r1, [pc, #44]	; (800125c <kalman_filter+0x104>)
 8001230:	4816      	ldr	r0, [pc, #88]	; (800128c <kalman_filter+0x134>)
 8001232:	f002 fc95 	bl	8003b60 <arm_mat_sub_f32>
    arm_mat_mult_f32(&mat_temp3x3A, &mat_P_minus, &mat_P);			//(I - K*C)*P ===========> P estimate
 8001236:	4a08      	ldr	r2, [pc, #32]	; (8001258 <kalman_filter+0x100>)
 8001238:	4908      	ldr	r1, [pc, #32]	; (800125c <kalman_filter+0x104>)
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <kalman_filter+0xf8>)
 800123c:	f002 fbe0 	bl	8003a00 <arm_mat_mult_f32>
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2000033c 	.word	0x2000033c
 8001248:	20000334 	.word	0x20000334
 800124c:	2000032c 	.word	0x2000032c
 8001250:	2000039c 	.word	0x2000039c
 8001254:	200003a4 	.word	0x200003a4
 8001258:	20000354 	.word	0x20000354
 800125c:	2000035c 	.word	0x2000035c
 8001260:	2000036c 	.word	0x2000036c
 8001264:	20000374 	.word	0x20000374
 8001268:	20000364 	.word	0x20000364
 800126c:	200001ac 	.word	0x200001ac
 8001270:	200003b4 	.word	0x200003b4
 8001274:	2000037c 	.word	0x2000037c
 8001278:	200003ac 	.word	0x200003ac
 800127c:	200003bc 	.word	0x200003bc
 8001280:	2000038c 	.word	0x2000038c
 8001284:	20000384 	.word	0x20000384
 8001288:	20000394 	.word	0x20000394
 800128c:	2000034c 	.word	0x2000034c

08001290 <PIDSetup>:
 */

#include "PIDController.h"

void PIDSetup(PID* temp,float32_t Kp, float32_t Ki, float32_t Kd, float32_t tolerance)
{
 8001290:	b480      	push	{r7}
 8001292:	b087      	sub	sp, #28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6178      	str	r0, [r7, #20]
 8001298:	ed87 0a04 	vstr	s0, [r7, #16]
 800129c:	edc7 0a03 	vstr	s1, [r7, #12]
 80012a0:	ed87 1a02 	vstr	s2, [r7, #8]
 80012a4:	edc7 1a01 	vstr	s3, [r7, #4]
	temp->Kp = Kp;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	601a      	str	r2, [r3, #0]
	temp->Ki = Ki;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	68fa      	ldr	r2, [r7, #12]
 80012b2:	605a      	str	r2, [r3, #4]
	temp->Kd = Kd;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	609a      	str	r2, [r3, #8]
	temp->tolerance = tolerance;
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	629a      	str	r2, [r3, #40]	; 0x28
	temp->U = 0;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
	temp->Delta_U = 0;
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
	temp->U_minus = 0;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	2200      	movs	r2, #0
 80012d0:	615a      	str	r2, [r3, #20]
	temp->Error = 0;
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]
	temp->Error_minus = 0;
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
	temp->Error_minus2 = 0;
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	621a      	str	r2, [r3, #32]
}
 80012ea:	bf00      	nop
 80012ec:	371c      	adds	r7, #28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <PIDRun>:

void PIDRun(PID* temp, float32_t Feedback, float32_t Ref)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b085      	sub	sp, #20
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	ed87 0a02 	vstr	s0, [r7, #8]
 8001302:	edc7 0a01 	vstr	s1, [r7, #4]
	temp->Error = Ref - Feedback;
 8001306:	ed97 7a01 	vldr	s14, [r7, #4]
 800130a:	edd7 7a02 	vldr	s15, [r7, #8]
 800130e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	edc3 7a06 	vstr	s15, [r3, #24]
	if(temp->Error > 0)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	edd3 7a06 	vldr	s15, [r3, #24]
 800131e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001326:	dd04      	ble.n	8001332 <PIDRun+0x3c>
	{
		temp->MotorDir = 0;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2200      	movs	r2, #0
 800132c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001330:	e00b      	b.n	800134a <PIDRun+0x54>
	}
	else if (temp->Error < 0)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	edd3 7a06 	vldr	s15, [r3, #24]
 8001338:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800133c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001340:	d503      	bpl.n	800134a <PIDRun+0x54>
	{
		temp->MotorDir = 1;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2201      	movs	r2, #1
 8001346:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
	//U Update
	temp->Delta_U = (temp->Kp + temp->Ki + temp->Kd)*temp->Error
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	ed93 7a00 	vldr	s14, [r3]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	edd3 7a01 	vldr	s15, [r3, #4]
 8001356:	ee37 7a27 	vadd.f32	s14, s14, s15
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001360:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	edd3 7a06 	vldr	s15, [r3, #24]
 800136a:	ee27 7a27 	vmul.f32	s14, s14, s15
			  -(temp->Kp + 2*temp->Kd)*temp->Error_minus
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	edd3 6a00 	vldr	s13, [r3]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	edd3 7a02 	vldr	s15, [r3, #8]
 800137a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800137e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	edd3 7a07 	vldr	s15, [r3, #28]
 8001388:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800138c:	ee37 7a67 	vsub.f32	s14, s14, s15
			  +temp->Kd*temp->Error_minus2;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	edd3 6a02 	vldr	s13, [r3, #8]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	edd3 7a08 	vldr	s15, [r3, #32]
 800139c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013a0:	ee77 7a27 	vadd.f32	s15, s14, s15
	temp->Delta_U = (temp->Kp + temp->Ki + temp->Kd)*temp->Error
 80013a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013a8:	ee17 2a90 	vmov	r2, s15
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	611a      	str	r2, [r3, #16]
	temp->U = temp->Delta_U + temp->U_minus;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	691a      	ldr	r2, [r3, #16]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	695b      	ldr	r3, [r3, #20]
 80013b8:	441a      	add	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	60da      	str	r2, [r3, #12]
	temp->U_minus = temp->U;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	68da      	ldr	r2, [r3, #12]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	615a      	str	r2, [r3, #20]
	//Error Update
	temp->Error_minus2 = temp->Error_minus;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	69da      	ldr	r2, [r3, #28]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	621a      	str	r2, [r3, #32]
	temp->Error_minus = temp->Error;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	699a      	ldr	r2, [r3, #24]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	61da      	str	r2, [r3, #28]
}
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <CascadeLoop>:

void CascadeLoop(PID* Pos, PID* Velo, float32_t PosFeedback, float32_t VeloFeedback, QuinticTraj* TrajReference, float32_t tolerance)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b088      	sub	sp, #32
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6178      	str	r0, [r7, #20]
 80013ea:	6139      	str	r1, [r7, #16]
 80013ec:	ed87 0a03 	vstr	s0, [r7, #12]
 80013f0:	edc7 0a02 	vstr	s1, [r7, #8]
 80013f4:	607a      	str	r2, [r7, #4]
 80013f6:	ed87 1a00 	vstr	s2, [r7]
	if(fabs(TrajReference->current_pos - PosFeedback) > tolerance)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	ee07 3a90 	vmov	s15, r3
 8001402:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001406:	edd7 7a03 	vldr	s15, [r7, #12]
 800140a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800140e:	eef0 7ae7 	vabs.f32	s15, s15
 8001412:	ed97 7a00 	vldr	s14, [r7]
 8001416:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800141a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141e:	d51f      	bpl.n	8001460 <CascadeLoop+0x7e>
	{
		PIDRun(Pos, PosFeedback, TrajReference->current_pos);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	ee07 3a90 	vmov	s15, r3
 8001428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800142c:	eef0 0a67 	vmov.f32	s1, s15
 8001430:	ed97 0a03 	vldr	s0, [r7, #12]
 8001434:	6978      	ldr	r0, [r7, #20]
 8001436:	f7ff ff5e 	bl	80012f6 <PIDRun>
		float32_t veloRef = Pos->U + TrajReference->current_velo;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	68da      	ldr	r2, [r3, #12]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	4413      	add	r3, r2
 8001444:	ee07 3a90 	vmov	s15, r3
 8001448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800144c:	edc7 7a07 	vstr	s15, [r7, #28]
		PIDRun(Velo, VeloFeedback, veloRef);
 8001450:	edd7 0a07 	vldr	s1, [r7, #28]
 8001454:	ed97 0a02 	vldr	s0, [r7, #8]
 8001458:	6938      	ldr	r0, [r7, #16]
 800145a:	f7ff ff4c 	bl	80012f6 <PIDRun>
	}
	else {
		Velo->U = 0;
	}
}
 800145e:	e002      	b.n	8001466 <CascadeLoop+0x84>
		Velo->U = 0;
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
}
 8001466:	bf00      	nop
 8001468:	3720      	adds	r7, #32
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <QuinticSetup>:
 *      Author: tanawatp
 */
#include "QuinticTrajectory.h"

void QuinticSetup(QuinticTraj* temp, float32_t vmax, float32_t amax)
{
 800146e:	b480      	push	{r7}
 8001470:	b085      	sub	sp, #20
 8001472:	af00      	add	r7, sp, #0
 8001474:	60f8      	str	r0, [r7, #12]
 8001476:	ed87 0a02 	vstr	s0, [r7, #8]
 800147a:	edc7 0a01 	vstr	s1, [r7, #4]
	temp->v_max = vmax;
 800147e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001482:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001486:	ee17 2a90 	vmov	r2, s15
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	619a      	str	r2, [r3, #24]
	temp->a_max = amax;
 800148e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001492:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001496:	ee17 2a90 	vmov	r2, s15
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	61da      	str	r2, [r3, #28]
	temp->State = Ready;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	//temp->final_pos = 300;
}
 80014a6:	bf00      	nop
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	0000      	movs	r0, r0
 80014b4:	0000      	movs	r0, r0
	...

080014b8 <QuinticGenerator>:
void QuinticGenerator(QuinticTraj* temp)
{
 80014b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
	temp->final_pos = temp->final_pos * 8192/120;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	035b      	lsls	r3, r3, #13
 80014c8:	4a9b      	ldr	r2, [pc, #620]	; (8001738 <QuinticGenerator+0x280>)
 80014ca:	fb82 1203 	smull	r1, r2, r2, r3
 80014ce:	441a      	add	r2, r3
 80014d0:	1192      	asrs	r2, r2, #6
 80014d2:	17db      	asrs	r3, r3, #31
 80014d4:	1ad2      	subs	r2, r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	605a      	str	r2, [r3, #4]
	temp->displacement = temp->final_pos - temp->start_pos;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	1ad2      	subs	r2, r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	609a      	str	r2, [r3, #8]
	if(temp->displacement<0)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	da04      	bge.n	80014fa <QuinticGenerator+0x42>
	{
		temp->Dir = 1;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2201      	movs	r2, #1
 80014f4:	f883 2020 	strb.w	r2, [r3, #32]
 80014f8:	e007      	b.n	800150a <QuinticGenerator+0x52>
	}
	else if (temp->displacement>0)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	dd03      	ble.n	800150a <QuinticGenerator+0x52>
	{
		temp->Dir = 0;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 2020 	strb.w	r2, [r3, #32]
	}
	temp->timeAcc = 0.5*sqrtf(23.094*fabs(temp->displacement)/temp->a_max);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	4618      	mov	r0, r3
 8001510:	f7fe ffb4 	bl	800047c <__aeabi_i2d>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4690      	mov	r8, r2
 800151a:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800151e:	a384      	add	r3, pc, #528	; (adr r3, 8001730 <QuinticGenerator+0x278>)
 8001520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001524:	4640      	mov	r0, r8
 8001526:	4649      	mov	r1, r9
 8001528:	f7ff f812 	bl	8000550 <__aeabi_dmul>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4690      	mov	r8, r2
 8001532:	4699      	mov	r9, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69db      	ldr	r3, [r3, #28]
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe ff9f 	bl	800047c <__aeabi_i2d>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4640      	mov	r0, r8
 8001544:	4649      	mov	r1, r9
 8001546:	f7ff f92d 	bl	80007a4 <__aeabi_ddiv>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	f7ff fad5 	bl	8000b00 <__aeabi_d2f>
 8001556:	4603      	mov	r3, r0
 8001558:	ee00 3a10 	vmov	s0, r3
 800155c:	f005 f95a 	bl	8006814 <sqrtf>
 8001560:	ee10 3a10 	vmov	r3, s0
 8001564:	4618      	mov	r0, r3
 8001566:	f7fe ff9b 	bl	80004a0 <__aeabi_f2d>
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	4b73      	ldr	r3, [pc, #460]	; (800173c <QuinticGenerator+0x284>)
 8001570:	f7fe ffee 	bl	8000550 <__aeabi_dmul>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4610      	mov	r0, r2
 800157a:	4619      	mov	r1, r3
 800157c:	f7ff fac0 	bl	8000b00 <__aeabi_d2f>
 8001580:	4602      	mov	r2, r0
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	645a      	str	r2, [r3, #68]	; 0x44
	temp->timeVelo = 1.875*fabs(temp->displacement)/temp->v_max;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe ff76 	bl	800047c <__aeabi_i2d>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4614      	mov	r4, r2
 8001596:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	4b68      	ldr	r3, [pc, #416]	; (8001740 <QuinticGenerator+0x288>)
 80015a0:	4620      	mov	r0, r4
 80015a2:	4629      	mov	r1, r5
 80015a4:	f7fe ffd4 	bl	8000550 <__aeabi_dmul>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4614      	mov	r4, r2
 80015ae:	461d      	mov	r5, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe ff61 	bl	800047c <__aeabi_i2d>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4620      	mov	r0, r4
 80015c0:	4629      	mov	r1, r5
 80015c2:	f7ff f8ef 	bl	80007a4 <__aeabi_ddiv>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	f7ff fa97 	bl	8000b00 <__aeabi_d2f>
 80015d2:	4602      	mov	r2, r0
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	649a      	str	r2, [r3, #72]	; 0x48
	temp->TotalTime = MAX(temp->timeAcc,temp->timeVelo);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80015e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ec:	dd02      	ble.n	80015f4 <QuinticGenerator+0x13c>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	e001      	b.n	80015f8 <QuinticGenerator+0x140>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	63d3      	str	r3, [r2, #60]	; 0x3c
	temp->coeff[0] = temp->start_pos;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	ee07 3a90 	vmov	s15, r3
 8001604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	temp->coeff[1] = 0;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	629a      	str	r2, [r3, #40]	; 0x28
	temp->coeff[2] = 0;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	62da      	str	r2, [r3, #44]	; 0x2c
	temp->coeff[3] = 10.0*temp->displacement/powf(temp->TotalTime,3);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe ff2a 	bl	800047c <__aeabi_i2d>
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	4b45      	ldr	r3, [pc, #276]	; (8001744 <QuinticGenerator+0x28c>)
 800162e:	f7fe ff8f 	bl	8000550 <__aeabi_dmul>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4614      	mov	r4, r2
 8001638:	461d      	mov	r5, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001640:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001644:	eeb0 0a67 	vmov.f32	s0, s15
 8001648:	f005 f88c 	bl	8006764 <powf>
 800164c:	ee10 3a10 	vmov	r3, s0
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe ff25 	bl	80004a0 <__aeabi_f2d>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4620      	mov	r0, r4
 800165c:	4629      	mov	r1, r5
 800165e:	f7ff f8a1 	bl	80007a4 <__aeabi_ddiv>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f7ff fa49 	bl	8000b00 <__aeabi_d2f>
 800166e:	4602      	mov	r2, r0
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	631a      	str	r2, [r3, #48]	; 0x30
	temp->coeff[4] = -15.0*temp->displacement/powf(temp->TotalTime,4);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe feff 	bl	800047c <__aeabi_i2d>
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	4b31      	ldr	r3, [pc, #196]	; (8001748 <QuinticGenerator+0x290>)
 8001684:	f7fe ff64 	bl	8000550 <__aeabi_dmul>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4614      	mov	r4, r2
 800168e:	461d      	mov	r5, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001696:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800169a:	eeb0 0a67 	vmov.f32	s0, s15
 800169e:	f005 f861 	bl	8006764 <powf>
 80016a2:	ee10 3a10 	vmov	r3, s0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe fefa 	bl	80004a0 <__aeabi_f2d>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4620      	mov	r0, r4
 80016b2:	4629      	mov	r1, r5
 80016b4:	f7ff f876 	bl	80007a4 <__aeabi_ddiv>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	f7ff fa1e 	bl	8000b00 <__aeabi_d2f>
 80016c4:	4602      	mov	r2, r0
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	635a      	str	r2, [r3, #52]	; 0x34
	temp->coeff[5] = 6.0*temp->displacement/powf(temp->TotalTime,5);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe fed4 	bl	800047c <__aeabi_i2d>
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	4b1c      	ldr	r3, [pc, #112]	; (800174c <QuinticGenerator+0x294>)
 80016da:	f7fe ff39 	bl	8000550 <__aeabi_dmul>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4614      	mov	r4, r2
 80016e4:	461d      	mov	r5, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80016ec:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80016f0:	eeb0 0a67 	vmov.f32	s0, s15
 80016f4:	f005 f836 	bl	8006764 <powf>
 80016f8:	ee10 3a10 	vmov	r3, s0
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe fecf 	bl	80004a0 <__aeabi_f2d>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4620      	mov	r0, r4
 8001708:	4629      	mov	r1, r5
 800170a:	f7ff f84b 	bl	80007a4 <__aeabi_ddiv>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
 8001716:	f7ff f9f3 	bl	8000b00 <__aeabi_d2f>
 800171a:	4602      	mov	r2, r0
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800172a:	bf00      	nop
 800172c:	f3af 8000 	nop.w
 8001730:	624dd2f2 	.word	0x624dd2f2
 8001734:	40371810 	.word	0x40371810
 8001738:	88888889 	.word	0x88888889
 800173c:	3fe00000 	.word	0x3fe00000
 8001740:	3ffe0000 	.word	0x3ffe0000
 8001744:	40240000 	.word	0x40240000
 8001748:	c02e0000 	.word	0xc02e0000
 800174c:	40180000 	.word	0x40180000

08001750 <QuinticEvaluator>:
void QuinticEvaluator(QuinticTraj* temp)
{
 8001750:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001754:	ed2d 8b02 	vpush	{d8}
 8001758:	b084      	sub	sp, #16
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
	float32_t time = temp->time;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	60fb      	str	r3, [r7, #12]
	temp->current_pos = temp->coeff[0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
						+ temp->coeff[1]*time
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001770:	edd7 7a03 	vldr	s15, [r7, #12]
 8001774:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001778:	ee37 8a27 	vadd.f32	s16, s14, s15
						+ temp->coeff[2]*powf(time,2)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	edd3 8a0b 	vldr	s17, [r3, #44]	; 0x2c
 8001782:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001786:	ed97 0a03 	vldr	s0, [r7, #12]
 800178a:	f004 ffeb 	bl	8006764 <powf>
 800178e:	eef0 7a40 	vmov.f32	s15, s0
 8001792:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001796:	ee38 8a27 	vadd.f32	s16, s16, s15
						+ temp->coeff[3]*powf(time,3)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	edd3 8a0c 	vldr	s17, [r3, #48]	; 0x30
 80017a0:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80017a4:	ed97 0a03 	vldr	s0, [r7, #12]
 80017a8:	f004 ffdc 	bl	8006764 <powf>
 80017ac:	eef0 7a40 	vmov.f32	s15, s0
 80017b0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80017b4:	ee38 8a27 	vadd.f32	s16, s16, s15
						+ temp->coeff[4]*powf(time,4)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	edd3 8a0d 	vldr	s17, [r3, #52]	; 0x34
 80017be:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80017c2:	ed97 0a03 	vldr	s0, [r7, #12]
 80017c6:	f004 ffcd 	bl	8006764 <powf>
 80017ca:	eef0 7a40 	vmov.f32	s15, s0
 80017ce:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80017d2:	ee38 8a27 	vadd.f32	s16, s16, s15
						+ temp->coeff[5]*powf(time,5);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	edd3 8a0e 	vldr	s17, [r3, #56]	; 0x38
 80017dc:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80017e0:	ed97 0a03 	vldr	s0, [r7, #12]
 80017e4:	f004 ffbe 	bl	8006764 <powf>
 80017e8:	eef0 7a40 	vmov.f32	s15, s0
 80017ec:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80017f0:	ee78 7a27 	vadd.f32	s15, s16, s15
	temp->current_pos = temp->coeff[0]
 80017f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017f8:	ee17 2a90 	vmov	r2, s15
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	60da      	str	r2, [r3, #12]

	temp->current_velo = temp->coeff[1]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fe4b 	bl	80004a0 <__aeabi_f2d>
 800180a:	4604      	mov	r4, r0
 800180c:	460d      	mov	r5, r1
						+ 2.0*temp->coeff[2]*time
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe fe44 	bl	80004a0 <__aeabi_f2d>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	f7fe fce2 	bl	80001e4 <__adddf3>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4690      	mov	r8, r2
 8001826:	4699      	mov	r9, r3
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f7fe fe39 	bl	80004a0 <__aeabi_f2d>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4640      	mov	r0, r8
 8001834:	4649      	mov	r1, r9
 8001836:	f7fe fe8b 	bl	8000550 <__aeabi_dmul>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4620      	mov	r0, r4
 8001840:	4629      	mov	r1, r5
 8001842:	f7fe fccf 	bl	80001e4 <__adddf3>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4614      	mov	r4, r2
 800184c:	461d      	mov	r5, r3
						+ 3.0*temp->coeff[3]*powf(time,2)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fe24 	bl	80004a0 <__aeabi_f2d>
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	4b8e      	ldr	r3, [pc, #568]	; (8001a98 <QuinticEvaluator+0x348>)
 800185e:	f7fe fe77 	bl	8000550 <__aeabi_dmul>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4690      	mov	r8, r2
 8001868:	4699      	mov	r9, r3
 800186a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800186e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001872:	f004 ff77 	bl	8006764 <powf>
 8001876:	ee10 3a10 	vmov	r3, s0
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fe10 	bl	80004a0 <__aeabi_f2d>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4640      	mov	r0, r8
 8001886:	4649      	mov	r1, r9
 8001888:	f7fe fe62 	bl	8000550 <__aeabi_dmul>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4620      	mov	r0, r4
 8001892:	4629      	mov	r1, r5
 8001894:	f7fe fca6 	bl	80001e4 <__adddf3>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4614      	mov	r4, r2
 800189e:	461d      	mov	r5, r3
						+ 4.0*temp->coeff[4]*powf(time,3)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fdfb 	bl	80004a0 <__aeabi_f2d>
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	4b7b      	ldr	r3, [pc, #492]	; (8001a9c <QuinticEvaluator+0x34c>)
 80018b0:	f7fe fe4e 	bl	8000550 <__aeabi_dmul>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4690      	mov	r8, r2
 80018ba:	4699      	mov	r9, r3
 80018bc:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80018c0:	ed97 0a03 	vldr	s0, [r7, #12]
 80018c4:	f004 ff4e 	bl	8006764 <powf>
 80018c8:	ee10 3a10 	vmov	r3, s0
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7fe fde7 	bl	80004a0 <__aeabi_f2d>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	4640      	mov	r0, r8
 80018d8:	4649      	mov	r1, r9
 80018da:	f7fe fe39 	bl	8000550 <__aeabi_dmul>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4620      	mov	r0, r4
 80018e4:	4629      	mov	r1, r5
 80018e6:	f7fe fc7d 	bl	80001e4 <__adddf3>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4614      	mov	r4, r2
 80018f0:	461d      	mov	r5, r3
						+ 5.0*temp->coeff[5]*powf(time,4);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fdd2 	bl	80004a0 <__aeabi_f2d>
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	4b67      	ldr	r3, [pc, #412]	; (8001aa0 <QuinticEvaluator+0x350>)
 8001902:	f7fe fe25 	bl	8000550 <__aeabi_dmul>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	4690      	mov	r8, r2
 800190c:	4699      	mov	r9, r3
 800190e:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001912:	ed97 0a03 	vldr	s0, [r7, #12]
 8001916:	f004 ff25 	bl	8006764 <powf>
 800191a:	ee10 3a10 	vmov	r3, s0
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fdbe 	bl	80004a0 <__aeabi_f2d>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4640      	mov	r0, r8
 800192a:	4649      	mov	r1, r9
 800192c:	f7fe fe10 	bl	8000550 <__aeabi_dmul>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4620      	mov	r0, r4
 8001936:	4629      	mov	r1, r5
 8001938:	f7fe fc54 	bl	80001e4 <__adddf3>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
	temp->current_velo = temp->coeff[1]
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	f7ff f8b4 	bl	8000ab0 <__aeabi_d2iz>
 8001948:	4602      	mov	r2, r0
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	611a      	str	r2, [r3, #16]

	temp->current_acc = 2.0*temp->coeff[2]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fda4 	bl	80004a0 <__aeabi_f2d>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	f7fe fc42 	bl	80001e4 <__adddf3>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4614      	mov	r4, r2
 8001966:	461d      	mov	r5, r3
						+ 6.0*temp->coeff[3]*time
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe fd97 	bl	80004a0 <__aeabi_f2d>
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	4b4b      	ldr	r3, [pc, #300]	; (8001aa4 <QuinticEvaluator+0x354>)
 8001978:	f7fe fdea 	bl	8000550 <__aeabi_dmul>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4690      	mov	r8, r2
 8001982:	4699      	mov	r9, r3
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f7fe fd8b 	bl	80004a0 <__aeabi_f2d>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4640      	mov	r0, r8
 8001990:	4649      	mov	r1, r9
 8001992:	f7fe fddd 	bl	8000550 <__aeabi_dmul>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4620      	mov	r0, r4
 800199c:	4629      	mov	r1, r5
 800199e:	f7fe fc21 	bl	80001e4 <__adddf3>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4614      	mov	r4, r2
 80019a8:	461d      	mov	r5, r3
						+ 12.0*temp->coeff[4]*powf(time,2)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fd76 	bl	80004a0 <__aeabi_f2d>
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	4b3b      	ldr	r3, [pc, #236]	; (8001aa8 <QuinticEvaluator+0x358>)
 80019ba:	f7fe fdc9 	bl	8000550 <__aeabi_dmul>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	4690      	mov	r8, r2
 80019c4:	4699      	mov	r9, r3
 80019c6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80019ca:	ed97 0a03 	vldr	s0, [r7, #12]
 80019ce:	f004 fec9 	bl	8006764 <powf>
 80019d2:	ee10 3a10 	vmov	r3, s0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fd62 	bl	80004a0 <__aeabi_f2d>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4640      	mov	r0, r8
 80019e2:	4649      	mov	r1, r9
 80019e4:	f7fe fdb4 	bl	8000550 <__aeabi_dmul>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4620      	mov	r0, r4
 80019ee:	4629      	mov	r1, r5
 80019f0:	f7fe fbf8 	bl	80001e4 <__adddf3>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4614      	mov	r4, r2
 80019fa:	461d      	mov	r5, r3
						+ 20.0*temp->coeff[5]*powf(time,3);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fd4d 	bl	80004a0 <__aeabi_f2d>
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	4b28      	ldr	r3, [pc, #160]	; (8001aac <QuinticEvaluator+0x35c>)
 8001a0c:	f7fe fda0 	bl	8000550 <__aeabi_dmul>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4690      	mov	r8, r2
 8001a16:	4699      	mov	r9, r3
 8001a18:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001a1c:	ed97 0a03 	vldr	s0, [r7, #12]
 8001a20:	f004 fea0 	bl	8006764 <powf>
 8001a24:	ee10 3a10 	vmov	r3, s0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fd39 	bl	80004a0 <__aeabi_f2d>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	4640      	mov	r0, r8
 8001a34:	4649      	mov	r1, r9
 8001a36:	f7fe fd8b 	bl	8000550 <__aeabi_dmul>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4620      	mov	r0, r4
 8001a40:	4629      	mov	r1, r5
 8001a42:	f7fe fbcf 	bl	80001e4 <__adddf3>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
	temp->current_acc = 2.0*temp->coeff[2]
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f7ff f82f 	bl	8000ab0 <__aeabi_d2iz>
 8001a52:	4602      	mov	r2, r0
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	615a      	str	r2, [r3, #20]
	if(time >= temp->TotalTime)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001a5e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6a:	da00      	bge.n	8001a6e <QuinticEvaluator+0x31e>
		temp->start_pos = temp->final_pos;
		temp->current_pos = temp->start_pos;
		temp->current_velo = 0;
		temp->current_acc = 0;
	}
}
 8001a6c:	e00d      	b.n	8001a8a <QuinticEvaluator+0x33a>
		temp->start_pos = temp->final_pos;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	601a      	str	r2, [r3, #0]
		temp->current_pos = temp->start_pos;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	60da      	str	r2, [r3, #12]
		temp->current_velo = 0;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
		temp->current_acc = 0;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	615a      	str	r2, [r3, #20]
}
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	ecbd 8b02 	vpop	{d8}
 8001a94:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a98:	40080000 	.word	0x40080000
 8001a9c:	40100000 	.word	0x40100000
 8001aa0:	40140000 	.word	0x40140000
 8001aa4:	40180000 	.word	0x40180000
 8001aa8:	40280000 	.word	0x40280000
 8001aac:	40340000 	.word	0x40340000

08001ab0 <QuinticRun>:
void QuinticRun(QuinticTraj* temp,float32_t dt)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	ed87 0a00 	vstr	s0, [r7]
	switch(temp->State)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d01d      	beq.n	8001b02 <QuinticRun+0x52>
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	dc3a      	bgt.n	8001b40 <QuinticRun+0x90>
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d002      	beq.n	8001ad4 <QuinticRun+0x24>
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d00b      	beq.n	8001aea <QuinticRun+0x3a>
		{
			temp->State = Ready;
		}
		break;
	}
}
 8001ad2:	e035      	b.n	8001b40 <QuinticRun+0x90>
		if(temp->start_pos != temp->final_pos)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d02e      	beq.n	8001b3e <QuinticRun+0x8e>
			temp->State = PreCal;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8001ae8:	e029      	b.n	8001b3e <QuinticRun+0x8e>
		temp->time = 0;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40
		QuinticGenerator(temp);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff fce0 	bl	80014b8 <QuinticGenerator>
		temp->State = Run;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2202      	movs	r2, #2
 8001afc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8001b00:	e01e      	b.n	8001b40 <QuinticRun+0x90>
		temp->time = temp->time + dt;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001b08:	edd7 7a00 	vldr	s15, [r7]
 8001b0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		QuinticEvaluator(temp);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff fe1a 	bl	8001750 <QuinticEvaluator>
		if(temp->time > temp->TotalTime)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001b28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b30:	dc00      	bgt.n	8001b34 <QuinticRun+0x84>
		break;
 8001b32:	e005      	b.n	8001b40 <QuinticRun+0x90>
			temp->State = Ready;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8001b3c:	e000      	b.n	8001b40 <QuinticRun+0x90>
		break;
 8001b3e:	bf00      	nop
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <InitReadEncoder>:
//{ //get time in micros
//	return __HAL_TIM_GET_COUNTER(&htim5)+ ReadEncoderParam._micros;
//}

void InitReadEncoder(ReadEncoder* Read, uint32_t samplingtime)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
	Read->MotorSetDuty = 0;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]
	Read->Pulse_Compare = 0;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	805a      	strh	r2, [r3, #2]
	Read->DIR = 0;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	711a      	strb	r2, [r3, #4]
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <QEIGetFeedback>:
//	//Delay
//	QEIData.data[1] = QEIData.data[0];
//	QEIData.timestamp[1] = QEIData.timestamp[0];
//}
void QEIGetFeedback(QEI* temp, uint16_t Hz)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	807b      	strh	r3, [r7, #2]
	temp->QEIPosition = __HAL_TIM_GET_COUNTER(&htim2);
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <QEIGetFeedback+0x4c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	461a      	mov	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	605a      	str	r2, [r3, #4]
	temp->QEIVelocity = (temp->QEIPosition - temp->QEIPosition_minus) * Hz;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	887a      	ldrh	r2, [r7, #2]
 8001b94:	fb02 f303 	mul.w	r3, r2, r3
 8001b98:	ee07 3a90 	vmov	s15, r3
 8001b9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	edc3 7a02 	vstr	s15, [r3, #8]
	temp->QEIPosition_minus = temp->QEIPosition;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	601a      	str	r2, [r3, #0]
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	200004f8 	.word	0x200004f8

08001bc0 <TraySetup>:
 */
#include "TrayLocalization.h"
#include "arm_math.h"

void TraySetup(Tray* temp, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	4608      	mov	r0, r1
 8001bca:	4611      	mov	r1, r2
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4603      	mov	r3, r0
 8001bd0:	817b      	strh	r3, [r7, #10]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	813b      	strh	r3, [r7, #8]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	80fb      	strh	r3, [r7, #6]
	temp->Edge1_X = x1;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	897a      	ldrh	r2, [r7, #10]
 8001bde:	801a      	strh	r2, [r3, #0]
	temp->Edge1_Y = y1;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	893a      	ldrh	r2, [r7, #8]
 8001be4:	805a      	strh	r2, [r3, #2]
	temp->Edge2_X = x2;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	88fa      	ldrh	r2, [r7, #6]
 8001bea:	809a      	strh	r2, [r3, #4]
	temp->Edge2_Y = y2;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8b3a      	ldrh	r2, [r7, #24]
 8001bf0:	80da      	strh	r2, [r3, #6]
}
 8001bf2:	bf00      	nop
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <TrayLocalization>:
void TrayLocalization(Tray* temp)
{
 8001c00:	b5b0      	push	{r4, r5, r7, lr}
 8001c02:	ed2d 8b02 	vpush	{d8}
 8001c06:	b08e      	sub	sp, #56	; 0x38
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	uint16_t RefX_case1[3] = {10*8192/120,30*8192/120,50*8192/120};
 8001c0c:	4ab6      	ldr	r2, [pc, #728]	; (8001ee8 <TrayLocalization+0x2e8>)
 8001c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c16:	6018      	str	r0, [r3, #0]
 8001c18:	3304      	adds	r3, #4
 8001c1a:	8019      	strh	r1, [r3, #0]
	uint16_t RefY_case1[3] = {40*8192/120,25*8192/120,10*8192/120};
 8001c1c:	4ab3      	ldr	r2, [pc, #716]	; (8001eec <TrayLocalization+0x2ec>)
 8001c1e:	f107 031c 	add.w	r3, r7, #28
 8001c22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c26:	6018      	str	r0, [r3, #0]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	8019      	strh	r1, [r3, #0]

	uint16_t RefX_case2[3] = {10*8192/120,25*8192/120,40*8192/120};
 8001c2c:	4ab0      	ldr	r2, [pc, #704]	; (8001ef0 <TrayLocalization+0x2f0>)
 8001c2e:	f107 0314 	add.w	r3, r7, #20
 8001c32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c36:	6018      	str	r0, [r3, #0]
 8001c38:	3304      	adds	r3, #4
 8001c3a:	8019      	strh	r1, [r3, #0]
	uint16_t RefY_case2[3] = {50*8192/120,30*8192/120,10*8192/120};
 8001c3c:	4aad      	ldr	r2, [pc, #692]	; (8001ef4 <TrayLocalization+0x2f4>)
 8001c3e:	f107 030c 	add.w	r3, r7, #12
 8001c42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c46:	6018      	str	r0, [r3, #0]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	8019      	strh	r1, [r3, #0]
	int16_t deltaX = temp->Edge2_X - temp->Edge1_X;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	889a      	ldrh	r2, [r3, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	867b      	strh	r3, [r7, #50]	; 0x32
	int16_t deltaY = temp->Edge2_Y - temp->Edge1_Y;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	88da      	ldrh	r2, [r3, #6]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	885b      	ldrh	r3, [r3, #2]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	863b      	strh	r3, [r7, #48]	; 0x30
	float32_t lengh = sqrt(pow(deltaX,2) + pow(deltaY,2));
 8001c68:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fc05 	bl	800047c <__aeabi_i2d>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	ed9f 1b9a 	vldr	d1, [pc, #616]	; 8001ee0 <TrayLocalization+0x2e0>
 8001c7a:	ec43 2b10 	vmov	d0, r2, r3
 8001c7e:	f004 fcd5 	bl	800662c <pow>
 8001c82:	ec55 4b10 	vmov	r4, r5, d0
 8001c86:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe fbf6 	bl	800047c <__aeabi_i2d>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	ed9f 1b92 	vldr	d1, [pc, #584]	; 8001ee0 <TrayLocalization+0x2e0>
 8001c98:	ec43 2b10 	vmov	d0, r2, r3
 8001c9c:	f004 fcc6 	bl	800662c <pow>
 8001ca0:	ec53 2b10 	vmov	r2, r3, d0
 8001ca4:	4620      	mov	r0, r4
 8001ca6:	4629      	mov	r1, r5
 8001ca8:	f7fe fa9c 	bl	80001e4 <__adddf3>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	ec43 2b17 	vmov	d7, r2, r3
 8001cb4:	eeb0 0a47 	vmov.f32	s0, s14
 8001cb8:	eef0 0a67 	vmov.f32	s1, s15
 8001cbc:	f004 fd26 	bl	800670c <sqrt>
 8001cc0:	ec53 2b10 	vmov	r2, r3, d0
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f7fe ff1a 	bl	8000b00 <__aeabi_d2f>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c

	if((3276 <= lengh)&&(lengh <= 3550))
 8001cd0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001cd4:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8001ef8 <TrayLocalization+0x2f8>
 8001cd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce0:	db0d      	blt.n	8001cfe <TrayLocalization+0xfe>
 8001ce2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ce6:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8001efc <TrayLocalization+0x2fc>
 8001cea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf2:	d804      	bhi.n	8001cfe <TrayLocalization+0xfe>
	{
		temp->Flag = 1;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8001cfc:	e01a      	b.n	8001d34 <TrayLocalization+0x134>
	}
	else if ((3550 <= lengh)&&(lengh <= 4233))
 8001cfe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d02:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8001efc <TrayLocalization+0x2fc>
 8001d06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0e:	db0d      	blt.n	8001d2c <TrayLocalization+0x12c>
 8001d10:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d14:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8001f00 <TrayLocalization+0x300>
 8001d18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d20:	d804      	bhi.n	8001d2c <TrayLocalization+0x12c>
	{
		temp->Flag = 2;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2202      	movs	r2, #2
 8001d26:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8001d2a:	e003      	b.n	8001d34 <TrayLocalization+0x134>
	}
	else
	{
		temp->Flag = 0;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}
	float32_t theta;
	arm_atan2_f32(deltaY,deltaX,&theta);
 8001d34:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001d38:	ee07 3a90 	vmov	s15, r3
 8001d3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d40:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001d44:	ee07 3a10 	vmov	s14, r3
 8001d48:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d4c:	f107 0308 	add.w	r3, r7, #8
 8001d50:	4618      	mov	r0, r3
 8001d52:	eef0 0a47 	vmov.f32	s1, s14
 8001d56:	eeb0 0a67 	vmov.f32	s0, s15
 8001d5a:	f000 ff59 	bl	8002c10 <arm_atan2_f32>
	int8_t i;
	int8_t j;
	uint8_t ind = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	switch(temp->Flag)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f993 302d 	ldrsb.w	r3, [r3, #45]	; 0x2d
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	f000 80af 	beq.w	8001ece <TrayLocalization+0x2ce>
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	f300 8166 	bgt.w	8002042 <TrayLocalization+0x442>
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 8162 	beq.w	8002040 <TrayLocalization+0x440>
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	f040 8160 	bne.w	8002042 <TrayLocalization+0x442>
	{
	case 1:
		for(i=0;i<3;i++)
 8001d82:	2300      	movs	r3, #0
 8001d84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001d88:	e09b      	b.n	8001ec2 <TrayLocalization+0x2c2>
		{
			for(j=0;j<3;j++)
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001d90:	e08b      	b.n	8001eaa <TrayLocalization+0x2aa>
			{
				temp->Holes_X[ind] = temp->Edge1_X
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	ee07 3a90 	vmov	s15, r3
								+ arm_cos_f32(theta)*RefX_case1[i]
 8001d9a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001d9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001da2:	eeb0 0a67 	vmov.f32	s0, s15
 8001da6:	f001 f959 	bl	800305c <arm_cos_f32>
 8001daa:	eeb0 7a40 	vmov.f32	s14, s0
 8001dae:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	3338      	adds	r3, #56	; 0x38
 8001db6:	443b      	add	r3, r7
 8001db8:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001dbc:	ee07 3a90 	vmov	s15, r3
 8001dc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc8:	ee38 8a27 	vadd.f32	s16, s16, s15
								- arm_sin_f32(theta)*RefY_case1[j];
 8001dcc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dd0:	eeb0 0a67 	vmov.f32	s0, s15
 8001dd4:	f001 f9c8 	bl	8003168 <arm_sin_f32>
 8001dd8:	eeb0 7a40 	vmov.f32	s14, s0
 8001ddc:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	3338      	adds	r3, #56	; 0x38
 8001de4:	443b      	add	r3, r7
 8001de6:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001dea:	ee07 3a90 	vmov	s15, r3
 8001dee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df6:	ee78 7a67 	vsub.f32	s15, s16, s15
				temp->Holes_X[ind] = temp->Edge1_X
 8001dfa:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8001dfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e02:	ee17 3a90 	vmov	r3, s15
 8001e06:	b299      	uxth	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3204      	adds	r2, #4
 8001e0c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				temp->Holes_Y[ind] = temp->Edge1_Y
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	885b      	ldrh	r3, [r3, #2]
 8001e14:	ee07 3a90 	vmov	s15, r3
								+ arm_cos_f32(theta)*RefY_case1[j]
 8001e18:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001e1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e20:	eeb0 0a67 	vmov.f32	s0, s15
 8001e24:	f001 f91a 	bl	800305c <arm_cos_f32>
 8001e28:	eeb0 7a40 	vmov.f32	s14, s0
 8001e2c:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	3338      	adds	r3, #56	; 0x38
 8001e34:	443b      	add	r3, r7
 8001e36:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001e3a:	ee07 3a90 	vmov	s15, r3
 8001e3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e46:	ee38 8a27 	vadd.f32	s16, s16, s15
								+ arm_sin_f32(theta)*RefX_case1[i];
 8001e4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e52:	f001 f989 	bl	8003168 <arm_sin_f32>
 8001e56:	eeb0 7a40 	vmov.f32	s14, s0
 8001e5a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	3338      	adds	r3, #56	; 0x38
 8001e62:	443b      	add	r3, r7
 8001e64:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001e68:	ee07 3a90 	vmov	s15, r3
 8001e6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e74:	ee78 7a27 	vadd.f32	s15, s16, s15
				temp->Holes_Y[ind] = temp->Edge1_Y
 8001e78:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e80:	ee17 2a90 	vmov	r2, s15
 8001e84:	b291      	uxth	r1, r2
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	330c      	adds	r3, #12
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	460a      	mov	r2, r1
 8001e90:	805a      	strh	r2, [r3, #2]
				ind += 1;
 8001e92:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e96:	3301      	adds	r3, #1
 8001e98:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			for(j=0;j<3;j++)
 8001e9c:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001eaa:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	f77f af6f 	ble.w	8001d92 <TrayLocalization+0x192>
		for(i=0;i<3;i++)
 8001eb4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	3301      	adds	r3, #1
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001ec2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	f77f af5f 	ble.w	8001d8a <TrayLocalization+0x18a>
			}
		}
		break;
 8001ecc:	e0b9      	b.n	8002042 <TrayLocalization+0x442>
	case 2:
		for(i=0;i<3;i++)
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001ed4:	e0ae      	b.n	8002034 <TrayLocalization+0x434>
		{
			for(j=0;j<3;j++)
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001edc:	e09e      	b.n	800201c <TrayLocalization+0x41c>
 8001ede:	bf00      	nop
 8001ee0:	00000000 	.word	0x00000000
 8001ee4:	40000000 	.word	0x40000000
 8001ee8:	08007d04 	.word	0x08007d04
 8001eec:	08007d0c 	.word	0x08007d0c
 8001ef0:	08007d14 	.word	0x08007d14
 8001ef4:	08007d1c 	.word	0x08007d1c
 8001ef8:	454cc000 	.word	0x454cc000
 8001efc:	455de000 	.word	0x455de000
 8001f00:	45844800 	.word	0x45844800
			{
				temp->Holes_X[ind] = temp->Edge1_X
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	ee07 3a90 	vmov	s15, r3
								+ arm_cos_f32(theta)*RefX_case2[i]
 8001f0c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001f10:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f14:	eeb0 0a67 	vmov.f32	s0, s15
 8001f18:	f001 f8a0 	bl	800305c <arm_cos_f32>
 8001f1c:	eeb0 7a40 	vmov.f32	s14, s0
 8001f20:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	3338      	adds	r3, #56	; 0x38
 8001f28:	443b      	add	r3, r7
 8001f2a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001f2e:	ee07 3a90 	vmov	s15, r3
 8001f32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f3a:	ee38 8a27 	vadd.f32	s16, s16, s15
								- arm_sin_f32(theta)*RefY_case2[j];
 8001f3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f42:	eeb0 0a67 	vmov.f32	s0, s15
 8001f46:	f001 f90f 	bl	8003168 <arm_sin_f32>
 8001f4a:	eeb0 7a40 	vmov.f32	s14, s0
 8001f4e:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	3338      	adds	r3, #56	; 0x38
 8001f56:	443b      	add	r3, r7
 8001f58:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8001f5c:	ee07 3a90 	vmov	s15, r3
 8001f60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f68:	ee78 7a67 	vsub.f32	s15, s16, s15
				temp->Holes_X[ind] = temp->Edge1_X
 8001f6c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8001f70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f74:	ee17 3a90 	vmov	r3, s15
 8001f78:	b299      	uxth	r1, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3204      	adds	r2, #4
 8001f7e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				temp->Holes_Y[ind] = temp->Edge1_Y
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	885b      	ldrh	r3, [r3, #2]
 8001f86:	ee07 3a90 	vmov	s15, r3
								+ arm_cos_f32(theta)*RefY_case2[j]
 8001f8a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001f8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f92:	eeb0 0a67 	vmov.f32	s0, s15
 8001f96:	f001 f861 	bl	800305c <arm_cos_f32>
 8001f9a:	eeb0 7a40 	vmov.f32	s14, s0
 8001f9e:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	3338      	adds	r3, #56	; 0x38
 8001fa6:	443b      	add	r3, r7
 8001fa8:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8001fac:	ee07 3a90 	vmov	s15, r3
 8001fb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fb8:	ee38 8a27 	vadd.f32	s16, s16, s15
								+ arm_sin_f32(theta)*RefX_case2[i];
 8001fbc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc4:	f001 f8d0 	bl	8003168 <arm_sin_f32>
 8001fc8:	eeb0 7a40 	vmov.f32	s14, s0
 8001fcc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	3338      	adds	r3, #56	; 0x38
 8001fd4:	443b      	add	r3, r7
 8001fd6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001fda:	ee07 3a90 	vmov	s15, r3
 8001fde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fe6:	ee78 7a27 	vadd.f32	s15, s16, s15
				temp->Holes_Y[ind] = temp->Edge1_Y
 8001fea:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001fee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ff2:	ee17 2a90 	vmov	r2, s15
 8001ff6:	b291      	uxth	r1, r2
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	330c      	adds	r3, #12
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	460a      	mov	r2, r1
 8002002:	805a      	strh	r2, [r3, #2]
				ind += 1;
 8002004:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002008:	3301      	adds	r3, #1
 800200a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			for(j=0;j<3;j++)
 800200e:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8002012:	b2db      	uxtb	r3, r3
 8002014:	3301      	adds	r3, #1
 8002016:	b2db      	uxtb	r3, r3
 8002018:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800201c:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8002020:	2b02      	cmp	r3, #2
 8002022:	f77f af6f 	ble.w	8001f04 <TrayLocalization+0x304>
		for(i=0;i<3;i++)
 8002026:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800202a:	b2db      	uxtb	r3, r3
 800202c:	3301      	adds	r3, #1
 800202e:	b2db      	uxtb	r3, r3
 8002030:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002034:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002038:	2b02      	cmp	r3, #2
 800203a:	f77f af4c 	ble.w	8001ed6 <TrayLocalization+0x2d6>
			}
		}
		break;
 800203e:	e000      	b.n	8002042 <TrayLocalization+0x442>
	case 0:
		break;
 8002040:	bf00      	nop
	}
}
 8002042:	bf00      	nop
 8002044:	3738      	adds	r7, #56	; 0x38
 8002046:	46bd      	mov	sp, r7
 8002048:	ecbd 8b02 	vpop	{d8}
 800204c:	bdb0      	pop	{r4, r5, r7, pc}
 800204e:	bf00      	nop

08002050 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b08a      	sub	sp, #40	; 0x28
 8002054:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002056:	f107 0314 	add.w	r3, r7, #20
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	605a      	str	r2, [r3, #4]
 8002060:	609a      	str	r2, [r3, #8]
 8002062:	60da      	str	r2, [r3, #12]
 8002064:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	4b41      	ldr	r3, [pc, #260]	; (8002170 <MX_GPIO_Init+0x120>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	4a40      	ldr	r2, [pc, #256]	; (8002170 <MX_GPIO_Init+0x120>)
 8002070:	f043 0304 	orr.w	r3, r3, #4
 8002074:	6313      	str	r3, [r2, #48]	; 0x30
 8002076:	4b3e      	ldr	r3, [pc, #248]	; (8002170 <MX_GPIO_Init+0x120>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	4b3a      	ldr	r3, [pc, #232]	; (8002170 <MX_GPIO_Init+0x120>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	4a39      	ldr	r2, [pc, #228]	; (8002170 <MX_GPIO_Init+0x120>)
 800208c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002090:	6313      	str	r3, [r2, #48]	; 0x30
 8002092:	4b37      	ldr	r3, [pc, #220]	; (8002170 <MX_GPIO_Init+0x120>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	4b33      	ldr	r3, [pc, #204]	; (8002170 <MX_GPIO_Init+0x120>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	4a32      	ldr	r2, [pc, #200]	; (8002170 <MX_GPIO_Init+0x120>)
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	6313      	str	r3, [r2, #48]	; 0x30
 80020ae:	4b30      	ldr	r3, [pc, #192]	; (8002170 <MX_GPIO_Init+0x120>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	60bb      	str	r3, [r7, #8]
 80020b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	607b      	str	r3, [r7, #4]
 80020be:	4b2c      	ldr	r3, [pc, #176]	; (8002170 <MX_GPIO_Init+0x120>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4a2b      	ldr	r2, [pc, #172]	; (8002170 <MX_GPIO_Init+0x120>)
 80020c4:	f043 0302 	orr.w	r3, r3, #2
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4b29      	ldr	r3, [pc, #164]	; (8002170 <MX_GPIO_Init+0x120>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	607b      	str	r3, [r7, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80020d6:	2200      	movs	r2, #0
 80020d8:	2120      	movs	r1, #32
 80020da:	4826      	ldr	r0, [pc, #152]	; (8002174 <MX_GPIO_Init+0x124>)
 80020dc:	f002 f8c4 	bl	8004268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80020e0:	2200      	movs	r2, #0
 80020e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020e6:	4824      	ldr	r0, [pc, #144]	; (8002178 <MX_GPIO_Init+0x128>)
 80020e8:	f002 f8be 	bl	8004268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80020ec:	2200      	movs	r2, #0
 80020ee:	2140      	movs	r1, #64	; 0x40
 80020f0:	4822      	ldr	r0, [pc, #136]	; (800217c <MX_GPIO_Init+0x12c>)
 80020f2:	f002 f8b9 	bl	8004268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80020f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002100:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002106:	f107 0314 	add.w	r3, r7, #20
 800210a:	4619      	mov	r1, r3
 800210c:	481b      	ldr	r0, [pc, #108]	; (800217c <MX_GPIO_Init+0x12c>)
 800210e:	f001 ff27 	bl	8003f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002112:	2320      	movs	r3, #32
 8002114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002116:	2301      	movs	r3, #1
 8002118:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211e:	2300      	movs	r3, #0
 8002120:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002122:	f107 0314 	add.w	r3, r7, #20
 8002126:	4619      	mov	r1, r3
 8002128:	4812      	ldr	r0, [pc, #72]	; (8002174 <MX_GPIO_Init+0x124>)
 800212a:	f001 ff19 	bl	8003f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800212e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002132:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002134:	2301      	movs	r3, #1
 8002136:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213c:	2300      	movs	r3, #0
 800213e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	4619      	mov	r1, r3
 8002146:	480c      	ldr	r0, [pc, #48]	; (8002178 <MX_GPIO_Init+0x128>)
 8002148:	f001 ff0a 	bl	8003f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800214c:	2340      	movs	r3, #64	; 0x40
 800214e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002150:	2301      	movs	r3, #1
 8002152:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	2300      	movs	r3, #0
 8002156:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002158:	2300      	movs	r3, #0
 800215a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800215c:	f107 0314 	add.w	r3, r7, #20
 8002160:	4619      	mov	r1, r3
 8002162:	4806      	ldr	r0, [pc, #24]	; (800217c <MX_GPIO_Init+0x12c>)
 8002164:	f001 fefc 	bl	8003f60 <HAL_GPIO_Init>

}
 8002168:	bf00      	nop
 800216a:	3728      	adds	r7, #40	; 0x28
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40023800 	.word	0x40023800
 8002174:	40020000 	.word	0x40020000
 8002178:	40020400 	.word	0x40020400
 800217c:	40020800 	.word	0x40020800

08002180 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002184:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <MX_I2C1_Init+0x50>)
 8002186:	4a13      	ldr	r2, [pc, #76]	; (80021d4 <MX_I2C1_Init+0x54>)
 8002188:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800218a:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <MX_I2C1_Init+0x50>)
 800218c:	4a12      	ldr	r2, [pc, #72]	; (80021d8 <MX_I2C1_Init+0x58>)
 800218e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002190:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <MX_I2C1_Init+0x50>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002196:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <MX_I2C1_Init+0x50>)
 8002198:	2200      	movs	r2, #0
 800219a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <MX_I2C1_Init+0x50>)
 800219e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021a4:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <MX_I2C1_Init+0x50>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <MX_I2C1_Init+0x50>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021b0:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <MX_I2C1_Init+0x50>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021b6:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <MX_I2C1_Init+0x50>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021bc:	4804      	ldr	r0, [pc, #16]	; (80021d0 <MX_I2C1_Init+0x50>)
 80021be:	f002 f86d 	bl	800429c <HAL_I2C_Init>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80021c8:	f000 f9b4 	bl	8002534 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	2000009c 	.word	0x2000009c
 80021d4:	40005400 	.word	0x40005400
 80021d8:	00061a80 	.word	0x00061a80

080021dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	; 0x28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a19      	ldr	r2, [pc, #100]	; (8002260 <HAL_I2C_MspInit+0x84>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d12b      	bne.n	8002256 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	4b18      	ldr	r3, [pc, #96]	; (8002264 <HAL_I2C_MspInit+0x88>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a17      	ldr	r2, [pc, #92]	; (8002264 <HAL_I2C_MspInit+0x88>)
 8002208:	f043 0302 	orr.w	r3, r3, #2
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b15      	ldr	r3, [pc, #84]	; (8002264 <HAL_I2C_MspInit+0x88>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800221a:	23c0      	movs	r3, #192	; 0xc0
 800221c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800221e:	2312      	movs	r3, #18
 8002220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002226:	2303      	movs	r3, #3
 8002228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800222a:	2304      	movs	r3, #4
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222e:	f107 0314 	add.w	r3, r7, #20
 8002232:	4619      	mov	r1, r3
 8002234:	480c      	ldr	r0, [pc, #48]	; (8002268 <HAL_I2C_MspInit+0x8c>)
 8002236:	f001 fe93 	bl	8003f60 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	4b09      	ldr	r3, [pc, #36]	; (8002264 <HAL_I2C_MspInit+0x88>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	4a08      	ldr	r2, [pc, #32]	; (8002264 <HAL_I2C_MspInit+0x88>)
 8002244:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002248:	6413      	str	r3, [r2, #64]	; 0x40
 800224a:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_I2C_MspInit+0x88>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002256:	bf00      	nop
 8002258:	3728      	adds	r7, #40	; 0x28
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40005400 	.word	0x40005400
 8002264:	40023800 	.word	0x40023800
 8002268:	40020400 	.word	0x40020400

0800226c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002272:	f001 fcf1 	bl	8003c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002276:	f000 f89b 	bl	80023b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800227a:	f7ff fee9 	bl	8002050 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800227e:	f000 fc2b 	bl	8002ad8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8002282:	f000 f9df 	bl	8002644 <MX_TIM2_Init>
  MX_TIM5_Init();
 8002286:	f000 faf5 	bl	8002874 <MX_TIM5_Init>
  MX_TIM3_Init();
 800228a:	f000 fa2f 	bl	80026ec <MX_TIM3_Init>
  MX_I2C1_Init();
 800228e:	f7ff ff77 	bl	8002180 <MX_I2C1_Init>
  MX_TIM4_Init();
 8002292:	f000 faa1 	bl	80027d8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  //Setup Initial vaules
  InitKalmanStruct(&KF,Var_Q,Var_R);
 8002296:	4b31      	ldr	r3, [pc, #196]	; (800235c <main+0xf0>)
 8002298:	edd3 7a00 	vldr	s15, [r3]
 800229c:	4b30      	ldr	r3, [pc, #192]	; (8002360 <main+0xf4>)
 800229e:	ed93 7a00 	vldr	s14, [r3]
 80022a2:	eef0 0a47 	vmov.f32	s1, s14
 80022a6:	eeb0 0a67 	vmov.f32	s0, s15
 80022aa:	482e      	ldr	r0, [pc, #184]	; (8002364 <main+0xf8>)
 80022ac:	f7fe fdfa 	bl	8000ea4 <InitKalmanStruct>

  InitReadEncoder(&ReadEncoderParam, 1000);
 80022b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80022b4:	482c      	ldr	r0, [pc, #176]	; (8002368 <main+0xfc>)
 80022b6:	f7ff fc47 	bl	8001b48 <InitReadEncoder>

  QuinticSetup(&QuinticVar, vmax, amax);
 80022ba:	4b2c      	ldr	r3, [pc, #176]	; (800236c <main+0x100>)
 80022bc:	edd3 7a00 	vldr	s15, [r3]
 80022c0:	4b2b      	ldr	r3, [pc, #172]	; (8002370 <main+0x104>)
 80022c2:	ed93 7a00 	vldr	s14, [r3]
 80022c6:	eef0 0a47 	vmov.f32	s1, s14
 80022ca:	eeb0 0a67 	vmov.f32	s0, s15
 80022ce:	4829      	ldr	r0, [pc, #164]	; (8002374 <main+0x108>)
 80022d0:	f7ff f8cd 	bl	800146e <QuinticSetup>

  PIDSetup(&PositionLoop, 0.0095, 1.005, 0, 10);
 80022d4:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 80022d8:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8002378 <main+0x10c>
 80022dc:	eddf 0a27 	vldr	s1, [pc, #156]	; 800237c <main+0x110>
 80022e0:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8002380 <main+0x114>
 80022e4:	4827      	ldr	r0, [pc, #156]	; (8002384 <main+0x118>)
 80022e6:	f7fe ffd3 	bl	8001290 <PIDSetup>
  PIDSetup(&VelocityLoop, 2.3, 0.000015, 0, 0.00003);
 80022ea:	eddf 1a27 	vldr	s3, [pc, #156]	; 8002388 <main+0x11c>
 80022ee:	ed9f 1a22 	vldr	s2, [pc, #136]	; 8002378 <main+0x10c>
 80022f2:	eddf 0a26 	vldr	s1, [pc, #152]	; 800238c <main+0x120>
 80022f6:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8002390 <main+0x124>
 80022fa:	4826      	ldr	r0, [pc, #152]	; (8002394 <main+0x128>)
 80022fc:	f7fe ffc8 	bl	8001290 <PIDSetup>

  TraySetup(&PickTray, 4644, 37399, 8774, 37358);
 8002300:	f249 13ee 	movw	r3, #37358	; 0x91ee
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	f242 2346 	movw	r3, #8774	; 0x2246
 800230a:	f249 2217 	movw	r2, #37399	; 0x9217
 800230e:	f241 2124 	movw	r1, #4644	; 0x1224
 8002312:	4821      	ldr	r0, [pc, #132]	; (8002398 <main+0x12c>)
 8002314:	f7ff fc54 	bl	8001bc0 <TraySetup>
  TraySetup(&PlaceTray, 15052, 19020, 17984, 17326);
 8002318:	f244 33ae 	movw	r3, #17326	; 0x43ae
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	f244 6340 	movw	r3, #17984	; 0x4640
 8002322:	f644 224c 	movw	r2, #19020	; 0x4a4c
 8002326:	f643 21cc 	movw	r1, #15052	; 0x3acc
 800232a:	481c      	ldr	r0, [pc, #112]	; (800239c <main+0x130>)
 800232c:	f7ff fc48 	bl	8001bc0 <TraySetup>
  TrayLocalization(&PickTray);
 8002330:	4819      	ldr	r0, [pc, #100]	; (8002398 <main+0x12c>)
 8002332:	f7ff fc65 	bl	8001c00 <TrayLocalization>
  TrayLocalization(&PlaceTray);
 8002336:	4819      	ldr	r0, [pc, #100]	; (800239c <main+0x130>)
 8002338:	f7ff fc62 	bl	8001c00 <TrayLocalization>
  //Timers Start
  HAL_TIM_Base_Start_IT(&htim4);
 800233c:	4818      	ldr	r0, [pc, #96]	; (80023a0 <main+0x134>)
 800233e:	f002 fdd9 	bl	8004ef4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2);  //Start QEI
 8002342:	2104      	movs	r1, #4
 8002344:	4817      	ldr	r0, [pc, #92]	; (80023a4 <main+0x138>)
 8002346:	f002 ffe7 	bl	8005318 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);//Start PWM
 800234a:	2108      	movs	r1, #8
 800234c:	4816      	ldr	r0, [pc, #88]	; (80023a8 <main+0x13c>)
 800234e:	f002 fe8d 	bl	800506c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8002352:	4816      	ldr	r0, [pc, #88]	; (80023ac <main+0x140>)
 8002354:	f002 fdce 	bl	8004ef4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002358:	e7fe      	b.n	8002358 <main+0xec>
 800235a:	bf00      	nop
 800235c:	20000008 	.word	0x20000008
 8002360:	2000000c 	.word	0x2000000c
 8002364:	200001ac 	.word	0x200001ac
 8002368:	200000f0 	.word	0x200000f0
 800236c:	20000000 	.word	0x20000000
 8002370:	20000004 	.word	0x20000004
 8002374:	20000104 	.word	0x20000104
 8002378:	00000000 	.word	0x00000000
 800237c:	3f80a3d7 	.word	0x3f80a3d7
 8002380:	3c1ba5e3 	.word	0x3c1ba5e3
 8002384:	20000154 	.word	0x20000154
 8002388:	37fba882 	.word	0x37fba882
 800238c:	377ba882 	.word	0x377ba882
 8002390:	40133333 	.word	0x40133333
 8002394:	20000180 	.word	0x20000180
 8002398:	200003c8 	.word	0x200003c8
 800239c:	20000460 	.word	0x20000460
 80023a0:	20000588 	.word	0x20000588
 80023a4:	200004f8 	.word	0x200004f8
 80023a8:	20000540 	.word	0x20000540
 80023ac:	200005d0 	.word	0x200005d0

080023b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b094      	sub	sp, #80	; 0x50
 80023b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023b6:	f107 0320 	add.w	r3, r7, #32
 80023ba:	2230      	movs	r2, #48	; 0x30
 80023bc:	2100      	movs	r1, #0
 80023be:	4618      	mov	r0, r3
 80023c0:	f004 f92c 	bl	800661c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023c4:	f107 030c 	add.w	r3, r7, #12
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	60da      	str	r2, [r3, #12]
 80023d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023d4:	2300      	movs	r3, #0
 80023d6:	60bb      	str	r3, [r7, #8]
 80023d8:	4b27      	ldr	r3, [pc, #156]	; (8002478 <SystemClock_Config+0xc8>)
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	4a26      	ldr	r2, [pc, #152]	; (8002478 <SystemClock_Config+0xc8>)
 80023de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e2:	6413      	str	r3, [r2, #64]	; 0x40
 80023e4:	4b24      	ldr	r3, [pc, #144]	; (8002478 <SystemClock_Config+0xc8>)
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023f0:	2300      	movs	r3, #0
 80023f2:	607b      	str	r3, [r7, #4]
 80023f4:	4b21      	ldr	r3, [pc, #132]	; (800247c <SystemClock_Config+0xcc>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a20      	ldr	r2, [pc, #128]	; (800247c <SystemClock_Config+0xcc>)
 80023fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	4b1e      	ldr	r3, [pc, #120]	; (800247c <SystemClock_Config+0xcc>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002408:	607b      	str	r3, [r7, #4]
 800240a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800240c:	2302      	movs	r3, #2
 800240e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002410:	2301      	movs	r3, #1
 8002412:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002414:	2310      	movs	r3, #16
 8002416:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002418:	2302      	movs	r3, #2
 800241a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800241c:	2300      	movs	r3, #0
 800241e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002420:	2308      	movs	r3, #8
 8002422:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002424:	2364      	movs	r3, #100	; 0x64
 8002426:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002428:	2302      	movs	r3, #2
 800242a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800242c:	2304      	movs	r3, #4
 800242e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002430:	f107 0320 	add.w	r3, r7, #32
 8002434:	4618      	mov	r0, r3
 8002436:	f002 f875 	bl	8004524 <HAL_RCC_OscConfig>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002440:	f000 f878 	bl	8002534 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002444:	230f      	movs	r3, #15
 8002446:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002448:	2302      	movs	r3, #2
 800244a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002454:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800245a:	f107 030c 	add.w	r3, r7, #12
 800245e:	2103      	movs	r1, #3
 8002460:	4618      	mov	r0, r3
 8002462:	f002 fad7 	bl	8004a14 <HAL_RCC_ClockConfig>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800246c:	f000 f862 	bl	8002534 <Error_Handler>
  }
}
 8002470:	bf00      	nop
 8002472:	3750      	adds	r7, #80	; 0x50
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40023800 	.word	0x40023800
 800247c:	40007000 	.word	0x40007000

08002480 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a20      	ldr	r2, [pc, #128]	; (800250c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d139      	bne.n	8002504 <HAL_TIM_PeriodElapsedCallback+0x84>
	{
		QEIGetFeedback(&QEIData, 2500);
 8002490:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8002494:	481e      	ldr	r0, [pc, #120]	; (8002510 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002496:	f7ff fb6b 	bl	8001b70 <QEIGetFeedback>
		KF.z = QEIData.QEIVelocity;
 800249a:	4b1d      	ldr	r3, [pc, #116]	; (8002510 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	4a1d      	ldr	r2, [pc, #116]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80024a0:	65d3      	str	r3, [r2, #92]	; 0x5c
		kalman_filter();
 80024a2:	f7fe fe59 	bl	8001158 <kalman_filter>
		ZEstimateVelocity = KF.x_hat[1];
 80024a6:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	4a1b      	ldr	r2, [pc, #108]	; (8002518 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80024ac:	6013      	str	r3, [r2, #0]
		QuinticRun(&QuinticVar,0.0004);
 80024ae:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 800251c <HAL_TIM_PeriodElapsedCallback+0x9c>
 80024b2:	481b      	ldr	r0, [pc, #108]	; (8002520 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80024b4:	f7ff fafc 	bl	8001ab0 <QuinticRun>
		CascadeLoop(&PositionLoop, &VelocityLoop, QEIData.QEIPosition, KF.x_hat[1],&QuinticVar, 3);
 80024b8:	4b15      	ldr	r3, [pc, #84]	; (8002510 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	ee07 3a90 	vmov	s15, r3
 80024c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024c4:	4b13      	ldr	r3, [pc, #76]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80024c6:	ed93 7a01 	vldr	s14, [r3, #4]
 80024ca:	eeb0 1a08 	vmov.f32	s2, #8	; 0x40400000  3.0
 80024ce:	4a14      	ldr	r2, [pc, #80]	; (8002520 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80024d0:	eef0 0a47 	vmov.f32	s1, s14
 80024d4:	eeb0 0a67 	vmov.f32	s0, s15
 80024d8:	4912      	ldr	r1, [pc, #72]	; (8002524 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80024da:	4813      	ldr	r0, [pc, #76]	; (8002528 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80024dc:	f7fe ff81 	bl	80013e2 <CascadeLoop>
//		PIDRun(&PositionLoop, QEIData.QEIPosition, QuinticVar.current_pos);
//		PIDRun(&VelocityLoop, KF.x_hat[1], QuinticVar.current_velo);
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,abs(VelocityLoop.U));
 80024e0:	4b10      	ldr	r3, [pc, #64]	; (8002524 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80024e8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80024ec:	4b0f      	ldr	r3, [pc, #60]	; (800252c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, VelocityLoop.MotorDir);
 80024f2:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80024f4:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	461a      	mov	r2, r3
 80024fc:	2140      	movs	r1, #64	; 0x40
 80024fe:	480c      	ldr	r0, [pc, #48]	; (8002530 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002500:	f001 feb2 	bl	8004268 <HAL_GPIO_WritePin>
	}
}
 8002504:	bf00      	nop
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	20000588 	.word	0x20000588
 8002510:	200000f8 	.word	0x200000f8
 8002514:	200001ac 	.word	0x200001ac
 8002518:	200003c4 	.word	0x200003c4
 800251c:	39d1b717 	.word	0x39d1b717
 8002520:	20000104 	.word	0x20000104
 8002524:	20000180 	.word	0x20000180
 8002528:	20000154 	.word	0x20000154
 800252c:	20000540 	.word	0x20000540
 8002530:	40020800 	.word	0x40020800

08002534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002538:	b672      	cpsid	i
}
 800253a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800253c:	e7fe      	b.n	800253c <Error_Handler+0x8>
	...

08002540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	607b      	str	r3, [r7, #4]
 800254a:	4b10      	ldr	r3, [pc, #64]	; (800258c <HAL_MspInit+0x4c>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	4a0f      	ldr	r2, [pc, #60]	; (800258c <HAL_MspInit+0x4c>)
 8002550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002554:	6453      	str	r3, [r2, #68]	; 0x44
 8002556:	4b0d      	ldr	r3, [pc, #52]	; (800258c <HAL_MspInit+0x4c>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800255e:	607b      	str	r3, [r7, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	603b      	str	r3, [r7, #0]
 8002566:	4b09      	ldr	r3, [pc, #36]	; (800258c <HAL_MspInit+0x4c>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	4a08      	ldr	r2, [pc, #32]	; (800258c <HAL_MspInit+0x4c>)
 800256c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002570:	6413      	str	r3, [r2, #64]	; 0x40
 8002572:	4b06      	ldr	r3, [pc, #24]	; (800258c <HAL_MspInit+0x4c>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257a:	603b      	str	r3, [r7, #0]
 800257c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800257e:	2007      	movs	r0, #7
 8002580:	f001 fcac 	bl	8003edc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002584:	bf00      	nop
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40023800 	.word	0x40023800

08002590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002594:	e7fe      	b.n	8002594 <NMI_Handler+0x4>

08002596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800259a:	e7fe      	b.n	800259a <HardFault_Handler+0x4>

0800259c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025a0:	e7fe      	b.n	80025a0 <MemManage_Handler+0x4>

080025a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025a6:	e7fe      	b.n	80025a6 <BusFault_Handler+0x4>

080025a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025ac:	e7fe      	b.n	80025ac <UsageFault_Handler+0x4>

080025ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025ae:	b480      	push	{r7}
 80025b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025ca:	b480      	push	{r7}
 80025cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025dc:	f001 fb8e 	bl	8003cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025e0:	bf00      	nop
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025e8:	4802      	ldr	r0, [pc, #8]	; (80025f4 <TIM2_IRQHandler+0x10>)
 80025ea:	f002 ff23 	bl	8005434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	200004f8 	.word	0x200004f8

080025f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025fc:	4802      	ldr	r0, [pc, #8]	; (8002608 <TIM3_IRQHandler+0x10>)
 80025fe:	f002 ff19 	bl	8005434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000540 	.word	0x20000540

0800260c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002610:	4802      	ldr	r0, [pc, #8]	; (800261c <TIM4_IRQHandler+0x10>)
 8002612:	f002 ff0f 	bl	8005434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20000588 	.word	0x20000588

08002620 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <SystemInit+0x20>)
 8002626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262a:	4a05      	ldr	r2, [pc, #20]	; (8002640 <SystemInit+0x20>)
 800262c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002630:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08c      	sub	sp, #48	; 0x30
 8002648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800264a:	f107 030c 	add.w	r3, r7, #12
 800264e:	2224      	movs	r2, #36	; 0x24
 8002650:	2100      	movs	r1, #0
 8002652:	4618      	mov	r0, r3
 8002654:	f003 ffe2 	bl	800661c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002658:	1d3b      	adds	r3, r7, #4
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002660:	4b21      	ldr	r3, [pc, #132]	; (80026e8 <MX_TIM2_Init+0xa4>)
 8002662:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002666:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002668:	4b1f      	ldr	r3, [pc, #124]	; (80026e8 <MX_TIM2_Init+0xa4>)
 800266a:	2200      	movs	r2, #0
 800266c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800266e:	4b1e      	ldr	r3, [pc, #120]	; (80026e8 <MX_TIM2_Init+0xa4>)
 8002670:	2200      	movs	r2, #0
 8002672:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002674:	4b1c      	ldr	r3, [pc, #112]	; (80026e8 <MX_TIM2_Init+0xa4>)
 8002676:	f04f 32ff 	mov.w	r2, #4294967295
 800267a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800267c:	4b1a      	ldr	r3, [pc, #104]	; (80026e8 <MX_TIM2_Init+0xa4>)
 800267e:	2200      	movs	r2, #0
 8002680:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002682:	4b19      	ldr	r3, [pc, #100]	; (80026e8 <MX_TIM2_Init+0xa4>)
 8002684:	2200      	movs	r2, #0
 8002686:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002688:	2303      	movs	r3, #3
 800268a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800268c:	2300      	movs	r3, #0
 800268e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002690:	2301      	movs	r3, #1
 8002692:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002694:	2300      	movs	r3, #0
 8002696:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002698:	2300      	movs	r3, #0
 800269a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800269c:	2300      	movs	r3, #0
 800269e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026a0:	2301      	movs	r3, #1
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026a4:	2300      	movs	r3, #0
 80026a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80026a8:	2300      	movs	r3, #0
 80026aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80026ac:	f107 030c 	add.w	r3, r7, #12
 80026b0:	4619      	mov	r1, r3
 80026b2:	480d      	ldr	r0, [pc, #52]	; (80026e8 <MX_TIM2_Init+0xa4>)
 80026b4:	f002 fd8a 	bl	80051cc <HAL_TIM_Encoder_Init>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80026be:	f7ff ff39 	bl	8002534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026c2:	2300      	movs	r3, #0
 80026c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026c6:	2300      	movs	r3, #0
 80026c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026ca:	1d3b      	adds	r3, r7, #4
 80026cc:	4619      	mov	r1, r3
 80026ce:	4806      	ldr	r0, [pc, #24]	; (80026e8 <MX_TIM2_Init+0xa4>)
 80026d0:	f003 fc36 	bl	8005f40 <HAL_TIMEx_MasterConfigSynchronization>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80026da:	f7ff ff2b 	bl	8002534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80026de:	bf00      	nop
 80026e0:	3730      	adds	r7, #48	; 0x30
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	200004f8 	.word	0x200004f8

080026ec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08e      	sub	sp, #56	; 0x38
 80026f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	605a      	str	r2, [r3, #4]
 80026fc:	609a      	str	r2, [r3, #8]
 80026fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002700:	f107 0320 	add.w	r3, r7, #32
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800270a:	1d3b      	adds	r3, r7, #4
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	611a      	str	r2, [r3, #16]
 8002718:	615a      	str	r2, [r3, #20]
 800271a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800271c:	4b2c      	ldr	r3, [pc, #176]	; (80027d0 <MX_TIM3_Init+0xe4>)
 800271e:	4a2d      	ldr	r2, [pc, #180]	; (80027d4 <MX_TIM3_Init+0xe8>)
 8002720:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002722:	4b2b      	ldr	r3, [pc, #172]	; (80027d0 <MX_TIM3_Init+0xe4>)
 8002724:	2200      	movs	r2, #0
 8002726:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002728:	4b29      	ldr	r3, [pc, #164]	; (80027d0 <MX_TIM3_Init+0xe4>)
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 800272e:	4b28      	ldr	r3, [pc, #160]	; (80027d0 <MX_TIM3_Init+0xe4>)
 8002730:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002734:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002736:	4b26      	ldr	r3, [pc, #152]	; (80027d0 <MX_TIM3_Init+0xe4>)
 8002738:	2200      	movs	r2, #0
 800273a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800273c:	4b24      	ldr	r3, [pc, #144]	; (80027d0 <MX_TIM3_Init+0xe4>)
 800273e:	2200      	movs	r2, #0
 8002740:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002742:	4823      	ldr	r0, [pc, #140]	; (80027d0 <MX_TIM3_Init+0xe4>)
 8002744:	f002 fb86 	bl	8004e54 <HAL_TIM_Base_Init>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800274e:	f7ff fef1 	bl	8002534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002756:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002758:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800275c:	4619      	mov	r1, r3
 800275e:	481c      	ldr	r0, [pc, #112]	; (80027d0 <MX_TIM3_Init+0xe4>)
 8002760:	f003 f832 	bl	80057c8 <HAL_TIM_ConfigClockSource>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800276a:	f7ff fee3 	bl	8002534 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800276e:	4818      	ldr	r0, [pc, #96]	; (80027d0 <MX_TIM3_Init+0xe4>)
 8002770:	f002 fc22 	bl	8004fb8 <HAL_TIM_PWM_Init>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800277a:	f7ff fedb 	bl	8002534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800277e:	2300      	movs	r3, #0
 8002780:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002782:	2300      	movs	r3, #0
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002786:	f107 0320 	add.w	r3, r7, #32
 800278a:	4619      	mov	r1, r3
 800278c:	4810      	ldr	r0, [pc, #64]	; (80027d0 <MX_TIM3_Init+0xe4>)
 800278e:	f003 fbd7 	bl	8005f40 <HAL_TIMEx_MasterConfigSynchronization>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002798:	f7ff fecc 	bl	8002534 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800279c:	2360      	movs	r3, #96	; 0x60
 800279e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80027ac:	1d3b      	adds	r3, r7, #4
 80027ae:	2208      	movs	r2, #8
 80027b0:	4619      	mov	r1, r3
 80027b2:	4807      	ldr	r0, [pc, #28]	; (80027d0 <MX_TIM3_Init+0xe4>)
 80027b4:	f002 ff46 	bl	8005644 <HAL_TIM_PWM_ConfigChannel>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80027be:	f7ff feb9 	bl	8002534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80027c2:	4803      	ldr	r0, [pc, #12]	; (80027d0 <MX_TIM3_Init+0xe4>)
 80027c4:	f000 f94e 	bl	8002a64 <HAL_TIM_MspPostInit>

}
 80027c8:	bf00      	nop
 80027ca:	3738      	adds	r7, #56	; 0x38
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20000540 	.word	0x20000540
 80027d4:	40000400 	.word	0x40000400

080027d8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027de:	f107 0308 	add.w	r3, r7, #8
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	605a      	str	r2, [r3, #4]
 80027e8:	609a      	str	r2, [r3, #8]
 80027ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ec:	463b      	mov	r3, r7
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80027f4:	4b1d      	ldr	r3, [pc, #116]	; (800286c <MX_TIM4_Init+0x94>)
 80027f6:	4a1e      	ldr	r2, [pc, #120]	; (8002870 <MX_TIM4_Init+0x98>)
 80027f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 80027fa:	4b1c      	ldr	r3, [pc, #112]	; (800286c <MX_TIM4_Init+0x94>)
 80027fc:	2263      	movs	r2, #99	; 0x63
 80027fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002800:	4b1a      	ldr	r3, [pc, #104]	; (800286c <MX_TIM4_Init+0x94>)
 8002802:	2200      	movs	r2, #0
 8002804:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 399;
 8002806:	4b19      	ldr	r3, [pc, #100]	; (800286c <MX_TIM4_Init+0x94>)
 8002808:	f240 128f 	movw	r2, #399	; 0x18f
 800280c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800280e:	4b17      	ldr	r3, [pc, #92]	; (800286c <MX_TIM4_Init+0x94>)
 8002810:	2200      	movs	r2, #0
 8002812:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002814:	4b15      	ldr	r3, [pc, #84]	; (800286c <MX_TIM4_Init+0x94>)
 8002816:	2200      	movs	r2, #0
 8002818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800281a:	4814      	ldr	r0, [pc, #80]	; (800286c <MX_TIM4_Init+0x94>)
 800281c:	f002 fb1a 	bl	8004e54 <HAL_TIM_Base_Init>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002826:	f7ff fe85 	bl	8002534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800282a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800282e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002830:	f107 0308 	add.w	r3, r7, #8
 8002834:	4619      	mov	r1, r3
 8002836:	480d      	ldr	r0, [pc, #52]	; (800286c <MX_TIM4_Init+0x94>)
 8002838:	f002 ffc6 	bl	80057c8 <HAL_TIM_ConfigClockSource>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002842:	f7ff fe77 	bl	8002534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002846:	2300      	movs	r3, #0
 8002848:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800284a:	2300      	movs	r3, #0
 800284c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800284e:	463b      	mov	r3, r7
 8002850:	4619      	mov	r1, r3
 8002852:	4806      	ldr	r0, [pc, #24]	; (800286c <MX_TIM4_Init+0x94>)
 8002854:	f003 fb74 	bl	8005f40 <HAL_TIMEx_MasterConfigSynchronization>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800285e:	f7ff fe69 	bl	8002534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002862:	bf00      	nop
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20000588 	.word	0x20000588
 8002870:	40000800 	.word	0x40000800

08002874 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800287a:	f107 0308 	add.w	r3, r7, #8
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	605a      	str	r2, [r3, #4]
 8002884:	609a      	str	r2, [r3, #8]
 8002886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002888:	463b      	mov	r3, r7
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002890:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <MX_TIM5_Init+0x94>)
 8002892:	4a1e      	ldr	r2, [pc, #120]	; (800290c <MX_TIM5_Init+0x98>)
 8002894:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8002896:	4b1c      	ldr	r3, [pc, #112]	; (8002908 <MX_TIM5_Init+0x94>)
 8002898:	2253      	movs	r2, #83	; 0x53
 800289a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800289c:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <MX_TIM5_Init+0x94>)
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80028a2:	4b19      	ldr	r3, [pc, #100]	; (8002908 <MX_TIM5_Init+0x94>)
 80028a4:	f04f 32ff 	mov.w	r2, #4294967295
 80028a8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028aa:	4b17      	ldr	r3, [pc, #92]	; (8002908 <MX_TIM5_Init+0x94>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028b0:	4b15      	ldr	r3, [pc, #84]	; (8002908 <MX_TIM5_Init+0x94>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80028b6:	4814      	ldr	r0, [pc, #80]	; (8002908 <MX_TIM5_Init+0x94>)
 80028b8:	f002 facc 	bl	8004e54 <HAL_TIM_Base_Init>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80028c2:	f7ff fe37 	bl	8002534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80028cc:	f107 0308 	add.w	r3, r7, #8
 80028d0:	4619      	mov	r1, r3
 80028d2:	480d      	ldr	r0, [pc, #52]	; (8002908 <MX_TIM5_Init+0x94>)
 80028d4:	f002 ff78 	bl	80057c8 <HAL_TIM_ConfigClockSource>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80028de:	f7ff fe29 	bl	8002534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028e2:	2300      	movs	r3, #0
 80028e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80028ea:	463b      	mov	r3, r7
 80028ec:	4619      	mov	r1, r3
 80028ee:	4806      	ldr	r0, [pc, #24]	; (8002908 <MX_TIM5_Init+0x94>)
 80028f0:	f003 fb26 	bl	8005f40 <HAL_TIMEx_MasterConfigSynchronization>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80028fa:	f7ff fe1b 	bl	8002534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80028fe:	bf00      	nop
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	200005d0 	.word	0x200005d0
 800290c:	40000c00 	.word	0x40000c00

08002910 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b08a      	sub	sp, #40	; 0x28
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002918:	f107 0314 	add.w	r3, r7, #20
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	60da      	str	r2, [r3, #12]
 8002926:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002930:	d133      	bne.n	800299a <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <HAL_TIM_Encoder_MspInit+0x94>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	4a1a      	ldr	r2, [pc, #104]	; (80029a4 <HAL_TIM_Encoder_MspInit+0x94>)
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	6413      	str	r3, [r2, #64]	; 0x40
 8002942:	4b18      	ldr	r3, [pc, #96]	; (80029a4 <HAL_TIM_Encoder_MspInit+0x94>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	613b      	str	r3, [r7, #16]
 800294c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	4b14      	ldr	r3, [pc, #80]	; (80029a4 <HAL_TIM_Encoder_MspInit+0x94>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	4a13      	ldr	r2, [pc, #76]	; (80029a4 <HAL_TIM_Encoder_MspInit+0x94>)
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	6313      	str	r3, [r2, #48]	; 0x30
 800295e:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <HAL_TIM_Encoder_MspInit+0x94>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800296a:	2303      	movs	r3, #3
 800296c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296e:	2302      	movs	r3, #2
 8002970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002972:	2300      	movs	r3, #0
 8002974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002976:	2300      	movs	r3, #0
 8002978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800297a:	2301      	movs	r3, #1
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297e:	f107 0314 	add.w	r3, r7, #20
 8002982:	4619      	mov	r1, r3
 8002984:	4808      	ldr	r0, [pc, #32]	; (80029a8 <HAL_TIM_Encoder_MspInit+0x98>)
 8002986:	f001 faeb 	bl	8003f60 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800298a:	2200      	movs	r2, #0
 800298c:	2100      	movs	r1, #0
 800298e:	201c      	movs	r0, #28
 8002990:	f001 faaf 	bl	8003ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002994:	201c      	movs	r0, #28
 8002996:	f001 fac8 	bl	8003f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800299a:	bf00      	nop
 800299c:	3728      	adds	r7, #40	; 0x28
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40020000 	.word	0x40020000

080029ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a26      	ldr	r2, [pc, #152]	; (8002a54 <HAL_TIM_Base_MspInit+0xa8>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d116      	bne.n	80029ec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	4b25      	ldr	r3, [pc, #148]	; (8002a58 <HAL_TIM_Base_MspInit+0xac>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	4a24      	ldr	r2, [pc, #144]	; (8002a58 <HAL_TIM_Base_MspInit+0xac>)
 80029c8:	f043 0302 	orr.w	r3, r3, #2
 80029cc:	6413      	str	r3, [r2, #64]	; 0x40
 80029ce:	4b22      	ldr	r3, [pc, #136]	; (8002a58 <HAL_TIM_Base_MspInit+0xac>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	617b      	str	r3, [r7, #20]
 80029d8:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80029da:	2200      	movs	r2, #0
 80029dc:	2100      	movs	r1, #0
 80029de:	201d      	movs	r0, #29
 80029e0:	f001 fa87 	bl	8003ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80029e4:	201d      	movs	r0, #29
 80029e6:	f001 faa0 	bl	8003f2a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80029ea:	e02e      	b.n	8002a4a <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM4)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a1a      	ldr	r2, [pc, #104]	; (8002a5c <HAL_TIM_Base_MspInit+0xb0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d116      	bne.n	8002a24 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	4b17      	ldr	r3, [pc, #92]	; (8002a58 <HAL_TIM_Base_MspInit+0xac>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	4a16      	ldr	r2, [pc, #88]	; (8002a58 <HAL_TIM_Base_MspInit+0xac>)
 8002a00:	f043 0304 	orr.w	r3, r3, #4
 8002a04:	6413      	str	r3, [r2, #64]	; 0x40
 8002a06:	4b14      	ldr	r3, [pc, #80]	; (8002a58 <HAL_TIM_Base_MspInit+0xac>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002a12:	2200      	movs	r2, #0
 8002a14:	2100      	movs	r1, #0
 8002a16:	201e      	movs	r0, #30
 8002a18:	f001 fa6b 	bl	8003ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002a1c:	201e      	movs	r0, #30
 8002a1e:	f001 fa84 	bl	8003f2a <HAL_NVIC_EnableIRQ>
}
 8002a22:	e012      	b.n	8002a4a <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM5)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a0d      	ldr	r2, [pc, #52]	; (8002a60 <HAL_TIM_Base_MspInit+0xb4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d10d      	bne.n	8002a4a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <HAL_TIM_Base_MspInit+0xac>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	4a08      	ldr	r2, [pc, #32]	; (8002a58 <HAL_TIM_Base_MspInit+0xac>)
 8002a38:	f043 0308 	orr.w	r3, r3, #8
 8002a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3e:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <HAL_TIM_Base_MspInit+0xac>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
}
 8002a4a:	bf00      	nop
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40000400 	.word	0x40000400
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40000800 	.word	0x40000800
 8002a60:	40000c00 	.word	0x40000c00

08002a64 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6c:	f107 030c 	add.w	r3, r7, #12
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	60da      	str	r2, [r3, #12]
 8002a7a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a12      	ldr	r2, [pc, #72]	; (8002acc <HAL_TIM_MspPostInit+0x68>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d11e      	bne.n	8002ac4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	60bb      	str	r3, [r7, #8]
 8002a8a:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <HAL_TIM_MspPostInit+0x6c>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	4a10      	ldr	r2, [pc, #64]	; (8002ad0 <HAL_TIM_MspPostInit+0x6c>)
 8002a90:	f043 0304 	orr.w	r3, r3, #4
 8002a94:	6313      	str	r3, [r2, #48]	; 0x30
 8002a96:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <HAL_TIM_MspPostInit+0x6c>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	60bb      	str	r3, [r7, #8]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002aa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aa6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ab8:	f107 030c 	add.w	r3, r7, #12
 8002abc:	4619      	mov	r1, r3
 8002abe:	4805      	ldr	r0, [pc, #20]	; (8002ad4 <HAL_TIM_MspPostInit+0x70>)
 8002ac0:	f001 fa4e 	bl	8003f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002ac4:	bf00      	nop
 8002ac6:	3720      	adds	r7, #32
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40000400 	.word	0x40000400
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	40020800 	.word	0x40020800

08002ad8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002adc:	4b11      	ldr	r3, [pc, #68]	; (8002b24 <MX_USART2_UART_Init+0x4c>)
 8002ade:	4a12      	ldr	r2, [pc, #72]	; (8002b28 <MX_USART2_UART_Init+0x50>)
 8002ae0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ae2:	4b10      	ldr	r3, [pc, #64]	; (8002b24 <MX_USART2_UART_Init+0x4c>)
 8002ae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ae8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002aea:	4b0e      	ldr	r3, [pc, #56]	; (8002b24 <MX_USART2_UART_Init+0x4c>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002af0:	4b0c      	ldr	r3, [pc, #48]	; (8002b24 <MX_USART2_UART_Init+0x4c>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002af6:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <MX_USART2_UART_Init+0x4c>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002afc:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <MX_USART2_UART_Init+0x4c>)
 8002afe:	220c      	movs	r2, #12
 8002b00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b02:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <MX_USART2_UART_Init+0x4c>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b08:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <MX_USART2_UART_Init+0x4c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b0e:	4805      	ldr	r0, [pc, #20]	; (8002b24 <MX_USART2_UART_Init+0x4c>)
 8002b10:	f003 fa98 	bl	8006044 <HAL_UART_Init>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002b1a:	f7ff fd0b 	bl	8002534 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	20000618 	.word	0x20000618
 8002b28:	40004400 	.word	0x40004400

08002b2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08a      	sub	sp, #40	; 0x28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b34:	f107 0314 	add.w	r3, r7, #20
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	605a      	str	r2, [r3, #4]
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	60da      	str	r2, [r3, #12]
 8002b42:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a19      	ldr	r2, [pc, #100]	; (8002bb0 <HAL_UART_MspInit+0x84>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d12b      	bne.n	8002ba6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	613b      	str	r3, [r7, #16]
 8002b52:	4b18      	ldr	r3, [pc, #96]	; (8002bb4 <HAL_UART_MspInit+0x88>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	4a17      	ldr	r2, [pc, #92]	; (8002bb4 <HAL_UART_MspInit+0x88>)
 8002b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b5e:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <HAL_UART_MspInit+0x88>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <HAL_UART_MspInit+0x88>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	4a10      	ldr	r2, [pc, #64]	; (8002bb4 <HAL_UART_MspInit+0x88>)
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7a:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <HAL_UART_MspInit+0x88>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b86:	230c      	movs	r3, #12
 8002b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b92:	2303      	movs	r3, #3
 8002b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b96:	2307      	movs	r3, #7
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9a:	f107 0314 	add.w	r3, r7, #20
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4805      	ldr	r0, [pc, #20]	; (8002bb8 <HAL_UART_MspInit+0x8c>)
 8002ba2:	f001 f9dd 	bl	8003f60 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002ba6:	bf00      	nop
 8002ba8:	3728      	adds	r7, #40	; 0x28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40004400 	.word	0x40004400
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	40020000 	.word	0x40020000

08002bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bf4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bc0:	480d      	ldr	r0, [pc, #52]	; (8002bf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bc2:	490e      	ldr	r1, [pc, #56]	; (8002bfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bc4:	4a0e      	ldr	r2, [pc, #56]	; (8002c00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bc8:	e002      	b.n	8002bd0 <LoopCopyDataInit>

08002bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bce:	3304      	adds	r3, #4

08002bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bd4:	d3f9      	bcc.n	8002bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bd6:	4a0b      	ldr	r2, [pc, #44]	; (8002c04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bd8:	4c0b      	ldr	r4, [pc, #44]	; (8002c08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bdc:	e001      	b.n	8002be2 <LoopFillZerobss>

08002bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002be0:	3204      	adds	r2, #4

08002be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002be4:	d3fb      	bcc.n	8002bde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002be6:	f7ff fd1b 	bl	8002620 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bea:	f003 fcf3 	bl	80065d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bee:	f7ff fb3d 	bl	800226c <main>
  bx  lr    
 8002bf2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bfc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002c00:	080085c0 	.word	0x080085c0
  ldr r2, =_sbss
 8002c04:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002c08:	20000660 	.word	0x20000660

08002c0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c0c:	e7fe      	b.n	8002c0c <ADC_IRQHandler>
	...

08002c10 <arm_atan2_f32>:
                   and compute the right angle.
*/


arm_status arm_atan2_f32(float32_t y,float32_t x,float32_t *result)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b0a1      	sub	sp, #132	; 0x84
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	ed87 0a03 	vstr	s0, [r7, #12]
 8002c1a:	edc7 0a02 	vstr	s1, [r7, #8]
 8002c1e:	6078      	str	r0, [r7, #4]
    if (x > 0.0f)
 8002c20:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c2c:	f340 808e 	ble.w	8002d4c <arm_atan2_f32+0x13c>
    {
        *result=arm_atan_f32(y/x);
 8002c30:	edd7 6a03 	vldr	s13, [r7, #12]
 8002c34:	ed97 7a02 	vldr	s14, [r7, #8]
 8002c38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c3c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
   int sign=0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	67bb      	str	r3, [r7, #120]	; 0x78
   float32_t res=0.0f;
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	677b      	str	r3, [r7, #116]	; 0x74
   if (x < 0.0f)
 8002c4a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002c4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c56:	d507      	bpl.n	8002c68 <arm_atan2_f32+0x58>
      sign=1;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	67bb      	str	r3, [r7, #120]	; 0x78
      x=-x;
 8002c5c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002c60:	eef1 7a67 	vneg.f32	s15, s15
 8002c64:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
   if (x > 1.0f)
 8002c68:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002c6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c78:	dd31      	ble.n	8002cde <arm_atan2_f32+0xce>
      x = 1.0f / x;
 8002c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c7e:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002c82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c86:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
 8002c8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c8c:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8002c8e:	4bb5      	ldr	r3, [pc, #724]	; (8002f64 <arm_atan2_f32+0x354>)
 8002c90:	66fb      	str	r3, [r7, #108]	; 0x6c
    int i=1;
 8002c92:	2301      	movs	r3, #1
 8002c94:	66bb      	str	r3, [r7, #104]	; 0x68
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002c96:	2301      	movs	r3, #1
 8002c98:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c9a:	e014      	b.n	8002cc6 <arm_atan2_f32+0xb6>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8002c9c:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002ca0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002ca4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ca8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002caa:	f1c3 0309 	rsb	r3, r3, #9
 8002cae:	4aae      	ldr	r2, [pc, #696]	; (8002f68 <arm_atan2_f32+0x358>)
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	edd3 7a00 	vldr	s15, [r3]
 8002cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cbc:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002cc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cc8:	2b09      	cmp	r3, #9
 8002cca:	dde7      	ble.n	8002c9c <arm_atan2_f32+0x8c>
    return(res);
 8002ccc:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8002cd0:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002f6c <arm_atan2_f32+0x35c>
 8002cd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cd8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
 8002cdc:	e028      	b.n	8002d30 <arm_atan2_f32+0x120>
 8002cde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ce0:	667b      	str	r3, [r7, #100]	; 0x64
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8002ce2:	4ba0      	ldr	r3, [pc, #640]	; (8002f64 <arm_atan2_f32+0x354>)
 8002ce4:	663b      	str	r3, [r7, #96]	; 0x60
    int i=1;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002cea:	2301      	movs	r3, #1
 8002cec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cee:	e014      	b.n	8002d1a <arm_atan2_f32+0x10a>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8002cf0:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002cf4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002cf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cfe:	f1c3 0309 	rsb	r3, r3, #9
 8002d02:	4a99      	ldr	r2, [pc, #612]	; (8002f68 <arm_atan2_f32+0x358>)
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	edd3 7a00 	vldr	s15, [r3]
 8002d0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d10:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002d14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d16:	3301      	adds	r3, #1
 8002d18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d1c:	2b09      	cmp	r3, #9
 8002d1e:	dde7      	ble.n	8002cf0 <arm_atan2_f32+0xe0>
    return(res);
 8002d20:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
     res += arm_atan_limited_f32(x);
 8002d24:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002d28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d2c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
   if (sign)
 8002d30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d005      	beq.n	8002d42 <arm_atan2_f32+0x132>
     res = -res;
 8002d36:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002d3a:	eef1 7a67 	vneg.f32	s15, s15
 8002d3e:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
   return(res);
 8002d42:	6f7a      	ldr	r2, [r7, #116]	; 0x74
        *result=arm_atan_f32(y/x);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	601a      	str	r2, [r3, #0]
        return(ARM_MATH_SUCCESS);
 8002d48:	2300      	movs	r3, #0
 8002d4a:	e175      	b.n	8003038 <arm_atan2_f32+0x428>
    }
    if (x < 0.0f)
 8002d4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d58:	f140 814d 	bpl.w	8002ff6 <arm_atan2_f32+0x3e6>
    {
        if (y > 0.0f)
 8002d5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d68:	f340 8093 	ble.w	8002e92 <arm_atan2_f32+0x282>
        {
           *result=arm_atan_f32(y/x) + PI;
 8002d6c:	edd7 6a03 	vldr	s13, [r7, #12]
 8002d70:	ed97 7a02 	vldr	s14, [r7, #8]
 8002d74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d78:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
   int sign=0;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	657b      	str	r3, [r7, #84]	; 0x54
   float32_t res=0.0f;
 8002d80:	f04f 0300 	mov.w	r3, #0
 8002d84:	653b      	str	r3, [r7, #80]	; 0x50
   if (x < 0.0f)
 8002d86:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002d8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d92:	d507      	bpl.n	8002da4 <arm_atan2_f32+0x194>
      sign=1;
 8002d94:	2301      	movs	r3, #1
 8002d96:	657b      	str	r3, [r7, #84]	; 0x54
      x=-x;
 8002d98:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002d9c:	eef1 7a67 	vneg.f32	s15, s15
 8002da0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
   if (x > 1.0f)
 8002da4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002da8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002dac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db4:	dd31      	ble.n	8002e1a <arm_atan2_f32+0x20a>
      x = 1.0f / x;
 8002db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dba:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002dbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dc2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8002dc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8002dca:	4b66      	ldr	r3, [pc, #408]	; (8002f64 <arm_atan2_f32+0x354>)
 8002dcc:	64bb      	str	r3, [r7, #72]	; 0x48
    int i=1;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	647b      	str	r3, [r7, #68]	; 0x44
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	647b      	str	r3, [r7, #68]	; 0x44
 8002dd6:	e014      	b.n	8002e02 <arm_atan2_f32+0x1f2>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8002dd8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002ddc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002de0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002de6:	f1c3 0309 	rsb	r3, r3, #9
 8002dea:	4a5f      	ldr	r2, [pc, #380]	; (8002f68 <arm_atan2_f32+0x358>)
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	edd3 7a00 	vldr	s15, [r3]
 8002df4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002dfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dfe:	3301      	adds	r3, #1
 8002e00:	647b      	str	r3, [r7, #68]	; 0x44
 8002e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e04:	2b09      	cmp	r3, #9
 8002e06:	dde7      	ble.n	8002dd8 <arm_atan2_f32+0x1c8>
    return(res);
 8002e08:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8002e0c:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8002f6c <arm_atan2_f32+0x35c>
 8002e10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e14:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8002e18:	e028      	b.n	8002e6c <arm_atan2_f32+0x25c>
 8002e1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e1c:	643b      	str	r3, [r7, #64]	; 0x40
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8002e1e:	4b51      	ldr	r3, [pc, #324]	; (8002f64 <arm_atan2_f32+0x354>)
 8002e20:	63fb      	str	r3, [r7, #60]	; 0x3c
    int i=1;
 8002e22:	2301      	movs	r3, #1
 8002e24:	63bb      	str	r3, [r7, #56]	; 0x38
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002e26:	2301      	movs	r3, #1
 8002e28:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e2a:	e014      	b.n	8002e56 <arm_atan2_f32+0x246>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8002e2c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002e30:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002e34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3a:	f1c3 0309 	rsb	r3, r3, #9
 8002e3e:	4a4a      	ldr	r2, [pc, #296]	; (8002f68 <arm_atan2_f32+0x358>)
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	edd3 7a00 	vldr	s15, [r3]
 8002e48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e4c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e52:	3301      	adds	r3, #1
 8002e54:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e58:	2b09      	cmp	r3, #9
 8002e5a:	dde7      	ble.n	8002e2c <arm_atan2_f32+0x21c>
    return(res);
 8002e5c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
     res += arm_atan_limited_f32(x);
 8002e60:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002e64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e68:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
   if (sign)
 8002e6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d005      	beq.n	8002e7e <arm_atan2_f32+0x26e>
     res = -res;
 8002e72:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002e76:	eef1 7a67 	vneg.f32	s15, s15
 8002e7a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
   return(res);
 8002e7e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
           *result=arm_atan_f32(y/x) + PI;
 8002e82:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002f70 <arm_atan2_f32+0x360>
 8002e86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	edc3 7a00 	vstr	s15, [r3]
 8002e90:	e0af      	b.n	8002ff2 <arm_atan2_f32+0x3e2>
        }
        else if (y < 0.0f)
 8002e92:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e9e:	f140 809c 	bpl.w	8002fda <arm_atan2_f32+0x3ca>
        {
           *result=arm_atan_f32(y/x) - PI;
 8002ea2:	edd7 6a03 	vldr	s13, [r7, #12]
 8002ea6:	ed97 7a02 	vldr	s14, [r7, #8]
 8002eaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002eae:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
   int sign=0;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	633b      	str	r3, [r7, #48]	; 0x30
   float32_t res=0.0f;
 8002eb6:	f04f 0300 	mov.w	r3, #0
 8002eba:	62fb      	str	r3, [r7, #44]	; 0x2c
   if (x < 0.0f)
 8002ebc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002ec0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec8:	d507      	bpl.n	8002eda <arm_atan2_f32+0x2ca>
      sign=1;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	633b      	str	r3, [r7, #48]	; 0x30
      x=-x;
 8002ece:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002ed2:	eef1 7a67 	vneg.f32	s15, s15
 8002ed6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
   if (x > 1.0f)
 8002eda:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002ede:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ee2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eea:	dd31      	ble.n	8002f50 <arm_atan2_f32+0x340>
      x = 1.0f / x;
 8002eec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ef0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002ef4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ef8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8002efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002efe:	62bb      	str	r3, [r7, #40]	; 0x28
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8002f00:	4b18      	ldr	r3, [pc, #96]	; (8002f64 <arm_atan2_f32+0x354>)
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24
    int i=1;
 8002f04:	2301      	movs	r3, #1
 8002f06:	623b      	str	r3, [r7, #32]
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002f08:	2301      	movs	r3, #1
 8002f0a:	623b      	str	r3, [r7, #32]
 8002f0c:	e014      	b.n	8002f38 <arm_atan2_f32+0x328>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8002f0e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002f12:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002f16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	f1c3 0309 	rsb	r3, r3, #9
 8002f20:	4a11      	ldr	r2, [pc, #68]	; (8002f68 <arm_atan2_f32+0x358>)
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	edd3 7a00 	vldr	s15, [r3]
 8002f2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f2e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	3301      	adds	r3, #1
 8002f36:	623b      	str	r3, [r7, #32]
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	2b09      	cmp	r3, #9
 8002f3c:	dde7      	ble.n	8002f0e <arm_atan2_f32+0x2fe>
    return(res);
 8002f3e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8002f42:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002f6c <arm_atan2_f32+0x35c>
 8002f46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f4a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8002f4e:	e031      	b.n	8002fb4 <arm_atan2_f32+0x3a4>
 8002f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f52:	61fb      	str	r3, [r7, #28]
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8002f54:	4b03      	ldr	r3, [pc, #12]	; (8002f64 <arm_atan2_f32+0x354>)
 8002f56:	61bb      	str	r3, [r7, #24]
    int i=1;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	617b      	str	r3, [r7, #20]
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	e01d      	b.n	8002f9e <arm_atan2_f32+0x38e>
 8002f62:	bf00      	nop
 8002f64:	bd0492a5 	.word	0xbd0492a5
 8002f68:	08008540 	.word	0x08008540
 8002f6c:	3fc90fdb 	.word	0x3fc90fdb
 8002f70:	40490fdb 	.word	0x40490fdb
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8002f74:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f78:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f1c3 0309 	rsb	r3, r3, #9
 8002f86:	4a2f      	ldr	r2, [pc, #188]	; (8003044 <arm_atan2_f32+0x434>)
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	edd3 7a00 	vldr	s15, [r3]
 8002f90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f94:	edc7 7a06 	vstr	s15, [r7, #24]
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2b09      	cmp	r3, #9
 8002fa2:	dde7      	ble.n	8002f74 <arm_atan2_f32+0x364>
    return(res);
 8002fa4:	edd7 7a06 	vldr	s15, [r7, #24]
     res += arm_atan_limited_f32(x);
 8002fa8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002fac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fb0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
   if (sign)
 8002fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d005      	beq.n	8002fc6 <arm_atan2_f32+0x3b6>
     res = -res;
 8002fba:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002fbe:	eef1 7a67 	vneg.f32	s15, s15
 8002fc2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
   return(res);
 8002fc6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
           *result=arm_atan_f32(y/x) - PI;
 8002fca:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003048 <arm_atan2_f32+0x438>
 8002fce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	edc3 7a00 	vstr	s15, [r3]
 8002fd8:	e00b      	b.n	8002ff2 <arm_atan2_f32+0x3e2>
        }
        else
        {
            if (signbit(y))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d003      	beq.n	8002fec <arm_atan2_f32+0x3dc>
            {
               *result= -PI;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a19      	ldr	r2, [pc, #100]	; (800304c <arm_atan2_f32+0x43c>)
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	e002      	b.n	8002ff2 <arm_atan2_f32+0x3e2>
            }
            else
            {
               *result= PI;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a18      	ldr	r2, [pc, #96]	; (8003050 <arm_atan2_f32+0x440>)
 8002ff0:	601a      	str	r2, [r3, #0]
            }
        }
        return(ARM_MATH_SUCCESS);
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	e020      	b.n	8003038 <arm_atan2_f32+0x428>
    }
    if (x == 0.0f)
 8002ff6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ffa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003002:	d117      	bne.n	8003034 <arm_atan2_f32+0x424>
    {
        if (y > 0.0f)
 8003004:	edd7 7a03 	vldr	s15, [r7, #12]
 8003008:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800300c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003010:	dd04      	ble.n	800301c <arm_atan2_f32+0x40c>
        {
            *result=PIHALFF32;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a0f      	ldr	r2, [pc, #60]	; (8003054 <arm_atan2_f32+0x444>)
 8003016:	601a      	str	r2, [r3, #0]
            return(ARM_MATH_SUCCESS);
 8003018:	2300      	movs	r3, #0
 800301a:	e00d      	b.n	8003038 <arm_atan2_f32+0x428>
        }
        if (y < 0.0f)
 800301c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003020:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003028:	d504      	bpl.n	8003034 <arm_atan2_f32+0x424>
        {
            *result=-PIHALFF32;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a0a      	ldr	r2, [pc, #40]	; (8003058 <arm_atan2_f32+0x448>)
 800302e:	601a      	str	r2, [r3, #0]
            return(ARM_MATH_SUCCESS);
 8003030:	2300      	movs	r3, #0
 8003032:	e001      	b.n	8003038 <arm_atan2_f32+0x428>
        }
    }
    

    return(ARM_MATH_NANINF);
 8003034:	f06f 0303 	mvn.w	r3, #3

}
 8003038:	4618      	mov	r0, r3
 800303a:	3784      	adds	r7, #132	; 0x84
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	08008540 	.word	0x08008540
 8003048:	40490fdb 	.word	0x40490fdb
 800304c:	c0490fdb 	.word	0xc0490fdb
 8003050:	40490fdb 	.word	0x40490fdb
 8003054:	3fc90fdb 	.word	0x3fc90fdb
 8003058:	bfc90fdb 	.word	0xbfc90fdb

0800305c <arm_cos_f32>:
  @param[in]     x  input value in radians
  @return        cos(x)
 */
float32_t arm_cos_f32(
  float32_t x)
{
 800305c:	b480      	push	{r7}
 800305e:	b08b      	sub	sp, #44	; 0x2c
 8003060:	af00      	add	r7, sp, #0
 8003062:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 8003066:	edd7 7a01 	vldr	s15, [r7, #4]
 800306a:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800315c <arm_cos_f32+0x100>
 800306e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003072:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8003076:	ee77 7a87 	vadd.f32	s15, s15, s14
 800307a:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 800307e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003082:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003086:	ee17 3a90 	vmov	r3, s15
 800308a:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 800308c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003090:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003098:	d502      	bpl.n	80030a0 <arm_cos_f32+0x44>
  {
    n--;
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	3b01      	subs	r3, #1
 800309e:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	ee07 3a90 	vmov	s15, r3
 80030a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030aa:	ed97 7a06 	vldr	s14, [r7, #24]
 80030ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030b2:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 80030b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80030ba:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003160 <arm_cos_f32+0x104>
 80030be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030c2:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 80030c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80030ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030ce:	ee17 3a90 	vmov	r3, s15
 80030d2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 80030d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80030d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030da:	d309      	bcc.n	80030f0 <arm_cos_f32+0x94>
    index = 0;
 80030dc:	2300      	movs	r3, #0
 80030de:	84fb      	strh	r3, [r7, #38]	; 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 80030e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80030e4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003160 <arm_cos_f32+0x104>
 80030e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030ec:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 80030f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80030f2:	ee07 3a90 	vmov	s15, r3
 80030f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80030fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003102:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 8003106:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003108:	4a16      	ldr	r2, [pc, #88]	; (8003164 <arm_cos_f32+0x108>)
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8003112:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003114:	3301      	adds	r3, #1
 8003116:	4a13      	ldr	r2, [pc, #76]	; (8003164 <arm_cos_f32+0x108>)
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  cosVal = (1.0f - fract) * a + fract * b;
 8003120:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003124:	edd7 7a05 	vldr	s15, [r7, #20]
 8003128:	ee37 7a67 	vsub.f32	s14, s14, s15
 800312c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003130:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003134:	edd7 6a05 	vldr	s13, [r7, #20]
 8003138:	edd7 7a03 	vldr	s15, [r7, #12]
 800313c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003140:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003144:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (cosVal);
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	ee07 3a90 	vmov	s15, r3
}
 800314e:	eeb0 0a67 	vmov.f32	s0, s15
 8003152:	372c      	adds	r7, #44	; 0x2c
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	3e22f983 	.word	0x3e22f983
 8003160:	44000000 	.word	0x44000000
 8003164:	08007d3c 	.word	0x08007d3c

08003168 <arm_sin_f32>:
  @return        sin(x)
 */

float32_t arm_sin_f32(
  float32_t x)
{
 8003168:	b480      	push	{r7}
 800316a:	b08b      	sub	sp, #44	; 0x2c
 800316c:	af00      	add	r7, sp, #0
 800316e:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 8003172:	edd7 7a01 	vldr	s15, [r7, #4]
 8003176:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8003260 <arm_sin_f32+0xf8>
 800317a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800317e:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8003182:	edd7 7a06 	vldr	s15, [r7, #24]
 8003186:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800318a:	ee17 3a90 	vmov	r3, s15
 800318e:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8003190:	edd7 7a06 	vldr	s15, [r7, #24]
 8003194:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800319c:	d502      	bpl.n	80031a4 <arm_sin_f32+0x3c>
  {
    n--;
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	3b01      	subs	r3, #1
 80031a2:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 80031a4:	6a3b      	ldr	r3, [r7, #32]
 80031a6:	ee07 3a90 	vmov	s15, r3
 80031aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031ae:	ed97 7a06 	vldr	s14, [r7, #24]
 80031b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031b6:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 80031ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80031be:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003264 <arm_sin_f32+0xfc>
 80031c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031c6:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 80031ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80031ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031d2:	ee17 3a90 	vmov	r3, s15
 80031d6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 80031d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80031da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031de:	d309      	bcc.n	80031f4 <arm_sin_f32+0x8c>
    index = 0;
 80031e0:	2300      	movs	r3, #0
 80031e2:	84fb      	strh	r3, [r7, #38]	; 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 80031e4:	edd7 7a07 	vldr	s15, [r7, #28]
 80031e8:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003264 <arm_sin_f32+0xfc>
 80031ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031f0:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 80031f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80031f6:	ee07 3a90 	vmov	s15, r3
 80031fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031fe:	ed97 7a07 	vldr	s14, [r7, #28]
 8003202:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003206:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 800320a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800320c:	4a16      	ldr	r2, [pc, #88]	; (8003268 <arm_sin_f32+0x100>)
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8003216:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003218:	3301      	adds	r3, #1
 800321a:	4a13      	ldr	r2, [pc, #76]	; (8003268 <arm_sin_f32+0x100>)
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 8003224:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003228:	edd7 7a05 	vldr	s15, [r7, #20]
 800322c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003230:	edd7 7a04 	vldr	s15, [r7, #16]
 8003234:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003238:	edd7 6a05 	vldr	s13, [r7, #20]
 800323c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003240:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003248:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (sinVal);
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	ee07 3a90 	vmov	s15, r3
}
 8003252:	eeb0 0a67 	vmov.f32	s0, s15
 8003256:	372c      	adds	r7, #44	; 0x2c
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	3e22f983 	.word	0x3e22f983
 8003264:	44000000 	.word	0x44000000
 8003268:	08007d3c 	.word	0x08007d3c

0800326c <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800326c:	b480      	push	{r7}
 800326e:	b08b      	sub	sp, #44	; 0x2c
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	461a      	mov	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	885b      	ldrh	r3, [r3, #2]
 8003294:	fb02 f303 	mul.w	r3, r2, r3
 8003298:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800329e:	e013      	b.n	80032c8 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	1d1a      	adds	r2, r3, #4
 80032a4:	627a      	str	r2, [r7, #36]	; 0x24
 80032a6:	ed93 7a00 	vldr	s14, [r3]
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	1d1a      	adds	r2, r3, #4
 80032ae:	623a      	str	r2, [r7, #32]
 80032b0:	edd3 7a00 	vldr	s15, [r3]
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	1d1a      	adds	r2, r3, #4
 80032b8:	61fa      	str	r2, [r7, #28]
 80032ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032be:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1e8      	bne.n	80032a0 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80032ce:	2300      	movs	r3, #0
 80032d0:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 80032d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	372c      	adds	r7, #44	; 0x2c
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b085      	sub	sp, #20
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	60f8      	str	r0, [r7, #12]
 80032ea:	607b      	str	r3, [r7, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	817b      	strh	r3, [r7, #10]
 80032f0:	4613      	mov	r3, r2
 80032f2:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	897a      	ldrh	r2, [r7, #10]
 80032f8:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	893a      	ldrh	r2, [r7, #8]
 80032fe:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	605a      	str	r2, [r3, #4]
}
 8003306:	bf00      	nop
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8003312:	b480      	push	{r7}
 8003314:	b0bb      	sub	sp, #236	; 0xec
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	667b      	str	r3, [r7, #100]	; 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	663b      	str	r3, [r7, #96]	; 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	885b      	ldrh	r3, [r3, #2]
 8003332:	65bb      	str	r3, [r7, #88]	; 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 8003342:	2300      	movs	r3, #0
 8003344:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 8003348:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800334a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800334e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003350:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8003354:	e03b      	b.n	80033ce <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 8003356:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003358:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 8003362:	e00c      	b.n	800337e <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 8003364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003368:	1d1a      	adds	r2, r3, #4
 800336a:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	601a      	str	r2, [r3, #0]
        j--;
 8003374:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003378:	3b01      	subs	r3, #1
 800337a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 800337e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1ee      	bne.n	8003364 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 8003386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800338a:	1d1a      	adds	r2, r3, #4
 800338c:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8003390:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003394:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 8003396:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800339a:	3b01      	subs	r3, #1
 800339c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 80033a0:	e00c      	b.n	80033bc <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 80033a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033a6:	1d1a      	adds	r2, r3, #4
 80033a8:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80033ac:	f04f 0200 	mov.w	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]
        j--;
 80033b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033b6:	3b01      	subs	r3, #1
 80033b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 80033bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1ee      	bne.n	80033a2 <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 80033c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80033c8:	3b01      	subs	r3, #1
 80033ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    while (rowCnt > 0U)
 80033ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1bf      	bne.n	8003356 <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 80033d6:	2300      	movs	r3, #0
 80033d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033dc:	e2c7      	b.n	800396e <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 80033de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033e2:	653b      	str	r3, [r7, #80]	; 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	885b      	ldrh	r3, [r3, #2]
 80033ec:	3301      	adds	r3, #1
 80033ee:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80033f2:	fb01 f303 	mul.w	r3, r1, r3
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      pivot = *pTmp;
 80033fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      selectedRow = column;
 8003408:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800340c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8003410:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003414:	3301      	adds	r3, #1
 8003416:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800341a:	e02c      	b.n	8003476 <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	885b      	ldrh	r3, [r3, #2]
 8003424:	4619      	mov	r1, r3
 8003426:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800342a:	fb03 f101 	mul.w	r1, r3, r1
 800342e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003432:	440b      	add	r3, r1
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
          newPivot = *pTmp;
 800343c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	657b      	str	r3, [r7, #84]	; 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 8003444:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003448:	eeb0 7ae7 	vabs.f32	s14, s15
 800344c:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8003450:	eef0 7ae7 	vabs.f32	s15, s15
 8003454:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345c:	dd06      	ble.n	800346c <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800345e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003462:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            pivot = newPivot;
 8003466:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003468:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800346c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003470:	3301      	adds	r3, #1
 8003472:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003476:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800347a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800347c:	429a      	cmp	r2, r3
 800347e:	d3cd      	bcc.n	800341c <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 8003480:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8003484:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800348c:	f000 809b 	beq.w	80035c6 <arm_mat_inverse_f32+0x2b4>
 8003490:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003494:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003498:	429a      	cmp	r2, r3
 800349a:	f000 8094 	beq.w	80035c6 <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	885b      	ldrh	r3, [r3, #2]
 80034b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80034be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80034c2:	fb03 f202 	mul.w	r2, r3, r2
 80034c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034ca:	4413      	add	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80034d2:	4413      	add	r3, r2
 80034d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80034de:	fb03 f202 	mul.w	r2, r3, r2
 80034e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034e6:	4413      	add	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034ee:	4413      	add	r3, r2
 80034f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034f4:	2300      	movs	r3, #0
 80034f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80034fa:	e018      	b.n	800352e <arm_mat_inverse_f32+0x21c>
 80034fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	63bb      	str	r3, [r7, #56]	; 0x38
 8003504:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003508:	1d1a      	adds	r2, r3, #4
 800350a:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800350e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003512:	6812      	ldr	r2, [r2, #0]
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800351a:	1d1a      	adds	r2, r3, #4
 800351c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003520:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003528:	3301      	adds	r3, #1
 800352a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800352e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003534:	429a      	cmp	r2, r3
 8003536:	dbe1      	blt.n	80034fc <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	885b      	ldrh	r3, [r3, #2]
 800354c:	647b      	str	r3, [r7, #68]	; 0x44
 800354e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003550:	643b      	str	r3, [r7, #64]	; 0x40
 8003552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003554:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003556:	fb02 f303 	mul.w	r3, r2, r3
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003560:	4413      	add	r3, r2
 8003562:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003568:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800356c:	fb02 f303 	mul.w	r3, r2, r3
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003576:	4413      	add	r3, r2
 8003578:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800357c:	2300      	movs	r3, #0
 800357e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003582:	e018      	b.n	80035b6 <arm_mat_inverse_f32+0x2a4>
 8003584:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800358c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003590:	1d1a      	adds	r2, r3, #4
 8003592:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003596:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800359a:	6812      	ldr	r2, [r2, #0]
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80035a2:	1d1a      	adds	r2, r3, #4
 80035a4:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80035a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80035b0:	3301      	adds	r3, #1
 80035b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80035ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035bc:	429a      	cmp	r2, r3
 80035be:	dbe1      	blt.n	8003584 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 80035c0:	2301      	movs	r3, #1
 80035c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 80035c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d009      	beq.n	80035e2 <arm_mat_inverse_f32+0x2d0>
 80035ce:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80035d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80035d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035da:	d102      	bne.n	80035e2 <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 80035dc:	f06f 0304 	mvn.w	r3, #4
 80035e0:	e208      	b.n	80039f4 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 80035e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035e6:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 80035ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035ee:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	885b      	ldrh	r3, [r3, #2]
 80035fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003600:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003602:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	633b      	str	r3, [r7, #48]	; 0x30
 800360a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800360c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800360e:	fb03 f202 	mul.w	r2, r3, r2
 8003612:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800361e:	4413      	add	r3, r2
 8003620:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003624:	2300      	movs	r3, #0
 8003626:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800362a:	e011      	b.n	8003650 <arm_mat_inverse_f32+0x33e>
 800362c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003630:	1d1a      	adds	r2, r3, #4
 8003632:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8003636:	ed93 7a00 	vldr	s14, [r3]
 800363a:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800363e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003642:	edc3 7a00 	vstr	s15, [r3]
 8003646:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800364a:	3301      	adds	r3, #1
 800364c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003650:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8003654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003656:	429a      	cmp	r2, r3
 8003658:	dbe8      	blt.n	800362c <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	885b      	ldrh	r3, [r3, #2]
 8003666:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366a:	62bb      	str	r3, [r7, #40]	; 0x28
 800366c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003670:	fb02 f303 	mul.w	r3, r2, r3
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800367a:	4413      	add	r3, r2
 800367c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003680:	2300      	movs	r3, #0
 8003682:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003686:	e011      	b.n	80036ac <arm_mat_inverse_f32+0x39a>
 8003688:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800368c:	1d1a      	adds	r2, r3, #4
 800368e:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8003692:	ed93 7a00 	vldr	s14, [r3]
 8003696:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800369a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800369e:	edc3 7a00 	vstr	s15, [r3]
 80036a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036a6:	3301      	adds	r3, #1
 80036a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036ac:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80036b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b2:	429a      	cmp	r2, r3
 80036b4:	dbe8      	blt.n	8003688 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 80036b6:	2300      	movs	r3, #0
 80036b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      for (;rowNb < pivotRow; rowNb++)
 80036bc:	e0ae      	b.n	800381c <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	885b      	ldrh	r3, [r3, #2]
 80036c6:	4619      	mov	r1, r3
 80036c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036cc:	fb03 f101 	mul.w	r1, r3, r1
 80036d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036d4:	440b      	add	r3, r1
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           pivot = *pTmp;
 80036de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	885b      	ldrh	r3, [r3, #2]
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	613b      	str	r3, [r7, #16]
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800370e:	fb03 f202 	mul.w	r2, r3, r2
 8003712:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800371e:	4413      	add	r3, r2
 8003720:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003728:	fb03 f202 	mul.w	r2, r3, r2
 800372c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003730:	4413      	add	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003738:	4413      	add	r3, r2
 800373a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800373e:	2300      	movs	r3, #0
 8003740:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003744:	e01a      	b.n	800377c <arm_mat_inverse_f32+0x46a>
 8003746:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800374a:	1d1a      	adds	r2, r3, #4
 800374c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003750:	ed93 7a00 	vldr	s14, [r3]
 8003754:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8003758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800375c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003760:	1d1a      	adds	r2, r3, #4
 8003762:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8003766:	ed93 7a00 	vldr	s14, [r3]
 800376a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800376e:	edc3 7a00 	vstr	s15, [r3]
 8003772:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003776:	3301      	adds	r3, #1
 8003778:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800377c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	429a      	cmp	r2, r3
 8003784:	dbdf      	blt.n	8003746 <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	885b      	ldrh	r3, [r3, #2]
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	60bb      	str	r3, [r7, #8]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80037a6:	fb02 f303 	mul.w	r3, r2, r3
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80037b0:	4413      	add	r3, r2
 80037b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80037ba:	fb02 f303 	mul.w	r3, r2, r3
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037c4:	4413      	add	r3, r2
 80037c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037ca:	2300      	movs	r3, #0
 80037cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80037d0:	e01a      	b.n	8003808 <arm_mat_inverse_f32+0x4f6>
 80037d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037d6:	1d1a      	adds	r2, r3, #4
 80037d8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80037dc:	ed93 7a00 	vldr	s14, [r3]
 80037e0:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80037e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037ec:	1d1a      	adds	r2, r3, #4
 80037ee:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80037f2:	ed93 7a00 	vldr	s14, [r3]
 80037f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037fa:	edc3 7a00 	vstr	s15, [r3]
 80037fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003802:	3301      	adds	r3, #1
 8003804:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003808:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	429a      	cmp	r2, r3
 8003810:	dbdf      	blt.n	80037d2 <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 8003812:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003816:	3301      	adds	r3, #1
 8003818:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800381c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003822:	429a      	cmp	r2, r3
 8003824:	f4ff af4b 	bcc.w	80036be <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8003828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800382a:	3301      	adds	r3, #1
 800382c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003830:	e092      	b.n	8003958 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	885b      	ldrh	r3, [r3, #2]
 800383a:	4619      	mov	r1, r3
 800383c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003840:	fb03 f101 	mul.w	r1, r3, r1
 8003844:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003848:	440b      	add	r3, r1
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           pivot = *pTmp;
 8003852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	67bb      	str	r3, [r7, #120]	; 0x78
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	677b      	str	r3, [r7, #116]	; 0x74
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	885b      	ldrh	r3, [r3, #2]
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
 800386e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003870:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	623b      	str	r3, [r7, #32]
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800387e:	fb03 f202 	mul.w	r2, r3, r2
 8003882:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003886:	4413      	add	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800388c:	4413      	add	r3, r2
 800388e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003894:	fb03 f202 	mul.w	r2, r3, r2
 8003898:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800389c:	4413      	add	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80038a2:	4413      	add	r3, r2
 80038a4:	677b      	str	r3, [r7, #116]	; 0x74
 80038a6:	2300      	movs	r3, #0
 80038a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80038aa:	e014      	b.n	80038d6 <arm_mat_inverse_f32+0x5c4>
 80038ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038ae:	1d1a      	adds	r2, r3, #4
 80038b0:	677a      	str	r2, [r7, #116]	; 0x74
 80038b2:	ed93 7a00 	vldr	s14, [r3]
 80038b6:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80038ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038c0:	1d1a      	adds	r2, r3, #4
 80038c2:	67ba      	str	r2, [r7, #120]	; 0x78
 80038c4:	ed93 7a00 	vldr	s14, [r3]
 80038c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038cc:	edc3 7a00 	vstr	s15, [r3]
 80038d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038d2:	3301      	adds	r3, #1
 80038d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80038d6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	429a      	cmp	r2, r3
 80038dc:	dbe6      	blt.n	80038ac <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	885b      	ldrh	r3, [r3, #2]
 80038ee:	61fb      	str	r3, [r7, #28]
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	61bb      	str	r3, [r7, #24]
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80038fa:	fb02 f303 	mul.w	r3, r2, r3
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003902:	4413      	add	r3, r2
 8003904:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800390a:	fb02 f303 	mul.w	r3, r2, r3
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003912:	4413      	add	r3, r2
 8003914:	66bb      	str	r3, [r7, #104]	; 0x68
 8003916:	2300      	movs	r3, #0
 8003918:	673b      	str	r3, [r7, #112]	; 0x70
 800391a:	e014      	b.n	8003946 <arm_mat_inverse_f32+0x634>
 800391c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800391e:	1d1a      	adds	r2, r3, #4
 8003920:	66ba      	str	r2, [r7, #104]	; 0x68
 8003922:	ed93 7a00 	vldr	s14, [r3]
 8003926:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800392a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800392e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003930:	1d1a      	adds	r2, r3, #4
 8003932:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003934:	ed93 7a00 	vldr	s14, [r3]
 8003938:	ee77 7a67 	vsub.f32	s15, s14, s15
 800393c:	edc3 7a00 	vstr	s15, [r3]
 8003940:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003942:	3301      	adds	r3, #1
 8003944:	673b      	str	r3, [r7, #112]	; 0x70
 8003946:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	429a      	cmp	r2, r3
 800394c:	dbe6      	blt.n	800391c <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800394e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003952:	3301      	adds	r3, #1
 8003954:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003958:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800395c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800395e:	429a      	cmp	r2, r3
 8003960:	f4ff af67 	bcc.w	8003832 <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 8003964:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003968:	3301      	adds	r3, #1
 800396a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800396e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003972:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003974:	429a      	cmp	r2, r3
 8003976:	f4ff ad32 	bcc.w	80033de <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800397a:	2300      	movs	r3, #0
 800397c:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 8003980:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003984:	2b01      	cmp	r3, #1
 8003986:	d033      	beq.n	80039f0 <arm_mat_inverse_f32+0x6de>
 8003988:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800398c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003994:	d12c      	bne.n	80039f0 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	667b      	str	r3, [r7, #100]	; 0x64
      for (i = 0; i < numRows * numCols; i++)
 800399c:	2300      	movs	r3, #0
 800399e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039a2:	e010      	b.n	80039c6 <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 80039a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80039ac:	4413      	add	r3, r2
 80039ae:	edd3 7a00 	vldr	s15, [r3]
 80039b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80039b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ba:	d10d      	bne.n	80039d8 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 80039bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039c0:	3301      	adds	r3, #1
 80039c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039ca:	fb02 f303 	mul.w	r3, r2, r3
 80039ce:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d3e6      	bcc.n	80039a4 <arm_mat_inverse_f32+0x692>
 80039d6:	e000      	b.n	80039da <arm_mat_inverse_f32+0x6c8>
            break;
 80039d8:	bf00      	nop
      }

      if (i == numRows * numCols)
 80039da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039de:	fb02 f303 	mul.w	r3, r2, r3
 80039e2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d102      	bne.n	80039f0 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 80039ea:	23fb      	movs	r3, #251	; 0xfb
 80039ec:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
    }
  }

  /* Return to application */
  return (status);
 80039f0:	f997 30c3 	ldrsb.w	r3, [r7, #195]	; 0xc3
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	37ec      	adds	r7, #236	; 0xec
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b093      	sub	sp, #76	; 0x4c
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	643b      	str	r3, [r7, #64]	; 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	885b      	ldrh	r3, [r3, #2]
 8003a34:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	885b      	ldrh	r3, [r3, #2]
 8003a3a:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a40:	8b7b      	ldrh	r3, [r7, #26]
 8003a42:	62bb      	str	r3, [r7, #40]	; 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 8003a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	69fa      	ldr	r2, [r7, #28]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	63bb      	str	r3, [r7, #56]	; 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 8003a4e:	8b3b      	ldrh	r3, [r7, #24]
 8003a50:	633b      	str	r3, [r7, #48]	; 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	643b      	str	r3, [r7, #64]	; 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8003a58:	f04f 0300 	mov.w	r3, #0
 8003a5c:	637b      	str	r3, [r7, #52]	; 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 8003a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a60:	647b      	str	r3, [r7, #68]	; 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 8003a62:	8afb      	ldrh	r3, [r7, #22]
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 8003a66:	e017      	b.n	8003a98 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 8003a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a6a:	1d1a      	adds	r2, r3, #4
 8003a6c:	647a      	str	r2, [r7, #68]	; 0x44
 8003a6e:	ed93 7a00 	vldr	s14, [r3]
 8003a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a74:	edd3 7a00 	vldr	s15, [r3]
 8003a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a7c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a84:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
          pIn2 += numColsB;
 8003a88:	8b3b      	ldrh	r3, [r7, #24]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a8e:	4413      	add	r3, r2
 8003a90:	643b      	str	r3, [r7, #64]	; 0x40

          /* Decrement loop counter */
          colCnt--;
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	3b01      	subs	r3, #1
 8003a96:	627b      	str	r3, [r7, #36]	; 0x24
        while (colCnt > 0U)
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1e4      	bne.n	8003a68 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 8003a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa0:	1d1a      	adds	r2, r3, #4
 8003aa2:	63ba      	str	r2, [r7, #56]	; 0x38
 8003aa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003aa6:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 8003aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	633b      	str	r3, [r7, #48]	; 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 8003aae:	8b3a      	ldrh	r2, [r7, #24]
 8003ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	6a3a      	ldr	r2, [r7, #32]
 8003ab8:	4413      	add	r3, r2
 8003aba:	643b      	str	r3, [r7, #64]	; 0x40

      } while (col > 0U);
 8003abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1ca      	bne.n	8003a58 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 8003ac2:	8b3b      	ldrh	r3, [r7, #24]
 8003ac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ac6:	4413      	add	r3, r2
 8003ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pInA = pInA + numColsA;
 8003aca:	8afb      	ldrh	r3, [r7, #22]
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ad0:	4413      	add	r3, r2
 8003ad2:	63fb      	str	r3, [r7, #60]	; 0x3c

      /* Decrement row loop counter */
      row--;
 8003ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	62bb      	str	r3, [r7, #40]	; 0x28

    } while (row > 0U);
 8003ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1b1      	bne.n	8003a44 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 8003ae4:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	374c      	adds	r7, #76	; 0x4c
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b08b      	sub	sp, #44	; 0x2c
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	ed87 0a02 	vstr	s0, [r7, #8]
 8003b00:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	885b      	ldrh	r3, [r3, #2]
 8003b18:	fb02 f303 	mul.w	r3, r2, r3
 8003b1c:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8003b22:	e010      	b.n	8003b46 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	1d1a      	adds	r2, r3, #4
 8003b28:	627a      	str	r2, [r7, #36]	; 0x24
 8003b2a:	ed93 7a00 	vldr	s14, [r3]
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	1d1a      	adds	r2, r3, #4
 8003b32:	623a      	str	r2, [r7, #32]
 8003b34:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b3c:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1eb      	bne.n	8003b24 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 8003b50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	372c      	adds	r7, #44	; 0x2c
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b08b      	sub	sp, #44	; 0x2c
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	885b      	ldrh	r3, [r3, #2]
 8003b88:	fb02 f303 	mul.w	r3, r2, r3
 8003b8c:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8003b92:	e013      	b.n	8003bbc <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	1d1a      	adds	r2, r3, #4
 8003b98:	627a      	str	r2, [r7, #36]	; 0x24
 8003b9a:	ed93 7a00 	vldr	s14, [r3]
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	1d1a      	adds	r2, r3, #4
 8003ba2:	623a      	str	r2, [r7, #32]
 8003ba4:	edd3 7a00 	vldr	s15, [r3]
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	1d1a      	adds	r2, r3, #4
 8003bac:	61fa      	str	r2, [r7, #28]
 8003bae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bb2:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1e8      	bne.n	8003b94 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8003bc6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	372c      	adds	r7, #44	; 0x2c
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b08b      	sub	sp, #44	; 0x2c
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
 8003bde:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	885b      	ldrh	r3, [r3, #2]
 8003bf6:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8003bf8:	89fb      	ldrh	r3, [r7, #14]
 8003bfa:	61bb      	str	r3, [r7, #24]
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	4413      	add	r3, r2
 8003c08:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8003c0a:	89bb      	ldrh	r3, [r7, #12]
 8003c0c:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8003c0e:	e00d      	b.n	8003c2c <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	1d1a      	adds	r2, r3, #4
 8003c14:	627a      	str	r2, [r7, #36]	; 0x24
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8003c1c:	89fb      	ldrh	r3, [r7, #14]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	6a3a      	ldr	r2, [r7, #32]
 8003c22:	4413      	add	r3, r2
 8003c24:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1ee      	bne.n	8003c10 <arm_mat_trans_f32+0x3a>
      }

      i++;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	3301      	adds	r3, #1
 8003c36:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1dd      	bne.n	8003c00 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8003c44:	2300      	movs	r3, #0
 8003c46:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 8003c48:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	372c      	adds	r7, #44	; 0x2c
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c5c:	4b0e      	ldr	r3, [pc, #56]	; (8003c98 <HAL_Init+0x40>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a0d      	ldr	r2, [pc, #52]	; (8003c98 <HAL_Init+0x40>)
 8003c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c68:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <HAL_Init+0x40>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a0a      	ldr	r2, [pc, #40]	; (8003c98 <HAL_Init+0x40>)
 8003c6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c74:	4b08      	ldr	r3, [pc, #32]	; (8003c98 <HAL_Init+0x40>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a07      	ldr	r2, [pc, #28]	; (8003c98 <HAL_Init+0x40>)
 8003c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c80:	2003      	movs	r0, #3
 8003c82:	f000 f92b 	bl	8003edc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c86:	2000      	movs	r0, #0
 8003c88:	f000 f808 	bl	8003c9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c8c:	f7fe fc58 	bl	8002540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40023c00 	.word	0x40023c00

08003c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ca4:	4b12      	ldr	r3, [pc, #72]	; (8003cf0 <HAL_InitTick+0x54>)
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	4b12      	ldr	r3, [pc, #72]	; (8003cf4 <HAL_InitTick+0x58>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	4619      	mov	r1, r3
 8003cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 f943 	bl	8003f46 <HAL_SYSTICK_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e00e      	b.n	8003ce8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b0f      	cmp	r3, #15
 8003cce:	d80a      	bhi.n	8003ce6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd8:	f000 f90b 	bl	8003ef2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cdc:	4a06      	ldr	r2, [pc, #24]	; (8003cf8 <HAL_InitTick+0x5c>)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	e000      	b.n	8003ce8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	20000010 	.word	0x20000010
 8003cf4:	20000018 	.word	0x20000018
 8003cf8:	20000014 	.word	0x20000014

08003cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d00:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <HAL_IncTick+0x20>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	461a      	mov	r2, r3
 8003d06:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <HAL_IncTick+0x24>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	4a04      	ldr	r2, [pc, #16]	; (8003d20 <HAL_IncTick+0x24>)
 8003d0e:	6013      	str	r3, [r2, #0]
}
 8003d10:	bf00      	nop
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	20000018 	.word	0x20000018
 8003d20:	2000065c 	.word	0x2000065c

08003d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  return uwTick;
 8003d28:	4b03      	ldr	r3, [pc, #12]	; (8003d38 <HAL_GetTick+0x14>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	2000065c 	.word	0x2000065c

08003d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d4c:	4b0c      	ldr	r3, [pc, #48]	; (8003d80 <__NVIC_SetPriorityGrouping+0x44>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d58:	4013      	ands	r3, r2
 8003d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d6e:	4a04      	ldr	r2, [pc, #16]	; (8003d80 <__NVIC_SetPriorityGrouping+0x44>)
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	60d3      	str	r3, [r2, #12]
}
 8003d74:	bf00      	nop
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	e000ed00 	.word	0xe000ed00

08003d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d88:	4b04      	ldr	r3, [pc, #16]	; (8003d9c <__NVIC_GetPriorityGrouping+0x18>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	0a1b      	lsrs	r3, r3, #8
 8003d8e:	f003 0307 	and.w	r3, r3, #7
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	e000ed00 	.word	0xe000ed00

08003da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	4603      	mov	r3, r0
 8003da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	db0b      	blt.n	8003dca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003db2:	79fb      	ldrb	r3, [r7, #7]
 8003db4:	f003 021f 	and.w	r2, r3, #31
 8003db8:	4907      	ldr	r1, [pc, #28]	; (8003dd8 <__NVIC_EnableIRQ+0x38>)
 8003dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dbe:	095b      	lsrs	r3, r3, #5
 8003dc0:	2001      	movs	r0, #1
 8003dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8003dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	e000e100 	.word	0xe000e100

08003ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	6039      	str	r1, [r7, #0]
 8003de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	db0a      	blt.n	8003e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	490c      	ldr	r1, [pc, #48]	; (8003e28 <__NVIC_SetPriority+0x4c>)
 8003df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfa:	0112      	lsls	r2, r2, #4
 8003dfc:	b2d2      	uxtb	r2, r2
 8003dfe:	440b      	add	r3, r1
 8003e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e04:	e00a      	b.n	8003e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	4908      	ldr	r1, [pc, #32]	; (8003e2c <__NVIC_SetPriority+0x50>)
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	3b04      	subs	r3, #4
 8003e14:	0112      	lsls	r2, r2, #4
 8003e16:	b2d2      	uxtb	r2, r2
 8003e18:	440b      	add	r3, r1
 8003e1a:	761a      	strb	r2, [r3, #24]
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	e000e100 	.word	0xe000e100
 8003e2c:	e000ed00 	.word	0xe000ed00

08003e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b089      	sub	sp, #36	; 0x24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	f1c3 0307 	rsb	r3, r3, #7
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	bf28      	it	cs
 8003e4e:	2304      	movcs	r3, #4
 8003e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	3304      	adds	r3, #4
 8003e56:	2b06      	cmp	r3, #6
 8003e58:	d902      	bls.n	8003e60 <NVIC_EncodePriority+0x30>
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	3b03      	subs	r3, #3
 8003e5e:	e000      	b.n	8003e62 <NVIC_EncodePriority+0x32>
 8003e60:	2300      	movs	r3, #0
 8003e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e64:	f04f 32ff 	mov.w	r2, #4294967295
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	43da      	mvns	r2, r3
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	401a      	ands	r2, r3
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e78:	f04f 31ff 	mov.w	r1, #4294967295
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e82:	43d9      	mvns	r1, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e88:	4313      	orrs	r3, r2
         );
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3724      	adds	r7, #36	; 0x24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
	...

08003e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ea8:	d301      	bcc.n	8003eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e00f      	b.n	8003ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eae:	4a0a      	ldr	r2, [pc, #40]	; (8003ed8 <SysTick_Config+0x40>)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003eb6:	210f      	movs	r1, #15
 8003eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ebc:	f7ff ff8e 	bl	8003ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ec0:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <SysTick_Config+0x40>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ec6:	4b04      	ldr	r3, [pc, #16]	; (8003ed8 <SysTick_Config+0x40>)
 8003ec8:	2207      	movs	r2, #7
 8003eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	e000e010 	.word	0xe000e010

08003edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7ff ff29 	bl	8003d3c <__NVIC_SetPriorityGrouping>
}
 8003eea:	bf00      	nop
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b086      	sub	sp, #24
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	4603      	mov	r3, r0
 8003efa:	60b9      	str	r1, [r7, #8]
 8003efc:	607a      	str	r2, [r7, #4]
 8003efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f04:	f7ff ff3e 	bl	8003d84 <__NVIC_GetPriorityGrouping>
 8003f08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	68b9      	ldr	r1, [r7, #8]
 8003f0e:	6978      	ldr	r0, [r7, #20]
 8003f10:	f7ff ff8e 	bl	8003e30 <NVIC_EncodePriority>
 8003f14:	4602      	mov	r2, r0
 8003f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f1a:	4611      	mov	r1, r2
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff ff5d 	bl	8003ddc <__NVIC_SetPriority>
}
 8003f22:	bf00      	nop
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b082      	sub	sp, #8
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	4603      	mov	r3, r0
 8003f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff ff31 	bl	8003da0 <__NVIC_EnableIRQ>
}
 8003f3e:	bf00      	nop
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b082      	sub	sp, #8
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7ff ffa2 	bl	8003e98 <SysTick_Config>
 8003f54:	4603      	mov	r3, r0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b089      	sub	sp, #36	; 0x24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f76:	2300      	movs	r3, #0
 8003f78:	61fb      	str	r3, [r7, #28]
 8003f7a:	e159      	b.n	8004230 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	f040 8148 	bne.w	800422a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d005      	beq.n	8003fb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d130      	bne.n	8004014 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	2203      	movs	r2, #3
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fe8:	2201      	movs	r2, #1
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff0:	43db      	mvns	r3, r3
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	091b      	lsrs	r3, r3, #4
 8003ffe:	f003 0201 	and.w	r2, r3, #1
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	fa02 f303 	lsl.w	r3, r2, r3
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	4313      	orrs	r3, r2
 800400c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f003 0303 	and.w	r3, r3, #3
 800401c:	2b03      	cmp	r3, #3
 800401e:	d017      	beq.n	8004050 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	2203      	movs	r2, #3
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	43db      	mvns	r3, r3
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	4013      	ands	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	4313      	orrs	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f003 0303 	and.w	r3, r3, #3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d123      	bne.n	80040a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	08da      	lsrs	r2, r3, #3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3208      	adds	r2, #8
 8004064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004068:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	220f      	movs	r2, #15
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	43db      	mvns	r3, r3
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	4013      	ands	r3, r2
 800407e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	691a      	ldr	r2, [r3, #16]
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	4313      	orrs	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	08da      	lsrs	r2, r3, #3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3208      	adds	r2, #8
 800409e:	69b9      	ldr	r1, [r7, #24]
 80040a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	2203      	movs	r2, #3
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	43db      	mvns	r3, r3
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	4013      	ands	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f003 0203 	and.w	r2, r3, #3
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 80a2 	beq.w	800422a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	4b57      	ldr	r3, [pc, #348]	; (8004248 <HAL_GPIO_Init+0x2e8>)
 80040ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ee:	4a56      	ldr	r2, [pc, #344]	; (8004248 <HAL_GPIO_Init+0x2e8>)
 80040f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040f4:	6453      	str	r3, [r2, #68]	; 0x44
 80040f6:	4b54      	ldr	r3, [pc, #336]	; (8004248 <HAL_GPIO_Init+0x2e8>)
 80040f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004102:	4a52      	ldr	r2, [pc, #328]	; (800424c <HAL_GPIO_Init+0x2ec>)
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	089b      	lsrs	r3, r3, #2
 8004108:	3302      	adds	r3, #2
 800410a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800410e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	220f      	movs	r2, #15
 800411a:	fa02 f303 	lsl.w	r3, r2, r3
 800411e:	43db      	mvns	r3, r3
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	4013      	ands	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a49      	ldr	r2, [pc, #292]	; (8004250 <HAL_GPIO_Init+0x2f0>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d019      	beq.n	8004162 <HAL_GPIO_Init+0x202>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a48      	ldr	r2, [pc, #288]	; (8004254 <HAL_GPIO_Init+0x2f4>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d013      	beq.n	800415e <HAL_GPIO_Init+0x1fe>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a47      	ldr	r2, [pc, #284]	; (8004258 <HAL_GPIO_Init+0x2f8>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00d      	beq.n	800415a <HAL_GPIO_Init+0x1fa>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a46      	ldr	r2, [pc, #280]	; (800425c <HAL_GPIO_Init+0x2fc>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d007      	beq.n	8004156 <HAL_GPIO_Init+0x1f6>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a45      	ldr	r2, [pc, #276]	; (8004260 <HAL_GPIO_Init+0x300>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d101      	bne.n	8004152 <HAL_GPIO_Init+0x1f2>
 800414e:	2304      	movs	r3, #4
 8004150:	e008      	b.n	8004164 <HAL_GPIO_Init+0x204>
 8004152:	2307      	movs	r3, #7
 8004154:	e006      	b.n	8004164 <HAL_GPIO_Init+0x204>
 8004156:	2303      	movs	r3, #3
 8004158:	e004      	b.n	8004164 <HAL_GPIO_Init+0x204>
 800415a:	2302      	movs	r3, #2
 800415c:	e002      	b.n	8004164 <HAL_GPIO_Init+0x204>
 800415e:	2301      	movs	r3, #1
 8004160:	e000      	b.n	8004164 <HAL_GPIO_Init+0x204>
 8004162:	2300      	movs	r3, #0
 8004164:	69fa      	ldr	r2, [r7, #28]
 8004166:	f002 0203 	and.w	r2, r2, #3
 800416a:	0092      	lsls	r2, r2, #2
 800416c:	4093      	lsls	r3, r2
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	4313      	orrs	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004174:	4935      	ldr	r1, [pc, #212]	; (800424c <HAL_GPIO_Init+0x2ec>)
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	089b      	lsrs	r3, r3, #2
 800417a:	3302      	adds	r3, #2
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004182:	4b38      	ldr	r3, [pc, #224]	; (8004264 <HAL_GPIO_Init+0x304>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	43db      	mvns	r3, r3
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	4013      	ands	r3, r2
 8004190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041a6:	4a2f      	ldr	r2, [pc, #188]	; (8004264 <HAL_GPIO_Init+0x304>)
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041ac:	4b2d      	ldr	r3, [pc, #180]	; (8004264 <HAL_GPIO_Init+0x304>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	43db      	mvns	r3, r3
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	4013      	ands	r3, r2
 80041ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041d0:	4a24      	ldr	r2, [pc, #144]	; (8004264 <HAL_GPIO_Init+0x304>)
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041d6:	4b23      	ldr	r3, [pc, #140]	; (8004264 <HAL_GPIO_Init+0x304>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	43db      	mvns	r3, r3
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	4013      	ands	r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041fa:	4a1a      	ldr	r2, [pc, #104]	; (8004264 <HAL_GPIO_Init+0x304>)
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004200:	4b18      	ldr	r3, [pc, #96]	; (8004264 <HAL_GPIO_Init+0x304>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	43db      	mvns	r3, r3
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	4013      	ands	r3, r2
 800420e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004224:	4a0f      	ldr	r2, [pc, #60]	; (8004264 <HAL_GPIO_Init+0x304>)
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	3301      	adds	r3, #1
 800422e:	61fb      	str	r3, [r7, #28]
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	2b0f      	cmp	r3, #15
 8004234:	f67f aea2 	bls.w	8003f7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004238:	bf00      	nop
 800423a:	bf00      	nop
 800423c:	3724      	adds	r7, #36	; 0x24
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	40023800 	.word	0x40023800
 800424c:	40013800 	.word	0x40013800
 8004250:	40020000 	.word	0x40020000
 8004254:	40020400 	.word	0x40020400
 8004258:	40020800 	.word	0x40020800
 800425c:	40020c00 	.word	0x40020c00
 8004260:	40021000 	.word	0x40021000
 8004264:	40013c00 	.word	0x40013c00

08004268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	460b      	mov	r3, r1
 8004272:	807b      	strh	r3, [r7, #2]
 8004274:	4613      	mov	r3, r2
 8004276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004278:	787b      	ldrb	r3, [r7, #1]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800427e:	887a      	ldrh	r2, [r7, #2]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004284:	e003      	b.n	800428e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004286:	887b      	ldrh	r3, [r7, #2]
 8004288:	041a      	lsls	r2, r3, #16
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	619a      	str	r2, [r3, #24]
}
 800428e:	bf00      	nop
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
	...

0800429c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e12b      	b.n	8004506 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d106      	bne.n	80042c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7fd ff8a 	bl	80021dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2224      	movs	r2, #36	; 0x24
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0201 	bic.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004300:	f000 fd80 	bl	8004e04 <HAL_RCC_GetPCLK1Freq>
 8004304:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	4a81      	ldr	r2, [pc, #516]	; (8004510 <HAL_I2C_Init+0x274>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d807      	bhi.n	8004320 <HAL_I2C_Init+0x84>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4a80      	ldr	r2, [pc, #512]	; (8004514 <HAL_I2C_Init+0x278>)
 8004314:	4293      	cmp	r3, r2
 8004316:	bf94      	ite	ls
 8004318:	2301      	movls	r3, #1
 800431a:	2300      	movhi	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	e006      	b.n	800432e <HAL_I2C_Init+0x92>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4a7d      	ldr	r2, [pc, #500]	; (8004518 <HAL_I2C_Init+0x27c>)
 8004324:	4293      	cmp	r3, r2
 8004326:	bf94      	ite	ls
 8004328:	2301      	movls	r3, #1
 800432a:	2300      	movhi	r3, #0
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e0e7      	b.n	8004506 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4a78      	ldr	r2, [pc, #480]	; (800451c <HAL_I2C_Init+0x280>)
 800433a:	fba2 2303 	umull	r2, r3, r2, r3
 800433e:	0c9b      	lsrs	r3, r3, #18
 8004340:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	430a      	orrs	r2, r1
 8004354:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	4a6a      	ldr	r2, [pc, #424]	; (8004510 <HAL_I2C_Init+0x274>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d802      	bhi.n	8004370 <HAL_I2C_Init+0xd4>
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	3301      	adds	r3, #1
 800436e:	e009      	b.n	8004384 <HAL_I2C_Init+0xe8>
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004376:	fb02 f303 	mul.w	r3, r2, r3
 800437a:	4a69      	ldr	r2, [pc, #420]	; (8004520 <HAL_I2C_Init+0x284>)
 800437c:	fba2 2303 	umull	r2, r3, r2, r3
 8004380:	099b      	lsrs	r3, r3, #6
 8004382:	3301      	adds	r3, #1
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6812      	ldr	r2, [r2, #0]
 8004388:	430b      	orrs	r3, r1
 800438a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004396:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	495c      	ldr	r1, [pc, #368]	; (8004510 <HAL_I2C_Init+0x274>)
 80043a0:	428b      	cmp	r3, r1
 80043a2:	d819      	bhi.n	80043d8 <HAL_I2C_Init+0x13c>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	1e59      	subs	r1, r3, #1
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80043b2:	1c59      	adds	r1, r3, #1
 80043b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80043b8:	400b      	ands	r3, r1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00a      	beq.n	80043d4 <HAL_I2C_Init+0x138>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	1e59      	subs	r1, r3, #1
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80043cc:	3301      	adds	r3, #1
 80043ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043d2:	e051      	b.n	8004478 <HAL_I2C_Init+0x1dc>
 80043d4:	2304      	movs	r3, #4
 80043d6:	e04f      	b.n	8004478 <HAL_I2C_Init+0x1dc>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d111      	bne.n	8004404 <HAL_I2C_Init+0x168>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	1e58      	subs	r0, r3, #1
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6859      	ldr	r1, [r3, #4]
 80043e8:	460b      	mov	r3, r1
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	440b      	add	r3, r1
 80043ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80043f2:	3301      	adds	r3, #1
 80043f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	bf0c      	ite	eq
 80043fc:	2301      	moveq	r3, #1
 80043fe:	2300      	movne	r3, #0
 8004400:	b2db      	uxtb	r3, r3
 8004402:	e012      	b.n	800442a <HAL_I2C_Init+0x18e>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	1e58      	subs	r0, r3, #1
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6859      	ldr	r1, [r3, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	440b      	add	r3, r1
 8004412:	0099      	lsls	r1, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	fbb0 f3f3 	udiv	r3, r0, r3
 800441a:	3301      	adds	r3, #1
 800441c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004420:	2b00      	cmp	r3, #0
 8004422:	bf0c      	ite	eq
 8004424:	2301      	moveq	r3, #1
 8004426:	2300      	movne	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <HAL_I2C_Init+0x196>
 800442e:	2301      	movs	r3, #1
 8004430:	e022      	b.n	8004478 <HAL_I2C_Init+0x1dc>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10e      	bne.n	8004458 <HAL_I2C_Init+0x1bc>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	1e58      	subs	r0, r3, #1
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6859      	ldr	r1, [r3, #4]
 8004442:	460b      	mov	r3, r1
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	440b      	add	r3, r1
 8004448:	fbb0 f3f3 	udiv	r3, r0, r3
 800444c:	3301      	adds	r3, #1
 800444e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004456:	e00f      	b.n	8004478 <HAL_I2C_Init+0x1dc>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	1e58      	subs	r0, r3, #1
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6859      	ldr	r1, [r3, #4]
 8004460:	460b      	mov	r3, r1
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	440b      	add	r3, r1
 8004466:	0099      	lsls	r1, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	fbb0 f3f3 	udiv	r3, r0, r3
 800446e:	3301      	adds	r3, #1
 8004470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004474:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004478:	6879      	ldr	r1, [r7, #4]
 800447a:	6809      	ldr	r1, [r1, #0]
 800447c:	4313      	orrs	r3, r2
 800447e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69da      	ldr	r2, [r3, #28]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6911      	ldr	r1, [r2, #16]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	68d2      	ldr	r2, [r2, #12]
 80044b2:	4311      	orrs	r1, r2
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6812      	ldr	r2, [r2, #0]
 80044b8:	430b      	orrs	r3, r1
 80044ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695a      	ldr	r2, [r3, #20]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0201 	orr.w	r2, r2, #1
 80044e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2220      	movs	r2, #32
 80044f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	000186a0 	.word	0x000186a0
 8004514:	001e847f 	.word	0x001e847f
 8004518:	003d08ff 	.word	0x003d08ff
 800451c:	431bde83 	.word	0x431bde83
 8004520:	10624dd3 	.word	0x10624dd3

08004524 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e267      	b.n	8004a06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d075      	beq.n	800462e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004542:	4b88      	ldr	r3, [pc, #544]	; (8004764 <HAL_RCC_OscConfig+0x240>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 030c 	and.w	r3, r3, #12
 800454a:	2b04      	cmp	r3, #4
 800454c:	d00c      	beq.n	8004568 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800454e:	4b85      	ldr	r3, [pc, #532]	; (8004764 <HAL_RCC_OscConfig+0x240>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004556:	2b08      	cmp	r3, #8
 8004558:	d112      	bne.n	8004580 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800455a:	4b82      	ldr	r3, [pc, #520]	; (8004764 <HAL_RCC_OscConfig+0x240>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004562:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004566:	d10b      	bne.n	8004580 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004568:	4b7e      	ldr	r3, [pc, #504]	; (8004764 <HAL_RCC_OscConfig+0x240>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d05b      	beq.n	800462c <HAL_RCC_OscConfig+0x108>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d157      	bne.n	800462c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e242      	b.n	8004a06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004588:	d106      	bne.n	8004598 <HAL_RCC_OscConfig+0x74>
 800458a:	4b76      	ldr	r3, [pc, #472]	; (8004764 <HAL_RCC_OscConfig+0x240>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a75      	ldr	r2, [pc, #468]	; (8004764 <HAL_RCC_OscConfig+0x240>)
 8004590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	e01d      	b.n	80045d4 <HAL_RCC_OscConfig+0xb0>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045a0:	d10c      	bne.n	80045bc <HAL_RCC_OscConfig+0x98>
 80045a2:	4b70      	ldr	r3, [pc, #448]	; (8004764 <HAL_RCC_OscConfig+0x240>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a6f      	ldr	r2, [pc, #444]	; (8004764 <HAL_RCC_OscConfig+0x240>)
 80045a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	4b6d      	ldr	r3, [pc, #436]	; (8004764 <HAL_RCC_OscConfig+0x240>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a6c      	ldr	r2, [pc, #432]	; (8004764 <HAL_RCC_OscConfig+0x240>)
 80045b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b8:	6013      	str	r3, [r2, #0]
 80045ba:	e00b      	b.n	80045d4 <HAL_RCC_OscConfig+0xb0>
 80045bc:	4b69      	ldr	r3, [pc, #420]	; (8004764 <HAL_RCC_OscConfig+0x240>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a68      	ldr	r2, [pc, #416]	; (8004764 <HAL_RCC_OscConfig+0x240>)
 80045c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c6:	6013      	str	r3, [r2, #0]
 80045c8:	4b66      	ldr	r3, [pc, #408]	; (8004764 <HAL_RCC_OscConfig+0x240>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a65      	ldr	r2, [pc, #404]	; (8004764 <HAL_RCC_OscConfig+0x240>)
 80045ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d013      	beq.n	8004604 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045dc:	f7ff fba2 	bl	8003d24 <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045e4:	f7ff fb9e 	bl	8003d24 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b64      	cmp	r3, #100	; 0x64
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e207      	b.n	8004a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045f6:	4b5b      	ldr	r3, [pc, #364]	; (8004764 <HAL_RCC_OscConfig+0x240>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0f0      	beq.n	80045e4 <HAL_RCC_OscConfig+0xc0>
 8004602:	e014      	b.n	800462e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004604:	f7ff fb8e 	bl	8003d24 <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800460c:	f7ff fb8a 	bl	8003d24 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b64      	cmp	r3, #100	; 0x64
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e1f3      	b.n	8004a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800461e:	4b51      	ldr	r3, [pc, #324]	; (8004764 <HAL_RCC_OscConfig+0x240>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1f0      	bne.n	800460c <HAL_RCC_OscConfig+0xe8>
 800462a:	e000      	b.n	800462e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800462c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d063      	beq.n	8004702 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800463a:	4b4a      	ldr	r3, [pc, #296]	; (8004764 <HAL_RCC_OscConfig+0x240>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 030c 	and.w	r3, r3, #12
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00b      	beq.n	800465e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004646:	4b47      	ldr	r3, [pc, #284]	; (8004764 <HAL_RCC_OscConfig+0x240>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800464e:	2b08      	cmp	r3, #8
 8004650:	d11c      	bne.n	800468c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004652:	4b44      	ldr	r3, [pc, #272]	; (8004764 <HAL_RCC_OscConfig+0x240>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d116      	bne.n	800468c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800465e:	4b41      	ldr	r3, [pc, #260]	; (8004764 <HAL_RCC_OscConfig+0x240>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d005      	beq.n	8004676 <HAL_RCC_OscConfig+0x152>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d001      	beq.n	8004676 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e1c7      	b.n	8004a06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004676:	4b3b      	ldr	r3, [pc, #236]	; (8004764 <HAL_RCC_OscConfig+0x240>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	4937      	ldr	r1, [pc, #220]	; (8004764 <HAL_RCC_OscConfig+0x240>)
 8004686:	4313      	orrs	r3, r2
 8004688:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800468a:	e03a      	b.n	8004702 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d020      	beq.n	80046d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004694:	4b34      	ldr	r3, [pc, #208]	; (8004768 <HAL_RCC_OscConfig+0x244>)
 8004696:	2201      	movs	r2, #1
 8004698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469a:	f7ff fb43 	bl	8003d24 <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046a2:	f7ff fb3f 	bl	8003d24 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e1a8      	b.n	8004a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046b4:	4b2b      	ldr	r3, [pc, #172]	; (8004764 <HAL_RCC_OscConfig+0x240>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d0f0      	beq.n	80046a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c0:	4b28      	ldr	r3, [pc, #160]	; (8004764 <HAL_RCC_OscConfig+0x240>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	00db      	lsls	r3, r3, #3
 80046ce:	4925      	ldr	r1, [pc, #148]	; (8004764 <HAL_RCC_OscConfig+0x240>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	600b      	str	r3, [r1, #0]
 80046d4:	e015      	b.n	8004702 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046d6:	4b24      	ldr	r3, [pc, #144]	; (8004768 <HAL_RCC_OscConfig+0x244>)
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046dc:	f7ff fb22 	bl	8003d24 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046e4:	f7ff fb1e 	bl	8003d24 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e187      	b.n	8004a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046f6:	4b1b      	ldr	r3, [pc, #108]	; (8004764 <HAL_RCC_OscConfig+0x240>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f0      	bne.n	80046e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	2b00      	cmp	r3, #0
 800470c:	d036      	beq.n	800477c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d016      	beq.n	8004744 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004716:	4b15      	ldr	r3, [pc, #84]	; (800476c <HAL_RCC_OscConfig+0x248>)
 8004718:	2201      	movs	r2, #1
 800471a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471c:	f7ff fb02 	bl	8003d24 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004724:	f7ff fafe 	bl	8003d24 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e167      	b.n	8004a06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004736:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <HAL_RCC_OscConfig+0x240>)
 8004738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d0f0      	beq.n	8004724 <HAL_RCC_OscConfig+0x200>
 8004742:	e01b      	b.n	800477c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004744:	4b09      	ldr	r3, [pc, #36]	; (800476c <HAL_RCC_OscConfig+0x248>)
 8004746:	2200      	movs	r2, #0
 8004748:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800474a:	f7ff faeb 	bl	8003d24 <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004750:	e00e      	b.n	8004770 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004752:	f7ff fae7 	bl	8003d24 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d907      	bls.n	8004770 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e150      	b.n	8004a06 <HAL_RCC_OscConfig+0x4e2>
 8004764:	40023800 	.word	0x40023800
 8004768:	42470000 	.word	0x42470000
 800476c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004770:	4b88      	ldr	r3, [pc, #544]	; (8004994 <HAL_RCC_OscConfig+0x470>)
 8004772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1ea      	bne.n	8004752 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b00      	cmp	r3, #0
 8004786:	f000 8097 	beq.w	80048b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800478a:	2300      	movs	r3, #0
 800478c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800478e:	4b81      	ldr	r3, [pc, #516]	; (8004994 <HAL_RCC_OscConfig+0x470>)
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10f      	bne.n	80047ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800479a:	2300      	movs	r3, #0
 800479c:	60bb      	str	r3, [r7, #8]
 800479e:	4b7d      	ldr	r3, [pc, #500]	; (8004994 <HAL_RCC_OscConfig+0x470>)
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	4a7c      	ldr	r2, [pc, #496]	; (8004994 <HAL_RCC_OscConfig+0x470>)
 80047a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047a8:	6413      	str	r3, [r2, #64]	; 0x40
 80047aa:	4b7a      	ldr	r3, [pc, #488]	; (8004994 <HAL_RCC_OscConfig+0x470>)
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b2:	60bb      	str	r3, [r7, #8]
 80047b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047b6:	2301      	movs	r3, #1
 80047b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ba:	4b77      	ldr	r3, [pc, #476]	; (8004998 <HAL_RCC_OscConfig+0x474>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d118      	bne.n	80047f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047c6:	4b74      	ldr	r3, [pc, #464]	; (8004998 <HAL_RCC_OscConfig+0x474>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a73      	ldr	r2, [pc, #460]	; (8004998 <HAL_RCC_OscConfig+0x474>)
 80047cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047d2:	f7ff faa7 	bl	8003d24 <HAL_GetTick>
 80047d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047d8:	e008      	b.n	80047ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047da:	f7ff faa3 	bl	8003d24 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d901      	bls.n	80047ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e10c      	b.n	8004a06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ec:	4b6a      	ldr	r3, [pc, #424]	; (8004998 <HAL_RCC_OscConfig+0x474>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0f0      	beq.n	80047da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d106      	bne.n	800480e <HAL_RCC_OscConfig+0x2ea>
 8004800:	4b64      	ldr	r3, [pc, #400]	; (8004994 <HAL_RCC_OscConfig+0x470>)
 8004802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004804:	4a63      	ldr	r2, [pc, #396]	; (8004994 <HAL_RCC_OscConfig+0x470>)
 8004806:	f043 0301 	orr.w	r3, r3, #1
 800480a:	6713      	str	r3, [r2, #112]	; 0x70
 800480c:	e01c      	b.n	8004848 <HAL_RCC_OscConfig+0x324>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	2b05      	cmp	r3, #5
 8004814:	d10c      	bne.n	8004830 <HAL_RCC_OscConfig+0x30c>
 8004816:	4b5f      	ldr	r3, [pc, #380]	; (8004994 <HAL_RCC_OscConfig+0x470>)
 8004818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481a:	4a5e      	ldr	r2, [pc, #376]	; (8004994 <HAL_RCC_OscConfig+0x470>)
 800481c:	f043 0304 	orr.w	r3, r3, #4
 8004820:	6713      	str	r3, [r2, #112]	; 0x70
 8004822:	4b5c      	ldr	r3, [pc, #368]	; (8004994 <HAL_RCC_OscConfig+0x470>)
 8004824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004826:	4a5b      	ldr	r2, [pc, #364]	; (8004994 <HAL_RCC_OscConfig+0x470>)
 8004828:	f043 0301 	orr.w	r3, r3, #1
 800482c:	6713      	str	r3, [r2, #112]	; 0x70
 800482e:	e00b      	b.n	8004848 <HAL_RCC_OscConfig+0x324>
 8004830:	4b58      	ldr	r3, [pc, #352]	; (8004994 <HAL_RCC_OscConfig+0x470>)
 8004832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004834:	4a57      	ldr	r2, [pc, #348]	; (8004994 <HAL_RCC_OscConfig+0x470>)
 8004836:	f023 0301 	bic.w	r3, r3, #1
 800483a:	6713      	str	r3, [r2, #112]	; 0x70
 800483c:	4b55      	ldr	r3, [pc, #340]	; (8004994 <HAL_RCC_OscConfig+0x470>)
 800483e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004840:	4a54      	ldr	r2, [pc, #336]	; (8004994 <HAL_RCC_OscConfig+0x470>)
 8004842:	f023 0304 	bic.w	r3, r3, #4
 8004846:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d015      	beq.n	800487c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004850:	f7ff fa68 	bl	8003d24 <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004856:	e00a      	b.n	800486e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004858:	f7ff fa64 	bl	8003d24 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	f241 3288 	movw	r2, #5000	; 0x1388
 8004866:	4293      	cmp	r3, r2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e0cb      	b.n	8004a06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800486e:	4b49      	ldr	r3, [pc, #292]	; (8004994 <HAL_RCC_OscConfig+0x470>)
 8004870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0ee      	beq.n	8004858 <HAL_RCC_OscConfig+0x334>
 800487a:	e014      	b.n	80048a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800487c:	f7ff fa52 	bl	8003d24 <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004882:	e00a      	b.n	800489a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004884:	f7ff fa4e 	bl	8003d24 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004892:	4293      	cmp	r3, r2
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e0b5      	b.n	8004a06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800489a:	4b3e      	ldr	r3, [pc, #248]	; (8004994 <HAL_RCC_OscConfig+0x470>)
 800489c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1ee      	bne.n	8004884 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048a6:	7dfb      	ldrb	r3, [r7, #23]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d105      	bne.n	80048b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048ac:	4b39      	ldr	r3, [pc, #228]	; (8004994 <HAL_RCC_OscConfig+0x470>)
 80048ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b0:	4a38      	ldr	r2, [pc, #224]	; (8004994 <HAL_RCC_OscConfig+0x470>)
 80048b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 80a1 	beq.w	8004a04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048c2:	4b34      	ldr	r3, [pc, #208]	; (8004994 <HAL_RCC_OscConfig+0x470>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 030c 	and.w	r3, r3, #12
 80048ca:	2b08      	cmp	r3, #8
 80048cc:	d05c      	beq.n	8004988 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d141      	bne.n	800495a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d6:	4b31      	ldr	r3, [pc, #196]	; (800499c <HAL_RCC_OscConfig+0x478>)
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048dc:	f7ff fa22 	bl	8003d24 <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048e4:	f7ff fa1e 	bl	8003d24 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e087      	b.n	8004a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048f6:	4b27      	ldr	r3, [pc, #156]	; (8004994 <HAL_RCC_OscConfig+0x470>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1f0      	bne.n	80048e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	69da      	ldr	r2, [r3, #28]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	431a      	orrs	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	019b      	lsls	r3, r3, #6
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004918:	085b      	lsrs	r3, r3, #1
 800491a:	3b01      	subs	r3, #1
 800491c:	041b      	lsls	r3, r3, #16
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004924:	061b      	lsls	r3, r3, #24
 8004926:	491b      	ldr	r1, [pc, #108]	; (8004994 <HAL_RCC_OscConfig+0x470>)
 8004928:	4313      	orrs	r3, r2
 800492a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800492c:	4b1b      	ldr	r3, [pc, #108]	; (800499c <HAL_RCC_OscConfig+0x478>)
 800492e:	2201      	movs	r2, #1
 8004930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004932:	f7ff f9f7 	bl	8003d24 <HAL_GetTick>
 8004936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004938:	e008      	b.n	800494c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800493a:	f7ff f9f3 	bl	8003d24 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d901      	bls.n	800494c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e05c      	b.n	8004a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800494c:	4b11      	ldr	r3, [pc, #68]	; (8004994 <HAL_RCC_OscConfig+0x470>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d0f0      	beq.n	800493a <HAL_RCC_OscConfig+0x416>
 8004958:	e054      	b.n	8004a04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800495a:	4b10      	ldr	r3, [pc, #64]	; (800499c <HAL_RCC_OscConfig+0x478>)
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004960:	f7ff f9e0 	bl	8003d24 <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004968:	f7ff f9dc 	bl	8003d24 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e045      	b.n	8004a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800497a:	4b06      	ldr	r3, [pc, #24]	; (8004994 <HAL_RCC_OscConfig+0x470>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1f0      	bne.n	8004968 <HAL_RCC_OscConfig+0x444>
 8004986:	e03d      	b.n	8004a04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d107      	bne.n	80049a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e038      	b.n	8004a06 <HAL_RCC_OscConfig+0x4e2>
 8004994:	40023800 	.word	0x40023800
 8004998:	40007000 	.word	0x40007000
 800499c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049a0:	4b1b      	ldr	r3, [pc, #108]	; (8004a10 <HAL_RCC_OscConfig+0x4ec>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d028      	beq.n	8004a00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d121      	bne.n	8004a00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d11a      	bne.n	8004a00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049d0:	4013      	ands	r3, r2
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049d8:	4293      	cmp	r3, r2
 80049da:	d111      	bne.n	8004a00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e6:	085b      	lsrs	r3, r3, #1
 80049e8:	3b01      	subs	r3, #1
 80049ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d107      	bne.n	8004a00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d001      	beq.n	8004a04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e000      	b.n	8004a06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3718      	adds	r7, #24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	40023800 	.word	0x40023800

08004a14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e0cc      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a28:	4b68      	ldr	r3, [pc, #416]	; (8004bcc <HAL_RCC_ClockConfig+0x1b8>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0307 	and.w	r3, r3, #7
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d90c      	bls.n	8004a50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a36:	4b65      	ldr	r3, [pc, #404]	; (8004bcc <HAL_RCC_ClockConfig+0x1b8>)
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	b2d2      	uxtb	r2, r2
 8004a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a3e:	4b63      	ldr	r3, [pc, #396]	; (8004bcc <HAL_RCC_ClockConfig+0x1b8>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d001      	beq.n	8004a50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e0b8      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d020      	beq.n	8004a9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d005      	beq.n	8004a74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a68:	4b59      	ldr	r3, [pc, #356]	; (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	4a58      	ldr	r2, [pc, #352]	; (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0308 	and.w	r3, r3, #8
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d005      	beq.n	8004a8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a80:	4b53      	ldr	r3, [pc, #332]	; (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	4a52      	ldr	r2, [pc, #328]	; (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a8c:	4b50      	ldr	r3, [pc, #320]	; (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	494d      	ldr	r1, [pc, #308]	; (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d044      	beq.n	8004b34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d107      	bne.n	8004ac2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ab2:	4b47      	ldr	r3, [pc, #284]	; (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d119      	bne.n	8004af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e07f      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d003      	beq.n	8004ad2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	d107      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ad2:	4b3f      	ldr	r3, [pc, #252]	; (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d109      	bne.n	8004af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e06f      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ae2:	4b3b      	ldr	r3, [pc, #236]	; (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e067      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004af2:	4b37      	ldr	r3, [pc, #220]	; (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f023 0203 	bic.w	r2, r3, #3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	4934      	ldr	r1, [pc, #208]	; (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b04:	f7ff f90e 	bl	8003d24 <HAL_GetTick>
 8004b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b0a:	e00a      	b.n	8004b22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b0c:	f7ff f90a 	bl	8003d24 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e04f      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b22:	4b2b      	ldr	r3, [pc, #172]	; (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 020c 	and.w	r2, r3, #12
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d1eb      	bne.n	8004b0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b34:	4b25      	ldr	r3, [pc, #148]	; (8004bcc <HAL_RCC_ClockConfig+0x1b8>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d20c      	bcs.n	8004b5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b42:	4b22      	ldr	r3, [pc, #136]	; (8004bcc <HAL_RCC_ClockConfig+0x1b8>)
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	b2d2      	uxtb	r2, r2
 8004b48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4a:	4b20      	ldr	r3, [pc, #128]	; (8004bcc <HAL_RCC_ClockConfig+0x1b8>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0307 	and.w	r3, r3, #7
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d001      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e032      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d008      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b68:	4b19      	ldr	r3, [pc, #100]	; (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	4916      	ldr	r1, [pc, #88]	; (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d009      	beq.n	8004b9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b86:	4b12      	ldr	r3, [pc, #72]	; (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	490e      	ldr	r1, [pc, #56]	; (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b9a:	f000 f821 	bl	8004be0 <HAL_RCC_GetSysClockFreq>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	4b0b      	ldr	r3, [pc, #44]	; (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	091b      	lsrs	r3, r3, #4
 8004ba6:	f003 030f 	and.w	r3, r3, #15
 8004baa:	490a      	ldr	r1, [pc, #40]	; (8004bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004bac:	5ccb      	ldrb	r3, [r1, r3]
 8004bae:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb2:	4a09      	ldr	r2, [pc, #36]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bb6:	4b09      	ldr	r3, [pc, #36]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7ff f86e 	bl	8003c9c <HAL_InitTick>

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	40023c00 	.word	0x40023c00
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	08007d24 	.word	0x08007d24
 8004bd8:	20000010 	.word	0x20000010
 8004bdc:	20000014 	.word	0x20000014

08004be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004be0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004be4:	b094      	sub	sp, #80	; 0x50
 8004be6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	647b      	str	r3, [r7, #68]	; 0x44
 8004bec:	2300      	movs	r3, #0
 8004bee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bf8:	4b79      	ldr	r3, [pc, #484]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f003 030c 	and.w	r3, r3, #12
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d00d      	beq.n	8004c20 <HAL_RCC_GetSysClockFreq+0x40>
 8004c04:	2b08      	cmp	r3, #8
 8004c06:	f200 80e1 	bhi.w	8004dcc <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d002      	beq.n	8004c14 <HAL_RCC_GetSysClockFreq+0x34>
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	d003      	beq.n	8004c1a <HAL_RCC_GetSysClockFreq+0x3a>
 8004c12:	e0db      	b.n	8004dcc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c14:	4b73      	ldr	r3, [pc, #460]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c16:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004c18:	e0db      	b.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c1a:	4b73      	ldr	r3, [pc, #460]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c1e:	e0d8      	b.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c20:	4b6f      	ldr	r3, [pc, #444]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c28:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c2a:	4b6d      	ldr	r3, [pc, #436]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d063      	beq.n	8004cfe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c36:	4b6a      	ldr	r3, [pc, #424]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	099b      	lsrs	r3, r3, #6
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c40:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c48:	633b      	str	r3, [r7, #48]	; 0x30
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c52:	4622      	mov	r2, r4
 8004c54:	462b      	mov	r3, r5
 8004c56:	f04f 0000 	mov.w	r0, #0
 8004c5a:	f04f 0100 	mov.w	r1, #0
 8004c5e:	0159      	lsls	r1, r3, #5
 8004c60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c64:	0150      	lsls	r0, r2, #5
 8004c66:	4602      	mov	r2, r0
 8004c68:	460b      	mov	r3, r1
 8004c6a:	4621      	mov	r1, r4
 8004c6c:	1a51      	subs	r1, r2, r1
 8004c6e:	6139      	str	r1, [r7, #16]
 8004c70:	4629      	mov	r1, r5
 8004c72:	eb63 0301 	sbc.w	r3, r3, r1
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	f04f 0200 	mov.w	r2, #0
 8004c7c:	f04f 0300 	mov.w	r3, #0
 8004c80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c84:	4659      	mov	r1, fp
 8004c86:	018b      	lsls	r3, r1, #6
 8004c88:	4651      	mov	r1, sl
 8004c8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c8e:	4651      	mov	r1, sl
 8004c90:	018a      	lsls	r2, r1, #6
 8004c92:	4651      	mov	r1, sl
 8004c94:	ebb2 0801 	subs.w	r8, r2, r1
 8004c98:	4659      	mov	r1, fp
 8004c9a:	eb63 0901 	sbc.w	r9, r3, r1
 8004c9e:	f04f 0200 	mov.w	r2, #0
 8004ca2:	f04f 0300 	mov.w	r3, #0
 8004ca6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004caa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cb2:	4690      	mov	r8, r2
 8004cb4:	4699      	mov	r9, r3
 8004cb6:	4623      	mov	r3, r4
 8004cb8:	eb18 0303 	adds.w	r3, r8, r3
 8004cbc:	60bb      	str	r3, [r7, #8]
 8004cbe:	462b      	mov	r3, r5
 8004cc0:	eb49 0303 	adc.w	r3, r9, r3
 8004cc4:	60fb      	str	r3, [r7, #12]
 8004cc6:	f04f 0200 	mov.w	r2, #0
 8004cca:	f04f 0300 	mov.w	r3, #0
 8004cce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cd2:	4629      	mov	r1, r5
 8004cd4:	024b      	lsls	r3, r1, #9
 8004cd6:	4621      	mov	r1, r4
 8004cd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cdc:	4621      	mov	r1, r4
 8004cde:	024a      	lsls	r2, r1, #9
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cf0:	f7fb ff56 	bl	8000ba0 <__aeabi_uldivmod>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cfc:	e058      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cfe:	4b38      	ldr	r3, [pc, #224]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	099b      	lsrs	r3, r3, #6
 8004d04:	2200      	movs	r2, #0
 8004d06:	4618      	mov	r0, r3
 8004d08:	4611      	mov	r1, r2
 8004d0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d0e:	623b      	str	r3, [r7, #32]
 8004d10:	2300      	movs	r3, #0
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24
 8004d14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d18:	4642      	mov	r2, r8
 8004d1a:	464b      	mov	r3, r9
 8004d1c:	f04f 0000 	mov.w	r0, #0
 8004d20:	f04f 0100 	mov.w	r1, #0
 8004d24:	0159      	lsls	r1, r3, #5
 8004d26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d2a:	0150      	lsls	r0, r2, #5
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	460b      	mov	r3, r1
 8004d30:	4641      	mov	r1, r8
 8004d32:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d36:	4649      	mov	r1, r9
 8004d38:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d3c:	f04f 0200 	mov.w	r2, #0
 8004d40:	f04f 0300 	mov.w	r3, #0
 8004d44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d50:	ebb2 040a 	subs.w	r4, r2, sl
 8004d54:	eb63 050b 	sbc.w	r5, r3, fp
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	f04f 0300 	mov.w	r3, #0
 8004d60:	00eb      	lsls	r3, r5, #3
 8004d62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d66:	00e2      	lsls	r2, r4, #3
 8004d68:	4614      	mov	r4, r2
 8004d6a:	461d      	mov	r5, r3
 8004d6c:	4643      	mov	r3, r8
 8004d6e:	18e3      	adds	r3, r4, r3
 8004d70:	603b      	str	r3, [r7, #0]
 8004d72:	464b      	mov	r3, r9
 8004d74:	eb45 0303 	adc.w	r3, r5, r3
 8004d78:	607b      	str	r3, [r7, #4]
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d86:	4629      	mov	r1, r5
 8004d88:	028b      	lsls	r3, r1, #10
 8004d8a:	4621      	mov	r1, r4
 8004d8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d90:	4621      	mov	r1, r4
 8004d92:	028a      	lsls	r2, r1, #10
 8004d94:	4610      	mov	r0, r2
 8004d96:	4619      	mov	r1, r3
 8004d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	61bb      	str	r3, [r7, #24]
 8004d9e:	61fa      	str	r2, [r7, #28]
 8004da0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004da4:	f7fb fefc 	bl	8000ba0 <__aeabi_uldivmod>
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	4613      	mov	r3, r2
 8004dae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004db0:	4b0b      	ldr	r3, [pc, #44]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	0c1b      	lsrs	r3, r3, #16
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	3301      	adds	r3, #1
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004dc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dca:	e002      	b.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dcc:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3750      	adds	r7, #80	; 0x50
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dde:	bf00      	nop
 8004de0:	40023800 	.word	0x40023800
 8004de4:	00f42400 	.word	0x00f42400
 8004de8:	007a1200 	.word	0x007a1200

08004dec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004df0:	4b03      	ldr	r3, [pc, #12]	; (8004e00 <HAL_RCC_GetHCLKFreq+0x14>)
 8004df2:	681b      	ldr	r3, [r3, #0]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	20000010 	.word	0x20000010

08004e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e08:	f7ff fff0 	bl	8004dec <HAL_RCC_GetHCLKFreq>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	4b05      	ldr	r3, [pc, #20]	; (8004e24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	0a9b      	lsrs	r3, r3, #10
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	4903      	ldr	r1, [pc, #12]	; (8004e28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e1a:	5ccb      	ldrb	r3, [r1, r3]
 8004e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	40023800 	.word	0x40023800
 8004e28:	08007d34 	.word	0x08007d34

08004e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e30:	f7ff ffdc 	bl	8004dec <HAL_RCC_GetHCLKFreq>
 8004e34:	4602      	mov	r2, r0
 8004e36:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	0b5b      	lsrs	r3, r3, #13
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	4903      	ldr	r1, [pc, #12]	; (8004e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e42:	5ccb      	ldrb	r3, [r1, r3]
 8004e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40023800 	.word	0x40023800
 8004e50:	08007d34 	.word	0x08007d34

08004e54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e041      	b.n	8004eea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d106      	bne.n	8004e80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7fd fd96 	bl	80029ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3304      	adds	r3, #4
 8004e90:	4619      	mov	r1, r3
 8004e92:	4610      	mov	r0, r2
 8004e94:	f000 fd88 	bl	80059a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
	...

08004ef4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d001      	beq.n	8004f0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e044      	b.n	8004f96 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68da      	ldr	r2, [r3, #12]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 0201 	orr.w	r2, r2, #1
 8004f22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a1e      	ldr	r2, [pc, #120]	; (8004fa4 <HAL_TIM_Base_Start_IT+0xb0>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d018      	beq.n	8004f60 <HAL_TIM_Base_Start_IT+0x6c>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f36:	d013      	beq.n	8004f60 <HAL_TIM_Base_Start_IT+0x6c>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a1a      	ldr	r2, [pc, #104]	; (8004fa8 <HAL_TIM_Base_Start_IT+0xb4>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d00e      	beq.n	8004f60 <HAL_TIM_Base_Start_IT+0x6c>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a19      	ldr	r2, [pc, #100]	; (8004fac <HAL_TIM_Base_Start_IT+0xb8>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d009      	beq.n	8004f60 <HAL_TIM_Base_Start_IT+0x6c>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a17      	ldr	r2, [pc, #92]	; (8004fb0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d004      	beq.n	8004f60 <HAL_TIM_Base_Start_IT+0x6c>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a16      	ldr	r2, [pc, #88]	; (8004fb4 <HAL_TIM_Base_Start_IT+0xc0>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d111      	bne.n	8004f84 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f003 0307 	and.w	r3, r3, #7
 8004f6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2b06      	cmp	r3, #6
 8004f70:	d010      	beq.n	8004f94 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f042 0201 	orr.w	r2, r2, #1
 8004f80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f82:	e007      	b.n	8004f94 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f042 0201 	orr.w	r2, r2, #1
 8004f92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	40010000 	.word	0x40010000
 8004fa8:	40000400 	.word	0x40000400
 8004fac:	40000800 	.word	0x40000800
 8004fb0:	40000c00 	.word	0x40000c00
 8004fb4:	40014000 	.word	0x40014000

08004fb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e041      	b.n	800504e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d106      	bne.n	8004fe4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f839 	bl	8005056 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	f000 fcd6 	bl	80059a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
	...

0800506c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d109      	bne.n	8005090 <HAL_TIM_PWM_Start+0x24>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b01      	cmp	r3, #1
 8005086:	bf14      	ite	ne
 8005088:	2301      	movne	r3, #1
 800508a:	2300      	moveq	r3, #0
 800508c:	b2db      	uxtb	r3, r3
 800508e:	e022      	b.n	80050d6 <HAL_TIM_PWM_Start+0x6a>
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	2b04      	cmp	r3, #4
 8005094:	d109      	bne.n	80050aa <HAL_TIM_PWM_Start+0x3e>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b01      	cmp	r3, #1
 80050a0:	bf14      	ite	ne
 80050a2:	2301      	movne	r3, #1
 80050a4:	2300      	moveq	r3, #0
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	e015      	b.n	80050d6 <HAL_TIM_PWM_Start+0x6a>
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b08      	cmp	r3, #8
 80050ae:	d109      	bne.n	80050c4 <HAL_TIM_PWM_Start+0x58>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	bf14      	ite	ne
 80050bc:	2301      	movne	r3, #1
 80050be:	2300      	moveq	r3, #0
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	e008      	b.n	80050d6 <HAL_TIM_PWM_Start+0x6a>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	bf14      	ite	ne
 80050d0:	2301      	movne	r3, #1
 80050d2:	2300      	moveq	r3, #0
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e068      	b.n	80051b0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d104      	bne.n	80050ee <HAL_TIM_PWM_Start+0x82>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050ec:	e013      	b.n	8005116 <HAL_TIM_PWM_Start+0xaa>
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b04      	cmp	r3, #4
 80050f2:	d104      	bne.n	80050fe <HAL_TIM_PWM_Start+0x92>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050fc:	e00b      	b.n	8005116 <HAL_TIM_PWM_Start+0xaa>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b08      	cmp	r3, #8
 8005102:	d104      	bne.n	800510e <HAL_TIM_PWM_Start+0xa2>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800510c:	e003      	b.n	8005116 <HAL_TIM_PWM_Start+0xaa>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2202      	movs	r2, #2
 8005112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2201      	movs	r2, #1
 800511c:	6839      	ldr	r1, [r7, #0]
 800511e:	4618      	mov	r0, r3
 8005120:	f000 fee8 	bl	8005ef4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a23      	ldr	r2, [pc, #140]	; (80051b8 <HAL_TIM_PWM_Start+0x14c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d107      	bne.n	800513e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800513c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a1d      	ldr	r2, [pc, #116]	; (80051b8 <HAL_TIM_PWM_Start+0x14c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d018      	beq.n	800517a <HAL_TIM_PWM_Start+0x10e>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005150:	d013      	beq.n	800517a <HAL_TIM_PWM_Start+0x10e>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a19      	ldr	r2, [pc, #100]	; (80051bc <HAL_TIM_PWM_Start+0x150>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d00e      	beq.n	800517a <HAL_TIM_PWM_Start+0x10e>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a17      	ldr	r2, [pc, #92]	; (80051c0 <HAL_TIM_PWM_Start+0x154>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d009      	beq.n	800517a <HAL_TIM_PWM_Start+0x10e>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a16      	ldr	r2, [pc, #88]	; (80051c4 <HAL_TIM_PWM_Start+0x158>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d004      	beq.n	800517a <HAL_TIM_PWM_Start+0x10e>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a14      	ldr	r2, [pc, #80]	; (80051c8 <HAL_TIM_PWM_Start+0x15c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d111      	bne.n	800519e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f003 0307 	and.w	r3, r3, #7
 8005184:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2b06      	cmp	r3, #6
 800518a:	d010      	beq.n	80051ae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0201 	orr.w	r2, r2, #1
 800519a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800519c:	e007      	b.n	80051ae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f042 0201 	orr.w	r2, r2, #1
 80051ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	40010000 	.word	0x40010000
 80051bc:	40000400 	.word	0x40000400
 80051c0:	40000800 	.word	0x40000800
 80051c4:	40000c00 	.word	0x40000c00
 80051c8:	40014000 	.word	0x40014000

080051cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d101      	bne.n	80051e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e097      	b.n	8005310 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d106      	bne.n	80051fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f7fd fb8b 	bl	8002910 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2202      	movs	r2, #2
 80051fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	6812      	ldr	r2, [r2, #0]
 800520c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005210:	f023 0307 	bic.w	r3, r3, #7
 8005214:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	3304      	adds	r3, #4
 800521e:	4619      	mov	r1, r3
 8005220:	4610      	mov	r0, r2
 8005222:	f000 fbc1 	bl	80059a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4313      	orrs	r3, r2
 8005246:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800524e:	f023 0303 	bic.w	r3, r3, #3
 8005252:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	021b      	lsls	r3, r3, #8
 800525e:	4313      	orrs	r3, r2
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	4313      	orrs	r3, r2
 8005264:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800526c:	f023 030c 	bic.w	r3, r3, #12
 8005270:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005278:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800527c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	68da      	ldr	r2, [r3, #12]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	021b      	lsls	r3, r3, #8
 8005288:	4313      	orrs	r3, r2
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	4313      	orrs	r3, r2
 800528e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	011a      	lsls	r2, r3, #4
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	031b      	lsls	r3, r3, #12
 800529c:	4313      	orrs	r3, r2
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80052aa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80052b2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	011b      	lsls	r3, r3, #4
 80052be:	4313      	orrs	r3, r2
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3718      	adds	r7, #24
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005328:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005330:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005338:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005340:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d110      	bne.n	800536a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005348:	7bfb      	ldrb	r3, [r7, #15]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d102      	bne.n	8005354 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800534e:	7b7b      	ldrb	r3, [r7, #13]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d001      	beq.n	8005358 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e069      	b.n	800542c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2202      	movs	r2, #2
 8005364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005368:	e031      	b.n	80053ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b04      	cmp	r3, #4
 800536e:	d110      	bne.n	8005392 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005370:	7bbb      	ldrb	r3, [r7, #14]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d102      	bne.n	800537c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005376:	7b3b      	ldrb	r3, [r7, #12]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d001      	beq.n	8005380 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e055      	b.n	800542c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2202      	movs	r2, #2
 8005384:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005390:	e01d      	b.n	80053ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005392:	7bfb      	ldrb	r3, [r7, #15]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d108      	bne.n	80053aa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005398:	7bbb      	ldrb	r3, [r7, #14]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d105      	bne.n	80053aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800539e:	7b7b      	ldrb	r3, [r7, #13]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d102      	bne.n	80053aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80053a4:	7b3b      	ldrb	r3, [r7, #12]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d001      	beq.n	80053ae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e03e      	b.n	800542c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2202      	movs	r2, #2
 80053b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2202      	movs	r2, #2
 80053ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2202      	movs	r2, #2
 80053c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2202      	movs	r2, #2
 80053ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d003      	beq.n	80053dc <HAL_TIM_Encoder_Start+0xc4>
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	2b04      	cmp	r3, #4
 80053d8:	d008      	beq.n	80053ec <HAL_TIM_Encoder_Start+0xd4>
 80053da:	e00f      	b.n	80053fc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2201      	movs	r2, #1
 80053e2:	2100      	movs	r1, #0
 80053e4:	4618      	mov	r0, r3
 80053e6:	f000 fd85 	bl	8005ef4 <TIM_CCxChannelCmd>
      break;
 80053ea:	e016      	b.n	800541a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2201      	movs	r2, #1
 80053f2:	2104      	movs	r1, #4
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 fd7d 	bl	8005ef4 <TIM_CCxChannelCmd>
      break;
 80053fa:	e00e      	b.n	800541a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2201      	movs	r2, #1
 8005402:	2100      	movs	r1, #0
 8005404:	4618      	mov	r0, r3
 8005406:	f000 fd75 	bl	8005ef4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2201      	movs	r2, #1
 8005410:	2104      	movs	r1, #4
 8005412:	4618      	mov	r0, r3
 8005414:	f000 fd6e 	bl	8005ef4 <TIM_CCxChannelCmd>
      break;
 8005418:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f042 0201 	orr.w	r2, r2, #1
 8005428:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b02      	cmp	r3, #2
 8005448:	d122      	bne.n	8005490 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b02      	cmp	r3, #2
 8005456:	d11b      	bne.n	8005490 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f06f 0202 	mvn.w	r2, #2
 8005460:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 fa77 	bl	800596a <HAL_TIM_IC_CaptureCallback>
 800547c:	e005      	b.n	800548a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 fa69 	bl	8005956 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 fa7a 	bl	800597e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	f003 0304 	and.w	r3, r3, #4
 800549a:	2b04      	cmp	r3, #4
 800549c:	d122      	bne.n	80054e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b04      	cmp	r3, #4
 80054aa:	d11b      	bne.n	80054e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f06f 0204 	mvn.w	r2, #4
 80054b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2202      	movs	r2, #2
 80054ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 fa4d 	bl	800596a <HAL_TIM_IC_CaptureCallback>
 80054d0:	e005      	b.n	80054de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 fa3f 	bl	8005956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 fa50 	bl	800597e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	f003 0308 	and.w	r3, r3, #8
 80054ee:	2b08      	cmp	r3, #8
 80054f0:	d122      	bne.n	8005538 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f003 0308 	and.w	r3, r3, #8
 80054fc:	2b08      	cmp	r3, #8
 80054fe:	d11b      	bne.n	8005538 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f06f 0208 	mvn.w	r2, #8
 8005508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2204      	movs	r2, #4
 800550e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	f003 0303 	and.w	r3, r3, #3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d003      	beq.n	8005526 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fa23 	bl	800596a <HAL_TIM_IC_CaptureCallback>
 8005524:	e005      	b.n	8005532 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 fa15 	bl	8005956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 fa26 	bl	800597e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	f003 0310 	and.w	r3, r3, #16
 8005542:	2b10      	cmp	r3, #16
 8005544:	d122      	bne.n	800558c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	f003 0310 	and.w	r3, r3, #16
 8005550:	2b10      	cmp	r3, #16
 8005552:	d11b      	bne.n	800558c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f06f 0210 	mvn.w	r2, #16
 800555c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2208      	movs	r2, #8
 8005562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f9f9 	bl	800596a <HAL_TIM_IC_CaptureCallback>
 8005578:	e005      	b.n	8005586 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f9eb 	bl	8005956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f9fc 	bl	800597e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b01      	cmp	r3, #1
 8005598:	d10e      	bne.n	80055b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d107      	bne.n	80055b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f06f 0201 	mvn.w	r2, #1
 80055b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7fc ff64 	bl	8002480 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c2:	2b80      	cmp	r3, #128	; 0x80
 80055c4:	d10e      	bne.n	80055e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055d0:	2b80      	cmp	r3, #128	; 0x80
 80055d2:	d107      	bne.n	80055e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fd26 	bl	8006030 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ee:	2b40      	cmp	r3, #64	; 0x40
 80055f0:	d10e      	bne.n	8005610 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055fc:	2b40      	cmp	r3, #64	; 0x40
 80055fe:	d107      	bne.n	8005610 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f9c1 	bl	8005992 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	f003 0320 	and.w	r3, r3, #32
 800561a:	2b20      	cmp	r3, #32
 800561c:	d10e      	bne.n	800563c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f003 0320 	and.w	r3, r3, #32
 8005628:	2b20      	cmp	r3, #32
 800562a:	d107      	bne.n	800563c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f06f 0220 	mvn.w	r2, #32
 8005634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 fcf0 	bl	800601c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800563c:	bf00      	nop
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005650:	2300      	movs	r3, #0
 8005652:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800565a:	2b01      	cmp	r3, #1
 800565c:	d101      	bne.n	8005662 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800565e:	2302      	movs	r3, #2
 8005660:	e0ae      	b.n	80057c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b0c      	cmp	r3, #12
 800566e:	f200 809f 	bhi.w	80057b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005672:	a201      	add	r2, pc, #4	; (adr r2, 8005678 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005678:	080056ad 	.word	0x080056ad
 800567c:	080057b1 	.word	0x080057b1
 8005680:	080057b1 	.word	0x080057b1
 8005684:	080057b1 	.word	0x080057b1
 8005688:	080056ed 	.word	0x080056ed
 800568c:	080057b1 	.word	0x080057b1
 8005690:	080057b1 	.word	0x080057b1
 8005694:	080057b1 	.word	0x080057b1
 8005698:	0800572f 	.word	0x0800572f
 800569c:	080057b1 	.word	0x080057b1
 80056a0:	080057b1 	.word	0x080057b1
 80056a4:	080057b1 	.word	0x080057b1
 80056a8:	0800576f 	.word	0x0800576f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68b9      	ldr	r1, [r7, #8]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 f9f8 	bl	8005aa8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699a      	ldr	r2, [r3, #24]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f042 0208 	orr.w	r2, r2, #8
 80056c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699a      	ldr	r2, [r3, #24]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 0204 	bic.w	r2, r2, #4
 80056d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6999      	ldr	r1, [r3, #24]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	691a      	ldr	r2, [r3, #16]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	619a      	str	r2, [r3, #24]
      break;
 80056ea:	e064      	b.n	80057b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68b9      	ldr	r1, [r7, #8]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 fa3e 	bl	8005b74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699a      	ldr	r2, [r3, #24]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	699a      	ldr	r2, [r3, #24]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6999      	ldr	r1, [r3, #24]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	021a      	lsls	r2, r3, #8
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	430a      	orrs	r2, r1
 800572a:	619a      	str	r2, [r3, #24]
      break;
 800572c:	e043      	b.n	80057b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68b9      	ldr	r1, [r7, #8]
 8005734:	4618      	mov	r0, r3
 8005736:	f000 fa89 	bl	8005c4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69da      	ldr	r2, [r3, #28]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f042 0208 	orr.w	r2, r2, #8
 8005748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69da      	ldr	r2, [r3, #28]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 0204 	bic.w	r2, r2, #4
 8005758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69d9      	ldr	r1, [r3, #28]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	691a      	ldr	r2, [r3, #16]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	430a      	orrs	r2, r1
 800576a:	61da      	str	r2, [r3, #28]
      break;
 800576c:	e023      	b.n	80057b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68b9      	ldr	r1, [r7, #8]
 8005774:	4618      	mov	r0, r3
 8005776:	f000 fad3 	bl	8005d20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	69da      	ldr	r2, [r3, #28]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	69da      	ldr	r2, [r3, #28]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69d9      	ldr	r1, [r3, #28]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	021a      	lsls	r2, r3, #8
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	61da      	str	r2, [r3, #28]
      break;
 80057ae:	e002      	b.n	80057b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	75fb      	strb	r3, [r7, #23]
      break;
 80057b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057be:	7dfb      	ldrb	r3, [r7, #23]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3718      	adds	r7, #24
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057d2:	2300      	movs	r3, #0
 80057d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d101      	bne.n	80057e4 <HAL_TIM_ConfigClockSource+0x1c>
 80057e0:	2302      	movs	r3, #2
 80057e2:	e0b4      	b.n	800594e <HAL_TIM_ConfigClockSource+0x186>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005802:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800580a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68ba      	ldr	r2, [r7, #8]
 8005812:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800581c:	d03e      	beq.n	800589c <HAL_TIM_ConfigClockSource+0xd4>
 800581e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005822:	f200 8087 	bhi.w	8005934 <HAL_TIM_ConfigClockSource+0x16c>
 8005826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800582a:	f000 8086 	beq.w	800593a <HAL_TIM_ConfigClockSource+0x172>
 800582e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005832:	d87f      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x16c>
 8005834:	2b70      	cmp	r3, #112	; 0x70
 8005836:	d01a      	beq.n	800586e <HAL_TIM_ConfigClockSource+0xa6>
 8005838:	2b70      	cmp	r3, #112	; 0x70
 800583a:	d87b      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x16c>
 800583c:	2b60      	cmp	r3, #96	; 0x60
 800583e:	d050      	beq.n	80058e2 <HAL_TIM_ConfigClockSource+0x11a>
 8005840:	2b60      	cmp	r3, #96	; 0x60
 8005842:	d877      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x16c>
 8005844:	2b50      	cmp	r3, #80	; 0x50
 8005846:	d03c      	beq.n	80058c2 <HAL_TIM_ConfigClockSource+0xfa>
 8005848:	2b50      	cmp	r3, #80	; 0x50
 800584a:	d873      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x16c>
 800584c:	2b40      	cmp	r3, #64	; 0x40
 800584e:	d058      	beq.n	8005902 <HAL_TIM_ConfigClockSource+0x13a>
 8005850:	2b40      	cmp	r3, #64	; 0x40
 8005852:	d86f      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x16c>
 8005854:	2b30      	cmp	r3, #48	; 0x30
 8005856:	d064      	beq.n	8005922 <HAL_TIM_ConfigClockSource+0x15a>
 8005858:	2b30      	cmp	r3, #48	; 0x30
 800585a:	d86b      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x16c>
 800585c:	2b20      	cmp	r3, #32
 800585e:	d060      	beq.n	8005922 <HAL_TIM_ConfigClockSource+0x15a>
 8005860:	2b20      	cmp	r3, #32
 8005862:	d867      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x16c>
 8005864:	2b00      	cmp	r3, #0
 8005866:	d05c      	beq.n	8005922 <HAL_TIM_ConfigClockSource+0x15a>
 8005868:	2b10      	cmp	r3, #16
 800586a:	d05a      	beq.n	8005922 <HAL_TIM_ConfigClockSource+0x15a>
 800586c:	e062      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6818      	ldr	r0, [r3, #0]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	6899      	ldr	r1, [r3, #8]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	f000 fb19 	bl	8005eb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005890:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	609a      	str	r2, [r3, #8]
      break;
 800589a:	e04f      	b.n	800593c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6818      	ldr	r0, [r3, #0]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	6899      	ldr	r1, [r3, #8]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	f000 fb02 	bl	8005eb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689a      	ldr	r2, [r3, #8]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058be:	609a      	str	r2, [r3, #8]
      break;
 80058c0:	e03c      	b.n	800593c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6818      	ldr	r0, [r3, #0]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	6859      	ldr	r1, [r3, #4]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	461a      	mov	r2, r3
 80058d0:	f000 fa76 	bl	8005dc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2150      	movs	r1, #80	; 0x50
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 facf 	bl	8005e7e <TIM_ITRx_SetConfig>
      break;
 80058e0:	e02c      	b.n	800593c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6818      	ldr	r0, [r3, #0]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	6859      	ldr	r1, [r3, #4]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	461a      	mov	r2, r3
 80058f0:	f000 fa95 	bl	8005e1e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2160      	movs	r1, #96	; 0x60
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fabf 	bl	8005e7e <TIM_ITRx_SetConfig>
      break;
 8005900:	e01c      	b.n	800593c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6818      	ldr	r0, [r3, #0]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	6859      	ldr	r1, [r3, #4]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	461a      	mov	r2, r3
 8005910:	f000 fa56 	bl	8005dc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2140      	movs	r1, #64	; 0x40
 800591a:	4618      	mov	r0, r3
 800591c:	f000 faaf 	bl	8005e7e <TIM_ITRx_SetConfig>
      break;
 8005920:	e00c      	b.n	800593c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4619      	mov	r1, r3
 800592c:	4610      	mov	r0, r2
 800592e:	f000 faa6 	bl	8005e7e <TIM_ITRx_SetConfig>
      break;
 8005932:	e003      	b.n	800593c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	73fb      	strb	r3, [r7, #15]
      break;
 8005938:	e000      	b.n	800593c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800593a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800594c:	7bfb      	ldrb	r3, [r7, #15]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005956:	b480      	push	{r7}
 8005958:	b083      	sub	sp, #12
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800595e:	bf00      	nop
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800596a:	b480      	push	{r7}
 800596c:	b083      	sub	sp, #12
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005972:	bf00      	nop
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800597e:	b480      	push	{r7}
 8005980:	b083      	sub	sp, #12
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005986:	bf00      	nop
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr

08005992 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005992:	b480      	push	{r7}
 8005994:	b083      	sub	sp, #12
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800599a:	bf00      	nop
 800599c:	370c      	adds	r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
	...

080059a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a34      	ldr	r2, [pc, #208]	; (8005a8c <TIM_Base_SetConfig+0xe4>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d00f      	beq.n	80059e0 <TIM_Base_SetConfig+0x38>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059c6:	d00b      	beq.n	80059e0 <TIM_Base_SetConfig+0x38>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a31      	ldr	r2, [pc, #196]	; (8005a90 <TIM_Base_SetConfig+0xe8>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d007      	beq.n	80059e0 <TIM_Base_SetConfig+0x38>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a30      	ldr	r2, [pc, #192]	; (8005a94 <TIM_Base_SetConfig+0xec>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d003      	beq.n	80059e0 <TIM_Base_SetConfig+0x38>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a2f      	ldr	r2, [pc, #188]	; (8005a98 <TIM_Base_SetConfig+0xf0>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d108      	bne.n	80059f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a25      	ldr	r2, [pc, #148]	; (8005a8c <TIM_Base_SetConfig+0xe4>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d01b      	beq.n	8005a32 <TIM_Base_SetConfig+0x8a>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a00:	d017      	beq.n	8005a32 <TIM_Base_SetConfig+0x8a>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a22      	ldr	r2, [pc, #136]	; (8005a90 <TIM_Base_SetConfig+0xe8>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d013      	beq.n	8005a32 <TIM_Base_SetConfig+0x8a>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a21      	ldr	r2, [pc, #132]	; (8005a94 <TIM_Base_SetConfig+0xec>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d00f      	beq.n	8005a32 <TIM_Base_SetConfig+0x8a>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a20      	ldr	r2, [pc, #128]	; (8005a98 <TIM_Base_SetConfig+0xf0>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d00b      	beq.n	8005a32 <TIM_Base_SetConfig+0x8a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a1f      	ldr	r2, [pc, #124]	; (8005a9c <TIM_Base_SetConfig+0xf4>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d007      	beq.n	8005a32 <TIM_Base_SetConfig+0x8a>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a1e      	ldr	r2, [pc, #120]	; (8005aa0 <TIM_Base_SetConfig+0xf8>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d003      	beq.n	8005a32 <TIM_Base_SetConfig+0x8a>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a1d      	ldr	r2, [pc, #116]	; (8005aa4 <TIM_Base_SetConfig+0xfc>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d108      	bne.n	8005a44 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	689a      	ldr	r2, [r3, #8]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a08      	ldr	r2, [pc, #32]	; (8005a8c <TIM_Base_SetConfig+0xe4>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d103      	bne.n	8005a78 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	691a      	ldr	r2, [r3, #16]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	615a      	str	r2, [r3, #20]
}
 8005a7e:	bf00      	nop
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	40010000 	.word	0x40010000
 8005a90:	40000400 	.word	0x40000400
 8005a94:	40000800 	.word	0x40000800
 8005a98:	40000c00 	.word	0x40000c00
 8005a9c:	40014000 	.word	0x40014000
 8005aa0:	40014400 	.word	0x40014400
 8005aa4:	40014800 	.word	0x40014800

08005aa8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	f023 0201 	bic.w	r2, r3, #1
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 0303 	bic.w	r3, r3, #3
 8005ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f023 0302 	bic.w	r3, r3, #2
 8005af0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a1c      	ldr	r2, [pc, #112]	; (8005b70 <TIM_OC1_SetConfig+0xc8>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d10c      	bne.n	8005b1e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f023 0308 	bic.w	r3, r3, #8
 8005b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f023 0304 	bic.w	r3, r3, #4
 8005b1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a13      	ldr	r2, [pc, #76]	; (8005b70 <TIM_OC1_SetConfig+0xc8>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d111      	bne.n	8005b4a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	621a      	str	r2, [r3, #32]
}
 8005b64:	bf00      	nop
 8005b66:	371c      	adds	r7, #28
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr
 8005b70:	40010000 	.word	0x40010000

08005b74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	f023 0210 	bic.w	r2, r3, #16
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	021b      	lsls	r3, r3, #8
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f023 0320 	bic.w	r3, r3, #32
 8005bbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	011b      	lsls	r3, r3, #4
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a1e      	ldr	r2, [pc, #120]	; (8005c48 <TIM_OC2_SetConfig+0xd4>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d10d      	bne.n	8005bf0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	011b      	lsls	r3, r3, #4
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a15      	ldr	r2, [pc, #84]	; (8005c48 <TIM_OC2_SetConfig+0xd4>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d113      	bne.n	8005c20 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	621a      	str	r2, [r3, #32]
}
 8005c3a:	bf00      	nop
 8005c3c:	371c      	adds	r7, #28
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	40010000 	.word	0x40010000

08005c4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b087      	sub	sp, #28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f023 0303 	bic.w	r3, r3, #3
 8005c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	021b      	lsls	r3, r3, #8
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a1d      	ldr	r2, [pc, #116]	; (8005d1c <TIM_OC3_SetConfig+0xd0>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d10d      	bne.n	8005cc6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	021b      	lsls	r3, r3, #8
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a14      	ldr	r2, [pc, #80]	; (8005d1c <TIM_OC3_SetConfig+0xd0>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d113      	bne.n	8005cf6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	011b      	lsls	r3, r3, #4
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	011b      	lsls	r3, r3, #4
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	685a      	ldr	r2, [r3, #4]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	621a      	str	r2, [r3, #32]
}
 8005d10:	bf00      	nop
 8005d12:	371c      	adds	r7, #28
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	40010000 	.word	0x40010000

08005d20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b087      	sub	sp, #28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	69db      	ldr	r3, [r3, #28]
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	021b      	lsls	r3, r3, #8
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	031b      	lsls	r3, r3, #12
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a10      	ldr	r2, [pc, #64]	; (8005dbc <TIM_OC4_SetConfig+0x9c>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d109      	bne.n	8005d94 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	695b      	ldr	r3, [r3, #20]
 8005d8c:	019b      	lsls	r3, r3, #6
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	621a      	str	r2, [r3, #32]
}
 8005dae:	bf00      	nop
 8005db0:	371c      	adds	r7, #28
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	40010000 	.word	0x40010000

08005dc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6a1b      	ldr	r3, [r3, #32]
 8005dd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	f023 0201 	bic.w	r2, r3, #1
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	011b      	lsls	r3, r3, #4
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f023 030a 	bic.w	r3, r3, #10
 8005dfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	621a      	str	r2, [r3, #32]
}
 8005e12:	bf00      	nop
 8005e14:	371c      	adds	r7, #28
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b087      	sub	sp, #28
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	60f8      	str	r0, [r7, #12]
 8005e26:	60b9      	str	r1, [r7, #8]
 8005e28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	f023 0210 	bic.w	r2, r3, #16
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6a1b      	ldr	r3, [r3, #32]
 8005e40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	031b      	lsls	r3, r3, #12
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	011b      	lsls	r3, r3, #4
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	621a      	str	r2, [r3, #32]
}
 8005e72:	bf00      	nop
 8005e74:	371c      	adds	r7, #28
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e7e:	b480      	push	{r7}
 8005e80:	b085      	sub	sp, #20
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	f043 0307 	orr.w	r3, r3, #7
 8005ea0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	609a      	str	r2, [r3, #8]
}
 8005ea8:	bf00      	nop
 8005eaa:	3714      	adds	r7, #20
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
 8005ec0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ece:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	021a      	lsls	r2, r3, #8
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	431a      	orrs	r2, r3
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	609a      	str	r2, [r3, #8]
}
 8005ee8:	bf00      	nop
 8005eea:	371c      	adds	r7, #28
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	f003 031f 	and.w	r3, r3, #31
 8005f06:	2201      	movs	r2, #1
 8005f08:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6a1a      	ldr	r2, [r3, #32]
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	43db      	mvns	r3, r3
 8005f16:	401a      	ands	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6a1a      	ldr	r2, [r3, #32]
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f003 031f 	and.w	r3, r3, #31
 8005f26:	6879      	ldr	r1, [r7, #4]
 8005f28:	fa01 f303 	lsl.w	r3, r1, r3
 8005f2c:	431a      	orrs	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	621a      	str	r2, [r3, #32]
}
 8005f32:	bf00      	nop
 8005f34:	371c      	adds	r7, #28
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
	...

08005f40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d101      	bne.n	8005f58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f54:	2302      	movs	r3, #2
 8005f56:	e050      	b.n	8005ffa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2202      	movs	r2, #2
 8005f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a1c      	ldr	r2, [pc, #112]	; (8006008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d018      	beq.n	8005fce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fa4:	d013      	beq.n	8005fce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a18      	ldr	r2, [pc, #96]	; (800600c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d00e      	beq.n	8005fce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a16      	ldr	r2, [pc, #88]	; (8006010 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d009      	beq.n	8005fce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a15      	ldr	r2, [pc, #84]	; (8006014 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d004      	beq.n	8005fce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a13      	ldr	r2, [pc, #76]	; (8006018 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d10c      	bne.n	8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3714      	adds	r7, #20
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	40010000 	.word	0x40010000
 800600c:	40000400 	.word	0x40000400
 8006010:	40000800 	.word	0x40000800
 8006014:	40000c00 	.word	0x40000c00
 8006018:	40014000 	.word	0x40014000

0800601c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d101      	bne.n	8006056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e03f      	b.n	80060d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	d106      	bne.n	8006070 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f7fc fd5e 	bl	8002b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2224      	movs	r2, #36	; 0x24
 8006074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68da      	ldr	r2, [r3, #12]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006086:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f829 	bl	80060e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	691a      	ldr	r2, [r3, #16]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800609c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	695a      	ldr	r2, [r3, #20]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68da      	ldr	r2, [r3, #12]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2220      	movs	r2, #32
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2220      	movs	r2, #32
 80060d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
	...

080060e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060e4:	b0c0      	sub	sp, #256	; 0x100
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80060f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060fc:	68d9      	ldr	r1, [r3, #12]
 80060fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	ea40 0301 	orr.w	r3, r0, r1
 8006108:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800610a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800610e:	689a      	ldr	r2, [r3, #8]
 8006110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	431a      	orrs	r2, r3
 8006118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	431a      	orrs	r2, r3
 8006120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	4313      	orrs	r3, r2
 8006128:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800612c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006138:	f021 010c 	bic.w	r1, r1, #12
 800613c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006146:	430b      	orrs	r3, r1
 8006148:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800614a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800615a:	6999      	ldr	r1, [r3, #24]
 800615c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	ea40 0301 	orr.w	r3, r0, r1
 8006166:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	4b8f      	ldr	r3, [pc, #572]	; (80063ac <UART_SetConfig+0x2cc>)
 8006170:	429a      	cmp	r2, r3
 8006172:	d005      	beq.n	8006180 <UART_SetConfig+0xa0>
 8006174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	4b8d      	ldr	r3, [pc, #564]	; (80063b0 <UART_SetConfig+0x2d0>)
 800617c:	429a      	cmp	r2, r3
 800617e:	d104      	bne.n	800618a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006180:	f7fe fe54 	bl	8004e2c <HAL_RCC_GetPCLK2Freq>
 8006184:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006188:	e003      	b.n	8006192 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800618a:	f7fe fe3b 	bl	8004e04 <HAL_RCC_GetPCLK1Freq>
 800618e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006196:	69db      	ldr	r3, [r3, #28]
 8006198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800619c:	f040 810c 	bne.w	80063b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061a4:	2200      	movs	r2, #0
 80061a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80061ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80061b2:	4622      	mov	r2, r4
 80061b4:	462b      	mov	r3, r5
 80061b6:	1891      	adds	r1, r2, r2
 80061b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80061ba:	415b      	adcs	r3, r3
 80061bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80061c2:	4621      	mov	r1, r4
 80061c4:	eb12 0801 	adds.w	r8, r2, r1
 80061c8:	4629      	mov	r1, r5
 80061ca:	eb43 0901 	adc.w	r9, r3, r1
 80061ce:	f04f 0200 	mov.w	r2, #0
 80061d2:	f04f 0300 	mov.w	r3, #0
 80061d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061e2:	4690      	mov	r8, r2
 80061e4:	4699      	mov	r9, r3
 80061e6:	4623      	mov	r3, r4
 80061e8:	eb18 0303 	adds.w	r3, r8, r3
 80061ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80061f0:	462b      	mov	r3, r5
 80061f2:	eb49 0303 	adc.w	r3, r9, r3
 80061f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006206:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800620a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800620e:	460b      	mov	r3, r1
 8006210:	18db      	adds	r3, r3, r3
 8006212:	653b      	str	r3, [r7, #80]	; 0x50
 8006214:	4613      	mov	r3, r2
 8006216:	eb42 0303 	adc.w	r3, r2, r3
 800621a:	657b      	str	r3, [r7, #84]	; 0x54
 800621c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006220:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006224:	f7fa fcbc 	bl	8000ba0 <__aeabi_uldivmod>
 8006228:	4602      	mov	r2, r0
 800622a:	460b      	mov	r3, r1
 800622c:	4b61      	ldr	r3, [pc, #388]	; (80063b4 <UART_SetConfig+0x2d4>)
 800622e:	fba3 2302 	umull	r2, r3, r3, r2
 8006232:	095b      	lsrs	r3, r3, #5
 8006234:	011c      	lsls	r4, r3, #4
 8006236:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800623a:	2200      	movs	r2, #0
 800623c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006240:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006244:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006248:	4642      	mov	r2, r8
 800624a:	464b      	mov	r3, r9
 800624c:	1891      	adds	r1, r2, r2
 800624e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006250:	415b      	adcs	r3, r3
 8006252:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006254:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006258:	4641      	mov	r1, r8
 800625a:	eb12 0a01 	adds.w	sl, r2, r1
 800625e:	4649      	mov	r1, r9
 8006260:	eb43 0b01 	adc.w	fp, r3, r1
 8006264:	f04f 0200 	mov.w	r2, #0
 8006268:	f04f 0300 	mov.w	r3, #0
 800626c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006270:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006274:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006278:	4692      	mov	sl, r2
 800627a:	469b      	mov	fp, r3
 800627c:	4643      	mov	r3, r8
 800627e:	eb1a 0303 	adds.w	r3, sl, r3
 8006282:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006286:	464b      	mov	r3, r9
 8006288:	eb4b 0303 	adc.w	r3, fp, r3
 800628c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800629c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80062a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80062a4:	460b      	mov	r3, r1
 80062a6:	18db      	adds	r3, r3, r3
 80062a8:	643b      	str	r3, [r7, #64]	; 0x40
 80062aa:	4613      	mov	r3, r2
 80062ac:	eb42 0303 	adc.w	r3, r2, r3
 80062b0:	647b      	str	r3, [r7, #68]	; 0x44
 80062b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80062b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80062ba:	f7fa fc71 	bl	8000ba0 <__aeabi_uldivmod>
 80062be:	4602      	mov	r2, r0
 80062c0:	460b      	mov	r3, r1
 80062c2:	4611      	mov	r1, r2
 80062c4:	4b3b      	ldr	r3, [pc, #236]	; (80063b4 <UART_SetConfig+0x2d4>)
 80062c6:	fba3 2301 	umull	r2, r3, r3, r1
 80062ca:	095b      	lsrs	r3, r3, #5
 80062cc:	2264      	movs	r2, #100	; 0x64
 80062ce:	fb02 f303 	mul.w	r3, r2, r3
 80062d2:	1acb      	subs	r3, r1, r3
 80062d4:	00db      	lsls	r3, r3, #3
 80062d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80062da:	4b36      	ldr	r3, [pc, #216]	; (80063b4 <UART_SetConfig+0x2d4>)
 80062dc:	fba3 2302 	umull	r2, r3, r3, r2
 80062e0:	095b      	lsrs	r3, r3, #5
 80062e2:	005b      	lsls	r3, r3, #1
 80062e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80062e8:	441c      	add	r4, r3
 80062ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062ee:	2200      	movs	r2, #0
 80062f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80062f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80062fc:	4642      	mov	r2, r8
 80062fe:	464b      	mov	r3, r9
 8006300:	1891      	adds	r1, r2, r2
 8006302:	63b9      	str	r1, [r7, #56]	; 0x38
 8006304:	415b      	adcs	r3, r3
 8006306:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006308:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800630c:	4641      	mov	r1, r8
 800630e:	1851      	adds	r1, r2, r1
 8006310:	6339      	str	r1, [r7, #48]	; 0x30
 8006312:	4649      	mov	r1, r9
 8006314:	414b      	adcs	r3, r1
 8006316:	637b      	str	r3, [r7, #52]	; 0x34
 8006318:	f04f 0200 	mov.w	r2, #0
 800631c:	f04f 0300 	mov.w	r3, #0
 8006320:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006324:	4659      	mov	r1, fp
 8006326:	00cb      	lsls	r3, r1, #3
 8006328:	4651      	mov	r1, sl
 800632a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800632e:	4651      	mov	r1, sl
 8006330:	00ca      	lsls	r2, r1, #3
 8006332:	4610      	mov	r0, r2
 8006334:	4619      	mov	r1, r3
 8006336:	4603      	mov	r3, r0
 8006338:	4642      	mov	r2, r8
 800633a:	189b      	adds	r3, r3, r2
 800633c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006340:	464b      	mov	r3, r9
 8006342:	460a      	mov	r2, r1
 8006344:	eb42 0303 	adc.w	r3, r2, r3
 8006348:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800634c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006358:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800635c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006360:	460b      	mov	r3, r1
 8006362:	18db      	adds	r3, r3, r3
 8006364:	62bb      	str	r3, [r7, #40]	; 0x28
 8006366:	4613      	mov	r3, r2
 8006368:	eb42 0303 	adc.w	r3, r2, r3
 800636c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800636e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006372:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006376:	f7fa fc13 	bl	8000ba0 <__aeabi_uldivmod>
 800637a:	4602      	mov	r2, r0
 800637c:	460b      	mov	r3, r1
 800637e:	4b0d      	ldr	r3, [pc, #52]	; (80063b4 <UART_SetConfig+0x2d4>)
 8006380:	fba3 1302 	umull	r1, r3, r3, r2
 8006384:	095b      	lsrs	r3, r3, #5
 8006386:	2164      	movs	r1, #100	; 0x64
 8006388:	fb01 f303 	mul.w	r3, r1, r3
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	00db      	lsls	r3, r3, #3
 8006390:	3332      	adds	r3, #50	; 0x32
 8006392:	4a08      	ldr	r2, [pc, #32]	; (80063b4 <UART_SetConfig+0x2d4>)
 8006394:	fba2 2303 	umull	r2, r3, r2, r3
 8006398:	095b      	lsrs	r3, r3, #5
 800639a:	f003 0207 	and.w	r2, r3, #7
 800639e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4422      	add	r2, r4
 80063a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063a8:	e105      	b.n	80065b6 <UART_SetConfig+0x4d6>
 80063aa:	bf00      	nop
 80063ac:	40011000 	.word	0x40011000
 80063b0:	40011400 	.word	0x40011400
 80063b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063bc:	2200      	movs	r2, #0
 80063be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80063c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80063ca:	4642      	mov	r2, r8
 80063cc:	464b      	mov	r3, r9
 80063ce:	1891      	adds	r1, r2, r2
 80063d0:	6239      	str	r1, [r7, #32]
 80063d2:	415b      	adcs	r3, r3
 80063d4:	627b      	str	r3, [r7, #36]	; 0x24
 80063d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063da:	4641      	mov	r1, r8
 80063dc:	1854      	adds	r4, r2, r1
 80063de:	4649      	mov	r1, r9
 80063e0:	eb43 0501 	adc.w	r5, r3, r1
 80063e4:	f04f 0200 	mov.w	r2, #0
 80063e8:	f04f 0300 	mov.w	r3, #0
 80063ec:	00eb      	lsls	r3, r5, #3
 80063ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063f2:	00e2      	lsls	r2, r4, #3
 80063f4:	4614      	mov	r4, r2
 80063f6:	461d      	mov	r5, r3
 80063f8:	4643      	mov	r3, r8
 80063fa:	18e3      	adds	r3, r4, r3
 80063fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006400:	464b      	mov	r3, r9
 8006402:	eb45 0303 	adc.w	r3, r5, r3
 8006406:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800640a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006416:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800641a:	f04f 0200 	mov.w	r2, #0
 800641e:	f04f 0300 	mov.w	r3, #0
 8006422:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006426:	4629      	mov	r1, r5
 8006428:	008b      	lsls	r3, r1, #2
 800642a:	4621      	mov	r1, r4
 800642c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006430:	4621      	mov	r1, r4
 8006432:	008a      	lsls	r2, r1, #2
 8006434:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006438:	f7fa fbb2 	bl	8000ba0 <__aeabi_uldivmod>
 800643c:	4602      	mov	r2, r0
 800643e:	460b      	mov	r3, r1
 8006440:	4b60      	ldr	r3, [pc, #384]	; (80065c4 <UART_SetConfig+0x4e4>)
 8006442:	fba3 2302 	umull	r2, r3, r3, r2
 8006446:	095b      	lsrs	r3, r3, #5
 8006448:	011c      	lsls	r4, r3, #4
 800644a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800644e:	2200      	movs	r2, #0
 8006450:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006454:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006458:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800645c:	4642      	mov	r2, r8
 800645e:	464b      	mov	r3, r9
 8006460:	1891      	adds	r1, r2, r2
 8006462:	61b9      	str	r1, [r7, #24]
 8006464:	415b      	adcs	r3, r3
 8006466:	61fb      	str	r3, [r7, #28]
 8006468:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800646c:	4641      	mov	r1, r8
 800646e:	1851      	adds	r1, r2, r1
 8006470:	6139      	str	r1, [r7, #16]
 8006472:	4649      	mov	r1, r9
 8006474:	414b      	adcs	r3, r1
 8006476:	617b      	str	r3, [r7, #20]
 8006478:	f04f 0200 	mov.w	r2, #0
 800647c:	f04f 0300 	mov.w	r3, #0
 8006480:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006484:	4659      	mov	r1, fp
 8006486:	00cb      	lsls	r3, r1, #3
 8006488:	4651      	mov	r1, sl
 800648a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800648e:	4651      	mov	r1, sl
 8006490:	00ca      	lsls	r2, r1, #3
 8006492:	4610      	mov	r0, r2
 8006494:	4619      	mov	r1, r3
 8006496:	4603      	mov	r3, r0
 8006498:	4642      	mov	r2, r8
 800649a:	189b      	adds	r3, r3, r2
 800649c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80064a0:	464b      	mov	r3, r9
 80064a2:	460a      	mov	r2, r1
 80064a4:	eb42 0303 	adc.w	r3, r2, r3
 80064a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80064b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80064b8:	f04f 0200 	mov.w	r2, #0
 80064bc:	f04f 0300 	mov.w	r3, #0
 80064c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80064c4:	4649      	mov	r1, r9
 80064c6:	008b      	lsls	r3, r1, #2
 80064c8:	4641      	mov	r1, r8
 80064ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064ce:	4641      	mov	r1, r8
 80064d0:	008a      	lsls	r2, r1, #2
 80064d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80064d6:	f7fa fb63 	bl	8000ba0 <__aeabi_uldivmod>
 80064da:	4602      	mov	r2, r0
 80064dc:	460b      	mov	r3, r1
 80064de:	4b39      	ldr	r3, [pc, #228]	; (80065c4 <UART_SetConfig+0x4e4>)
 80064e0:	fba3 1302 	umull	r1, r3, r3, r2
 80064e4:	095b      	lsrs	r3, r3, #5
 80064e6:	2164      	movs	r1, #100	; 0x64
 80064e8:	fb01 f303 	mul.w	r3, r1, r3
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	011b      	lsls	r3, r3, #4
 80064f0:	3332      	adds	r3, #50	; 0x32
 80064f2:	4a34      	ldr	r2, [pc, #208]	; (80065c4 <UART_SetConfig+0x4e4>)
 80064f4:	fba2 2303 	umull	r2, r3, r2, r3
 80064f8:	095b      	lsrs	r3, r3, #5
 80064fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064fe:	441c      	add	r4, r3
 8006500:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006504:	2200      	movs	r2, #0
 8006506:	673b      	str	r3, [r7, #112]	; 0x70
 8006508:	677a      	str	r2, [r7, #116]	; 0x74
 800650a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800650e:	4642      	mov	r2, r8
 8006510:	464b      	mov	r3, r9
 8006512:	1891      	adds	r1, r2, r2
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	415b      	adcs	r3, r3
 8006518:	60fb      	str	r3, [r7, #12]
 800651a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800651e:	4641      	mov	r1, r8
 8006520:	1851      	adds	r1, r2, r1
 8006522:	6039      	str	r1, [r7, #0]
 8006524:	4649      	mov	r1, r9
 8006526:	414b      	adcs	r3, r1
 8006528:	607b      	str	r3, [r7, #4]
 800652a:	f04f 0200 	mov.w	r2, #0
 800652e:	f04f 0300 	mov.w	r3, #0
 8006532:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006536:	4659      	mov	r1, fp
 8006538:	00cb      	lsls	r3, r1, #3
 800653a:	4651      	mov	r1, sl
 800653c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006540:	4651      	mov	r1, sl
 8006542:	00ca      	lsls	r2, r1, #3
 8006544:	4610      	mov	r0, r2
 8006546:	4619      	mov	r1, r3
 8006548:	4603      	mov	r3, r0
 800654a:	4642      	mov	r2, r8
 800654c:	189b      	adds	r3, r3, r2
 800654e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006550:	464b      	mov	r3, r9
 8006552:	460a      	mov	r2, r1
 8006554:	eb42 0303 	adc.w	r3, r2, r3
 8006558:	66fb      	str	r3, [r7, #108]	; 0x6c
 800655a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	663b      	str	r3, [r7, #96]	; 0x60
 8006564:	667a      	str	r2, [r7, #100]	; 0x64
 8006566:	f04f 0200 	mov.w	r2, #0
 800656a:	f04f 0300 	mov.w	r3, #0
 800656e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006572:	4649      	mov	r1, r9
 8006574:	008b      	lsls	r3, r1, #2
 8006576:	4641      	mov	r1, r8
 8006578:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800657c:	4641      	mov	r1, r8
 800657e:	008a      	lsls	r2, r1, #2
 8006580:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006584:	f7fa fb0c 	bl	8000ba0 <__aeabi_uldivmod>
 8006588:	4602      	mov	r2, r0
 800658a:	460b      	mov	r3, r1
 800658c:	4b0d      	ldr	r3, [pc, #52]	; (80065c4 <UART_SetConfig+0x4e4>)
 800658e:	fba3 1302 	umull	r1, r3, r3, r2
 8006592:	095b      	lsrs	r3, r3, #5
 8006594:	2164      	movs	r1, #100	; 0x64
 8006596:	fb01 f303 	mul.w	r3, r1, r3
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	011b      	lsls	r3, r3, #4
 800659e:	3332      	adds	r3, #50	; 0x32
 80065a0:	4a08      	ldr	r2, [pc, #32]	; (80065c4 <UART_SetConfig+0x4e4>)
 80065a2:	fba2 2303 	umull	r2, r3, r2, r3
 80065a6:	095b      	lsrs	r3, r3, #5
 80065a8:	f003 020f 	and.w	r2, r3, #15
 80065ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4422      	add	r2, r4
 80065b4:	609a      	str	r2, [r3, #8]
}
 80065b6:	bf00      	nop
 80065b8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80065bc:	46bd      	mov	sp, r7
 80065be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065c2:	bf00      	nop
 80065c4:	51eb851f 	.word	0x51eb851f

080065c8 <__errno>:
 80065c8:	4b01      	ldr	r3, [pc, #4]	; (80065d0 <__errno+0x8>)
 80065ca:	6818      	ldr	r0, [r3, #0]
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	2000001c 	.word	0x2000001c

080065d4 <__libc_init_array>:
 80065d4:	b570      	push	{r4, r5, r6, lr}
 80065d6:	4d0d      	ldr	r5, [pc, #52]	; (800660c <__libc_init_array+0x38>)
 80065d8:	4c0d      	ldr	r4, [pc, #52]	; (8006610 <__libc_init_array+0x3c>)
 80065da:	1b64      	subs	r4, r4, r5
 80065dc:	10a4      	asrs	r4, r4, #2
 80065de:	2600      	movs	r6, #0
 80065e0:	42a6      	cmp	r6, r4
 80065e2:	d109      	bne.n	80065f8 <__libc_init_array+0x24>
 80065e4:	4d0b      	ldr	r5, [pc, #44]	; (8006614 <__libc_init_array+0x40>)
 80065e6:	4c0c      	ldr	r4, [pc, #48]	; (8006618 <__libc_init_array+0x44>)
 80065e8:	f001 fb56 	bl	8007c98 <_init>
 80065ec:	1b64      	subs	r4, r4, r5
 80065ee:	10a4      	asrs	r4, r4, #2
 80065f0:	2600      	movs	r6, #0
 80065f2:	42a6      	cmp	r6, r4
 80065f4:	d105      	bne.n	8006602 <__libc_init_array+0x2e>
 80065f6:	bd70      	pop	{r4, r5, r6, pc}
 80065f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80065fc:	4798      	blx	r3
 80065fe:	3601      	adds	r6, #1
 8006600:	e7ee      	b.n	80065e0 <__libc_init_array+0xc>
 8006602:	f855 3b04 	ldr.w	r3, [r5], #4
 8006606:	4798      	blx	r3
 8006608:	3601      	adds	r6, #1
 800660a:	e7f2      	b.n	80065f2 <__libc_init_array+0x1e>
 800660c:	080085b8 	.word	0x080085b8
 8006610:	080085b8 	.word	0x080085b8
 8006614:	080085b8 	.word	0x080085b8
 8006618:	080085bc 	.word	0x080085bc

0800661c <memset>:
 800661c:	4402      	add	r2, r0
 800661e:	4603      	mov	r3, r0
 8006620:	4293      	cmp	r3, r2
 8006622:	d100      	bne.n	8006626 <memset+0xa>
 8006624:	4770      	bx	lr
 8006626:	f803 1b01 	strb.w	r1, [r3], #1
 800662a:	e7f9      	b.n	8006620 <memset+0x4>

0800662c <pow>:
 800662c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662e:	ed2d 8b02 	vpush	{d8}
 8006632:	eeb0 8a40 	vmov.f32	s16, s0
 8006636:	eef0 8a60 	vmov.f32	s17, s1
 800663a:	ec55 4b11 	vmov	r4, r5, d1
 800663e:	f000 f907 	bl	8006850 <__ieee754_pow>
 8006642:	4622      	mov	r2, r4
 8006644:	462b      	mov	r3, r5
 8006646:	4620      	mov	r0, r4
 8006648:	4629      	mov	r1, r5
 800664a:	ec57 6b10 	vmov	r6, r7, d0
 800664e:	f7fa fa19 	bl	8000a84 <__aeabi_dcmpun>
 8006652:	2800      	cmp	r0, #0
 8006654:	d13b      	bne.n	80066ce <pow+0xa2>
 8006656:	ec51 0b18 	vmov	r0, r1, d8
 800665a:	2200      	movs	r2, #0
 800665c:	2300      	movs	r3, #0
 800665e:	f7fa f9df 	bl	8000a20 <__aeabi_dcmpeq>
 8006662:	b1b8      	cbz	r0, 8006694 <pow+0x68>
 8006664:	2200      	movs	r2, #0
 8006666:	2300      	movs	r3, #0
 8006668:	4620      	mov	r0, r4
 800666a:	4629      	mov	r1, r5
 800666c:	f7fa f9d8 	bl	8000a20 <__aeabi_dcmpeq>
 8006670:	2800      	cmp	r0, #0
 8006672:	d146      	bne.n	8006702 <pow+0xd6>
 8006674:	ec45 4b10 	vmov	d0, r4, r5
 8006678:	f001 f9f7 	bl	8007a6a <finite>
 800667c:	b338      	cbz	r0, 80066ce <pow+0xa2>
 800667e:	2200      	movs	r2, #0
 8006680:	2300      	movs	r3, #0
 8006682:	4620      	mov	r0, r4
 8006684:	4629      	mov	r1, r5
 8006686:	f7fa f9d5 	bl	8000a34 <__aeabi_dcmplt>
 800668a:	b300      	cbz	r0, 80066ce <pow+0xa2>
 800668c:	f7ff ff9c 	bl	80065c8 <__errno>
 8006690:	2322      	movs	r3, #34	; 0x22
 8006692:	e01b      	b.n	80066cc <pow+0xa0>
 8006694:	ec47 6b10 	vmov	d0, r6, r7
 8006698:	f001 f9e7 	bl	8007a6a <finite>
 800669c:	b9e0      	cbnz	r0, 80066d8 <pow+0xac>
 800669e:	eeb0 0a48 	vmov.f32	s0, s16
 80066a2:	eef0 0a68 	vmov.f32	s1, s17
 80066a6:	f001 f9e0 	bl	8007a6a <finite>
 80066aa:	b1a8      	cbz	r0, 80066d8 <pow+0xac>
 80066ac:	ec45 4b10 	vmov	d0, r4, r5
 80066b0:	f001 f9db 	bl	8007a6a <finite>
 80066b4:	b180      	cbz	r0, 80066d8 <pow+0xac>
 80066b6:	4632      	mov	r2, r6
 80066b8:	463b      	mov	r3, r7
 80066ba:	4630      	mov	r0, r6
 80066bc:	4639      	mov	r1, r7
 80066be:	f7fa f9e1 	bl	8000a84 <__aeabi_dcmpun>
 80066c2:	2800      	cmp	r0, #0
 80066c4:	d0e2      	beq.n	800668c <pow+0x60>
 80066c6:	f7ff ff7f 	bl	80065c8 <__errno>
 80066ca:	2321      	movs	r3, #33	; 0x21
 80066cc:	6003      	str	r3, [r0, #0]
 80066ce:	ecbd 8b02 	vpop	{d8}
 80066d2:	ec47 6b10 	vmov	d0, r6, r7
 80066d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066d8:	2200      	movs	r2, #0
 80066da:	2300      	movs	r3, #0
 80066dc:	4630      	mov	r0, r6
 80066de:	4639      	mov	r1, r7
 80066e0:	f7fa f99e 	bl	8000a20 <__aeabi_dcmpeq>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	d0f2      	beq.n	80066ce <pow+0xa2>
 80066e8:	eeb0 0a48 	vmov.f32	s0, s16
 80066ec:	eef0 0a68 	vmov.f32	s1, s17
 80066f0:	f001 f9bb 	bl	8007a6a <finite>
 80066f4:	2800      	cmp	r0, #0
 80066f6:	d0ea      	beq.n	80066ce <pow+0xa2>
 80066f8:	ec45 4b10 	vmov	d0, r4, r5
 80066fc:	f001 f9b5 	bl	8007a6a <finite>
 8006700:	e7c3      	b.n	800668a <pow+0x5e>
 8006702:	4f01      	ldr	r7, [pc, #4]	; (8006708 <pow+0xdc>)
 8006704:	2600      	movs	r6, #0
 8006706:	e7e2      	b.n	80066ce <pow+0xa2>
 8006708:	3ff00000 	.word	0x3ff00000

0800670c <sqrt>:
 800670c:	b538      	push	{r3, r4, r5, lr}
 800670e:	ed2d 8b02 	vpush	{d8}
 8006712:	ec55 4b10 	vmov	r4, r5, d0
 8006716:	f000 fdc9 	bl	80072ac <__ieee754_sqrt>
 800671a:	4622      	mov	r2, r4
 800671c:	462b      	mov	r3, r5
 800671e:	4620      	mov	r0, r4
 8006720:	4629      	mov	r1, r5
 8006722:	eeb0 8a40 	vmov.f32	s16, s0
 8006726:	eef0 8a60 	vmov.f32	s17, s1
 800672a:	f7fa f9ab 	bl	8000a84 <__aeabi_dcmpun>
 800672e:	b990      	cbnz	r0, 8006756 <sqrt+0x4a>
 8006730:	2200      	movs	r2, #0
 8006732:	2300      	movs	r3, #0
 8006734:	4620      	mov	r0, r4
 8006736:	4629      	mov	r1, r5
 8006738:	f7fa f97c 	bl	8000a34 <__aeabi_dcmplt>
 800673c:	b158      	cbz	r0, 8006756 <sqrt+0x4a>
 800673e:	f7ff ff43 	bl	80065c8 <__errno>
 8006742:	2321      	movs	r3, #33	; 0x21
 8006744:	6003      	str	r3, [r0, #0]
 8006746:	2200      	movs	r2, #0
 8006748:	2300      	movs	r3, #0
 800674a:	4610      	mov	r0, r2
 800674c:	4619      	mov	r1, r3
 800674e:	f7fa f829 	bl	80007a4 <__aeabi_ddiv>
 8006752:	ec41 0b18 	vmov	d8, r0, r1
 8006756:	eeb0 0a48 	vmov.f32	s0, s16
 800675a:	eef0 0a68 	vmov.f32	s1, s17
 800675e:	ecbd 8b02 	vpop	{d8}
 8006762:	bd38      	pop	{r3, r4, r5, pc}

08006764 <powf>:
 8006764:	b508      	push	{r3, lr}
 8006766:	ed2d 8b04 	vpush	{d8-d9}
 800676a:	eeb0 8a60 	vmov.f32	s16, s1
 800676e:	eeb0 9a40 	vmov.f32	s18, s0
 8006772:	f000 fe4d 	bl	8007410 <__ieee754_powf>
 8006776:	eeb4 8a48 	vcmp.f32	s16, s16
 800677a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800677e:	eef0 8a40 	vmov.f32	s17, s0
 8006782:	d63e      	bvs.n	8006802 <powf+0x9e>
 8006784:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8006788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800678c:	d112      	bne.n	80067b4 <powf+0x50>
 800678e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006796:	d039      	beq.n	800680c <powf+0xa8>
 8006798:	eeb0 0a48 	vmov.f32	s0, s16
 800679c:	f001 f9fd 	bl	8007b9a <finitef>
 80067a0:	b378      	cbz	r0, 8006802 <powf+0x9e>
 80067a2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80067a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067aa:	d52a      	bpl.n	8006802 <powf+0x9e>
 80067ac:	f7ff ff0c 	bl	80065c8 <__errno>
 80067b0:	2322      	movs	r3, #34	; 0x22
 80067b2:	e014      	b.n	80067de <powf+0x7a>
 80067b4:	f001 f9f1 	bl	8007b9a <finitef>
 80067b8:	b998      	cbnz	r0, 80067e2 <powf+0x7e>
 80067ba:	eeb0 0a49 	vmov.f32	s0, s18
 80067be:	f001 f9ec 	bl	8007b9a <finitef>
 80067c2:	b170      	cbz	r0, 80067e2 <powf+0x7e>
 80067c4:	eeb0 0a48 	vmov.f32	s0, s16
 80067c8:	f001 f9e7 	bl	8007b9a <finitef>
 80067cc:	b148      	cbz	r0, 80067e2 <powf+0x7e>
 80067ce:	eef4 8a68 	vcmp.f32	s17, s17
 80067d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067d6:	d7e9      	bvc.n	80067ac <powf+0x48>
 80067d8:	f7ff fef6 	bl	80065c8 <__errno>
 80067dc:	2321      	movs	r3, #33	; 0x21
 80067de:	6003      	str	r3, [r0, #0]
 80067e0:	e00f      	b.n	8006802 <powf+0x9e>
 80067e2:	eef5 8a40 	vcmp.f32	s17, #0.0
 80067e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067ea:	d10a      	bne.n	8006802 <powf+0x9e>
 80067ec:	eeb0 0a49 	vmov.f32	s0, s18
 80067f0:	f001 f9d3 	bl	8007b9a <finitef>
 80067f4:	b128      	cbz	r0, 8006802 <powf+0x9e>
 80067f6:	eeb0 0a48 	vmov.f32	s0, s16
 80067fa:	f001 f9ce 	bl	8007b9a <finitef>
 80067fe:	2800      	cmp	r0, #0
 8006800:	d1d4      	bne.n	80067ac <powf+0x48>
 8006802:	eeb0 0a68 	vmov.f32	s0, s17
 8006806:	ecbd 8b04 	vpop	{d8-d9}
 800680a:	bd08      	pop	{r3, pc}
 800680c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8006810:	e7f7      	b.n	8006802 <powf+0x9e>
	...

08006814 <sqrtf>:
 8006814:	b508      	push	{r3, lr}
 8006816:	ed2d 8b02 	vpush	{d8}
 800681a:	eeb0 8a40 	vmov.f32	s16, s0
 800681e:	f001 f8c5 	bl	80079ac <__ieee754_sqrtf>
 8006822:	eeb4 8a48 	vcmp.f32	s16, s16
 8006826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800682a:	d60c      	bvs.n	8006846 <sqrtf+0x32>
 800682c:	eddf 8a07 	vldr	s17, [pc, #28]	; 800684c <sqrtf+0x38>
 8006830:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006838:	d505      	bpl.n	8006846 <sqrtf+0x32>
 800683a:	f7ff fec5 	bl	80065c8 <__errno>
 800683e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006842:	2321      	movs	r3, #33	; 0x21
 8006844:	6003      	str	r3, [r0, #0]
 8006846:	ecbd 8b02 	vpop	{d8}
 800684a:	bd08      	pop	{r3, pc}
 800684c:	00000000 	.word	0x00000000

08006850 <__ieee754_pow>:
 8006850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006854:	ed2d 8b06 	vpush	{d8-d10}
 8006858:	b089      	sub	sp, #36	; 0x24
 800685a:	ed8d 1b00 	vstr	d1, [sp]
 800685e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006862:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006866:	ea58 0102 	orrs.w	r1, r8, r2
 800686a:	ec57 6b10 	vmov	r6, r7, d0
 800686e:	d115      	bne.n	800689c <__ieee754_pow+0x4c>
 8006870:	19b3      	adds	r3, r6, r6
 8006872:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8006876:	4152      	adcs	r2, r2
 8006878:	4299      	cmp	r1, r3
 800687a:	4b89      	ldr	r3, [pc, #548]	; (8006aa0 <__ieee754_pow+0x250>)
 800687c:	4193      	sbcs	r3, r2
 800687e:	f080 84d2 	bcs.w	8007226 <__ieee754_pow+0x9d6>
 8006882:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006886:	4630      	mov	r0, r6
 8006888:	4639      	mov	r1, r7
 800688a:	f7f9 fcab 	bl	80001e4 <__adddf3>
 800688e:	ec41 0b10 	vmov	d0, r0, r1
 8006892:	b009      	add	sp, #36	; 0x24
 8006894:	ecbd 8b06 	vpop	{d8-d10}
 8006898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800689c:	4b81      	ldr	r3, [pc, #516]	; (8006aa4 <__ieee754_pow+0x254>)
 800689e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80068a2:	429c      	cmp	r4, r3
 80068a4:	ee10 aa10 	vmov	sl, s0
 80068a8:	463d      	mov	r5, r7
 80068aa:	dc06      	bgt.n	80068ba <__ieee754_pow+0x6a>
 80068ac:	d101      	bne.n	80068b2 <__ieee754_pow+0x62>
 80068ae:	2e00      	cmp	r6, #0
 80068b0:	d1e7      	bne.n	8006882 <__ieee754_pow+0x32>
 80068b2:	4598      	cmp	r8, r3
 80068b4:	dc01      	bgt.n	80068ba <__ieee754_pow+0x6a>
 80068b6:	d10f      	bne.n	80068d8 <__ieee754_pow+0x88>
 80068b8:	b172      	cbz	r2, 80068d8 <__ieee754_pow+0x88>
 80068ba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80068be:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80068c2:	ea55 050a 	orrs.w	r5, r5, sl
 80068c6:	d1dc      	bne.n	8006882 <__ieee754_pow+0x32>
 80068c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80068cc:	18db      	adds	r3, r3, r3
 80068ce:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80068d2:	4152      	adcs	r2, r2
 80068d4:	429d      	cmp	r5, r3
 80068d6:	e7d0      	b.n	800687a <__ieee754_pow+0x2a>
 80068d8:	2d00      	cmp	r5, #0
 80068da:	da3b      	bge.n	8006954 <__ieee754_pow+0x104>
 80068dc:	4b72      	ldr	r3, [pc, #456]	; (8006aa8 <__ieee754_pow+0x258>)
 80068de:	4598      	cmp	r8, r3
 80068e0:	dc51      	bgt.n	8006986 <__ieee754_pow+0x136>
 80068e2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80068e6:	4598      	cmp	r8, r3
 80068e8:	f340 84ac 	ble.w	8007244 <__ieee754_pow+0x9f4>
 80068ec:	ea4f 5328 	mov.w	r3, r8, asr #20
 80068f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80068f4:	2b14      	cmp	r3, #20
 80068f6:	dd0f      	ble.n	8006918 <__ieee754_pow+0xc8>
 80068f8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80068fc:	fa22 f103 	lsr.w	r1, r2, r3
 8006900:	fa01 f303 	lsl.w	r3, r1, r3
 8006904:	4293      	cmp	r3, r2
 8006906:	f040 849d 	bne.w	8007244 <__ieee754_pow+0x9f4>
 800690a:	f001 0101 	and.w	r1, r1, #1
 800690e:	f1c1 0302 	rsb	r3, r1, #2
 8006912:	9304      	str	r3, [sp, #16]
 8006914:	b182      	cbz	r2, 8006938 <__ieee754_pow+0xe8>
 8006916:	e05f      	b.n	80069d8 <__ieee754_pow+0x188>
 8006918:	2a00      	cmp	r2, #0
 800691a:	d15b      	bne.n	80069d4 <__ieee754_pow+0x184>
 800691c:	f1c3 0314 	rsb	r3, r3, #20
 8006920:	fa48 f103 	asr.w	r1, r8, r3
 8006924:	fa01 f303 	lsl.w	r3, r1, r3
 8006928:	4543      	cmp	r3, r8
 800692a:	f040 8488 	bne.w	800723e <__ieee754_pow+0x9ee>
 800692e:	f001 0101 	and.w	r1, r1, #1
 8006932:	f1c1 0302 	rsb	r3, r1, #2
 8006936:	9304      	str	r3, [sp, #16]
 8006938:	4b5c      	ldr	r3, [pc, #368]	; (8006aac <__ieee754_pow+0x25c>)
 800693a:	4598      	cmp	r8, r3
 800693c:	d132      	bne.n	80069a4 <__ieee754_pow+0x154>
 800693e:	f1b9 0f00 	cmp.w	r9, #0
 8006942:	f280 8478 	bge.w	8007236 <__ieee754_pow+0x9e6>
 8006946:	4959      	ldr	r1, [pc, #356]	; (8006aac <__ieee754_pow+0x25c>)
 8006948:	4632      	mov	r2, r6
 800694a:	463b      	mov	r3, r7
 800694c:	2000      	movs	r0, #0
 800694e:	f7f9 ff29 	bl	80007a4 <__aeabi_ddiv>
 8006952:	e79c      	b.n	800688e <__ieee754_pow+0x3e>
 8006954:	2300      	movs	r3, #0
 8006956:	9304      	str	r3, [sp, #16]
 8006958:	2a00      	cmp	r2, #0
 800695a:	d13d      	bne.n	80069d8 <__ieee754_pow+0x188>
 800695c:	4b51      	ldr	r3, [pc, #324]	; (8006aa4 <__ieee754_pow+0x254>)
 800695e:	4598      	cmp	r8, r3
 8006960:	d1ea      	bne.n	8006938 <__ieee754_pow+0xe8>
 8006962:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006966:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800696a:	ea53 030a 	orrs.w	r3, r3, sl
 800696e:	f000 845a 	beq.w	8007226 <__ieee754_pow+0x9d6>
 8006972:	4b4f      	ldr	r3, [pc, #316]	; (8006ab0 <__ieee754_pow+0x260>)
 8006974:	429c      	cmp	r4, r3
 8006976:	dd08      	ble.n	800698a <__ieee754_pow+0x13a>
 8006978:	f1b9 0f00 	cmp.w	r9, #0
 800697c:	f2c0 8457 	blt.w	800722e <__ieee754_pow+0x9de>
 8006980:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006984:	e783      	b.n	800688e <__ieee754_pow+0x3e>
 8006986:	2302      	movs	r3, #2
 8006988:	e7e5      	b.n	8006956 <__ieee754_pow+0x106>
 800698a:	f1b9 0f00 	cmp.w	r9, #0
 800698e:	f04f 0000 	mov.w	r0, #0
 8006992:	f04f 0100 	mov.w	r1, #0
 8006996:	f6bf af7a 	bge.w	800688e <__ieee754_pow+0x3e>
 800699a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800699e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80069a2:	e774      	b.n	800688e <__ieee754_pow+0x3e>
 80069a4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80069a8:	d106      	bne.n	80069b8 <__ieee754_pow+0x168>
 80069aa:	4632      	mov	r2, r6
 80069ac:	463b      	mov	r3, r7
 80069ae:	4630      	mov	r0, r6
 80069b0:	4639      	mov	r1, r7
 80069b2:	f7f9 fdcd 	bl	8000550 <__aeabi_dmul>
 80069b6:	e76a      	b.n	800688e <__ieee754_pow+0x3e>
 80069b8:	4b3e      	ldr	r3, [pc, #248]	; (8006ab4 <__ieee754_pow+0x264>)
 80069ba:	4599      	cmp	r9, r3
 80069bc:	d10c      	bne.n	80069d8 <__ieee754_pow+0x188>
 80069be:	2d00      	cmp	r5, #0
 80069c0:	db0a      	blt.n	80069d8 <__ieee754_pow+0x188>
 80069c2:	ec47 6b10 	vmov	d0, r6, r7
 80069c6:	b009      	add	sp, #36	; 0x24
 80069c8:	ecbd 8b06 	vpop	{d8-d10}
 80069cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d0:	f000 bc6c 	b.w	80072ac <__ieee754_sqrt>
 80069d4:	2300      	movs	r3, #0
 80069d6:	9304      	str	r3, [sp, #16]
 80069d8:	ec47 6b10 	vmov	d0, r6, r7
 80069dc:	f001 f83c 	bl	8007a58 <fabs>
 80069e0:	ec51 0b10 	vmov	r0, r1, d0
 80069e4:	f1ba 0f00 	cmp.w	sl, #0
 80069e8:	d129      	bne.n	8006a3e <__ieee754_pow+0x1ee>
 80069ea:	b124      	cbz	r4, 80069f6 <__ieee754_pow+0x1a6>
 80069ec:	4b2f      	ldr	r3, [pc, #188]	; (8006aac <__ieee754_pow+0x25c>)
 80069ee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d123      	bne.n	8006a3e <__ieee754_pow+0x1ee>
 80069f6:	f1b9 0f00 	cmp.w	r9, #0
 80069fa:	da05      	bge.n	8006a08 <__ieee754_pow+0x1b8>
 80069fc:	4602      	mov	r2, r0
 80069fe:	460b      	mov	r3, r1
 8006a00:	2000      	movs	r0, #0
 8006a02:	492a      	ldr	r1, [pc, #168]	; (8006aac <__ieee754_pow+0x25c>)
 8006a04:	f7f9 fece 	bl	80007a4 <__aeabi_ddiv>
 8006a08:	2d00      	cmp	r5, #0
 8006a0a:	f6bf af40 	bge.w	800688e <__ieee754_pow+0x3e>
 8006a0e:	9b04      	ldr	r3, [sp, #16]
 8006a10:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006a14:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006a18:	4323      	orrs	r3, r4
 8006a1a:	d108      	bne.n	8006a2e <__ieee754_pow+0x1de>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	460b      	mov	r3, r1
 8006a20:	4610      	mov	r0, r2
 8006a22:	4619      	mov	r1, r3
 8006a24:	f7f9 fbdc 	bl	80001e0 <__aeabi_dsub>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	e78f      	b.n	800694e <__ieee754_pow+0xfe>
 8006a2e:	9b04      	ldr	r3, [sp, #16]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	f47f af2c 	bne.w	800688e <__ieee754_pow+0x3e>
 8006a36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	e727      	b.n	800688e <__ieee754_pow+0x3e>
 8006a3e:	0feb      	lsrs	r3, r5, #31
 8006a40:	3b01      	subs	r3, #1
 8006a42:	9306      	str	r3, [sp, #24]
 8006a44:	9a06      	ldr	r2, [sp, #24]
 8006a46:	9b04      	ldr	r3, [sp, #16]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	d102      	bne.n	8006a52 <__ieee754_pow+0x202>
 8006a4c:	4632      	mov	r2, r6
 8006a4e:	463b      	mov	r3, r7
 8006a50:	e7e6      	b.n	8006a20 <__ieee754_pow+0x1d0>
 8006a52:	4b19      	ldr	r3, [pc, #100]	; (8006ab8 <__ieee754_pow+0x268>)
 8006a54:	4598      	cmp	r8, r3
 8006a56:	f340 80fb 	ble.w	8006c50 <__ieee754_pow+0x400>
 8006a5a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006a5e:	4598      	cmp	r8, r3
 8006a60:	4b13      	ldr	r3, [pc, #76]	; (8006ab0 <__ieee754_pow+0x260>)
 8006a62:	dd0c      	ble.n	8006a7e <__ieee754_pow+0x22e>
 8006a64:	429c      	cmp	r4, r3
 8006a66:	dc0f      	bgt.n	8006a88 <__ieee754_pow+0x238>
 8006a68:	f1b9 0f00 	cmp.w	r9, #0
 8006a6c:	da0f      	bge.n	8006a8e <__ieee754_pow+0x23e>
 8006a6e:	2000      	movs	r0, #0
 8006a70:	b009      	add	sp, #36	; 0x24
 8006a72:	ecbd 8b06 	vpop	{d8-d10}
 8006a76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a7a:	f000 bfc1 	b.w	8007a00 <__math_oflow>
 8006a7e:	429c      	cmp	r4, r3
 8006a80:	dbf2      	blt.n	8006a68 <__ieee754_pow+0x218>
 8006a82:	4b0a      	ldr	r3, [pc, #40]	; (8006aac <__ieee754_pow+0x25c>)
 8006a84:	429c      	cmp	r4, r3
 8006a86:	dd19      	ble.n	8006abc <__ieee754_pow+0x26c>
 8006a88:	f1b9 0f00 	cmp.w	r9, #0
 8006a8c:	dcef      	bgt.n	8006a6e <__ieee754_pow+0x21e>
 8006a8e:	2000      	movs	r0, #0
 8006a90:	b009      	add	sp, #36	; 0x24
 8006a92:	ecbd 8b06 	vpop	{d8-d10}
 8006a96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a9a:	f000 bfa8 	b.w	80079ee <__math_uflow>
 8006a9e:	bf00      	nop
 8006aa0:	fff00000 	.word	0xfff00000
 8006aa4:	7ff00000 	.word	0x7ff00000
 8006aa8:	433fffff 	.word	0x433fffff
 8006aac:	3ff00000 	.word	0x3ff00000
 8006ab0:	3fefffff 	.word	0x3fefffff
 8006ab4:	3fe00000 	.word	0x3fe00000
 8006ab8:	41e00000 	.word	0x41e00000
 8006abc:	4b60      	ldr	r3, [pc, #384]	; (8006c40 <__ieee754_pow+0x3f0>)
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f7f9 fb8e 	bl	80001e0 <__aeabi_dsub>
 8006ac4:	a354      	add	r3, pc, #336	; (adr r3, 8006c18 <__ieee754_pow+0x3c8>)
 8006ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aca:	4604      	mov	r4, r0
 8006acc:	460d      	mov	r5, r1
 8006ace:	f7f9 fd3f 	bl	8000550 <__aeabi_dmul>
 8006ad2:	a353      	add	r3, pc, #332	; (adr r3, 8006c20 <__ieee754_pow+0x3d0>)
 8006ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad8:	4606      	mov	r6, r0
 8006ada:	460f      	mov	r7, r1
 8006adc:	4620      	mov	r0, r4
 8006ade:	4629      	mov	r1, r5
 8006ae0:	f7f9 fd36 	bl	8000550 <__aeabi_dmul>
 8006ae4:	4b57      	ldr	r3, [pc, #348]	; (8006c44 <__ieee754_pow+0x3f4>)
 8006ae6:	4682      	mov	sl, r0
 8006ae8:	468b      	mov	fp, r1
 8006aea:	2200      	movs	r2, #0
 8006aec:	4620      	mov	r0, r4
 8006aee:	4629      	mov	r1, r5
 8006af0:	f7f9 fd2e 	bl	8000550 <__aeabi_dmul>
 8006af4:	4602      	mov	r2, r0
 8006af6:	460b      	mov	r3, r1
 8006af8:	a14b      	add	r1, pc, #300	; (adr r1, 8006c28 <__ieee754_pow+0x3d8>)
 8006afa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006afe:	f7f9 fb6f 	bl	80001e0 <__aeabi_dsub>
 8006b02:	4622      	mov	r2, r4
 8006b04:	462b      	mov	r3, r5
 8006b06:	f7f9 fd23 	bl	8000550 <__aeabi_dmul>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	2000      	movs	r0, #0
 8006b10:	494d      	ldr	r1, [pc, #308]	; (8006c48 <__ieee754_pow+0x3f8>)
 8006b12:	f7f9 fb65 	bl	80001e0 <__aeabi_dsub>
 8006b16:	4622      	mov	r2, r4
 8006b18:	4680      	mov	r8, r0
 8006b1a:	4689      	mov	r9, r1
 8006b1c:	462b      	mov	r3, r5
 8006b1e:	4620      	mov	r0, r4
 8006b20:	4629      	mov	r1, r5
 8006b22:	f7f9 fd15 	bl	8000550 <__aeabi_dmul>
 8006b26:	4602      	mov	r2, r0
 8006b28:	460b      	mov	r3, r1
 8006b2a:	4640      	mov	r0, r8
 8006b2c:	4649      	mov	r1, r9
 8006b2e:	f7f9 fd0f 	bl	8000550 <__aeabi_dmul>
 8006b32:	a33f      	add	r3, pc, #252	; (adr r3, 8006c30 <__ieee754_pow+0x3e0>)
 8006b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b38:	f7f9 fd0a 	bl	8000550 <__aeabi_dmul>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4650      	mov	r0, sl
 8006b42:	4659      	mov	r1, fp
 8006b44:	f7f9 fb4c 	bl	80001e0 <__aeabi_dsub>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	4680      	mov	r8, r0
 8006b4e:	4689      	mov	r9, r1
 8006b50:	4630      	mov	r0, r6
 8006b52:	4639      	mov	r1, r7
 8006b54:	f7f9 fb46 	bl	80001e4 <__adddf3>
 8006b58:	2000      	movs	r0, #0
 8006b5a:	4632      	mov	r2, r6
 8006b5c:	463b      	mov	r3, r7
 8006b5e:	4604      	mov	r4, r0
 8006b60:	460d      	mov	r5, r1
 8006b62:	f7f9 fb3d 	bl	80001e0 <__aeabi_dsub>
 8006b66:	4602      	mov	r2, r0
 8006b68:	460b      	mov	r3, r1
 8006b6a:	4640      	mov	r0, r8
 8006b6c:	4649      	mov	r1, r9
 8006b6e:	f7f9 fb37 	bl	80001e0 <__aeabi_dsub>
 8006b72:	9b04      	ldr	r3, [sp, #16]
 8006b74:	9a06      	ldr	r2, [sp, #24]
 8006b76:	3b01      	subs	r3, #1
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	4682      	mov	sl, r0
 8006b7c:	468b      	mov	fp, r1
 8006b7e:	f040 81e7 	bne.w	8006f50 <__ieee754_pow+0x700>
 8006b82:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006c38 <__ieee754_pow+0x3e8>
 8006b86:	eeb0 8a47 	vmov.f32	s16, s14
 8006b8a:	eef0 8a67 	vmov.f32	s17, s15
 8006b8e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006b92:	2600      	movs	r6, #0
 8006b94:	4632      	mov	r2, r6
 8006b96:	463b      	mov	r3, r7
 8006b98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b9c:	f7f9 fb20 	bl	80001e0 <__aeabi_dsub>
 8006ba0:	4622      	mov	r2, r4
 8006ba2:	462b      	mov	r3, r5
 8006ba4:	f7f9 fcd4 	bl	8000550 <__aeabi_dmul>
 8006ba8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bac:	4680      	mov	r8, r0
 8006bae:	4689      	mov	r9, r1
 8006bb0:	4650      	mov	r0, sl
 8006bb2:	4659      	mov	r1, fp
 8006bb4:	f7f9 fccc 	bl	8000550 <__aeabi_dmul>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	460b      	mov	r3, r1
 8006bbc:	4640      	mov	r0, r8
 8006bbe:	4649      	mov	r1, r9
 8006bc0:	f7f9 fb10 	bl	80001e4 <__adddf3>
 8006bc4:	4632      	mov	r2, r6
 8006bc6:	463b      	mov	r3, r7
 8006bc8:	4680      	mov	r8, r0
 8006bca:	4689      	mov	r9, r1
 8006bcc:	4620      	mov	r0, r4
 8006bce:	4629      	mov	r1, r5
 8006bd0:	f7f9 fcbe 	bl	8000550 <__aeabi_dmul>
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	4604      	mov	r4, r0
 8006bd8:	460d      	mov	r5, r1
 8006bda:	4602      	mov	r2, r0
 8006bdc:	4649      	mov	r1, r9
 8006bde:	4640      	mov	r0, r8
 8006be0:	f7f9 fb00 	bl	80001e4 <__adddf3>
 8006be4:	4b19      	ldr	r3, [pc, #100]	; (8006c4c <__ieee754_pow+0x3fc>)
 8006be6:	4299      	cmp	r1, r3
 8006be8:	ec45 4b19 	vmov	d9, r4, r5
 8006bec:	4606      	mov	r6, r0
 8006bee:	460f      	mov	r7, r1
 8006bf0:	468b      	mov	fp, r1
 8006bf2:	f340 82f1 	ble.w	80071d8 <__ieee754_pow+0x988>
 8006bf6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006bfa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006bfe:	4303      	orrs	r3, r0
 8006c00:	f000 81e4 	beq.w	8006fcc <__ieee754_pow+0x77c>
 8006c04:	ec51 0b18 	vmov	r0, r1, d8
 8006c08:	2200      	movs	r2, #0
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	f7f9 ff12 	bl	8000a34 <__aeabi_dcmplt>
 8006c10:	3800      	subs	r0, #0
 8006c12:	bf18      	it	ne
 8006c14:	2001      	movne	r0, #1
 8006c16:	e72b      	b.n	8006a70 <__ieee754_pow+0x220>
 8006c18:	60000000 	.word	0x60000000
 8006c1c:	3ff71547 	.word	0x3ff71547
 8006c20:	f85ddf44 	.word	0xf85ddf44
 8006c24:	3e54ae0b 	.word	0x3e54ae0b
 8006c28:	55555555 	.word	0x55555555
 8006c2c:	3fd55555 	.word	0x3fd55555
 8006c30:	652b82fe 	.word	0x652b82fe
 8006c34:	3ff71547 	.word	0x3ff71547
 8006c38:	00000000 	.word	0x00000000
 8006c3c:	bff00000 	.word	0xbff00000
 8006c40:	3ff00000 	.word	0x3ff00000
 8006c44:	3fd00000 	.word	0x3fd00000
 8006c48:	3fe00000 	.word	0x3fe00000
 8006c4c:	408fffff 	.word	0x408fffff
 8006c50:	4bd5      	ldr	r3, [pc, #852]	; (8006fa8 <__ieee754_pow+0x758>)
 8006c52:	402b      	ands	r3, r5
 8006c54:	2200      	movs	r2, #0
 8006c56:	b92b      	cbnz	r3, 8006c64 <__ieee754_pow+0x414>
 8006c58:	4bd4      	ldr	r3, [pc, #848]	; (8006fac <__ieee754_pow+0x75c>)
 8006c5a:	f7f9 fc79 	bl	8000550 <__aeabi_dmul>
 8006c5e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006c62:	460c      	mov	r4, r1
 8006c64:	1523      	asrs	r3, r4, #20
 8006c66:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006c6a:	4413      	add	r3, r2
 8006c6c:	9305      	str	r3, [sp, #20]
 8006c6e:	4bd0      	ldr	r3, [pc, #832]	; (8006fb0 <__ieee754_pow+0x760>)
 8006c70:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006c74:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006c78:	429c      	cmp	r4, r3
 8006c7a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006c7e:	dd08      	ble.n	8006c92 <__ieee754_pow+0x442>
 8006c80:	4bcc      	ldr	r3, [pc, #816]	; (8006fb4 <__ieee754_pow+0x764>)
 8006c82:	429c      	cmp	r4, r3
 8006c84:	f340 8162 	ble.w	8006f4c <__ieee754_pow+0x6fc>
 8006c88:	9b05      	ldr	r3, [sp, #20]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	9305      	str	r3, [sp, #20]
 8006c8e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006c92:	2400      	movs	r4, #0
 8006c94:	00e3      	lsls	r3, r4, #3
 8006c96:	9307      	str	r3, [sp, #28]
 8006c98:	4bc7      	ldr	r3, [pc, #796]	; (8006fb8 <__ieee754_pow+0x768>)
 8006c9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c9e:	ed93 7b00 	vldr	d7, [r3]
 8006ca2:	4629      	mov	r1, r5
 8006ca4:	ec53 2b17 	vmov	r2, r3, d7
 8006ca8:	eeb0 9a47 	vmov.f32	s18, s14
 8006cac:	eef0 9a67 	vmov.f32	s19, s15
 8006cb0:	4682      	mov	sl, r0
 8006cb2:	f7f9 fa95 	bl	80001e0 <__aeabi_dsub>
 8006cb6:	4652      	mov	r2, sl
 8006cb8:	4606      	mov	r6, r0
 8006cba:	460f      	mov	r7, r1
 8006cbc:	462b      	mov	r3, r5
 8006cbe:	ec51 0b19 	vmov	r0, r1, d9
 8006cc2:	f7f9 fa8f 	bl	80001e4 <__adddf3>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	460b      	mov	r3, r1
 8006cca:	2000      	movs	r0, #0
 8006ccc:	49bb      	ldr	r1, [pc, #748]	; (8006fbc <__ieee754_pow+0x76c>)
 8006cce:	f7f9 fd69 	bl	80007a4 <__aeabi_ddiv>
 8006cd2:	ec41 0b1a 	vmov	d10, r0, r1
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	460b      	mov	r3, r1
 8006cda:	4630      	mov	r0, r6
 8006cdc:	4639      	mov	r1, r7
 8006cde:	f7f9 fc37 	bl	8000550 <__aeabi_dmul>
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ce8:	9302      	str	r3, [sp, #8]
 8006cea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006cee:	46ab      	mov	fp, r5
 8006cf0:	106d      	asrs	r5, r5, #1
 8006cf2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006cf6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006cfa:	ec41 0b18 	vmov	d8, r0, r1
 8006cfe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006d02:	2200      	movs	r2, #0
 8006d04:	4640      	mov	r0, r8
 8006d06:	4649      	mov	r1, r9
 8006d08:	4614      	mov	r4, r2
 8006d0a:	461d      	mov	r5, r3
 8006d0c:	f7f9 fc20 	bl	8000550 <__aeabi_dmul>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	4630      	mov	r0, r6
 8006d16:	4639      	mov	r1, r7
 8006d18:	f7f9 fa62 	bl	80001e0 <__aeabi_dsub>
 8006d1c:	ec53 2b19 	vmov	r2, r3, d9
 8006d20:	4606      	mov	r6, r0
 8006d22:	460f      	mov	r7, r1
 8006d24:	4620      	mov	r0, r4
 8006d26:	4629      	mov	r1, r5
 8006d28:	f7f9 fa5a 	bl	80001e0 <__aeabi_dsub>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	460b      	mov	r3, r1
 8006d30:	4650      	mov	r0, sl
 8006d32:	4659      	mov	r1, fp
 8006d34:	f7f9 fa54 	bl	80001e0 <__aeabi_dsub>
 8006d38:	4642      	mov	r2, r8
 8006d3a:	464b      	mov	r3, r9
 8006d3c:	f7f9 fc08 	bl	8000550 <__aeabi_dmul>
 8006d40:	4602      	mov	r2, r0
 8006d42:	460b      	mov	r3, r1
 8006d44:	4630      	mov	r0, r6
 8006d46:	4639      	mov	r1, r7
 8006d48:	f7f9 fa4a 	bl	80001e0 <__aeabi_dsub>
 8006d4c:	ec53 2b1a 	vmov	r2, r3, d10
 8006d50:	f7f9 fbfe 	bl	8000550 <__aeabi_dmul>
 8006d54:	ec53 2b18 	vmov	r2, r3, d8
 8006d58:	ec41 0b19 	vmov	d9, r0, r1
 8006d5c:	ec51 0b18 	vmov	r0, r1, d8
 8006d60:	f7f9 fbf6 	bl	8000550 <__aeabi_dmul>
 8006d64:	a37c      	add	r3, pc, #496	; (adr r3, 8006f58 <__ieee754_pow+0x708>)
 8006d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	460d      	mov	r5, r1
 8006d6e:	f7f9 fbef 	bl	8000550 <__aeabi_dmul>
 8006d72:	a37b      	add	r3, pc, #492	; (adr r3, 8006f60 <__ieee754_pow+0x710>)
 8006d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d78:	f7f9 fa34 	bl	80001e4 <__adddf3>
 8006d7c:	4622      	mov	r2, r4
 8006d7e:	462b      	mov	r3, r5
 8006d80:	f7f9 fbe6 	bl	8000550 <__aeabi_dmul>
 8006d84:	a378      	add	r3, pc, #480	; (adr r3, 8006f68 <__ieee754_pow+0x718>)
 8006d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8a:	f7f9 fa2b 	bl	80001e4 <__adddf3>
 8006d8e:	4622      	mov	r2, r4
 8006d90:	462b      	mov	r3, r5
 8006d92:	f7f9 fbdd 	bl	8000550 <__aeabi_dmul>
 8006d96:	a376      	add	r3, pc, #472	; (adr r3, 8006f70 <__ieee754_pow+0x720>)
 8006d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9c:	f7f9 fa22 	bl	80001e4 <__adddf3>
 8006da0:	4622      	mov	r2, r4
 8006da2:	462b      	mov	r3, r5
 8006da4:	f7f9 fbd4 	bl	8000550 <__aeabi_dmul>
 8006da8:	a373      	add	r3, pc, #460	; (adr r3, 8006f78 <__ieee754_pow+0x728>)
 8006daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dae:	f7f9 fa19 	bl	80001e4 <__adddf3>
 8006db2:	4622      	mov	r2, r4
 8006db4:	462b      	mov	r3, r5
 8006db6:	f7f9 fbcb 	bl	8000550 <__aeabi_dmul>
 8006dba:	a371      	add	r3, pc, #452	; (adr r3, 8006f80 <__ieee754_pow+0x730>)
 8006dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc0:	f7f9 fa10 	bl	80001e4 <__adddf3>
 8006dc4:	4622      	mov	r2, r4
 8006dc6:	4606      	mov	r6, r0
 8006dc8:	460f      	mov	r7, r1
 8006dca:	462b      	mov	r3, r5
 8006dcc:	4620      	mov	r0, r4
 8006dce:	4629      	mov	r1, r5
 8006dd0:	f7f9 fbbe 	bl	8000550 <__aeabi_dmul>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	4630      	mov	r0, r6
 8006dda:	4639      	mov	r1, r7
 8006ddc:	f7f9 fbb8 	bl	8000550 <__aeabi_dmul>
 8006de0:	4642      	mov	r2, r8
 8006de2:	4604      	mov	r4, r0
 8006de4:	460d      	mov	r5, r1
 8006de6:	464b      	mov	r3, r9
 8006de8:	ec51 0b18 	vmov	r0, r1, d8
 8006dec:	f7f9 f9fa 	bl	80001e4 <__adddf3>
 8006df0:	ec53 2b19 	vmov	r2, r3, d9
 8006df4:	f7f9 fbac 	bl	8000550 <__aeabi_dmul>
 8006df8:	4622      	mov	r2, r4
 8006dfa:	462b      	mov	r3, r5
 8006dfc:	f7f9 f9f2 	bl	80001e4 <__adddf3>
 8006e00:	4642      	mov	r2, r8
 8006e02:	4682      	mov	sl, r0
 8006e04:	468b      	mov	fp, r1
 8006e06:	464b      	mov	r3, r9
 8006e08:	4640      	mov	r0, r8
 8006e0a:	4649      	mov	r1, r9
 8006e0c:	f7f9 fba0 	bl	8000550 <__aeabi_dmul>
 8006e10:	4b6b      	ldr	r3, [pc, #428]	; (8006fc0 <__ieee754_pow+0x770>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	4606      	mov	r6, r0
 8006e16:	460f      	mov	r7, r1
 8006e18:	f7f9 f9e4 	bl	80001e4 <__adddf3>
 8006e1c:	4652      	mov	r2, sl
 8006e1e:	465b      	mov	r3, fp
 8006e20:	f7f9 f9e0 	bl	80001e4 <__adddf3>
 8006e24:	2000      	movs	r0, #0
 8006e26:	4604      	mov	r4, r0
 8006e28:	460d      	mov	r5, r1
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	4640      	mov	r0, r8
 8006e30:	4649      	mov	r1, r9
 8006e32:	f7f9 fb8d 	bl	8000550 <__aeabi_dmul>
 8006e36:	4b62      	ldr	r3, [pc, #392]	; (8006fc0 <__ieee754_pow+0x770>)
 8006e38:	4680      	mov	r8, r0
 8006e3a:	4689      	mov	r9, r1
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	4620      	mov	r0, r4
 8006e40:	4629      	mov	r1, r5
 8006e42:	f7f9 f9cd 	bl	80001e0 <__aeabi_dsub>
 8006e46:	4632      	mov	r2, r6
 8006e48:	463b      	mov	r3, r7
 8006e4a:	f7f9 f9c9 	bl	80001e0 <__aeabi_dsub>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	460b      	mov	r3, r1
 8006e52:	4650      	mov	r0, sl
 8006e54:	4659      	mov	r1, fp
 8006e56:	f7f9 f9c3 	bl	80001e0 <__aeabi_dsub>
 8006e5a:	ec53 2b18 	vmov	r2, r3, d8
 8006e5e:	f7f9 fb77 	bl	8000550 <__aeabi_dmul>
 8006e62:	4622      	mov	r2, r4
 8006e64:	4606      	mov	r6, r0
 8006e66:	460f      	mov	r7, r1
 8006e68:	462b      	mov	r3, r5
 8006e6a:	ec51 0b19 	vmov	r0, r1, d9
 8006e6e:	f7f9 fb6f 	bl	8000550 <__aeabi_dmul>
 8006e72:	4602      	mov	r2, r0
 8006e74:	460b      	mov	r3, r1
 8006e76:	4630      	mov	r0, r6
 8006e78:	4639      	mov	r1, r7
 8006e7a:	f7f9 f9b3 	bl	80001e4 <__adddf3>
 8006e7e:	4606      	mov	r6, r0
 8006e80:	460f      	mov	r7, r1
 8006e82:	4602      	mov	r2, r0
 8006e84:	460b      	mov	r3, r1
 8006e86:	4640      	mov	r0, r8
 8006e88:	4649      	mov	r1, r9
 8006e8a:	f7f9 f9ab 	bl	80001e4 <__adddf3>
 8006e8e:	a33e      	add	r3, pc, #248	; (adr r3, 8006f88 <__ieee754_pow+0x738>)
 8006e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e94:	2000      	movs	r0, #0
 8006e96:	4604      	mov	r4, r0
 8006e98:	460d      	mov	r5, r1
 8006e9a:	f7f9 fb59 	bl	8000550 <__aeabi_dmul>
 8006e9e:	4642      	mov	r2, r8
 8006ea0:	ec41 0b18 	vmov	d8, r0, r1
 8006ea4:	464b      	mov	r3, r9
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	4629      	mov	r1, r5
 8006eaa:	f7f9 f999 	bl	80001e0 <__aeabi_dsub>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	4639      	mov	r1, r7
 8006eb6:	f7f9 f993 	bl	80001e0 <__aeabi_dsub>
 8006eba:	a335      	add	r3, pc, #212	; (adr r3, 8006f90 <__ieee754_pow+0x740>)
 8006ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec0:	f7f9 fb46 	bl	8000550 <__aeabi_dmul>
 8006ec4:	a334      	add	r3, pc, #208	; (adr r3, 8006f98 <__ieee754_pow+0x748>)
 8006ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eca:	4606      	mov	r6, r0
 8006ecc:	460f      	mov	r7, r1
 8006ece:	4620      	mov	r0, r4
 8006ed0:	4629      	mov	r1, r5
 8006ed2:	f7f9 fb3d 	bl	8000550 <__aeabi_dmul>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	460b      	mov	r3, r1
 8006eda:	4630      	mov	r0, r6
 8006edc:	4639      	mov	r1, r7
 8006ede:	f7f9 f981 	bl	80001e4 <__adddf3>
 8006ee2:	9a07      	ldr	r2, [sp, #28]
 8006ee4:	4b37      	ldr	r3, [pc, #220]	; (8006fc4 <__ieee754_pow+0x774>)
 8006ee6:	4413      	add	r3, r2
 8006ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eec:	f7f9 f97a 	bl	80001e4 <__adddf3>
 8006ef0:	4682      	mov	sl, r0
 8006ef2:	9805      	ldr	r0, [sp, #20]
 8006ef4:	468b      	mov	fp, r1
 8006ef6:	f7f9 fac1 	bl	800047c <__aeabi_i2d>
 8006efa:	9a07      	ldr	r2, [sp, #28]
 8006efc:	4b32      	ldr	r3, [pc, #200]	; (8006fc8 <__ieee754_pow+0x778>)
 8006efe:	4413      	add	r3, r2
 8006f00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f04:	4606      	mov	r6, r0
 8006f06:	460f      	mov	r7, r1
 8006f08:	4652      	mov	r2, sl
 8006f0a:	465b      	mov	r3, fp
 8006f0c:	ec51 0b18 	vmov	r0, r1, d8
 8006f10:	f7f9 f968 	bl	80001e4 <__adddf3>
 8006f14:	4642      	mov	r2, r8
 8006f16:	464b      	mov	r3, r9
 8006f18:	f7f9 f964 	bl	80001e4 <__adddf3>
 8006f1c:	4632      	mov	r2, r6
 8006f1e:	463b      	mov	r3, r7
 8006f20:	f7f9 f960 	bl	80001e4 <__adddf3>
 8006f24:	2000      	movs	r0, #0
 8006f26:	4632      	mov	r2, r6
 8006f28:	463b      	mov	r3, r7
 8006f2a:	4604      	mov	r4, r0
 8006f2c:	460d      	mov	r5, r1
 8006f2e:	f7f9 f957 	bl	80001e0 <__aeabi_dsub>
 8006f32:	4642      	mov	r2, r8
 8006f34:	464b      	mov	r3, r9
 8006f36:	f7f9 f953 	bl	80001e0 <__aeabi_dsub>
 8006f3a:	ec53 2b18 	vmov	r2, r3, d8
 8006f3e:	f7f9 f94f 	bl	80001e0 <__aeabi_dsub>
 8006f42:	4602      	mov	r2, r0
 8006f44:	460b      	mov	r3, r1
 8006f46:	4650      	mov	r0, sl
 8006f48:	4659      	mov	r1, fp
 8006f4a:	e610      	b.n	8006b6e <__ieee754_pow+0x31e>
 8006f4c:	2401      	movs	r4, #1
 8006f4e:	e6a1      	b.n	8006c94 <__ieee754_pow+0x444>
 8006f50:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006fa0 <__ieee754_pow+0x750>
 8006f54:	e617      	b.n	8006b86 <__ieee754_pow+0x336>
 8006f56:	bf00      	nop
 8006f58:	4a454eef 	.word	0x4a454eef
 8006f5c:	3fca7e28 	.word	0x3fca7e28
 8006f60:	93c9db65 	.word	0x93c9db65
 8006f64:	3fcd864a 	.word	0x3fcd864a
 8006f68:	a91d4101 	.word	0xa91d4101
 8006f6c:	3fd17460 	.word	0x3fd17460
 8006f70:	518f264d 	.word	0x518f264d
 8006f74:	3fd55555 	.word	0x3fd55555
 8006f78:	db6fabff 	.word	0xdb6fabff
 8006f7c:	3fdb6db6 	.word	0x3fdb6db6
 8006f80:	33333303 	.word	0x33333303
 8006f84:	3fe33333 	.word	0x3fe33333
 8006f88:	e0000000 	.word	0xe0000000
 8006f8c:	3feec709 	.word	0x3feec709
 8006f90:	dc3a03fd 	.word	0xdc3a03fd
 8006f94:	3feec709 	.word	0x3feec709
 8006f98:	145b01f5 	.word	0x145b01f5
 8006f9c:	be3e2fe0 	.word	0xbe3e2fe0
 8006fa0:	00000000 	.word	0x00000000
 8006fa4:	3ff00000 	.word	0x3ff00000
 8006fa8:	7ff00000 	.word	0x7ff00000
 8006fac:	43400000 	.word	0x43400000
 8006fb0:	0003988e 	.word	0x0003988e
 8006fb4:	000bb679 	.word	0x000bb679
 8006fb8:	08008568 	.word	0x08008568
 8006fbc:	3ff00000 	.word	0x3ff00000
 8006fc0:	40080000 	.word	0x40080000
 8006fc4:	08008588 	.word	0x08008588
 8006fc8:	08008578 	.word	0x08008578
 8006fcc:	a3b5      	add	r3, pc, #724	; (adr r3, 80072a4 <__ieee754_pow+0xa54>)
 8006fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd2:	4640      	mov	r0, r8
 8006fd4:	4649      	mov	r1, r9
 8006fd6:	f7f9 f905 	bl	80001e4 <__adddf3>
 8006fda:	4622      	mov	r2, r4
 8006fdc:	ec41 0b1a 	vmov	d10, r0, r1
 8006fe0:	462b      	mov	r3, r5
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	4639      	mov	r1, r7
 8006fe6:	f7f9 f8fb 	bl	80001e0 <__aeabi_dsub>
 8006fea:	4602      	mov	r2, r0
 8006fec:	460b      	mov	r3, r1
 8006fee:	ec51 0b1a 	vmov	r0, r1, d10
 8006ff2:	f7f9 fd3d 	bl	8000a70 <__aeabi_dcmpgt>
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	f47f ae04 	bne.w	8006c04 <__ieee754_pow+0x3b4>
 8006ffc:	4aa4      	ldr	r2, [pc, #656]	; (8007290 <__ieee754_pow+0xa40>)
 8006ffe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007002:	4293      	cmp	r3, r2
 8007004:	f340 8108 	ble.w	8007218 <__ieee754_pow+0x9c8>
 8007008:	151b      	asrs	r3, r3, #20
 800700a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800700e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007012:	fa4a f303 	asr.w	r3, sl, r3
 8007016:	445b      	add	r3, fp
 8007018:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800701c:	4e9d      	ldr	r6, [pc, #628]	; (8007294 <__ieee754_pow+0xa44>)
 800701e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007022:	4116      	asrs	r6, r2
 8007024:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007028:	2000      	movs	r0, #0
 800702a:	ea23 0106 	bic.w	r1, r3, r6
 800702e:	f1c2 0214 	rsb	r2, r2, #20
 8007032:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007036:	fa4a fa02 	asr.w	sl, sl, r2
 800703a:	f1bb 0f00 	cmp.w	fp, #0
 800703e:	4602      	mov	r2, r0
 8007040:	460b      	mov	r3, r1
 8007042:	4620      	mov	r0, r4
 8007044:	4629      	mov	r1, r5
 8007046:	bfb8      	it	lt
 8007048:	f1ca 0a00 	rsblt	sl, sl, #0
 800704c:	f7f9 f8c8 	bl	80001e0 <__aeabi_dsub>
 8007050:	ec41 0b19 	vmov	d9, r0, r1
 8007054:	4642      	mov	r2, r8
 8007056:	464b      	mov	r3, r9
 8007058:	ec51 0b19 	vmov	r0, r1, d9
 800705c:	f7f9 f8c2 	bl	80001e4 <__adddf3>
 8007060:	a37b      	add	r3, pc, #492	; (adr r3, 8007250 <__ieee754_pow+0xa00>)
 8007062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007066:	2000      	movs	r0, #0
 8007068:	4604      	mov	r4, r0
 800706a:	460d      	mov	r5, r1
 800706c:	f7f9 fa70 	bl	8000550 <__aeabi_dmul>
 8007070:	ec53 2b19 	vmov	r2, r3, d9
 8007074:	4606      	mov	r6, r0
 8007076:	460f      	mov	r7, r1
 8007078:	4620      	mov	r0, r4
 800707a:	4629      	mov	r1, r5
 800707c:	f7f9 f8b0 	bl	80001e0 <__aeabi_dsub>
 8007080:	4602      	mov	r2, r0
 8007082:	460b      	mov	r3, r1
 8007084:	4640      	mov	r0, r8
 8007086:	4649      	mov	r1, r9
 8007088:	f7f9 f8aa 	bl	80001e0 <__aeabi_dsub>
 800708c:	a372      	add	r3, pc, #456	; (adr r3, 8007258 <__ieee754_pow+0xa08>)
 800708e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007092:	f7f9 fa5d 	bl	8000550 <__aeabi_dmul>
 8007096:	a372      	add	r3, pc, #456	; (adr r3, 8007260 <__ieee754_pow+0xa10>)
 8007098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709c:	4680      	mov	r8, r0
 800709e:	4689      	mov	r9, r1
 80070a0:	4620      	mov	r0, r4
 80070a2:	4629      	mov	r1, r5
 80070a4:	f7f9 fa54 	bl	8000550 <__aeabi_dmul>
 80070a8:	4602      	mov	r2, r0
 80070aa:	460b      	mov	r3, r1
 80070ac:	4640      	mov	r0, r8
 80070ae:	4649      	mov	r1, r9
 80070b0:	f7f9 f898 	bl	80001e4 <__adddf3>
 80070b4:	4604      	mov	r4, r0
 80070b6:	460d      	mov	r5, r1
 80070b8:	4602      	mov	r2, r0
 80070ba:	460b      	mov	r3, r1
 80070bc:	4630      	mov	r0, r6
 80070be:	4639      	mov	r1, r7
 80070c0:	f7f9 f890 	bl	80001e4 <__adddf3>
 80070c4:	4632      	mov	r2, r6
 80070c6:	463b      	mov	r3, r7
 80070c8:	4680      	mov	r8, r0
 80070ca:	4689      	mov	r9, r1
 80070cc:	f7f9 f888 	bl	80001e0 <__aeabi_dsub>
 80070d0:	4602      	mov	r2, r0
 80070d2:	460b      	mov	r3, r1
 80070d4:	4620      	mov	r0, r4
 80070d6:	4629      	mov	r1, r5
 80070d8:	f7f9 f882 	bl	80001e0 <__aeabi_dsub>
 80070dc:	4642      	mov	r2, r8
 80070de:	4606      	mov	r6, r0
 80070e0:	460f      	mov	r7, r1
 80070e2:	464b      	mov	r3, r9
 80070e4:	4640      	mov	r0, r8
 80070e6:	4649      	mov	r1, r9
 80070e8:	f7f9 fa32 	bl	8000550 <__aeabi_dmul>
 80070ec:	a35e      	add	r3, pc, #376	; (adr r3, 8007268 <__ieee754_pow+0xa18>)
 80070ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f2:	4604      	mov	r4, r0
 80070f4:	460d      	mov	r5, r1
 80070f6:	f7f9 fa2b 	bl	8000550 <__aeabi_dmul>
 80070fa:	a35d      	add	r3, pc, #372	; (adr r3, 8007270 <__ieee754_pow+0xa20>)
 80070fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007100:	f7f9 f86e 	bl	80001e0 <__aeabi_dsub>
 8007104:	4622      	mov	r2, r4
 8007106:	462b      	mov	r3, r5
 8007108:	f7f9 fa22 	bl	8000550 <__aeabi_dmul>
 800710c:	a35a      	add	r3, pc, #360	; (adr r3, 8007278 <__ieee754_pow+0xa28>)
 800710e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007112:	f7f9 f867 	bl	80001e4 <__adddf3>
 8007116:	4622      	mov	r2, r4
 8007118:	462b      	mov	r3, r5
 800711a:	f7f9 fa19 	bl	8000550 <__aeabi_dmul>
 800711e:	a358      	add	r3, pc, #352	; (adr r3, 8007280 <__ieee754_pow+0xa30>)
 8007120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007124:	f7f9 f85c 	bl	80001e0 <__aeabi_dsub>
 8007128:	4622      	mov	r2, r4
 800712a:	462b      	mov	r3, r5
 800712c:	f7f9 fa10 	bl	8000550 <__aeabi_dmul>
 8007130:	a355      	add	r3, pc, #340	; (adr r3, 8007288 <__ieee754_pow+0xa38>)
 8007132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007136:	f7f9 f855 	bl	80001e4 <__adddf3>
 800713a:	4622      	mov	r2, r4
 800713c:	462b      	mov	r3, r5
 800713e:	f7f9 fa07 	bl	8000550 <__aeabi_dmul>
 8007142:	4602      	mov	r2, r0
 8007144:	460b      	mov	r3, r1
 8007146:	4640      	mov	r0, r8
 8007148:	4649      	mov	r1, r9
 800714a:	f7f9 f849 	bl	80001e0 <__aeabi_dsub>
 800714e:	4604      	mov	r4, r0
 8007150:	460d      	mov	r5, r1
 8007152:	4602      	mov	r2, r0
 8007154:	460b      	mov	r3, r1
 8007156:	4640      	mov	r0, r8
 8007158:	4649      	mov	r1, r9
 800715a:	f7f9 f9f9 	bl	8000550 <__aeabi_dmul>
 800715e:	2200      	movs	r2, #0
 8007160:	ec41 0b19 	vmov	d9, r0, r1
 8007164:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007168:	4620      	mov	r0, r4
 800716a:	4629      	mov	r1, r5
 800716c:	f7f9 f838 	bl	80001e0 <__aeabi_dsub>
 8007170:	4602      	mov	r2, r0
 8007172:	460b      	mov	r3, r1
 8007174:	ec51 0b19 	vmov	r0, r1, d9
 8007178:	f7f9 fb14 	bl	80007a4 <__aeabi_ddiv>
 800717c:	4632      	mov	r2, r6
 800717e:	4604      	mov	r4, r0
 8007180:	460d      	mov	r5, r1
 8007182:	463b      	mov	r3, r7
 8007184:	4640      	mov	r0, r8
 8007186:	4649      	mov	r1, r9
 8007188:	f7f9 f9e2 	bl	8000550 <__aeabi_dmul>
 800718c:	4632      	mov	r2, r6
 800718e:	463b      	mov	r3, r7
 8007190:	f7f9 f828 	bl	80001e4 <__adddf3>
 8007194:	4602      	mov	r2, r0
 8007196:	460b      	mov	r3, r1
 8007198:	4620      	mov	r0, r4
 800719a:	4629      	mov	r1, r5
 800719c:	f7f9 f820 	bl	80001e0 <__aeabi_dsub>
 80071a0:	4642      	mov	r2, r8
 80071a2:	464b      	mov	r3, r9
 80071a4:	f7f9 f81c 	bl	80001e0 <__aeabi_dsub>
 80071a8:	460b      	mov	r3, r1
 80071aa:	4602      	mov	r2, r0
 80071ac:	493a      	ldr	r1, [pc, #232]	; (8007298 <__ieee754_pow+0xa48>)
 80071ae:	2000      	movs	r0, #0
 80071b0:	f7f9 f816 	bl	80001e0 <__aeabi_dsub>
 80071b4:	ec41 0b10 	vmov	d0, r0, r1
 80071b8:	ee10 3a90 	vmov	r3, s1
 80071bc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80071c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071c4:	da2b      	bge.n	800721e <__ieee754_pow+0x9ce>
 80071c6:	4650      	mov	r0, sl
 80071c8:	f000 fc5a 	bl	8007a80 <scalbn>
 80071cc:	ec51 0b10 	vmov	r0, r1, d0
 80071d0:	ec53 2b18 	vmov	r2, r3, d8
 80071d4:	f7ff bbed 	b.w	80069b2 <__ieee754_pow+0x162>
 80071d8:	4b30      	ldr	r3, [pc, #192]	; (800729c <__ieee754_pow+0xa4c>)
 80071da:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80071de:	429e      	cmp	r6, r3
 80071e0:	f77f af0c 	ble.w	8006ffc <__ieee754_pow+0x7ac>
 80071e4:	4b2e      	ldr	r3, [pc, #184]	; (80072a0 <__ieee754_pow+0xa50>)
 80071e6:	440b      	add	r3, r1
 80071e8:	4303      	orrs	r3, r0
 80071ea:	d009      	beq.n	8007200 <__ieee754_pow+0x9b0>
 80071ec:	ec51 0b18 	vmov	r0, r1, d8
 80071f0:	2200      	movs	r2, #0
 80071f2:	2300      	movs	r3, #0
 80071f4:	f7f9 fc1e 	bl	8000a34 <__aeabi_dcmplt>
 80071f8:	3800      	subs	r0, #0
 80071fa:	bf18      	it	ne
 80071fc:	2001      	movne	r0, #1
 80071fe:	e447      	b.n	8006a90 <__ieee754_pow+0x240>
 8007200:	4622      	mov	r2, r4
 8007202:	462b      	mov	r3, r5
 8007204:	f7f8 ffec 	bl	80001e0 <__aeabi_dsub>
 8007208:	4642      	mov	r2, r8
 800720a:	464b      	mov	r3, r9
 800720c:	f7f9 fc26 	bl	8000a5c <__aeabi_dcmpge>
 8007210:	2800      	cmp	r0, #0
 8007212:	f43f aef3 	beq.w	8006ffc <__ieee754_pow+0x7ac>
 8007216:	e7e9      	b.n	80071ec <__ieee754_pow+0x99c>
 8007218:	f04f 0a00 	mov.w	sl, #0
 800721c:	e71a      	b.n	8007054 <__ieee754_pow+0x804>
 800721e:	ec51 0b10 	vmov	r0, r1, d0
 8007222:	4619      	mov	r1, r3
 8007224:	e7d4      	b.n	80071d0 <__ieee754_pow+0x980>
 8007226:	491c      	ldr	r1, [pc, #112]	; (8007298 <__ieee754_pow+0xa48>)
 8007228:	2000      	movs	r0, #0
 800722a:	f7ff bb30 	b.w	800688e <__ieee754_pow+0x3e>
 800722e:	2000      	movs	r0, #0
 8007230:	2100      	movs	r1, #0
 8007232:	f7ff bb2c 	b.w	800688e <__ieee754_pow+0x3e>
 8007236:	4630      	mov	r0, r6
 8007238:	4639      	mov	r1, r7
 800723a:	f7ff bb28 	b.w	800688e <__ieee754_pow+0x3e>
 800723e:	9204      	str	r2, [sp, #16]
 8007240:	f7ff bb7a 	b.w	8006938 <__ieee754_pow+0xe8>
 8007244:	2300      	movs	r3, #0
 8007246:	f7ff bb64 	b.w	8006912 <__ieee754_pow+0xc2>
 800724a:	bf00      	nop
 800724c:	f3af 8000 	nop.w
 8007250:	00000000 	.word	0x00000000
 8007254:	3fe62e43 	.word	0x3fe62e43
 8007258:	fefa39ef 	.word	0xfefa39ef
 800725c:	3fe62e42 	.word	0x3fe62e42
 8007260:	0ca86c39 	.word	0x0ca86c39
 8007264:	be205c61 	.word	0xbe205c61
 8007268:	72bea4d0 	.word	0x72bea4d0
 800726c:	3e663769 	.word	0x3e663769
 8007270:	c5d26bf1 	.word	0xc5d26bf1
 8007274:	3ebbbd41 	.word	0x3ebbbd41
 8007278:	af25de2c 	.word	0xaf25de2c
 800727c:	3f11566a 	.word	0x3f11566a
 8007280:	16bebd93 	.word	0x16bebd93
 8007284:	3f66c16c 	.word	0x3f66c16c
 8007288:	5555553e 	.word	0x5555553e
 800728c:	3fc55555 	.word	0x3fc55555
 8007290:	3fe00000 	.word	0x3fe00000
 8007294:	000fffff 	.word	0x000fffff
 8007298:	3ff00000 	.word	0x3ff00000
 800729c:	4090cbff 	.word	0x4090cbff
 80072a0:	3f6f3400 	.word	0x3f6f3400
 80072a4:	652b82fe 	.word	0x652b82fe
 80072a8:	3c971547 	.word	0x3c971547

080072ac <__ieee754_sqrt>:
 80072ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072b0:	ec55 4b10 	vmov	r4, r5, d0
 80072b4:	4e55      	ldr	r6, [pc, #340]	; (800740c <__ieee754_sqrt+0x160>)
 80072b6:	43ae      	bics	r6, r5
 80072b8:	ee10 0a10 	vmov	r0, s0
 80072bc:	ee10 3a10 	vmov	r3, s0
 80072c0:	462a      	mov	r2, r5
 80072c2:	4629      	mov	r1, r5
 80072c4:	d110      	bne.n	80072e8 <__ieee754_sqrt+0x3c>
 80072c6:	ee10 2a10 	vmov	r2, s0
 80072ca:	462b      	mov	r3, r5
 80072cc:	f7f9 f940 	bl	8000550 <__aeabi_dmul>
 80072d0:	4602      	mov	r2, r0
 80072d2:	460b      	mov	r3, r1
 80072d4:	4620      	mov	r0, r4
 80072d6:	4629      	mov	r1, r5
 80072d8:	f7f8 ff84 	bl	80001e4 <__adddf3>
 80072dc:	4604      	mov	r4, r0
 80072de:	460d      	mov	r5, r1
 80072e0:	ec45 4b10 	vmov	d0, r4, r5
 80072e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072e8:	2d00      	cmp	r5, #0
 80072ea:	dc10      	bgt.n	800730e <__ieee754_sqrt+0x62>
 80072ec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80072f0:	4330      	orrs	r0, r6
 80072f2:	d0f5      	beq.n	80072e0 <__ieee754_sqrt+0x34>
 80072f4:	b15d      	cbz	r5, 800730e <__ieee754_sqrt+0x62>
 80072f6:	ee10 2a10 	vmov	r2, s0
 80072fa:	462b      	mov	r3, r5
 80072fc:	ee10 0a10 	vmov	r0, s0
 8007300:	f7f8 ff6e 	bl	80001e0 <__aeabi_dsub>
 8007304:	4602      	mov	r2, r0
 8007306:	460b      	mov	r3, r1
 8007308:	f7f9 fa4c 	bl	80007a4 <__aeabi_ddiv>
 800730c:	e7e6      	b.n	80072dc <__ieee754_sqrt+0x30>
 800730e:	1512      	asrs	r2, r2, #20
 8007310:	d074      	beq.n	80073fc <__ieee754_sqrt+0x150>
 8007312:	07d4      	lsls	r4, r2, #31
 8007314:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007318:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800731c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007320:	bf5e      	ittt	pl
 8007322:	0fda      	lsrpl	r2, r3, #31
 8007324:	005b      	lslpl	r3, r3, #1
 8007326:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800732a:	2400      	movs	r4, #0
 800732c:	0fda      	lsrs	r2, r3, #31
 800732e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007332:	107f      	asrs	r7, r7, #1
 8007334:	005b      	lsls	r3, r3, #1
 8007336:	2516      	movs	r5, #22
 8007338:	4620      	mov	r0, r4
 800733a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800733e:	1886      	adds	r6, r0, r2
 8007340:	428e      	cmp	r6, r1
 8007342:	bfde      	ittt	le
 8007344:	1b89      	suble	r1, r1, r6
 8007346:	18b0      	addle	r0, r6, r2
 8007348:	18a4      	addle	r4, r4, r2
 800734a:	0049      	lsls	r1, r1, #1
 800734c:	3d01      	subs	r5, #1
 800734e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007352:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007356:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800735a:	d1f0      	bne.n	800733e <__ieee754_sqrt+0x92>
 800735c:	462a      	mov	r2, r5
 800735e:	f04f 0e20 	mov.w	lr, #32
 8007362:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007366:	4281      	cmp	r1, r0
 8007368:	eb06 0c05 	add.w	ip, r6, r5
 800736c:	dc02      	bgt.n	8007374 <__ieee754_sqrt+0xc8>
 800736e:	d113      	bne.n	8007398 <__ieee754_sqrt+0xec>
 8007370:	459c      	cmp	ip, r3
 8007372:	d811      	bhi.n	8007398 <__ieee754_sqrt+0xec>
 8007374:	f1bc 0f00 	cmp.w	ip, #0
 8007378:	eb0c 0506 	add.w	r5, ip, r6
 800737c:	da43      	bge.n	8007406 <__ieee754_sqrt+0x15a>
 800737e:	2d00      	cmp	r5, #0
 8007380:	db41      	blt.n	8007406 <__ieee754_sqrt+0x15a>
 8007382:	f100 0801 	add.w	r8, r0, #1
 8007386:	1a09      	subs	r1, r1, r0
 8007388:	459c      	cmp	ip, r3
 800738a:	bf88      	it	hi
 800738c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8007390:	eba3 030c 	sub.w	r3, r3, ip
 8007394:	4432      	add	r2, r6
 8007396:	4640      	mov	r0, r8
 8007398:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800739c:	f1be 0e01 	subs.w	lr, lr, #1
 80073a0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80073a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80073a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80073ac:	d1db      	bne.n	8007366 <__ieee754_sqrt+0xba>
 80073ae:	430b      	orrs	r3, r1
 80073b0:	d006      	beq.n	80073c0 <__ieee754_sqrt+0x114>
 80073b2:	1c50      	adds	r0, r2, #1
 80073b4:	bf13      	iteet	ne
 80073b6:	3201      	addne	r2, #1
 80073b8:	3401      	addeq	r4, #1
 80073ba:	4672      	moveq	r2, lr
 80073bc:	f022 0201 	bicne.w	r2, r2, #1
 80073c0:	1063      	asrs	r3, r4, #1
 80073c2:	0852      	lsrs	r2, r2, #1
 80073c4:	07e1      	lsls	r1, r4, #31
 80073c6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80073ca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80073ce:	bf48      	it	mi
 80073d0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80073d4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80073d8:	4614      	mov	r4, r2
 80073da:	e781      	b.n	80072e0 <__ieee754_sqrt+0x34>
 80073dc:	0ad9      	lsrs	r1, r3, #11
 80073de:	3815      	subs	r0, #21
 80073e0:	055b      	lsls	r3, r3, #21
 80073e2:	2900      	cmp	r1, #0
 80073e4:	d0fa      	beq.n	80073dc <__ieee754_sqrt+0x130>
 80073e6:	02cd      	lsls	r5, r1, #11
 80073e8:	d50a      	bpl.n	8007400 <__ieee754_sqrt+0x154>
 80073ea:	f1c2 0420 	rsb	r4, r2, #32
 80073ee:	fa23 f404 	lsr.w	r4, r3, r4
 80073f2:	1e55      	subs	r5, r2, #1
 80073f4:	4093      	lsls	r3, r2
 80073f6:	4321      	orrs	r1, r4
 80073f8:	1b42      	subs	r2, r0, r5
 80073fa:	e78a      	b.n	8007312 <__ieee754_sqrt+0x66>
 80073fc:	4610      	mov	r0, r2
 80073fe:	e7f0      	b.n	80073e2 <__ieee754_sqrt+0x136>
 8007400:	0049      	lsls	r1, r1, #1
 8007402:	3201      	adds	r2, #1
 8007404:	e7ef      	b.n	80073e6 <__ieee754_sqrt+0x13a>
 8007406:	4680      	mov	r8, r0
 8007408:	e7bd      	b.n	8007386 <__ieee754_sqrt+0xda>
 800740a:	bf00      	nop
 800740c:	7ff00000 	.word	0x7ff00000

08007410 <__ieee754_powf>:
 8007410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007414:	ee10 4a90 	vmov	r4, s1
 8007418:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800741c:	ed2d 8b02 	vpush	{d8}
 8007420:	ee10 6a10 	vmov	r6, s0
 8007424:	eeb0 8a40 	vmov.f32	s16, s0
 8007428:	eef0 8a60 	vmov.f32	s17, s1
 800742c:	d10c      	bne.n	8007448 <__ieee754_powf+0x38>
 800742e:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8007432:	0076      	lsls	r6, r6, #1
 8007434:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8007438:	f240 8296 	bls.w	8007968 <__ieee754_powf+0x558>
 800743c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8007440:	ecbd 8b02 	vpop	{d8}
 8007444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007448:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800744c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8007450:	dcf4      	bgt.n	800743c <__ieee754_powf+0x2c>
 8007452:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8007456:	dd08      	ble.n	800746a <__ieee754_powf+0x5a>
 8007458:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800745c:	d1ee      	bne.n	800743c <__ieee754_powf+0x2c>
 800745e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8007462:	0064      	lsls	r4, r4, #1
 8007464:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8007468:	e7e6      	b.n	8007438 <__ieee754_powf+0x28>
 800746a:	2e00      	cmp	r6, #0
 800746c:	da20      	bge.n	80074b0 <__ieee754_powf+0xa0>
 800746e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8007472:	da2d      	bge.n	80074d0 <__ieee754_powf+0xc0>
 8007474:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8007478:	f2c0 827f 	blt.w	800797a <__ieee754_powf+0x56a>
 800747c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8007480:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8007484:	fa48 f703 	asr.w	r7, r8, r3
 8007488:	fa07 f303 	lsl.w	r3, r7, r3
 800748c:	4543      	cmp	r3, r8
 800748e:	f040 8274 	bne.w	800797a <__ieee754_powf+0x56a>
 8007492:	f007 0701 	and.w	r7, r7, #1
 8007496:	f1c7 0702 	rsb	r7, r7, #2
 800749a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800749e:	d11f      	bne.n	80074e0 <__ieee754_powf+0xd0>
 80074a0:	2c00      	cmp	r4, #0
 80074a2:	f280 8267 	bge.w	8007974 <__ieee754_powf+0x564>
 80074a6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80074aa:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80074ae:	e7c7      	b.n	8007440 <__ieee754_powf+0x30>
 80074b0:	2700      	movs	r7, #0
 80074b2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80074b6:	d1f0      	bne.n	800749a <__ieee754_powf+0x8a>
 80074b8:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 80074bc:	f000 8254 	beq.w	8007968 <__ieee754_powf+0x558>
 80074c0:	dd08      	ble.n	80074d4 <__ieee754_powf+0xc4>
 80074c2:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 80077cc <__ieee754_powf+0x3bc>
 80074c6:	2c00      	cmp	r4, #0
 80074c8:	bfa8      	it	ge
 80074ca:	eeb0 0a68 	vmovge.f32	s0, s17
 80074ce:	e7b7      	b.n	8007440 <__ieee754_powf+0x30>
 80074d0:	2702      	movs	r7, #2
 80074d2:	e7ee      	b.n	80074b2 <__ieee754_powf+0xa2>
 80074d4:	2c00      	cmp	r4, #0
 80074d6:	f280 824a 	bge.w	800796e <__ieee754_powf+0x55e>
 80074da:	eeb1 0a68 	vneg.f32	s0, s17
 80074de:	e7af      	b.n	8007440 <__ieee754_powf+0x30>
 80074e0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80074e4:	d102      	bne.n	80074ec <__ieee754_powf+0xdc>
 80074e6:	ee28 0a08 	vmul.f32	s0, s16, s16
 80074ea:	e7a9      	b.n	8007440 <__ieee754_powf+0x30>
 80074ec:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80074f0:	eeb0 0a48 	vmov.f32	s0, s16
 80074f4:	d107      	bne.n	8007506 <__ieee754_powf+0xf6>
 80074f6:	2e00      	cmp	r6, #0
 80074f8:	db05      	blt.n	8007506 <__ieee754_powf+0xf6>
 80074fa:	ecbd 8b02 	vpop	{d8}
 80074fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007502:	f000 ba53 	b.w	80079ac <__ieee754_sqrtf>
 8007506:	f000 fb41 	bl	8007b8c <fabsf>
 800750a:	b125      	cbz	r5, 8007516 <__ieee754_powf+0x106>
 800750c:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8007510:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007514:	d116      	bne.n	8007544 <__ieee754_powf+0x134>
 8007516:	2c00      	cmp	r4, #0
 8007518:	bfbc      	itt	lt
 800751a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800751e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8007522:	2e00      	cmp	r6, #0
 8007524:	da8c      	bge.n	8007440 <__ieee754_powf+0x30>
 8007526:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800752a:	ea55 0307 	orrs.w	r3, r5, r7
 800752e:	d104      	bne.n	800753a <__ieee754_powf+0x12a>
 8007530:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007534:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007538:	e782      	b.n	8007440 <__ieee754_powf+0x30>
 800753a:	2f01      	cmp	r7, #1
 800753c:	d180      	bne.n	8007440 <__ieee754_powf+0x30>
 800753e:	eeb1 0a40 	vneg.f32	s0, s0
 8007542:	e77d      	b.n	8007440 <__ieee754_powf+0x30>
 8007544:	0ff0      	lsrs	r0, r6, #31
 8007546:	3801      	subs	r0, #1
 8007548:	ea57 0300 	orrs.w	r3, r7, r0
 800754c:	d104      	bne.n	8007558 <__ieee754_powf+0x148>
 800754e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8007552:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8007556:	e773      	b.n	8007440 <__ieee754_powf+0x30>
 8007558:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800755c:	dd74      	ble.n	8007648 <__ieee754_powf+0x238>
 800755e:	4b9c      	ldr	r3, [pc, #624]	; (80077d0 <__ieee754_powf+0x3c0>)
 8007560:	429d      	cmp	r5, r3
 8007562:	dc08      	bgt.n	8007576 <__ieee754_powf+0x166>
 8007564:	2c00      	cmp	r4, #0
 8007566:	da0b      	bge.n	8007580 <__ieee754_powf+0x170>
 8007568:	2000      	movs	r0, #0
 800756a:	ecbd 8b02 	vpop	{d8}
 800756e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007572:	f000 ba6b 	b.w	8007a4c <__math_oflowf>
 8007576:	4b97      	ldr	r3, [pc, #604]	; (80077d4 <__ieee754_powf+0x3c4>)
 8007578:	429d      	cmp	r5, r3
 800757a:	dd08      	ble.n	800758e <__ieee754_powf+0x17e>
 800757c:	2c00      	cmp	r4, #0
 800757e:	dcf3      	bgt.n	8007568 <__ieee754_powf+0x158>
 8007580:	2000      	movs	r0, #0
 8007582:	ecbd 8b02 	vpop	{d8}
 8007586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800758a:	f000 ba59 	b.w	8007a40 <__math_uflowf>
 800758e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007592:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007596:	eddf 6a90 	vldr	s13, [pc, #576]	; 80077d8 <__ieee754_powf+0x3c8>
 800759a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800759e:	eee0 6a67 	vfms.f32	s13, s0, s15
 80075a2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80075a6:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80075aa:	ee20 7a00 	vmul.f32	s14, s0, s0
 80075ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075b2:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80077dc <__ieee754_powf+0x3cc>
 80075b6:	ee67 7a67 	vnmul.f32	s15, s14, s15
 80075ba:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80077e0 <__ieee754_powf+0x3d0>
 80075be:	eee0 7a07 	vfma.f32	s15, s0, s14
 80075c2:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80077e4 <__ieee754_powf+0x3d4>
 80075c6:	eef0 6a67 	vmov.f32	s13, s15
 80075ca:	eee0 6a07 	vfma.f32	s13, s0, s14
 80075ce:	ee16 3a90 	vmov	r3, s13
 80075d2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80075d6:	f023 030f 	bic.w	r3, r3, #15
 80075da:	ee00 3a90 	vmov	s1, r3
 80075de:	eee0 0a47 	vfms.f32	s1, s0, s14
 80075e2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80075e6:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80075ea:	f024 040f 	bic.w	r4, r4, #15
 80075ee:	ee07 4a10 	vmov	s14, r4
 80075f2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80075f6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80075fa:	ee07 3a90 	vmov	s15, r3
 80075fe:	eee7 0a27 	vfma.f32	s1, s14, s15
 8007602:	3f01      	subs	r7, #1
 8007604:	ea57 0200 	orrs.w	r2, r7, r0
 8007608:	ee07 4a10 	vmov	s14, r4
 800760c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007610:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007614:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8007618:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800761c:	ee17 4a10 	vmov	r4, s14
 8007620:	bf08      	it	eq
 8007622:	eeb0 8a40 	vmoveq.f32	s16, s0
 8007626:	2c00      	cmp	r4, #0
 8007628:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800762c:	f340 817e 	ble.w	800792c <__ieee754_powf+0x51c>
 8007630:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8007634:	f340 80f8 	ble.w	8007828 <__ieee754_powf+0x418>
 8007638:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800763c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007640:	bf4c      	ite	mi
 8007642:	2001      	movmi	r0, #1
 8007644:	2000      	movpl	r0, #0
 8007646:	e790      	b.n	800756a <__ieee754_powf+0x15a>
 8007648:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800764c:	bf01      	itttt	eq
 800764e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 80077e8 <__ieee754_powf+0x3d8>
 8007652:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8007656:	f06f 0217 	mvneq.w	r2, #23
 800765a:	ee17 5a90 	vmoveq	r5, s15
 800765e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8007662:	bf18      	it	ne
 8007664:	2200      	movne	r2, #0
 8007666:	3b7f      	subs	r3, #127	; 0x7f
 8007668:	4413      	add	r3, r2
 800766a:	4a60      	ldr	r2, [pc, #384]	; (80077ec <__ieee754_powf+0x3dc>)
 800766c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8007670:	4295      	cmp	r5, r2
 8007672:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8007676:	dd06      	ble.n	8007686 <__ieee754_powf+0x276>
 8007678:	4a5d      	ldr	r2, [pc, #372]	; (80077f0 <__ieee754_powf+0x3e0>)
 800767a:	4295      	cmp	r5, r2
 800767c:	f340 80a4 	ble.w	80077c8 <__ieee754_powf+0x3b8>
 8007680:	3301      	adds	r3, #1
 8007682:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8007686:	2500      	movs	r5, #0
 8007688:	4a5a      	ldr	r2, [pc, #360]	; (80077f4 <__ieee754_powf+0x3e4>)
 800768a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800768e:	ee07 1a90 	vmov	s15, r1
 8007692:	ed92 7a00 	vldr	s14, [r2]
 8007696:	4a58      	ldr	r2, [pc, #352]	; (80077f8 <__ieee754_powf+0x3e8>)
 8007698:	ee37 6a27 	vadd.f32	s12, s14, s15
 800769c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80076a0:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80076a4:	1049      	asrs	r1, r1, #1
 80076a6:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80076aa:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80076ae:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 80076b2:	ee37 5ac7 	vsub.f32	s10, s15, s14
 80076b6:	ee06 1a10 	vmov	s12, r1
 80076ba:	ee65 4a26 	vmul.f32	s9, s10, s13
 80076be:	ee36 7a47 	vsub.f32	s14, s12, s14
 80076c2:	ee14 6a90 	vmov	r6, s9
 80076c6:	4016      	ands	r6, r2
 80076c8:	ee05 6a90 	vmov	s11, r6
 80076cc:	eea5 5ac6 	vfms.f32	s10, s11, s12
 80076d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80076d4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80077fc <__ieee754_powf+0x3ec>
 80076d8:	eea5 5ae7 	vfms.f32	s10, s11, s15
 80076dc:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80076e0:	ee25 6a26 	vmul.f32	s12, s10, s13
 80076e4:	eddf 6a46 	vldr	s13, [pc, #280]	; 8007800 <__ieee754_powf+0x3f0>
 80076e8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80076ec:	eddf 6a45 	vldr	s13, [pc, #276]	; 8007804 <__ieee754_powf+0x3f4>
 80076f0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80076f4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80077d8 <__ieee754_powf+0x3c8>
 80076f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80076fc:	eddf 6a42 	vldr	s13, [pc, #264]	; 8007808 <__ieee754_powf+0x3f8>
 8007700:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007704:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800780c <__ieee754_powf+0x3fc>
 8007708:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800770c:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8007710:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8007714:	ee66 6a86 	vmul.f32	s13, s13, s12
 8007718:	eee5 6a07 	vfma.f32	s13, s10, s14
 800771c:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8007720:	eef0 7a45 	vmov.f32	s15, s10
 8007724:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8007728:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800772c:	ee17 1a90 	vmov	r1, s15
 8007730:	4011      	ands	r1, r2
 8007732:	ee07 1a90 	vmov	s15, r1
 8007736:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800773a:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800773e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007742:	ee27 7a24 	vmul.f32	s14, s14, s9
 8007746:	eea6 7a27 	vfma.f32	s14, s12, s15
 800774a:	eeb0 6a47 	vmov.f32	s12, s14
 800774e:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8007752:	ee16 1a10 	vmov	r1, s12
 8007756:	4011      	ands	r1, r2
 8007758:	ee06 1a90 	vmov	s13, r1
 800775c:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8007760:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007810 <__ieee754_powf+0x400>
 8007764:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8007814 <__ieee754_powf+0x404>
 8007768:	ee37 7a66 	vsub.f32	s14, s14, s13
 800776c:	ee06 1a10 	vmov	s12, r1
 8007770:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007774:	eddf 7a28 	vldr	s15, [pc, #160]	; 8007818 <__ieee754_powf+0x408>
 8007778:	4928      	ldr	r1, [pc, #160]	; (800781c <__ieee754_powf+0x40c>)
 800777a:	eea6 7a27 	vfma.f32	s14, s12, s15
 800777e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8007782:	edd1 7a00 	vldr	s15, [r1]
 8007786:	ee37 7a27 	vadd.f32	s14, s14, s15
 800778a:	ee07 3a90 	vmov	s15, r3
 800778e:	4b24      	ldr	r3, [pc, #144]	; (8007820 <__ieee754_powf+0x410>)
 8007790:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007794:	eef0 7a47 	vmov.f32	s15, s14
 8007798:	eee6 7a25 	vfma.f32	s15, s12, s11
 800779c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80077a0:	edd5 0a00 	vldr	s1, [r5]
 80077a4:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80077a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ac:	ee17 3a90 	vmov	r3, s15
 80077b0:	4013      	ands	r3, r2
 80077b2:	ee07 3a90 	vmov	s15, r3
 80077b6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80077ba:	ee76 6ae0 	vsub.f32	s13, s13, s1
 80077be:	eee6 6a65 	vfms.f32	s13, s12, s11
 80077c2:	ee77 7a66 	vsub.f32	s15, s14, s13
 80077c6:	e70e      	b.n	80075e6 <__ieee754_powf+0x1d6>
 80077c8:	2501      	movs	r5, #1
 80077ca:	e75d      	b.n	8007688 <__ieee754_powf+0x278>
 80077cc:	00000000 	.word	0x00000000
 80077d0:	3f7ffff3 	.word	0x3f7ffff3
 80077d4:	3f800007 	.word	0x3f800007
 80077d8:	3eaaaaab 	.word	0x3eaaaaab
 80077dc:	3fb8aa3b 	.word	0x3fb8aa3b
 80077e0:	36eca570 	.word	0x36eca570
 80077e4:	3fb8aa00 	.word	0x3fb8aa00
 80077e8:	4b800000 	.word	0x4b800000
 80077ec:	001cc471 	.word	0x001cc471
 80077f0:	005db3d6 	.word	0x005db3d6
 80077f4:	08008598 	.word	0x08008598
 80077f8:	fffff000 	.word	0xfffff000
 80077fc:	3e6c3255 	.word	0x3e6c3255
 8007800:	3e53f142 	.word	0x3e53f142
 8007804:	3e8ba305 	.word	0x3e8ba305
 8007808:	3edb6db7 	.word	0x3edb6db7
 800780c:	3f19999a 	.word	0x3f19999a
 8007810:	3f76384f 	.word	0x3f76384f
 8007814:	3f763800 	.word	0x3f763800
 8007818:	369dc3a0 	.word	0x369dc3a0
 800781c:	080085a8 	.word	0x080085a8
 8007820:	080085a0 	.word	0x080085a0
 8007824:	3338aa3c 	.word	0x3338aa3c
 8007828:	f040 8095 	bne.w	8007956 <__ieee754_powf+0x546>
 800782c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8007824 <__ieee754_powf+0x414>
 8007830:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007834:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8007838:	eef4 6ac7 	vcmpe.f32	s13, s14
 800783c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007840:	f73f aefa 	bgt.w	8007638 <__ieee754_powf+0x228>
 8007844:	15db      	asrs	r3, r3, #23
 8007846:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800784a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800784e:	4103      	asrs	r3, r0
 8007850:	4423      	add	r3, r4
 8007852:	494b      	ldr	r1, [pc, #300]	; (8007980 <__ieee754_powf+0x570>)
 8007854:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007858:	3a7f      	subs	r2, #127	; 0x7f
 800785a:	4111      	asrs	r1, r2
 800785c:	ea23 0101 	bic.w	r1, r3, r1
 8007860:	ee07 1a10 	vmov	s14, r1
 8007864:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8007868:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800786c:	f1c2 0217 	rsb	r2, r2, #23
 8007870:	4110      	asrs	r0, r2
 8007872:	2c00      	cmp	r4, #0
 8007874:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007878:	bfb8      	it	lt
 800787a:	4240      	neglt	r0, r0
 800787c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8007880:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8007984 <__ieee754_powf+0x574>
 8007884:	eddf 6a40 	vldr	s13, [pc, #256]	; 8007988 <__ieee754_powf+0x578>
 8007888:	ee17 3a10 	vmov	r3, s14
 800788c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007890:	f023 030f 	bic.w	r3, r3, #15
 8007894:	ee07 3a10 	vmov	s14, r3
 8007898:	ee77 7a67 	vsub.f32	s15, s14, s15
 800789c:	ee27 0a00 	vmul.f32	s0, s14, s0
 80078a0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80078a4:	eddf 7a39 	vldr	s15, [pc, #228]	; 800798c <__ieee754_powf+0x57c>
 80078a8:	eea0 0aa7 	vfma.f32	s0, s1, s15
 80078ac:	eef0 7a40 	vmov.f32	s15, s0
 80078b0:	eee7 7a26 	vfma.f32	s15, s14, s13
 80078b4:	eeb0 6a67 	vmov.f32	s12, s15
 80078b8:	eea7 6a66 	vfms.f32	s12, s14, s13
 80078bc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80078c0:	ee30 0a46 	vsub.f32	s0, s0, s12
 80078c4:	eddf 6a32 	vldr	s13, [pc, #200]	; 8007990 <__ieee754_powf+0x580>
 80078c8:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8007994 <__ieee754_powf+0x584>
 80078cc:	eee7 6a06 	vfma.f32	s13, s14, s12
 80078d0:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8007998 <__ieee754_powf+0x588>
 80078d4:	eea6 6a87 	vfma.f32	s12, s13, s14
 80078d8:	eddf 6a30 	vldr	s13, [pc, #192]	; 800799c <__ieee754_powf+0x58c>
 80078dc:	eee6 6a07 	vfma.f32	s13, s12, s14
 80078e0:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80079a0 <__ieee754_powf+0x590>
 80078e4:	eea6 6a87 	vfma.f32	s12, s13, s14
 80078e8:	eef0 6a67 	vmov.f32	s13, s15
 80078ec:	eee6 6a47 	vfms.f32	s13, s12, s14
 80078f0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80078f4:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80078f8:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80078fc:	eea7 0a80 	vfma.f32	s0, s15, s0
 8007900:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007904:	ee37 0a40 	vsub.f32	s0, s14, s0
 8007908:	ee70 7a67 	vsub.f32	s15, s0, s15
 800790c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007910:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007914:	ee10 3a10 	vmov	r3, s0
 8007918:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800791c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007920:	da1f      	bge.n	8007962 <__ieee754_powf+0x552>
 8007922:	f000 f947 	bl	8007bb4 <scalbnf>
 8007926:	ee20 0a08 	vmul.f32	s0, s0, s16
 800792a:	e589      	b.n	8007440 <__ieee754_powf+0x30>
 800792c:	4a1d      	ldr	r2, [pc, #116]	; (80079a4 <__ieee754_powf+0x594>)
 800792e:	4293      	cmp	r3, r2
 8007930:	dd07      	ble.n	8007942 <__ieee754_powf+0x532>
 8007932:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800793a:	bf4c      	ite	mi
 800793c:	2001      	movmi	r0, #1
 800793e:	2000      	movpl	r0, #0
 8007940:	e61f      	b.n	8007582 <__ieee754_powf+0x172>
 8007942:	d108      	bne.n	8007956 <__ieee754_powf+0x546>
 8007944:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007948:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800794c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007950:	f6ff af78 	blt.w	8007844 <__ieee754_powf+0x434>
 8007954:	e7ed      	b.n	8007932 <__ieee754_powf+0x522>
 8007956:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800795a:	f73f af73 	bgt.w	8007844 <__ieee754_powf+0x434>
 800795e:	2000      	movs	r0, #0
 8007960:	e78c      	b.n	800787c <__ieee754_powf+0x46c>
 8007962:	ee00 3a10 	vmov	s0, r3
 8007966:	e7de      	b.n	8007926 <__ieee754_powf+0x516>
 8007968:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800796c:	e568      	b.n	8007440 <__ieee754_powf+0x30>
 800796e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80079a8 <__ieee754_powf+0x598>
 8007972:	e565      	b.n	8007440 <__ieee754_powf+0x30>
 8007974:	eeb0 0a48 	vmov.f32	s0, s16
 8007978:	e562      	b.n	8007440 <__ieee754_powf+0x30>
 800797a:	2700      	movs	r7, #0
 800797c:	e58d      	b.n	800749a <__ieee754_powf+0x8a>
 800797e:	bf00      	nop
 8007980:	007fffff 	.word	0x007fffff
 8007984:	35bfbe8c 	.word	0x35bfbe8c
 8007988:	3f317200 	.word	0x3f317200
 800798c:	3f317218 	.word	0x3f317218
 8007990:	b5ddea0e 	.word	0xb5ddea0e
 8007994:	3331bb4c 	.word	0x3331bb4c
 8007998:	388ab355 	.word	0x388ab355
 800799c:	bb360b61 	.word	0xbb360b61
 80079a0:	3e2aaaab 	.word	0x3e2aaaab
 80079a4:	43160000 	.word	0x43160000
 80079a8:	00000000 	.word	0x00000000

080079ac <__ieee754_sqrtf>:
 80079ac:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80079b0:	4770      	bx	lr

080079b2 <with_errno>:
 80079b2:	b570      	push	{r4, r5, r6, lr}
 80079b4:	4604      	mov	r4, r0
 80079b6:	460d      	mov	r5, r1
 80079b8:	4616      	mov	r6, r2
 80079ba:	f7fe fe05 	bl	80065c8 <__errno>
 80079be:	4629      	mov	r1, r5
 80079c0:	6006      	str	r6, [r0, #0]
 80079c2:	4620      	mov	r0, r4
 80079c4:	bd70      	pop	{r4, r5, r6, pc}

080079c6 <xflow>:
 80079c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079c8:	4614      	mov	r4, r2
 80079ca:	461d      	mov	r5, r3
 80079cc:	b108      	cbz	r0, 80079d2 <xflow+0xc>
 80079ce:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80079d2:	e9cd 2300 	strd	r2, r3, [sp]
 80079d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079da:	4620      	mov	r0, r4
 80079dc:	4629      	mov	r1, r5
 80079de:	f7f8 fdb7 	bl	8000550 <__aeabi_dmul>
 80079e2:	2222      	movs	r2, #34	; 0x22
 80079e4:	b003      	add	sp, #12
 80079e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079ea:	f7ff bfe2 	b.w	80079b2 <with_errno>

080079ee <__math_uflow>:
 80079ee:	b508      	push	{r3, lr}
 80079f0:	2200      	movs	r2, #0
 80079f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80079f6:	f7ff ffe6 	bl	80079c6 <xflow>
 80079fa:	ec41 0b10 	vmov	d0, r0, r1
 80079fe:	bd08      	pop	{r3, pc}

08007a00 <__math_oflow>:
 8007a00:	b508      	push	{r3, lr}
 8007a02:	2200      	movs	r2, #0
 8007a04:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007a08:	f7ff ffdd 	bl	80079c6 <xflow>
 8007a0c:	ec41 0b10 	vmov	d0, r0, r1
 8007a10:	bd08      	pop	{r3, pc}

08007a12 <with_errnof>:
 8007a12:	b513      	push	{r0, r1, r4, lr}
 8007a14:	4604      	mov	r4, r0
 8007a16:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007a1a:	f7fe fdd5 	bl	80065c8 <__errno>
 8007a1e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8007a22:	6004      	str	r4, [r0, #0]
 8007a24:	b002      	add	sp, #8
 8007a26:	bd10      	pop	{r4, pc}

08007a28 <xflowf>:
 8007a28:	b130      	cbz	r0, 8007a38 <xflowf+0x10>
 8007a2a:	eef1 7a40 	vneg.f32	s15, s0
 8007a2e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007a32:	2022      	movs	r0, #34	; 0x22
 8007a34:	f7ff bfed 	b.w	8007a12 <with_errnof>
 8007a38:	eef0 7a40 	vmov.f32	s15, s0
 8007a3c:	e7f7      	b.n	8007a2e <xflowf+0x6>
	...

08007a40 <__math_uflowf>:
 8007a40:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007a48 <__math_uflowf+0x8>
 8007a44:	f7ff bff0 	b.w	8007a28 <xflowf>
 8007a48:	10000000 	.word	0x10000000

08007a4c <__math_oflowf>:
 8007a4c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007a54 <__math_oflowf+0x8>
 8007a50:	f7ff bfea 	b.w	8007a28 <xflowf>
 8007a54:	70000000 	.word	0x70000000

08007a58 <fabs>:
 8007a58:	ec51 0b10 	vmov	r0, r1, d0
 8007a5c:	ee10 2a10 	vmov	r2, s0
 8007a60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007a64:	ec43 2b10 	vmov	d0, r2, r3
 8007a68:	4770      	bx	lr

08007a6a <finite>:
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	ed8d 0b00 	vstr	d0, [sp]
 8007a70:	9801      	ldr	r0, [sp, #4]
 8007a72:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007a76:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007a7a:	0fc0      	lsrs	r0, r0, #31
 8007a7c:	b002      	add	sp, #8
 8007a7e:	4770      	bx	lr

08007a80 <scalbn>:
 8007a80:	b570      	push	{r4, r5, r6, lr}
 8007a82:	ec55 4b10 	vmov	r4, r5, d0
 8007a86:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007a8a:	4606      	mov	r6, r0
 8007a8c:	462b      	mov	r3, r5
 8007a8e:	b99a      	cbnz	r2, 8007ab8 <scalbn+0x38>
 8007a90:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007a94:	4323      	orrs	r3, r4
 8007a96:	d036      	beq.n	8007b06 <scalbn+0x86>
 8007a98:	4b39      	ldr	r3, [pc, #228]	; (8007b80 <scalbn+0x100>)
 8007a9a:	4629      	mov	r1, r5
 8007a9c:	ee10 0a10 	vmov	r0, s0
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f7f8 fd55 	bl	8000550 <__aeabi_dmul>
 8007aa6:	4b37      	ldr	r3, [pc, #220]	; (8007b84 <scalbn+0x104>)
 8007aa8:	429e      	cmp	r6, r3
 8007aaa:	4604      	mov	r4, r0
 8007aac:	460d      	mov	r5, r1
 8007aae:	da10      	bge.n	8007ad2 <scalbn+0x52>
 8007ab0:	a32b      	add	r3, pc, #172	; (adr r3, 8007b60 <scalbn+0xe0>)
 8007ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab6:	e03a      	b.n	8007b2e <scalbn+0xae>
 8007ab8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007abc:	428a      	cmp	r2, r1
 8007abe:	d10c      	bne.n	8007ada <scalbn+0x5a>
 8007ac0:	ee10 2a10 	vmov	r2, s0
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	4629      	mov	r1, r5
 8007ac8:	f7f8 fb8c 	bl	80001e4 <__adddf3>
 8007acc:	4604      	mov	r4, r0
 8007ace:	460d      	mov	r5, r1
 8007ad0:	e019      	b.n	8007b06 <scalbn+0x86>
 8007ad2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	3a36      	subs	r2, #54	; 0x36
 8007ada:	4432      	add	r2, r6
 8007adc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007ae0:	428a      	cmp	r2, r1
 8007ae2:	dd08      	ble.n	8007af6 <scalbn+0x76>
 8007ae4:	2d00      	cmp	r5, #0
 8007ae6:	a120      	add	r1, pc, #128	; (adr r1, 8007b68 <scalbn+0xe8>)
 8007ae8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007aec:	da1c      	bge.n	8007b28 <scalbn+0xa8>
 8007aee:	a120      	add	r1, pc, #128	; (adr r1, 8007b70 <scalbn+0xf0>)
 8007af0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007af4:	e018      	b.n	8007b28 <scalbn+0xa8>
 8007af6:	2a00      	cmp	r2, #0
 8007af8:	dd08      	ble.n	8007b0c <scalbn+0x8c>
 8007afa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007afe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007b02:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007b06:	ec45 4b10 	vmov	d0, r4, r5
 8007b0a:	bd70      	pop	{r4, r5, r6, pc}
 8007b0c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007b10:	da19      	bge.n	8007b46 <scalbn+0xc6>
 8007b12:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007b16:	429e      	cmp	r6, r3
 8007b18:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007b1c:	dd0a      	ble.n	8007b34 <scalbn+0xb4>
 8007b1e:	a112      	add	r1, pc, #72	; (adr r1, 8007b68 <scalbn+0xe8>)
 8007b20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1e2      	bne.n	8007aee <scalbn+0x6e>
 8007b28:	a30f      	add	r3, pc, #60	; (adr r3, 8007b68 <scalbn+0xe8>)
 8007b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2e:	f7f8 fd0f 	bl	8000550 <__aeabi_dmul>
 8007b32:	e7cb      	b.n	8007acc <scalbn+0x4c>
 8007b34:	a10a      	add	r1, pc, #40	; (adr r1, 8007b60 <scalbn+0xe0>)
 8007b36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d0b8      	beq.n	8007ab0 <scalbn+0x30>
 8007b3e:	a10e      	add	r1, pc, #56	; (adr r1, 8007b78 <scalbn+0xf8>)
 8007b40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b44:	e7b4      	b.n	8007ab0 <scalbn+0x30>
 8007b46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007b4a:	3236      	adds	r2, #54	; 0x36
 8007b4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007b50:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007b54:	4620      	mov	r0, r4
 8007b56:	4b0c      	ldr	r3, [pc, #48]	; (8007b88 <scalbn+0x108>)
 8007b58:	2200      	movs	r2, #0
 8007b5a:	e7e8      	b.n	8007b2e <scalbn+0xae>
 8007b5c:	f3af 8000 	nop.w
 8007b60:	c2f8f359 	.word	0xc2f8f359
 8007b64:	01a56e1f 	.word	0x01a56e1f
 8007b68:	8800759c 	.word	0x8800759c
 8007b6c:	7e37e43c 	.word	0x7e37e43c
 8007b70:	8800759c 	.word	0x8800759c
 8007b74:	fe37e43c 	.word	0xfe37e43c
 8007b78:	c2f8f359 	.word	0xc2f8f359
 8007b7c:	81a56e1f 	.word	0x81a56e1f
 8007b80:	43500000 	.word	0x43500000
 8007b84:	ffff3cb0 	.word	0xffff3cb0
 8007b88:	3c900000 	.word	0x3c900000

08007b8c <fabsf>:
 8007b8c:	ee10 3a10 	vmov	r3, s0
 8007b90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b94:	ee00 3a10 	vmov	s0, r3
 8007b98:	4770      	bx	lr

08007b9a <finitef>:
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007ba0:	9801      	ldr	r0, [sp, #4]
 8007ba2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007ba6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007baa:	bfac      	ite	ge
 8007bac:	2000      	movge	r0, #0
 8007bae:	2001      	movlt	r0, #1
 8007bb0:	b002      	add	sp, #8
 8007bb2:	4770      	bx	lr

08007bb4 <scalbnf>:
 8007bb4:	ee10 3a10 	vmov	r3, s0
 8007bb8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007bbc:	d025      	beq.n	8007c0a <scalbnf+0x56>
 8007bbe:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007bc2:	d302      	bcc.n	8007bca <scalbnf+0x16>
 8007bc4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007bc8:	4770      	bx	lr
 8007bca:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8007bce:	d122      	bne.n	8007c16 <scalbnf+0x62>
 8007bd0:	4b2a      	ldr	r3, [pc, #168]	; (8007c7c <scalbnf+0xc8>)
 8007bd2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007c80 <scalbnf+0xcc>
 8007bd6:	4298      	cmp	r0, r3
 8007bd8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007bdc:	db16      	blt.n	8007c0c <scalbnf+0x58>
 8007bde:	ee10 3a10 	vmov	r3, s0
 8007be2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007be6:	3a19      	subs	r2, #25
 8007be8:	4402      	add	r2, r0
 8007bea:	2afe      	cmp	r2, #254	; 0xfe
 8007bec:	dd15      	ble.n	8007c1a <scalbnf+0x66>
 8007bee:	ee10 3a10 	vmov	r3, s0
 8007bf2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8007c84 <scalbnf+0xd0>
 8007bf6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8007c88 <scalbnf+0xd4>
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	eeb0 7a67 	vmov.f32	s14, s15
 8007c00:	bfb8      	it	lt
 8007c02:	eef0 7a66 	vmovlt.f32	s15, s13
 8007c06:	ee27 0a27 	vmul.f32	s0, s14, s15
 8007c0a:	4770      	bx	lr
 8007c0c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007c8c <scalbnf+0xd8>
 8007c10:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007c14:	4770      	bx	lr
 8007c16:	0dd2      	lsrs	r2, r2, #23
 8007c18:	e7e6      	b.n	8007be8 <scalbnf+0x34>
 8007c1a:	2a00      	cmp	r2, #0
 8007c1c:	dd06      	ble.n	8007c2c <scalbnf+0x78>
 8007c1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007c22:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007c26:	ee00 3a10 	vmov	s0, r3
 8007c2a:	4770      	bx	lr
 8007c2c:	f112 0f16 	cmn.w	r2, #22
 8007c30:	da1a      	bge.n	8007c68 <scalbnf+0xb4>
 8007c32:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007c36:	4298      	cmp	r0, r3
 8007c38:	ee10 3a10 	vmov	r3, s0
 8007c3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c40:	dd0a      	ble.n	8007c58 <scalbnf+0xa4>
 8007c42:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8007c84 <scalbnf+0xd0>
 8007c46:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007c88 <scalbnf+0xd4>
 8007c4a:	eef0 7a40 	vmov.f32	s15, s0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	bf18      	it	ne
 8007c52:	eeb0 0a47 	vmovne.f32	s0, s14
 8007c56:	e7db      	b.n	8007c10 <scalbnf+0x5c>
 8007c58:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8007c8c <scalbnf+0xd8>
 8007c5c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8007c90 <scalbnf+0xdc>
 8007c60:	eef0 7a40 	vmov.f32	s15, s0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	e7f3      	b.n	8007c50 <scalbnf+0x9c>
 8007c68:	3219      	adds	r2, #25
 8007c6a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007c6e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007c72:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007c94 <scalbnf+0xe0>
 8007c76:	ee07 3a10 	vmov	s14, r3
 8007c7a:	e7c4      	b.n	8007c06 <scalbnf+0x52>
 8007c7c:	ffff3cb0 	.word	0xffff3cb0
 8007c80:	4c000000 	.word	0x4c000000
 8007c84:	7149f2ca 	.word	0x7149f2ca
 8007c88:	f149f2ca 	.word	0xf149f2ca
 8007c8c:	0da24260 	.word	0x0da24260
 8007c90:	8da24260 	.word	0x8da24260
 8007c94:	33000000 	.word	0x33000000

08007c98 <_init>:
 8007c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9a:	bf00      	nop
 8007c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c9e:	bc08      	pop	{r3}
 8007ca0:	469e      	mov	lr, r3
 8007ca2:	4770      	bx	lr

08007ca4 <_fini>:
 8007ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca6:	bf00      	nop
 8007ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007caa:	bc08      	pop	{r3}
 8007cac:	469e      	mov	lr, r3
 8007cae:	4770      	bx	lr
