
ProjectModuleV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034c8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003660  08003660  00013660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036cc  080036cc  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080036cc  080036cc  000136cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036d4  080036d4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036d4  080036d4  000136d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036d8  080036d8  000136d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080036dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  20000018  080036f0  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  080036f0  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db6d  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d95  00000000  00000000  0002dbb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  0002f948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  00030590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017263  00000000  00000000  00031110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f5dd  00000000  00000000  00048373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eec2  00000000  00000000  00057950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6812  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003310  00000000  00000000  000e6864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003648 	.word	0x08003648

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	08003648 	.word	0x08003648

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <InitKalmanStruct>:
extern arm_matrix_instance_f32 mat_P, mat_P_minus, mat_Q;
extern arm_matrix_instance_f32 mat_C, mat_R, mat_S, mat_K;
extern arm_matrix_instance_f32 mat_temp3x3A,mat_temp3x3B, mat_temp3x1,mat_temp1x3, mat_temp1x1;

void InitKalmanStruct(Kalman* KF,float q,float r)
{
 80004dc:	b4b0      	push	{r4, r5, r7}
 80004de:	b0a1      	sub	sp, #132	; 0x84
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	ed87 0a02 	vstr	s0, [r7, #8]
 80004e8:	edc7 0a01 	vstr	s1, [r7, #4]
	KF->R = r;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	655a      	str	r2, [r3, #84]	; 0x54
	KF->var_Q = q;
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	68ba      	ldr	r2, [r7, #8]
 80004f6:	659a      	str	r2, [r3, #88]	; 0x58
	KF->D = 0;
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	f04f 0200 	mov.w	r2, #0
 80004fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	float32_t a[9] = {
 8000502:	4b48      	ldr	r3, [pc, #288]	; (8000624 <InitKalmanStruct+0x148>)
 8000504:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000508:	461d      	mov	r5, r3
 800050a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800050c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800050e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000510:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000512:	682b      	ldr	r3, [r5, #0]
 8000514:	6023      	str	r3, [r4, #0]
			1, 0.001, 0.0000005,
			0, 1, 0.001,
			0, 0, 1
	};
	float iden[9] = {
 8000516:	4b44      	ldr	r3, [pc, #272]	; (8000628 <InitKalmanStruct+0x14c>)
 8000518:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800051c:	461d      	mov	r5, r3
 800051e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000522:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000526:	682b      	ldr	r3, [r5, #0]
 8000528:	6023      	str	r3, [r4, #0]
			1, 0, 0,
			0, 1, 0,
			0, 0, 1
	};
	int i;
	for(i=0;i<9;i++)
 800052a:	2300      	movs	r3, #0
 800052c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800052e:	e023      	b.n	8000578 <InitKalmanStruct+0x9c>
	{
		KF->A[i] = a[i];
 8000530:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	3380      	adds	r3, #128	; 0x80
 8000536:	443b      	add	r3, r7
 8000538:	3b28      	subs	r3, #40	; 0x28
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	68f9      	ldr	r1, [r7, #12]
 800053e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000540:	3318      	adds	r3, #24
 8000542:	009b      	lsls	r3, r3, #2
 8000544:	440b      	add	r3, r1
 8000546:	601a      	str	r2, [r3, #0]
		KF->I[i] = iden[i];
 8000548:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	3380      	adds	r3, #128	; 0x80
 800054e:	443b      	add	r3, r7
 8000550:	3b4c      	subs	r3, #76	; 0x4c
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	68f9      	ldr	r1, [r7, #12]
 8000556:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000558:	332e      	adds	r3, #46	; 0x2e
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	440b      	add	r3, r1
 800055e:	601a      	str	r2, [r3, #0]
		KF->P[i] = 0;
 8000560:	68fa      	ldr	r2, [r7, #12]
 8000562:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000564:	3302      	adds	r3, #2
 8000566:	009b      	lsls	r3, r3, #2
 8000568:	4413      	add	r3, r2
 800056a:	3304      	adds	r3, #4
 800056c:	f04f 0200 	mov.w	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
	for(i=0;i<9;i++)
 8000572:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000574:	3301      	adds	r3, #1
 8000576:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000578:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800057a:	2b08      	cmp	r3, #8
 800057c:	ddd8      	ble.n	8000530 <InitKalmanStruct+0x54>
	}
	float32_t b[3] = {
 800057e:	f04f 0300 	mov.w	r3, #0
 8000582:	62bb      	str	r3, [r7, #40]	; 0x28
 8000584:	f04f 0300 	mov.w	r3, #0
 8000588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800058a:	f04f 0300 	mov.w	r3, #0
 800058e:	633b      	str	r3, [r7, #48]	; 0x30
			0, 0, 0
	};
	float32_t c[3] = {
 8000590:	f04f 0300 	mov.w	r3, #0
 8000594:	61fb      	str	r3, [r7, #28]
 8000596:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800059a:	623b      	str	r3, [r7, #32]
 800059c:	f04f 0300 	mov.w	r3, #0
 80005a0:	627b      	str	r3, [r7, #36]	; 0x24
//			0, 0, 0
//	};
//	float32_t p[3] = {
//				0, 0, 0
//		};
	float32_t g[3] = {
 80005a2:	4a22      	ldr	r2, [pc, #136]	; (800062c <InitKalmanStruct+0x150>)
 80005a4:	f107 0310 	add.w	r3, r7, #16
 80005a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80005aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
//	float32_t g[3] = {
//			0.0000005,
//			0.001,
//			0.0
//	};
	for(i=0;i<3;i++)
 80005ae:	2300      	movs	r3, #0
 80005b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80005b2:	e02e      	b.n	8000612 <InitKalmanStruct+0x136>
	{
		KF->B[i] = b[i];
 80005b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	3380      	adds	r3, #128	; 0x80
 80005ba:	443b      	add	r3, r7
 80005bc:	3b58      	subs	r3, #88	; 0x58
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	68f9      	ldr	r1, [r7, #12]
 80005c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005c4:	3320      	adds	r3, #32
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	440b      	add	r3, r1
 80005ca:	3304      	adds	r3, #4
 80005cc:	601a      	str	r2, [r3, #0]
		KF->C[i] = c[i];
 80005ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	3380      	adds	r3, #128	; 0x80
 80005d4:	443b      	add	r3, r7
 80005d6:	3b64      	subs	r3, #100	; 0x64
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	68f9      	ldr	r1, [r7, #12]
 80005dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005de:	3324      	adds	r3, #36	; 0x24
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	440b      	add	r3, r1
 80005e4:	601a      	str	r2, [r3, #0]
		KF->G[i] = g[i];
 80005e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	3380      	adds	r3, #128	; 0x80
 80005ec:	443b      	add	r3, r7
 80005ee:	3b70      	subs	r3, #112	; 0x70
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	68f9      	ldr	r1, [r7, #12]
 80005f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005f6:	3328      	adds	r3, #40	; 0x28
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	440b      	add	r3, r1
 80005fc:	601a      	str	r2, [r3, #0]
		KF->x_hat[i] = 0;
 80005fe:	68fa      	ldr	r2, [r7, #12]
 8000600:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	4413      	add	r3, r2
 8000606:	f04f 0200 	mov.w	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
	for(i=0;i<3;i++)
 800060c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800060e:	3301      	adds	r3, #1
 8000610:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000612:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000614:	2b02      	cmp	r3, #2
 8000616:	ddcd      	ble.n	80005b4 <InitKalmanStruct+0xd8>
	}
}
 8000618:	bf00      	nop
 800061a:	bf00      	nop
 800061c:	3784      	adds	r7, #132	; 0x84
 800061e:	46bd      	mov	sp, r7
 8000620:	bcb0      	pop	{r4, r5, r7}
 8000622:	4770      	bx	lr
 8000624:	08003660 	.word	0x08003660
 8000628:	08003684 	.word	0x08003684
 800062c:	080036a8 	.word	0x080036a8

08000630 <InitReadEncoder>:
uint64_t micros(){ //get time in micros
	return __HAL_TIM_GET_COUNTER(&htim5)+ ReadEncoderParam._micros;
}

void InitReadEncoder(ReadEncoder* Read, uint32_t samplingtime)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
	Read->_micros = 0;
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	f04f 0200 	mov.w	r2, #0
 8000640:	f04f 0300 	mov.w	r3, #0
 8000644:	e9c1 2300 	strd	r2, r3, [r1]
	Read->PPR = 8192;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800064e:	811a      	strh	r2, [r3, #8]
	Read->samplingTime = samplingtime;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	683a      	ldr	r2, [r7, #0]
 8000654:	60da      	str	r2, [r3, #12]
	Read->MotorSetDuty = 0;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2200      	movs	r2, #0
 800065a:	741a      	strb	r2, [r3, #16]
	Read->Pulse_Compare = 0;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2200      	movs	r2, #0
 8000660:	825a      	strh	r2, [r3, #18]
	Read->DIR = 0;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2200      	movs	r2, #0
 8000666:	751a      	strb	r2, [r3, #20]
}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <SetTrajectoryConstrainAndInit>:
 */
#include "Trajectory.h"
#include "math.h"

void SetTrajectoryConstrainAndInit(Trajectory* Tj, float32_t  vmax,float32_t  amax)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000680:	edc7 0a01 	vstr	s1, [r7, #4]
	Tj->complete = 1;
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	2201      	movs	r2, #1
 8000688:	629a      	str	r2, [r3, #40]	; 0x28
	Tj->v_max = vmax;
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	68ba      	ldr	r2, [r7, #8]
 800068e:	60da      	str	r2, [r3, #12]
	Tj->a_max = amax;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	611a      	str	r2, [r3, #16]
	Tj->final_pos = 800;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	4a05      	ldr	r2, [pc, #20]	; (80006b0 <SetTrajectoryConstrainAndInit+0x3c>)
 800069a:	605a      	str	r2, [r3, #4]
	Tj->start_pos = 0;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	f04f 0200 	mov.w	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
}
 80006a4:	bf00      	nop
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	44480000 	.word	0x44480000

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f000 fd4e 	bl	8001158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f908 	bl	80008d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f000 fb0e 	bl	8000ce0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006c4:	f000 fae2 	bl	8000c8c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80006c8:	f000 f96c 	bl	80009a4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006cc:	f000 f9ee 	bl	8000aac <MX_TIM2_Init>
  MX_TIM5_Init();
 80006d0:	f000 fa8e 	bl	8000bf0 <MX_TIM5_Init>
  MX_TIM3_Init();-
 80006d4:	f000 fa3e 	bl	8000b54 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);//Start PWM
 80006d8:	2100      	movs	r1, #0
 80006da:	484c      	ldr	r0, [pc, #304]	; (800080c <main+0x158>)
 80006dc:	f001 fdcc 	bl	8002278 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2); //Start QEI
 80006e0:	2104      	movs	r1, #4
 80006e2:	484b      	ldr	r0, [pc, #300]	; (8000810 <main+0x15c>)
 80006e4:	f001 ff1e 	bl	8002524 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 80006e8:	484a      	ldr	r0, [pc, #296]	; (8000814 <main+0x160>)
 80006ea:	f001 fd13 	bl	8002114 <HAL_TIM_Base_Start_IT>

  InitKalmanStruct(&KF,Var_Q,Var_R);
 80006ee:	4b4a      	ldr	r3, [pc, #296]	; (8000818 <main+0x164>)
 80006f0:	edd3 7a00 	vldr	s15, [r3]
 80006f4:	4b49      	ldr	r3, [pc, #292]	; (800081c <main+0x168>)
 80006f6:	ed93 7a00 	vldr	s14, [r3]
 80006fa:	eef0 0a47 	vmov.f32	s1, s14
 80006fe:	eeb0 0a67 	vmov.f32	s0, s15
 8000702:	4847      	ldr	r0, [pc, #284]	; (8000820 <main+0x16c>)
 8000704:	f7ff feea 	bl	80004dc <InitKalmanStruct>
  InitReadEncoder(&ReadEncoderParam, 1000);
 8000708:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800070c:	4845      	ldr	r0, [pc, #276]	; (8000824 <main+0x170>)
 800070e:	f7ff ff8f 	bl	8000630 <InitReadEncoder>
  SetTrajectoryConstrainAndInit(&Traj, 900, 1400);
 8000712:	eddf 0a45 	vldr	s1, [pc, #276]	; 8000828 <main+0x174>
 8000716:	ed9f 0a45 	vldr	s0, [pc, #276]	; 800082c <main+0x178>
 800071a:	4845      	ldr	r0, [pc, #276]	; (8000830 <main+0x17c>)
 800071c:	f7ff ffaa 	bl	8000674 <SetTrajectoryConstrainAndInit>


  arm_mat_init_f32(&mat_A, 3, 3,KF.A);//3x3
 8000720:	4b44      	ldr	r3, [pc, #272]	; (8000834 <main+0x180>)
 8000722:	2203      	movs	r2, #3
 8000724:	2103      	movs	r1, #3
 8000726:	4844      	ldr	r0, [pc, #272]	; (8000838 <main+0x184>)
 8000728:	f000 fcfd 	bl	8001126 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_x_hat, 3, 1, KF.x_hat);
 800072c:	4b3c      	ldr	r3, [pc, #240]	; (8000820 <main+0x16c>)
 800072e:	2201      	movs	r2, #1
 8000730:	2103      	movs	r1, #3
 8000732:	4842      	ldr	r0, [pc, #264]	; (800083c <main+0x188>)
 8000734:	f000 fcf7 	bl	8001126 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_x_hat_minus, 3, 1, KF.x_hat_minus);
 8000738:	4b41      	ldr	r3, [pc, #260]	; (8000840 <main+0x18c>)
 800073a:	2201      	movs	r2, #1
 800073c:	2103      	movs	r1, #3
 800073e:	4841      	ldr	r0, [pc, #260]	; (8000844 <main+0x190>)
 8000740:	f000 fcf1 	bl	8001126 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_B, 3, 1, KF.B);
 8000744:	4b40      	ldr	r3, [pc, #256]	; (8000848 <main+0x194>)
 8000746:	2201      	movs	r2, #1
 8000748:	2103      	movs	r1, #3
 800074a:	4840      	ldr	r0, [pc, #256]	; (800084c <main+0x198>)
 800074c:	f000 fceb 	bl	8001126 <arm_mat_init_f32>
  //arm_mat_init_f32(&mat_u, 1, 1, NULL);  // Set the input control vector if needed
  arm_mat_init_f32(&mat_P, 3, 3, KF.P);//3x3
 8000750:	4b3f      	ldr	r3, [pc, #252]	; (8000850 <main+0x19c>)
 8000752:	2203      	movs	r2, #3
 8000754:	2103      	movs	r1, #3
 8000756:	483f      	ldr	r0, [pc, #252]	; (8000854 <main+0x1a0>)
 8000758:	f000 fce5 	bl	8001126 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_P_minus, 3, 3, KF.P_minus);//3x3
 800075c:	4b3e      	ldr	r3, [pc, #248]	; (8000858 <main+0x1a4>)
 800075e:	2203      	movs	r2, #3
 8000760:	2103      	movs	r1, #3
 8000762:	483e      	ldr	r0, [pc, #248]	; (800085c <main+0x1a8>)
 8000764:	f000 fcdf 	bl	8001126 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_Q, 3, 3,KF.Q);//3x3
 8000768:	4b3d      	ldr	r3, [pc, #244]	; (8000860 <main+0x1ac>)
 800076a:	2203      	movs	r2, #3
 800076c:	2103      	movs	r1, #3
 800076e:	483d      	ldr	r0, [pc, #244]	; (8000864 <main+0x1b0>)
 8000770:	f000 fcd9 	bl	8001126 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_C, 1, 3, KF.C);//1x3
 8000774:	4b3c      	ldr	r3, [pc, #240]	; (8000868 <main+0x1b4>)
 8000776:	2203      	movs	r2, #3
 8000778:	2101      	movs	r1, #1
 800077a:	483c      	ldr	r0, [pc, #240]	; (800086c <main+0x1b8>)
 800077c:	f000 fcd3 	bl	8001126 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_R, 1, 1, &KF.R);//1x1
 8000780:	4b3b      	ldr	r3, [pc, #236]	; (8000870 <main+0x1bc>)
 8000782:	2201      	movs	r2, #1
 8000784:	2101      	movs	r1, #1
 8000786:	483b      	ldr	r0, [pc, #236]	; (8000874 <main+0x1c0>)
 8000788:	f000 fccd 	bl	8001126 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_S, 1, 1, KF.S);//1x1
 800078c:	4b3a      	ldr	r3, [pc, #232]	; (8000878 <main+0x1c4>)
 800078e:	2201      	movs	r2, #1
 8000790:	2101      	movs	r1, #1
 8000792:	483a      	ldr	r0, [pc, #232]	; (800087c <main+0x1c8>)
 8000794:	f000 fcc7 	bl	8001126 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_K, 3, 1, KF.K);//3x1
 8000798:	4b39      	ldr	r3, [pc, #228]	; (8000880 <main+0x1cc>)
 800079a:	2201      	movs	r2, #1
 800079c:	2103      	movs	r1, #3
 800079e:	4839      	ldr	r0, [pc, #228]	; (8000884 <main+0x1d0>)
 80007a0:	f000 fcc1 	bl	8001126 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_temp3x3A, 3, 3, KF.temp3x3A);//3x3
 80007a4:	4b38      	ldr	r3, [pc, #224]	; (8000888 <main+0x1d4>)
 80007a6:	2203      	movs	r2, #3
 80007a8:	2103      	movs	r1, #3
 80007aa:	4838      	ldr	r0, [pc, #224]	; (800088c <main+0x1d8>)
 80007ac:	f000 fcbb 	bl	8001126 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_temp3x3B, 3, 3, KF.temp3x3B);//3x3
 80007b0:	4b37      	ldr	r3, [pc, #220]	; (8000890 <main+0x1dc>)
 80007b2:	2203      	movs	r2, #3
 80007b4:	2103      	movs	r1, #3
 80007b6:	4837      	ldr	r0, [pc, #220]	; (8000894 <main+0x1e0>)
 80007b8:	f000 fcb5 	bl	8001126 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_temp3x1, 3, 1, KF.temp3x1);//3x1
 80007bc:	4b36      	ldr	r3, [pc, #216]	; (8000898 <main+0x1e4>)
 80007be:	2201      	movs	r2, #1
 80007c0:	2103      	movs	r1, #3
 80007c2:	4836      	ldr	r0, [pc, #216]	; (800089c <main+0x1e8>)
 80007c4:	f000 fcaf 	bl	8001126 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_temp1x3, 1, 3, KF.temp1x3);//1x3
 80007c8:	4b35      	ldr	r3, [pc, #212]	; (80008a0 <main+0x1ec>)
 80007ca:	2203      	movs	r2, #3
 80007cc:	2101      	movs	r1, #1
 80007ce:	4835      	ldr	r0, [pc, #212]	; (80008a4 <main+0x1f0>)
 80007d0:	f000 fca9 	bl	8001126 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_temp1x1, 1, 1, &KF.temp1x1);//1x1
 80007d4:	4b34      	ldr	r3, [pc, #208]	; (80008a8 <main+0x1f4>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	2101      	movs	r1, #1
 80007da:	4834      	ldr	r0, [pc, #208]	; (80008ac <main+0x1f8>)
 80007dc:	f000 fca3 	bl	8001126 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_G, 3, 1, KF.G);//3x1
 80007e0:	4b33      	ldr	r3, [pc, #204]	; (80008b0 <main+0x1fc>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	2103      	movs	r1, #3
 80007e6:	4833      	ldr	r0, [pc, #204]	; (80008b4 <main+0x200>)
 80007e8:	f000 fc9d 	bl	8001126 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_GT, 1, 3, KF.GT);//1x3
 80007ec:	4b32      	ldr	r3, [pc, #200]	; (80008b8 <main+0x204>)
 80007ee:	2203      	movs	r2, #3
 80007f0:	2101      	movs	r1, #1
 80007f2:	4832      	ldr	r0, [pc, #200]	; (80008bc <main+0x208>)
 80007f4:	f000 fc97 	bl	8001126 <arm_mat_init_f32>
  arm_mat_init_f32(&eye, 3, 3, KF.I);//1x3
 80007f8:	4b31      	ldr	r3, [pc, #196]	; (80008c0 <main+0x20c>)
 80007fa:	2203      	movs	r2, #3
 80007fc:	2103      	movs	r1, #3
 80007fe:	4831      	ldr	r0, [pc, #196]	; (80008c4 <main+0x210>)
 8000800:	f000 fc91 	bl	8001126 <arm_mat_init_f32>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  test = MAX(3.343,2.554);
 8000804:	4b30      	ldr	r3, [pc, #192]	; (80008c8 <main+0x214>)
 8000806:	4a31      	ldr	r2, [pc, #196]	; (80008cc <main+0x218>)
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	e7fb      	b.n	8000804 <main+0x150>
 800080c:	20000034 	.word	0x20000034
 8000810:	2000007c 	.word	0x2000007c
 8000814:	2000010c 	.word	0x2000010c
 8000818:	20000000 	.word	0x20000000
 800081c:	20000004 	.word	0x20000004
 8000820:	2000019c 	.word	0x2000019c
 8000824:	200003b8 	.word	0x200003b8
 8000828:	44af0000 	.word	0x44af0000
 800082c:	44610000 	.word	0x44610000
 8000830:	200003d0 	.word	0x200003d0
 8000834:	200001fc 	.word	0x200001fc
 8000838:	2000031c 	.word	0x2000031c
 800083c:	20000324 	.word	0x20000324
 8000840:	20000278 	.word	0x20000278
 8000844:	2000032c 	.word	0x2000032c
 8000848:	20000220 	.word	0x20000220
 800084c:	20000334 	.word	0x20000334
 8000850:	200001a8 	.word	0x200001a8
 8000854:	20000354 	.word	0x20000354
 8000858:	20000284 	.word	0x20000284
 800085c:	2000035c 	.word	0x2000035c
 8000860:	200001cc 	.word	0x200001cc
 8000864:	20000364 	.word	0x20000364
 8000868:	2000022c 	.word	0x2000022c
 800086c:	2000036c 	.word	0x2000036c
 8000870:	200001f0 	.word	0x200001f0
 8000874:	20000374 	.word	0x20000374
 8000878:	200002a8 	.word	0x200002a8
 800087c:	2000037c 	.word	0x2000037c
 8000880:	200002ac 	.word	0x200002ac
 8000884:	20000384 	.word	0x20000384
 8000888:	200002b8 	.word	0x200002b8
 800088c:	2000038c 	.word	0x2000038c
 8000890:	200002dc 	.word	0x200002dc
 8000894:	20000394 	.word	0x20000394
 8000898:	20000300 	.word	0x20000300
 800089c:	2000039c 	.word	0x2000039c
 80008a0:	2000030c 	.word	0x2000030c
 80008a4:	200003a4 	.word	0x200003a4
 80008a8:	20000318 	.word	0x20000318
 80008ac:	200003ac 	.word	0x200003ac
 80008b0:	2000023c 	.word	0x2000023c
 80008b4:	20000344 	.word	0x20000344
 80008b8:	20000248 	.word	0x20000248
 80008bc:	2000033c 	.word	0x2000033c
 80008c0:	20000254 	.word	0x20000254
 80008c4:	2000034c 	.word	0x2000034c
 80008c8:	20000198 	.word	0x20000198
 80008cc:	4055f3b6 	.word	0x4055f3b6

080008d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b094      	sub	sp, #80	; 0x50
 80008d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d6:	f107 0320 	add.w	r3, r7, #32
 80008da:	2230      	movs	r2, #48	; 0x30
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f002 feaa 	bl	8003638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f4:	2300      	movs	r3, #0
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	4b28      	ldr	r3, [pc, #160]	; (800099c <SystemClock_Config+0xcc>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fc:	4a27      	ldr	r2, [pc, #156]	; (800099c <SystemClock_Config+0xcc>)
 80008fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000902:	6413      	str	r3, [r2, #64]	; 0x40
 8000904:	4b25      	ldr	r3, [pc, #148]	; (800099c <SystemClock_Config+0xcc>)
 8000906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000910:	2300      	movs	r3, #0
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	4b22      	ldr	r3, [pc, #136]	; (80009a0 <SystemClock_Config+0xd0>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a21      	ldr	r2, [pc, #132]	; (80009a0 <SystemClock_Config+0xd0>)
 800091a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800091e:	6013      	str	r3, [r2, #0]
 8000920:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <SystemClock_Config+0xd0>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800092c:	2302      	movs	r3, #2
 800092e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000930:	2301      	movs	r3, #1
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000934:	2310      	movs	r3, #16
 8000936:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000938:	2302      	movs	r3, #2
 800093a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800093c:	2300      	movs	r3, #0
 800093e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000940:	2310      	movs	r3, #16
 8000942:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000944:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000948:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800094a:	2304      	movs	r3, #4
 800094c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800094e:	2304      	movs	r3, #4
 8000950:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000952:	f107 0320 	add.w	r3, r7, #32
 8000956:	4618      	mov	r0, r3
 8000958:	f000 fef4 	bl	8001744 <HAL_RCC_OscConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000962:	f000 fa2b 	bl	8000dbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000966:	230f      	movs	r3, #15
 8000968:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800096a:	2302      	movs	r3, #2
 800096c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000976:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	2102      	movs	r1, #2
 8000982:	4618      	mov	r0, r3
 8000984:	f001 f956 	bl	8001c34 <HAL_RCC_ClockConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800098e:	f000 fa15 	bl	8000dbc <Error_Handler>
  }
}
 8000992:	bf00      	nop
 8000994:	3750      	adds	r7, #80	; 0x50
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800
 80009a0:	40007000 	.word	0x40007000

080009a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b092      	sub	sp, #72	; 0x48
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
 80009c4:	615a      	str	r2, [r3, #20]
 80009c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2220      	movs	r2, #32
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f002 fe32 	bl	8003638 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009d4:	4b33      	ldr	r3, [pc, #204]	; (8000aa4 <MX_TIM1_Init+0x100>)
 80009d6:	4a34      	ldr	r2, [pc, #208]	; (8000aa8 <MX_TIM1_Init+0x104>)
 80009d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80009da:	4b32      	ldr	r3, [pc, #200]	; (8000aa4 <MX_TIM1_Init+0x100>)
 80009dc:	2253      	movs	r2, #83	; 0x53
 80009de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e0:	4b30      	ldr	r3, [pc, #192]	; (8000aa4 <MX_TIM1_Init+0x100>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80009e6:	4b2f      	ldr	r3, [pc, #188]	; (8000aa4 <MX_TIM1_Init+0x100>)
 80009e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ee:	4b2d      	ldr	r3, [pc, #180]	; (8000aa4 <MX_TIM1_Init+0x100>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009f4:	4b2b      	ldr	r3, [pc, #172]	; (8000aa4 <MX_TIM1_Init+0x100>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fa:	4b2a      	ldr	r3, [pc, #168]	; (8000aa4 <MX_TIM1_Init+0x100>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a00:	4828      	ldr	r0, [pc, #160]	; (8000aa4 <MX_TIM1_Init+0x100>)
 8000a02:	f001 fbe9 	bl	80021d8 <HAL_TIM_PWM_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000a0c:	f000 f9d6 	bl	8000dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a10:	2300      	movs	r3, #0
 8000a12:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a18:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4821      	ldr	r0, [pc, #132]	; (8000aa4 <MX_TIM1_Init+0x100>)
 8000a20:	f002 fa64 	bl	8002eec <HAL_TIMEx_MasterConfigSynchronization>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000a2a:	f000 f9c7 	bl	8000dbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a2e:	2360      	movs	r3, #96	; 0x60
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 8000a32:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a44:	2300      	movs	r3, #0
 8000a46:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a50:	2200      	movs	r2, #0
 8000a52:	4619      	mov	r1, r3
 8000a54:	4813      	ldr	r0, [pc, #76]	; (8000aa4 <MX_TIM1_Init+0x100>)
 8000a56:	f001 fdf3 	bl	8002640 <HAL_TIM_PWM_ConfigChannel>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000a60:	f000 f9ac 	bl	8000dbc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a7c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	4619      	mov	r1, r3
 8000a86:	4807      	ldr	r0, [pc, #28]	; (8000aa4 <MX_TIM1_Init+0x100>)
 8000a88:	f002 fa9e 	bl	8002fc8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8000a92:	f000 f993 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a96:	4803      	ldr	r0, [pc, #12]	; (8000aa4 <MX_TIM1_Init+0x100>)
 8000a98:	f000 fa5e 	bl	8000f58 <HAL_TIM_MspPostInit>

}
 8000a9c:	bf00      	nop
 8000a9e:	3748      	adds	r7, #72	; 0x48
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000034 	.word	0x20000034
 8000aa8:	40010000 	.word	0x40010000

08000aac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08c      	sub	sp, #48	; 0x30
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	2224      	movs	r2, #36	; 0x24
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f002 fdbc 	bl	8003638 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ac8:	4b21      	ldr	r3, [pc, #132]	; (8000b50 <MX_TIM2_Init+0xa4>)
 8000aca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ace:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <MX_TIM2_Init+0xa4>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	; (8000b50 <MX_TIM2_Init+0xa4>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000adc:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <MX_TIM2_Init+0xa4>)
 8000ade:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <MX_TIM2_Init+0xa4>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aea:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <MX_TIM2_Init+0xa4>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000af0:	2303      	movs	r3, #3
 8000af2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000af4:	2300      	movs	r3, #0
 8000af6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000af8:	2301      	movs	r3, #1
 8000afa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b04:	2300      	movs	r3, #0
 8000b06:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	4619      	mov	r1, r3
 8000b1a:	480d      	ldr	r0, [pc, #52]	; (8000b50 <MX_TIM2_Init+0xa4>)
 8000b1c:	f001 fc5c 	bl	80023d8 <HAL_TIM_Encoder_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000b26:	f000 f949 	bl	8000dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	4619      	mov	r1, r3
 8000b36:	4806      	ldr	r0, [pc, #24]	; (8000b50 <MX_TIM2_Init+0xa4>)
 8000b38:	f002 f9d8 	bl	8002eec <HAL_TIMEx_MasterConfigSynchronization>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000b42:	f000 f93b 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	3730      	adds	r7, #48	; 0x30
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	2000007c 	.word	0x2000007c

08000b54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b5a:	f107 0308 	add.w	r3, r7, #8
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b68:	463b      	mov	r3, r7
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b70:	4b1d      	ldr	r3, [pc, #116]	; (8000be8 <MX_TIM3_Init+0x94>)
 8000b72:	4a1e      	ldr	r2, [pc, #120]	; (8000bec <MX_TIM3_Init+0x98>)
 8000b74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000b76:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <MX_TIM3_Init+0x94>)
 8000b78:	2253      	movs	r2, #83	; 0x53
 8000b7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <MX_TIM3_Init+0x94>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000b82:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <MX_TIM3_Init+0x94>)
 8000b84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <MX_TIM3_Init+0x94>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <MX_TIM3_Init+0x94>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b96:	4814      	ldr	r0, [pc, #80]	; (8000be8 <MX_TIM3_Init+0x94>)
 8000b98:	f001 fa6c 	bl	8002074 <HAL_TIM_Base_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000ba2:	f000 f90b 	bl	8000dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000baa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bac:	f107 0308 	add.w	r3, r7, #8
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480d      	ldr	r0, [pc, #52]	; (8000be8 <MX_TIM3_Init+0x94>)
 8000bb4:	f001 fe06 	bl	80027c4 <HAL_TIM_ConfigClockSource>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000bbe:	f000 f8fd 	bl	8000dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bca:	463b      	mov	r3, r7
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4806      	ldr	r0, [pc, #24]	; (8000be8 <MX_TIM3_Init+0x94>)
 8000bd0:	f002 f98c 	bl	8002eec <HAL_TIMEx_MasterConfigSynchronization>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000bda:	f000 f8ef 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200000c4 	.word	0x200000c4
 8000bec:	40000400 	.word	0x40000400

08000bf0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bf6:	f107 0308 	add.w	r3, r7, #8
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c04:	463b      	mov	r3, r7
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <MX_TIM5_Init+0x94>)
 8000c0e:	4a1e      	ldr	r2, [pc, #120]	; (8000c88 <MX_TIM5_Init+0x98>)
 8000c10:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <MX_TIM5_Init+0x94>)
 8000c14:	2253      	movs	r2, #83	; 0x53
 8000c16:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MX_TIM5_Init+0x94>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <MX_TIM5_Init+0x94>)
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295
 8000c24:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <MX_TIM5_Init+0x94>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <MX_TIM5_Init+0x94>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000c32:	4814      	ldr	r0, [pc, #80]	; (8000c84 <MX_TIM5_Init+0x94>)
 8000c34:	f001 fa1e 	bl	8002074 <HAL_TIM_Base_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000c3e:	f000 f8bd 	bl	8000dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000c48:	f107 0308 	add.w	r3, r7, #8
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480d      	ldr	r0, [pc, #52]	; (8000c84 <MX_TIM5_Init+0x94>)
 8000c50:	f001 fdb8 	bl	80027c4 <HAL_TIM_ConfigClockSource>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000c5a:	f000 f8af 	bl	8000dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000c66:	463b      	mov	r3, r7
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4806      	ldr	r0, [pc, #24]	; (8000c84 <MX_TIM5_Init+0x94>)
 8000c6c:	f002 f93e 	bl	8002eec <HAL_TIMEx_MasterConfigSynchronization>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000c76:	f000 f8a1 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2000010c 	.word	0x2000010c
 8000c88:	40000c00 	.word	0x40000c00

08000c8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <MX_USART2_UART_Init+0x4c>)
 8000c92:	4a12      	ldr	r2, [pc, #72]	; (8000cdc <MX_USART2_UART_Init+0x50>)
 8000c94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <MX_USART2_UART_Init+0x4c>)
 8000c98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <MX_USART2_UART_Init+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <MX_USART2_UART_Init+0x4c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <MX_USART2_UART_Init+0x4c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <MX_USART2_UART_Init+0x4c>)
 8000cb2:	220c      	movs	r2, #12
 8000cb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <MX_USART2_UART_Init+0x4c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <MX_USART2_UART_Init+0x4c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cc2:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <MX_USART2_UART_Init+0x4c>)
 8000cc4:	f002 f9d2 	bl	800306c <HAL_UART_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cce:	f000 f875 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000154 	.word	0x20000154
 8000cdc:	40004400 	.word	0x40004400

08000ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
 8000cf4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	4b2d      	ldr	r3, [pc, #180]	; (8000db0 <MX_GPIO_Init+0xd0>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a2c      	ldr	r2, [pc, #176]	; (8000db0 <MX_GPIO_Init+0xd0>)
 8000d00:	f043 0304 	orr.w	r3, r3, #4
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b2a      	ldr	r3, [pc, #168]	; (8000db0 <MX_GPIO_Init+0xd0>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0304 	and.w	r3, r3, #4
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	4b26      	ldr	r3, [pc, #152]	; (8000db0 <MX_GPIO_Init+0xd0>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a25      	ldr	r2, [pc, #148]	; (8000db0 <MX_GPIO_Init+0xd0>)
 8000d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b23      	ldr	r3, [pc, #140]	; (8000db0 <MX_GPIO_Init+0xd0>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <MX_GPIO_Init+0xd0>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a1e      	ldr	r2, [pc, #120]	; (8000db0 <MX_GPIO_Init+0xd0>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <MX_GPIO_Init+0xd0>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <MX_GPIO_Init+0xd0>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a17      	ldr	r2, [pc, #92]	; (8000db0 <MX_GPIO_Init+0xd0>)
 8000d54:	f043 0302 	orr.w	r3, r3, #2
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <MX_GPIO_Init+0xd0>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2120      	movs	r1, #32
 8000d6a:	4812      	ldr	r0, [pc, #72]	; (8000db4 <MX_GPIO_Init+0xd4>)
 8000d6c:	f000 fcd0 	bl	8001710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d76:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4619      	mov	r1, r3
 8000d86:	480c      	ldr	r0, [pc, #48]	; (8000db8 <MX_GPIO_Init+0xd8>)
 8000d88:	f000 fb3e 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d8c:	2320      	movs	r3, #32
 8000d8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d90:	2301      	movs	r3, #1
 8000d92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	4619      	mov	r1, r3
 8000da2:	4804      	ldr	r0, [pc, #16]	; (8000db4 <MX_GPIO_Init+0xd4>)
 8000da4:	f000 fb30 	bl	8001408 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000da8:	bf00      	nop
 8000daa:	3728      	adds	r7, #40	; 0x28
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020000 	.word	0x40020000
 8000db8:	40020800 	.word	0x40020800

08000dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc0:	b672      	cpsid	i
}
 8000dc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <Error_Handler+0x8>
	...

08000dc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <HAL_MspInit+0x4c>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	4a0f      	ldr	r2, [pc, #60]	; (8000e14 <HAL_MspInit+0x4c>)
 8000dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <HAL_MspInit+0x4c>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	603b      	str	r3, [r7, #0]
 8000dee:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <HAL_MspInit+0x4c>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <HAL_MspInit+0x4c>)
 8000df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_MspInit+0x4c>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e06:	2007      	movs	r0, #7
 8000e08:	f000 faca 	bl	80013a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40023800 	.word	0x40023800

08000e18 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0b      	ldr	r2, [pc, #44]	; (8000e54 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d10d      	bne.n	8000e46 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <HAL_TIM_PWM_MspInit+0x40>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	4a09      	ldr	r2, [pc, #36]	; (8000e58 <HAL_TIM_PWM_MspInit+0x40>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3a:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <HAL_TIM_PWM_MspInit+0x40>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e46:	bf00      	nop
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40010000 	.word	0x40010000
 8000e58:	40023800 	.word	0x40023800

08000e5c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	; 0x28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e7c:	d12b      	bne.n	8000ed6 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <HAL_TIM_Encoder_MspInit+0x84>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	4a16      	ldr	r2, [pc, #88]	; (8000ee0 <HAL_TIM_Encoder_MspInit+0x84>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <HAL_TIM_Encoder_MspInit+0x84>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <HAL_TIM_Encoder_MspInit+0x84>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a0f      	ldr	r2, [pc, #60]	; (8000ee0 <HAL_TIM_Encoder_MspInit+0x84>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <HAL_TIM_Encoder_MspInit+0x84>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <HAL_TIM_Encoder_MspInit+0x88>)
 8000ed2:	f000 fa99 	bl	8001408 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ed6:	bf00      	nop
 8000ed8:	3728      	adds	r7, #40	; 0x28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020000 	.word	0x40020000

08000ee8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a15      	ldr	r2, [pc, #84]	; (8000f4c <HAL_TIM_Base_MspInit+0x64>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d10e      	bne.n	8000f18 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <HAL_TIM_Base_MspInit+0x68>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	4a13      	ldr	r2, [pc, #76]	; (8000f50 <HAL_TIM_Base_MspInit+0x68>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <HAL_TIM_Base_MspInit+0x68>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000f16:	e012      	b.n	8000f3e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM5)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0d      	ldr	r2, [pc, #52]	; (8000f54 <HAL_TIM_Base_MspInit+0x6c>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d10d      	bne.n	8000f3e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_TIM_Base_MspInit+0x68>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	4a09      	ldr	r2, [pc, #36]	; (8000f50 <HAL_TIM_Base_MspInit+0x68>)
 8000f2c:	f043 0308 	orr.w	r3, r3, #8
 8000f30:	6413      	str	r3, [r2, #64]	; 0x40
 8000f32:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <HAL_TIM_Base_MspInit+0x68>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	f003 0308 	and.w	r3, r3, #8
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
}
 8000f3e:	bf00      	nop
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40000400 	.word	0x40000400
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40000c00 	.word	0x40000c00

08000f58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <HAL_TIM_MspPostInit+0x68>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d11e      	bne.n	8000fb8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_TIM_MspPostInit+0x6c>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a10      	ldr	r2, [pc, #64]	; (8000fc4 <HAL_TIM_MspPostInit+0x6c>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <HAL_TIM_MspPostInit+0x6c>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <HAL_TIM_MspPostInit+0x70>)
 8000fb4:	f000 fa28 	bl	8001408 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000fb8:	bf00      	nop
 8000fba:	3720      	adds	r7, #32
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40010000 	.word	0x40010000
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40020000 	.word	0x40020000

08000fcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a19      	ldr	r2, [pc, #100]	; (8001050 <HAL_UART_MspInit+0x84>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d12b      	bne.n	8001046 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <HAL_UART_MspInit+0x88>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	4a17      	ldr	r2, [pc, #92]	; (8001054 <HAL_UART_MspInit+0x88>)
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <HAL_UART_MspInit+0x88>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <HAL_UART_MspInit+0x88>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a10      	ldr	r2, [pc, #64]	; (8001054 <HAL_UART_MspInit+0x88>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <HAL_UART_MspInit+0x88>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001026:	230c      	movs	r3, #12
 8001028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001032:	2303      	movs	r3, #3
 8001034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001036:	2307      	movs	r3, #7
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <HAL_UART_MspInit+0x8c>)
 8001042:	f000 f9e1 	bl	8001408 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001046:	bf00      	nop
 8001048:	3728      	adds	r7, #40	; 0x28
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40004400 	.word	0x40004400
 8001054:	40023800 	.word	0x40023800
 8001058:	40020000 	.word	0x40020000

0800105c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <NMI_Handler+0x4>

08001062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <HardFault_Handler+0x4>

08001068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <MemManage_Handler+0x4>

0800106e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <BusFault_Handler+0x4>

08001074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <UsageFault_Handler+0x4>

0800107a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a8:	f000 f8a8 	bl	80011fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <SystemInit+0x20>)
 80010b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ba:	4a05      	ldr	r2, [pc, #20]	; (80010d0 <SystemInit+0x20>)
 80010bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800110c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d8:	480d      	ldr	r0, [pc, #52]	; (8001110 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010da:	490e      	ldr	r1, [pc, #56]	; (8001114 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010dc:	4a0e      	ldr	r2, [pc, #56]	; (8001118 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e0:	e002      	b.n	80010e8 <LoopCopyDataInit>

080010e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e6:	3304      	adds	r3, #4

080010e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ec:	d3f9      	bcc.n	80010e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ee:	4a0b      	ldr	r2, [pc, #44]	; (800111c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010f0:	4c0b      	ldr	r4, [pc, #44]	; (8001120 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f4:	e001      	b.n	80010fa <LoopFillZerobss>

080010f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f8:	3204      	adds	r2, #4

080010fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010fc:	d3fb      	bcc.n	80010f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010fe:	f7ff ffd7 	bl	80010b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001102:	f002 fa75 	bl	80035f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001106:	f7ff fad5 	bl	80006b4 <main>
  bx  lr    
 800110a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800110c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001114:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001118:	080036dc 	.word	0x080036dc
  ldr r2, =_sbss
 800111c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001120:	20000404 	.word	0x20000404

08001124 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <ADC_IRQHandler>

08001126 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8001126:	b480      	push	{r7}
 8001128:	b085      	sub	sp, #20
 800112a:	af00      	add	r7, sp, #0
 800112c:	60f8      	str	r0, [r7, #12]
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	817b      	strh	r3, [r7, #10]
 8001134:	4613      	mov	r3, r2
 8001136:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	897a      	ldrh	r2, [r7, #10]
 800113c:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	893a      	ldrh	r2, [r7, #8]
 8001142:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	605a      	str	r2, [r3, #4]
}
 800114a:	bf00      	nop
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
	...

08001158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800115c:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <HAL_Init+0x40>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a0d      	ldr	r2, [pc, #52]	; (8001198 <HAL_Init+0x40>)
 8001162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001166:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001168:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <HAL_Init+0x40>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <HAL_Init+0x40>)
 800116e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001172:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <HAL_Init+0x40>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a07      	ldr	r2, [pc, #28]	; (8001198 <HAL_Init+0x40>)
 800117a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001180:	2003      	movs	r0, #3
 8001182:	f000 f90d 	bl	80013a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001186:	2000      	movs	r0, #0
 8001188:	f000 f808 	bl	800119c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800118c:	f7ff fe1c 	bl	8000dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40023c00 	.word	0x40023c00

0800119c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_InitTick+0x54>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <HAL_InitTick+0x58>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f917 	bl	80013ee <HAL_SYSTICK_Config>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e00e      	b.n	80011e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b0f      	cmp	r3, #15
 80011ce:	d80a      	bhi.n	80011e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d0:	2200      	movs	r2, #0
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295
 80011d8:	f000 f8ed 	bl	80013b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011dc:	4a06      	ldr	r2, [pc, #24]	; (80011f8 <HAL_InitTick+0x5c>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e000      	b.n	80011e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000010 	.word	0x20000010
 80011f8:	2000000c 	.word	0x2000000c

080011fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_IncTick+0x20>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_IncTick+0x24>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4413      	add	r3, r2
 800120c:	4a04      	ldr	r2, [pc, #16]	; (8001220 <HAL_IncTick+0x24>)
 800120e:	6013      	str	r3, [r2, #0]
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	20000010 	.word	0x20000010
 8001220:	20000400 	.word	0x20000400

08001224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return uwTick;
 8001228:	4b03      	ldr	r3, [pc, #12]	; (8001238 <HAL_GetTick+0x14>)
 800122a:	681b      	ldr	r3, [r3, #0]
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000400 	.word	0x20000400

0800123c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <__NVIC_SetPriorityGrouping+0x44>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001252:	68ba      	ldr	r2, [r7, #8]
 8001254:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001258:	4013      	ands	r3, r2
 800125a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800126c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800126e:	4a04      	ldr	r2, [pc, #16]	; (8001280 <__NVIC_SetPriorityGrouping+0x44>)
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	60d3      	str	r3, [r2, #12]
}
 8001274:	bf00      	nop
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <__NVIC_GetPriorityGrouping+0x18>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	0a1b      	lsrs	r3, r3, #8
 800128e:	f003 0307 	and.w	r3, r3, #7
}
 8001292:	4618      	mov	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	db0a      	blt.n	80012ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	490c      	ldr	r1, [pc, #48]	; (80012ec <__NVIC_SetPriority+0x4c>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	0112      	lsls	r2, r2, #4
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	440b      	add	r3, r1
 80012c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c8:	e00a      	b.n	80012e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4908      	ldr	r1, [pc, #32]	; (80012f0 <__NVIC_SetPriority+0x50>)
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	3b04      	subs	r3, #4
 80012d8:	0112      	lsls	r2, r2, #4
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	440b      	add	r3, r1
 80012de:	761a      	strb	r2, [r3, #24]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000e100 	.word	0xe000e100
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	; 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f1c3 0307 	rsb	r3, r3, #7
 800130e:	2b04      	cmp	r3, #4
 8001310:	bf28      	it	cs
 8001312:	2304      	movcs	r3, #4
 8001314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3304      	adds	r3, #4
 800131a:	2b06      	cmp	r3, #6
 800131c:	d902      	bls.n	8001324 <NVIC_EncodePriority+0x30>
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3b03      	subs	r3, #3
 8001322:	e000      	b.n	8001326 <NVIC_EncodePriority+0x32>
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	f04f 32ff 	mov.w	r2, #4294967295
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43da      	mvns	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	401a      	ands	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800133c:	f04f 31ff 	mov.w	r1, #4294967295
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	43d9      	mvns	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	4313      	orrs	r3, r2
         );
}
 800134e:	4618      	mov	r0, r3
 8001350:	3724      	adds	r7, #36	; 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3b01      	subs	r3, #1
 8001368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800136c:	d301      	bcc.n	8001372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136e:	2301      	movs	r3, #1
 8001370:	e00f      	b.n	8001392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001372:	4a0a      	ldr	r2, [pc, #40]	; (800139c <SysTick_Config+0x40>)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800137a:	210f      	movs	r1, #15
 800137c:	f04f 30ff 	mov.w	r0, #4294967295
 8001380:	f7ff ff8e 	bl	80012a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <SysTick_Config+0x40>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138a:	4b04      	ldr	r3, [pc, #16]	; (800139c <SysTick_Config+0x40>)
 800138c:	2207      	movs	r2, #7
 800138e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	e000e010 	.word	0xe000e010

080013a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff ff47 	bl	800123c <__NVIC_SetPriorityGrouping>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b086      	sub	sp, #24
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
 80013c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c8:	f7ff ff5c 	bl	8001284 <__NVIC_GetPriorityGrouping>
 80013cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	68b9      	ldr	r1, [r7, #8]
 80013d2:	6978      	ldr	r0, [r7, #20]
 80013d4:	f7ff ff8e 	bl	80012f4 <NVIC_EncodePriority>
 80013d8:	4602      	mov	r2, r0
 80013da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff5d 	bl	80012a0 <__NVIC_SetPriority>
}
 80013e6:	bf00      	nop
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ffb0 	bl	800135c <SysTick_Config>
 80013fc:	4603      	mov	r3, r0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800141a:	2300      	movs	r3, #0
 800141c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
 8001422:	e159      	b.n	80016d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001424:	2201      	movs	r2, #1
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	429a      	cmp	r2, r3
 800143e:	f040 8148 	bne.w	80016d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	2b01      	cmp	r3, #1
 800144c:	d005      	beq.n	800145a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001456:	2b02      	cmp	r3, #2
 8001458:	d130      	bne.n	80014bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	2203      	movs	r2, #3
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	68da      	ldr	r2, [r3, #12]
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001490:	2201      	movs	r2, #1
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	091b      	lsrs	r3, r3, #4
 80014a6:	f003 0201 	and.w	r2, r3, #1
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	2b03      	cmp	r3, #3
 80014c6:	d017      	beq.n	80014f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	2203      	movs	r2, #3
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 0303 	and.w	r3, r3, #3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d123      	bne.n	800154c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	08da      	lsrs	r2, r3, #3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3208      	adds	r2, #8
 800150c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	f003 0307 	and.w	r3, r3, #7
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	220f      	movs	r2, #15
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	691a      	ldr	r2, [r3, #16]
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	08da      	lsrs	r2, r3, #3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3208      	adds	r2, #8
 8001546:	69b9      	ldr	r1, [r7, #24]
 8001548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	2203      	movs	r2, #3
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0203 	and.w	r2, r3, #3
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 80a2 	beq.w	80016d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b57      	ldr	r3, [pc, #348]	; (80016f0 <HAL_GPIO_Init+0x2e8>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	4a56      	ldr	r2, [pc, #344]	; (80016f0 <HAL_GPIO_Init+0x2e8>)
 8001598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800159c:	6453      	str	r3, [r2, #68]	; 0x44
 800159e:	4b54      	ldr	r3, [pc, #336]	; (80016f0 <HAL_GPIO_Init+0x2e8>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015aa:	4a52      	ldr	r2, [pc, #328]	; (80016f4 <HAL_GPIO_Init+0x2ec>)
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	089b      	lsrs	r3, r3, #2
 80015b0:	3302      	adds	r3, #2
 80015b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	220f      	movs	r2, #15
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a49      	ldr	r2, [pc, #292]	; (80016f8 <HAL_GPIO_Init+0x2f0>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d019      	beq.n	800160a <HAL_GPIO_Init+0x202>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a48      	ldr	r2, [pc, #288]	; (80016fc <HAL_GPIO_Init+0x2f4>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d013      	beq.n	8001606 <HAL_GPIO_Init+0x1fe>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a47      	ldr	r2, [pc, #284]	; (8001700 <HAL_GPIO_Init+0x2f8>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d00d      	beq.n	8001602 <HAL_GPIO_Init+0x1fa>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a46      	ldr	r2, [pc, #280]	; (8001704 <HAL_GPIO_Init+0x2fc>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d007      	beq.n	80015fe <HAL_GPIO_Init+0x1f6>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a45      	ldr	r2, [pc, #276]	; (8001708 <HAL_GPIO_Init+0x300>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d101      	bne.n	80015fa <HAL_GPIO_Init+0x1f2>
 80015f6:	2304      	movs	r3, #4
 80015f8:	e008      	b.n	800160c <HAL_GPIO_Init+0x204>
 80015fa:	2307      	movs	r3, #7
 80015fc:	e006      	b.n	800160c <HAL_GPIO_Init+0x204>
 80015fe:	2303      	movs	r3, #3
 8001600:	e004      	b.n	800160c <HAL_GPIO_Init+0x204>
 8001602:	2302      	movs	r3, #2
 8001604:	e002      	b.n	800160c <HAL_GPIO_Init+0x204>
 8001606:	2301      	movs	r3, #1
 8001608:	e000      	b.n	800160c <HAL_GPIO_Init+0x204>
 800160a:	2300      	movs	r3, #0
 800160c:	69fa      	ldr	r2, [r7, #28]
 800160e:	f002 0203 	and.w	r2, r2, #3
 8001612:	0092      	lsls	r2, r2, #2
 8001614:	4093      	lsls	r3, r2
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4313      	orrs	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800161c:	4935      	ldr	r1, [pc, #212]	; (80016f4 <HAL_GPIO_Init+0x2ec>)
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	089b      	lsrs	r3, r3, #2
 8001622:	3302      	adds	r3, #2
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800162a:	4b38      	ldr	r3, [pc, #224]	; (800170c <HAL_GPIO_Init+0x304>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	43db      	mvns	r3, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4013      	ands	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800164e:	4a2f      	ldr	r2, [pc, #188]	; (800170c <HAL_GPIO_Init+0x304>)
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001654:	4b2d      	ldr	r3, [pc, #180]	; (800170c <HAL_GPIO_Init+0x304>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	4313      	orrs	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001678:	4a24      	ldr	r2, [pc, #144]	; (800170c <HAL_GPIO_Init+0x304>)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800167e:	4b23      	ldr	r3, [pc, #140]	; (800170c <HAL_GPIO_Init+0x304>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	43db      	mvns	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016a2:	4a1a      	ldr	r2, [pc, #104]	; (800170c <HAL_GPIO_Init+0x304>)
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016a8:	4b18      	ldr	r3, [pc, #96]	; (800170c <HAL_GPIO_Init+0x304>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016cc:	4a0f      	ldr	r2, [pc, #60]	; (800170c <HAL_GPIO_Init+0x304>)
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3301      	adds	r3, #1
 80016d6:	61fb      	str	r3, [r7, #28]
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	2b0f      	cmp	r3, #15
 80016dc:	f67f aea2 	bls.w	8001424 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	3724      	adds	r7, #36	; 0x24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40013800 	.word	0x40013800
 80016f8:	40020000 	.word	0x40020000
 80016fc:	40020400 	.word	0x40020400
 8001700:	40020800 	.word	0x40020800
 8001704:	40020c00 	.word	0x40020c00
 8001708:	40021000 	.word	0x40021000
 800170c:	40013c00 	.word	0x40013c00

08001710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	807b      	strh	r3, [r7, #2]
 800171c:	4613      	mov	r3, r2
 800171e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001720:	787b      	ldrb	r3, [r7, #1]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001726:	887a      	ldrh	r2, [r7, #2]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800172c:	e003      	b.n	8001736 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800172e:	887b      	ldrh	r3, [r7, #2]
 8001730:	041a      	lsls	r2, r3, #16
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	619a      	str	r2, [r3, #24]
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e267      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d075      	beq.n	800184e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001762:	4b88      	ldr	r3, [pc, #544]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 030c 	and.w	r3, r3, #12
 800176a:	2b04      	cmp	r3, #4
 800176c:	d00c      	beq.n	8001788 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800176e:	4b85      	ldr	r3, [pc, #532]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001776:	2b08      	cmp	r3, #8
 8001778:	d112      	bne.n	80017a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800177a:	4b82      	ldr	r3, [pc, #520]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001782:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001786:	d10b      	bne.n	80017a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001788:	4b7e      	ldr	r3, [pc, #504]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d05b      	beq.n	800184c <HAL_RCC_OscConfig+0x108>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d157      	bne.n	800184c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e242      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a8:	d106      	bne.n	80017b8 <HAL_RCC_OscConfig+0x74>
 80017aa:	4b76      	ldr	r3, [pc, #472]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a75      	ldr	r2, [pc, #468]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	e01d      	b.n	80017f4 <HAL_RCC_OscConfig+0xb0>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017c0:	d10c      	bne.n	80017dc <HAL_RCC_OscConfig+0x98>
 80017c2:	4b70      	ldr	r3, [pc, #448]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a6f      	ldr	r2, [pc, #444]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	4b6d      	ldr	r3, [pc, #436]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a6c      	ldr	r2, [pc, #432]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	e00b      	b.n	80017f4 <HAL_RCC_OscConfig+0xb0>
 80017dc:	4b69      	ldr	r3, [pc, #420]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a68      	ldr	r2, [pc, #416]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	4b66      	ldr	r3, [pc, #408]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a65      	ldr	r2, [pc, #404]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d013      	beq.n	8001824 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7ff fd12 	bl	8001224 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001804:	f7ff fd0e 	bl	8001224 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b64      	cmp	r3, #100	; 0x64
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e207      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001816:	4b5b      	ldr	r3, [pc, #364]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0f0      	beq.n	8001804 <HAL_RCC_OscConfig+0xc0>
 8001822:	e014      	b.n	800184e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001824:	f7ff fcfe 	bl	8001224 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800182c:	f7ff fcfa 	bl	8001224 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b64      	cmp	r3, #100	; 0x64
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e1f3      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183e:	4b51      	ldr	r3, [pc, #324]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f0      	bne.n	800182c <HAL_RCC_OscConfig+0xe8>
 800184a:	e000      	b.n	800184e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d063      	beq.n	8001922 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800185a:	4b4a      	ldr	r3, [pc, #296]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 030c 	and.w	r3, r3, #12
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00b      	beq.n	800187e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001866:	4b47      	ldr	r3, [pc, #284]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800186e:	2b08      	cmp	r3, #8
 8001870:	d11c      	bne.n	80018ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001872:	4b44      	ldr	r3, [pc, #272]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d116      	bne.n	80018ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187e:	4b41      	ldr	r3, [pc, #260]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d005      	beq.n	8001896 <HAL_RCC_OscConfig+0x152>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d001      	beq.n	8001896 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e1c7      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001896:	4b3b      	ldr	r3, [pc, #236]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	4937      	ldr	r1, [pc, #220]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018aa:	e03a      	b.n	8001922 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d020      	beq.n	80018f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018b4:	4b34      	ldr	r3, [pc, #208]	; (8001988 <HAL_RCC_OscConfig+0x244>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ba:	f7ff fcb3 	bl	8001224 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018c2:	f7ff fcaf 	bl	8001224 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e1a8      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d4:	4b2b      	ldr	r3, [pc, #172]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e0:	4b28      	ldr	r3, [pc, #160]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	4925      	ldr	r1, [pc, #148]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	600b      	str	r3, [r1, #0]
 80018f4:	e015      	b.n	8001922 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018f6:	4b24      	ldr	r3, [pc, #144]	; (8001988 <HAL_RCC_OscConfig+0x244>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff fc92 	bl	8001224 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001904:	f7ff fc8e 	bl	8001224 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e187      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001916:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b00      	cmp	r3, #0
 800192c:	d036      	beq.n	800199c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d016      	beq.n	8001964 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001936:	4b15      	ldr	r3, [pc, #84]	; (800198c <HAL_RCC_OscConfig+0x248>)
 8001938:	2201      	movs	r2, #1
 800193a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193c:	f7ff fc72 	bl	8001224 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001944:	f7ff fc6e 	bl	8001224 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e167      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001956:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0x200>
 8001962:	e01b      	b.n	800199c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <HAL_RCC_OscConfig+0x248>)
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196a:	f7ff fc5b 	bl	8001224 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001970:	e00e      	b.n	8001990 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001972:	f7ff fc57 	bl	8001224 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d907      	bls.n	8001990 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e150      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
 8001984:	40023800 	.word	0x40023800
 8001988:	42470000 	.word	0x42470000
 800198c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001990:	4b88      	ldr	r3, [pc, #544]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1ea      	bne.n	8001972 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 8097 	beq.w	8001ad8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019aa:	2300      	movs	r3, #0
 80019ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ae:	4b81      	ldr	r3, [pc, #516]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10f      	bne.n	80019da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	4b7d      	ldr	r3, [pc, #500]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	4a7c      	ldr	r2, [pc, #496]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 80019c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ca:	4b7a      	ldr	r3, [pc, #488]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019d6:	2301      	movs	r3, #1
 80019d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019da:	4b77      	ldr	r3, [pc, #476]	; (8001bb8 <HAL_RCC_OscConfig+0x474>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d118      	bne.n	8001a18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019e6:	4b74      	ldr	r3, [pc, #464]	; (8001bb8 <HAL_RCC_OscConfig+0x474>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a73      	ldr	r2, [pc, #460]	; (8001bb8 <HAL_RCC_OscConfig+0x474>)
 80019ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019f2:	f7ff fc17 	bl	8001224 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019fa:	f7ff fc13 	bl	8001224 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e10c      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0c:	4b6a      	ldr	r3, [pc, #424]	; (8001bb8 <HAL_RCC_OscConfig+0x474>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d106      	bne.n	8001a2e <HAL_RCC_OscConfig+0x2ea>
 8001a20:	4b64      	ldr	r3, [pc, #400]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a24:	4a63      	ldr	r2, [pc, #396]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a2c:	e01c      	b.n	8001a68 <HAL_RCC_OscConfig+0x324>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2b05      	cmp	r3, #5
 8001a34:	d10c      	bne.n	8001a50 <HAL_RCC_OscConfig+0x30c>
 8001a36:	4b5f      	ldr	r3, [pc, #380]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3a:	4a5e      	ldr	r2, [pc, #376]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	6713      	str	r3, [r2, #112]	; 0x70
 8001a42:	4b5c      	ldr	r3, [pc, #368]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a46:	4a5b      	ldr	r2, [pc, #364]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a4e:	e00b      	b.n	8001a68 <HAL_RCC_OscConfig+0x324>
 8001a50:	4b58      	ldr	r3, [pc, #352]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a54:	4a57      	ldr	r2, [pc, #348]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a56:	f023 0301 	bic.w	r3, r3, #1
 8001a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a5c:	4b55      	ldr	r3, [pc, #340]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a60:	4a54      	ldr	r2, [pc, #336]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a62:	f023 0304 	bic.w	r3, r3, #4
 8001a66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d015      	beq.n	8001a9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a70:	f7ff fbd8 	bl	8001224 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a76:	e00a      	b.n	8001a8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a78:	f7ff fbd4 	bl	8001224 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e0cb      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8e:	4b49      	ldr	r3, [pc, #292]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0ee      	beq.n	8001a78 <HAL_RCC_OscConfig+0x334>
 8001a9a:	e014      	b.n	8001ac6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9c:	f7ff fbc2 	bl	8001224 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa2:	e00a      	b.n	8001aba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aa4:	f7ff fbbe 	bl	8001224 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e0b5      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aba:	4b3e      	ldr	r3, [pc, #248]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1ee      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ac6:	7dfb      	ldrb	r3, [r7, #23]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d105      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001acc:	4b39      	ldr	r3, [pc, #228]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	4a38      	ldr	r2, [pc, #224]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 80a1 	beq.w	8001c24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ae2:	4b34      	ldr	r3, [pc, #208]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	d05c      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d141      	bne.n	8001b7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af6:	4b31      	ldr	r3, [pc, #196]	; (8001bbc <HAL_RCC_OscConfig+0x478>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afc:	f7ff fb92 	bl	8001224 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b04:	f7ff fb8e 	bl	8001224 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e087      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b16:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69da      	ldr	r2, [r3, #28]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	019b      	lsls	r3, r3, #6
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b38:	085b      	lsrs	r3, r3, #1
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	041b      	lsls	r3, r3, #16
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b44:	061b      	lsls	r3, r3, #24
 8001b46:	491b      	ldr	r1, [pc, #108]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <HAL_RCC_OscConfig+0x478>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b52:	f7ff fb67 	bl	8001224 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b5a:	f7ff fb63 	bl	8001224 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e05c      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0f0      	beq.n	8001b5a <HAL_RCC_OscConfig+0x416>
 8001b78:	e054      	b.n	8001c24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <HAL_RCC_OscConfig+0x478>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7ff fb50 	bl	8001224 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b88:	f7ff fb4c 	bl	8001224 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e045      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9a:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x444>
 8001ba6:	e03d      	b.n	8001c24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d107      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e038      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40007000 	.word	0x40007000
 8001bbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bc0:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <HAL_RCC_OscConfig+0x4ec>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d028      	beq.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d121      	bne.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d11a      	bne.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bf6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d111      	bne.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c06:	085b      	lsrs	r3, r3, #1
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d107      	bne.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d001      	beq.n	8001c24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e000      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800

08001c34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e0cc      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c48:	4b68      	ldr	r3, [pc, #416]	; (8001dec <HAL_RCC_ClockConfig+0x1b8>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d90c      	bls.n	8001c70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c56:	4b65      	ldr	r3, [pc, #404]	; (8001dec <HAL_RCC_ClockConfig+0x1b8>)
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5e:	4b63      	ldr	r3, [pc, #396]	; (8001dec <HAL_RCC_ClockConfig+0x1b8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d001      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e0b8      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d020      	beq.n	8001cbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c88:	4b59      	ldr	r3, [pc, #356]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	4a58      	ldr	r2, [pc, #352]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d005      	beq.n	8001cac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ca0:	4b53      	ldr	r3, [pc, #332]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	4a52      	ldr	r2, [pc, #328]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001caa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cac:	4b50      	ldr	r3, [pc, #320]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	494d      	ldr	r1, [pc, #308]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d044      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d107      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd2:	4b47      	ldr	r3, [pc, #284]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d119      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e07f      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d003      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cee:	2b03      	cmp	r3, #3
 8001cf0:	d107      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf2:	4b3f      	ldr	r3, [pc, #252]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d109      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e06f      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d02:	4b3b      	ldr	r3, [pc, #236]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e067      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d12:	4b37      	ldr	r3, [pc, #220]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f023 0203 	bic.w	r2, r3, #3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	4934      	ldr	r1, [pc, #208]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d24:	f7ff fa7e 	bl	8001224 <HAL_GetTick>
 8001d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2a:	e00a      	b.n	8001d42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d2c:	f7ff fa7a 	bl	8001224 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e04f      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d42:	4b2b      	ldr	r3, [pc, #172]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 020c 	and.w	r2, r3, #12
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d1eb      	bne.n	8001d2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d54:	4b25      	ldr	r3, [pc, #148]	; (8001dec <HAL_RCC_ClockConfig+0x1b8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d20c      	bcs.n	8001d7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	4b22      	ldr	r3, [pc, #136]	; (8001dec <HAL_RCC_ClockConfig+0x1b8>)
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6a:	4b20      	ldr	r3, [pc, #128]	; (8001dec <HAL_RCC_ClockConfig+0x1b8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d001      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e032      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d008      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d88:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	4916      	ldr	r1, [pc, #88]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d009      	beq.n	8001dba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001da6:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	490e      	ldr	r1, [pc, #56]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dba:	f000 f821 	bl	8001e00 <HAL_RCC_GetSysClockFreq>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	490a      	ldr	r1, [pc, #40]	; (8001df4 <HAL_RCC_ClockConfig+0x1c0>)
 8001dcc:	5ccb      	ldrb	r3, [r1, r3]
 8001dce:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd2:	4a09      	ldr	r2, [pc, #36]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dd6:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <HAL_RCC_ClockConfig+0x1c8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff f9de 	bl	800119c <HAL_InitTick>

  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40023c00 	.word	0x40023c00
 8001df0:	40023800 	.word	0x40023800
 8001df4:	080036b4 	.word	0x080036b4
 8001df8:	20000008 	.word	0x20000008
 8001dfc:	2000000c 	.word	0x2000000c

08001e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e04:	b094      	sub	sp, #80	; 0x50
 8001e06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	647b      	str	r3, [r7, #68]	; 0x44
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e10:	2300      	movs	r3, #0
 8001e12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e18:	4b79      	ldr	r3, [pc, #484]	; (8002000 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 030c 	and.w	r3, r3, #12
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	d00d      	beq.n	8001e40 <HAL_RCC_GetSysClockFreq+0x40>
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	f200 80e1 	bhi.w	8001fec <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d002      	beq.n	8001e34 <HAL_RCC_GetSysClockFreq+0x34>
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	d003      	beq.n	8001e3a <HAL_RCC_GetSysClockFreq+0x3a>
 8001e32:	e0db      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e34:	4b73      	ldr	r3, [pc, #460]	; (8002004 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e36:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001e38:	e0db      	b.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e3a:	4b73      	ldr	r3, [pc, #460]	; (8002008 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e3e:	e0d8      	b.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e40:	4b6f      	ldr	r3, [pc, #444]	; (8002000 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e48:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e4a:	4b6d      	ldr	r3, [pc, #436]	; (8002000 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d063      	beq.n	8001f1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e56:	4b6a      	ldr	r3, [pc, #424]	; (8002000 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	099b      	lsrs	r3, r3, #6
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e68:	633b      	str	r3, [r7, #48]	; 0x30
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e72:	4622      	mov	r2, r4
 8001e74:	462b      	mov	r3, r5
 8001e76:	f04f 0000 	mov.w	r0, #0
 8001e7a:	f04f 0100 	mov.w	r1, #0
 8001e7e:	0159      	lsls	r1, r3, #5
 8001e80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e84:	0150      	lsls	r0, r2, #5
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	4621      	mov	r1, r4
 8001e8c:	1a51      	subs	r1, r2, r1
 8001e8e:	6139      	str	r1, [r7, #16]
 8001e90:	4629      	mov	r1, r5
 8001e92:	eb63 0301 	sbc.w	r3, r3, r1
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ea4:	4659      	mov	r1, fp
 8001ea6:	018b      	lsls	r3, r1, #6
 8001ea8:	4651      	mov	r1, sl
 8001eaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001eae:	4651      	mov	r1, sl
 8001eb0:	018a      	lsls	r2, r1, #6
 8001eb2:	4651      	mov	r1, sl
 8001eb4:	ebb2 0801 	subs.w	r8, r2, r1
 8001eb8:	4659      	mov	r1, fp
 8001eba:	eb63 0901 	sbc.w	r9, r3, r1
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	f04f 0300 	mov.w	r3, #0
 8001ec6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001eca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ece:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ed2:	4690      	mov	r8, r2
 8001ed4:	4699      	mov	r9, r3
 8001ed6:	4623      	mov	r3, r4
 8001ed8:	eb18 0303 	adds.w	r3, r8, r3
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	462b      	mov	r3, r5
 8001ee0:	eb49 0303 	adc.w	r3, r9, r3
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ef2:	4629      	mov	r1, r5
 8001ef4:	024b      	lsls	r3, r1, #9
 8001ef6:	4621      	mov	r1, r4
 8001ef8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001efc:	4621      	mov	r1, r4
 8001efe:	024a      	lsls	r2, r1, #9
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f06:	2200      	movs	r2, #0
 8001f08:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f10:	f7fe f962 	bl	80001d8 <__aeabi_uldivmod>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4613      	mov	r3, r2
 8001f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f1c:	e058      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f1e:	4b38      	ldr	r3, [pc, #224]	; (8002000 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	099b      	lsrs	r3, r3, #6
 8001f24:	2200      	movs	r2, #0
 8001f26:	4618      	mov	r0, r3
 8001f28:	4611      	mov	r1, r2
 8001f2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f2e:	623b      	str	r3, [r7, #32]
 8001f30:	2300      	movs	r3, #0
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
 8001f34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f38:	4642      	mov	r2, r8
 8001f3a:	464b      	mov	r3, r9
 8001f3c:	f04f 0000 	mov.w	r0, #0
 8001f40:	f04f 0100 	mov.w	r1, #0
 8001f44:	0159      	lsls	r1, r3, #5
 8001f46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f4a:	0150      	lsls	r0, r2, #5
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4641      	mov	r1, r8
 8001f52:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f56:	4649      	mov	r1, r9
 8001f58:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f70:	ebb2 040a 	subs.w	r4, r2, sl
 8001f74:	eb63 050b 	sbc.w	r5, r3, fp
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	f04f 0300 	mov.w	r3, #0
 8001f80:	00eb      	lsls	r3, r5, #3
 8001f82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f86:	00e2      	lsls	r2, r4, #3
 8001f88:	4614      	mov	r4, r2
 8001f8a:	461d      	mov	r5, r3
 8001f8c:	4643      	mov	r3, r8
 8001f8e:	18e3      	adds	r3, r4, r3
 8001f90:	603b      	str	r3, [r7, #0]
 8001f92:	464b      	mov	r3, r9
 8001f94:	eb45 0303 	adc.w	r3, r5, r3
 8001f98:	607b      	str	r3, [r7, #4]
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	f04f 0300 	mov.w	r3, #0
 8001fa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fa6:	4629      	mov	r1, r5
 8001fa8:	028b      	lsls	r3, r1, #10
 8001faa:	4621      	mov	r1, r4
 8001fac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fb0:	4621      	mov	r1, r4
 8001fb2:	028a      	lsls	r2, r1, #10
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fba:	2200      	movs	r2, #0
 8001fbc:	61bb      	str	r3, [r7, #24]
 8001fbe:	61fa      	str	r2, [r7, #28]
 8001fc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fc4:	f7fe f908 	bl	80001d8 <__aeabi_uldivmod>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4613      	mov	r3, r2
 8001fce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	0c1b      	lsrs	r3, r3, #16
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	3301      	adds	r3, #1
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001fe0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fea:	e002      	b.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fec:	4b05      	ldr	r3, [pc, #20]	; (8002004 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ff0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3750      	adds	r7, #80	; 0x50
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ffe:	bf00      	nop
 8002000:	40023800 	.word	0x40023800
 8002004:	00f42400 	.word	0x00f42400
 8002008:	007a1200 	.word	0x007a1200

0800200c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002010:	4b03      	ldr	r3, [pc, #12]	; (8002020 <HAL_RCC_GetHCLKFreq+0x14>)
 8002012:	681b      	ldr	r3, [r3, #0]
}
 8002014:	4618      	mov	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	20000008 	.word	0x20000008

08002024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002028:	f7ff fff0 	bl	800200c <HAL_RCC_GetHCLKFreq>
 800202c:	4602      	mov	r2, r0
 800202e:	4b05      	ldr	r3, [pc, #20]	; (8002044 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	0a9b      	lsrs	r3, r3, #10
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	4903      	ldr	r1, [pc, #12]	; (8002048 <HAL_RCC_GetPCLK1Freq+0x24>)
 800203a:	5ccb      	ldrb	r3, [r1, r3]
 800203c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002040:	4618      	mov	r0, r3
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40023800 	.word	0x40023800
 8002048:	080036c4 	.word	0x080036c4

0800204c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002050:	f7ff ffdc 	bl	800200c <HAL_RCC_GetHCLKFreq>
 8002054:	4602      	mov	r2, r0
 8002056:	4b05      	ldr	r3, [pc, #20]	; (800206c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	0b5b      	lsrs	r3, r3, #13
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	4903      	ldr	r1, [pc, #12]	; (8002070 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002062:	5ccb      	ldrb	r3, [r1, r3]
 8002064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002068:	4618      	mov	r0, r3
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40023800 	.word	0x40023800
 8002070:	080036c4 	.word	0x080036c4

08002074 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e041      	b.n	800210a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d106      	bne.n	80020a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7fe ff24 	bl	8000ee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2202      	movs	r2, #2
 80020a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3304      	adds	r3, #4
 80020b0:	4619      	mov	r1, r3
 80020b2:	4610      	mov	r0, r2
 80020b4:	f000 fc4e 	bl	8002954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b01      	cmp	r3, #1
 8002126:	d001      	beq.n	800212c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e044      	b.n	80021b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a1e      	ldr	r2, [pc, #120]	; (80021c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d018      	beq.n	8002180 <HAL_TIM_Base_Start_IT+0x6c>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002156:	d013      	beq.n	8002180 <HAL_TIM_Base_Start_IT+0x6c>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a1a      	ldr	r2, [pc, #104]	; (80021c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d00e      	beq.n	8002180 <HAL_TIM_Base_Start_IT+0x6c>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a19      	ldr	r2, [pc, #100]	; (80021cc <HAL_TIM_Base_Start_IT+0xb8>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d009      	beq.n	8002180 <HAL_TIM_Base_Start_IT+0x6c>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a17      	ldr	r2, [pc, #92]	; (80021d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d004      	beq.n	8002180 <HAL_TIM_Base_Start_IT+0x6c>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a16      	ldr	r2, [pc, #88]	; (80021d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d111      	bne.n	80021a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2b06      	cmp	r3, #6
 8002190:	d010      	beq.n	80021b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f042 0201 	orr.w	r2, r2, #1
 80021a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a2:	e007      	b.n	80021b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0201 	orr.w	r2, r2, #1
 80021b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40010000 	.word	0x40010000
 80021c8:	40000400 	.word	0x40000400
 80021cc:	40000800 	.word	0x40000800
 80021d0:	40000c00 	.word	0x40000c00
 80021d4:	40014000 	.word	0x40014000

080021d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e041      	b.n	800226e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d106      	bne.n	8002204 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7fe fe0a 	bl	8000e18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2202      	movs	r2, #2
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3304      	adds	r3, #4
 8002214:	4619      	mov	r1, r3
 8002216:	4610      	mov	r0, r2
 8002218:	f000 fb9c 	bl	8002954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d109      	bne.n	800229c <HAL_TIM_PWM_Start+0x24>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b01      	cmp	r3, #1
 8002292:	bf14      	ite	ne
 8002294:	2301      	movne	r3, #1
 8002296:	2300      	moveq	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	e022      	b.n	80022e2 <HAL_TIM_PWM_Start+0x6a>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d109      	bne.n	80022b6 <HAL_TIM_PWM_Start+0x3e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	bf14      	ite	ne
 80022ae:	2301      	movne	r3, #1
 80022b0:	2300      	moveq	r3, #0
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	e015      	b.n	80022e2 <HAL_TIM_PWM_Start+0x6a>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d109      	bne.n	80022d0 <HAL_TIM_PWM_Start+0x58>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	bf14      	ite	ne
 80022c8:	2301      	movne	r3, #1
 80022ca:	2300      	moveq	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	e008      	b.n	80022e2 <HAL_TIM_PWM_Start+0x6a>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b01      	cmp	r3, #1
 80022da:	bf14      	ite	ne
 80022dc:	2301      	movne	r3, #1
 80022de:	2300      	moveq	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e068      	b.n	80023bc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d104      	bne.n	80022fa <HAL_TIM_PWM_Start+0x82>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2202      	movs	r2, #2
 80022f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022f8:	e013      	b.n	8002322 <HAL_TIM_PWM_Start+0xaa>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d104      	bne.n	800230a <HAL_TIM_PWM_Start+0x92>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002308:	e00b      	b.n	8002322 <HAL_TIM_PWM_Start+0xaa>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2b08      	cmp	r3, #8
 800230e:	d104      	bne.n	800231a <HAL_TIM_PWM_Start+0xa2>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2202      	movs	r2, #2
 8002314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002318:	e003      	b.n	8002322 <HAL_TIM_PWM_Start+0xaa>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2202      	movs	r2, #2
 800231e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2201      	movs	r2, #1
 8002328:	6839      	ldr	r1, [r7, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f000 fdb8 	bl	8002ea0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a23      	ldr	r2, [pc, #140]	; (80023c4 <HAL_TIM_PWM_Start+0x14c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d107      	bne.n	800234a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002348:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a1d      	ldr	r2, [pc, #116]	; (80023c4 <HAL_TIM_PWM_Start+0x14c>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d018      	beq.n	8002386 <HAL_TIM_PWM_Start+0x10e>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800235c:	d013      	beq.n	8002386 <HAL_TIM_PWM_Start+0x10e>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a19      	ldr	r2, [pc, #100]	; (80023c8 <HAL_TIM_PWM_Start+0x150>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d00e      	beq.n	8002386 <HAL_TIM_PWM_Start+0x10e>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a17      	ldr	r2, [pc, #92]	; (80023cc <HAL_TIM_PWM_Start+0x154>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d009      	beq.n	8002386 <HAL_TIM_PWM_Start+0x10e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a16      	ldr	r2, [pc, #88]	; (80023d0 <HAL_TIM_PWM_Start+0x158>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d004      	beq.n	8002386 <HAL_TIM_PWM_Start+0x10e>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a14      	ldr	r2, [pc, #80]	; (80023d4 <HAL_TIM_PWM_Start+0x15c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d111      	bne.n	80023aa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2b06      	cmp	r3, #6
 8002396:	d010      	beq.n	80023ba <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0201 	orr.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023a8:	e007      	b.n	80023ba <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f042 0201 	orr.w	r2, r2, #1
 80023b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40010000 	.word	0x40010000
 80023c8:	40000400 	.word	0x40000400
 80023cc:	40000800 	.word	0x40000800
 80023d0:	40000c00 	.word	0x40000c00
 80023d4:	40014000 	.word	0x40014000

080023d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e097      	b.n	800251c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d106      	bne.n	8002406 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f7fe fd2b 	bl	8000e5c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2202      	movs	r2, #2
 800240a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800241c:	f023 0307 	bic.w	r3, r3, #7
 8002420:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3304      	adds	r3, #4
 800242a:	4619      	mov	r1, r3
 800242c:	4610      	mov	r0, r2
 800242e:	f000 fa91 	bl	8002954 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	4313      	orrs	r3, r2
 8002452:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800245a:	f023 0303 	bic.w	r3, r3, #3
 800245e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	021b      	lsls	r3, r3, #8
 800246a:	4313      	orrs	r3, r2
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4313      	orrs	r3, r2
 8002470:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002478:	f023 030c 	bic.w	r3, r3, #12
 800247c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002484:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002488:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	021b      	lsls	r3, r3, #8
 8002494:	4313      	orrs	r3, r2
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	011a      	lsls	r2, r3, #4
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	031b      	lsls	r3, r3, #12
 80024a8:	4313      	orrs	r3, r2
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80024b6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80024be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	4313      	orrs	r3, r2
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002534:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800253c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002544:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800254c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d110      	bne.n	8002576 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d102      	bne.n	8002560 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800255a:	7b7b      	ldrb	r3, [r7, #13]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d001      	beq.n	8002564 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e069      	b.n	8002638 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002574:	e031      	b.n	80025da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2b04      	cmp	r3, #4
 800257a:	d110      	bne.n	800259e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800257c:	7bbb      	ldrb	r3, [r7, #14]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d102      	bne.n	8002588 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002582:	7b3b      	ldrb	r3, [r7, #12]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d001      	beq.n	800258c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e055      	b.n	8002638 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800259c:	e01d      	b.n	80025da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d108      	bne.n	80025b6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80025a4:	7bbb      	ldrb	r3, [r7, #14]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d105      	bne.n	80025b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80025aa:	7b7b      	ldrb	r3, [r7, #13]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d102      	bne.n	80025b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80025b0:	7b3b      	ldrb	r3, [r7, #12]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d001      	beq.n	80025ba <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e03e      	b.n	8002638 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2202      	movs	r2, #2
 80025be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2202      	movs	r2, #2
 80025c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2202      	movs	r2, #2
 80025ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2202      	movs	r2, #2
 80025d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_TIM_Encoder_Start+0xc4>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	d008      	beq.n	80025f8 <HAL_TIM_Encoder_Start+0xd4>
 80025e6:	e00f      	b.n	8002608 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2201      	movs	r2, #1
 80025ee:	2100      	movs	r1, #0
 80025f0:	4618      	mov	r0, r3
 80025f2:	f000 fc55 	bl	8002ea0 <TIM_CCxChannelCmd>
      break;
 80025f6:	e016      	b.n	8002626 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2201      	movs	r2, #1
 80025fe:	2104      	movs	r1, #4
 8002600:	4618      	mov	r0, r3
 8002602:	f000 fc4d 	bl	8002ea0 <TIM_CCxChannelCmd>
      break;
 8002606:	e00e      	b.n	8002626 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2201      	movs	r2, #1
 800260e:	2100      	movs	r1, #0
 8002610:	4618      	mov	r0, r3
 8002612:	f000 fc45 	bl	8002ea0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2201      	movs	r2, #1
 800261c:	2104      	movs	r1, #4
 800261e:	4618      	mov	r0, r3
 8002620:	f000 fc3e 	bl	8002ea0 <TIM_CCxChannelCmd>
      break;
 8002624:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f042 0201 	orr.w	r2, r2, #1
 8002634:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002656:	2b01      	cmp	r3, #1
 8002658:	d101      	bne.n	800265e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800265a:	2302      	movs	r3, #2
 800265c:	e0ae      	b.n	80027bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b0c      	cmp	r3, #12
 800266a:	f200 809f 	bhi.w	80027ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800266e:	a201      	add	r2, pc, #4	; (adr r2, 8002674 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002674:	080026a9 	.word	0x080026a9
 8002678:	080027ad 	.word	0x080027ad
 800267c:	080027ad 	.word	0x080027ad
 8002680:	080027ad 	.word	0x080027ad
 8002684:	080026e9 	.word	0x080026e9
 8002688:	080027ad 	.word	0x080027ad
 800268c:	080027ad 	.word	0x080027ad
 8002690:	080027ad 	.word	0x080027ad
 8002694:	0800272b 	.word	0x0800272b
 8002698:	080027ad 	.word	0x080027ad
 800269c:	080027ad 	.word	0x080027ad
 80026a0:	080027ad 	.word	0x080027ad
 80026a4:	0800276b 	.word	0x0800276b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68b9      	ldr	r1, [r7, #8]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 f9d0 	bl	8002a54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699a      	ldr	r2, [r3, #24]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0208 	orr.w	r2, r2, #8
 80026c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699a      	ldr	r2, [r3, #24]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0204 	bic.w	r2, r2, #4
 80026d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6999      	ldr	r1, [r3, #24]
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	619a      	str	r2, [r3, #24]
      break;
 80026e6:	e064      	b.n	80027b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68b9      	ldr	r1, [r7, #8]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 fa16 	bl	8002b20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	699a      	ldr	r2, [r3, #24]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002702:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699a      	ldr	r2, [r3, #24]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002712:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6999      	ldr	r1, [r3, #24]
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	021a      	lsls	r2, r3, #8
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	619a      	str	r2, [r3, #24]
      break;
 8002728:	e043      	b.n	80027b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68b9      	ldr	r1, [r7, #8]
 8002730:	4618      	mov	r0, r3
 8002732:	f000 fa61 	bl	8002bf8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	69da      	ldr	r2, [r3, #28]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f042 0208 	orr.w	r2, r2, #8
 8002744:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	69da      	ldr	r2, [r3, #28]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0204 	bic.w	r2, r2, #4
 8002754:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	69d9      	ldr	r1, [r3, #28]
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	61da      	str	r2, [r3, #28]
      break;
 8002768:	e023      	b.n	80027b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68b9      	ldr	r1, [r7, #8]
 8002770:	4618      	mov	r0, r3
 8002772:	f000 faab 	bl	8002ccc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	69da      	ldr	r2, [r3, #28]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002784:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	69da      	ldr	r2, [r3, #28]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002794:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	69d9      	ldr	r1, [r3, #28]
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	021a      	lsls	r2, r3, #8
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	61da      	str	r2, [r3, #28]
      break;
 80027aa:	e002      	b.n	80027b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	75fb      	strb	r3, [r7, #23]
      break;
 80027b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_TIM_ConfigClockSource+0x1c>
 80027dc:	2302      	movs	r3, #2
 80027de:	e0b4      	b.n	800294a <HAL_TIM_ConfigClockSource+0x186>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2202      	movs	r2, #2
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002806:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002818:	d03e      	beq.n	8002898 <HAL_TIM_ConfigClockSource+0xd4>
 800281a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800281e:	f200 8087 	bhi.w	8002930 <HAL_TIM_ConfigClockSource+0x16c>
 8002822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002826:	f000 8086 	beq.w	8002936 <HAL_TIM_ConfigClockSource+0x172>
 800282a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800282e:	d87f      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x16c>
 8002830:	2b70      	cmp	r3, #112	; 0x70
 8002832:	d01a      	beq.n	800286a <HAL_TIM_ConfigClockSource+0xa6>
 8002834:	2b70      	cmp	r3, #112	; 0x70
 8002836:	d87b      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x16c>
 8002838:	2b60      	cmp	r3, #96	; 0x60
 800283a:	d050      	beq.n	80028de <HAL_TIM_ConfigClockSource+0x11a>
 800283c:	2b60      	cmp	r3, #96	; 0x60
 800283e:	d877      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x16c>
 8002840:	2b50      	cmp	r3, #80	; 0x50
 8002842:	d03c      	beq.n	80028be <HAL_TIM_ConfigClockSource+0xfa>
 8002844:	2b50      	cmp	r3, #80	; 0x50
 8002846:	d873      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x16c>
 8002848:	2b40      	cmp	r3, #64	; 0x40
 800284a:	d058      	beq.n	80028fe <HAL_TIM_ConfigClockSource+0x13a>
 800284c:	2b40      	cmp	r3, #64	; 0x40
 800284e:	d86f      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x16c>
 8002850:	2b30      	cmp	r3, #48	; 0x30
 8002852:	d064      	beq.n	800291e <HAL_TIM_ConfigClockSource+0x15a>
 8002854:	2b30      	cmp	r3, #48	; 0x30
 8002856:	d86b      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x16c>
 8002858:	2b20      	cmp	r3, #32
 800285a:	d060      	beq.n	800291e <HAL_TIM_ConfigClockSource+0x15a>
 800285c:	2b20      	cmp	r3, #32
 800285e:	d867      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x16c>
 8002860:	2b00      	cmp	r3, #0
 8002862:	d05c      	beq.n	800291e <HAL_TIM_ConfigClockSource+0x15a>
 8002864:	2b10      	cmp	r3, #16
 8002866:	d05a      	beq.n	800291e <HAL_TIM_ConfigClockSource+0x15a>
 8002868:	e062      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6818      	ldr	r0, [r3, #0]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	6899      	ldr	r1, [r3, #8]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f000 faf1 	bl	8002e60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800288c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	609a      	str	r2, [r3, #8]
      break;
 8002896:	e04f      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6818      	ldr	r0, [r3, #0]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	6899      	ldr	r1, [r3, #8]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f000 fada 	bl	8002e60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028ba:	609a      	str	r2, [r3, #8]
      break;
 80028bc:	e03c      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6818      	ldr	r0, [r3, #0]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6859      	ldr	r1, [r3, #4]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	461a      	mov	r2, r3
 80028cc:	f000 fa4e 	bl	8002d6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2150      	movs	r1, #80	; 0x50
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 faa7 	bl	8002e2a <TIM_ITRx_SetConfig>
      break;
 80028dc:	e02c      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	6859      	ldr	r1, [r3, #4]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	461a      	mov	r2, r3
 80028ec:	f000 fa6d 	bl	8002dca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2160      	movs	r1, #96	; 0x60
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 fa97 	bl	8002e2a <TIM_ITRx_SetConfig>
      break;
 80028fc:	e01c      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6818      	ldr	r0, [r3, #0]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	6859      	ldr	r1, [r3, #4]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	461a      	mov	r2, r3
 800290c:	f000 fa2e 	bl	8002d6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2140      	movs	r1, #64	; 0x40
 8002916:	4618      	mov	r0, r3
 8002918:	f000 fa87 	bl	8002e2a <TIM_ITRx_SetConfig>
      break;
 800291c:	e00c      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4619      	mov	r1, r3
 8002928:	4610      	mov	r0, r2
 800292a:	f000 fa7e 	bl	8002e2a <TIM_ITRx_SetConfig>
      break;
 800292e:	e003      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	73fb      	strb	r3, [r7, #15]
      break;
 8002934:	e000      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002936:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002948:	7bfb      	ldrb	r3, [r7, #15]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a34      	ldr	r2, [pc, #208]	; (8002a38 <TIM_Base_SetConfig+0xe4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d00f      	beq.n	800298c <TIM_Base_SetConfig+0x38>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002972:	d00b      	beq.n	800298c <TIM_Base_SetConfig+0x38>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a31      	ldr	r2, [pc, #196]	; (8002a3c <TIM_Base_SetConfig+0xe8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d007      	beq.n	800298c <TIM_Base_SetConfig+0x38>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a30      	ldr	r2, [pc, #192]	; (8002a40 <TIM_Base_SetConfig+0xec>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d003      	beq.n	800298c <TIM_Base_SetConfig+0x38>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a2f      	ldr	r2, [pc, #188]	; (8002a44 <TIM_Base_SetConfig+0xf0>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d108      	bne.n	800299e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	4313      	orrs	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a25      	ldr	r2, [pc, #148]	; (8002a38 <TIM_Base_SetConfig+0xe4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d01b      	beq.n	80029de <TIM_Base_SetConfig+0x8a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ac:	d017      	beq.n	80029de <TIM_Base_SetConfig+0x8a>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a22      	ldr	r2, [pc, #136]	; (8002a3c <TIM_Base_SetConfig+0xe8>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d013      	beq.n	80029de <TIM_Base_SetConfig+0x8a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a21      	ldr	r2, [pc, #132]	; (8002a40 <TIM_Base_SetConfig+0xec>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d00f      	beq.n	80029de <TIM_Base_SetConfig+0x8a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a20      	ldr	r2, [pc, #128]	; (8002a44 <TIM_Base_SetConfig+0xf0>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d00b      	beq.n	80029de <TIM_Base_SetConfig+0x8a>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a1f      	ldr	r2, [pc, #124]	; (8002a48 <TIM_Base_SetConfig+0xf4>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d007      	beq.n	80029de <TIM_Base_SetConfig+0x8a>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a1e      	ldr	r2, [pc, #120]	; (8002a4c <TIM_Base_SetConfig+0xf8>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d003      	beq.n	80029de <TIM_Base_SetConfig+0x8a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a1d      	ldr	r2, [pc, #116]	; (8002a50 <TIM_Base_SetConfig+0xfc>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d108      	bne.n	80029f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a08      	ldr	r2, [pc, #32]	; (8002a38 <TIM_Base_SetConfig+0xe4>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d103      	bne.n	8002a24 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	615a      	str	r2, [r3, #20]
}
 8002a2a:	bf00      	nop
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40010000 	.word	0x40010000
 8002a3c:	40000400 	.word	0x40000400
 8002a40:	40000800 	.word	0x40000800
 8002a44:	40000c00 	.word	0x40000c00
 8002a48:	40014000 	.word	0x40014000
 8002a4c:	40014400 	.word	0x40014400
 8002a50:	40014800 	.word	0x40014800

08002a54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	f023 0201 	bic.w	r2, r3, #1
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f023 0303 	bic.w	r3, r3, #3
 8002a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f023 0302 	bic.w	r3, r3, #2
 8002a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a1c      	ldr	r2, [pc, #112]	; (8002b1c <TIM_OC1_SetConfig+0xc8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d10c      	bne.n	8002aca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f023 0308 	bic.w	r3, r3, #8
 8002ab6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f023 0304 	bic.w	r3, r3, #4
 8002ac8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a13      	ldr	r2, [pc, #76]	; (8002b1c <TIM_OC1_SetConfig+0xc8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d111      	bne.n	8002af6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ad8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	621a      	str	r2, [r3, #32]
}
 8002b10:	bf00      	nop
 8002b12:	371c      	adds	r7, #28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	40010000 	.word	0x40010000

08002b20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b087      	sub	sp, #28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	f023 0210 	bic.w	r2, r3, #16
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	021b      	lsls	r3, r3, #8
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	f023 0320 	bic.w	r3, r3, #32
 8002b6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a1e      	ldr	r2, [pc, #120]	; (8002bf4 <TIM_OC2_SetConfig+0xd4>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d10d      	bne.n	8002b9c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a15      	ldr	r2, [pc, #84]	; (8002bf4 <TIM_OC2_SetConfig+0xd4>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d113      	bne.n	8002bcc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002baa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	621a      	str	r2, [r3, #32]
}
 8002be6:	bf00      	nop
 8002be8:	371c      	adds	r7, #28
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40010000 	.word	0x40010000

08002bf8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b087      	sub	sp, #28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f023 0303 	bic.w	r3, r3, #3
 8002c2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	021b      	lsls	r3, r3, #8
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a1d      	ldr	r2, [pc, #116]	; (8002cc8 <TIM_OC3_SetConfig+0xd0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d10d      	bne.n	8002c72 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	021b      	lsls	r3, r3, #8
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a14      	ldr	r2, [pc, #80]	; (8002cc8 <TIM_OC3_SetConfig+0xd0>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d113      	bne.n	8002ca2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	621a      	str	r2, [r3, #32]
}
 8002cbc:	bf00      	nop
 8002cbe:	371c      	adds	r7, #28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	40010000 	.word	0x40010000

08002ccc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b087      	sub	sp, #28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	021b      	lsls	r3, r3, #8
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	031b      	lsls	r3, r3, #12
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a10      	ldr	r2, [pc, #64]	; (8002d68 <TIM_OC4_SetConfig+0x9c>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d109      	bne.n	8002d40 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	019b      	lsls	r3, r3, #6
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	621a      	str	r2, [r3, #32]
}
 8002d5a:	bf00      	nop
 8002d5c:	371c      	adds	r7, #28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40010000 	.word	0x40010000

08002d6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b087      	sub	sp, #28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	f023 0201 	bic.w	r2, r3, #1
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f023 030a 	bic.w	r3, r3, #10
 8002da8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	621a      	str	r2, [r3, #32]
}
 8002dbe:	bf00      	nop
 8002dc0:	371c      	adds	r7, #28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b087      	sub	sp, #28
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	60f8      	str	r0, [r7, #12]
 8002dd2:	60b9      	str	r1, [r7, #8]
 8002dd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	f023 0210 	bic.w	r2, r3, #16
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002df4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	031b      	lsls	r3, r3, #12
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	621a      	str	r2, [r3, #32]
}
 8002e1e:	bf00      	nop
 8002e20:	371c      	adds	r7, #28
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b085      	sub	sp, #20
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f043 0307 	orr.w	r3, r3, #7
 8002e4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	609a      	str	r2, [r3, #8]
}
 8002e54:	bf00      	nop
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
 8002e6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	021a      	lsls	r2, r3, #8
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	431a      	orrs	r2, r3
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	609a      	str	r2, [r3, #8]
}
 8002e94:	bf00      	nop
 8002e96:	371c      	adds	r7, #28
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	f003 031f 	and.w	r3, r3, #31
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6a1a      	ldr	r2, [r3, #32]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	401a      	ands	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a1a      	ldr	r2, [r3, #32]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	f003 031f 	and.w	r3, r3, #31
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	621a      	str	r2, [r3, #32]
}
 8002ede:	bf00      	nop
 8002ee0:	371c      	adds	r7, #28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e050      	b.n	8002fa6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a1c      	ldr	r2, [pc, #112]	; (8002fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d018      	beq.n	8002f7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f50:	d013      	beq.n	8002f7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a18      	ldr	r2, [pc, #96]	; (8002fb8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d00e      	beq.n	8002f7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a16      	ldr	r2, [pc, #88]	; (8002fbc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d009      	beq.n	8002f7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a15      	ldr	r2, [pc, #84]	; (8002fc0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d004      	beq.n	8002f7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a13      	ldr	r2, [pc, #76]	; (8002fc4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d10c      	bne.n	8002f94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68ba      	ldr	r2, [r7, #8]
 8002f92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40010000 	.word	0x40010000
 8002fb8:	40000400 	.word	0x40000400
 8002fbc:	40000800 	.word	0x40000800
 8002fc0:	40000c00 	.word	0x40000c00
 8002fc4:	40014000 	.word	0x40014000

08002fc8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	e03d      	b.n	8003060 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	4313      	orrs	r3, r2
 8003006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	4313      	orrs	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4313      	orrs	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	4313      	orrs	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	4313      	orrs	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e03f      	b.n	80030fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d106      	bne.n	8003098 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fd ff9a 	bl	8000fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2224      	movs	r2, #36	; 0x24
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f829 	bl	8003108 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	691a      	ldr	r2, [r3, #16]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695a      	ldr	r2, [r3, #20]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2220      	movs	r2, #32
 80030f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
	...

08003108 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800310c:	b0c0      	sub	sp, #256	; 0x100
 800310e:	af00      	add	r7, sp, #0
 8003110:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003124:	68d9      	ldr	r1, [r3, #12]
 8003126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	ea40 0301 	orr.w	r3, r0, r1
 8003130:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	431a      	orrs	r2, r3
 8003140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	431a      	orrs	r2, r3
 8003148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	4313      	orrs	r3, r2
 8003150:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003160:	f021 010c 	bic.w	r1, r1, #12
 8003164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800316e:	430b      	orrs	r3, r1
 8003170:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800317e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003182:	6999      	ldr	r1, [r3, #24]
 8003184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	ea40 0301 	orr.w	r3, r0, r1
 800318e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	4b8f      	ldr	r3, [pc, #572]	; (80033d4 <UART_SetConfig+0x2cc>)
 8003198:	429a      	cmp	r2, r3
 800319a:	d005      	beq.n	80031a8 <UART_SetConfig+0xa0>
 800319c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	4b8d      	ldr	r3, [pc, #564]	; (80033d8 <UART_SetConfig+0x2d0>)
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d104      	bne.n	80031b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031a8:	f7fe ff50 	bl	800204c <HAL_RCC_GetPCLK2Freq>
 80031ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80031b0:	e003      	b.n	80031ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031b2:	f7fe ff37 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
 80031b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031c4:	f040 810c 	bne.w	80033e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031cc:	2200      	movs	r2, #0
 80031ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80031d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80031da:	4622      	mov	r2, r4
 80031dc:	462b      	mov	r3, r5
 80031de:	1891      	adds	r1, r2, r2
 80031e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80031e2:	415b      	adcs	r3, r3
 80031e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031ea:	4621      	mov	r1, r4
 80031ec:	eb12 0801 	adds.w	r8, r2, r1
 80031f0:	4629      	mov	r1, r5
 80031f2:	eb43 0901 	adc.w	r9, r3, r1
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003202:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003206:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800320a:	4690      	mov	r8, r2
 800320c:	4699      	mov	r9, r3
 800320e:	4623      	mov	r3, r4
 8003210:	eb18 0303 	adds.w	r3, r8, r3
 8003214:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003218:	462b      	mov	r3, r5
 800321a:	eb49 0303 	adc.w	r3, r9, r3
 800321e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800322e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003232:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003236:	460b      	mov	r3, r1
 8003238:	18db      	adds	r3, r3, r3
 800323a:	653b      	str	r3, [r7, #80]	; 0x50
 800323c:	4613      	mov	r3, r2
 800323e:	eb42 0303 	adc.w	r3, r2, r3
 8003242:	657b      	str	r3, [r7, #84]	; 0x54
 8003244:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003248:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800324c:	f7fc ffc4 	bl	80001d8 <__aeabi_uldivmod>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	4b61      	ldr	r3, [pc, #388]	; (80033dc <UART_SetConfig+0x2d4>)
 8003256:	fba3 2302 	umull	r2, r3, r3, r2
 800325a:	095b      	lsrs	r3, r3, #5
 800325c:	011c      	lsls	r4, r3, #4
 800325e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003262:	2200      	movs	r2, #0
 8003264:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003268:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800326c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003270:	4642      	mov	r2, r8
 8003272:	464b      	mov	r3, r9
 8003274:	1891      	adds	r1, r2, r2
 8003276:	64b9      	str	r1, [r7, #72]	; 0x48
 8003278:	415b      	adcs	r3, r3
 800327a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800327c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003280:	4641      	mov	r1, r8
 8003282:	eb12 0a01 	adds.w	sl, r2, r1
 8003286:	4649      	mov	r1, r9
 8003288:	eb43 0b01 	adc.w	fp, r3, r1
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003298:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800329c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032a0:	4692      	mov	sl, r2
 80032a2:	469b      	mov	fp, r3
 80032a4:	4643      	mov	r3, r8
 80032a6:	eb1a 0303 	adds.w	r3, sl, r3
 80032aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032ae:	464b      	mov	r3, r9
 80032b0:	eb4b 0303 	adc.w	r3, fp, r3
 80032b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80032b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80032c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80032cc:	460b      	mov	r3, r1
 80032ce:	18db      	adds	r3, r3, r3
 80032d0:	643b      	str	r3, [r7, #64]	; 0x40
 80032d2:	4613      	mov	r3, r2
 80032d4:	eb42 0303 	adc.w	r3, r2, r3
 80032d8:	647b      	str	r3, [r7, #68]	; 0x44
 80032da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80032e2:	f7fc ff79 	bl	80001d8 <__aeabi_uldivmod>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	4611      	mov	r1, r2
 80032ec:	4b3b      	ldr	r3, [pc, #236]	; (80033dc <UART_SetConfig+0x2d4>)
 80032ee:	fba3 2301 	umull	r2, r3, r3, r1
 80032f2:	095b      	lsrs	r3, r3, #5
 80032f4:	2264      	movs	r2, #100	; 0x64
 80032f6:	fb02 f303 	mul.w	r3, r2, r3
 80032fa:	1acb      	subs	r3, r1, r3
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003302:	4b36      	ldr	r3, [pc, #216]	; (80033dc <UART_SetConfig+0x2d4>)
 8003304:	fba3 2302 	umull	r2, r3, r3, r2
 8003308:	095b      	lsrs	r3, r3, #5
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003310:	441c      	add	r4, r3
 8003312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003316:	2200      	movs	r2, #0
 8003318:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800331c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003320:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003324:	4642      	mov	r2, r8
 8003326:	464b      	mov	r3, r9
 8003328:	1891      	adds	r1, r2, r2
 800332a:	63b9      	str	r1, [r7, #56]	; 0x38
 800332c:	415b      	adcs	r3, r3
 800332e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003330:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003334:	4641      	mov	r1, r8
 8003336:	1851      	adds	r1, r2, r1
 8003338:	6339      	str	r1, [r7, #48]	; 0x30
 800333a:	4649      	mov	r1, r9
 800333c:	414b      	adcs	r3, r1
 800333e:	637b      	str	r3, [r7, #52]	; 0x34
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800334c:	4659      	mov	r1, fp
 800334e:	00cb      	lsls	r3, r1, #3
 8003350:	4651      	mov	r1, sl
 8003352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003356:	4651      	mov	r1, sl
 8003358:	00ca      	lsls	r2, r1, #3
 800335a:	4610      	mov	r0, r2
 800335c:	4619      	mov	r1, r3
 800335e:	4603      	mov	r3, r0
 8003360:	4642      	mov	r2, r8
 8003362:	189b      	adds	r3, r3, r2
 8003364:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003368:	464b      	mov	r3, r9
 800336a:	460a      	mov	r2, r1
 800336c:	eb42 0303 	adc.w	r3, r2, r3
 8003370:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003380:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003384:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003388:	460b      	mov	r3, r1
 800338a:	18db      	adds	r3, r3, r3
 800338c:	62bb      	str	r3, [r7, #40]	; 0x28
 800338e:	4613      	mov	r3, r2
 8003390:	eb42 0303 	adc.w	r3, r2, r3
 8003394:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003396:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800339a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800339e:	f7fc ff1b 	bl	80001d8 <__aeabi_uldivmod>
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	4b0d      	ldr	r3, [pc, #52]	; (80033dc <UART_SetConfig+0x2d4>)
 80033a8:	fba3 1302 	umull	r1, r3, r3, r2
 80033ac:	095b      	lsrs	r3, r3, #5
 80033ae:	2164      	movs	r1, #100	; 0x64
 80033b0:	fb01 f303 	mul.w	r3, r1, r3
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	3332      	adds	r3, #50	; 0x32
 80033ba:	4a08      	ldr	r2, [pc, #32]	; (80033dc <UART_SetConfig+0x2d4>)
 80033bc:	fba2 2303 	umull	r2, r3, r2, r3
 80033c0:	095b      	lsrs	r3, r3, #5
 80033c2:	f003 0207 	and.w	r2, r3, #7
 80033c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4422      	add	r2, r4
 80033ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033d0:	e105      	b.n	80035de <UART_SetConfig+0x4d6>
 80033d2:	bf00      	nop
 80033d4:	40011000 	.word	0x40011000
 80033d8:	40011400 	.word	0x40011400
 80033dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033e4:	2200      	movs	r2, #0
 80033e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80033ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80033f2:	4642      	mov	r2, r8
 80033f4:	464b      	mov	r3, r9
 80033f6:	1891      	adds	r1, r2, r2
 80033f8:	6239      	str	r1, [r7, #32]
 80033fa:	415b      	adcs	r3, r3
 80033fc:	627b      	str	r3, [r7, #36]	; 0x24
 80033fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003402:	4641      	mov	r1, r8
 8003404:	1854      	adds	r4, r2, r1
 8003406:	4649      	mov	r1, r9
 8003408:	eb43 0501 	adc.w	r5, r3, r1
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	00eb      	lsls	r3, r5, #3
 8003416:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800341a:	00e2      	lsls	r2, r4, #3
 800341c:	4614      	mov	r4, r2
 800341e:	461d      	mov	r5, r3
 8003420:	4643      	mov	r3, r8
 8003422:	18e3      	adds	r3, r4, r3
 8003424:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003428:	464b      	mov	r3, r9
 800342a:	eb45 0303 	adc.w	r3, r5, r3
 800342e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800343e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800344e:	4629      	mov	r1, r5
 8003450:	008b      	lsls	r3, r1, #2
 8003452:	4621      	mov	r1, r4
 8003454:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003458:	4621      	mov	r1, r4
 800345a:	008a      	lsls	r2, r1, #2
 800345c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003460:	f7fc feba 	bl	80001d8 <__aeabi_uldivmod>
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	4b60      	ldr	r3, [pc, #384]	; (80035ec <UART_SetConfig+0x4e4>)
 800346a:	fba3 2302 	umull	r2, r3, r3, r2
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	011c      	lsls	r4, r3, #4
 8003472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003476:	2200      	movs	r2, #0
 8003478:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800347c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003480:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003484:	4642      	mov	r2, r8
 8003486:	464b      	mov	r3, r9
 8003488:	1891      	adds	r1, r2, r2
 800348a:	61b9      	str	r1, [r7, #24]
 800348c:	415b      	adcs	r3, r3
 800348e:	61fb      	str	r3, [r7, #28]
 8003490:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003494:	4641      	mov	r1, r8
 8003496:	1851      	adds	r1, r2, r1
 8003498:	6139      	str	r1, [r7, #16]
 800349a:	4649      	mov	r1, r9
 800349c:	414b      	adcs	r3, r1
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034ac:	4659      	mov	r1, fp
 80034ae:	00cb      	lsls	r3, r1, #3
 80034b0:	4651      	mov	r1, sl
 80034b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034b6:	4651      	mov	r1, sl
 80034b8:	00ca      	lsls	r2, r1, #3
 80034ba:	4610      	mov	r0, r2
 80034bc:	4619      	mov	r1, r3
 80034be:	4603      	mov	r3, r0
 80034c0:	4642      	mov	r2, r8
 80034c2:	189b      	adds	r3, r3, r2
 80034c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034c8:	464b      	mov	r3, r9
 80034ca:	460a      	mov	r2, r1
 80034cc:	eb42 0303 	adc.w	r3, r2, r3
 80034d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80034d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80034de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80034e0:	f04f 0200 	mov.w	r2, #0
 80034e4:	f04f 0300 	mov.w	r3, #0
 80034e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80034ec:	4649      	mov	r1, r9
 80034ee:	008b      	lsls	r3, r1, #2
 80034f0:	4641      	mov	r1, r8
 80034f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034f6:	4641      	mov	r1, r8
 80034f8:	008a      	lsls	r2, r1, #2
 80034fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80034fe:	f7fc fe6b 	bl	80001d8 <__aeabi_uldivmod>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	4b39      	ldr	r3, [pc, #228]	; (80035ec <UART_SetConfig+0x4e4>)
 8003508:	fba3 1302 	umull	r1, r3, r3, r2
 800350c:	095b      	lsrs	r3, r3, #5
 800350e:	2164      	movs	r1, #100	; 0x64
 8003510:	fb01 f303 	mul.w	r3, r1, r3
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	3332      	adds	r3, #50	; 0x32
 800351a:	4a34      	ldr	r2, [pc, #208]	; (80035ec <UART_SetConfig+0x4e4>)
 800351c:	fba2 2303 	umull	r2, r3, r2, r3
 8003520:	095b      	lsrs	r3, r3, #5
 8003522:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003526:	441c      	add	r4, r3
 8003528:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800352c:	2200      	movs	r2, #0
 800352e:	673b      	str	r3, [r7, #112]	; 0x70
 8003530:	677a      	str	r2, [r7, #116]	; 0x74
 8003532:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003536:	4642      	mov	r2, r8
 8003538:	464b      	mov	r3, r9
 800353a:	1891      	adds	r1, r2, r2
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	415b      	adcs	r3, r3
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003546:	4641      	mov	r1, r8
 8003548:	1851      	adds	r1, r2, r1
 800354a:	6039      	str	r1, [r7, #0]
 800354c:	4649      	mov	r1, r9
 800354e:	414b      	adcs	r3, r1
 8003550:	607b      	str	r3, [r7, #4]
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	f04f 0300 	mov.w	r3, #0
 800355a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800355e:	4659      	mov	r1, fp
 8003560:	00cb      	lsls	r3, r1, #3
 8003562:	4651      	mov	r1, sl
 8003564:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003568:	4651      	mov	r1, sl
 800356a:	00ca      	lsls	r2, r1, #3
 800356c:	4610      	mov	r0, r2
 800356e:	4619      	mov	r1, r3
 8003570:	4603      	mov	r3, r0
 8003572:	4642      	mov	r2, r8
 8003574:	189b      	adds	r3, r3, r2
 8003576:	66bb      	str	r3, [r7, #104]	; 0x68
 8003578:	464b      	mov	r3, r9
 800357a:	460a      	mov	r2, r1
 800357c:	eb42 0303 	adc.w	r3, r2, r3
 8003580:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	663b      	str	r3, [r7, #96]	; 0x60
 800358c:	667a      	str	r2, [r7, #100]	; 0x64
 800358e:	f04f 0200 	mov.w	r2, #0
 8003592:	f04f 0300 	mov.w	r3, #0
 8003596:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800359a:	4649      	mov	r1, r9
 800359c:	008b      	lsls	r3, r1, #2
 800359e:	4641      	mov	r1, r8
 80035a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035a4:	4641      	mov	r1, r8
 80035a6:	008a      	lsls	r2, r1, #2
 80035a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80035ac:	f7fc fe14 	bl	80001d8 <__aeabi_uldivmod>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4b0d      	ldr	r3, [pc, #52]	; (80035ec <UART_SetConfig+0x4e4>)
 80035b6:	fba3 1302 	umull	r1, r3, r3, r2
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	2164      	movs	r1, #100	; 0x64
 80035be:	fb01 f303 	mul.w	r3, r1, r3
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	3332      	adds	r3, #50	; 0x32
 80035c8:	4a08      	ldr	r2, [pc, #32]	; (80035ec <UART_SetConfig+0x4e4>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	095b      	lsrs	r3, r3, #5
 80035d0:	f003 020f 	and.w	r2, r3, #15
 80035d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4422      	add	r2, r4
 80035dc:	609a      	str	r2, [r3, #8]
}
 80035de:	bf00      	nop
 80035e0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80035e4:	46bd      	mov	sp, r7
 80035e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035ea:	bf00      	nop
 80035ec:	51eb851f 	.word	0x51eb851f

080035f0 <__libc_init_array>:
 80035f0:	b570      	push	{r4, r5, r6, lr}
 80035f2:	4d0d      	ldr	r5, [pc, #52]	; (8003628 <__libc_init_array+0x38>)
 80035f4:	4c0d      	ldr	r4, [pc, #52]	; (800362c <__libc_init_array+0x3c>)
 80035f6:	1b64      	subs	r4, r4, r5
 80035f8:	10a4      	asrs	r4, r4, #2
 80035fa:	2600      	movs	r6, #0
 80035fc:	42a6      	cmp	r6, r4
 80035fe:	d109      	bne.n	8003614 <__libc_init_array+0x24>
 8003600:	4d0b      	ldr	r5, [pc, #44]	; (8003630 <__libc_init_array+0x40>)
 8003602:	4c0c      	ldr	r4, [pc, #48]	; (8003634 <__libc_init_array+0x44>)
 8003604:	f000 f820 	bl	8003648 <_init>
 8003608:	1b64      	subs	r4, r4, r5
 800360a:	10a4      	asrs	r4, r4, #2
 800360c:	2600      	movs	r6, #0
 800360e:	42a6      	cmp	r6, r4
 8003610:	d105      	bne.n	800361e <__libc_init_array+0x2e>
 8003612:	bd70      	pop	{r4, r5, r6, pc}
 8003614:	f855 3b04 	ldr.w	r3, [r5], #4
 8003618:	4798      	blx	r3
 800361a:	3601      	adds	r6, #1
 800361c:	e7ee      	b.n	80035fc <__libc_init_array+0xc>
 800361e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003622:	4798      	blx	r3
 8003624:	3601      	adds	r6, #1
 8003626:	e7f2      	b.n	800360e <__libc_init_array+0x1e>
 8003628:	080036d4 	.word	0x080036d4
 800362c:	080036d4 	.word	0x080036d4
 8003630:	080036d4 	.word	0x080036d4
 8003634:	080036d8 	.word	0x080036d8

08003638 <memset>:
 8003638:	4402      	add	r2, r0
 800363a:	4603      	mov	r3, r0
 800363c:	4293      	cmp	r3, r2
 800363e:	d100      	bne.n	8003642 <memset+0xa>
 8003640:	4770      	bx	lr
 8003642:	f803 1b01 	strb.w	r1, [r3], #1
 8003646:	e7f9      	b.n	800363c <memset+0x4>

08003648 <_init>:
 8003648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364a:	bf00      	nop
 800364c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800364e:	bc08      	pop	{r3}
 8003650:	469e      	mov	lr, r3
 8003652:	4770      	bx	lr

08003654 <_fini>:
 8003654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003656:	bf00      	nop
 8003658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800365a:	bc08      	pop	{r3}
 800365c:	469e      	mov	lr, r3
 800365e:	4770      	bx	lr
