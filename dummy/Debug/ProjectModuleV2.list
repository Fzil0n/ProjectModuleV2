
ProjectModuleV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a08  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000900  08007ba0  08007ba0  00017ba0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084a0  080084a0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080084a0  080084a0  000184a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084a8  080084a8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084a8  080084a8  000184a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084ac  080084ac  000184ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080084b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d8  20000080  08008530  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000658  08008530  00020658  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001517e  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000332b  00000000  00000000  0003522e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00038560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  00039650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004f84  00000000  00000000  0003a578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001be92  00000000  00000000  0003f4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093916  00000000  00000000  0005b38e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eeca4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049f8  00000000  00000000  000eecf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007b88 	.word	0x08007b88

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	08007b88 	.word	0x08007b88

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b974 	b.w	8000e50 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	4604      	mov	r4, r0
 8000b88:	468e      	mov	lr, r1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d14d      	bne.n	8000c2a <__udivmoddi4+0xaa>
 8000b8e:	428a      	cmp	r2, r1
 8000b90:	4694      	mov	ip, r2
 8000b92:	d969      	bls.n	8000c68 <__udivmoddi4+0xe8>
 8000b94:	fab2 f282 	clz	r2, r2
 8000b98:	b152      	cbz	r2, 8000bb0 <__udivmoddi4+0x30>
 8000b9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b9e:	f1c2 0120 	rsb	r1, r2, #32
 8000ba2:	fa20 f101 	lsr.w	r1, r0, r1
 8000ba6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000baa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bae:	4094      	lsls	r4, r2
 8000bb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb4:	0c21      	lsrs	r1, r4, #16
 8000bb6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bba:	fa1f f78c 	uxth.w	r7, ip
 8000bbe:	fb08 e316 	mls	r3, r8, r6, lr
 8000bc2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bc6:	fb06 f107 	mul.w	r1, r6, r7
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d90a      	bls.n	8000be4 <__udivmoddi4+0x64>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bd6:	f080 811f 	bcs.w	8000e18 <__udivmoddi4+0x298>
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	f240 811c 	bls.w	8000e18 <__udivmoddi4+0x298>
 8000be0:	3e02      	subs	r6, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1a5b      	subs	r3, r3, r1
 8000be6:	b2a4      	uxth	r4, r4
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf4:	fb00 f707 	mul.w	r7, r0, r7
 8000bf8:	42a7      	cmp	r7, r4
 8000bfa:	d90a      	bls.n	8000c12 <__udivmoddi4+0x92>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c04:	f080 810a 	bcs.w	8000e1c <__udivmoddi4+0x29c>
 8000c08:	42a7      	cmp	r7, r4
 8000c0a:	f240 8107 	bls.w	8000e1c <__udivmoddi4+0x29c>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c16:	1be4      	subs	r4, r4, r7
 8000c18:	2600      	movs	r6, #0
 8000c1a:	b11d      	cbz	r5, 8000c24 <__udivmoddi4+0xa4>
 8000c1c:	40d4      	lsrs	r4, r2
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e9c5 4300 	strd	r4, r3, [r5]
 8000c24:	4631      	mov	r1, r6
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d909      	bls.n	8000c42 <__udivmoddi4+0xc2>
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	f000 80ef 	beq.w	8000e12 <__udivmoddi4+0x292>
 8000c34:	2600      	movs	r6, #0
 8000c36:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	fab3 f683 	clz	r6, r3
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d14a      	bne.n	8000ce0 <__udivmoddi4+0x160>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xd4>
 8000c4e:	4282      	cmp	r2, r0
 8000c50:	f200 80f9 	bhi.w	8000e46 <__udivmoddi4+0x2c6>
 8000c54:	1a84      	subs	r4, r0, r2
 8000c56:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	469e      	mov	lr, r3
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	d0e0      	beq.n	8000c24 <__udivmoddi4+0xa4>
 8000c62:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c66:	e7dd      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000c68:	b902      	cbnz	r2, 8000c6c <__udivmoddi4+0xec>
 8000c6a:	deff      	udf	#255	; 0xff
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f040 8092 	bne.w	8000d9a <__udivmoddi4+0x21a>
 8000c76:	eba1 010c 	sub.w	r1, r1, ip
 8000c7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7e:	fa1f fe8c 	uxth.w	lr, ip
 8000c82:	2601      	movs	r6, #1
 8000c84:	0c20      	lsrs	r0, r4, #16
 8000c86:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c8a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c8e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c92:	fb0e f003 	mul.w	r0, lr, r3
 8000c96:	4288      	cmp	r0, r1
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x12c>
 8000c9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c9e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x12a>
 8000ca4:	4288      	cmp	r0, r1
 8000ca6:	f200 80cb 	bhi.w	8000e40 <__udivmoddi4+0x2c0>
 8000caa:	4643      	mov	r3, r8
 8000cac:	1a09      	subs	r1, r1, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x156>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d202      	bcs.n	8000cd4 <__udivmoddi4+0x154>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f200 80bb 	bhi.w	8000e4a <__udivmoddi4+0x2ca>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	eba4 040e 	sub.w	r4, r4, lr
 8000cda:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cde:	e79c      	b.n	8000c1a <__udivmoddi4+0x9a>
 8000ce0:	f1c6 0720 	rsb	r7, r6, #32
 8000ce4:	40b3      	lsls	r3, r6
 8000ce6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cee:	fa20 f407 	lsr.w	r4, r0, r7
 8000cf2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf6:	431c      	orrs	r4, r3
 8000cf8:	40f9      	lsrs	r1, r7
 8000cfa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cfe:	fa00 f306 	lsl.w	r3, r0, r6
 8000d02:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d06:	0c20      	lsrs	r0, r4, #16
 8000d08:	fa1f fe8c 	uxth.w	lr, ip
 8000d0c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d14:	fb08 f00e 	mul.w	r0, r8, lr
 8000d18:	4288      	cmp	r0, r1
 8000d1a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b8>
 8000d20:	eb1c 0101 	adds.w	r1, ip, r1
 8000d24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d28:	f080 8088 	bcs.w	8000e3c <__udivmoddi4+0x2bc>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f240 8085 	bls.w	8000e3c <__udivmoddi4+0x2bc>
 8000d32:	f1a8 0802 	sub.w	r8, r8, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	1a09      	subs	r1, r1, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d40:	fb09 1110 	mls	r1, r9, r0, r1
 8000d44:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	458e      	cmp	lr, r1
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1e2>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d58:	d26c      	bcs.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5a:	458e      	cmp	lr, r1
 8000d5c:	d96a      	bls.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4461      	add	r1, ip
 8000d62:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d66:	fba0 9402 	umull	r9, r4, r0, r2
 8000d6a:	eba1 010e 	sub.w	r1, r1, lr
 8000d6e:	42a1      	cmp	r1, r4
 8000d70:	46c8      	mov	r8, r9
 8000d72:	46a6      	mov	lr, r4
 8000d74:	d356      	bcc.n	8000e24 <__udivmoddi4+0x2a4>
 8000d76:	d053      	beq.n	8000e20 <__udivmoddi4+0x2a0>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x212>
 8000d7a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d7e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d82:	fa01 f707 	lsl.w	r7, r1, r7
 8000d86:	fa22 f306 	lsr.w	r3, r2, r6
 8000d8a:	40f1      	lsrs	r1, r6
 8000d8c:	431f      	orrs	r7, r3
 8000d8e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d92:	2600      	movs	r6, #0
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	f1c2 0320 	rsb	r3, r2, #32
 8000d9e:	40d8      	lsrs	r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa21 f303 	lsr.w	r3, r1, r3
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4301      	orrs	r1, r0
 8000dac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000db8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dbc:	0c0b      	lsrs	r3, r1, #16
 8000dbe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dc2:	fb00 f60e 	mul.w	r6, r0, lr
 8000dc6:	429e      	cmp	r6, r3
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x260>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dd6:	d22f      	bcs.n	8000e38 <__udivmoddi4+0x2b8>
 8000dd8:	429e      	cmp	r6, r3
 8000dda:	d92d      	bls.n	8000e38 <__udivmoddi4+0x2b8>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1b9b      	subs	r3, r3, r6
 8000de2:	b289      	uxth	r1, r1
 8000de4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000de8:	fb07 3316 	mls	r3, r7, r6, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb06 f30e 	mul.w	r3, r6, lr
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x28a>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e00:	d216      	bcs.n	8000e30 <__udivmoddi4+0x2b0>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d914      	bls.n	8000e30 <__udivmoddi4+0x2b0>
 8000e06:	3e02      	subs	r6, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	1ac9      	subs	r1, r1, r3
 8000e0c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e10:	e738      	b.n	8000c84 <__udivmoddi4+0x104>
 8000e12:	462e      	mov	r6, r5
 8000e14:	4628      	mov	r0, r5
 8000e16:	e705      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	e6e3      	b.n	8000be4 <__udivmoddi4+0x64>
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	e6f8      	b.n	8000c12 <__udivmoddi4+0x92>
 8000e20:	454b      	cmp	r3, r9
 8000e22:	d2a9      	bcs.n	8000d78 <__udivmoddi4+0x1f8>
 8000e24:	ebb9 0802 	subs.w	r8, r9, r2
 8000e28:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e2c:	3801      	subs	r0, #1
 8000e2e:	e7a3      	b.n	8000d78 <__udivmoddi4+0x1f8>
 8000e30:	4646      	mov	r6, r8
 8000e32:	e7ea      	b.n	8000e0a <__udivmoddi4+0x28a>
 8000e34:	4620      	mov	r0, r4
 8000e36:	e794      	b.n	8000d62 <__udivmoddi4+0x1e2>
 8000e38:	4640      	mov	r0, r8
 8000e3a:	e7d1      	b.n	8000de0 <__udivmoddi4+0x260>
 8000e3c:	46d0      	mov	r8, sl
 8000e3e:	e77b      	b.n	8000d38 <__udivmoddi4+0x1b8>
 8000e40:	3b02      	subs	r3, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	e732      	b.n	8000cac <__udivmoddi4+0x12c>
 8000e46:	4630      	mov	r0, r6
 8000e48:	e709      	b.n	8000c5e <__udivmoddi4+0xde>
 8000e4a:	4464      	add	r4, ip
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	e742      	b.n	8000cd6 <__udivmoddi4+0x156>

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <InitKalmanStruct>:
extern arm_matrix_instance_f32 mat_P, mat_P_minus, mat_Q;
extern arm_matrix_instance_f32 mat_C, mat_R, mat_S, mat_K;
extern arm_matrix_instance_f32 mat_temp3x3A,mat_temp3x3B, mat_temp3x1,mat_temp1x3, mat_temp1x1;

void InitKalmanStruct(Kalman* KF,float32_t q,float32_t r)
{
 8000e54:	b5b0      	push	{r4, r5, r7, lr}
 8000e56:	b0a0      	sub	sp, #128	; 0x80
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000e60:	edc7 0a01 	vstr	s1, [r7, #4]
	KF->R = r;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	655a      	str	r2, [r3, #84]	; 0x54
	KF->var_Q = q;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	68ba      	ldr	r2, [r7, #8]
 8000e6e:	659a      	str	r2, [r3, #88]	; 0x58
	KF->D = 0;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f04f 0200 	mov.w	r2, #0
 8000e76:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	float32_t a[9] = {
 8000e7a:	4b8d      	ldr	r3, [pc, #564]	; (80010b0 <InitKalmanStruct+0x25c>)
 8000e7c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000e80:	461d      	mov	r5, r3
 8000e82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e8a:	682b      	ldr	r3, [r5, #0]
 8000e8c:	6023      	str	r3, [r4, #0]
			1.0, 0.001/2.5, 0.0000005/(2.5*2.5),
			0  , 1.0      , 0.001/2.5,
			0  , 0        , 1.0
	};
	float iden[9] = {
 8000e8e:	4b89      	ldr	r3, [pc, #548]	; (80010b4 <InitKalmanStruct+0x260>)
 8000e90:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000e94:	461d      	mov	r5, r3
 8000e96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e9e:	682b      	ldr	r3, [r5, #0]
 8000ea0:	6023      	str	r3, [r4, #0]
			1.0, 0  , 0,
			0  , 1.0, 0,
			0  , 0  , 1.0
	};
	int i;
	for(i=0;i<9;i++)
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000ea6:	e023      	b.n	8000ef0 <InitKalmanStruct+0x9c>
	{
		KF->A[i] = a[i];
 8000ea8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	3380      	adds	r3, #128	; 0x80
 8000eae:	443b      	add	r3, r7
 8000eb0:	3b28      	subs	r3, #40	; 0x28
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	68f9      	ldr	r1, [r7, #12]
 8000eb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000eb8:	3318      	adds	r3, #24
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	601a      	str	r2, [r3, #0]
		KF->I[i] = iden[i];
 8000ec0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	3380      	adds	r3, #128	; 0x80
 8000ec6:	443b      	add	r3, r7
 8000ec8:	3b4c      	subs	r3, #76	; 0x4c
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	68f9      	ldr	r1, [r7, #12]
 8000ece:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ed0:	332e      	adds	r3, #46	; 0x2e
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	601a      	str	r2, [r3, #0]
		KF->P[i] = 0;
 8000ed8:	68fa      	ldr	r2, [r7, #12]
 8000eda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000edc:	3302      	adds	r3, #2
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	4413      	add	r3, r2
 8000ee2:	3304      	adds	r3, #4
 8000ee4:	f04f 0200 	mov.w	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
	for(i=0;i<9;i++)
 8000eea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000eec:	3301      	adds	r3, #1
 8000eee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000ef0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ef2:	2b08      	cmp	r3, #8
 8000ef4:	ddd8      	ble.n	8000ea8 <InitKalmanStruct+0x54>
	}
	float32_t b[3] = {
 8000ef6:	f04f 0300 	mov.w	r3, #0
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
 8000efc:	f04f 0300 	mov.w	r3, #0
 8000f00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f02:	f04f 0300 	mov.w	r3, #0
 8000f06:	633b      	str	r3, [r7, #48]	; 0x30
			0, 0, 0
	};
	float32_t c[3] = {
 8000f08:	f04f 0300 	mov.w	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
 8000f0e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000f12:	623b      	str	r3, [r7, #32]
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
			0, 1, 0
	};
	float32_t g[3] = {
 8000f1a:	4a67      	ldr	r2, [pc, #412]	; (80010b8 <InitKalmanStruct+0x264>)
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0.001 * 0.001 * 0.001 / (6*2.5*2.5*2.5),
			0.0000005/(2.5*2.5),
			0.001/2.0
	};

	for(i=0;i<3;i++)
 8000f26:	2300      	movs	r3, #0
 8000f28:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000f2a:	e02e      	b.n	8000f8a <InitKalmanStruct+0x136>
	{
		KF->B[i] = b[i];
 8000f2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	3380      	adds	r3, #128	; 0x80
 8000f32:	443b      	add	r3, r7
 8000f34:	3b58      	subs	r3, #88	; 0x58
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	68f9      	ldr	r1, [r7, #12]
 8000f3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f3c:	3320      	adds	r3, #32
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	440b      	add	r3, r1
 8000f42:	3304      	adds	r3, #4
 8000f44:	601a      	str	r2, [r3, #0]
		KF->C[i] = c[i];
 8000f46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	3380      	adds	r3, #128	; 0x80
 8000f4c:	443b      	add	r3, r7
 8000f4e:	3b64      	subs	r3, #100	; 0x64
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	68f9      	ldr	r1, [r7, #12]
 8000f54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f56:	3324      	adds	r3, #36	; 0x24
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	440b      	add	r3, r1
 8000f5c:	601a      	str	r2, [r3, #0]
		KF->G[i] = g[i];
 8000f5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	3380      	adds	r3, #128	; 0x80
 8000f64:	443b      	add	r3, r7
 8000f66:	3b70      	subs	r3, #112	; 0x70
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	68f9      	ldr	r1, [r7, #12]
 8000f6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f6e:	3328      	adds	r3, #40	; 0x28
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	440b      	add	r3, r1
 8000f74:	601a      	str	r2, [r3, #0]
		KF->x_hat[i] = 0;
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	f04f 0200 	mov.w	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
	for(i=0;i<3;i++)
 8000f84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f86:	3301      	adds	r3, #1
 8000f88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000f8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	ddcd      	ble.n	8000f2c <InitKalmanStruct+0xd8>
	}

	  arm_mat_init_f32(&mat_A, 3, 3,KF->A);//3x3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	3360      	adds	r3, #96	; 0x60
 8000f94:	2203      	movs	r2, #3
 8000f96:	2103      	movs	r1, #3
 8000f98:	4848      	ldr	r0, [pc, #288]	; (80010bc <InitKalmanStruct+0x268>)
 8000f9a:	f002 f918 	bl	80031ce <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_x_hat, 3, 1, KF->x_hat);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2103      	movs	r1, #3
 8000fa4:	4846      	ldr	r0, [pc, #280]	; (80010c0 <InitKalmanStruct+0x26c>)
 8000fa6:	f002 f912 	bl	80031ce <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_x_hat_minus, 3, 1, KF->x_hat_minus);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	33dc      	adds	r3, #220	; 0xdc
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2103      	movs	r1, #3
 8000fb2:	4844      	ldr	r0, [pc, #272]	; (80010c4 <InitKalmanStruct+0x270>)
 8000fb4:	f002 f90b 	bl	80031ce <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_B, 3, 1, KF->B);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	3384      	adds	r3, #132	; 0x84
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	2103      	movs	r1, #3
 8000fc0:	4841      	ldr	r0, [pc, #260]	; (80010c8 <InitKalmanStruct+0x274>)
 8000fc2:	f002 f904 	bl	80031ce <arm_mat_init_f32>
	  //arm_mat_init_f32(&mat_u, 1, 1, NULL);  // Set the input control vector if needed
	  arm_mat_init_f32(&mat_P, 3, 3, KF->P);//3x3
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	330c      	adds	r3, #12
 8000fca:	2203      	movs	r2, #3
 8000fcc:	2103      	movs	r1, #3
 8000fce:	483f      	ldr	r0, [pc, #252]	; (80010cc <InitKalmanStruct+0x278>)
 8000fd0:	f002 f8fd 	bl	80031ce <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_P_minus, 3, 3, KF->P_minus);//3x3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	33e8      	adds	r3, #232	; 0xe8
 8000fd8:	2203      	movs	r2, #3
 8000fda:	2103      	movs	r1, #3
 8000fdc:	483c      	ldr	r0, [pc, #240]	; (80010d0 <InitKalmanStruct+0x27c>)
 8000fde:	f002 f8f6 	bl	80031ce <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_Q, 3, 3,KF->Q);//3x3
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	3330      	adds	r3, #48	; 0x30
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	2103      	movs	r1, #3
 8000fea:	483a      	ldr	r0, [pc, #232]	; (80010d4 <InitKalmanStruct+0x280>)
 8000fec:	f002 f8ef 	bl	80031ce <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_C, 1, 3, KF->C);//1x3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	3390      	adds	r3, #144	; 0x90
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	4837      	ldr	r0, [pc, #220]	; (80010d8 <InitKalmanStruct+0x284>)
 8000ffa:	f002 f8e8 	bl	80031ce <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_R, 1, 1, &KF->R);//1x1
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	3354      	adds	r3, #84	; 0x54
 8001002:	2201      	movs	r2, #1
 8001004:	2101      	movs	r1, #1
 8001006:	4835      	ldr	r0, [pc, #212]	; (80010dc <InitKalmanStruct+0x288>)
 8001008:	f002 f8e1 	bl	80031ce <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_S, 1, 1, KF->S);//1x1
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001012:	2201      	movs	r2, #1
 8001014:	2101      	movs	r1, #1
 8001016:	4832      	ldr	r0, [pc, #200]	; (80010e0 <InitKalmanStruct+0x28c>)
 8001018:	f002 f8d9 	bl	80031ce <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_K, 3, 1, KF->K);//3x1
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001022:	2201      	movs	r2, #1
 8001024:	2103      	movs	r1, #3
 8001026:	482f      	ldr	r0, [pc, #188]	; (80010e4 <InitKalmanStruct+0x290>)
 8001028:	f002 f8d1 	bl	80031ce <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp3x3A, 3, 3, KF->temp3x3A);//3x3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8001032:	2203      	movs	r2, #3
 8001034:	2103      	movs	r1, #3
 8001036:	482c      	ldr	r0, [pc, #176]	; (80010e8 <InitKalmanStruct+0x294>)
 8001038:	f002 f8c9 	bl	80031ce <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp3x3B, 3, 3, KF->temp3x3B);//3x3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001042:	2203      	movs	r2, #3
 8001044:	2103      	movs	r1, #3
 8001046:	4829      	ldr	r0, [pc, #164]	; (80010ec <InitKalmanStruct+0x298>)
 8001048:	f002 f8c1 	bl	80031ce <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp3x1, 3, 1, KF->temp3x1);//3x1
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8001052:	2201      	movs	r2, #1
 8001054:	2103      	movs	r1, #3
 8001056:	4826      	ldr	r0, [pc, #152]	; (80010f0 <InitKalmanStruct+0x29c>)
 8001058:	f002 f8b9 	bl	80031ce <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp1x3, 1, 3, KF->temp1x3);//1x3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8001062:	2203      	movs	r2, #3
 8001064:	2101      	movs	r1, #1
 8001066:	4823      	ldr	r0, [pc, #140]	; (80010f4 <InitKalmanStruct+0x2a0>)
 8001068:	f002 f8b1 	bl	80031ce <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp1x1, 1, 1, &KF->temp1x1);//1x1
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001072:	2201      	movs	r2, #1
 8001074:	2101      	movs	r1, #1
 8001076:	4820      	ldr	r0, [pc, #128]	; (80010f8 <InitKalmanStruct+0x2a4>)
 8001078:	f002 f8a9 	bl	80031ce <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_G, 3, 1, KF->G);//3x1
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	33a0      	adds	r3, #160	; 0xa0
 8001080:	2201      	movs	r2, #1
 8001082:	2103      	movs	r1, #3
 8001084:	481d      	ldr	r0, [pc, #116]	; (80010fc <InitKalmanStruct+0x2a8>)
 8001086:	f002 f8a2 	bl	80031ce <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_GT, 1, 3, KF->GT);//1x3
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	33ac      	adds	r3, #172	; 0xac
 800108e:	2203      	movs	r2, #3
 8001090:	2101      	movs	r1, #1
 8001092:	481b      	ldr	r0, [pc, #108]	; (8001100 <InitKalmanStruct+0x2ac>)
 8001094:	f002 f89b 	bl	80031ce <arm_mat_init_f32>
	  arm_mat_init_f32(&eye, 3, 3, KF->I);//1x3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	33b8      	adds	r3, #184	; 0xb8
 800109c:	2203      	movs	r2, #3
 800109e:	2103      	movs	r1, #3
 80010a0:	4818      	ldr	r0, [pc, #96]	; (8001104 <InitKalmanStruct+0x2b0>)
 80010a2:	f002 f894 	bl	80031ce <arm_mat_init_f32>

}
 80010a6:	bf00      	nop
 80010a8:	3780      	adds	r7, #128	; 0x80
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bdb0      	pop	{r4, r5, r7, pc}
 80010ae:	bf00      	nop
 80010b0:	08007ba0 	.word	0x08007ba0
 80010b4:	08007bc4 	.word	0x08007bc4
 80010b8:	08007be8 	.word	0x08007be8
 80010bc:	20000324 	.word	0x20000324
 80010c0:	2000032c 	.word	0x2000032c
 80010c4:	20000334 	.word	0x20000334
 80010c8:	2000033c 	.word	0x2000033c
 80010cc:	2000034c 	.word	0x2000034c
 80010d0:	20000354 	.word	0x20000354
 80010d4:	2000035c 	.word	0x2000035c
 80010d8:	20000374 	.word	0x20000374
 80010dc:	2000037c 	.word	0x2000037c
 80010e0:	20000384 	.word	0x20000384
 80010e4:	2000038c 	.word	0x2000038c
 80010e8:	20000394 	.word	0x20000394
 80010ec:	2000039c 	.word	0x2000039c
 80010f0:	200003a4 	.word	0x200003a4
 80010f4:	200003ac 	.word	0x200003ac
 80010f8:	200003b4 	.word	0x200003b4
 80010fc:	2000036c 	.word	0x2000036c
 8001100:	20000364 	.word	0x20000364
 8001104:	20000344 	.word	0x20000344

08001108 <kalman_filter>:

void kalman_filter()
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
    //Process model: x_hat_minus = mat_A*x_hat
    arm_mat_mult_f32(&mat_A, &mat_x_hat, &mat_x_hat_minus);			//A*X
 800110c:	4a39      	ldr	r2, [pc, #228]	; (80011f4 <kalman_filter+0xec>)
 800110e:	493a      	ldr	r1, [pc, #232]	; (80011f8 <kalman_filter+0xf0>)
 8001110:	483a      	ldr	r0, [pc, #232]	; (80011fc <kalman_filter+0xf4>)
 8001112:	f002 fbeb 	bl	80038ec <arm_mat_mult_f32>
    // If an input control vector is used:
    // arm_mat_mult_f32(&mat_B, &mat_u, &mat_temp3x3A);
    // arm_mat_add_f32(&mat_x_hat_minus, &mat_temp3x3A, &mat_x_hat_minus);

    // Predict covariance matrix: P_minus = A * P * A^T + Q
    arm_mat_trans_f32(&mat_A, &mat_temp3x3A);					    //AT
 8001116:	493a      	ldr	r1, [pc, #232]	; (8001200 <kalman_filter+0xf8>)
 8001118:	4838      	ldr	r0, [pc, #224]	; (80011fc <kalman_filter+0xf4>)
 800111a:	f002 fcd2 	bl	8003ac2 <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_A, &mat_P, &mat_temp3x3B);			    //A*P
 800111e:	4a39      	ldr	r2, [pc, #228]	; (8001204 <kalman_filter+0xfc>)
 8001120:	4939      	ldr	r1, [pc, #228]	; (8001208 <kalman_filter+0x100>)
 8001122:	4836      	ldr	r0, [pc, #216]	; (80011fc <kalman_filter+0xf4>)
 8001124:	f002 fbe2 	bl	80038ec <arm_mat_mult_f32>
    arm_mat_mult_f32(&mat_temp3x3B, &mat_temp3x3A, &mat_P_minus);	//A*P*AT
 8001128:	4a38      	ldr	r2, [pc, #224]	; (800120c <kalman_filter+0x104>)
 800112a:	4935      	ldr	r1, [pc, #212]	; (8001200 <kalman_filter+0xf8>)
 800112c:	4835      	ldr	r0, [pc, #212]	; (8001204 <kalman_filter+0xfc>)
 800112e:	f002 fbdd 	bl	80038ec <arm_mat_mult_f32>
    arm_mat_trans_f32(&mat_G, &mat_GT);								//GT
 8001132:	4937      	ldr	r1, [pc, #220]	; (8001210 <kalman_filter+0x108>)
 8001134:	4837      	ldr	r0, [pc, #220]	; (8001214 <kalman_filter+0x10c>)
 8001136:	f002 fcc4 	bl	8003ac2 <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_G, &mat_GT, &mat_Q);						//G*GT
 800113a:	4a37      	ldr	r2, [pc, #220]	; (8001218 <kalman_filter+0x110>)
 800113c:	4934      	ldr	r1, [pc, #208]	; (8001210 <kalman_filter+0x108>)
 800113e:	4835      	ldr	r0, [pc, #212]	; (8001214 <kalman_filter+0x10c>)
 8001140:	f002 fbd4 	bl	80038ec <arm_mat_mult_f32>
    arm_mat_scale_f32(&mat_Q,KF.var_Q, &mat_Q);						//G*GT*var_q
 8001144:	4b35      	ldr	r3, [pc, #212]	; (800121c <kalman_filter+0x114>)
 8001146:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800114a:	4933      	ldr	r1, [pc, #204]	; (8001218 <kalman_filter+0x110>)
 800114c:	eeb0 0a67 	vmov.f32	s0, s15
 8001150:	4831      	ldr	r0, [pc, #196]	; (8001218 <kalman_filter+0x110>)
 8001152:	f002 fc45 	bl	80039e0 <arm_mat_scale_f32>
    arm_mat_add_f32(&mat_P_minus, &mat_Q, &mat_P_minus);			//A * P * A^T + Q
 8001156:	4a2d      	ldr	r2, [pc, #180]	; (800120c <kalman_filter+0x104>)
 8001158:	492f      	ldr	r1, [pc, #188]	; (8001218 <kalman_filter+0x110>)
 800115a:	482c      	ldr	r0, [pc, #176]	; (800120c <kalman_filter+0x104>)
 800115c:	f001 fffc 	bl	8003158 <arm_mat_add_f32>

    // Calculate innovation covariance: S = C * P_minus * C^T + R
    arm_mat_mult_f32(&mat_C, &mat_P_minus, &mat_temp1x3);			//C*P
 8001160:	4a2f      	ldr	r2, [pc, #188]	; (8001220 <kalman_filter+0x118>)
 8001162:	492a      	ldr	r1, [pc, #168]	; (800120c <kalman_filter+0x104>)
 8001164:	482f      	ldr	r0, [pc, #188]	; (8001224 <kalman_filter+0x11c>)
 8001166:	f002 fbc1 	bl	80038ec <arm_mat_mult_f32>
    arm_mat_trans_f32(&mat_C, &mat_temp3x1);						//CT
 800116a:	492f      	ldr	r1, [pc, #188]	; (8001228 <kalman_filter+0x120>)
 800116c:	482d      	ldr	r0, [pc, #180]	; (8001224 <kalman_filter+0x11c>)
 800116e:	f002 fca8 	bl	8003ac2 <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_temp1x3, &mat_temp3x1, &mat_temp1x1);		//C*P*C^T
 8001172:	4a2e      	ldr	r2, [pc, #184]	; (800122c <kalman_filter+0x124>)
 8001174:	492c      	ldr	r1, [pc, #176]	; (8001228 <kalman_filter+0x120>)
 8001176:	482a      	ldr	r0, [pc, #168]	; (8001220 <kalman_filter+0x118>)
 8001178:	f002 fbb8 	bl	80038ec <arm_mat_mult_f32>
    arm_mat_add_f32(&mat_temp1x1, &mat_R, &mat_S);					//C*P*C^T + R
 800117c:	4a2c      	ldr	r2, [pc, #176]	; (8001230 <kalman_filter+0x128>)
 800117e:	492d      	ldr	r1, [pc, #180]	; (8001234 <kalman_filter+0x12c>)
 8001180:	482a      	ldr	r0, [pc, #168]	; (800122c <kalman_filter+0x124>)
 8001182:	f001 ffe9 	bl	8003158 <arm_mat_add_f32>

    //==> Calculate Kalman gain: K = P_minus * C^T * S^(-1)
    arm_mat_inverse_f32(&mat_S, &mat_temp1x1);						//inv(S)
 8001186:	4929      	ldr	r1, [pc, #164]	; (800122c <kalman_filter+0x124>)
 8001188:	4829      	ldr	r0, [pc, #164]	; (8001230 <kalman_filter+0x128>)
 800118a:	f002 f838 	bl	80031fe <arm_mat_inverse_f32>
    arm_mat_mult_f32(&mat_P_minus, &mat_temp3x1, &mat_temp3x3A);	//P*CT
 800118e:	4a1c      	ldr	r2, [pc, #112]	; (8001200 <kalman_filter+0xf8>)
 8001190:	4925      	ldr	r1, [pc, #148]	; (8001228 <kalman_filter+0x120>)
 8001192:	481e      	ldr	r0, [pc, #120]	; (800120c <kalman_filter+0x104>)
 8001194:	f002 fbaa 	bl	80038ec <arm_mat_mult_f32>
    arm_mat_mult_f32(&mat_temp3x3A, &mat_temp1x1, &mat_K);			//P*CT*inv(S)
 8001198:	4a27      	ldr	r2, [pc, #156]	; (8001238 <kalman_filter+0x130>)
 800119a:	4924      	ldr	r1, [pc, #144]	; (800122c <kalman_filter+0x124>)
 800119c:	4818      	ldr	r0, [pc, #96]	; (8001200 <kalman_filter+0xf8>)
 800119e:	f002 fba5 	bl	80038ec <arm_mat_mult_f32>

    //==> Update state estimate: x_hat = x_hat_minus + K * (z - C * x_hat_minus)
    arm_mat_mult_f32(&mat_C, &mat_x_hat_minus, &mat_temp1x1);		//C*X
 80011a2:	4a22      	ldr	r2, [pc, #136]	; (800122c <kalman_filter+0x124>)
 80011a4:	4913      	ldr	r1, [pc, #76]	; (80011f4 <kalman_filter+0xec>)
 80011a6:	481f      	ldr	r0, [pc, #124]	; (8001224 <kalman_filter+0x11c>)
 80011a8:	f002 fba0 	bl	80038ec <arm_mat_mult_f32>
    //float32_t innovation = z - temp1x1;								//Z-C*X
    arm_mat_scale_f32(&mat_K, KF.z - KF.temp1x1, &mat_temp3x1);			//K*(Z-C*X)
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <kalman_filter+0x114>)
 80011ae:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80011b2:	4b1a      	ldr	r3, [pc, #104]	; (800121c <kalman_filter+0x114>)
 80011b4:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
 80011b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011bc:	491a      	ldr	r1, [pc, #104]	; (8001228 <kalman_filter+0x120>)
 80011be:	eeb0 0a67 	vmov.f32	s0, s15
 80011c2:	481d      	ldr	r0, [pc, #116]	; (8001238 <kalman_filter+0x130>)
 80011c4:	f002 fc0c 	bl	80039e0 <arm_mat_scale_f32>
    arm_mat_add_f32(&mat_x_hat_minus, &mat_temp3x1, &mat_x_hat);	//X - K*(Z-C*X) ========> X estimate
 80011c8:	4a0b      	ldr	r2, [pc, #44]	; (80011f8 <kalman_filter+0xf0>)
 80011ca:	4917      	ldr	r1, [pc, #92]	; (8001228 <kalman_filter+0x120>)
 80011cc:	4809      	ldr	r0, [pc, #36]	; (80011f4 <kalman_filter+0xec>)
 80011ce:	f001 ffc3 	bl	8003158 <arm_mat_add_f32>

    // Update covariance matrix: P = (I - K * C) * P_minus
    arm_mat_mult_f32(&mat_K, &mat_C, &mat_temp3x3B);				//K*C
 80011d2:	4a0c      	ldr	r2, [pc, #48]	; (8001204 <kalman_filter+0xfc>)
 80011d4:	4913      	ldr	r1, [pc, #76]	; (8001224 <kalman_filter+0x11c>)
 80011d6:	4818      	ldr	r0, [pc, #96]	; (8001238 <kalman_filter+0x130>)
 80011d8:	f002 fb88 	bl	80038ec <arm_mat_mult_f32>
    arm_mat_sub_f32(&eye, &mat_P_minus, &mat_temp3x3A);				//I - K*C
 80011dc:	4a08      	ldr	r2, [pc, #32]	; (8001200 <kalman_filter+0xf8>)
 80011de:	490b      	ldr	r1, [pc, #44]	; (800120c <kalman_filter+0x104>)
 80011e0:	4816      	ldr	r0, [pc, #88]	; (800123c <kalman_filter+0x134>)
 80011e2:	f002 fc33 	bl	8003a4c <arm_mat_sub_f32>
    arm_mat_mult_f32(&mat_temp3x3A, &mat_P_minus, &mat_P);			//(I - K*C)*P ===========> P estimate
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <kalman_filter+0x100>)
 80011e8:	4908      	ldr	r1, [pc, #32]	; (800120c <kalman_filter+0x104>)
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <kalman_filter+0xf8>)
 80011ec:	f002 fb7e 	bl	80038ec <arm_mat_mult_f32>
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000334 	.word	0x20000334
 80011f8:	2000032c 	.word	0x2000032c
 80011fc:	20000324 	.word	0x20000324
 8001200:	20000394 	.word	0x20000394
 8001204:	2000039c 	.word	0x2000039c
 8001208:	2000034c 	.word	0x2000034c
 800120c:	20000354 	.word	0x20000354
 8001210:	20000364 	.word	0x20000364
 8001214:	2000036c 	.word	0x2000036c
 8001218:	2000035c 	.word	0x2000035c
 800121c:	200001a4 	.word	0x200001a4
 8001220:	200003ac 	.word	0x200003ac
 8001224:	20000374 	.word	0x20000374
 8001228:	200003a4 	.word	0x200003a4
 800122c:	200003b4 	.word	0x200003b4
 8001230:	20000384 	.word	0x20000384
 8001234:	2000037c 	.word	0x2000037c
 8001238:	2000038c 	.word	0x2000038c
 800123c:	20000344 	.word	0x20000344

08001240 <PIDSetup>:
 */

#include "PIDController.h"

void PIDSetup(PID* temp,float32_t Kp, float32_t Ki, float32_t Kd)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	ed87 0a02 	vstr	s0, [r7, #8]
 800124c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001250:	ed87 1a00 	vstr	s2, [r7]
	temp->Kp = Kp;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	601a      	str	r2, [r3, #0]
	temp->Ki = Ki;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	605a      	str	r2, [r3, #4]
	temp->Kd = Kd;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	609a      	str	r2, [r3, #8]
	temp->U = 0;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2200      	movs	r2, #0
 800126a:	60da      	str	r2, [r3, #12]
	temp->Delta_U = 0;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
	temp->U_minus = 0;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2200      	movs	r2, #0
 8001276:	615a      	str	r2, [r3, #20]
	temp->Error = 0;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
	temp->Error_minus = 0;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	61da      	str	r2, [r3, #28]
	temp->Error_minus2 = 0;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f04f 0200 	mov.w	r2, #0
 800128e:	621a      	str	r2, [r3, #32]
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <PIDRun>:

void PIDRun(PID* temp, float32_t Feedback, float32_t Ref)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80012a8:	edc7 0a01 	vstr	s1, [r7, #4]
	temp->Error = Ref - Feedback;
 80012ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80012b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80012b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	edc3 7a06 	vstr	s15, [r3, #24]
	if(temp->Error > 0)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	edd3 7a06 	vldr	s15, [r3, #24]
 80012c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012cc:	dd04      	ble.n	80012d8 <PIDRun+0x3c>
	{
		temp->MotorDir = 0;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80012d6:	e00b      	b.n	80012f0 <PIDRun+0x54>
	}
	else if (temp->Error < 0)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	edd3 7a06 	vldr	s15, [r3, #24]
 80012de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e6:	d503      	bpl.n	80012f0 <PIDRun+0x54>
	{
		temp->MotorDir = 1;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
	//U Update
	temp->Delta_U = (temp->Kp + temp->Ki + temp->Kd)*temp->Error
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	ed93 7a00 	vldr	s14, [r3]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80012fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	edd3 7a02 	vldr	s15, [r3, #8]
 8001306:	ee37 7a27 	vadd.f32	s14, s14, s15
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001310:	ee27 7a27 	vmul.f32	s14, s14, s15
			  -(temp->Kp + 2*temp->Kd)*temp->Error_minus
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	edd3 6a00 	vldr	s13, [r3]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001320:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001324:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	edd3 7a07 	vldr	s15, [r3, #28]
 800132e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001332:	ee37 7a67 	vsub.f32	s14, s14, s15
			  +temp->Kd*temp->Error_minus2;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	edd3 6a02 	vldr	s13, [r3, #8]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001342:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001346:	ee77 7a27 	vadd.f32	s15, s14, s15
	temp->Delta_U = (temp->Kp + temp->Ki + temp->Kd)*temp->Error
 800134a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800134e:	ee17 2a90 	vmov	r2, s15
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	611a      	str	r2, [r3, #16]
	temp->U = temp->Delta_U + temp->U_minus;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	691a      	ldr	r2, [r3, #16]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	441a      	add	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	60da      	str	r2, [r3, #12]
	temp->U_minus = temp->U;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	615a      	str	r2, [r3, #20]
	//Error Update
	temp->Error_minus2 = temp->Error_minus;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	69da      	ldr	r2, [r3, #28]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	621a      	str	r2, [r3, #32]
	temp->Error_minus = temp->Error;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	699a      	ldr	r2, [r3, #24]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	61da      	str	r2, [r3, #28]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <QuinticSetup>:
 *      Author: tanawatp
 */
#include "QuinticTrajectory.h"

void QuinticSetup(QuinticTraj* temp, float32_t vmax, float32_t amax)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	ed87 0a02 	vstr	s0, [r7, #8]
 8001394:	edc7 0a01 	vstr	s1, [r7, #4]
	temp->v_max = vmax;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	619a      	str	r2, [r3, #24]
	temp->a_max = amax;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	61da      	str	r2, [r3, #28]
	temp->State = Ready;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	//temp->final_pos = 300;
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <QuinticGenerator>:
void QuinticGenerator(QuinticTraj* temp)
{
 80013b8:	b5b0      	push	{r4, r5, r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	temp->final_pos = temp->final_pos * 8192/120;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80013c6:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8001638 <QuinticGenerator+0x280>
 80013ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013ce:	eddf 6a9b 	vldr	s13, [pc, #620]	; 800163c <QuinticGenerator+0x284>
 80013d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	edc3 7a01 	vstr	s15, [r3, #4]
	temp->displacement = temp->final_pos - temp->start_pos;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	ed93 7a01 	vldr	s14, [r3, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	edd3 7a00 	vldr	s15, [r3]
 80013e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	edc3 7a02 	vstr	s15, [r3, #8]
	if(temp->displacement<0)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80013f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001400:	d504      	bpl.n	800140c <QuinticGenerator+0x54>
	{
		temp->Dir = 1;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2201      	movs	r2, #1
 8001406:	f883 2020 	strb.w	r2, [r3, #32]
 800140a:	e00b      	b.n	8001424 <QuinticGenerator+0x6c>
	}
	else if (temp->displacement>0)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001412:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141a:	dd03      	ble.n	8001424 <QuinticGenerator+0x6c>
	{
		temp->Dir = 0;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 2020 	strb.w	r2, [r3, #32]
	}
	temp->timeAcc = 0.5*sqrtf(23.094*fabs(temp->displacement)/temp->a_max);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	edd3 7a02 	vldr	s15, [r3, #8]
 800142a:	eef0 7ae7 	vabs.f32	s15, s15
 800142e:	ee17 0a90 	vmov	r0, s15
 8001432:	f7ff f835 	bl	80004a0 <__aeabi_f2d>
 8001436:	a37e      	add	r3, pc, #504	; (adr r3, 8001630 <QuinticGenerator+0x278>)
 8001438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143c:	f7ff f888 	bl	8000550 <__aeabi_dmul>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4614      	mov	r4, r2
 8001446:	461d      	mov	r5, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69db      	ldr	r3, [r3, #28]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff f827 	bl	80004a0 <__aeabi_f2d>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4620      	mov	r0, r4
 8001458:	4629      	mov	r1, r5
 800145a:	f7ff f9a3 	bl	80007a4 <__aeabi_ddiv>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f7ff fb23 	bl	8000ab0 <__aeabi_d2f>
 800146a:	4603      	mov	r3, r0
 800146c:	ee00 3a10 	vmov	s0, r3
 8001470:	f005 f946 	bl	8006700 <sqrtf>
 8001474:	ee10 3a10 	vmov	r3, s0
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff f811 	bl	80004a0 <__aeabi_f2d>
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	4b6f      	ldr	r3, [pc, #444]	; (8001640 <QuinticGenerator+0x288>)
 8001484:	f7ff f864 	bl	8000550 <__aeabi_dmul>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4610      	mov	r0, r2
 800148e:	4619      	mov	r1, r3
 8001490:	f7ff fb0e 	bl	8000ab0 <__aeabi_d2f>
 8001494:	4602      	mov	r2, r0
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	645a      	str	r2, [r3, #68]	; 0x44
	temp->timeVelo = 1.875*fabs(temp->displacement)/temp->v_max;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	edd3 7a02 	vldr	s15, [r3, #8]
 80014a0:	eef0 7ae7 	vabs.f32	s15, s15
 80014a4:	ee17 0a90 	vmov	r0, s15
 80014a8:	f7fe fffa 	bl	80004a0 <__aeabi_f2d>
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	4b64      	ldr	r3, [pc, #400]	; (8001644 <QuinticGenerator+0x28c>)
 80014b2:	f7ff f84d 	bl	8000550 <__aeabi_dmul>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4614      	mov	r4, r2
 80014bc:	461d      	mov	r5, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7fe ffec 	bl	80004a0 <__aeabi_f2d>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4620      	mov	r0, r4
 80014ce:	4629      	mov	r1, r5
 80014d0:	f7ff f968 	bl	80007a4 <__aeabi_ddiv>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4610      	mov	r0, r2
 80014da:	4619      	mov	r1, r3
 80014dc:	f7ff fae8 	bl	8000ab0 <__aeabi_d2f>
 80014e0:	4602      	mov	r2, r0
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	649a      	str	r2, [r3, #72]	; 0x48
	temp->TotalTime = MAX(temp->timeAcc,temp->timeVelo);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80014f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fa:	dd02      	ble.n	8001502 <QuinticGenerator+0x14a>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001500:	e001      	b.n	8001506 <QuinticGenerator+0x14e>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	63d3      	str	r3, [r2, #60]	; 0x3c
	temp->coeff[0] = temp->start_pos;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	625a      	str	r2, [r3, #36]	; 0x24
	temp->coeff[1] = 0;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	629a      	str	r2, [r3, #40]	; 0x28
	temp->coeff[2] = 0;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	62da      	str	r2, [r3, #44]	; 0x2c
	temp->coeff[3] = 10.0*temp->displacement/powf(temp->TotalTime,3);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	4618      	mov	r0, r3
 8001528:	f7fe ffba 	bl	80004a0 <__aeabi_f2d>
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	4b45      	ldr	r3, [pc, #276]	; (8001648 <QuinticGenerator+0x290>)
 8001532:	f7ff f80d 	bl	8000550 <__aeabi_dmul>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4614      	mov	r4, r2
 800153c:	461d      	mov	r5, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001544:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001548:	eeb0 0a67 	vmov.f32	s0, s15
 800154c:	f005 f880 	bl	8006650 <powf>
 8001550:	ee10 3a10 	vmov	r3, s0
 8001554:	4618      	mov	r0, r3
 8001556:	f7fe ffa3 	bl	80004a0 <__aeabi_f2d>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4620      	mov	r0, r4
 8001560:	4629      	mov	r1, r5
 8001562:	f7ff f91f 	bl	80007a4 <__aeabi_ddiv>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f7ff fa9f 	bl	8000ab0 <__aeabi_d2f>
 8001572:	4602      	mov	r2, r0
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	631a      	str	r2, [r3, #48]	; 0x30
	temp->coeff[4] = -15.0*temp->displacement/powf(temp->TotalTime,4);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe ff8f 	bl	80004a0 <__aeabi_f2d>
 8001582:	f04f 0200 	mov.w	r2, #0
 8001586:	4b31      	ldr	r3, [pc, #196]	; (800164c <QuinticGenerator+0x294>)
 8001588:	f7fe ffe2 	bl	8000550 <__aeabi_dmul>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4614      	mov	r4, r2
 8001592:	461d      	mov	r5, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800159a:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800159e:	eeb0 0a67 	vmov.f32	s0, s15
 80015a2:	f005 f855 	bl	8006650 <powf>
 80015a6:	ee10 3a10 	vmov	r3, s0
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe ff78 	bl	80004a0 <__aeabi_f2d>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4620      	mov	r0, r4
 80015b6:	4629      	mov	r1, r5
 80015b8:	f7ff f8f4 	bl	80007a4 <__aeabi_ddiv>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4610      	mov	r0, r2
 80015c2:	4619      	mov	r1, r3
 80015c4:	f7ff fa74 	bl	8000ab0 <__aeabi_d2f>
 80015c8:	4602      	mov	r2, r0
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	635a      	str	r2, [r3, #52]	; 0x34
	temp->coeff[5] = 6.0*temp->displacement/powf(temp->TotalTime,5);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe ff64 	bl	80004a0 <__aeabi_f2d>
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <QuinticGenerator+0x298>)
 80015de:	f7fe ffb7 	bl	8000550 <__aeabi_dmul>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4614      	mov	r4, r2
 80015e8:	461d      	mov	r5, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80015f0:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80015f4:	eeb0 0a67 	vmov.f32	s0, s15
 80015f8:	f005 f82a 	bl	8006650 <powf>
 80015fc:	ee10 3a10 	vmov	r3, s0
 8001600:	4618      	mov	r0, r3
 8001602:	f7fe ff4d 	bl	80004a0 <__aeabi_f2d>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4620      	mov	r0, r4
 800160c:	4629      	mov	r1, r5
 800160e:	f7ff f8c9 	bl	80007a4 <__aeabi_ddiv>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	f7ff fa49 	bl	8000ab0 <__aeabi_d2f>
 800161e:	4602      	mov	r2, r0
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bdb0      	pop	{r4, r5, r7, pc}
 800162c:	f3af 8000 	nop.w
 8001630:	624dd2f2 	.word	0x624dd2f2
 8001634:	40371810 	.word	0x40371810
 8001638:	46000000 	.word	0x46000000
 800163c:	42f00000 	.word	0x42f00000
 8001640:	3fe00000 	.word	0x3fe00000
 8001644:	3ffe0000 	.word	0x3ffe0000
 8001648:	40240000 	.word	0x40240000
 800164c:	c02e0000 	.word	0xc02e0000
 8001650:	40180000 	.word	0x40180000

08001654 <QuinticEvaluator>:
void QuinticEvaluator(QuinticTraj* temp)
{
 8001654:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001658:	ed2d 8b02 	vpush	{d8}
 800165c:	b084      	sub	sp, #16
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
	float32_t time = temp->time;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	60fb      	str	r3, [r7, #12]
	temp->current_pos = temp->coeff[0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
						+ temp->coeff[1]*time
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001674:	edd7 7a03 	vldr	s15, [r7, #12]
 8001678:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800167c:	ee37 8a27 	vadd.f32	s16, s14, s15
						+ temp->coeff[2]*powf(time,2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	edd3 8a0b 	vldr	s17, [r3, #44]	; 0x2c
 8001686:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800168a:	ed97 0a03 	vldr	s0, [r7, #12]
 800168e:	f004 ffdf 	bl	8006650 <powf>
 8001692:	eef0 7a40 	vmov.f32	s15, s0
 8001696:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800169a:	ee38 8a27 	vadd.f32	s16, s16, s15
						+ temp->coeff[3]*powf(time,3)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	edd3 8a0c 	vldr	s17, [r3, #48]	; 0x30
 80016a4:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80016a8:	ed97 0a03 	vldr	s0, [r7, #12]
 80016ac:	f004 ffd0 	bl	8006650 <powf>
 80016b0:	eef0 7a40 	vmov.f32	s15, s0
 80016b4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80016b8:	ee38 8a27 	vadd.f32	s16, s16, s15
						+ temp->coeff[4]*powf(time,4)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	edd3 8a0d 	vldr	s17, [r3, #52]	; 0x34
 80016c2:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80016c6:	ed97 0a03 	vldr	s0, [r7, #12]
 80016ca:	f004 ffc1 	bl	8006650 <powf>
 80016ce:	eef0 7a40 	vmov.f32	s15, s0
 80016d2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80016d6:	ee38 8a27 	vadd.f32	s16, s16, s15
						+ temp->coeff[5]*powf(time,5);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	edd3 8a0e 	vldr	s17, [r3, #56]	; 0x38
 80016e0:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80016e4:	ed97 0a03 	vldr	s0, [r7, #12]
 80016e8:	f004 ffb2 	bl	8006650 <powf>
 80016ec:	eef0 7a40 	vmov.f32	s15, s0
 80016f0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80016f4:	ee78 7a27 	vadd.f32	s15, s16, s15
	temp->current_pos = temp->coeff[0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	edc3 7a03 	vstr	s15, [r3, #12]

	temp->current_velo = temp->coeff[1]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe fecc 	bl	80004a0 <__aeabi_f2d>
 8001708:	4604      	mov	r4, r0
 800170a:	460d      	mov	r5, r1
						+ 2.0*temp->coeff[2]*time
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe fec5 	bl	80004a0 <__aeabi_f2d>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	f7fe fd63 	bl	80001e4 <__adddf3>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4690      	mov	r8, r2
 8001724:	4699      	mov	r9, r3
 8001726:	68f8      	ldr	r0, [r7, #12]
 8001728:	f7fe feba 	bl	80004a0 <__aeabi_f2d>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4640      	mov	r0, r8
 8001732:	4649      	mov	r1, r9
 8001734:	f7fe ff0c 	bl	8000550 <__aeabi_dmul>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4620      	mov	r0, r4
 800173e:	4629      	mov	r1, r5
 8001740:	f7fe fd50 	bl	80001e4 <__adddf3>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4614      	mov	r4, r2
 800174a:	461d      	mov	r5, r3
						+ 3.0*temp->coeff[3]*powf(time,2)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe fea5 	bl	80004a0 <__aeabi_f2d>
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	4b90      	ldr	r3, [pc, #576]	; (800199c <QuinticEvaluator+0x348>)
 800175c:	f7fe fef8 	bl	8000550 <__aeabi_dmul>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4690      	mov	r8, r2
 8001766:	4699      	mov	r9, r3
 8001768:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800176c:	ed97 0a03 	vldr	s0, [r7, #12]
 8001770:	f004 ff6e 	bl	8006650 <powf>
 8001774:	ee10 3a10 	vmov	r3, s0
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fe91 	bl	80004a0 <__aeabi_f2d>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4640      	mov	r0, r8
 8001784:	4649      	mov	r1, r9
 8001786:	f7fe fee3 	bl	8000550 <__aeabi_dmul>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4620      	mov	r0, r4
 8001790:	4629      	mov	r1, r5
 8001792:	f7fe fd27 	bl	80001e4 <__adddf3>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4614      	mov	r4, r2
 800179c:	461d      	mov	r5, r3
						+ 4.0*temp->coeff[4]*powf(time,3)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fe7c 	bl	80004a0 <__aeabi_f2d>
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	4b7c      	ldr	r3, [pc, #496]	; (80019a0 <QuinticEvaluator+0x34c>)
 80017ae:	f7fe fecf 	bl	8000550 <__aeabi_dmul>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4690      	mov	r8, r2
 80017b8:	4699      	mov	r9, r3
 80017ba:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80017be:	ed97 0a03 	vldr	s0, [r7, #12]
 80017c2:	f004 ff45 	bl	8006650 <powf>
 80017c6:	ee10 3a10 	vmov	r3, s0
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe fe68 	bl	80004a0 <__aeabi_f2d>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4640      	mov	r0, r8
 80017d6:	4649      	mov	r1, r9
 80017d8:	f7fe feba 	bl	8000550 <__aeabi_dmul>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4620      	mov	r0, r4
 80017e2:	4629      	mov	r1, r5
 80017e4:	f7fe fcfe 	bl	80001e4 <__adddf3>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4614      	mov	r4, r2
 80017ee:	461d      	mov	r5, r3
						+ 5.0*temp->coeff[5]*powf(time,4);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7fe fe53 	bl	80004a0 <__aeabi_f2d>
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	4b69      	ldr	r3, [pc, #420]	; (80019a4 <QuinticEvaluator+0x350>)
 8001800:	f7fe fea6 	bl	8000550 <__aeabi_dmul>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4690      	mov	r8, r2
 800180a:	4699      	mov	r9, r3
 800180c:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001810:	ed97 0a03 	vldr	s0, [r7, #12]
 8001814:	f004 ff1c 	bl	8006650 <powf>
 8001818:	ee10 3a10 	vmov	r3, s0
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fe3f 	bl	80004a0 <__aeabi_f2d>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4640      	mov	r0, r8
 8001828:	4649      	mov	r1, r9
 800182a:	f7fe fe91 	bl	8000550 <__aeabi_dmul>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4620      	mov	r0, r4
 8001834:	4629      	mov	r1, r5
 8001836:	f7fe fcd5 	bl	80001e4 <__adddf3>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	f7ff f935 	bl	8000ab0 <__aeabi_d2f>
 8001846:	4602      	mov	r2, r0
	temp->current_velo = temp->coeff[1]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	611a      	str	r2, [r3, #16]

	temp->current_acc = 2.0*temp->coeff[2]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe fe25 	bl	80004a0 <__aeabi_f2d>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	f7fe fcc3 	bl	80001e4 <__adddf3>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4614      	mov	r4, r2
 8001864:	461d      	mov	r5, r3
						+ 6.0*temp->coeff[3]*time
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fe18 	bl	80004a0 <__aeabi_f2d>
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	4b4c      	ldr	r3, [pc, #304]	; (80019a8 <QuinticEvaluator+0x354>)
 8001876:	f7fe fe6b 	bl	8000550 <__aeabi_dmul>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4690      	mov	r8, r2
 8001880:	4699      	mov	r9, r3
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f7fe fe0c 	bl	80004a0 <__aeabi_f2d>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4640      	mov	r0, r8
 800188e:	4649      	mov	r1, r9
 8001890:	f7fe fe5e 	bl	8000550 <__aeabi_dmul>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4620      	mov	r0, r4
 800189a:	4629      	mov	r1, r5
 800189c:	f7fe fca2 	bl	80001e4 <__adddf3>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4614      	mov	r4, r2
 80018a6:	461d      	mov	r5, r3
						+ 12.0*temp->coeff[4]*powf(time,2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fdf7 	bl	80004a0 <__aeabi_f2d>
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	4b3d      	ldr	r3, [pc, #244]	; (80019ac <QuinticEvaluator+0x358>)
 80018b8:	f7fe fe4a 	bl	8000550 <__aeabi_dmul>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4690      	mov	r8, r2
 80018c2:	4699      	mov	r9, r3
 80018c4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80018c8:	ed97 0a03 	vldr	s0, [r7, #12]
 80018cc:	f004 fec0 	bl	8006650 <powf>
 80018d0:	ee10 3a10 	vmov	r3, s0
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fde3 	bl	80004a0 <__aeabi_f2d>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4640      	mov	r0, r8
 80018e0:	4649      	mov	r1, r9
 80018e2:	f7fe fe35 	bl	8000550 <__aeabi_dmul>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4620      	mov	r0, r4
 80018ec:	4629      	mov	r1, r5
 80018ee:	f7fe fc79 	bl	80001e4 <__adddf3>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4614      	mov	r4, r2
 80018f8:	461d      	mov	r5, r3
						+ 20.0*temp->coeff[5]*powf(time,3);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fdce 	bl	80004a0 <__aeabi_f2d>
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	4b29      	ldr	r3, [pc, #164]	; (80019b0 <QuinticEvaluator+0x35c>)
 800190a:	f7fe fe21 	bl	8000550 <__aeabi_dmul>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4690      	mov	r8, r2
 8001914:	4699      	mov	r9, r3
 8001916:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 800191a:	ed97 0a03 	vldr	s0, [r7, #12]
 800191e:	f004 fe97 	bl	8006650 <powf>
 8001922:	ee10 3a10 	vmov	r3, s0
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fdba 	bl	80004a0 <__aeabi_f2d>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4640      	mov	r0, r8
 8001932:	4649      	mov	r1, r9
 8001934:	f7fe fe0c 	bl	8000550 <__aeabi_dmul>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4620      	mov	r0, r4
 800193e:	4629      	mov	r1, r5
 8001940:	f7fe fc50 	bl	80001e4 <__adddf3>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	f7ff f8b0 	bl	8000ab0 <__aeabi_d2f>
 8001950:	4602      	mov	r2, r0
	temp->current_acc = 2.0*temp->coeff[2]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	615a      	str	r2, [r3, #20]
	if(time >= temp->TotalTime)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800195c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001960:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001968:	da00      	bge.n	800196c <QuinticEvaluator+0x318>
		temp->start_pos = temp->final_pos;
		temp->current_pos = temp->start_pos;
		temp->current_velo = 0;
		temp->current_acc = 0;
	}
}
 800196a:	e00f      	b.n	800198c <QuinticEvaluator+0x338>
		temp->start_pos = temp->final_pos;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	601a      	str	r2, [r3, #0]
		temp->current_pos = temp->start_pos;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	60da      	str	r2, [r3, #12]
		temp->current_velo = 0;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	611a      	str	r2, [r3, #16]
		temp->current_acc = 0;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	615a      	str	r2, [r3, #20]
}
 800198c:	bf00      	nop
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	ecbd 8b02 	vpop	{d8}
 8001996:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800199a:	bf00      	nop
 800199c:	40080000 	.word	0x40080000
 80019a0:	40100000 	.word	0x40100000
 80019a4:	40140000 	.word	0x40140000
 80019a8:	40180000 	.word	0x40180000
 80019ac:	40280000 	.word	0x40280000
 80019b0:	40340000 	.word	0x40340000

080019b4 <QuinticRun>:
void QuinticRun(QuinticTraj* temp,float32_t dt)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	ed87 0a00 	vstr	s0, [r7]
	switch(temp->State)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d022      	beq.n	8001a10 <QuinticRun+0x5c>
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	dc3f      	bgt.n	8001a4e <QuinticRun+0x9a>
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d002      	beq.n	80019d8 <QuinticRun+0x24>
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d010      	beq.n	80019f8 <QuinticRun+0x44>
		{
			temp->State = Ready;
		}
		break;
	}
}
 80019d6:	e03a      	b.n	8001a4e <QuinticRun+0x9a>
		if(temp->start_pos != temp->final_pos)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	ed93 7a00 	vldr	s14, [r3]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80019e4:	eeb4 7a67 	vcmp.f32	s14, s15
 80019e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ec:	d02e      	beq.n	8001a4c <QuinticRun+0x98>
			temp->State = PreCal;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 80019f6:	e029      	b.n	8001a4c <QuinticRun+0x98>
		temp->time = 0;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	641a      	str	r2, [r3, #64]	; 0x40
		QuinticGenerator(temp);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff fcd9 	bl	80013b8 <QuinticGenerator>
		temp->State = Run;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2202      	movs	r2, #2
 8001a0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8001a0e:	e01e      	b.n	8001a4e <QuinticRun+0x9a>
		temp->time = temp->time + dt;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001a16:	edd7 7a00 	vldr	s15, [r7]
 8001a1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		QuinticEvaluator(temp);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff fe15 	bl	8001654 <QuinticEvaluator>
		if(temp->time > temp->TotalTime)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001a36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3e:	dc00      	bgt.n	8001a42 <QuinticRun+0x8e>
		break;
 8001a40:	e005      	b.n	8001a4e <QuinticRun+0x9a>
			temp->State = Ready;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8001a4a:	e000      	b.n	8001a4e <QuinticRun+0x9a>
		break;
 8001a4c:	bf00      	nop
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <InitReadEncoder>:
//{ //get time in micros
//	return __HAL_TIM_GET_COUNTER(&htim5)+ ReadEncoderParam._micros;
//}

void InitReadEncoder(ReadEncoder* Read, uint32_t samplingtime)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
 8001a5e:	6039      	str	r1, [r7, #0]
	Read->MotorSetDuty = 0;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
	Read->Pulse_Compare = 0;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	805a      	strh	r2, [r3, #2]
	Read->DIR = 0;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	711a      	strb	r2, [r3, #4]
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <QEIGetFeedback>:
//	//Delay
//	QEIData.data[1] = QEIData.data[0];
//	QEIData.timestamp[1] = QEIData.timestamp[0];
//}
void QEIGetFeedback(QEI* temp, uint16_t Hz)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	807b      	strh	r3, [r7, #2]
	temp->QEIPosition = __HAL_TIM_GET_COUNTER(&htim2);
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <QEIGetFeedback+0x4c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	461a      	mov	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	605a      	str	r2, [r3, #4]
	temp->QEIVelocity = (temp->QEIPosition - temp->QEIPosition_minus) * Hz;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	887a      	ldrh	r2, [r7, #2]
 8001aa4:	fb02 f303 	mul.w	r3, r2, r3
 8001aa8:	ee07 3a90 	vmov	s15, r3
 8001aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	edc3 7a02 	vstr	s15, [r3, #8]
	temp->QEIPosition_minus = temp->QEIPosition;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	601a      	str	r2, [r3, #0]
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	200004f0 	.word	0x200004f0

08001ad0 <TraySetup>:
 */
#include "TrayLocalization.h"
#include "arm_math.h"

void TraySetup(Tray* temp, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	4608      	mov	r0, r1
 8001ada:	4611      	mov	r1, r2
 8001adc:	461a      	mov	r2, r3
 8001ade:	4603      	mov	r3, r0
 8001ae0:	817b      	strh	r3, [r7, #10]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	813b      	strh	r3, [r7, #8]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	80fb      	strh	r3, [r7, #6]
	temp->Edge1_X = x1;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	897a      	ldrh	r2, [r7, #10]
 8001aee:	801a      	strh	r2, [r3, #0]
	temp->Edge1_Y = y1;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	893a      	ldrh	r2, [r7, #8]
 8001af4:	805a      	strh	r2, [r3, #2]
	temp->Edge2_X = x2;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	88fa      	ldrh	r2, [r7, #6]
 8001afa:	809a      	strh	r2, [r3, #4]
	temp->Edge2_Y = y2;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8b3a      	ldrh	r2, [r7, #24]
 8001b00:	80da      	strh	r2, [r3, #6]
}
 8001b02:	bf00      	nop
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <TrayLocalization>:
void TrayLocalization(Tray* temp)
{
 8001b10:	b5b0      	push	{r4, r5, r7, lr}
 8001b12:	ed2d 8b02 	vpush	{d8}
 8001b16:	b08e      	sub	sp, #56	; 0x38
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
	uint16_t RefX_case1[3] = {10*8192/120,30*8192/120,50*8192/120};
 8001b1c:	4ab6      	ldr	r2, [pc, #728]	; (8001df8 <TrayLocalization+0x2e8>)
 8001b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b26:	6018      	str	r0, [r3, #0]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	8019      	strh	r1, [r3, #0]
	uint16_t RefY_case1[3] = {40*8192/120,25*8192/120,10*8192/120};
 8001b2c:	4ab3      	ldr	r2, [pc, #716]	; (8001dfc <TrayLocalization+0x2ec>)
 8001b2e:	f107 031c 	add.w	r3, r7, #28
 8001b32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b36:	6018      	str	r0, [r3, #0]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	8019      	strh	r1, [r3, #0]

	uint16_t RefX_case2[3] = {10*8192/120,25*8192/120,40*8192/120};
 8001b3c:	4ab0      	ldr	r2, [pc, #704]	; (8001e00 <TrayLocalization+0x2f0>)
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b46:	6018      	str	r0, [r3, #0]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	8019      	strh	r1, [r3, #0]
	uint16_t RefY_case2[3] = {50*8192/120,30*8192/120,10*8192/120};
 8001b4c:	4aad      	ldr	r2, [pc, #692]	; (8001e04 <TrayLocalization+0x2f4>)
 8001b4e:	f107 030c 	add.w	r3, r7, #12
 8001b52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b56:	6018      	str	r0, [r3, #0]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	8019      	strh	r1, [r3, #0]
	int16_t deltaX = temp->Edge2_X - temp->Edge1_X;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	889a      	ldrh	r2, [r3, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	867b      	strh	r3, [r7, #50]	; 0x32
	int16_t deltaY = temp->Edge2_Y - temp->Edge1_Y;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	88da      	ldrh	r2, [r3, #6]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	885b      	ldrh	r3, [r3, #2]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	863b      	strh	r3, [r7, #48]	; 0x30
	float32_t lengh = sqrt(pow(deltaX,2) + pow(deltaY,2));
 8001b78:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fc7d 	bl	800047c <__aeabi_i2d>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	ed9f 1b9a 	vldr	d1, [pc, #616]	; 8001df0 <TrayLocalization+0x2e0>
 8001b8a:	ec43 2b10 	vmov	d0, r2, r3
 8001b8e:	f004 fcc3 	bl	8006518 <pow>
 8001b92:	ec55 4b10 	vmov	r4, r5, d0
 8001b96:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fc6e 	bl	800047c <__aeabi_i2d>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	ed9f 1b92 	vldr	d1, [pc, #584]	; 8001df0 <TrayLocalization+0x2e0>
 8001ba8:	ec43 2b10 	vmov	d0, r2, r3
 8001bac:	f004 fcb4 	bl	8006518 <pow>
 8001bb0:	ec53 2b10 	vmov	r2, r3, d0
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	f7fe fb14 	bl	80001e4 <__adddf3>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	ec43 2b17 	vmov	d7, r2, r3
 8001bc4:	eeb0 0a47 	vmov.f32	s0, s14
 8001bc8:	eef0 0a67 	vmov.f32	s1, s15
 8001bcc:	f004 fd14 	bl	80065f8 <sqrt>
 8001bd0:	ec53 2b10 	vmov	r2, r3, d0
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f7fe ff6a 	bl	8000ab0 <__aeabi_d2f>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	62fb      	str	r3, [r7, #44]	; 0x2c

	if((3276 <= lengh)&&(lengh <= 3550))
 8001be0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001be4:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8001e08 <TrayLocalization+0x2f8>
 8001be8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf0:	db0d      	blt.n	8001c0e <TrayLocalization+0xfe>
 8001bf2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001bf6:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8001e0c <TrayLocalization+0x2fc>
 8001bfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c02:	d804      	bhi.n	8001c0e <TrayLocalization+0xfe>
	{
		temp->Flag = 1;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8001c0c:	e01a      	b.n	8001c44 <TrayLocalization+0x134>
	}
	else if ((3550 <= lengh)&&(lengh <= 4233))
 8001c0e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001c12:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8001e0c <TrayLocalization+0x2fc>
 8001c16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1e:	db0d      	blt.n	8001c3c <TrayLocalization+0x12c>
 8001c20:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001c24:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8001e10 <TrayLocalization+0x300>
 8001c28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c30:	d804      	bhi.n	8001c3c <TrayLocalization+0x12c>
	{
		temp->Flag = 2;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2202      	movs	r2, #2
 8001c36:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8001c3a:	e003      	b.n	8001c44 <TrayLocalization+0x134>
	}
	else
	{
		temp->Flag = 0;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}
	float32_t theta;
	arm_atan2_f32(deltaY,deltaX,&theta);
 8001c44:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001c48:	ee07 3a90 	vmov	s15, r3
 8001c4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c50:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001c54:	ee07 3a10 	vmov	s14, r3
 8001c58:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001c5c:	f107 0308 	add.w	r3, r7, #8
 8001c60:	4618      	mov	r0, r3
 8001c62:	eef0 0a47 	vmov.f32	s1, s14
 8001c66:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6a:	f000 ff47 	bl	8002afc <arm_atan2_f32>
	int8_t i;
	int8_t j;
	uint8_t ind = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	switch(temp->Flag)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f993 302d 	ldrsb.w	r3, [r3, #45]	; 0x2d
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	f000 80af 	beq.w	8001dde <TrayLocalization+0x2ce>
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	f300 8166 	bgt.w	8001f52 <TrayLocalization+0x442>
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 8162 	beq.w	8001f50 <TrayLocalization+0x440>
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	f040 8160 	bne.w	8001f52 <TrayLocalization+0x442>
	{
	case 1:
		for(i=0;i<3;i++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001c98:	e09b      	b.n	8001dd2 <TrayLocalization+0x2c2>
		{
			for(j=0;j<3;j++)
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001ca0:	e08b      	b.n	8001dba <TrayLocalization+0x2aa>
			{
				temp->Holes_X[ind] = temp->Edge1_X
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	ee07 3a90 	vmov	s15, r3
								+ arm_cos_f32(theta)*RefX_case1[i]
 8001caa:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001cae:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cb2:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb6:	f001 f947 	bl	8002f48 <arm_cos_f32>
 8001cba:	eeb0 7a40 	vmov.f32	s14, s0
 8001cbe:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	3338      	adds	r3, #56	; 0x38
 8001cc6:	443b      	add	r3, r7
 8001cc8:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001ccc:	ee07 3a90 	vmov	s15, r3
 8001cd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cd8:	ee38 8a27 	vadd.f32	s16, s16, s15
								- arm_sin_f32(theta)*RefY_case1[j];
 8001cdc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ce0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce4:	f001 f9b6 	bl	8003054 <arm_sin_f32>
 8001ce8:	eeb0 7a40 	vmov.f32	s14, s0
 8001cec:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	3338      	adds	r3, #56	; 0x38
 8001cf4:	443b      	add	r3, r7
 8001cf6:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001cfa:	ee07 3a90 	vmov	s15, r3
 8001cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d06:	ee78 7a67 	vsub.f32	s15, s16, s15
				temp->Holes_X[ind] = temp->Edge1_X
 8001d0a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8001d0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d12:	ee17 3a90 	vmov	r3, s15
 8001d16:	b299      	uxth	r1, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3204      	adds	r2, #4
 8001d1c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				temp->Holes_Y[ind] = temp->Edge1_Y
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	885b      	ldrh	r3, [r3, #2]
 8001d24:	ee07 3a90 	vmov	s15, r3
								+ arm_cos_f32(theta)*RefY_case1[j]
 8001d28:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001d2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d30:	eeb0 0a67 	vmov.f32	s0, s15
 8001d34:	f001 f908 	bl	8002f48 <arm_cos_f32>
 8001d38:	eeb0 7a40 	vmov.f32	s14, s0
 8001d3c:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	3338      	adds	r3, #56	; 0x38
 8001d44:	443b      	add	r3, r7
 8001d46:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001d4a:	ee07 3a90 	vmov	s15, r3
 8001d4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d56:	ee38 8a27 	vadd.f32	s16, s16, s15
								+ arm_sin_f32(theta)*RefX_case1[i];
 8001d5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d62:	f001 f977 	bl	8003054 <arm_sin_f32>
 8001d66:	eeb0 7a40 	vmov.f32	s14, s0
 8001d6a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	3338      	adds	r3, #56	; 0x38
 8001d72:	443b      	add	r3, r7
 8001d74:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001d78:	ee07 3a90 	vmov	s15, r3
 8001d7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d84:	ee78 7a27 	vadd.f32	s15, s16, s15
				temp->Holes_Y[ind] = temp->Edge1_Y
 8001d88:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d90:	ee17 2a90 	vmov	r2, s15
 8001d94:	b291      	uxth	r1, r2
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	330c      	adds	r3, #12
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	460a      	mov	r2, r1
 8001da0:	805a      	strh	r2, [r3, #2]
				ind += 1;
 8001da2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001da6:	3301      	adds	r3, #1
 8001da8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			for(j=0;j<3;j++)
 8001dac:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	3301      	adds	r3, #1
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001dba:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	f77f af6f 	ble.w	8001ca2 <TrayLocalization+0x192>
		for(i=0;i<3;i++)
 8001dc4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	3301      	adds	r3, #1
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001dd2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	f77f af5f 	ble.w	8001c9a <TrayLocalization+0x18a>
			}
		}
		break;
 8001ddc:	e0b9      	b.n	8001f52 <TrayLocalization+0x442>
	case 2:
		for(i=0;i<3;i++)
 8001dde:	2300      	movs	r3, #0
 8001de0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001de4:	e0ae      	b.n	8001f44 <TrayLocalization+0x434>
		{
			for(j=0;j<3;j++)
 8001de6:	2300      	movs	r3, #0
 8001de8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001dec:	e09e      	b.n	8001f2c <TrayLocalization+0x41c>
 8001dee:	bf00      	nop
 8001df0:	00000000 	.word	0x00000000
 8001df4:	40000000 	.word	0x40000000
 8001df8:	08007bf4 	.word	0x08007bf4
 8001dfc:	08007bfc 	.word	0x08007bfc
 8001e00:	08007c04 	.word	0x08007c04
 8001e04:	08007c0c 	.word	0x08007c0c
 8001e08:	454cc000 	.word	0x454cc000
 8001e0c:	455de000 	.word	0x455de000
 8001e10:	45844800 	.word	0x45844800
			{
				temp->Holes_X[ind] = temp->Edge1_X
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	ee07 3a90 	vmov	s15, r3
								+ arm_cos_f32(theta)*RefX_case2[i]
 8001e1c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001e20:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e24:	eeb0 0a67 	vmov.f32	s0, s15
 8001e28:	f001 f88e 	bl	8002f48 <arm_cos_f32>
 8001e2c:	eeb0 7a40 	vmov.f32	s14, s0
 8001e30:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	3338      	adds	r3, #56	; 0x38
 8001e38:	443b      	add	r3, r7
 8001e3a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001e3e:	ee07 3a90 	vmov	s15, r3
 8001e42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e4a:	ee38 8a27 	vadd.f32	s16, s16, s15
								- arm_sin_f32(theta)*RefY_case2[j];
 8001e4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e52:	eeb0 0a67 	vmov.f32	s0, s15
 8001e56:	f001 f8fd 	bl	8003054 <arm_sin_f32>
 8001e5a:	eeb0 7a40 	vmov.f32	s14, s0
 8001e5e:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	3338      	adds	r3, #56	; 0x38
 8001e66:	443b      	add	r3, r7
 8001e68:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8001e6c:	ee07 3a90 	vmov	s15, r3
 8001e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e78:	ee78 7a67 	vsub.f32	s15, s16, s15
				temp->Holes_X[ind] = temp->Edge1_X
 8001e7c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8001e80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e84:	ee17 3a90 	vmov	r3, s15
 8001e88:	b299      	uxth	r1, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3204      	adds	r2, #4
 8001e8e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				temp->Holes_Y[ind] = temp->Edge1_Y
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	885b      	ldrh	r3, [r3, #2]
 8001e96:	ee07 3a90 	vmov	s15, r3
								+ arm_cos_f32(theta)*RefY_case2[j]
 8001e9a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001e9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ea2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea6:	f001 f84f 	bl	8002f48 <arm_cos_f32>
 8001eaa:	eeb0 7a40 	vmov.f32	s14, s0
 8001eae:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	3338      	adds	r3, #56	; 0x38
 8001eb6:	443b      	add	r3, r7
 8001eb8:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8001ebc:	ee07 3a90 	vmov	s15, r3
 8001ec0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec8:	ee38 8a27 	vadd.f32	s16, s16, s15
								+ arm_sin_f32(theta)*RefX_case2[i];
 8001ecc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed4:	f001 f8be 	bl	8003054 <arm_sin_f32>
 8001ed8:	eeb0 7a40 	vmov.f32	s14, s0
 8001edc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	3338      	adds	r3, #56	; 0x38
 8001ee4:	443b      	add	r3, r7
 8001ee6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001eea:	ee07 3a90 	vmov	s15, r3
 8001eee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef6:	ee78 7a27 	vadd.f32	s15, s16, s15
				temp->Holes_Y[ind] = temp->Edge1_Y
 8001efa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001efe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f02:	ee17 2a90 	vmov	r2, s15
 8001f06:	b291      	uxth	r1, r2
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	330c      	adds	r3, #12
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4413      	add	r3, r2
 8001f10:	460a      	mov	r2, r1
 8001f12:	805a      	strh	r2, [r3, #2]
				ind += 1;
 8001f14:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001f18:	3301      	adds	r3, #1
 8001f1a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			for(j=0;j<3;j++)
 8001f1e:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	3301      	adds	r3, #1
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001f2c:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	f77f af6f 	ble.w	8001e14 <TrayLocalization+0x304>
		for(i=0;i<3;i++)
 8001f36:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001f44:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	f77f af4c 	ble.w	8001de6 <TrayLocalization+0x2d6>
			}
		}
		break;
 8001f4e:	e000      	b.n	8001f52 <TrayLocalization+0x442>
	case 0:
		break;
 8001f50:	bf00      	nop
	}
}
 8001f52:	bf00      	nop
 8001f54:	3738      	adds	r7, #56	; 0x38
 8001f56:	46bd      	mov	sp, r7
 8001f58:	ecbd 8b02 	vpop	{d8}
 8001f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f5e:	bf00      	nop

08001f60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f66:	f107 0314 	add.w	r3, r7, #20
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	605a      	str	r2, [r3, #4]
 8001f70:	609a      	str	r2, [r3, #8]
 8001f72:	60da      	str	r2, [r3, #12]
 8001f74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	4b41      	ldr	r3, [pc, #260]	; (8002080 <MX_GPIO_Init+0x120>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a40      	ldr	r2, [pc, #256]	; (8002080 <MX_GPIO_Init+0x120>)
 8001f80:	f043 0304 	orr.w	r3, r3, #4
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b3e      	ldr	r3, [pc, #248]	; (8002080 <MX_GPIO_Init+0x120>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	4b3a      	ldr	r3, [pc, #232]	; (8002080 <MX_GPIO_Init+0x120>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a39      	ldr	r2, [pc, #228]	; (8002080 <MX_GPIO_Init+0x120>)
 8001f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b37      	ldr	r3, [pc, #220]	; (8002080 <MX_GPIO_Init+0x120>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	4b33      	ldr	r3, [pc, #204]	; (8002080 <MX_GPIO_Init+0x120>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	4a32      	ldr	r2, [pc, #200]	; (8002080 <MX_GPIO_Init+0x120>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbe:	4b30      	ldr	r3, [pc, #192]	; (8002080 <MX_GPIO_Init+0x120>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	60bb      	str	r3, [r7, #8]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	4b2c      	ldr	r3, [pc, #176]	; (8002080 <MX_GPIO_Init+0x120>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4a2b      	ldr	r2, [pc, #172]	; (8002080 <MX_GPIO_Init+0x120>)
 8001fd4:	f043 0302 	orr.w	r3, r3, #2
 8001fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fda:	4b29      	ldr	r3, [pc, #164]	; (8002080 <MX_GPIO_Init+0x120>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2120      	movs	r1, #32
 8001fea:	4826      	ldr	r0, [pc, #152]	; (8002084 <MX_GPIO_Init+0x124>)
 8001fec:	f002 f8b2 	bl	8004154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ff6:	4824      	ldr	r0, [pc, #144]	; (8002088 <MX_GPIO_Init+0x128>)
 8001ff8:	f002 f8ac 	bl	8004154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2140      	movs	r1, #64	; 0x40
 8002000:	4822      	ldr	r0, [pc, #136]	; (800208c <MX_GPIO_Init+0x12c>)
 8002002:	f002 f8a7 	bl	8004154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002006:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800200a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800200c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002010:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002016:	f107 0314 	add.w	r3, r7, #20
 800201a:	4619      	mov	r1, r3
 800201c:	481b      	ldr	r0, [pc, #108]	; (800208c <MX_GPIO_Init+0x12c>)
 800201e:	f001 ff15 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002022:	2320      	movs	r3, #32
 8002024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002026:	2301      	movs	r3, #1
 8002028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202e:	2300      	movs	r3, #0
 8002030:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002032:	f107 0314 	add.w	r3, r7, #20
 8002036:	4619      	mov	r1, r3
 8002038:	4812      	ldr	r0, [pc, #72]	; (8002084 <MX_GPIO_Init+0x124>)
 800203a:	f001 ff07 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800203e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002044:	2301      	movs	r3, #1
 8002046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204c:	2300      	movs	r3, #0
 800204e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002050:	f107 0314 	add.w	r3, r7, #20
 8002054:	4619      	mov	r1, r3
 8002056:	480c      	ldr	r0, [pc, #48]	; (8002088 <MX_GPIO_Init+0x128>)
 8002058:	f001 fef8 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800205c:	2340      	movs	r3, #64	; 0x40
 800205e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002060:	2301      	movs	r3, #1
 8002062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002068:	2300      	movs	r3, #0
 800206a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	4619      	mov	r1, r3
 8002072:	4806      	ldr	r0, [pc, #24]	; (800208c <MX_GPIO_Init+0x12c>)
 8002074:	f001 feea 	bl	8003e4c <HAL_GPIO_Init>

}
 8002078:	bf00      	nop
 800207a:	3728      	adds	r7, #40	; 0x28
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40023800 	.word	0x40023800
 8002084:	40020000 	.word	0x40020000
 8002088:	40020400 	.word	0x40020400
 800208c:	40020800 	.word	0x40020800

08002090 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002094:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <MX_I2C1_Init+0x50>)
 8002096:	4a13      	ldr	r2, [pc, #76]	; (80020e4 <MX_I2C1_Init+0x54>)
 8002098:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800209a:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <MX_I2C1_Init+0x50>)
 800209c:	4a12      	ldr	r2, [pc, #72]	; (80020e8 <MX_I2C1_Init+0x58>)
 800209e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020a0:	4b0f      	ldr	r3, [pc, #60]	; (80020e0 <MX_I2C1_Init+0x50>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020a6:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <MX_I2C1_Init+0x50>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020ac:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <MX_I2C1_Init+0x50>)
 80020ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020b4:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <MX_I2C1_Init+0x50>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020ba:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <MX_I2C1_Init+0x50>)
 80020bc:	2200      	movs	r2, #0
 80020be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020c0:	4b07      	ldr	r3, [pc, #28]	; (80020e0 <MX_I2C1_Init+0x50>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <MX_I2C1_Init+0x50>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020cc:	4804      	ldr	r0, [pc, #16]	; (80020e0 <MX_I2C1_Init+0x50>)
 80020ce:	f002 f85b 	bl	8004188 <HAL_I2C_Init>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020d8:	f000 f9a2 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020dc:	bf00      	nop
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	2000009c 	.word	0x2000009c
 80020e4:	40005400 	.word	0x40005400
 80020e8:	00061a80 	.word	0x00061a80

080020ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08a      	sub	sp, #40	; 0x28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a19      	ldr	r2, [pc, #100]	; (8002170 <HAL_I2C_MspInit+0x84>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d12b      	bne.n	8002166 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	4b18      	ldr	r3, [pc, #96]	; (8002174 <HAL_I2C_MspInit+0x88>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	4a17      	ldr	r2, [pc, #92]	; (8002174 <HAL_I2C_MspInit+0x88>)
 8002118:	f043 0302 	orr.w	r3, r3, #2
 800211c:	6313      	str	r3, [r2, #48]	; 0x30
 800211e:	4b15      	ldr	r3, [pc, #84]	; (8002174 <HAL_I2C_MspInit+0x88>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800212a:	23c0      	movs	r3, #192	; 0xc0
 800212c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800212e:	2312      	movs	r3, #18
 8002130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002136:	2303      	movs	r3, #3
 8002138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800213a:	2304      	movs	r3, #4
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800213e:	f107 0314 	add.w	r3, r7, #20
 8002142:	4619      	mov	r1, r3
 8002144:	480c      	ldr	r0, [pc, #48]	; (8002178 <HAL_I2C_MspInit+0x8c>)
 8002146:	f001 fe81 	bl	8003e4c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	4b09      	ldr	r3, [pc, #36]	; (8002174 <HAL_I2C_MspInit+0x88>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	4a08      	ldr	r2, [pc, #32]	; (8002174 <HAL_I2C_MspInit+0x88>)
 8002154:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002158:	6413      	str	r3, [r2, #64]	; 0x40
 800215a:	4b06      	ldr	r3, [pc, #24]	; (8002174 <HAL_I2C_MspInit+0x88>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002166:	bf00      	nop
 8002168:	3728      	adds	r7, #40	; 0x28
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40005400 	.word	0x40005400
 8002174:	40023800 	.word	0x40023800
 8002178:	40020400 	.word	0x40020400

0800217c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002182:	f001 fcdf 	bl	8003b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002186:	f000 f891 	bl	80022ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800218a:	f7ff fee9 	bl	8001f60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800218e:	f000 fc19 	bl	80029c4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8002192:	f000 f9cd 	bl	8002530 <MX_TIM2_Init>
  MX_TIM5_Init();
 8002196:	f000 fae3 	bl	8002760 <MX_TIM5_Init>
  MX_TIM3_Init();
 800219a:	f000 fa1d 	bl	80025d8 <MX_TIM3_Init>
  MX_I2C1_Init();
 800219e:	f7ff ff77 	bl	8002090 <MX_I2C1_Init>
  MX_TIM4_Init();
 80021a2:	f000 fa8f 	bl	80026c4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  //Setup Initial vaules
  InitKalmanStruct(&KF,Var_Q,Var_R);
 80021a6:	4b2f      	ldr	r3, [pc, #188]	; (8002264 <main+0xe8>)
 80021a8:	edd3 7a00 	vldr	s15, [r3]
 80021ac:	4b2e      	ldr	r3, [pc, #184]	; (8002268 <main+0xec>)
 80021ae:	ed93 7a00 	vldr	s14, [r3]
 80021b2:	eef0 0a47 	vmov.f32	s1, s14
 80021b6:	eeb0 0a67 	vmov.f32	s0, s15
 80021ba:	482c      	ldr	r0, [pc, #176]	; (800226c <main+0xf0>)
 80021bc:	f7fe fe4a 	bl	8000e54 <InitKalmanStruct>
  InitReadEncoder(&ReadEncoderParam, 1000);
 80021c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80021c4:	482a      	ldr	r0, [pc, #168]	; (8002270 <main+0xf4>)
 80021c6:	f7ff fc46 	bl	8001a56 <InitReadEncoder>
  QuinticSetup(&QuinticVar, vmax, amax);
 80021ca:	4b2a      	ldr	r3, [pc, #168]	; (8002274 <main+0xf8>)
 80021cc:	edd3 7a00 	vldr	s15, [r3]
 80021d0:	4b29      	ldr	r3, [pc, #164]	; (8002278 <main+0xfc>)
 80021d2:	ed93 7a00 	vldr	s14, [r3]
 80021d6:	eef0 0a47 	vmov.f32	s1, s14
 80021da:	eeb0 0a67 	vmov.f32	s0, s15
 80021de:	4827      	ldr	r0, [pc, #156]	; (800227c <main+0x100>)
 80021e0:	f7ff f8d2 	bl	8001388 <QuinticSetup>
  PIDSetup(&PositionLoop, 2.36, 0, 0);
 80021e4:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8002280 <main+0x104>
 80021e8:	eddf 0a25 	vldr	s1, [pc, #148]	; 8002280 <main+0x104>
 80021ec:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8002284 <main+0x108>
 80021f0:	4825      	ldr	r0, [pc, #148]	; (8002288 <main+0x10c>)
 80021f2:	f7ff f825 	bl	8001240 <PIDSetup>
  PIDSetup(&VelocityLoop, 2.8, 0, 0);
 80021f6:	ed9f 1a22 	vldr	s2, [pc, #136]	; 8002280 <main+0x104>
 80021fa:	eddf 0a21 	vldr	s1, [pc, #132]	; 8002280 <main+0x104>
 80021fe:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800228c <main+0x110>
 8002202:	4823      	ldr	r0, [pc, #140]	; (8002290 <main+0x114>)
 8002204:	f7ff f81c 	bl	8001240 <PIDSetup>
  TraySetup(&PickTray, 4644, 37399, 8774, 37358);
 8002208:	f249 13ee 	movw	r3, #37358	; 0x91ee
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	f242 2346 	movw	r3, #8774	; 0x2246
 8002212:	f249 2217 	movw	r2, #37399	; 0x9217
 8002216:	f241 2124 	movw	r1, #4644	; 0x1224
 800221a:	481e      	ldr	r0, [pc, #120]	; (8002294 <main+0x118>)
 800221c:	f7ff fc58 	bl	8001ad0 <TraySetup>
  TraySetup(&PlaceTray, 15052, 19020, 17984, 17326);
 8002220:	f244 33ae 	movw	r3, #17326	; 0x43ae
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	f244 6340 	movw	r3, #17984	; 0x4640
 800222a:	f644 224c 	movw	r2, #19020	; 0x4a4c
 800222e:	f643 21cc 	movw	r1, #15052	; 0x3acc
 8002232:	4819      	ldr	r0, [pc, #100]	; (8002298 <main+0x11c>)
 8002234:	f7ff fc4c 	bl	8001ad0 <TraySetup>
  TrayLocalization(&PickTray);
 8002238:	4816      	ldr	r0, [pc, #88]	; (8002294 <main+0x118>)
 800223a:	f7ff fc69 	bl	8001b10 <TrayLocalization>
  TrayLocalization(&PlaceTray);
 800223e:	4816      	ldr	r0, [pc, #88]	; (8002298 <main+0x11c>)
 8002240:	f7ff fc66 	bl	8001b10 <TrayLocalization>
  //Timers Start
  HAL_TIM_Base_Start_IT(&htim4);
 8002244:	4815      	ldr	r0, [pc, #84]	; (800229c <main+0x120>)
 8002246:	f002 fdcb 	bl	8004de0 <HAL_TIM_Base_Start_IT>

  //Start QEI
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2);
 800224a:	2104      	movs	r1, #4
 800224c:	4814      	ldr	r0, [pc, #80]	; (80022a0 <main+0x124>)
 800224e:	f002 ffd9 	bl	8005204 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);//Start PWM
 8002252:	2108      	movs	r1, #8
 8002254:	4813      	ldr	r0, [pc, #76]	; (80022a4 <main+0x128>)
 8002256:	f002 fe7f 	bl	8004f58 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 800225a:	4813      	ldr	r0, [pc, #76]	; (80022a8 <main+0x12c>)
 800225c:	f002 fdc0 	bl	8004de0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002260:	e7fe      	b.n	8002260 <main+0xe4>
 8002262:	bf00      	nop
 8002264:	20000008 	.word	0x20000008
 8002268:	2000000c 	.word	0x2000000c
 800226c:	200001a4 	.word	0x200001a4
 8002270:	200000f0 	.word	0x200000f0
 8002274:	20000000 	.word	0x20000000
 8002278:	20000004 	.word	0x20000004
 800227c:	20000104 	.word	0x20000104
 8002280:	00000000 	.word	0x00000000
 8002284:	40170a3d 	.word	0x40170a3d
 8002288:	20000154 	.word	0x20000154
 800228c:	40333333 	.word	0x40333333
 8002290:	2000017c 	.word	0x2000017c
 8002294:	200003c0 	.word	0x200003c0
 8002298:	20000458 	.word	0x20000458
 800229c:	20000580 	.word	0x20000580
 80022a0:	200004f0 	.word	0x200004f0
 80022a4:	20000538 	.word	0x20000538
 80022a8:	200005c8 	.word	0x200005c8

080022ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b094      	sub	sp, #80	; 0x50
 80022b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022b2:	f107 0320 	add.w	r3, r7, #32
 80022b6:	2230      	movs	r2, #48	; 0x30
 80022b8:	2100      	movs	r1, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f004 f924 	bl	8006508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022c0:	f107 030c 	add.w	r3, r7, #12
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022d0:	2300      	movs	r3, #0
 80022d2:	60bb      	str	r3, [r7, #8]
 80022d4:	4b27      	ldr	r3, [pc, #156]	; (8002374 <SystemClock_Config+0xc8>)
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	4a26      	ldr	r2, [pc, #152]	; (8002374 <SystemClock_Config+0xc8>)
 80022da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022de:	6413      	str	r3, [r2, #64]	; 0x40
 80022e0:	4b24      	ldr	r3, [pc, #144]	; (8002374 <SystemClock_Config+0xc8>)
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022ec:	2300      	movs	r3, #0
 80022ee:	607b      	str	r3, [r7, #4]
 80022f0:	4b21      	ldr	r3, [pc, #132]	; (8002378 <SystemClock_Config+0xcc>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a20      	ldr	r2, [pc, #128]	; (8002378 <SystemClock_Config+0xcc>)
 80022f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	4b1e      	ldr	r3, [pc, #120]	; (8002378 <SystemClock_Config+0xcc>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002304:	607b      	str	r3, [r7, #4]
 8002306:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002308:	2302      	movs	r3, #2
 800230a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800230c:	2301      	movs	r3, #1
 800230e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002310:	2310      	movs	r3, #16
 8002312:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002314:	2302      	movs	r3, #2
 8002316:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002318:	2300      	movs	r3, #0
 800231a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800231c:	2308      	movs	r3, #8
 800231e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002320:	2364      	movs	r3, #100	; 0x64
 8002322:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002324:	2302      	movs	r3, #2
 8002326:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002328:	2304      	movs	r3, #4
 800232a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800232c:	f107 0320 	add.w	r3, r7, #32
 8002330:	4618      	mov	r0, r3
 8002332:	f002 f86d 	bl	8004410 <HAL_RCC_OscConfig>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800233c:	f000 f870 	bl	8002420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002340:	230f      	movs	r3, #15
 8002342:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002344:	2302      	movs	r3, #2
 8002346:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800234c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002350:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002352:	2300      	movs	r3, #0
 8002354:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002356:	f107 030c 	add.w	r3, r7, #12
 800235a:	2103      	movs	r1, #3
 800235c:	4618      	mov	r0, r3
 800235e:	f002 facf 	bl	8004900 <HAL_RCC_ClockConfig>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002368:	f000 f85a 	bl	8002420 <Error_Handler>
  }
}
 800236c:	bf00      	nop
 800236e:	3750      	adds	r7, #80	; 0x50
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40023800 	.word	0x40023800
 8002378:	40007000 	.word	0x40007000

0800237c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a1d      	ldr	r2, [pc, #116]	; (80023fc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d132      	bne.n	80023f2 <HAL_TIM_PeriodElapsedCallback+0x76>
	{
		QEIGetFeedback(&QEIData, 2500);
 800238c:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8002390:	481b      	ldr	r0, [pc, #108]	; (8002400 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002392:	f7ff fb75 	bl	8001a80 <QEIGetFeedback>
		KF.z = QEIData.QEIVelocity;
 8002396:	4b1a      	ldr	r3, [pc, #104]	; (8002400 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	4a1a      	ldr	r2, [pc, #104]	; (8002404 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800239c:	65d3      	str	r3, [r2, #92]	; 0x5c
		kalman_filter();
 800239e:	f7fe feb3 	bl	8001108 <kalman_filter>
		ZEstimateVelocity = KF.x_hat[1];
 80023a2:	4b18      	ldr	r3, [pc, #96]	; (8002404 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	4a18      	ldr	r2, [pc, #96]	; (8002408 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80023a8:	6013      	str	r3, [r2, #0]
		QuinticRun(&QuinticVar,0.0004);
 80023aa:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800240c <HAL_TIM_PeriodElapsedCallback+0x90>
 80023ae:	4818      	ldr	r0, [pc, #96]	; (8002410 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80023b0:	f7ff fb00 	bl	80019b4 <QuinticRun>
		PIDRun(&VelocityLoop, KF.x_hat[1], QuinticVar.current_velo);
 80023b4:	4b13      	ldr	r3, [pc, #76]	; (8002404 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80023b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80023ba:	4b15      	ldr	r3, [pc, #84]	; (8002410 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80023bc:	ed93 7a04 	vldr	s14, [r3, #16]
 80023c0:	eef0 0a47 	vmov.f32	s1, s14
 80023c4:	eeb0 0a67 	vmov.f32	s0, s15
 80023c8:	4812      	ldr	r0, [pc, #72]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80023ca:	f7fe ff67 	bl	800129c <PIDRun>
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,abs(VelocityLoop.U));
 80023ce:	4b11      	ldr	r3, [pc, #68]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80023d6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80023da:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, VelocityLoop.MotorDir);
 80023e0:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80023e2:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	461a      	mov	r2, r3
 80023ea:	2140      	movs	r1, #64	; 0x40
 80023ec:	480b      	ldr	r0, [pc, #44]	; (800241c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80023ee:	f001 feb1 	bl	8004154 <HAL_GPIO_WritePin>
	}
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000580 	.word	0x20000580
 8002400:	200000f8 	.word	0x200000f8
 8002404:	200001a4 	.word	0x200001a4
 8002408:	200003bc 	.word	0x200003bc
 800240c:	39d1b717 	.word	0x39d1b717
 8002410:	20000104 	.word	0x20000104
 8002414:	2000017c 	.word	0x2000017c
 8002418:	20000538 	.word	0x20000538
 800241c:	40020800 	.word	0x40020800

08002420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002424:	b672      	cpsid	i
}
 8002426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002428:	e7fe      	b.n	8002428 <Error_Handler+0x8>
	...

0800242c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	4b10      	ldr	r3, [pc, #64]	; (8002478 <HAL_MspInit+0x4c>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	4a0f      	ldr	r2, [pc, #60]	; (8002478 <HAL_MspInit+0x4c>)
 800243c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002440:	6453      	str	r3, [r2, #68]	; 0x44
 8002442:	4b0d      	ldr	r3, [pc, #52]	; (8002478 <HAL_MspInit+0x4c>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800244a:	607b      	str	r3, [r7, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	603b      	str	r3, [r7, #0]
 8002452:	4b09      	ldr	r3, [pc, #36]	; (8002478 <HAL_MspInit+0x4c>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	4a08      	ldr	r2, [pc, #32]	; (8002478 <HAL_MspInit+0x4c>)
 8002458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800245c:	6413      	str	r3, [r2, #64]	; 0x40
 800245e:	4b06      	ldr	r3, [pc, #24]	; (8002478 <HAL_MspInit+0x4c>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800246a:	2007      	movs	r0, #7
 800246c:	f001 fcac 	bl	8003dc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40023800 	.word	0x40023800

0800247c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002480:	e7fe      	b.n	8002480 <NMI_Handler+0x4>

08002482 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002486:	e7fe      	b.n	8002486 <HardFault_Handler+0x4>

08002488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800248c:	e7fe      	b.n	800248c <MemManage_Handler+0x4>

0800248e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800248e:	b480      	push	{r7}
 8002490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002492:	e7fe      	b.n	8002492 <BusFault_Handler+0x4>

08002494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002498:	e7fe      	b.n	8002498 <UsageFault_Handler+0x4>

0800249a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800249a:	b480      	push	{r7}
 800249c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024ac:	bf00      	nop
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024c8:	f001 fb8e 	bl	8003be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024d4:	4802      	ldr	r0, [pc, #8]	; (80024e0 <TIM2_IRQHandler+0x10>)
 80024d6:	f002 ff23 	bl	8005320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	200004f0 	.word	0x200004f0

080024e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024e8:	4802      	ldr	r0, [pc, #8]	; (80024f4 <TIM3_IRQHandler+0x10>)
 80024ea:	f002 ff19 	bl	8005320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20000538 	.word	0x20000538

080024f8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80024fc:	4802      	ldr	r0, [pc, #8]	; (8002508 <TIM4_IRQHandler+0x10>)
 80024fe:	f002 ff0f 	bl	8005320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20000580 	.word	0x20000580

0800250c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002510:	4b06      	ldr	r3, [pc, #24]	; (800252c <SystemInit+0x20>)
 8002512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002516:	4a05      	ldr	r2, [pc, #20]	; (800252c <SystemInit+0x20>)
 8002518:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800251c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08c      	sub	sp, #48	; 0x30
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002536:	f107 030c 	add.w	r3, r7, #12
 800253a:	2224      	movs	r2, #36	; 0x24
 800253c:	2100      	movs	r1, #0
 800253e:	4618      	mov	r0, r3
 8002540:	f003 ffe2 	bl	8006508 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002544:	1d3b      	adds	r3, r7, #4
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800254c:	4b21      	ldr	r3, [pc, #132]	; (80025d4 <MX_TIM2_Init+0xa4>)
 800254e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002552:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002554:	4b1f      	ldr	r3, [pc, #124]	; (80025d4 <MX_TIM2_Init+0xa4>)
 8002556:	2200      	movs	r2, #0
 8002558:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800255a:	4b1e      	ldr	r3, [pc, #120]	; (80025d4 <MX_TIM2_Init+0xa4>)
 800255c:	2200      	movs	r2, #0
 800255e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002560:	4b1c      	ldr	r3, [pc, #112]	; (80025d4 <MX_TIM2_Init+0xa4>)
 8002562:	f04f 32ff 	mov.w	r2, #4294967295
 8002566:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002568:	4b1a      	ldr	r3, [pc, #104]	; (80025d4 <MX_TIM2_Init+0xa4>)
 800256a:	2200      	movs	r2, #0
 800256c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800256e:	4b19      	ldr	r3, [pc, #100]	; (80025d4 <MX_TIM2_Init+0xa4>)
 8002570:	2200      	movs	r2, #0
 8002572:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002574:	2303      	movs	r3, #3
 8002576:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002578:	2300      	movs	r3, #0
 800257a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800257c:	2301      	movs	r3, #1
 800257e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002580:	2300      	movs	r3, #0
 8002582:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002588:	2300      	movs	r3, #0
 800258a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800258c:	2301      	movs	r3, #1
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002590:	2300      	movs	r3, #0
 8002592:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002594:	2300      	movs	r3, #0
 8002596:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002598:	f107 030c 	add.w	r3, r7, #12
 800259c:	4619      	mov	r1, r3
 800259e:	480d      	ldr	r0, [pc, #52]	; (80025d4 <MX_TIM2_Init+0xa4>)
 80025a0:	f002 fd8a 	bl	80050b8 <HAL_TIM_Encoder_Init>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80025aa:	f7ff ff39 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ae:	2300      	movs	r3, #0
 80025b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025b6:	1d3b      	adds	r3, r7, #4
 80025b8:	4619      	mov	r1, r3
 80025ba:	4806      	ldr	r0, [pc, #24]	; (80025d4 <MX_TIM2_Init+0xa4>)
 80025bc:	f003 fc36 	bl	8005e2c <HAL_TIMEx_MasterConfigSynchronization>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80025c6:	f7ff ff2b 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025ca:	bf00      	nop
 80025cc:	3730      	adds	r7, #48	; 0x30
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	200004f0 	.word	0x200004f0

080025d8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08e      	sub	sp, #56	; 0x38
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	605a      	str	r2, [r3, #4]
 80025e8:	609a      	str	r2, [r3, #8]
 80025ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ec:	f107 0320 	add.w	r3, r7, #32
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	611a      	str	r2, [r3, #16]
 8002604:	615a      	str	r2, [r3, #20]
 8002606:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002608:	4b2c      	ldr	r3, [pc, #176]	; (80026bc <MX_TIM3_Init+0xe4>)
 800260a:	4a2d      	ldr	r2, [pc, #180]	; (80026c0 <MX_TIM3_Init+0xe8>)
 800260c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800260e:	4b2b      	ldr	r3, [pc, #172]	; (80026bc <MX_TIM3_Init+0xe4>)
 8002610:	2200      	movs	r2, #0
 8002612:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002614:	4b29      	ldr	r3, [pc, #164]	; (80026bc <MX_TIM3_Init+0xe4>)
 8002616:	2200      	movs	r2, #0
 8002618:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 800261a:	4b28      	ldr	r3, [pc, #160]	; (80026bc <MX_TIM3_Init+0xe4>)
 800261c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002620:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002622:	4b26      	ldr	r3, [pc, #152]	; (80026bc <MX_TIM3_Init+0xe4>)
 8002624:	2200      	movs	r2, #0
 8002626:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002628:	4b24      	ldr	r3, [pc, #144]	; (80026bc <MX_TIM3_Init+0xe4>)
 800262a:	2200      	movs	r2, #0
 800262c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800262e:	4823      	ldr	r0, [pc, #140]	; (80026bc <MX_TIM3_Init+0xe4>)
 8002630:	f002 fb86 	bl	8004d40 <HAL_TIM_Base_Init>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800263a:	f7ff fef1 	bl	8002420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800263e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002642:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002644:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002648:	4619      	mov	r1, r3
 800264a:	481c      	ldr	r0, [pc, #112]	; (80026bc <MX_TIM3_Init+0xe4>)
 800264c:	f003 f832 	bl	80056b4 <HAL_TIM_ConfigClockSource>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002656:	f7ff fee3 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800265a:	4818      	ldr	r0, [pc, #96]	; (80026bc <MX_TIM3_Init+0xe4>)
 800265c:	f002 fc22 	bl	8004ea4 <HAL_TIM_PWM_Init>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002666:	f7ff fedb 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800266a:	2300      	movs	r3, #0
 800266c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800266e:	2300      	movs	r3, #0
 8002670:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002672:	f107 0320 	add.w	r3, r7, #32
 8002676:	4619      	mov	r1, r3
 8002678:	4810      	ldr	r0, [pc, #64]	; (80026bc <MX_TIM3_Init+0xe4>)
 800267a:	f003 fbd7 	bl	8005e2c <HAL_TIMEx_MasterConfigSynchronization>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002684:	f7ff fecc 	bl	8002420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002688:	2360      	movs	r3, #96	; 0x60
 800268a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002690:	2300      	movs	r3, #0
 8002692:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002698:	1d3b      	adds	r3, r7, #4
 800269a:	2208      	movs	r2, #8
 800269c:	4619      	mov	r1, r3
 800269e:	4807      	ldr	r0, [pc, #28]	; (80026bc <MX_TIM3_Init+0xe4>)
 80026a0:	f002 ff46 	bl	8005530 <HAL_TIM_PWM_ConfigChannel>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80026aa:	f7ff feb9 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80026ae:	4803      	ldr	r0, [pc, #12]	; (80026bc <MX_TIM3_Init+0xe4>)
 80026b0:	f000 f94e 	bl	8002950 <HAL_TIM_MspPostInit>

}
 80026b4:	bf00      	nop
 80026b6:	3738      	adds	r7, #56	; 0x38
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20000538 	.word	0x20000538
 80026c0:	40000400 	.word	0x40000400

080026c4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ca:	f107 0308 	add.w	r3, r7, #8
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]
 80026d4:	609a      	str	r2, [r3, #8]
 80026d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026d8:	463b      	mov	r3, r7
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80026e0:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <MX_TIM4_Init+0x94>)
 80026e2:	4a1e      	ldr	r2, [pc, #120]	; (800275c <MX_TIM4_Init+0x98>)
 80026e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 80026e6:	4b1c      	ldr	r3, [pc, #112]	; (8002758 <MX_TIM4_Init+0x94>)
 80026e8:	2263      	movs	r2, #99	; 0x63
 80026ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ec:	4b1a      	ldr	r3, [pc, #104]	; (8002758 <MX_TIM4_Init+0x94>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 399;
 80026f2:	4b19      	ldr	r3, [pc, #100]	; (8002758 <MX_TIM4_Init+0x94>)
 80026f4:	f240 128f 	movw	r2, #399	; 0x18f
 80026f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026fa:	4b17      	ldr	r3, [pc, #92]	; (8002758 <MX_TIM4_Init+0x94>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002700:	4b15      	ldr	r3, [pc, #84]	; (8002758 <MX_TIM4_Init+0x94>)
 8002702:	2200      	movs	r2, #0
 8002704:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002706:	4814      	ldr	r0, [pc, #80]	; (8002758 <MX_TIM4_Init+0x94>)
 8002708:	f002 fb1a 	bl	8004d40 <HAL_TIM_Base_Init>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002712:	f7ff fe85 	bl	8002420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002716:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800271a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800271c:	f107 0308 	add.w	r3, r7, #8
 8002720:	4619      	mov	r1, r3
 8002722:	480d      	ldr	r0, [pc, #52]	; (8002758 <MX_TIM4_Init+0x94>)
 8002724:	f002 ffc6 	bl	80056b4 <HAL_TIM_ConfigClockSource>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800272e:	f7ff fe77 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002732:	2300      	movs	r3, #0
 8002734:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002736:	2300      	movs	r3, #0
 8002738:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800273a:	463b      	mov	r3, r7
 800273c:	4619      	mov	r1, r3
 800273e:	4806      	ldr	r0, [pc, #24]	; (8002758 <MX_TIM4_Init+0x94>)
 8002740:	f003 fb74 	bl	8005e2c <HAL_TIMEx_MasterConfigSynchronization>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800274a:	f7ff fe69 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800274e:	bf00      	nop
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000580 	.word	0x20000580
 800275c:	40000800 	.word	0x40000800

08002760 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002766:	f107 0308 	add.w	r3, r7, #8
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	605a      	str	r2, [r3, #4]
 8002770:	609a      	str	r2, [r3, #8]
 8002772:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002774:	463b      	mov	r3, r7
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800277c:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <MX_TIM5_Init+0x94>)
 800277e:	4a1e      	ldr	r2, [pc, #120]	; (80027f8 <MX_TIM5_Init+0x98>)
 8002780:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8002782:	4b1c      	ldr	r3, [pc, #112]	; (80027f4 <MX_TIM5_Init+0x94>)
 8002784:	2253      	movs	r2, #83	; 0x53
 8002786:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002788:	4b1a      	ldr	r3, [pc, #104]	; (80027f4 <MX_TIM5_Init+0x94>)
 800278a:	2200      	movs	r2, #0
 800278c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800278e:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <MX_TIM5_Init+0x94>)
 8002790:	f04f 32ff 	mov.w	r2, #4294967295
 8002794:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002796:	4b17      	ldr	r3, [pc, #92]	; (80027f4 <MX_TIM5_Init+0x94>)
 8002798:	2200      	movs	r2, #0
 800279a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800279c:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <MX_TIM5_Init+0x94>)
 800279e:	2200      	movs	r2, #0
 80027a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80027a2:	4814      	ldr	r0, [pc, #80]	; (80027f4 <MX_TIM5_Init+0x94>)
 80027a4:	f002 facc 	bl	8004d40 <HAL_TIM_Base_Init>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80027ae:	f7ff fe37 	bl	8002420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80027b8:	f107 0308 	add.w	r3, r7, #8
 80027bc:	4619      	mov	r1, r3
 80027be:	480d      	ldr	r0, [pc, #52]	; (80027f4 <MX_TIM5_Init+0x94>)
 80027c0:	f002 ff78 	bl	80056b4 <HAL_TIM_ConfigClockSource>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80027ca:	f7ff fe29 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027ce:	2300      	movs	r3, #0
 80027d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027d2:	2300      	movs	r3, #0
 80027d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80027d6:	463b      	mov	r3, r7
 80027d8:	4619      	mov	r1, r3
 80027da:	4806      	ldr	r0, [pc, #24]	; (80027f4 <MX_TIM5_Init+0x94>)
 80027dc:	f003 fb26 	bl	8005e2c <HAL_TIMEx_MasterConfigSynchronization>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80027e6:	f7ff fe1b 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80027ea:	bf00      	nop
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	200005c8 	.word	0x200005c8
 80027f8:	40000c00 	.word	0x40000c00

080027fc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08a      	sub	sp, #40	; 0x28
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002804:	f107 0314 	add.w	r3, r7, #20
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	60da      	str	r2, [r3, #12]
 8002812:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800281c:	d133      	bne.n	8002886 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	4b1b      	ldr	r3, [pc, #108]	; (8002890 <HAL_TIM_Encoder_MspInit+0x94>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	4a1a      	ldr	r2, [pc, #104]	; (8002890 <HAL_TIM_Encoder_MspInit+0x94>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	6413      	str	r3, [r2, #64]	; 0x40
 800282e:	4b18      	ldr	r3, [pc, #96]	; (8002890 <HAL_TIM_Encoder_MspInit+0x94>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	4b14      	ldr	r3, [pc, #80]	; (8002890 <HAL_TIM_Encoder_MspInit+0x94>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	4a13      	ldr	r2, [pc, #76]	; (8002890 <HAL_TIM_Encoder_MspInit+0x94>)
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	6313      	str	r3, [r2, #48]	; 0x30
 800284a:	4b11      	ldr	r3, [pc, #68]	; (8002890 <HAL_TIM_Encoder_MspInit+0x94>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002856:	2303      	movs	r3, #3
 8002858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285a:	2302      	movs	r3, #2
 800285c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002862:	2300      	movs	r3, #0
 8002864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002866:	2301      	movs	r3, #1
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800286a:	f107 0314 	add.w	r3, r7, #20
 800286e:	4619      	mov	r1, r3
 8002870:	4808      	ldr	r0, [pc, #32]	; (8002894 <HAL_TIM_Encoder_MspInit+0x98>)
 8002872:	f001 faeb 	bl	8003e4c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002876:	2200      	movs	r2, #0
 8002878:	2100      	movs	r1, #0
 800287a:	201c      	movs	r0, #28
 800287c:	f001 faaf 	bl	8003dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002880:	201c      	movs	r0, #28
 8002882:	f001 fac8 	bl	8003e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002886:	bf00      	nop
 8002888:	3728      	adds	r7, #40	; 0x28
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40023800 	.word	0x40023800
 8002894:	40020000 	.word	0x40020000

08002898 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a26      	ldr	r2, [pc, #152]	; (8002940 <HAL_TIM_Base_MspInit+0xa8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d116      	bne.n	80028d8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	4b25      	ldr	r3, [pc, #148]	; (8002944 <HAL_TIM_Base_MspInit+0xac>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	4a24      	ldr	r2, [pc, #144]	; (8002944 <HAL_TIM_Base_MspInit+0xac>)
 80028b4:	f043 0302 	orr.w	r3, r3, #2
 80028b8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ba:	4b22      	ldr	r3, [pc, #136]	; (8002944 <HAL_TIM_Base_MspInit+0xac>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80028c6:	2200      	movs	r2, #0
 80028c8:	2100      	movs	r1, #0
 80028ca:	201d      	movs	r0, #29
 80028cc:	f001 fa87 	bl	8003dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028d0:	201d      	movs	r0, #29
 80028d2:	f001 faa0 	bl	8003e16 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80028d6:	e02e      	b.n	8002936 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM4)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a1a      	ldr	r2, [pc, #104]	; (8002948 <HAL_TIM_Base_MspInit+0xb0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d116      	bne.n	8002910 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	4b17      	ldr	r3, [pc, #92]	; (8002944 <HAL_TIM_Base_MspInit+0xac>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	4a16      	ldr	r2, [pc, #88]	; (8002944 <HAL_TIM_Base_MspInit+0xac>)
 80028ec:	f043 0304 	orr.w	r3, r3, #4
 80028f0:	6413      	str	r3, [r2, #64]	; 0x40
 80028f2:	4b14      	ldr	r3, [pc, #80]	; (8002944 <HAL_TIM_Base_MspInit+0xac>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	613b      	str	r3, [r7, #16]
 80028fc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80028fe:	2200      	movs	r2, #0
 8002900:	2100      	movs	r1, #0
 8002902:	201e      	movs	r0, #30
 8002904:	f001 fa6b 	bl	8003dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002908:	201e      	movs	r0, #30
 800290a:	f001 fa84 	bl	8003e16 <HAL_NVIC_EnableIRQ>
}
 800290e:	e012      	b.n	8002936 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM5)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a0d      	ldr	r2, [pc, #52]	; (800294c <HAL_TIM_Base_MspInit+0xb4>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d10d      	bne.n	8002936 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	4b09      	ldr	r3, [pc, #36]	; (8002944 <HAL_TIM_Base_MspInit+0xac>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	4a08      	ldr	r2, [pc, #32]	; (8002944 <HAL_TIM_Base_MspInit+0xac>)
 8002924:	f043 0308 	orr.w	r3, r3, #8
 8002928:	6413      	str	r3, [r2, #64]	; 0x40
 800292a:	4b06      	ldr	r3, [pc, #24]	; (8002944 <HAL_TIM_Base_MspInit+0xac>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]
}
 8002936:	bf00      	nop
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40000400 	.word	0x40000400
 8002944:	40023800 	.word	0x40023800
 8002948:	40000800 	.word	0x40000800
 800294c:	40000c00 	.word	0x40000c00

08002950 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b088      	sub	sp, #32
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002958:	f107 030c 	add.w	r3, r7, #12
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	60da      	str	r2, [r3, #12]
 8002966:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a12      	ldr	r2, [pc, #72]	; (80029b8 <HAL_TIM_MspPostInit+0x68>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d11e      	bne.n	80029b0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	4b11      	ldr	r3, [pc, #68]	; (80029bc <HAL_TIM_MspPostInit+0x6c>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	4a10      	ldr	r2, [pc, #64]	; (80029bc <HAL_TIM_MspPostInit+0x6c>)
 800297c:	f043 0304 	orr.w	r3, r3, #4
 8002980:	6313      	str	r3, [r2, #48]	; 0x30
 8002982:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <HAL_TIM_MspPostInit+0x6c>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	f003 0304 	and.w	r3, r3, #4
 800298a:	60bb      	str	r3, [r7, #8]
 800298c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800298e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002992:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002994:	2302      	movs	r3, #2
 8002996:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299c:	2300      	movs	r3, #0
 800299e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029a0:	2302      	movs	r3, #2
 80029a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a4:	f107 030c 	add.w	r3, r7, #12
 80029a8:	4619      	mov	r1, r3
 80029aa:	4805      	ldr	r0, [pc, #20]	; (80029c0 <HAL_TIM_MspPostInit+0x70>)
 80029ac:	f001 fa4e 	bl	8003e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80029b0:	bf00      	nop
 80029b2:	3720      	adds	r7, #32
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40000400 	.word	0x40000400
 80029bc:	40023800 	.word	0x40023800
 80029c0:	40020800 	.word	0x40020800

080029c4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029c8:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <MX_USART2_UART_Init+0x4c>)
 80029ca:	4a12      	ldr	r2, [pc, #72]	; (8002a14 <MX_USART2_UART_Init+0x50>)
 80029cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80029ce:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <MX_USART2_UART_Init+0x4c>)
 80029d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029d6:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <MX_USART2_UART_Init+0x4c>)
 80029d8:	2200      	movs	r2, #0
 80029da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029dc:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <MX_USART2_UART_Init+0x4c>)
 80029de:	2200      	movs	r2, #0
 80029e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029e2:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <MX_USART2_UART_Init+0x4c>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029e8:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <MX_USART2_UART_Init+0x4c>)
 80029ea:	220c      	movs	r2, #12
 80029ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ee:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <MX_USART2_UART_Init+0x4c>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029f4:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <MX_USART2_UART_Init+0x4c>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029fa:	4805      	ldr	r0, [pc, #20]	; (8002a10 <MX_USART2_UART_Init+0x4c>)
 80029fc:	f003 fa98 	bl	8005f30 <HAL_UART_Init>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a06:	f7ff fd0b 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000610 	.word	0x20000610
 8002a14:	40004400 	.word	0x40004400

08002a18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08a      	sub	sp, #40	; 0x28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a20:	f107 0314 	add.w	r3, r7, #20
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	60da      	str	r2, [r3, #12]
 8002a2e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a19      	ldr	r2, [pc, #100]	; (8002a9c <HAL_UART_MspInit+0x84>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d12b      	bne.n	8002a92 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	4b18      	ldr	r3, [pc, #96]	; (8002aa0 <HAL_UART_MspInit+0x88>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	4a17      	ldr	r2, [pc, #92]	; (8002aa0 <HAL_UART_MspInit+0x88>)
 8002a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a48:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4a:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <HAL_UART_MspInit+0x88>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a52:	613b      	str	r3, [r7, #16]
 8002a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	4b11      	ldr	r3, [pc, #68]	; (8002aa0 <HAL_UART_MspInit+0x88>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	4a10      	ldr	r2, [pc, #64]	; (8002aa0 <HAL_UART_MspInit+0x88>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	6313      	str	r3, [r2, #48]	; 0x30
 8002a66:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <HAL_UART_MspInit+0x88>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a72:	230c      	movs	r3, #12
 8002a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a76:	2302      	movs	r3, #2
 8002a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a82:	2307      	movs	r3, #7
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a86:	f107 0314 	add.w	r3, r7, #20
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4805      	ldr	r0, [pc, #20]	; (8002aa4 <HAL_UART_MspInit+0x8c>)
 8002a8e:	f001 f9dd 	bl	8003e4c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a92:	bf00      	nop
 8002a94:	3728      	adds	r7, #40	; 0x28
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40004400 	.word	0x40004400
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40020000 	.word	0x40020000

08002aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ae0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002aac:	480d      	ldr	r0, [pc, #52]	; (8002ae4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002aae:	490e      	ldr	r1, [pc, #56]	; (8002ae8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ab0:	4a0e      	ldr	r2, [pc, #56]	; (8002aec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ab4:	e002      	b.n	8002abc <LoopCopyDataInit>

08002ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aba:	3304      	adds	r3, #4

08002abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ac0:	d3f9      	bcc.n	8002ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ac2:	4a0b      	ldr	r2, [pc, #44]	; (8002af0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ac4:	4c0b      	ldr	r4, [pc, #44]	; (8002af4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ac8:	e001      	b.n	8002ace <LoopFillZerobss>

08002aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002acc:	3204      	adds	r2, #4

08002ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ad0:	d3fb      	bcc.n	8002aca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ad2:	f7ff fd1b 	bl	800250c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ad6:	f003 fcf3 	bl	80064c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ada:	f7ff fb4f 	bl	800217c <main>
  bx  lr    
 8002ade:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ae0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ae8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002aec:	080084b0 	.word	0x080084b0
  ldr r2, =_sbss
 8002af0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002af4:	20000658 	.word	0x20000658

08002af8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002af8:	e7fe      	b.n	8002af8 <ADC_IRQHandler>
	...

08002afc <arm_atan2_f32>:
                   and compute the right angle.
*/


arm_status arm_atan2_f32(float32_t y,float32_t x,float32_t *result)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b0a1      	sub	sp, #132	; 0x84
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	ed87 0a03 	vstr	s0, [r7, #12]
 8002b06:	edc7 0a02 	vstr	s1, [r7, #8]
 8002b0a:	6078      	str	r0, [r7, #4]
    if (x > 0.0f)
 8002b0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b18:	f340 808e 	ble.w	8002c38 <arm_atan2_f32+0x13c>
    {
        *result=arm_atan_f32(y/x);
 8002b1c:	edd7 6a03 	vldr	s13, [r7, #12]
 8002b20:	ed97 7a02 	vldr	s14, [r7, #8]
 8002b24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b28:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
   int sign=0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	67bb      	str	r3, [r7, #120]	; 0x78
   float32_t res=0.0f;
 8002b30:	f04f 0300 	mov.w	r3, #0
 8002b34:	677b      	str	r3, [r7, #116]	; 0x74
   if (x < 0.0f)
 8002b36:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002b3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b42:	d507      	bpl.n	8002b54 <arm_atan2_f32+0x58>
      sign=1;
 8002b44:	2301      	movs	r3, #1
 8002b46:	67bb      	str	r3, [r7, #120]	; 0x78
      x=-x;
 8002b48:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002b4c:	eef1 7a67 	vneg.f32	s15, s15
 8002b50:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
   if (x > 1.0f)
 8002b54:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002b58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b64:	dd31      	ble.n	8002bca <arm_atan2_f32+0xce>
      x = 1.0f / x;
 8002b66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b6a:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002b6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b72:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
 8002b76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b78:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8002b7a:	4bb5      	ldr	r3, [pc, #724]	; (8002e50 <arm_atan2_f32+0x354>)
 8002b7c:	66fb      	str	r3, [r7, #108]	; 0x6c
    int i=1;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	66bb      	str	r3, [r7, #104]	; 0x68
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002b82:	2301      	movs	r3, #1
 8002b84:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b86:	e014      	b.n	8002bb2 <arm_atan2_f32+0xb6>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8002b88:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002b8c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002b90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b96:	f1c3 0309 	rsb	r3, r3, #9
 8002b9a:	4aae      	ldr	r2, [pc, #696]	; (8002e54 <arm_atan2_f32+0x358>)
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	edd3 7a00 	vldr	s15, [r3]
 8002ba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ba8:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002bac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bae:	3301      	adds	r3, #1
 8002bb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bb4:	2b09      	cmp	r3, #9
 8002bb6:	dde7      	ble.n	8002b88 <arm_atan2_f32+0x8c>
    return(res);
 8002bb8:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8002bbc:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002e58 <arm_atan2_f32+0x35c>
 8002bc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bc4:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
 8002bc8:	e028      	b.n	8002c1c <arm_atan2_f32+0x120>
 8002bca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bcc:	667b      	str	r3, [r7, #100]	; 0x64
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8002bce:	4ba0      	ldr	r3, [pc, #640]	; (8002e50 <arm_atan2_f32+0x354>)
 8002bd0:	663b      	str	r3, [r7, #96]	; 0x60
    int i=1;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bda:	e014      	b.n	8002c06 <arm_atan2_f32+0x10a>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8002bdc:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002be0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002be4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002be8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bea:	f1c3 0309 	rsb	r3, r3, #9
 8002bee:	4a99      	ldr	r2, [pc, #612]	; (8002e54 <arm_atan2_f32+0x358>)
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	edd3 7a00 	vldr	s15, [r3]
 8002bf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bfc:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002c00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c02:	3301      	adds	r3, #1
 8002c04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c08:	2b09      	cmp	r3, #9
 8002c0a:	dde7      	ble.n	8002bdc <arm_atan2_f32+0xe0>
    return(res);
 8002c0c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
     res += arm_atan_limited_f32(x);
 8002c10:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002c14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c18:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
   if (sign)
 8002c1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d005      	beq.n	8002c2e <arm_atan2_f32+0x132>
     res = -res;
 8002c22:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002c26:	eef1 7a67 	vneg.f32	s15, s15
 8002c2a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
   return(res);
 8002c2e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
        *result=arm_atan_f32(y/x);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	601a      	str	r2, [r3, #0]
        return(ARM_MATH_SUCCESS);
 8002c34:	2300      	movs	r3, #0
 8002c36:	e175      	b.n	8002f24 <arm_atan2_f32+0x428>
    }
    if (x < 0.0f)
 8002c38:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c44:	f140 814d 	bpl.w	8002ee2 <arm_atan2_f32+0x3e6>
    {
        if (y > 0.0f)
 8002c48:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c54:	f340 8093 	ble.w	8002d7e <arm_atan2_f32+0x282>
        {
           *result=arm_atan_f32(y/x) + PI;
 8002c58:	edd7 6a03 	vldr	s13, [r7, #12]
 8002c5c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002c60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c64:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
   int sign=0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	657b      	str	r3, [r7, #84]	; 0x54
   float32_t res=0.0f;
 8002c6c:	f04f 0300 	mov.w	r3, #0
 8002c70:	653b      	str	r3, [r7, #80]	; 0x50
   if (x < 0.0f)
 8002c72:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002c76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c7e:	d507      	bpl.n	8002c90 <arm_atan2_f32+0x194>
      sign=1;
 8002c80:	2301      	movs	r3, #1
 8002c82:	657b      	str	r3, [r7, #84]	; 0x54
      x=-x;
 8002c84:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002c88:	eef1 7a67 	vneg.f32	s15, s15
 8002c8c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
   if (x > 1.0f)
 8002c90:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002c94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca0:	dd31      	ble.n	8002d06 <arm_atan2_f32+0x20a>
      x = 1.0f / x;
 8002ca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ca6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002caa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cae:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8002cb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8002cb6:	4b66      	ldr	r3, [pc, #408]	; (8002e50 <arm_atan2_f32+0x354>)
 8002cb8:	64bb      	str	r3, [r7, #72]	; 0x48
    int i=1;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	647b      	str	r3, [r7, #68]	; 0x44
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	647b      	str	r3, [r7, #68]	; 0x44
 8002cc2:	e014      	b.n	8002cee <arm_atan2_f32+0x1f2>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8002cc4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002cc8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002ccc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cd2:	f1c3 0309 	rsb	r3, r3, #9
 8002cd6:	4a5f      	ldr	r2, [pc, #380]	; (8002e54 <arm_atan2_f32+0x358>)
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	edd3 7a00 	vldr	s15, [r3]
 8002ce0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ce4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cea:	3301      	adds	r3, #1
 8002cec:	647b      	str	r3, [r7, #68]	; 0x44
 8002cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cf0:	2b09      	cmp	r3, #9
 8002cf2:	dde7      	ble.n	8002cc4 <arm_atan2_f32+0x1c8>
    return(res);
 8002cf4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8002cf8:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8002e58 <arm_atan2_f32+0x35c>
 8002cfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d00:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8002d04:	e028      	b.n	8002d58 <arm_atan2_f32+0x25c>
 8002d06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d08:	643b      	str	r3, [r7, #64]	; 0x40
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8002d0a:	4b51      	ldr	r3, [pc, #324]	; (8002e50 <arm_atan2_f32+0x354>)
 8002d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    int i=1;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	63bb      	str	r3, [r7, #56]	; 0x38
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002d12:	2301      	movs	r3, #1
 8002d14:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d16:	e014      	b.n	8002d42 <arm_atan2_f32+0x246>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8002d18:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002d1c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002d20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d26:	f1c3 0309 	rsb	r3, r3, #9
 8002d2a:	4a4a      	ldr	r2, [pc, #296]	; (8002e54 <arm_atan2_f32+0x358>)
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	edd3 7a00 	vldr	s15, [r3]
 8002d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d38:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3e:	3301      	adds	r3, #1
 8002d40:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d44:	2b09      	cmp	r3, #9
 8002d46:	dde7      	ble.n	8002d18 <arm_atan2_f32+0x21c>
    return(res);
 8002d48:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
     res += arm_atan_limited_f32(x);
 8002d4c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d54:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
   if (sign)
 8002d58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d005      	beq.n	8002d6a <arm_atan2_f32+0x26e>
     res = -res;
 8002d5e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002d62:	eef1 7a67 	vneg.f32	s15, s15
 8002d66:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
   return(res);
 8002d6a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
           *result=arm_atan_f32(y/x) + PI;
 8002d6e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002e5c <arm_atan2_f32+0x360>
 8002d72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	edc3 7a00 	vstr	s15, [r3]
 8002d7c:	e0af      	b.n	8002ede <arm_atan2_f32+0x3e2>
        }
        else if (y < 0.0f)
 8002d7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8a:	f140 809c 	bpl.w	8002ec6 <arm_atan2_f32+0x3ca>
        {
           *result=arm_atan_f32(y/x) - PI;
 8002d8e:	edd7 6a03 	vldr	s13, [r7, #12]
 8002d92:	ed97 7a02 	vldr	s14, [r7, #8]
 8002d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d9a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
   int sign=0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	633b      	str	r3, [r7, #48]	; 0x30
   float32_t res=0.0f;
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	62fb      	str	r3, [r7, #44]	; 0x2c
   if (x < 0.0f)
 8002da8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002dac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db4:	d507      	bpl.n	8002dc6 <arm_atan2_f32+0x2ca>
      sign=1;
 8002db6:	2301      	movs	r3, #1
 8002db8:	633b      	str	r3, [r7, #48]	; 0x30
      x=-x;
 8002dba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002dbe:	eef1 7a67 	vneg.f32	s15, s15
 8002dc2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
   if (x > 1.0f)
 8002dc6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002dca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002dce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd6:	dd31      	ble.n	8002e3c <arm_atan2_f32+0x340>
      x = 1.0f / x;
 8002dd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ddc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002de0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002de4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8002de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dea:	62bb      	str	r3, [r7, #40]	; 0x28
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8002dec:	4b18      	ldr	r3, [pc, #96]	; (8002e50 <arm_atan2_f32+0x354>)
 8002dee:	627b      	str	r3, [r7, #36]	; 0x24
    int i=1;
 8002df0:	2301      	movs	r3, #1
 8002df2:	623b      	str	r3, [r7, #32]
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002df4:	2301      	movs	r3, #1
 8002df6:	623b      	str	r3, [r7, #32]
 8002df8:	e014      	b.n	8002e24 <arm_atan2_f32+0x328>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8002dfa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002dfe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002e02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	f1c3 0309 	rsb	r3, r3, #9
 8002e0c:	4a11      	ldr	r2, [pc, #68]	; (8002e54 <arm_atan2_f32+0x358>)
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	edd3 7a00 	vldr	s15, [r3]
 8002e16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e1a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	3301      	adds	r3, #1
 8002e22:	623b      	str	r3, [r7, #32]
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	2b09      	cmp	r3, #9
 8002e28:	dde7      	ble.n	8002dfa <arm_atan2_f32+0x2fe>
    return(res);
 8002e2a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8002e2e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002e58 <arm_atan2_f32+0x35c>
 8002e32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e36:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8002e3a:	e031      	b.n	8002ea0 <arm_atan2_f32+0x3a4>
 8002e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e3e:	61fb      	str	r3, [r7, #28]
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8002e40:	4b03      	ldr	r3, [pc, #12]	; (8002e50 <arm_atan2_f32+0x354>)
 8002e42:	61bb      	str	r3, [r7, #24]
    int i=1;
 8002e44:	2301      	movs	r3, #1
 8002e46:	617b      	str	r3, [r7, #20]
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002e48:	2301      	movs	r3, #1
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	e01d      	b.n	8002e8a <arm_atan2_f32+0x38e>
 8002e4e:	bf00      	nop
 8002e50:	bd0492a5 	.word	0xbd0492a5
 8002e54:	08008430 	.word	0x08008430
 8002e58:	3fc90fdb 	.word	0x3fc90fdb
 8002e5c:	40490fdb 	.word	0x40490fdb
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8002e60:	ed97 7a07 	vldr	s14, [r7, #28]
 8002e64:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f1c3 0309 	rsb	r3, r3, #9
 8002e72:	4a2f      	ldr	r2, [pc, #188]	; (8002f30 <arm_atan2_f32+0x434>)
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	edd3 7a00 	vldr	s15, [r3]
 8002e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e80:	edc7 7a06 	vstr	s15, [r7, #24]
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	3301      	adds	r3, #1
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2b09      	cmp	r3, #9
 8002e8e:	dde7      	ble.n	8002e60 <arm_atan2_f32+0x364>
    return(res);
 8002e90:	edd7 7a06 	vldr	s15, [r7, #24]
     res += arm_atan_limited_f32(x);
 8002e94:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002e98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e9c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
   if (sign)
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d005      	beq.n	8002eb2 <arm_atan2_f32+0x3b6>
     res = -res;
 8002ea6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002eaa:	eef1 7a67 	vneg.f32	s15, s15
 8002eae:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
   return(res);
 8002eb2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
           *result=arm_atan_f32(y/x) - PI;
 8002eb6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002f34 <arm_atan2_f32+0x438>
 8002eba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	edc3 7a00 	vstr	s15, [r3]
 8002ec4:	e00b      	b.n	8002ede <arm_atan2_f32+0x3e2>
        }
        else
        {
            if (signbit(y))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <arm_atan2_f32+0x3dc>
            {
               *result= -PI;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a19      	ldr	r2, [pc, #100]	; (8002f38 <arm_atan2_f32+0x43c>)
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	e002      	b.n	8002ede <arm_atan2_f32+0x3e2>
            }
            else
            {
               *result= PI;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a18      	ldr	r2, [pc, #96]	; (8002f3c <arm_atan2_f32+0x440>)
 8002edc:	601a      	str	r2, [r3, #0]
            }
        }
        return(ARM_MATH_SUCCESS);
 8002ede:	2300      	movs	r3, #0
 8002ee0:	e020      	b.n	8002f24 <arm_atan2_f32+0x428>
    }
    if (x == 0.0f)
 8002ee2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ee6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eee:	d117      	bne.n	8002f20 <arm_atan2_f32+0x424>
    {
        if (y > 0.0f)
 8002ef0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ef4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002efc:	dd04      	ble.n	8002f08 <arm_atan2_f32+0x40c>
        {
            *result=PIHALFF32;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a0f      	ldr	r2, [pc, #60]	; (8002f40 <arm_atan2_f32+0x444>)
 8002f02:	601a      	str	r2, [r3, #0]
            return(ARM_MATH_SUCCESS);
 8002f04:	2300      	movs	r3, #0
 8002f06:	e00d      	b.n	8002f24 <arm_atan2_f32+0x428>
        }
        if (y < 0.0f)
 8002f08:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f14:	d504      	bpl.n	8002f20 <arm_atan2_f32+0x424>
        {
            *result=-PIHALFF32;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <arm_atan2_f32+0x448>)
 8002f1a:	601a      	str	r2, [r3, #0]
            return(ARM_MATH_SUCCESS);
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	e001      	b.n	8002f24 <arm_atan2_f32+0x428>
        }
    }
    

    return(ARM_MATH_NANINF);
 8002f20:	f06f 0303 	mvn.w	r3, #3

}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3784      	adds	r7, #132	; 0x84
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	08008430 	.word	0x08008430
 8002f34:	40490fdb 	.word	0x40490fdb
 8002f38:	c0490fdb 	.word	0xc0490fdb
 8002f3c:	40490fdb 	.word	0x40490fdb
 8002f40:	3fc90fdb 	.word	0x3fc90fdb
 8002f44:	bfc90fdb 	.word	0xbfc90fdb

08002f48 <arm_cos_f32>:
  @param[in]     x  input value in radians
  @return        cos(x)
 */
float32_t arm_cos_f32(
  float32_t x)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b08b      	sub	sp, #44	; 0x2c
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 8002f52:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f56:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003048 <arm_cos_f32+0x100>
 8002f5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f5e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002f62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f66:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8002f6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f72:	ee17 3a90 	vmov	r3, s15
 8002f76:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8002f78:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f84:	d502      	bpl.n	8002f8c <arm_cos_f32+0x44>
  {
    n--;
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	ee07 3a90 	vmov	s15, r3
 8002f92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f96:	ed97 7a06 	vldr	s14, [r7, #24]
 8002f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f9e:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 8002fa2:	edd7 7a06 	vldr	s15, [r7, #24]
 8002fa6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800304c <arm_cos_f32+0x104>
 8002faa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fae:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 8002fb2:	edd7 7a07 	vldr	s15, [r7, #28]
 8002fb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fba:	ee17 3a90 	vmov	r3, s15
 8002fbe:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 8002fc0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002fc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fc6:	d309      	bcc.n	8002fdc <arm_cos_f32+0x94>
    index = 0;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	84fb      	strh	r3, [r7, #38]	; 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 8002fcc:	edd7 7a07 	vldr	s15, [r7, #28]
 8002fd0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800304c <arm_cos_f32+0x104>
 8002fd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fd8:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8002fdc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002fde:	ee07 3a90 	vmov	s15, r3
 8002fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fe6:	ed97 7a07 	vldr	s14, [r7, #28]
 8002fea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fee:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 8002ff2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ff4:	4a16      	ldr	r2, [pc, #88]	; (8003050 <arm_cos_f32+0x108>)
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8002ffe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003000:	3301      	adds	r3, #1
 8003002:	4a13      	ldr	r2, [pc, #76]	; (8003050 <arm_cos_f32+0x108>)
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  cosVal = (1.0f - fract) * a + fract * b;
 800300c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003010:	edd7 7a05 	vldr	s15, [r7, #20]
 8003014:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003018:	edd7 7a04 	vldr	s15, [r7, #16]
 800301c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003020:	edd7 6a05 	vldr	s13, [r7, #20]
 8003024:	edd7 7a03 	vldr	s15, [r7, #12]
 8003028:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800302c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003030:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (cosVal);
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	ee07 3a90 	vmov	s15, r3
}
 800303a:	eeb0 0a67 	vmov.f32	s0, s15
 800303e:	372c      	adds	r7, #44	; 0x2c
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	3e22f983 	.word	0x3e22f983
 800304c:	44000000 	.word	0x44000000
 8003050:	08007c2c 	.word	0x08007c2c

08003054 <arm_sin_f32>:
  @return        sin(x)
 */

float32_t arm_sin_f32(
  float32_t x)
{
 8003054:	b480      	push	{r7}
 8003056:	b08b      	sub	sp, #44	; 0x2c
 8003058:	af00      	add	r7, sp, #0
 800305a:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 800305e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003062:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800314c <arm_sin_f32+0xf8>
 8003066:	ee67 7a87 	vmul.f32	s15, s15, s14
 800306a:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 800306e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003072:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003076:	ee17 3a90 	vmov	r3, s15
 800307a:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 800307c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003080:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003088:	d502      	bpl.n	8003090 <arm_sin_f32+0x3c>
  {
    n--;
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	3b01      	subs	r3, #1
 800308e:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	ee07 3a90 	vmov	s15, r3
 8003096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800309a:	ed97 7a06 	vldr	s14, [r7, #24]
 800309e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030a2:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 80030a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80030aa:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003150 <arm_sin_f32+0xfc>
 80030ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030b2:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 80030b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80030ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030be:	ee17 3a90 	vmov	r3, s15
 80030c2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 80030c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80030c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ca:	d309      	bcc.n	80030e0 <arm_sin_f32+0x8c>
    index = 0;
 80030cc:	2300      	movs	r3, #0
 80030ce:	84fb      	strh	r3, [r7, #38]	; 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 80030d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80030d4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003150 <arm_sin_f32+0xfc>
 80030d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030dc:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 80030e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80030e2:	ee07 3a90 	vmov	s15, r3
 80030e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80030ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030f2:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 80030f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80030f8:	4a16      	ldr	r2, [pc, #88]	; (8003154 <arm_sin_f32+0x100>)
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8003102:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003104:	3301      	adds	r3, #1
 8003106:	4a13      	ldr	r2, [pc, #76]	; (8003154 <arm_sin_f32+0x100>)
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 8003110:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003114:	edd7 7a05 	vldr	s15, [r7, #20]
 8003118:	ee37 7a67 	vsub.f32	s14, s14, s15
 800311c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003120:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003124:	edd7 6a05 	vldr	s13, [r7, #20]
 8003128:	edd7 7a03 	vldr	s15, [r7, #12]
 800312c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003134:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (sinVal);
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	ee07 3a90 	vmov	s15, r3
}
 800313e:	eeb0 0a67 	vmov.f32	s0, s15
 8003142:	372c      	adds	r7, #44	; 0x2c
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	3e22f983 	.word	0x3e22f983
 8003150:	44000000 	.word	0x44000000
 8003154:	08007c2c 	.word	0x08007c2c

08003158 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8003158:	b480      	push	{r7}
 800315a:	b08b      	sub	sp, #44	; 0x2c
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	461a      	mov	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	885b      	ldrh	r3, [r3, #2]
 8003180:	fb02 f303 	mul.w	r3, r2, r3
 8003184:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800318a:	e013      	b.n	80031b4 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	1d1a      	adds	r2, r3, #4
 8003190:	627a      	str	r2, [r7, #36]	; 0x24
 8003192:	ed93 7a00 	vldr	s14, [r3]
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	1d1a      	adds	r2, r3, #4
 800319a:	623a      	str	r2, [r7, #32]
 800319c:	edd3 7a00 	vldr	s15, [r3]
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	1d1a      	adds	r2, r3, #4
 80031a4:	61fa      	str	r2, [r7, #28]
 80031a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031aa:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	3b01      	subs	r3, #1
 80031b2:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1e8      	bne.n	800318c <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80031ba:	2300      	movs	r3, #0
 80031bc:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 80031be:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	372c      	adds	r7, #44	; 0x2c
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b085      	sub	sp, #20
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	60f8      	str	r0, [r7, #12]
 80031d6:	607b      	str	r3, [r7, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	817b      	strh	r3, [r7, #10]
 80031dc:	4613      	mov	r3, r2
 80031de:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	897a      	ldrh	r2, [r7, #10]
 80031e4:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	893a      	ldrh	r2, [r7, #8]
 80031ea:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	605a      	str	r2, [r3, #4]
}
 80031f2:	bf00      	nop
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 80031fe:	b480      	push	{r7}
 8003200:	b0bb      	sub	sp, #236	; 0xec
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	667b      	str	r3, [r7, #100]	; 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	663b      	str	r3, [r7, #96]	; 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	885b      	ldrh	r3, [r3, #2]
 800321e:	65bb      	str	r3, [r7, #88]	; 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 8003220:	f04f 0300 	mov.w	r3, #0
 8003224:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800322e:	2300      	movs	r3, #0
 8003230:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 8003234:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003236:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800323a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800323c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8003240:	e03b      	b.n	80032ba <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 8003242:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003244:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 800324e:	e00c      	b.n	800326a <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 8003250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003254:	1d1a      	adds	r2, r3, #4
 8003256:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
        j--;
 8003260:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003264:	3b01      	subs	r3, #1
 8003266:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 800326a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1ee      	bne.n	8003250 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 8003272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003276:	1d1a      	adds	r2, r3, #4
 8003278:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800327c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003280:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 8003282:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003286:	3b01      	subs	r3, #1
 8003288:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 800328c:	e00c      	b.n	80032a8 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800328e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003292:	1d1a      	adds	r2, r3, #4
 8003294:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	601a      	str	r2, [r3, #0]
        j--;
 800329e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80032a2:	3b01      	subs	r3, #1
 80032a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 80032a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1ee      	bne.n	800328e <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 80032b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80032b4:	3b01      	subs	r3, #1
 80032b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    while (rowCnt > 0U)
 80032ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1bf      	bne.n	8003242 <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 80032c2:	2300      	movs	r3, #0
 80032c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80032c8:	e2c7      	b.n	800385a <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 80032ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032ce:	653b      	str	r3, [r7, #80]	; 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	885b      	ldrh	r3, [r3, #2]
 80032d8:	3301      	adds	r3, #1
 80032da:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80032de:	fb01 f303 	mul.w	r3, r1, r3
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      pivot = *pTmp;
 80032ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      selectedRow = column;
 80032f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 80032fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003300:	3301      	adds	r3, #1
 8003302:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003306:	e02c      	b.n	8003362 <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	885b      	ldrh	r3, [r3, #2]
 8003310:	4619      	mov	r1, r3
 8003312:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003316:	fb03 f101 	mul.w	r1, r3, r1
 800331a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800331e:	440b      	add	r3, r1
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
          newPivot = *pTmp;
 8003328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	657b      	str	r3, [r7, #84]	; 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 8003330:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003334:	eeb0 7ae7 	vabs.f32	s14, s15
 8003338:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800333c:	eef0 7ae7 	vabs.f32	s15, s15
 8003340:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003348:	dd06      	ble.n	8003358 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800334a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800334e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            pivot = newPivot;
 8003352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003354:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8003358:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800335c:	3301      	adds	r3, #1
 800335e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003362:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003368:	429a      	cmp	r2, r3
 800336a:	d3cd      	bcc.n	8003308 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800336c:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8003370:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003378:	f000 809b 	beq.w	80034b2 <arm_mat_inverse_f32+0x2b4>
 800337c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003380:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003384:	429a      	cmp	r2, r3
 8003386:	f000 8094 	beq.w	80034b2 <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	885b      	ldrh	r3, [r3, #2]
 800339e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80033aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80033ae:	fb03 f202 	mul.w	r2, r3, r2
 80033b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033b6:	4413      	add	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80033be:	4413      	add	r3, r2
 80033c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80033ca:	fb03 f202 	mul.w	r2, r3, r2
 80033ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033d2:	4413      	add	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033da:	4413      	add	r3, r2
 80033dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033e0:	2300      	movs	r3, #0
 80033e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80033e6:	e018      	b.n	800341a <arm_mat_inverse_f32+0x21c>
 80033e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80033f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80033f4:	1d1a      	adds	r2, r3, #4
 80033f6:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 80033fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033fe:	6812      	ldr	r2, [r2, #0]
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003406:	1d1a      	adds	r2, r3, #4
 8003408:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800340c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003414:	3301      	adds	r3, #1
 8003416:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800341a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800341e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003420:	429a      	cmp	r2, r3
 8003422:	dbe1      	blt.n	80033e8 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	885b      	ldrh	r3, [r3, #2]
 8003438:	647b      	str	r3, [r7, #68]	; 0x44
 800343a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800343c:	643b      	str	r3, [r7, #64]	; 0x40
 800343e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003440:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003442:	fb02 f303 	mul.w	r3, r2, r3
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800344c:	4413      	add	r3, r2
 800344e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003454:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003458:	fb02 f303 	mul.w	r3, r2, r3
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003462:	4413      	add	r3, r2
 8003464:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003468:	2300      	movs	r3, #0
 800346a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800346e:	e018      	b.n	80034a2 <arm_mat_inverse_f32+0x2a4>
 8003470:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003478:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800347c:	1d1a      	adds	r2, r3, #4
 800347e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003482:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003486:	6812      	ldr	r2, [r2, #0]
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800348e:	1d1a      	adds	r2, r3, #4
 8003490:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003494:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800349c:	3301      	adds	r3, #1
 800349e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80034a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034a8:	429a      	cmp	r2, r3
 80034aa:	dbe1      	blt.n	8003470 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 80034ac:	2301      	movs	r3, #1
 80034ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 80034b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d009      	beq.n	80034ce <arm_mat_inverse_f32+0x2d0>
 80034ba:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80034be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80034c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c6:	d102      	bne.n	80034ce <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 80034c8:	f06f 0304 	mvn.w	r3, #4
 80034cc:	e208      	b.n	80038e0 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 80034ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034d2:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 80034d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034da:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	885b      	ldrh	r3, [r3, #2]
 80034ea:	637b      	str	r3, [r7, #52]	; 0x34
 80034ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	633b      	str	r3, [r7, #48]	; 0x30
 80034f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80034fa:	fb03 f202 	mul.w	r2, r3, r2
 80034fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003502:	4413      	add	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800350a:	4413      	add	r3, r2
 800350c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003510:	2300      	movs	r3, #0
 8003512:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003516:	e011      	b.n	800353c <arm_mat_inverse_f32+0x33e>
 8003518:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800351c:	1d1a      	adds	r2, r3, #4
 800351e:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8003522:	ed93 7a00 	vldr	s14, [r3]
 8003526:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800352a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800352e:	edc3 7a00 	vstr	s15, [r3]
 8003532:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003536:	3301      	adds	r3, #1
 8003538:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800353c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8003540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003542:	429a      	cmp	r2, r3
 8003544:	dbe8      	blt.n	8003518 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	885b      	ldrh	r3, [r3, #2]
 8003552:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003556:	62bb      	str	r3, [r7, #40]	; 0x28
 8003558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800355c:	fb02 f303 	mul.w	r3, r2, r3
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003566:	4413      	add	r3, r2
 8003568:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800356c:	2300      	movs	r3, #0
 800356e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003572:	e011      	b.n	8003598 <arm_mat_inverse_f32+0x39a>
 8003574:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003578:	1d1a      	adds	r2, r3, #4
 800357a:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800357e:	ed93 7a00 	vldr	s14, [r3]
 8003582:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8003586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800358a:	edc3 7a00 	vstr	s15, [r3]
 800358e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003592:	3301      	adds	r3, #1
 8003594:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003598:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800359c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359e:	429a      	cmp	r2, r3
 80035a0:	dbe8      	blt.n	8003574 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 80035a2:	2300      	movs	r3, #0
 80035a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      for (;rowNb < pivotRow; rowNb++)
 80035a8:	e0ae      	b.n	8003708 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	885b      	ldrh	r3, [r3, #2]
 80035b2:	4619      	mov	r1, r3
 80035b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035b8:	fb03 f101 	mul.w	r1, r3, r1
 80035bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035c0:	440b      	add	r3, r1
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           pivot = *pTmp;
 80035ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	885b      	ldrh	r3, [r3, #2]
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	613b      	str	r3, [r7, #16]
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80035fa:	fb03 f202 	mul.w	r2, r3, r2
 80035fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003602:	4413      	add	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800360a:	4413      	add	r3, r2
 800360c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003614:	fb03 f202 	mul.w	r2, r3, r2
 8003618:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800361c:	4413      	add	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003624:	4413      	add	r3, r2
 8003626:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800362a:	2300      	movs	r3, #0
 800362c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003630:	e01a      	b.n	8003668 <arm_mat_inverse_f32+0x46a>
 8003632:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003636:	1d1a      	adds	r2, r3, #4
 8003638:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800363c:	ed93 7a00 	vldr	s14, [r3]
 8003640:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8003644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003648:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800364c:	1d1a      	adds	r2, r3, #4
 800364e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8003652:	ed93 7a00 	vldr	s14, [r3]
 8003656:	ee77 7a67 	vsub.f32	s15, s14, s15
 800365a:	edc3 7a00 	vstr	s15, [r3]
 800365e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003662:	3301      	adds	r3, #1
 8003664:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003668:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	429a      	cmp	r2, r3
 8003670:	dbdf      	blt.n	8003632 <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	885b      	ldrh	r3, [r3, #2]
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	60bb      	str	r3, [r7, #8]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003692:	fb02 f303 	mul.w	r3, r2, r3
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800369c:	4413      	add	r3, r2
 800369e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80036a6:	fb02 f303 	mul.w	r3, r2, r3
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80036b0:	4413      	add	r3, r2
 80036b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036b6:	2300      	movs	r3, #0
 80036b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80036bc:	e01a      	b.n	80036f4 <arm_mat_inverse_f32+0x4f6>
 80036be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80036c2:	1d1a      	adds	r2, r3, #4
 80036c4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80036c8:	ed93 7a00 	vldr	s14, [r3]
 80036cc:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80036d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036d8:	1d1a      	adds	r2, r3, #4
 80036da:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80036de:	ed93 7a00 	vldr	s14, [r3]
 80036e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036e6:	edc3 7a00 	vstr	s15, [r3]
 80036ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036ee:	3301      	adds	r3, #1
 80036f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80036f4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	dbdf      	blt.n	80036be <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 80036fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003702:	3301      	adds	r3, #1
 8003704:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003708:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800370c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800370e:	429a      	cmp	r2, r3
 8003710:	f4ff af4b 	bcc.w	80035aa <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8003714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003716:	3301      	adds	r3, #1
 8003718:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800371c:	e092      	b.n	8003844 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	885b      	ldrh	r3, [r3, #2]
 8003726:	4619      	mov	r1, r3
 8003728:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800372c:	fb03 f101 	mul.w	r1, r3, r1
 8003730:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003734:	440b      	add	r3, r1
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           pivot = *pTmp;
 800373e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	67bb      	str	r3, [r7, #120]	; 0x78
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	677b      	str	r3, [r7, #116]	; 0x74
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	885b      	ldrh	r3, [r3, #2]
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
 800375a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800375c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	623b      	str	r3, [r7, #32]
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800376a:	fb03 f202 	mul.w	r2, r3, r2
 800376e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003772:	4413      	add	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003778:	4413      	add	r3, r2
 800377a:	67bb      	str	r3, [r7, #120]	; 0x78
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003780:	fb03 f202 	mul.w	r2, r3, r2
 8003784:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003788:	4413      	add	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800378e:	4413      	add	r3, r2
 8003790:	677b      	str	r3, [r7, #116]	; 0x74
 8003792:	2300      	movs	r3, #0
 8003794:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003796:	e014      	b.n	80037c2 <arm_mat_inverse_f32+0x5c4>
 8003798:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800379a:	1d1a      	adds	r2, r3, #4
 800379c:	677a      	str	r2, [r7, #116]	; 0x74
 800379e:	ed93 7a00 	vldr	s14, [r3]
 80037a2:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80037a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037ac:	1d1a      	adds	r2, r3, #4
 80037ae:	67ba      	str	r2, [r7, #120]	; 0x78
 80037b0:	ed93 7a00 	vldr	s14, [r3]
 80037b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037b8:	edc3 7a00 	vstr	s15, [r3]
 80037bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037be:	3301      	adds	r3, #1
 80037c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80037c2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	dbe6      	blt.n	8003798 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	885b      	ldrh	r3, [r3, #2]
 80037da:	61fb      	str	r3, [r7, #28]
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	61bb      	str	r3, [r7, #24]
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80037e6:	fb02 f303 	mul.w	r3, r2, r3
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037ee:	4413      	add	r3, r2
 80037f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80037f6:	fb02 f303 	mul.w	r3, r2, r3
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80037fe:	4413      	add	r3, r2
 8003800:	66bb      	str	r3, [r7, #104]	; 0x68
 8003802:	2300      	movs	r3, #0
 8003804:	673b      	str	r3, [r7, #112]	; 0x70
 8003806:	e014      	b.n	8003832 <arm_mat_inverse_f32+0x634>
 8003808:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800380a:	1d1a      	adds	r2, r3, #4
 800380c:	66ba      	str	r2, [r7, #104]	; 0x68
 800380e:	ed93 7a00 	vldr	s14, [r3]
 8003812:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8003816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800381a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800381c:	1d1a      	adds	r2, r3, #4
 800381e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003820:	ed93 7a00 	vldr	s14, [r3]
 8003824:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003828:	edc3 7a00 	vstr	s15, [r3]
 800382c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800382e:	3301      	adds	r3, #1
 8003830:	673b      	str	r3, [r7, #112]	; 0x70
 8003832:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	429a      	cmp	r2, r3
 8003838:	dbe6      	blt.n	8003808 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800383a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800383e:	3301      	adds	r3, #1
 8003840:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003844:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003848:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800384a:	429a      	cmp	r2, r3
 800384c:	f4ff af67 	bcc.w	800371e <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 8003850:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003854:	3301      	adds	r3, #1
 8003856:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800385a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800385e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003860:	429a      	cmp	r2, r3
 8003862:	f4ff ad32 	bcc.w	80032ca <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8003866:	2300      	movs	r3, #0
 8003868:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800386c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003870:	2b01      	cmp	r3, #1
 8003872:	d033      	beq.n	80038dc <arm_mat_inverse_f32+0x6de>
 8003874:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8003878:	eef5 7a40 	vcmp.f32	s15, #0.0
 800387c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003880:	d12c      	bne.n	80038dc <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	667b      	str	r3, [r7, #100]	; 0x64
      for (i = 0; i < numRows * numCols; i++)
 8003888:	2300      	movs	r3, #0
 800388a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800388e:	e010      	b.n	80038b2 <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 8003890:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003898:	4413      	add	r3, r2
 800389a:	edd3 7a00 	vldr	s15, [r3]
 800389e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80038a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038a6:	d10d      	bne.n	80038c4 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 80038a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038ac:	3301      	adds	r3, #1
 80038ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80038b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038b6:	fb02 f303 	mul.w	r3, r2, r3
 80038ba:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80038be:	429a      	cmp	r2, r3
 80038c0:	d3e6      	bcc.n	8003890 <arm_mat_inverse_f32+0x692>
 80038c2:	e000      	b.n	80038c6 <arm_mat_inverse_f32+0x6c8>
            break;
 80038c4:	bf00      	nop
      }

      if (i == numRows * numCols)
 80038c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038ca:	fb02 f303 	mul.w	r3, r2, r3
 80038ce:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d102      	bne.n	80038dc <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 80038d6:	23fb      	movs	r3, #251	; 0xfb
 80038d8:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
    }
  }

  /* Return to application */
  return (status);
 80038dc:	f997 30c3 	ldrsb.w	r3, [r7, #195]	; 0xc3
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	37ec      	adds	r7, #236	; 0xec
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b093      	sub	sp, #76	; 0x4c
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	643b      	str	r3, [r7, #64]	; 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	885b      	ldrh	r3, [r3, #2]
 8003920:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	885b      	ldrh	r3, [r3, #2]
 8003926:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 8003928:	2300      	movs	r3, #0
 800392a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800392c:	8b7b      	ldrh	r3, [r7, #26]
 800392e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 8003930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	69fa      	ldr	r2, [r7, #28]
 8003936:	4413      	add	r3, r2
 8003938:	63bb      	str	r3, [r7, #56]	; 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800393a:	8b3b      	ldrh	r3, [r7, #24]
 800393c:	633b      	str	r3, [r7, #48]	; 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	643b      	str	r3, [r7, #64]	; 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8003944:	f04f 0300 	mov.w	r3, #0
 8003948:	637b      	str	r3, [r7, #52]	; 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800394a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800394c:	647b      	str	r3, [r7, #68]	; 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800394e:	8afb      	ldrh	r3, [r7, #22]
 8003950:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 8003952:	e017      	b.n	8003984 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 8003954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003956:	1d1a      	adds	r2, r3, #4
 8003958:	647a      	str	r2, [r7, #68]	; 0x44
 800395a:	ed93 7a00 	vldr	s14, [r3]
 800395e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003960:	edd3 7a00 	vldr	s15, [r3]
 8003964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003968:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800396c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003970:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
          pIn2 += numColsB;
 8003974:	8b3b      	ldrh	r3, [r7, #24]
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800397a:	4413      	add	r3, r2
 800397c:	643b      	str	r3, [r7, #64]	; 0x40

          /* Decrement loop counter */
          colCnt--;
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	3b01      	subs	r3, #1
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
        while (colCnt > 0U)
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1e4      	bne.n	8003954 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800398a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398c:	1d1a      	adds	r2, r3, #4
 800398e:	63ba      	str	r2, [r7, #56]	; 0x38
 8003990:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003992:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 8003994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003996:	3b01      	subs	r3, #1
 8003998:	633b      	str	r3, [r7, #48]	; 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800399a:	8b3a      	ldrh	r2, [r7, #24]
 800399c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	6a3a      	ldr	r2, [r7, #32]
 80039a4:	4413      	add	r3, r2
 80039a6:	643b      	str	r3, [r7, #64]	; 0x40

      } while (col > 0U);
 80039a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1ca      	bne.n	8003944 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 80039ae:	8b3b      	ldrh	r3, [r7, #24]
 80039b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039b2:	4413      	add	r3, r2
 80039b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pInA = pInA + numColsA;
 80039b6:	8afb      	ldrh	r3, [r7, #22]
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039bc:	4413      	add	r3, r2
 80039be:	63fb      	str	r3, [r7, #60]	; 0x3c

      /* Decrement row loop counter */
      row--;
 80039c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c2:	3b01      	subs	r3, #1
 80039c4:	62bb      	str	r3, [r7, #40]	; 0x28

    } while (row > 0U);
 80039c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1b1      	bne.n	8003930 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80039cc:	2300      	movs	r3, #0
 80039ce:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 80039d0:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	374c      	adds	r7, #76	; 0x4c
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b08b      	sub	sp, #44	; 0x2c
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80039ec:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	885b      	ldrh	r3, [r3, #2]
 8003a04:	fb02 f303 	mul.w	r3, r2, r3
 8003a08:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8003a0e:	e010      	b.n	8003a32 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	1d1a      	adds	r2, r3, #4
 8003a14:	627a      	str	r2, [r7, #36]	; 0x24
 8003a16:	ed93 7a00 	vldr	s14, [r3]
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	1d1a      	adds	r2, r3, #4
 8003a1e:	623a      	str	r2, [r7, #32]
 8003a20:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a28:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1eb      	bne.n	8003a10 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 8003a3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	372c      	adds	r7, #44	; 0x2c
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b08b      	sub	sp, #44	; 0x2c
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	885b      	ldrh	r3, [r3, #2]
 8003a74:	fb02 f303 	mul.w	r3, r2, r3
 8003a78:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8003a7e:	e013      	b.n	8003aa8 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	1d1a      	adds	r2, r3, #4
 8003a84:	627a      	str	r2, [r7, #36]	; 0x24
 8003a86:	ed93 7a00 	vldr	s14, [r3]
 8003a8a:	6a3b      	ldr	r3, [r7, #32]
 8003a8c:	1d1a      	adds	r2, r3, #4
 8003a8e:	623a      	str	r2, [r7, #32]
 8003a90:	edd3 7a00 	vldr	s15, [r3]
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	1d1a      	adds	r2, r3, #4
 8003a98:	61fa      	str	r2, [r7, #28]
 8003a9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a9e:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1e8      	bne.n	8003a80 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8003ab2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	372c      	adds	r7, #44	; 0x2c
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b08b      	sub	sp, #44	; 0x2c
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	881b      	ldrh	r3, [r3, #0]
 8003adc:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	885b      	ldrh	r3, [r3, #2]
 8003ae2:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8003ae4:	89fb      	ldrh	r3, [r7, #14]
 8003ae6:	61bb      	str	r3, [r7, #24]
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	4413      	add	r3, r2
 8003af4:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8003af6:	89bb      	ldrh	r3, [r7, #12]
 8003af8:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8003afa:	e00d      	b.n	8003b18 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	1d1a      	adds	r2, r3, #4
 8003b00:	627a      	str	r2, [r7, #36]	; 0x24
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8003b08:	89fb      	ldrh	r3, [r7, #14]
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	6a3a      	ldr	r2, [r7, #32]
 8003b0e:	4413      	add	r3, r2
 8003b10:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	3b01      	subs	r3, #1
 8003b16:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1ee      	bne.n	8003afc <arm_mat_trans_f32+0x3a>
      }

      i++;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	3301      	adds	r3, #1
 8003b22:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1dd      	bne.n	8003aec <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8003b30:	2300      	movs	r3, #0
 8003b32:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 8003b34:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	372c      	adds	r7, #44	; 0x2c
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b48:	4b0e      	ldr	r3, [pc, #56]	; (8003b84 <HAL_Init+0x40>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a0d      	ldr	r2, [pc, #52]	; (8003b84 <HAL_Init+0x40>)
 8003b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b54:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <HAL_Init+0x40>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a0a      	ldr	r2, [pc, #40]	; (8003b84 <HAL_Init+0x40>)
 8003b5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b60:	4b08      	ldr	r3, [pc, #32]	; (8003b84 <HAL_Init+0x40>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a07      	ldr	r2, [pc, #28]	; (8003b84 <HAL_Init+0x40>)
 8003b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b6c:	2003      	movs	r0, #3
 8003b6e:	f000 f92b 	bl	8003dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b72:	2000      	movs	r0, #0
 8003b74:	f000 f808 	bl	8003b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b78:	f7fe fc58 	bl	800242c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40023c00 	.word	0x40023c00

08003b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b90:	4b12      	ldr	r3, [pc, #72]	; (8003bdc <HAL_InitTick+0x54>)
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	4b12      	ldr	r3, [pc, #72]	; (8003be0 <HAL_InitTick+0x58>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	4619      	mov	r1, r3
 8003b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 f943 	bl	8003e32 <HAL_SYSTICK_Config>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e00e      	b.n	8003bd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b0f      	cmp	r3, #15
 8003bba:	d80a      	bhi.n	8003bd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc4:	f000 f90b 	bl	8003dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bc8:	4a06      	ldr	r2, [pc, #24]	; (8003be4 <HAL_InitTick+0x5c>)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	e000      	b.n	8003bd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	20000010 	.word	0x20000010
 8003be0:	20000018 	.word	0x20000018
 8003be4:	20000014 	.word	0x20000014

08003be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bec:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <HAL_IncTick+0x20>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4b06      	ldr	r3, [pc, #24]	; (8003c0c <HAL_IncTick+0x24>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	4a04      	ldr	r2, [pc, #16]	; (8003c0c <HAL_IncTick+0x24>)
 8003bfa:	6013      	str	r3, [r2, #0]
}
 8003bfc:	bf00      	nop
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	20000018 	.word	0x20000018
 8003c0c:	20000654 	.word	0x20000654

08003c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  return uwTick;
 8003c14:	4b03      	ldr	r3, [pc, #12]	; (8003c24 <HAL_GetTick+0x14>)
 8003c16:	681b      	ldr	r3, [r3, #0]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	20000654 	.word	0x20000654

08003c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c38:	4b0c      	ldr	r3, [pc, #48]	; (8003c6c <__NVIC_SetPriorityGrouping+0x44>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c44:	4013      	ands	r3, r2
 8003c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c5a:	4a04      	ldr	r2, [pc, #16]	; (8003c6c <__NVIC_SetPriorityGrouping+0x44>)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	60d3      	str	r3, [r2, #12]
}
 8003c60:	bf00      	nop
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	e000ed00 	.word	0xe000ed00

08003c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c74:	4b04      	ldr	r3, [pc, #16]	; (8003c88 <__NVIC_GetPriorityGrouping+0x18>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	0a1b      	lsrs	r3, r3, #8
 8003c7a:	f003 0307 	and.w	r3, r3, #7
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	e000ed00 	.word	0xe000ed00

08003c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	db0b      	blt.n	8003cb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c9e:	79fb      	ldrb	r3, [r7, #7]
 8003ca0:	f003 021f 	and.w	r2, r3, #31
 8003ca4:	4907      	ldr	r1, [pc, #28]	; (8003cc4 <__NVIC_EnableIRQ+0x38>)
 8003ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003caa:	095b      	lsrs	r3, r3, #5
 8003cac:	2001      	movs	r0, #1
 8003cae:	fa00 f202 	lsl.w	r2, r0, r2
 8003cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	e000e100 	.word	0xe000e100

08003cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	6039      	str	r1, [r7, #0]
 8003cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	db0a      	blt.n	8003cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	490c      	ldr	r1, [pc, #48]	; (8003d14 <__NVIC_SetPriority+0x4c>)
 8003ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce6:	0112      	lsls	r2, r2, #4
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	440b      	add	r3, r1
 8003cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cf0:	e00a      	b.n	8003d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	4908      	ldr	r1, [pc, #32]	; (8003d18 <__NVIC_SetPriority+0x50>)
 8003cf8:	79fb      	ldrb	r3, [r7, #7]
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	3b04      	subs	r3, #4
 8003d00:	0112      	lsls	r2, r2, #4
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	440b      	add	r3, r1
 8003d06:	761a      	strb	r2, [r3, #24]
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	e000e100 	.word	0xe000e100
 8003d18:	e000ed00 	.word	0xe000ed00

08003d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b089      	sub	sp, #36	; 0x24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f1c3 0307 	rsb	r3, r3, #7
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	bf28      	it	cs
 8003d3a:	2304      	movcs	r3, #4
 8003d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	3304      	adds	r3, #4
 8003d42:	2b06      	cmp	r3, #6
 8003d44:	d902      	bls.n	8003d4c <NVIC_EncodePriority+0x30>
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	3b03      	subs	r3, #3
 8003d4a:	e000      	b.n	8003d4e <NVIC_EncodePriority+0x32>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d50:	f04f 32ff 	mov.w	r2, #4294967295
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	43da      	mvns	r2, r3
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	401a      	ands	r2, r3
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d64:	f04f 31ff 	mov.w	r1, #4294967295
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6e:	43d9      	mvns	r1, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d74:	4313      	orrs	r3, r2
         );
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3724      	adds	r7, #36	; 0x24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
	...

08003d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d94:	d301      	bcc.n	8003d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d96:	2301      	movs	r3, #1
 8003d98:	e00f      	b.n	8003dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d9a:	4a0a      	ldr	r2, [pc, #40]	; (8003dc4 <SysTick_Config+0x40>)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003da2:	210f      	movs	r1, #15
 8003da4:	f04f 30ff 	mov.w	r0, #4294967295
 8003da8:	f7ff ff8e 	bl	8003cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dac:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <SysTick_Config+0x40>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003db2:	4b04      	ldr	r3, [pc, #16]	; (8003dc4 <SysTick_Config+0x40>)
 8003db4:	2207      	movs	r2, #7
 8003db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	e000e010 	.word	0xe000e010

08003dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff ff29 	bl	8003c28 <__NVIC_SetPriorityGrouping>
}
 8003dd6:	bf00      	nop
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b086      	sub	sp, #24
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	4603      	mov	r3, r0
 8003de6:	60b9      	str	r1, [r7, #8]
 8003de8:	607a      	str	r2, [r7, #4]
 8003dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003df0:	f7ff ff3e 	bl	8003c70 <__NVIC_GetPriorityGrouping>
 8003df4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	68b9      	ldr	r1, [r7, #8]
 8003dfa:	6978      	ldr	r0, [r7, #20]
 8003dfc:	f7ff ff8e 	bl	8003d1c <NVIC_EncodePriority>
 8003e00:	4602      	mov	r2, r0
 8003e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e06:	4611      	mov	r1, r2
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff ff5d 	bl	8003cc8 <__NVIC_SetPriority>
}
 8003e0e:	bf00      	nop
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b082      	sub	sp, #8
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff ff31 	bl	8003c8c <__NVIC_EnableIRQ>
}
 8003e2a:	bf00      	nop
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b082      	sub	sp, #8
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7ff ffa2 	bl	8003d84 <SysTick_Config>
 8003e40:	4603      	mov	r3, r0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
	...

08003e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b089      	sub	sp, #36	; 0x24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e62:	2300      	movs	r3, #0
 8003e64:	61fb      	str	r3, [r7, #28]
 8003e66:	e159      	b.n	800411c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e68:	2201      	movs	r2, #1
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	f040 8148 	bne.w	8004116 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d005      	beq.n	8003e9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d130      	bne.n	8003f00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68da      	ldr	r2, [r3, #12]
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	43db      	mvns	r3, r3
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	091b      	lsrs	r3, r3, #4
 8003eea:	f003 0201 	and.w	r2, r3, #1
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f003 0303 	and.w	r3, r3, #3
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d017      	beq.n	8003f3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	2203      	movs	r2, #3
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	4013      	ands	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f003 0303 	and.w	r3, r3, #3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d123      	bne.n	8003f90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	08da      	lsrs	r2, r3, #3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3208      	adds	r2, #8
 8003f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	220f      	movs	r2, #15
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	43db      	mvns	r3, r3
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	08da      	lsrs	r2, r3, #3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	3208      	adds	r2, #8
 8003f8a:	69b9      	ldr	r1, [r7, #24]
 8003f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	2203      	movs	r2, #3
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 0203 	and.w	r2, r3, #3
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 80a2 	beq.w	8004116 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	4b57      	ldr	r3, [pc, #348]	; (8004134 <HAL_GPIO_Init+0x2e8>)
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fda:	4a56      	ldr	r2, [pc, #344]	; (8004134 <HAL_GPIO_Init+0x2e8>)
 8003fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8003fe2:	4b54      	ldr	r3, [pc, #336]	; (8004134 <HAL_GPIO_Init+0x2e8>)
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fee:	4a52      	ldr	r2, [pc, #328]	; (8004138 <HAL_GPIO_Init+0x2ec>)
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	089b      	lsrs	r3, r3, #2
 8003ff4:	3302      	adds	r3, #2
 8003ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	f003 0303 	and.w	r3, r3, #3
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	220f      	movs	r2, #15
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	43db      	mvns	r3, r3
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	4013      	ands	r3, r2
 8004010:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a49      	ldr	r2, [pc, #292]	; (800413c <HAL_GPIO_Init+0x2f0>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d019      	beq.n	800404e <HAL_GPIO_Init+0x202>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a48      	ldr	r2, [pc, #288]	; (8004140 <HAL_GPIO_Init+0x2f4>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d013      	beq.n	800404a <HAL_GPIO_Init+0x1fe>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a47      	ldr	r2, [pc, #284]	; (8004144 <HAL_GPIO_Init+0x2f8>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d00d      	beq.n	8004046 <HAL_GPIO_Init+0x1fa>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a46      	ldr	r2, [pc, #280]	; (8004148 <HAL_GPIO_Init+0x2fc>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d007      	beq.n	8004042 <HAL_GPIO_Init+0x1f6>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a45      	ldr	r2, [pc, #276]	; (800414c <HAL_GPIO_Init+0x300>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d101      	bne.n	800403e <HAL_GPIO_Init+0x1f2>
 800403a:	2304      	movs	r3, #4
 800403c:	e008      	b.n	8004050 <HAL_GPIO_Init+0x204>
 800403e:	2307      	movs	r3, #7
 8004040:	e006      	b.n	8004050 <HAL_GPIO_Init+0x204>
 8004042:	2303      	movs	r3, #3
 8004044:	e004      	b.n	8004050 <HAL_GPIO_Init+0x204>
 8004046:	2302      	movs	r3, #2
 8004048:	e002      	b.n	8004050 <HAL_GPIO_Init+0x204>
 800404a:	2301      	movs	r3, #1
 800404c:	e000      	b.n	8004050 <HAL_GPIO_Init+0x204>
 800404e:	2300      	movs	r3, #0
 8004050:	69fa      	ldr	r2, [r7, #28]
 8004052:	f002 0203 	and.w	r2, r2, #3
 8004056:	0092      	lsls	r2, r2, #2
 8004058:	4093      	lsls	r3, r2
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	4313      	orrs	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004060:	4935      	ldr	r1, [pc, #212]	; (8004138 <HAL_GPIO_Init+0x2ec>)
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	089b      	lsrs	r3, r3, #2
 8004066:	3302      	adds	r3, #2
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800406e:	4b38      	ldr	r3, [pc, #224]	; (8004150 <HAL_GPIO_Init+0x304>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	43db      	mvns	r3, r3
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	4013      	ands	r3, r2
 800407c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	4313      	orrs	r3, r2
 8004090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004092:	4a2f      	ldr	r2, [pc, #188]	; (8004150 <HAL_GPIO_Init+0x304>)
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004098:	4b2d      	ldr	r3, [pc, #180]	; (8004150 <HAL_GPIO_Init+0x304>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	43db      	mvns	r3, r3
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	4013      	ands	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040bc:	4a24      	ldr	r2, [pc, #144]	; (8004150 <HAL_GPIO_Init+0x304>)
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040c2:	4b23      	ldr	r3, [pc, #140]	; (8004150 <HAL_GPIO_Init+0x304>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	43db      	mvns	r3, r3
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	4013      	ands	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040e6:	4a1a      	ldr	r2, [pc, #104]	; (8004150 <HAL_GPIO_Init+0x304>)
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040ec:	4b18      	ldr	r3, [pc, #96]	; (8004150 <HAL_GPIO_Init+0x304>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	43db      	mvns	r3, r3
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	4013      	ands	r3, r2
 80040fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004110:	4a0f      	ldr	r2, [pc, #60]	; (8004150 <HAL_GPIO_Init+0x304>)
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	3301      	adds	r3, #1
 800411a:	61fb      	str	r3, [r7, #28]
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	2b0f      	cmp	r3, #15
 8004120:	f67f aea2 	bls.w	8003e68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004124:	bf00      	nop
 8004126:	bf00      	nop
 8004128:	3724      	adds	r7, #36	; 0x24
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	40023800 	.word	0x40023800
 8004138:	40013800 	.word	0x40013800
 800413c:	40020000 	.word	0x40020000
 8004140:	40020400 	.word	0x40020400
 8004144:	40020800 	.word	0x40020800
 8004148:	40020c00 	.word	0x40020c00
 800414c:	40021000 	.word	0x40021000
 8004150:	40013c00 	.word	0x40013c00

08004154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	460b      	mov	r3, r1
 800415e:	807b      	strh	r3, [r7, #2]
 8004160:	4613      	mov	r3, r2
 8004162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004164:	787b      	ldrb	r3, [r7, #1]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800416a:	887a      	ldrh	r2, [r7, #2]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004170:	e003      	b.n	800417a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004172:	887b      	ldrh	r3, [r7, #2]
 8004174:	041a      	lsls	r2, r3, #16
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	619a      	str	r2, [r3, #24]
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
	...

08004188 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e12b      	b.n	80043f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d106      	bne.n	80041b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7fd ff9c 	bl	80020ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2224      	movs	r2, #36	; 0x24
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0201 	bic.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041ec:	f000 fd80 	bl	8004cf0 <HAL_RCC_GetPCLK1Freq>
 80041f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	4a81      	ldr	r2, [pc, #516]	; (80043fc <HAL_I2C_Init+0x274>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d807      	bhi.n	800420c <HAL_I2C_Init+0x84>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4a80      	ldr	r2, [pc, #512]	; (8004400 <HAL_I2C_Init+0x278>)
 8004200:	4293      	cmp	r3, r2
 8004202:	bf94      	ite	ls
 8004204:	2301      	movls	r3, #1
 8004206:	2300      	movhi	r3, #0
 8004208:	b2db      	uxtb	r3, r3
 800420a:	e006      	b.n	800421a <HAL_I2C_Init+0x92>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4a7d      	ldr	r2, [pc, #500]	; (8004404 <HAL_I2C_Init+0x27c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	bf94      	ite	ls
 8004214:	2301      	movls	r3, #1
 8004216:	2300      	movhi	r3, #0
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e0e7      	b.n	80043f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4a78      	ldr	r2, [pc, #480]	; (8004408 <HAL_I2C_Init+0x280>)
 8004226:	fba2 2303 	umull	r2, r3, r2, r3
 800422a:	0c9b      	lsrs	r3, r3, #18
 800422c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	430a      	orrs	r2, r1
 8004240:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	4a6a      	ldr	r2, [pc, #424]	; (80043fc <HAL_I2C_Init+0x274>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d802      	bhi.n	800425c <HAL_I2C_Init+0xd4>
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	3301      	adds	r3, #1
 800425a:	e009      	b.n	8004270 <HAL_I2C_Init+0xe8>
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004262:	fb02 f303 	mul.w	r3, r2, r3
 8004266:	4a69      	ldr	r2, [pc, #420]	; (800440c <HAL_I2C_Init+0x284>)
 8004268:	fba2 2303 	umull	r2, r3, r2, r3
 800426c:	099b      	lsrs	r3, r3, #6
 800426e:	3301      	adds	r3, #1
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6812      	ldr	r2, [r2, #0]
 8004274:	430b      	orrs	r3, r1
 8004276:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004282:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	495c      	ldr	r1, [pc, #368]	; (80043fc <HAL_I2C_Init+0x274>)
 800428c:	428b      	cmp	r3, r1
 800428e:	d819      	bhi.n	80042c4 <HAL_I2C_Init+0x13c>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	1e59      	subs	r1, r3, #1
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	fbb1 f3f3 	udiv	r3, r1, r3
 800429e:	1c59      	adds	r1, r3, #1
 80042a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80042a4:	400b      	ands	r3, r1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <HAL_I2C_Init+0x138>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	1e59      	subs	r1, r3, #1
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80042b8:	3301      	adds	r3, #1
 80042ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042be:	e051      	b.n	8004364 <HAL_I2C_Init+0x1dc>
 80042c0:	2304      	movs	r3, #4
 80042c2:	e04f      	b.n	8004364 <HAL_I2C_Init+0x1dc>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d111      	bne.n	80042f0 <HAL_I2C_Init+0x168>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	1e58      	subs	r0, r3, #1
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6859      	ldr	r1, [r3, #4]
 80042d4:	460b      	mov	r3, r1
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	440b      	add	r3, r1
 80042da:	fbb0 f3f3 	udiv	r3, r0, r3
 80042de:	3301      	adds	r3, #1
 80042e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	bf0c      	ite	eq
 80042e8:	2301      	moveq	r3, #1
 80042ea:	2300      	movne	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	e012      	b.n	8004316 <HAL_I2C_Init+0x18e>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	1e58      	subs	r0, r3, #1
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6859      	ldr	r1, [r3, #4]
 80042f8:	460b      	mov	r3, r1
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	440b      	add	r3, r1
 80042fe:	0099      	lsls	r1, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	fbb0 f3f3 	udiv	r3, r0, r3
 8004306:	3301      	adds	r3, #1
 8004308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800430c:	2b00      	cmp	r3, #0
 800430e:	bf0c      	ite	eq
 8004310:	2301      	moveq	r3, #1
 8004312:	2300      	movne	r3, #0
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <HAL_I2C_Init+0x196>
 800431a:	2301      	movs	r3, #1
 800431c:	e022      	b.n	8004364 <HAL_I2C_Init+0x1dc>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10e      	bne.n	8004344 <HAL_I2C_Init+0x1bc>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	1e58      	subs	r0, r3, #1
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6859      	ldr	r1, [r3, #4]
 800432e:	460b      	mov	r3, r1
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	440b      	add	r3, r1
 8004334:	fbb0 f3f3 	udiv	r3, r0, r3
 8004338:	3301      	adds	r3, #1
 800433a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800433e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004342:	e00f      	b.n	8004364 <HAL_I2C_Init+0x1dc>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	1e58      	subs	r0, r3, #1
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6859      	ldr	r1, [r3, #4]
 800434c:	460b      	mov	r3, r1
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	0099      	lsls	r1, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	fbb0 f3f3 	udiv	r3, r0, r3
 800435a:	3301      	adds	r3, #1
 800435c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004360:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	6809      	ldr	r1, [r1, #0]
 8004368:	4313      	orrs	r3, r2
 800436a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	69da      	ldr	r2, [r3, #28]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004392:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6911      	ldr	r1, [r2, #16]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	68d2      	ldr	r2, [r2, #12]
 800439e:	4311      	orrs	r1, r2
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6812      	ldr	r2, [r2, #0]
 80043a4:	430b      	orrs	r3, r1
 80043a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	695a      	ldr	r2, [r3, #20]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	431a      	orrs	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0201 	orr.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2220      	movs	r2, #32
 80043de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	000186a0 	.word	0x000186a0
 8004400:	001e847f 	.word	0x001e847f
 8004404:	003d08ff 	.word	0x003d08ff
 8004408:	431bde83 	.word	0x431bde83
 800440c:	10624dd3 	.word	0x10624dd3

08004410 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e267      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d075      	beq.n	800451a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800442e:	4b88      	ldr	r3, [pc, #544]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 030c 	and.w	r3, r3, #12
 8004436:	2b04      	cmp	r3, #4
 8004438:	d00c      	beq.n	8004454 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800443a:	4b85      	ldr	r3, [pc, #532]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004442:	2b08      	cmp	r3, #8
 8004444:	d112      	bne.n	800446c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004446:	4b82      	ldr	r3, [pc, #520]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800444e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004452:	d10b      	bne.n	800446c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004454:	4b7e      	ldr	r3, [pc, #504]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d05b      	beq.n	8004518 <HAL_RCC_OscConfig+0x108>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d157      	bne.n	8004518 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e242      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004474:	d106      	bne.n	8004484 <HAL_RCC_OscConfig+0x74>
 8004476:	4b76      	ldr	r3, [pc, #472]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a75      	ldr	r2, [pc, #468]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 800447c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004480:	6013      	str	r3, [r2, #0]
 8004482:	e01d      	b.n	80044c0 <HAL_RCC_OscConfig+0xb0>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800448c:	d10c      	bne.n	80044a8 <HAL_RCC_OscConfig+0x98>
 800448e:	4b70      	ldr	r3, [pc, #448]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a6f      	ldr	r2, [pc, #444]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 8004494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	4b6d      	ldr	r3, [pc, #436]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a6c      	ldr	r2, [pc, #432]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 80044a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	e00b      	b.n	80044c0 <HAL_RCC_OscConfig+0xb0>
 80044a8:	4b69      	ldr	r3, [pc, #420]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a68      	ldr	r2, [pc, #416]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 80044ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044b2:	6013      	str	r3, [r2, #0]
 80044b4:	4b66      	ldr	r3, [pc, #408]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a65      	ldr	r2, [pc, #404]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 80044ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d013      	beq.n	80044f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c8:	f7ff fba2 	bl	8003c10 <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044d0:	f7ff fb9e 	bl	8003c10 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b64      	cmp	r3, #100	; 0x64
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e207      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044e2:	4b5b      	ldr	r3, [pc, #364]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0f0      	beq.n	80044d0 <HAL_RCC_OscConfig+0xc0>
 80044ee:	e014      	b.n	800451a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f0:	f7ff fb8e 	bl	8003c10 <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044f8:	f7ff fb8a 	bl	8003c10 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b64      	cmp	r3, #100	; 0x64
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e1f3      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800450a:	4b51      	ldr	r3, [pc, #324]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1f0      	bne.n	80044f8 <HAL_RCC_OscConfig+0xe8>
 8004516:	e000      	b.n	800451a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d063      	beq.n	80045ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004526:	4b4a      	ldr	r3, [pc, #296]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 030c 	and.w	r3, r3, #12
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00b      	beq.n	800454a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004532:	4b47      	ldr	r3, [pc, #284]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800453a:	2b08      	cmp	r3, #8
 800453c:	d11c      	bne.n	8004578 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800453e:	4b44      	ldr	r3, [pc, #272]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d116      	bne.n	8004578 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800454a:	4b41      	ldr	r3, [pc, #260]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d005      	beq.n	8004562 <HAL_RCC_OscConfig+0x152>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d001      	beq.n	8004562 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e1c7      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004562:	4b3b      	ldr	r3, [pc, #236]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	4937      	ldr	r1, [pc, #220]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 8004572:	4313      	orrs	r3, r2
 8004574:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004576:	e03a      	b.n	80045ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d020      	beq.n	80045c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004580:	4b34      	ldr	r3, [pc, #208]	; (8004654 <HAL_RCC_OscConfig+0x244>)
 8004582:	2201      	movs	r2, #1
 8004584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004586:	f7ff fb43 	bl	8003c10 <HAL_GetTick>
 800458a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800458c:	e008      	b.n	80045a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800458e:	f7ff fb3f 	bl	8003c10 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e1a8      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a0:	4b2b      	ldr	r3, [pc, #172]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d0f0      	beq.n	800458e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ac:	4b28      	ldr	r3, [pc, #160]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	4925      	ldr	r1, [pc, #148]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	600b      	str	r3, [r1, #0]
 80045c0:	e015      	b.n	80045ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045c2:	4b24      	ldr	r3, [pc, #144]	; (8004654 <HAL_RCC_OscConfig+0x244>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c8:	f7ff fb22 	bl	8003c10 <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045d0:	f7ff fb1e 	bl	8003c10 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e187      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045e2:	4b1b      	ldr	r3, [pc, #108]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1f0      	bne.n	80045d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0308 	and.w	r3, r3, #8
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d036      	beq.n	8004668 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d016      	beq.n	8004630 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004602:	4b15      	ldr	r3, [pc, #84]	; (8004658 <HAL_RCC_OscConfig+0x248>)
 8004604:	2201      	movs	r2, #1
 8004606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004608:	f7ff fb02 	bl	8003c10 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004610:	f7ff fafe 	bl	8003c10 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e167      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004622:	4b0b      	ldr	r3, [pc, #44]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 8004624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0f0      	beq.n	8004610 <HAL_RCC_OscConfig+0x200>
 800462e:	e01b      	b.n	8004668 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004630:	4b09      	ldr	r3, [pc, #36]	; (8004658 <HAL_RCC_OscConfig+0x248>)
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004636:	f7ff faeb 	bl	8003c10 <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800463c:	e00e      	b.n	800465c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800463e:	f7ff fae7 	bl	8003c10 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d907      	bls.n	800465c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e150      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
 8004650:	40023800 	.word	0x40023800
 8004654:	42470000 	.word	0x42470000
 8004658:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800465c:	4b88      	ldr	r3, [pc, #544]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 800465e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1ea      	bne.n	800463e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 8097 	beq.w	80047a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004676:	2300      	movs	r3, #0
 8004678:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800467a:	4b81      	ldr	r3, [pc, #516]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10f      	bne.n	80046a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004686:	2300      	movs	r3, #0
 8004688:	60bb      	str	r3, [r7, #8]
 800468a:	4b7d      	ldr	r3, [pc, #500]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	4a7c      	ldr	r2, [pc, #496]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 8004690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004694:	6413      	str	r3, [r2, #64]	; 0x40
 8004696:	4b7a      	ldr	r3, [pc, #488]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469e:	60bb      	str	r3, [r7, #8]
 80046a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046a2:	2301      	movs	r3, #1
 80046a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a6:	4b77      	ldr	r3, [pc, #476]	; (8004884 <HAL_RCC_OscConfig+0x474>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d118      	bne.n	80046e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046b2:	4b74      	ldr	r3, [pc, #464]	; (8004884 <HAL_RCC_OscConfig+0x474>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a73      	ldr	r2, [pc, #460]	; (8004884 <HAL_RCC_OscConfig+0x474>)
 80046b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046be:	f7ff faa7 	bl	8003c10 <HAL_GetTick>
 80046c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c4:	e008      	b.n	80046d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046c6:	f7ff faa3 	bl	8003c10 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e10c      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d8:	4b6a      	ldr	r3, [pc, #424]	; (8004884 <HAL_RCC_OscConfig+0x474>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0f0      	beq.n	80046c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d106      	bne.n	80046fa <HAL_RCC_OscConfig+0x2ea>
 80046ec:	4b64      	ldr	r3, [pc, #400]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 80046ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f0:	4a63      	ldr	r2, [pc, #396]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 80046f2:	f043 0301 	orr.w	r3, r3, #1
 80046f6:	6713      	str	r3, [r2, #112]	; 0x70
 80046f8:	e01c      	b.n	8004734 <HAL_RCC_OscConfig+0x324>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	2b05      	cmp	r3, #5
 8004700:	d10c      	bne.n	800471c <HAL_RCC_OscConfig+0x30c>
 8004702:	4b5f      	ldr	r3, [pc, #380]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 8004704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004706:	4a5e      	ldr	r2, [pc, #376]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 8004708:	f043 0304 	orr.w	r3, r3, #4
 800470c:	6713      	str	r3, [r2, #112]	; 0x70
 800470e:	4b5c      	ldr	r3, [pc, #368]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004712:	4a5b      	ldr	r2, [pc, #364]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 8004714:	f043 0301 	orr.w	r3, r3, #1
 8004718:	6713      	str	r3, [r2, #112]	; 0x70
 800471a:	e00b      	b.n	8004734 <HAL_RCC_OscConfig+0x324>
 800471c:	4b58      	ldr	r3, [pc, #352]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 800471e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004720:	4a57      	ldr	r2, [pc, #348]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 8004722:	f023 0301 	bic.w	r3, r3, #1
 8004726:	6713      	str	r3, [r2, #112]	; 0x70
 8004728:	4b55      	ldr	r3, [pc, #340]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 800472a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472c:	4a54      	ldr	r2, [pc, #336]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 800472e:	f023 0304 	bic.w	r3, r3, #4
 8004732:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d015      	beq.n	8004768 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800473c:	f7ff fa68 	bl	8003c10 <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004742:	e00a      	b.n	800475a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004744:	f7ff fa64 	bl	8003c10 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004752:	4293      	cmp	r3, r2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e0cb      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800475a:	4b49      	ldr	r3, [pc, #292]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 800475c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0ee      	beq.n	8004744 <HAL_RCC_OscConfig+0x334>
 8004766:	e014      	b.n	8004792 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004768:	f7ff fa52 	bl	8003c10 <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800476e:	e00a      	b.n	8004786 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004770:	f7ff fa4e 	bl	8003c10 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	f241 3288 	movw	r2, #5000	; 0x1388
 800477e:	4293      	cmp	r3, r2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e0b5      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004786:	4b3e      	ldr	r3, [pc, #248]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 8004788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1ee      	bne.n	8004770 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004792:	7dfb      	ldrb	r3, [r7, #23]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d105      	bne.n	80047a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004798:	4b39      	ldr	r3, [pc, #228]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	4a38      	ldr	r2, [pc, #224]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 800479e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 80a1 	beq.w	80048f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047ae:	4b34      	ldr	r3, [pc, #208]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 030c 	and.w	r3, r3, #12
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d05c      	beq.n	8004874 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d141      	bne.n	8004846 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c2:	4b31      	ldr	r3, [pc, #196]	; (8004888 <HAL_RCC_OscConfig+0x478>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c8:	f7ff fa22 	bl	8003c10 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047d0:	f7ff fa1e 	bl	8003c10 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e087      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047e2:	4b27      	ldr	r3, [pc, #156]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f0      	bne.n	80047d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69da      	ldr	r2, [r3, #28]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	019b      	lsls	r3, r3, #6
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004804:	085b      	lsrs	r3, r3, #1
 8004806:	3b01      	subs	r3, #1
 8004808:	041b      	lsls	r3, r3, #16
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004810:	061b      	lsls	r3, r3, #24
 8004812:	491b      	ldr	r1, [pc, #108]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 8004814:	4313      	orrs	r3, r2
 8004816:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004818:	4b1b      	ldr	r3, [pc, #108]	; (8004888 <HAL_RCC_OscConfig+0x478>)
 800481a:	2201      	movs	r2, #1
 800481c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800481e:	f7ff f9f7 	bl	8003c10 <HAL_GetTick>
 8004822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004824:	e008      	b.n	8004838 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004826:	f7ff f9f3 	bl	8003c10 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e05c      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004838:	4b11      	ldr	r3, [pc, #68]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0f0      	beq.n	8004826 <HAL_RCC_OscConfig+0x416>
 8004844:	e054      	b.n	80048f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004846:	4b10      	ldr	r3, [pc, #64]	; (8004888 <HAL_RCC_OscConfig+0x478>)
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484c:	f7ff f9e0 	bl	8003c10 <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004854:	f7ff f9dc 	bl	8003c10 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e045      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004866:	4b06      	ldr	r3, [pc, #24]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f0      	bne.n	8004854 <HAL_RCC_OscConfig+0x444>
 8004872:	e03d      	b.n	80048f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d107      	bne.n	800488c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e038      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
 8004880:	40023800 	.word	0x40023800
 8004884:	40007000 	.word	0x40007000
 8004888:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800488c:	4b1b      	ldr	r3, [pc, #108]	; (80048fc <HAL_RCC_OscConfig+0x4ec>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d028      	beq.n	80048ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d121      	bne.n	80048ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d11a      	bne.n	80048ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048bc:	4013      	ands	r3, r2
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d111      	bne.n	80048ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d2:	085b      	lsrs	r3, r3, #1
 80048d4:	3b01      	subs	r3, #1
 80048d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048d8:	429a      	cmp	r2, r3
 80048da:	d107      	bne.n	80048ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d001      	beq.n	80048f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e000      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	40023800 	.word	0x40023800

08004900 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e0cc      	b.n	8004aae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004914:	4b68      	ldr	r3, [pc, #416]	; (8004ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	429a      	cmp	r2, r3
 8004920:	d90c      	bls.n	800493c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004922:	4b65      	ldr	r3, [pc, #404]	; (8004ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	b2d2      	uxtb	r2, r2
 8004928:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800492a:	4b63      	ldr	r3, [pc, #396]	; (8004ab8 <HAL_RCC_ClockConfig+0x1b8>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	d001      	beq.n	800493c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e0b8      	b.n	8004aae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d020      	beq.n	800498a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b00      	cmp	r3, #0
 8004952:	d005      	beq.n	8004960 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004954:	4b59      	ldr	r3, [pc, #356]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	4a58      	ldr	r2, [pc, #352]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800495e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0308 	and.w	r3, r3, #8
 8004968:	2b00      	cmp	r3, #0
 800496a:	d005      	beq.n	8004978 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800496c:	4b53      	ldr	r3, [pc, #332]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	4a52      	ldr	r2, [pc, #328]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004972:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004976:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004978:	4b50      	ldr	r3, [pc, #320]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	494d      	ldr	r1, [pc, #308]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	4313      	orrs	r3, r2
 8004988:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d044      	beq.n	8004a20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d107      	bne.n	80049ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800499e:	4b47      	ldr	r3, [pc, #284]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d119      	bne.n	80049de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e07f      	b.n	8004aae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d003      	beq.n	80049be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ba:	2b03      	cmp	r3, #3
 80049bc:	d107      	bne.n	80049ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049be:	4b3f      	ldr	r3, [pc, #252]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d109      	bne.n	80049de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e06f      	b.n	8004aae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ce:	4b3b      	ldr	r3, [pc, #236]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e067      	b.n	8004aae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049de:	4b37      	ldr	r3, [pc, #220]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f023 0203 	bic.w	r2, r3, #3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	4934      	ldr	r1, [pc, #208]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049f0:	f7ff f90e 	bl	8003c10 <HAL_GetTick>
 80049f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049f6:	e00a      	b.n	8004a0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049f8:	f7ff f90a 	bl	8003c10 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e04f      	b.n	8004aae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a0e:	4b2b      	ldr	r3, [pc, #172]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 020c 	and.w	r2, r3, #12
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d1eb      	bne.n	80049f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a20:	4b25      	ldr	r3, [pc, #148]	; (8004ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d20c      	bcs.n	8004a48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a2e:	4b22      	ldr	r3, [pc, #136]	; (8004ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a36:	4b20      	ldr	r3, [pc, #128]	; (8004ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0307 	and.w	r3, r3, #7
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d001      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e032      	b.n	8004aae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d008      	beq.n	8004a66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a54:	4b19      	ldr	r3, [pc, #100]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	4916      	ldr	r1, [pc, #88]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0308 	and.w	r3, r3, #8
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d009      	beq.n	8004a86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a72:	4b12      	ldr	r3, [pc, #72]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	490e      	ldr	r1, [pc, #56]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a86:	f000 f821 	bl	8004acc <HAL_RCC_GetSysClockFreq>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	4b0b      	ldr	r3, [pc, #44]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	091b      	lsrs	r3, r3, #4
 8004a92:	f003 030f 	and.w	r3, r3, #15
 8004a96:	490a      	ldr	r1, [pc, #40]	; (8004ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a98:	5ccb      	ldrb	r3, [r1, r3]
 8004a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a9e:	4a09      	ldr	r2, [pc, #36]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004aa2:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7ff f86e 	bl	8003b88 <HAL_InitTick>

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40023c00 	.word	0x40023c00
 8004abc:	40023800 	.word	0x40023800
 8004ac0:	08007c14 	.word	0x08007c14
 8004ac4:	20000010 	.word	0x20000010
 8004ac8:	20000014 	.word	0x20000014

08004acc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ad0:	b094      	sub	sp, #80	; 0x50
 8004ad2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	647b      	str	r3, [r7, #68]	; 0x44
 8004ad8:	2300      	movs	r3, #0
 8004ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004adc:	2300      	movs	r3, #0
 8004ade:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ae4:	4b79      	ldr	r3, [pc, #484]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f003 030c 	and.w	r3, r3, #12
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d00d      	beq.n	8004b0c <HAL_RCC_GetSysClockFreq+0x40>
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	f200 80e1 	bhi.w	8004cb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d002      	beq.n	8004b00 <HAL_RCC_GetSysClockFreq+0x34>
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d003      	beq.n	8004b06 <HAL_RCC_GetSysClockFreq+0x3a>
 8004afe:	e0db      	b.n	8004cb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b00:	4b73      	ldr	r3, [pc, #460]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b02:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004b04:	e0db      	b.n	8004cbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b06:	4b73      	ldr	r3, [pc, #460]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b0a:	e0d8      	b.n	8004cbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b0c:	4b6f      	ldr	r3, [pc, #444]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b14:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b16:	4b6d      	ldr	r3, [pc, #436]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d063      	beq.n	8004bea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b22:	4b6a      	ldr	r3, [pc, #424]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	099b      	lsrs	r3, r3, #6
 8004b28:	2200      	movs	r2, #0
 8004b2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b34:	633b      	str	r3, [r7, #48]	; 0x30
 8004b36:	2300      	movs	r3, #0
 8004b38:	637b      	str	r3, [r7, #52]	; 0x34
 8004b3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004b3e:	4622      	mov	r2, r4
 8004b40:	462b      	mov	r3, r5
 8004b42:	f04f 0000 	mov.w	r0, #0
 8004b46:	f04f 0100 	mov.w	r1, #0
 8004b4a:	0159      	lsls	r1, r3, #5
 8004b4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b50:	0150      	lsls	r0, r2, #5
 8004b52:	4602      	mov	r2, r0
 8004b54:	460b      	mov	r3, r1
 8004b56:	4621      	mov	r1, r4
 8004b58:	1a51      	subs	r1, r2, r1
 8004b5a:	6139      	str	r1, [r7, #16]
 8004b5c:	4629      	mov	r1, r5
 8004b5e:	eb63 0301 	sbc.w	r3, r3, r1
 8004b62:	617b      	str	r3, [r7, #20]
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	f04f 0300 	mov.w	r3, #0
 8004b6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b70:	4659      	mov	r1, fp
 8004b72:	018b      	lsls	r3, r1, #6
 8004b74:	4651      	mov	r1, sl
 8004b76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b7a:	4651      	mov	r1, sl
 8004b7c:	018a      	lsls	r2, r1, #6
 8004b7e:	4651      	mov	r1, sl
 8004b80:	ebb2 0801 	subs.w	r8, r2, r1
 8004b84:	4659      	mov	r1, fp
 8004b86:	eb63 0901 	sbc.w	r9, r3, r1
 8004b8a:	f04f 0200 	mov.w	r2, #0
 8004b8e:	f04f 0300 	mov.w	r3, #0
 8004b92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b9e:	4690      	mov	r8, r2
 8004ba0:	4699      	mov	r9, r3
 8004ba2:	4623      	mov	r3, r4
 8004ba4:	eb18 0303 	adds.w	r3, r8, r3
 8004ba8:	60bb      	str	r3, [r7, #8]
 8004baa:	462b      	mov	r3, r5
 8004bac:	eb49 0303 	adc.w	r3, r9, r3
 8004bb0:	60fb      	str	r3, [r7, #12]
 8004bb2:	f04f 0200 	mov.w	r2, #0
 8004bb6:	f04f 0300 	mov.w	r3, #0
 8004bba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	024b      	lsls	r3, r1, #9
 8004bc2:	4621      	mov	r1, r4
 8004bc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004bc8:	4621      	mov	r1, r4
 8004bca:	024a      	lsls	r2, r1, #9
 8004bcc:	4610      	mov	r0, r2
 8004bce:	4619      	mov	r1, r3
 8004bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bdc:	f7fb ffb8 	bl	8000b50 <__aeabi_uldivmod>
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	4613      	mov	r3, r2
 8004be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004be8:	e058      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bea:	4b38      	ldr	r3, [pc, #224]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	099b      	lsrs	r3, r3, #6
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	4611      	mov	r1, r2
 8004bf6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bfa:	623b      	str	r3, [r7, #32]
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8004c00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c04:	4642      	mov	r2, r8
 8004c06:	464b      	mov	r3, r9
 8004c08:	f04f 0000 	mov.w	r0, #0
 8004c0c:	f04f 0100 	mov.w	r1, #0
 8004c10:	0159      	lsls	r1, r3, #5
 8004c12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c16:	0150      	lsls	r0, r2, #5
 8004c18:	4602      	mov	r2, r0
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	4641      	mov	r1, r8
 8004c1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c22:	4649      	mov	r1, r9
 8004c24:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c3c:	ebb2 040a 	subs.w	r4, r2, sl
 8004c40:	eb63 050b 	sbc.w	r5, r3, fp
 8004c44:	f04f 0200 	mov.w	r2, #0
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	00eb      	lsls	r3, r5, #3
 8004c4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c52:	00e2      	lsls	r2, r4, #3
 8004c54:	4614      	mov	r4, r2
 8004c56:	461d      	mov	r5, r3
 8004c58:	4643      	mov	r3, r8
 8004c5a:	18e3      	adds	r3, r4, r3
 8004c5c:	603b      	str	r3, [r7, #0]
 8004c5e:	464b      	mov	r3, r9
 8004c60:	eb45 0303 	adc.w	r3, r5, r3
 8004c64:	607b      	str	r3, [r7, #4]
 8004c66:	f04f 0200 	mov.w	r2, #0
 8004c6a:	f04f 0300 	mov.w	r3, #0
 8004c6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c72:	4629      	mov	r1, r5
 8004c74:	028b      	lsls	r3, r1, #10
 8004c76:	4621      	mov	r1, r4
 8004c78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c7c:	4621      	mov	r1, r4
 8004c7e:	028a      	lsls	r2, r1, #10
 8004c80:	4610      	mov	r0, r2
 8004c82:	4619      	mov	r1, r3
 8004c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c86:	2200      	movs	r2, #0
 8004c88:	61bb      	str	r3, [r7, #24]
 8004c8a:	61fa      	str	r2, [r7, #28]
 8004c8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c90:	f7fb ff5e 	bl	8000b50 <__aeabi_uldivmod>
 8004c94:	4602      	mov	r2, r0
 8004c96:	460b      	mov	r3, r1
 8004c98:	4613      	mov	r3, r2
 8004c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c9c:	4b0b      	ldr	r3, [pc, #44]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	0c1b      	lsrs	r3, r3, #16
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004cac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004cb6:	e002      	b.n	8004cbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cb8:	4b05      	ldr	r3, [pc, #20]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004cba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3750      	adds	r7, #80	; 0x50
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cca:	bf00      	nop
 8004ccc:	40023800 	.word	0x40023800
 8004cd0:	00f42400 	.word	0x00f42400
 8004cd4:	007a1200 	.word	0x007a1200

08004cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cdc:	4b03      	ldr	r3, [pc, #12]	; (8004cec <HAL_RCC_GetHCLKFreq+0x14>)
 8004cde:	681b      	ldr	r3, [r3, #0]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	20000010 	.word	0x20000010

08004cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004cf4:	f7ff fff0 	bl	8004cd8 <HAL_RCC_GetHCLKFreq>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	0a9b      	lsrs	r3, r3, #10
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	4903      	ldr	r1, [pc, #12]	; (8004d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d06:	5ccb      	ldrb	r3, [r1, r3]
 8004d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	40023800 	.word	0x40023800
 8004d14:	08007c24 	.word	0x08007c24

08004d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d1c:	f7ff ffdc 	bl	8004cd8 <HAL_RCC_GetHCLKFreq>
 8004d20:	4602      	mov	r2, r0
 8004d22:	4b05      	ldr	r3, [pc, #20]	; (8004d38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	0b5b      	lsrs	r3, r3, #13
 8004d28:	f003 0307 	and.w	r3, r3, #7
 8004d2c:	4903      	ldr	r1, [pc, #12]	; (8004d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d2e:	5ccb      	ldrb	r3, [r1, r3]
 8004d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	08007c24 	.word	0x08007c24

08004d40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e041      	b.n	8004dd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d106      	bne.n	8004d6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7fd fd96 	bl	8002898 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	3304      	adds	r3, #4
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	4610      	mov	r0, r2
 8004d80:	f000 fd88 	bl	8005894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
	...

08004de0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d001      	beq.n	8004df8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e044      	b.n	8004e82 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68da      	ldr	r2, [r3, #12]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0201 	orr.w	r2, r2, #1
 8004e0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a1e      	ldr	r2, [pc, #120]	; (8004e90 <HAL_TIM_Base_Start_IT+0xb0>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d018      	beq.n	8004e4c <HAL_TIM_Base_Start_IT+0x6c>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e22:	d013      	beq.n	8004e4c <HAL_TIM_Base_Start_IT+0x6c>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a1a      	ldr	r2, [pc, #104]	; (8004e94 <HAL_TIM_Base_Start_IT+0xb4>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d00e      	beq.n	8004e4c <HAL_TIM_Base_Start_IT+0x6c>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a19      	ldr	r2, [pc, #100]	; (8004e98 <HAL_TIM_Base_Start_IT+0xb8>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d009      	beq.n	8004e4c <HAL_TIM_Base_Start_IT+0x6c>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a17      	ldr	r2, [pc, #92]	; (8004e9c <HAL_TIM_Base_Start_IT+0xbc>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d004      	beq.n	8004e4c <HAL_TIM_Base_Start_IT+0x6c>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a16      	ldr	r2, [pc, #88]	; (8004ea0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d111      	bne.n	8004e70 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b06      	cmp	r3, #6
 8004e5c:	d010      	beq.n	8004e80 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f042 0201 	orr.w	r2, r2, #1
 8004e6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e6e:	e007      	b.n	8004e80 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0201 	orr.w	r2, r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3714      	adds	r7, #20
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	40010000 	.word	0x40010000
 8004e94:	40000400 	.word	0x40000400
 8004e98:	40000800 	.word	0x40000800
 8004e9c:	40000c00 	.word	0x40000c00
 8004ea0:	40014000 	.word	0x40014000

08004ea4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e041      	b.n	8004f3a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d106      	bne.n	8004ed0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f839 	bl	8004f42 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	3304      	adds	r3, #4
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	4610      	mov	r0, r2
 8004ee4:	f000 fcd6 	bl	8005894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b083      	sub	sp, #12
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f4a:	bf00      	nop
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
	...

08004f58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d109      	bne.n	8004f7c <HAL_TIM_PWM_Start+0x24>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	bf14      	ite	ne
 8004f74:	2301      	movne	r3, #1
 8004f76:	2300      	moveq	r3, #0
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	e022      	b.n	8004fc2 <HAL_TIM_PWM_Start+0x6a>
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d109      	bne.n	8004f96 <HAL_TIM_PWM_Start+0x3e>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	bf14      	ite	ne
 8004f8e:	2301      	movne	r3, #1
 8004f90:	2300      	moveq	r3, #0
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	e015      	b.n	8004fc2 <HAL_TIM_PWM_Start+0x6a>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d109      	bne.n	8004fb0 <HAL_TIM_PWM_Start+0x58>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	bf14      	ite	ne
 8004fa8:	2301      	movne	r3, #1
 8004faa:	2300      	moveq	r3, #0
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	e008      	b.n	8004fc2 <HAL_TIM_PWM_Start+0x6a>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	bf14      	ite	ne
 8004fbc:	2301      	movne	r3, #1
 8004fbe:	2300      	moveq	r3, #0
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e068      	b.n	800509c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d104      	bne.n	8004fda <HAL_TIM_PWM_Start+0x82>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fd8:	e013      	b.n	8005002 <HAL_TIM_PWM_Start+0xaa>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d104      	bne.n	8004fea <HAL_TIM_PWM_Start+0x92>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fe8:	e00b      	b.n	8005002 <HAL_TIM_PWM_Start+0xaa>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d104      	bne.n	8004ffa <HAL_TIM_PWM_Start+0xa2>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ff8:	e003      	b.n	8005002 <HAL_TIM_PWM_Start+0xaa>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2201      	movs	r2, #1
 8005008:	6839      	ldr	r1, [r7, #0]
 800500a:	4618      	mov	r0, r3
 800500c:	f000 fee8 	bl	8005de0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a23      	ldr	r2, [pc, #140]	; (80050a4 <HAL_TIM_PWM_Start+0x14c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d107      	bne.n	800502a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005028:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a1d      	ldr	r2, [pc, #116]	; (80050a4 <HAL_TIM_PWM_Start+0x14c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d018      	beq.n	8005066 <HAL_TIM_PWM_Start+0x10e>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800503c:	d013      	beq.n	8005066 <HAL_TIM_PWM_Start+0x10e>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a19      	ldr	r2, [pc, #100]	; (80050a8 <HAL_TIM_PWM_Start+0x150>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d00e      	beq.n	8005066 <HAL_TIM_PWM_Start+0x10e>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a17      	ldr	r2, [pc, #92]	; (80050ac <HAL_TIM_PWM_Start+0x154>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d009      	beq.n	8005066 <HAL_TIM_PWM_Start+0x10e>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a16      	ldr	r2, [pc, #88]	; (80050b0 <HAL_TIM_PWM_Start+0x158>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d004      	beq.n	8005066 <HAL_TIM_PWM_Start+0x10e>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a14      	ldr	r2, [pc, #80]	; (80050b4 <HAL_TIM_PWM_Start+0x15c>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d111      	bne.n	800508a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f003 0307 	and.w	r3, r3, #7
 8005070:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2b06      	cmp	r3, #6
 8005076:	d010      	beq.n	800509a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f042 0201 	orr.w	r2, r2, #1
 8005086:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005088:	e007      	b.n	800509a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f042 0201 	orr.w	r2, r2, #1
 8005098:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	40010000 	.word	0x40010000
 80050a8:	40000400 	.word	0x40000400
 80050ac:	40000800 	.word	0x40000800
 80050b0:	40000c00 	.word	0x40000c00
 80050b4:	40014000 	.word	0x40014000

080050b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e097      	b.n	80051fc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d106      	bne.n	80050e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f7fd fb8b 	bl	80027fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2202      	movs	r2, #2
 80050ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	6812      	ldr	r2, [r2, #0]
 80050f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050fc:	f023 0307 	bic.w	r3, r3, #7
 8005100:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	3304      	adds	r3, #4
 800510a:	4619      	mov	r1, r3
 800510c:	4610      	mov	r0, r2
 800510e:	f000 fbc1 	bl	8005894 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	4313      	orrs	r3, r2
 8005132:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800513a:	f023 0303 	bic.w	r3, r3, #3
 800513e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	021b      	lsls	r3, r3, #8
 800514a:	4313      	orrs	r3, r2
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	4313      	orrs	r3, r2
 8005150:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005158:	f023 030c 	bic.w	r3, r3, #12
 800515c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005164:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005168:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	021b      	lsls	r3, r3, #8
 8005174:	4313      	orrs	r3, r2
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	4313      	orrs	r3, r2
 800517a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	011a      	lsls	r2, r3, #4
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	031b      	lsls	r3, r3, #12
 8005188:	4313      	orrs	r3, r2
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	4313      	orrs	r3, r2
 800518e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005196:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800519e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	011b      	lsls	r3, r3, #4
 80051aa:	4313      	orrs	r3, r2
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3718      	adds	r7, #24
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005214:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800521c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005224:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800522c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d110      	bne.n	8005256 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005234:	7bfb      	ldrb	r3, [r7, #15]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d102      	bne.n	8005240 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800523a:	7b7b      	ldrb	r3, [r7, #13]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d001      	beq.n	8005244 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e069      	b.n	8005318 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2202      	movs	r2, #2
 8005248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005254:	e031      	b.n	80052ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2b04      	cmp	r3, #4
 800525a:	d110      	bne.n	800527e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800525c:	7bbb      	ldrb	r3, [r7, #14]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d102      	bne.n	8005268 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005262:	7b3b      	ldrb	r3, [r7, #12]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d001      	beq.n	800526c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e055      	b.n	8005318 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2202      	movs	r2, #2
 8005278:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800527c:	e01d      	b.n	80052ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800527e:	7bfb      	ldrb	r3, [r7, #15]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d108      	bne.n	8005296 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005284:	7bbb      	ldrb	r3, [r7, #14]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d105      	bne.n	8005296 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800528a:	7b7b      	ldrb	r3, [r7, #13]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d102      	bne.n	8005296 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005290:	7b3b      	ldrb	r3, [r7, #12]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d001      	beq.n	800529a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e03e      	b.n	8005318 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2202      	movs	r2, #2
 800529e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2202      	movs	r2, #2
 80052a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2202      	movs	r2, #2
 80052ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2202      	movs	r2, #2
 80052b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <HAL_TIM_Encoder_Start+0xc4>
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	2b04      	cmp	r3, #4
 80052c4:	d008      	beq.n	80052d8 <HAL_TIM_Encoder_Start+0xd4>
 80052c6:	e00f      	b.n	80052e8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2201      	movs	r2, #1
 80052ce:	2100      	movs	r1, #0
 80052d0:	4618      	mov	r0, r3
 80052d2:	f000 fd85 	bl	8005de0 <TIM_CCxChannelCmd>
      break;
 80052d6:	e016      	b.n	8005306 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2201      	movs	r2, #1
 80052de:	2104      	movs	r1, #4
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 fd7d 	bl	8005de0 <TIM_CCxChannelCmd>
      break;
 80052e6:	e00e      	b.n	8005306 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2201      	movs	r2, #1
 80052ee:	2100      	movs	r1, #0
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 fd75 	bl	8005de0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2201      	movs	r2, #1
 80052fc:	2104      	movs	r1, #4
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 fd6e 	bl	8005de0 <TIM_CCxChannelCmd>
      break;
 8005304:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f042 0201 	orr.w	r2, r2, #1
 8005314:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b02      	cmp	r3, #2
 8005334:	d122      	bne.n	800537c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b02      	cmp	r3, #2
 8005342:	d11b      	bne.n	800537c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f06f 0202 	mvn.w	r2, #2
 800534c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	f003 0303 	and.w	r3, r3, #3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d003      	beq.n	800536a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 fa77 	bl	8005856 <HAL_TIM_IC_CaptureCallback>
 8005368:	e005      	b.n	8005376 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fa69 	bl	8005842 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 fa7a 	bl	800586a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	f003 0304 	and.w	r3, r3, #4
 8005386:	2b04      	cmp	r3, #4
 8005388:	d122      	bne.n	80053d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b04      	cmp	r3, #4
 8005396:	d11b      	bne.n	80053d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f06f 0204 	mvn.w	r2, #4
 80053a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2202      	movs	r2, #2
 80053a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d003      	beq.n	80053be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 fa4d 	bl	8005856 <HAL_TIM_IC_CaptureCallback>
 80053bc:	e005      	b.n	80053ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fa3f 	bl	8005842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 fa50 	bl	800586a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	f003 0308 	and.w	r3, r3, #8
 80053da:	2b08      	cmp	r3, #8
 80053dc:	d122      	bne.n	8005424 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f003 0308 	and.w	r3, r3, #8
 80053e8:	2b08      	cmp	r3, #8
 80053ea:	d11b      	bne.n	8005424 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f06f 0208 	mvn.w	r2, #8
 80053f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2204      	movs	r2, #4
 80053fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	f003 0303 	and.w	r3, r3, #3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 fa23 	bl	8005856 <HAL_TIM_IC_CaptureCallback>
 8005410:	e005      	b.n	800541e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fa15 	bl	8005842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 fa26 	bl	800586a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	f003 0310 	and.w	r3, r3, #16
 800542e:	2b10      	cmp	r3, #16
 8005430:	d122      	bne.n	8005478 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	f003 0310 	and.w	r3, r3, #16
 800543c:	2b10      	cmp	r3, #16
 800543e:	d11b      	bne.n	8005478 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f06f 0210 	mvn.w	r2, #16
 8005448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2208      	movs	r2, #8
 800544e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f9f9 	bl	8005856 <HAL_TIM_IC_CaptureCallback>
 8005464:	e005      	b.n	8005472 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f9eb 	bl	8005842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 f9fc 	bl	800586a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b01      	cmp	r3, #1
 8005484:	d10e      	bne.n	80054a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	2b01      	cmp	r3, #1
 8005492:	d107      	bne.n	80054a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f06f 0201 	mvn.w	r2, #1
 800549c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7fc ff6c 	bl	800237c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ae:	2b80      	cmp	r3, #128	; 0x80
 80054b0:	d10e      	bne.n	80054d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054bc:	2b80      	cmp	r3, #128	; 0x80
 80054be:	d107      	bne.n	80054d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 fd26 	bl	8005f1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054da:	2b40      	cmp	r3, #64	; 0x40
 80054dc:	d10e      	bne.n	80054fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e8:	2b40      	cmp	r3, #64	; 0x40
 80054ea:	d107      	bne.n	80054fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f9c1 	bl	800587e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	f003 0320 	and.w	r3, r3, #32
 8005506:	2b20      	cmp	r3, #32
 8005508:	d10e      	bne.n	8005528 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f003 0320 	and.w	r3, r3, #32
 8005514:	2b20      	cmp	r3, #32
 8005516:	d107      	bne.n	8005528 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f06f 0220 	mvn.w	r2, #32
 8005520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 fcf0 	bl	8005f08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005528:	bf00      	nop
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800553c:	2300      	movs	r3, #0
 800553e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005546:	2b01      	cmp	r3, #1
 8005548:	d101      	bne.n	800554e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800554a:	2302      	movs	r3, #2
 800554c:	e0ae      	b.n	80056ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b0c      	cmp	r3, #12
 800555a:	f200 809f 	bhi.w	800569c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800555e:	a201      	add	r2, pc, #4	; (adr r2, 8005564 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005564:	08005599 	.word	0x08005599
 8005568:	0800569d 	.word	0x0800569d
 800556c:	0800569d 	.word	0x0800569d
 8005570:	0800569d 	.word	0x0800569d
 8005574:	080055d9 	.word	0x080055d9
 8005578:	0800569d 	.word	0x0800569d
 800557c:	0800569d 	.word	0x0800569d
 8005580:	0800569d 	.word	0x0800569d
 8005584:	0800561b 	.word	0x0800561b
 8005588:	0800569d 	.word	0x0800569d
 800558c:	0800569d 	.word	0x0800569d
 8005590:	0800569d 	.word	0x0800569d
 8005594:	0800565b 	.word	0x0800565b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68b9      	ldr	r1, [r7, #8]
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 f9f8 	bl	8005994 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	699a      	ldr	r2, [r3, #24]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f042 0208 	orr.w	r2, r2, #8
 80055b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699a      	ldr	r2, [r3, #24]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0204 	bic.w	r2, r2, #4
 80055c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6999      	ldr	r1, [r3, #24]
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	691a      	ldr	r2, [r3, #16]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	430a      	orrs	r2, r1
 80055d4:	619a      	str	r2, [r3, #24]
      break;
 80055d6:	e064      	b.n	80056a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68b9      	ldr	r1, [r7, #8]
 80055de:	4618      	mov	r0, r3
 80055e0:	f000 fa3e 	bl	8005a60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	699a      	ldr	r2, [r3, #24]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699a      	ldr	r2, [r3, #24]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005602:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6999      	ldr	r1, [r3, #24]
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	021a      	lsls	r2, r3, #8
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	430a      	orrs	r2, r1
 8005616:	619a      	str	r2, [r3, #24]
      break;
 8005618:	e043      	b.n	80056a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68b9      	ldr	r1, [r7, #8]
 8005620:	4618      	mov	r0, r3
 8005622:	f000 fa89 	bl	8005b38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	69da      	ldr	r2, [r3, #28]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f042 0208 	orr.w	r2, r2, #8
 8005634:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	69da      	ldr	r2, [r3, #28]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 0204 	bic.w	r2, r2, #4
 8005644:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	69d9      	ldr	r1, [r3, #28]
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	691a      	ldr	r2, [r3, #16]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	430a      	orrs	r2, r1
 8005656:	61da      	str	r2, [r3, #28]
      break;
 8005658:	e023      	b.n	80056a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68b9      	ldr	r1, [r7, #8]
 8005660:	4618      	mov	r0, r3
 8005662:	f000 fad3 	bl	8005c0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	69da      	ldr	r2, [r3, #28]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005674:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	69da      	ldr	r2, [r3, #28]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005684:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	69d9      	ldr	r1, [r3, #28]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	021a      	lsls	r2, r3, #8
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	61da      	str	r2, [r3, #28]
      break;
 800569a:	e002      	b.n	80056a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	75fb      	strb	r3, [r7, #23]
      break;
 80056a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3718      	adds	r7, #24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d101      	bne.n	80056d0 <HAL_TIM_ConfigClockSource+0x1c>
 80056cc:	2302      	movs	r3, #2
 80056ce:	e0b4      	b.n	800583a <HAL_TIM_ConfigClockSource+0x186>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005708:	d03e      	beq.n	8005788 <HAL_TIM_ConfigClockSource+0xd4>
 800570a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800570e:	f200 8087 	bhi.w	8005820 <HAL_TIM_ConfigClockSource+0x16c>
 8005712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005716:	f000 8086 	beq.w	8005826 <HAL_TIM_ConfigClockSource+0x172>
 800571a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800571e:	d87f      	bhi.n	8005820 <HAL_TIM_ConfigClockSource+0x16c>
 8005720:	2b70      	cmp	r3, #112	; 0x70
 8005722:	d01a      	beq.n	800575a <HAL_TIM_ConfigClockSource+0xa6>
 8005724:	2b70      	cmp	r3, #112	; 0x70
 8005726:	d87b      	bhi.n	8005820 <HAL_TIM_ConfigClockSource+0x16c>
 8005728:	2b60      	cmp	r3, #96	; 0x60
 800572a:	d050      	beq.n	80057ce <HAL_TIM_ConfigClockSource+0x11a>
 800572c:	2b60      	cmp	r3, #96	; 0x60
 800572e:	d877      	bhi.n	8005820 <HAL_TIM_ConfigClockSource+0x16c>
 8005730:	2b50      	cmp	r3, #80	; 0x50
 8005732:	d03c      	beq.n	80057ae <HAL_TIM_ConfigClockSource+0xfa>
 8005734:	2b50      	cmp	r3, #80	; 0x50
 8005736:	d873      	bhi.n	8005820 <HAL_TIM_ConfigClockSource+0x16c>
 8005738:	2b40      	cmp	r3, #64	; 0x40
 800573a:	d058      	beq.n	80057ee <HAL_TIM_ConfigClockSource+0x13a>
 800573c:	2b40      	cmp	r3, #64	; 0x40
 800573e:	d86f      	bhi.n	8005820 <HAL_TIM_ConfigClockSource+0x16c>
 8005740:	2b30      	cmp	r3, #48	; 0x30
 8005742:	d064      	beq.n	800580e <HAL_TIM_ConfigClockSource+0x15a>
 8005744:	2b30      	cmp	r3, #48	; 0x30
 8005746:	d86b      	bhi.n	8005820 <HAL_TIM_ConfigClockSource+0x16c>
 8005748:	2b20      	cmp	r3, #32
 800574a:	d060      	beq.n	800580e <HAL_TIM_ConfigClockSource+0x15a>
 800574c:	2b20      	cmp	r3, #32
 800574e:	d867      	bhi.n	8005820 <HAL_TIM_ConfigClockSource+0x16c>
 8005750:	2b00      	cmp	r3, #0
 8005752:	d05c      	beq.n	800580e <HAL_TIM_ConfigClockSource+0x15a>
 8005754:	2b10      	cmp	r3, #16
 8005756:	d05a      	beq.n	800580e <HAL_TIM_ConfigClockSource+0x15a>
 8005758:	e062      	b.n	8005820 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6818      	ldr	r0, [r3, #0]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	6899      	ldr	r1, [r3, #8]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	f000 fb19 	bl	8005da0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800577c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	609a      	str	r2, [r3, #8]
      break;
 8005786:	e04f      	b.n	8005828 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6818      	ldr	r0, [r3, #0]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	6899      	ldr	r1, [r3, #8]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f000 fb02 	bl	8005da0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689a      	ldr	r2, [r3, #8]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057aa:	609a      	str	r2, [r3, #8]
      break;
 80057ac:	e03c      	b.n	8005828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6818      	ldr	r0, [r3, #0]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	6859      	ldr	r1, [r3, #4]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	461a      	mov	r2, r3
 80057bc:	f000 fa76 	bl	8005cac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2150      	movs	r1, #80	; 0x50
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 facf 	bl	8005d6a <TIM_ITRx_SetConfig>
      break;
 80057cc:	e02c      	b.n	8005828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6818      	ldr	r0, [r3, #0]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	6859      	ldr	r1, [r3, #4]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	461a      	mov	r2, r3
 80057dc:	f000 fa95 	bl	8005d0a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2160      	movs	r1, #96	; 0x60
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 fabf 	bl	8005d6a <TIM_ITRx_SetConfig>
      break;
 80057ec:	e01c      	b.n	8005828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6818      	ldr	r0, [r3, #0]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	6859      	ldr	r1, [r3, #4]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	461a      	mov	r2, r3
 80057fc:	f000 fa56 	bl	8005cac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2140      	movs	r1, #64	; 0x40
 8005806:	4618      	mov	r0, r3
 8005808:	f000 faaf 	bl	8005d6a <TIM_ITRx_SetConfig>
      break;
 800580c:	e00c      	b.n	8005828 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4619      	mov	r1, r3
 8005818:	4610      	mov	r0, r2
 800581a:	f000 faa6 	bl	8005d6a <TIM_ITRx_SetConfig>
      break;
 800581e:	e003      	b.n	8005828 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	73fb      	strb	r3, [r7, #15]
      break;
 8005824:	e000      	b.n	8005828 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005826:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005838:	7bfb      	ldrb	r3, [r7, #15]
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005842:	b480      	push	{r7}
 8005844:	b083      	sub	sp, #12
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800584a:	bf00      	nop
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005856:	b480      	push	{r7}
 8005858:	b083      	sub	sp, #12
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800585e:	bf00      	nop
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800586a:	b480      	push	{r7}
 800586c:	b083      	sub	sp, #12
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005872:	bf00      	nop
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800587e:	b480      	push	{r7}
 8005880:	b083      	sub	sp, #12
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005886:	bf00      	nop
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
	...

08005894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a34      	ldr	r2, [pc, #208]	; (8005978 <TIM_Base_SetConfig+0xe4>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d00f      	beq.n	80058cc <TIM_Base_SetConfig+0x38>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b2:	d00b      	beq.n	80058cc <TIM_Base_SetConfig+0x38>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a31      	ldr	r2, [pc, #196]	; (800597c <TIM_Base_SetConfig+0xe8>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d007      	beq.n	80058cc <TIM_Base_SetConfig+0x38>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a30      	ldr	r2, [pc, #192]	; (8005980 <TIM_Base_SetConfig+0xec>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d003      	beq.n	80058cc <TIM_Base_SetConfig+0x38>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a2f      	ldr	r2, [pc, #188]	; (8005984 <TIM_Base_SetConfig+0xf0>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d108      	bne.n	80058de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a25      	ldr	r2, [pc, #148]	; (8005978 <TIM_Base_SetConfig+0xe4>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d01b      	beq.n	800591e <TIM_Base_SetConfig+0x8a>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ec:	d017      	beq.n	800591e <TIM_Base_SetConfig+0x8a>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a22      	ldr	r2, [pc, #136]	; (800597c <TIM_Base_SetConfig+0xe8>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d013      	beq.n	800591e <TIM_Base_SetConfig+0x8a>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a21      	ldr	r2, [pc, #132]	; (8005980 <TIM_Base_SetConfig+0xec>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d00f      	beq.n	800591e <TIM_Base_SetConfig+0x8a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a20      	ldr	r2, [pc, #128]	; (8005984 <TIM_Base_SetConfig+0xf0>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d00b      	beq.n	800591e <TIM_Base_SetConfig+0x8a>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a1f      	ldr	r2, [pc, #124]	; (8005988 <TIM_Base_SetConfig+0xf4>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d007      	beq.n	800591e <TIM_Base_SetConfig+0x8a>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a1e      	ldr	r2, [pc, #120]	; (800598c <TIM_Base_SetConfig+0xf8>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d003      	beq.n	800591e <TIM_Base_SetConfig+0x8a>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a1d      	ldr	r2, [pc, #116]	; (8005990 <TIM_Base_SetConfig+0xfc>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d108      	bne.n	8005930 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	4313      	orrs	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a08      	ldr	r2, [pc, #32]	; (8005978 <TIM_Base_SetConfig+0xe4>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d103      	bne.n	8005964 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	691a      	ldr	r2, [r3, #16]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	615a      	str	r2, [r3, #20]
}
 800596a:	bf00      	nop
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	40010000 	.word	0x40010000
 800597c:	40000400 	.word	0x40000400
 8005980:	40000800 	.word	0x40000800
 8005984:	40000c00 	.word	0x40000c00
 8005988:	40014000 	.word	0x40014000
 800598c:	40014400 	.word	0x40014400
 8005990:	40014800 	.word	0x40014800

08005994 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005994:	b480      	push	{r7}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	f023 0201 	bic.w	r2, r3, #1
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f023 0303 	bic.w	r3, r3, #3
 80059ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f023 0302 	bic.w	r3, r3, #2
 80059dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a1c      	ldr	r2, [pc, #112]	; (8005a5c <TIM_OC1_SetConfig+0xc8>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d10c      	bne.n	8005a0a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f023 0308 	bic.w	r3, r3, #8
 80059f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f023 0304 	bic.w	r3, r3, #4
 8005a08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a13      	ldr	r2, [pc, #76]	; (8005a5c <TIM_OC1_SetConfig+0xc8>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d111      	bne.n	8005a36 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	621a      	str	r2, [r3, #32]
}
 8005a50:	bf00      	nop
 8005a52:	371c      	adds	r7, #28
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	40010000 	.word	0x40010000

08005a60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	f023 0210 	bic.w	r2, r3, #16
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	021b      	lsls	r3, r3, #8
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f023 0320 	bic.w	r3, r3, #32
 8005aaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	011b      	lsls	r3, r3, #4
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a1e      	ldr	r2, [pc, #120]	; (8005b34 <TIM_OC2_SetConfig+0xd4>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d10d      	bne.n	8005adc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ac6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	011b      	lsls	r3, r3, #4
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ada:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a15      	ldr	r2, [pc, #84]	; (8005b34 <TIM_OC2_SetConfig+0xd4>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d113      	bne.n	8005b0c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005aea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005af2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	621a      	str	r2, [r3, #32]
}
 8005b26:	bf00      	nop
 8005b28:	371c      	adds	r7, #28
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	40010000 	.word	0x40010000

08005b38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b087      	sub	sp, #28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f023 0303 	bic.w	r3, r3, #3
 8005b6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	021b      	lsls	r3, r3, #8
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a1d      	ldr	r2, [pc, #116]	; (8005c08 <TIM_OC3_SetConfig+0xd0>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d10d      	bne.n	8005bb2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	021b      	lsls	r3, r3, #8
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a14      	ldr	r2, [pc, #80]	; (8005c08 <TIM_OC3_SetConfig+0xd0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d113      	bne.n	8005be2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	011b      	lsls	r3, r3, #4
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	011b      	lsls	r3, r3, #4
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	621a      	str	r2, [r3, #32]
}
 8005bfc:	bf00      	nop
 8005bfe:	371c      	adds	r7, #28
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	40010000 	.word	0x40010000

08005c0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b087      	sub	sp, #28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	021b      	lsls	r3, r3, #8
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	031b      	lsls	r3, r3, #12
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a10      	ldr	r2, [pc, #64]	; (8005ca8 <TIM_OC4_SetConfig+0x9c>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d109      	bne.n	8005c80 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	019b      	lsls	r3, r3, #6
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	621a      	str	r2, [r3, #32]
}
 8005c9a:	bf00      	nop
 8005c9c:	371c      	adds	r7, #28
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	40010000 	.word	0x40010000

08005cac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b087      	sub	sp, #28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	f023 0201 	bic.w	r2, r3, #1
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	011b      	lsls	r3, r3, #4
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f023 030a 	bic.w	r3, r3, #10
 8005ce8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	621a      	str	r2, [r3, #32]
}
 8005cfe:	bf00      	nop
 8005d00:	371c      	adds	r7, #28
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b087      	sub	sp, #28
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	60f8      	str	r0, [r7, #12]
 8005d12:	60b9      	str	r1, [r7, #8]
 8005d14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	f023 0210 	bic.w	r2, r3, #16
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6a1b      	ldr	r3, [r3, #32]
 8005d2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	031b      	lsls	r3, r3, #12
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	011b      	lsls	r3, r3, #4
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	621a      	str	r2, [r3, #32]
}
 8005d5e:	bf00      	nop
 8005d60:	371c      	adds	r7, #28
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b085      	sub	sp, #20
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
 8005d72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	f043 0307 	orr.w	r3, r3, #7
 8005d8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	609a      	str	r2, [r3, #8]
}
 8005d94:	bf00      	nop
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b087      	sub	sp, #28
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
 8005dac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	021a      	lsls	r2, r3, #8
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	609a      	str	r2, [r3, #8]
}
 8005dd4:	bf00      	nop
 8005dd6:	371c      	adds	r7, #28
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	f003 031f 	and.w	r3, r3, #31
 8005df2:	2201      	movs	r2, #1
 8005df4:	fa02 f303 	lsl.w	r3, r2, r3
 8005df8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6a1a      	ldr	r2, [r3, #32]
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	43db      	mvns	r3, r3
 8005e02:	401a      	ands	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a1a      	ldr	r2, [r3, #32]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	f003 031f 	and.w	r3, r3, #31
 8005e12:	6879      	ldr	r1, [r7, #4]
 8005e14:	fa01 f303 	lsl.w	r3, r1, r3
 8005e18:	431a      	orrs	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	621a      	str	r2, [r3, #32]
}
 8005e1e:	bf00      	nop
 8005e20:	371c      	adds	r7, #28
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
	...

08005e2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d101      	bne.n	8005e44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e40:	2302      	movs	r3, #2
 8005e42:	e050      	b.n	8005ee6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a1c      	ldr	r2, [pc, #112]	; (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d018      	beq.n	8005eba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e90:	d013      	beq.n	8005eba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a18      	ldr	r2, [pc, #96]	; (8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d00e      	beq.n	8005eba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a16      	ldr	r2, [pc, #88]	; (8005efc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d009      	beq.n	8005eba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a15      	ldr	r2, [pc, #84]	; (8005f00 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d004      	beq.n	8005eba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a13      	ldr	r2, [pc, #76]	; (8005f04 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d10c      	bne.n	8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ec0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	40010000 	.word	0x40010000
 8005ef8:	40000400 	.word	0x40000400
 8005efc:	40000800 	.word	0x40000800
 8005f00:	40000c00 	.word	0x40000c00
 8005f04:	40014000 	.word	0x40014000

08005f08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e03f      	b.n	8005fc2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d106      	bne.n	8005f5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7fc fd5e 	bl	8002a18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2224      	movs	r2, #36	; 0x24
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68da      	ldr	r2, [r3, #12]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 f829 	bl	8005fcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	691a      	ldr	r2, [r3, #16]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	695a      	ldr	r2, [r3, #20]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68da      	ldr	r2, [r3, #12]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fa8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2220      	movs	r2, #32
 8005fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2220      	movs	r2, #32
 8005fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
	...

08005fcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fd0:	b0c0      	sub	sp, #256	; 0x100
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe8:	68d9      	ldr	r1, [r3, #12]
 8005fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	ea40 0301 	orr.w	r3, r0, r1
 8005ff4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ffa:	689a      	ldr	r2, [r3, #8]
 8005ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	431a      	orrs	r2, r3
 8006004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	431a      	orrs	r2, r3
 800600c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	4313      	orrs	r3, r2
 8006014:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006024:	f021 010c 	bic.w	r1, r1, #12
 8006028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006032:	430b      	orrs	r3, r1
 8006034:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006046:	6999      	ldr	r1, [r3, #24]
 8006048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	ea40 0301 	orr.w	r3, r0, r1
 8006052:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	4b8f      	ldr	r3, [pc, #572]	; (8006298 <UART_SetConfig+0x2cc>)
 800605c:	429a      	cmp	r2, r3
 800605e:	d005      	beq.n	800606c <UART_SetConfig+0xa0>
 8006060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	4b8d      	ldr	r3, [pc, #564]	; (800629c <UART_SetConfig+0x2d0>)
 8006068:	429a      	cmp	r2, r3
 800606a:	d104      	bne.n	8006076 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800606c:	f7fe fe54 	bl	8004d18 <HAL_RCC_GetPCLK2Freq>
 8006070:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006074:	e003      	b.n	800607e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006076:	f7fe fe3b 	bl	8004cf0 <HAL_RCC_GetPCLK1Freq>
 800607a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800607e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006082:	69db      	ldr	r3, [r3, #28]
 8006084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006088:	f040 810c 	bne.w	80062a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800608c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006090:	2200      	movs	r2, #0
 8006092:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006096:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800609a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800609e:	4622      	mov	r2, r4
 80060a0:	462b      	mov	r3, r5
 80060a2:	1891      	adds	r1, r2, r2
 80060a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80060a6:	415b      	adcs	r3, r3
 80060a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80060ae:	4621      	mov	r1, r4
 80060b0:	eb12 0801 	adds.w	r8, r2, r1
 80060b4:	4629      	mov	r1, r5
 80060b6:	eb43 0901 	adc.w	r9, r3, r1
 80060ba:	f04f 0200 	mov.w	r2, #0
 80060be:	f04f 0300 	mov.w	r3, #0
 80060c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060ce:	4690      	mov	r8, r2
 80060d0:	4699      	mov	r9, r3
 80060d2:	4623      	mov	r3, r4
 80060d4:	eb18 0303 	adds.w	r3, r8, r3
 80060d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80060dc:	462b      	mov	r3, r5
 80060de:	eb49 0303 	adc.w	r3, r9, r3
 80060e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80060f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80060fa:	460b      	mov	r3, r1
 80060fc:	18db      	adds	r3, r3, r3
 80060fe:	653b      	str	r3, [r7, #80]	; 0x50
 8006100:	4613      	mov	r3, r2
 8006102:	eb42 0303 	adc.w	r3, r2, r3
 8006106:	657b      	str	r3, [r7, #84]	; 0x54
 8006108:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800610c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006110:	f7fa fd1e 	bl	8000b50 <__aeabi_uldivmod>
 8006114:	4602      	mov	r2, r0
 8006116:	460b      	mov	r3, r1
 8006118:	4b61      	ldr	r3, [pc, #388]	; (80062a0 <UART_SetConfig+0x2d4>)
 800611a:	fba3 2302 	umull	r2, r3, r3, r2
 800611e:	095b      	lsrs	r3, r3, #5
 8006120:	011c      	lsls	r4, r3, #4
 8006122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006126:	2200      	movs	r2, #0
 8006128:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800612c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006130:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006134:	4642      	mov	r2, r8
 8006136:	464b      	mov	r3, r9
 8006138:	1891      	adds	r1, r2, r2
 800613a:	64b9      	str	r1, [r7, #72]	; 0x48
 800613c:	415b      	adcs	r3, r3
 800613e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006140:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006144:	4641      	mov	r1, r8
 8006146:	eb12 0a01 	adds.w	sl, r2, r1
 800614a:	4649      	mov	r1, r9
 800614c:	eb43 0b01 	adc.w	fp, r3, r1
 8006150:	f04f 0200 	mov.w	r2, #0
 8006154:	f04f 0300 	mov.w	r3, #0
 8006158:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800615c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006160:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006164:	4692      	mov	sl, r2
 8006166:	469b      	mov	fp, r3
 8006168:	4643      	mov	r3, r8
 800616a:	eb1a 0303 	adds.w	r3, sl, r3
 800616e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006172:	464b      	mov	r3, r9
 8006174:	eb4b 0303 	adc.w	r3, fp, r3
 8006178:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800617c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006188:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800618c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006190:	460b      	mov	r3, r1
 8006192:	18db      	adds	r3, r3, r3
 8006194:	643b      	str	r3, [r7, #64]	; 0x40
 8006196:	4613      	mov	r3, r2
 8006198:	eb42 0303 	adc.w	r3, r2, r3
 800619c:	647b      	str	r3, [r7, #68]	; 0x44
 800619e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80061a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80061a6:	f7fa fcd3 	bl	8000b50 <__aeabi_uldivmod>
 80061aa:	4602      	mov	r2, r0
 80061ac:	460b      	mov	r3, r1
 80061ae:	4611      	mov	r1, r2
 80061b0:	4b3b      	ldr	r3, [pc, #236]	; (80062a0 <UART_SetConfig+0x2d4>)
 80061b2:	fba3 2301 	umull	r2, r3, r3, r1
 80061b6:	095b      	lsrs	r3, r3, #5
 80061b8:	2264      	movs	r2, #100	; 0x64
 80061ba:	fb02 f303 	mul.w	r3, r2, r3
 80061be:	1acb      	subs	r3, r1, r3
 80061c0:	00db      	lsls	r3, r3, #3
 80061c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80061c6:	4b36      	ldr	r3, [pc, #216]	; (80062a0 <UART_SetConfig+0x2d4>)
 80061c8:	fba3 2302 	umull	r2, r3, r3, r2
 80061cc:	095b      	lsrs	r3, r3, #5
 80061ce:	005b      	lsls	r3, r3, #1
 80061d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061d4:	441c      	add	r4, r3
 80061d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061da:	2200      	movs	r2, #0
 80061dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80061e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80061e8:	4642      	mov	r2, r8
 80061ea:	464b      	mov	r3, r9
 80061ec:	1891      	adds	r1, r2, r2
 80061ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80061f0:	415b      	adcs	r3, r3
 80061f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80061f8:	4641      	mov	r1, r8
 80061fa:	1851      	adds	r1, r2, r1
 80061fc:	6339      	str	r1, [r7, #48]	; 0x30
 80061fe:	4649      	mov	r1, r9
 8006200:	414b      	adcs	r3, r1
 8006202:	637b      	str	r3, [r7, #52]	; 0x34
 8006204:	f04f 0200 	mov.w	r2, #0
 8006208:	f04f 0300 	mov.w	r3, #0
 800620c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006210:	4659      	mov	r1, fp
 8006212:	00cb      	lsls	r3, r1, #3
 8006214:	4651      	mov	r1, sl
 8006216:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800621a:	4651      	mov	r1, sl
 800621c:	00ca      	lsls	r2, r1, #3
 800621e:	4610      	mov	r0, r2
 8006220:	4619      	mov	r1, r3
 8006222:	4603      	mov	r3, r0
 8006224:	4642      	mov	r2, r8
 8006226:	189b      	adds	r3, r3, r2
 8006228:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800622c:	464b      	mov	r3, r9
 800622e:	460a      	mov	r2, r1
 8006230:	eb42 0303 	adc.w	r3, r2, r3
 8006234:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006244:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006248:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800624c:	460b      	mov	r3, r1
 800624e:	18db      	adds	r3, r3, r3
 8006250:	62bb      	str	r3, [r7, #40]	; 0x28
 8006252:	4613      	mov	r3, r2
 8006254:	eb42 0303 	adc.w	r3, r2, r3
 8006258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800625a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800625e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006262:	f7fa fc75 	bl	8000b50 <__aeabi_uldivmod>
 8006266:	4602      	mov	r2, r0
 8006268:	460b      	mov	r3, r1
 800626a:	4b0d      	ldr	r3, [pc, #52]	; (80062a0 <UART_SetConfig+0x2d4>)
 800626c:	fba3 1302 	umull	r1, r3, r3, r2
 8006270:	095b      	lsrs	r3, r3, #5
 8006272:	2164      	movs	r1, #100	; 0x64
 8006274:	fb01 f303 	mul.w	r3, r1, r3
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	00db      	lsls	r3, r3, #3
 800627c:	3332      	adds	r3, #50	; 0x32
 800627e:	4a08      	ldr	r2, [pc, #32]	; (80062a0 <UART_SetConfig+0x2d4>)
 8006280:	fba2 2303 	umull	r2, r3, r2, r3
 8006284:	095b      	lsrs	r3, r3, #5
 8006286:	f003 0207 	and.w	r2, r3, #7
 800628a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4422      	add	r2, r4
 8006292:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006294:	e105      	b.n	80064a2 <UART_SetConfig+0x4d6>
 8006296:	bf00      	nop
 8006298:	40011000 	.word	0x40011000
 800629c:	40011400 	.word	0x40011400
 80062a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062a8:	2200      	movs	r2, #0
 80062aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80062b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80062b6:	4642      	mov	r2, r8
 80062b8:	464b      	mov	r3, r9
 80062ba:	1891      	adds	r1, r2, r2
 80062bc:	6239      	str	r1, [r7, #32]
 80062be:	415b      	adcs	r3, r3
 80062c0:	627b      	str	r3, [r7, #36]	; 0x24
 80062c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062c6:	4641      	mov	r1, r8
 80062c8:	1854      	adds	r4, r2, r1
 80062ca:	4649      	mov	r1, r9
 80062cc:	eb43 0501 	adc.w	r5, r3, r1
 80062d0:	f04f 0200 	mov.w	r2, #0
 80062d4:	f04f 0300 	mov.w	r3, #0
 80062d8:	00eb      	lsls	r3, r5, #3
 80062da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062de:	00e2      	lsls	r2, r4, #3
 80062e0:	4614      	mov	r4, r2
 80062e2:	461d      	mov	r5, r3
 80062e4:	4643      	mov	r3, r8
 80062e6:	18e3      	adds	r3, r4, r3
 80062e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062ec:	464b      	mov	r3, r9
 80062ee:	eb45 0303 	adc.w	r3, r5, r3
 80062f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006302:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006306:	f04f 0200 	mov.w	r2, #0
 800630a:	f04f 0300 	mov.w	r3, #0
 800630e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006312:	4629      	mov	r1, r5
 8006314:	008b      	lsls	r3, r1, #2
 8006316:	4621      	mov	r1, r4
 8006318:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800631c:	4621      	mov	r1, r4
 800631e:	008a      	lsls	r2, r1, #2
 8006320:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006324:	f7fa fc14 	bl	8000b50 <__aeabi_uldivmod>
 8006328:	4602      	mov	r2, r0
 800632a:	460b      	mov	r3, r1
 800632c:	4b60      	ldr	r3, [pc, #384]	; (80064b0 <UART_SetConfig+0x4e4>)
 800632e:	fba3 2302 	umull	r2, r3, r3, r2
 8006332:	095b      	lsrs	r3, r3, #5
 8006334:	011c      	lsls	r4, r3, #4
 8006336:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800633a:	2200      	movs	r2, #0
 800633c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006340:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006344:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006348:	4642      	mov	r2, r8
 800634a:	464b      	mov	r3, r9
 800634c:	1891      	adds	r1, r2, r2
 800634e:	61b9      	str	r1, [r7, #24]
 8006350:	415b      	adcs	r3, r3
 8006352:	61fb      	str	r3, [r7, #28]
 8006354:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006358:	4641      	mov	r1, r8
 800635a:	1851      	adds	r1, r2, r1
 800635c:	6139      	str	r1, [r7, #16]
 800635e:	4649      	mov	r1, r9
 8006360:	414b      	adcs	r3, r1
 8006362:	617b      	str	r3, [r7, #20]
 8006364:	f04f 0200 	mov.w	r2, #0
 8006368:	f04f 0300 	mov.w	r3, #0
 800636c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006370:	4659      	mov	r1, fp
 8006372:	00cb      	lsls	r3, r1, #3
 8006374:	4651      	mov	r1, sl
 8006376:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800637a:	4651      	mov	r1, sl
 800637c:	00ca      	lsls	r2, r1, #3
 800637e:	4610      	mov	r0, r2
 8006380:	4619      	mov	r1, r3
 8006382:	4603      	mov	r3, r0
 8006384:	4642      	mov	r2, r8
 8006386:	189b      	adds	r3, r3, r2
 8006388:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800638c:	464b      	mov	r3, r9
 800638e:	460a      	mov	r2, r1
 8006390:	eb42 0303 	adc.w	r3, r2, r3
 8006394:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80063a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80063a4:	f04f 0200 	mov.w	r2, #0
 80063a8:	f04f 0300 	mov.w	r3, #0
 80063ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80063b0:	4649      	mov	r1, r9
 80063b2:	008b      	lsls	r3, r1, #2
 80063b4:	4641      	mov	r1, r8
 80063b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063ba:	4641      	mov	r1, r8
 80063bc:	008a      	lsls	r2, r1, #2
 80063be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80063c2:	f7fa fbc5 	bl	8000b50 <__aeabi_uldivmod>
 80063c6:	4602      	mov	r2, r0
 80063c8:	460b      	mov	r3, r1
 80063ca:	4b39      	ldr	r3, [pc, #228]	; (80064b0 <UART_SetConfig+0x4e4>)
 80063cc:	fba3 1302 	umull	r1, r3, r3, r2
 80063d0:	095b      	lsrs	r3, r3, #5
 80063d2:	2164      	movs	r1, #100	; 0x64
 80063d4:	fb01 f303 	mul.w	r3, r1, r3
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	011b      	lsls	r3, r3, #4
 80063dc:	3332      	adds	r3, #50	; 0x32
 80063de:	4a34      	ldr	r2, [pc, #208]	; (80064b0 <UART_SetConfig+0x4e4>)
 80063e0:	fba2 2303 	umull	r2, r3, r2, r3
 80063e4:	095b      	lsrs	r3, r3, #5
 80063e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063ea:	441c      	add	r4, r3
 80063ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063f0:	2200      	movs	r2, #0
 80063f2:	673b      	str	r3, [r7, #112]	; 0x70
 80063f4:	677a      	str	r2, [r7, #116]	; 0x74
 80063f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80063fa:	4642      	mov	r2, r8
 80063fc:	464b      	mov	r3, r9
 80063fe:	1891      	adds	r1, r2, r2
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	415b      	adcs	r3, r3
 8006404:	60fb      	str	r3, [r7, #12]
 8006406:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800640a:	4641      	mov	r1, r8
 800640c:	1851      	adds	r1, r2, r1
 800640e:	6039      	str	r1, [r7, #0]
 8006410:	4649      	mov	r1, r9
 8006412:	414b      	adcs	r3, r1
 8006414:	607b      	str	r3, [r7, #4]
 8006416:	f04f 0200 	mov.w	r2, #0
 800641a:	f04f 0300 	mov.w	r3, #0
 800641e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006422:	4659      	mov	r1, fp
 8006424:	00cb      	lsls	r3, r1, #3
 8006426:	4651      	mov	r1, sl
 8006428:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800642c:	4651      	mov	r1, sl
 800642e:	00ca      	lsls	r2, r1, #3
 8006430:	4610      	mov	r0, r2
 8006432:	4619      	mov	r1, r3
 8006434:	4603      	mov	r3, r0
 8006436:	4642      	mov	r2, r8
 8006438:	189b      	adds	r3, r3, r2
 800643a:	66bb      	str	r3, [r7, #104]	; 0x68
 800643c:	464b      	mov	r3, r9
 800643e:	460a      	mov	r2, r1
 8006440:	eb42 0303 	adc.w	r3, r2, r3
 8006444:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	663b      	str	r3, [r7, #96]	; 0x60
 8006450:	667a      	str	r2, [r7, #100]	; 0x64
 8006452:	f04f 0200 	mov.w	r2, #0
 8006456:	f04f 0300 	mov.w	r3, #0
 800645a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800645e:	4649      	mov	r1, r9
 8006460:	008b      	lsls	r3, r1, #2
 8006462:	4641      	mov	r1, r8
 8006464:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006468:	4641      	mov	r1, r8
 800646a:	008a      	lsls	r2, r1, #2
 800646c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006470:	f7fa fb6e 	bl	8000b50 <__aeabi_uldivmod>
 8006474:	4602      	mov	r2, r0
 8006476:	460b      	mov	r3, r1
 8006478:	4b0d      	ldr	r3, [pc, #52]	; (80064b0 <UART_SetConfig+0x4e4>)
 800647a:	fba3 1302 	umull	r1, r3, r3, r2
 800647e:	095b      	lsrs	r3, r3, #5
 8006480:	2164      	movs	r1, #100	; 0x64
 8006482:	fb01 f303 	mul.w	r3, r1, r3
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	011b      	lsls	r3, r3, #4
 800648a:	3332      	adds	r3, #50	; 0x32
 800648c:	4a08      	ldr	r2, [pc, #32]	; (80064b0 <UART_SetConfig+0x4e4>)
 800648e:	fba2 2303 	umull	r2, r3, r2, r3
 8006492:	095b      	lsrs	r3, r3, #5
 8006494:	f003 020f 	and.w	r2, r3, #15
 8006498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4422      	add	r2, r4
 80064a0:	609a      	str	r2, [r3, #8]
}
 80064a2:	bf00      	nop
 80064a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80064a8:	46bd      	mov	sp, r7
 80064aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064ae:	bf00      	nop
 80064b0:	51eb851f 	.word	0x51eb851f

080064b4 <__errno>:
 80064b4:	4b01      	ldr	r3, [pc, #4]	; (80064bc <__errno+0x8>)
 80064b6:	6818      	ldr	r0, [r3, #0]
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	2000001c 	.word	0x2000001c

080064c0 <__libc_init_array>:
 80064c0:	b570      	push	{r4, r5, r6, lr}
 80064c2:	4d0d      	ldr	r5, [pc, #52]	; (80064f8 <__libc_init_array+0x38>)
 80064c4:	4c0d      	ldr	r4, [pc, #52]	; (80064fc <__libc_init_array+0x3c>)
 80064c6:	1b64      	subs	r4, r4, r5
 80064c8:	10a4      	asrs	r4, r4, #2
 80064ca:	2600      	movs	r6, #0
 80064cc:	42a6      	cmp	r6, r4
 80064ce:	d109      	bne.n	80064e4 <__libc_init_array+0x24>
 80064d0:	4d0b      	ldr	r5, [pc, #44]	; (8006500 <__libc_init_array+0x40>)
 80064d2:	4c0c      	ldr	r4, [pc, #48]	; (8006504 <__libc_init_array+0x44>)
 80064d4:	f001 fb58 	bl	8007b88 <_init>
 80064d8:	1b64      	subs	r4, r4, r5
 80064da:	10a4      	asrs	r4, r4, #2
 80064dc:	2600      	movs	r6, #0
 80064de:	42a6      	cmp	r6, r4
 80064e0:	d105      	bne.n	80064ee <__libc_init_array+0x2e>
 80064e2:	bd70      	pop	{r4, r5, r6, pc}
 80064e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80064e8:	4798      	blx	r3
 80064ea:	3601      	adds	r6, #1
 80064ec:	e7ee      	b.n	80064cc <__libc_init_array+0xc>
 80064ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80064f2:	4798      	blx	r3
 80064f4:	3601      	adds	r6, #1
 80064f6:	e7f2      	b.n	80064de <__libc_init_array+0x1e>
 80064f8:	080084a8 	.word	0x080084a8
 80064fc:	080084a8 	.word	0x080084a8
 8006500:	080084a8 	.word	0x080084a8
 8006504:	080084ac 	.word	0x080084ac

08006508 <memset>:
 8006508:	4402      	add	r2, r0
 800650a:	4603      	mov	r3, r0
 800650c:	4293      	cmp	r3, r2
 800650e:	d100      	bne.n	8006512 <memset+0xa>
 8006510:	4770      	bx	lr
 8006512:	f803 1b01 	strb.w	r1, [r3], #1
 8006516:	e7f9      	b.n	800650c <memset+0x4>

08006518 <pow>:
 8006518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800651a:	ed2d 8b02 	vpush	{d8}
 800651e:	eeb0 8a40 	vmov.f32	s16, s0
 8006522:	eef0 8a60 	vmov.f32	s17, s1
 8006526:	ec55 4b11 	vmov	r4, r5, d1
 800652a:	f000 f909 	bl	8006740 <__ieee754_pow>
 800652e:	4622      	mov	r2, r4
 8006530:	462b      	mov	r3, r5
 8006532:	4620      	mov	r0, r4
 8006534:	4629      	mov	r1, r5
 8006536:	ec57 6b10 	vmov	r6, r7, d0
 800653a:	f7fa faa3 	bl	8000a84 <__aeabi_dcmpun>
 800653e:	2800      	cmp	r0, #0
 8006540:	d13b      	bne.n	80065ba <pow+0xa2>
 8006542:	ec51 0b18 	vmov	r0, r1, d8
 8006546:	2200      	movs	r2, #0
 8006548:	2300      	movs	r3, #0
 800654a:	f7fa fa69 	bl	8000a20 <__aeabi_dcmpeq>
 800654e:	b1b8      	cbz	r0, 8006580 <pow+0x68>
 8006550:	2200      	movs	r2, #0
 8006552:	2300      	movs	r3, #0
 8006554:	4620      	mov	r0, r4
 8006556:	4629      	mov	r1, r5
 8006558:	f7fa fa62 	bl	8000a20 <__aeabi_dcmpeq>
 800655c:	2800      	cmp	r0, #0
 800655e:	d146      	bne.n	80065ee <pow+0xd6>
 8006560:	ec45 4b10 	vmov	d0, r4, r5
 8006564:	f001 f9f9 	bl	800795a <finite>
 8006568:	b338      	cbz	r0, 80065ba <pow+0xa2>
 800656a:	2200      	movs	r2, #0
 800656c:	2300      	movs	r3, #0
 800656e:	4620      	mov	r0, r4
 8006570:	4629      	mov	r1, r5
 8006572:	f7fa fa5f 	bl	8000a34 <__aeabi_dcmplt>
 8006576:	b300      	cbz	r0, 80065ba <pow+0xa2>
 8006578:	f7ff ff9c 	bl	80064b4 <__errno>
 800657c:	2322      	movs	r3, #34	; 0x22
 800657e:	e01b      	b.n	80065b8 <pow+0xa0>
 8006580:	ec47 6b10 	vmov	d0, r6, r7
 8006584:	f001 f9e9 	bl	800795a <finite>
 8006588:	b9e0      	cbnz	r0, 80065c4 <pow+0xac>
 800658a:	eeb0 0a48 	vmov.f32	s0, s16
 800658e:	eef0 0a68 	vmov.f32	s1, s17
 8006592:	f001 f9e2 	bl	800795a <finite>
 8006596:	b1a8      	cbz	r0, 80065c4 <pow+0xac>
 8006598:	ec45 4b10 	vmov	d0, r4, r5
 800659c:	f001 f9dd 	bl	800795a <finite>
 80065a0:	b180      	cbz	r0, 80065c4 <pow+0xac>
 80065a2:	4632      	mov	r2, r6
 80065a4:	463b      	mov	r3, r7
 80065a6:	4630      	mov	r0, r6
 80065a8:	4639      	mov	r1, r7
 80065aa:	f7fa fa6b 	bl	8000a84 <__aeabi_dcmpun>
 80065ae:	2800      	cmp	r0, #0
 80065b0:	d0e2      	beq.n	8006578 <pow+0x60>
 80065b2:	f7ff ff7f 	bl	80064b4 <__errno>
 80065b6:	2321      	movs	r3, #33	; 0x21
 80065b8:	6003      	str	r3, [r0, #0]
 80065ba:	ecbd 8b02 	vpop	{d8}
 80065be:	ec47 6b10 	vmov	d0, r6, r7
 80065c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065c4:	2200      	movs	r2, #0
 80065c6:	2300      	movs	r3, #0
 80065c8:	4630      	mov	r0, r6
 80065ca:	4639      	mov	r1, r7
 80065cc:	f7fa fa28 	bl	8000a20 <__aeabi_dcmpeq>
 80065d0:	2800      	cmp	r0, #0
 80065d2:	d0f2      	beq.n	80065ba <pow+0xa2>
 80065d4:	eeb0 0a48 	vmov.f32	s0, s16
 80065d8:	eef0 0a68 	vmov.f32	s1, s17
 80065dc:	f001 f9bd 	bl	800795a <finite>
 80065e0:	2800      	cmp	r0, #0
 80065e2:	d0ea      	beq.n	80065ba <pow+0xa2>
 80065e4:	ec45 4b10 	vmov	d0, r4, r5
 80065e8:	f001 f9b7 	bl	800795a <finite>
 80065ec:	e7c3      	b.n	8006576 <pow+0x5e>
 80065ee:	4f01      	ldr	r7, [pc, #4]	; (80065f4 <pow+0xdc>)
 80065f0:	2600      	movs	r6, #0
 80065f2:	e7e2      	b.n	80065ba <pow+0xa2>
 80065f4:	3ff00000 	.word	0x3ff00000

080065f8 <sqrt>:
 80065f8:	b538      	push	{r3, r4, r5, lr}
 80065fa:	ed2d 8b02 	vpush	{d8}
 80065fe:	ec55 4b10 	vmov	r4, r5, d0
 8006602:	f000 fdcb 	bl	800719c <__ieee754_sqrt>
 8006606:	4622      	mov	r2, r4
 8006608:	462b      	mov	r3, r5
 800660a:	4620      	mov	r0, r4
 800660c:	4629      	mov	r1, r5
 800660e:	eeb0 8a40 	vmov.f32	s16, s0
 8006612:	eef0 8a60 	vmov.f32	s17, s1
 8006616:	f7fa fa35 	bl	8000a84 <__aeabi_dcmpun>
 800661a:	b990      	cbnz	r0, 8006642 <sqrt+0x4a>
 800661c:	2200      	movs	r2, #0
 800661e:	2300      	movs	r3, #0
 8006620:	4620      	mov	r0, r4
 8006622:	4629      	mov	r1, r5
 8006624:	f7fa fa06 	bl	8000a34 <__aeabi_dcmplt>
 8006628:	b158      	cbz	r0, 8006642 <sqrt+0x4a>
 800662a:	f7ff ff43 	bl	80064b4 <__errno>
 800662e:	2321      	movs	r3, #33	; 0x21
 8006630:	6003      	str	r3, [r0, #0]
 8006632:	2200      	movs	r2, #0
 8006634:	2300      	movs	r3, #0
 8006636:	4610      	mov	r0, r2
 8006638:	4619      	mov	r1, r3
 800663a:	f7fa f8b3 	bl	80007a4 <__aeabi_ddiv>
 800663e:	ec41 0b18 	vmov	d8, r0, r1
 8006642:	eeb0 0a48 	vmov.f32	s0, s16
 8006646:	eef0 0a68 	vmov.f32	s1, s17
 800664a:	ecbd 8b02 	vpop	{d8}
 800664e:	bd38      	pop	{r3, r4, r5, pc}

08006650 <powf>:
 8006650:	b508      	push	{r3, lr}
 8006652:	ed2d 8b04 	vpush	{d8-d9}
 8006656:	eeb0 8a60 	vmov.f32	s16, s1
 800665a:	eeb0 9a40 	vmov.f32	s18, s0
 800665e:	f000 fe4f 	bl	8007300 <__ieee754_powf>
 8006662:	eeb4 8a48 	vcmp.f32	s16, s16
 8006666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800666a:	eef0 8a40 	vmov.f32	s17, s0
 800666e:	d63e      	bvs.n	80066ee <powf+0x9e>
 8006670:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8006674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006678:	d112      	bne.n	80066a0 <powf+0x50>
 800667a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800667e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006682:	d039      	beq.n	80066f8 <powf+0xa8>
 8006684:	eeb0 0a48 	vmov.f32	s0, s16
 8006688:	f001 f9ff 	bl	8007a8a <finitef>
 800668c:	b378      	cbz	r0, 80066ee <powf+0x9e>
 800668e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006696:	d52a      	bpl.n	80066ee <powf+0x9e>
 8006698:	f7ff ff0c 	bl	80064b4 <__errno>
 800669c:	2322      	movs	r3, #34	; 0x22
 800669e:	e014      	b.n	80066ca <powf+0x7a>
 80066a0:	f001 f9f3 	bl	8007a8a <finitef>
 80066a4:	b998      	cbnz	r0, 80066ce <powf+0x7e>
 80066a6:	eeb0 0a49 	vmov.f32	s0, s18
 80066aa:	f001 f9ee 	bl	8007a8a <finitef>
 80066ae:	b170      	cbz	r0, 80066ce <powf+0x7e>
 80066b0:	eeb0 0a48 	vmov.f32	s0, s16
 80066b4:	f001 f9e9 	bl	8007a8a <finitef>
 80066b8:	b148      	cbz	r0, 80066ce <powf+0x7e>
 80066ba:	eef4 8a68 	vcmp.f32	s17, s17
 80066be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066c2:	d7e9      	bvc.n	8006698 <powf+0x48>
 80066c4:	f7ff fef6 	bl	80064b4 <__errno>
 80066c8:	2321      	movs	r3, #33	; 0x21
 80066ca:	6003      	str	r3, [r0, #0]
 80066cc:	e00f      	b.n	80066ee <powf+0x9e>
 80066ce:	eef5 8a40 	vcmp.f32	s17, #0.0
 80066d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066d6:	d10a      	bne.n	80066ee <powf+0x9e>
 80066d8:	eeb0 0a49 	vmov.f32	s0, s18
 80066dc:	f001 f9d5 	bl	8007a8a <finitef>
 80066e0:	b128      	cbz	r0, 80066ee <powf+0x9e>
 80066e2:	eeb0 0a48 	vmov.f32	s0, s16
 80066e6:	f001 f9d0 	bl	8007a8a <finitef>
 80066ea:	2800      	cmp	r0, #0
 80066ec:	d1d4      	bne.n	8006698 <powf+0x48>
 80066ee:	eeb0 0a68 	vmov.f32	s0, s17
 80066f2:	ecbd 8b04 	vpop	{d8-d9}
 80066f6:	bd08      	pop	{r3, pc}
 80066f8:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80066fc:	e7f7      	b.n	80066ee <powf+0x9e>
	...

08006700 <sqrtf>:
 8006700:	b508      	push	{r3, lr}
 8006702:	ed2d 8b02 	vpush	{d8}
 8006706:	eeb0 8a40 	vmov.f32	s16, s0
 800670a:	f001 f8c7 	bl	800789c <__ieee754_sqrtf>
 800670e:	eeb4 8a48 	vcmp.f32	s16, s16
 8006712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006716:	d60c      	bvs.n	8006732 <sqrtf+0x32>
 8006718:	eddf 8a07 	vldr	s17, [pc, #28]	; 8006738 <sqrtf+0x38>
 800671c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006724:	d505      	bpl.n	8006732 <sqrtf+0x32>
 8006726:	f7ff fec5 	bl	80064b4 <__errno>
 800672a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800672e:	2321      	movs	r3, #33	; 0x21
 8006730:	6003      	str	r3, [r0, #0]
 8006732:	ecbd 8b02 	vpop	{d8}
 8006736:	bd08      	pop	{r3, pc}
	...

08006740 <__ieee754_pow>:
 8006740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006744:	ed2d 8b06 	vpush	{d8-d10}
 8006748:	b089      	sub	sp, #36	; 0x24
 800674a:	ed8d 1b00 	vstr	d1, [sp]
 800674e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006752:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006756:	ea58 0102 	orrs.w	r1, r8, r2
 800675a:	ec57 6b10 	vmov	r6, r7, d0
 800675e:	d115      	bne.n	800678c <__ieee754_pow+0x4c>
 8006760:	19b3      	adds	r3, r6, r6
 8006762:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8006766:	4152      	adcs	r2, r2
 8006768:	4299      	cmp	r1, r3
 800676a:	4b89      	ldr	r3, [pc, #548]	; (8006990 <__ieee754_pow+0x250>)
 800676c:	4193      	sbcs	r3, r2
 800676e:	f080 84d2 	bcs.w	8007116 <__ieee754_pow+0x9d6>
 8006772:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006776:	4630      	mov	r0, r6
 8006778:	4639      	mov	r1, r7
 800677a:	f7f9 fd33 	bl	80001e4 <__adddf3>
 800677e:	ec41 0b10 	vmov	d0, r0, r1
 8006782:	b009      	add	sp, #36	; 0x24
 8006784:	ecbd 8b06 	vpop	{d8-d10}
 8006788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800678c:	4b81      	ldr	r3, [pc, #516]	; (8006994 <__ieee754_pow+0x254>)
 800678e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8006792:	429c      	cmp	r4, r3
 8006794:	ee10 aa10 	vmov	sl, s0
 8006798:	463d      	mov	r5, r7
 800679a:	dc06      	bgt.n	80067aa <__ieee754_pow+0x6a>
 800679c:	d101      	bne.n	80067a2 <__ieee754_pow+0x62>
 800679e:	2e00      	cmp	r6, #0
 80067a0:	d1e7      	bne.n	8006772 <__ieee754_pow+0x32>
 80067a2:	4598      	cmp	r8, r3
 80067a4:	dc01      	bgt.n	80067aa <__ieee754_pow+0x6a>
 80067a6:	d10f      	bne.n	80067c8 <__ieee754_pow+0x88>
 80067a8:	b172      	cbz	r2, 80067c8 <__ieee754_pow+0x88>
 80067aa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80067ae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80067b2:	ea55 050a 	orrs.w	r5, r5, sl
 80067b6:	d1dc      	bne.n	8006772 <__ieee754_pow+0x32>
 80067b8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80067bc:	18db      	adds	r3, r3, r3
 80067be:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80067c2:	4152      	adcs	r2, r2
 80067c4:	429d      	cmp	r5, r3
 80067c6:	e7d0      	b.n	800676a <__ieee754_pow+0x2a>
 80067c8:	2d00      	cmp	r5, #0
 80067ca:	da3b      	bge.n	8006844 <__ieee754_pow+0x104>
 80067cc:	4b72      	ldr	r3, [pc, #456]	; (8006998 <__ieee754_pow+0x258>)
 80067ce:	4598      	cmp	r8, r3
 80067d0:	dc51      	bgt.n	8006876 <__ieee754_pow+0x136>
 80067d2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80067d6:	4598      	cmp	r8, r3
 80067d8:	f340 84ac 	ble.w	8007134 <__ieee754_pow+0x9f4>
 80067dc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80067e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80067e4:	2b14      	cmp	r3, #20
 80067e6:	dd0f      	ble.n	8006808 <__ieee754_pow+0xc8>
 80067e8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80067ec:	fa22 f103 	lsr.w	r1, r2, r3
 80067f0:	fa01 f303 	lsl.w	r3, r1, r3
 80067f4:	4293      	cmp	r3, r2
 80067f6:	f040 849d 	bne.w	8007134 <__ieee754_pow+0x9f4>
 80067fa:	f001 0101 	and.w	r1, r1, #1
 80067fe:	f1c1 0302 	rsb	r3, r1, #2
 8006802:	9304      	str	r3, [sp, #16]
 8006804:	b182      	cbz	r2, 8006828 <__ieee754_pow+0xe8>
 8006806:	e05f      	b.n	80068c8 <__ieee754_pow+0x188>
 8006808:	2a00      	cmp	r2, #0
 800680a:	d15b      	bne.n	80068c4 <__ieee754_pow+0x184>
 800680c:	f1c3 0314 	rsb	r3, r3, #20
 8006810:	fa48 f103 	asr.w	r1, r8, r3
 8006814:	fa01 f303 	lsl.w	r3, r1, r3
 8006818:	4543      	cmp	r3, r8
 800681a:	f040 8488 	bne.w	800712e <__ieee754_pow+0x9ee>
 800681e:	f001 0101 	and.w	r1, r1, #1
 8006822:	f1c1 0302 	rsb	r3, r1, #2
 8006826:	9304      	str	r3, [sp, #16]
 8006828:	4b5c      	ldr	r3, [pc, #368]	; (800699c <__ieee754_pow+0x25c>)
 800682a:	4598      	cmp	r8, r3
 800682c:	d132      	bne.n	8006894 <__ieee754_pow+0x154>
 800682e:	f1b9 0f00 	cmp.w	r9, #0
 8006832:	f280 8478 	bge.w	8007126 <__ieee754_pow+0x9e6>
 8006836:	4959      	ldr	r1, [pc, #356]	; (800699c <__ieee754_pow+0x25c>)
 8006838:	4632      	mov	r2, r6
 800683a:	463b      	mov	r3, r7
 800683c:	2000      	movs	r0, #0
 800683e:	f7f9 ffb1 	bl	80007a4 <__aeabi_ddiv>
 8006842:	e79c      	b.n	800677e <__ieee754_pow+0x3e>
 8006844:	2300      	movs	r3, #0
 8006846:	9304      	str	r3, [sp, #16]
 8006848:	2a00      	cmp	r2, #0
 800684a:	d13d      	bne.n	80068c8 <__ieee754_pow+0x188>
 800684c:	4b51      	ldr	r3, [pc, #324]	; (8006994 <__ieee754_pow+0x254>)
 800684e:	4598      	cmp	r8, r3
 8006850:	d1ea      	bne.n	8006828 <__ieee754_pow+0xe8>
 8006852:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006856:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800685a:	ea53 030a 	orrs.w	r3, r3, sl
 800685e:	f000 845a 	beq.w	8007116 <__ieee754_pow+0x9d6>
 8006862:	4b4f      	ldr	r3, [pc, #316]	; (80069a0 <__ieee754_pow+0x260>)
 8006864:	429c      	cmp	r4, r3
 8006866:	dd08      	ble.n	800687a <__ieee754_pow+0x13a>
 8006868:	f1b9 0f00 	cmp.w	r9, #0
 800686c:	f2c0 8457 	blt.w	800711e <__ieee754_pow+0x9de>
 8006870:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006874:	e783      	b.n	800677e <__ieee754_pow+0x3e>
 8006876:	2302      	movs	r3, #2
 8006878:	e7e5      	b.n	8006846 <__ieee754_pow+0x106>
 800687a:	f1b9 0f00 	cmp.w	r9, #0
 800687e:	f04f 0000 	mov.w	r0, #0
 8006882:	f04f 0100 	mov.w	r1, #0
 8006886:	f6bf af7a 	bge.w	800677e <__ieee754_pow+0x3e>
 800688a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800688e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006892:	e774      	b.n	800677e <__ieee754_pow+0x3e>
 8006894:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006898:	d106      	bne.n	80068a8 <__ieee754_pow+0x168>
 800689a:	4632      	mov	r2, r6
 800689c:	463b      	mov	r3, r7
 800689e:	4630      	mov	r0, r6
 80068a0:	4639      	mov	r1, r7
 80068a2:	f7f9 fe55 	bl	8000550 <__aeabi_dmul>
 80068a6:	e76a      	b.n	800677e <__ieee754_pow+0x3e>
 80068a8:	4b3e      	ldr	r3, [pc, #248]	; (80069a4 <__ieee754_pow+0x264>)
 80068aa:	4599      	cmp	r9, r3
 80068ac:	d10c      	bne.n	80068c8 <__ieee754_pow+0x188>
 80068ae:	2d00      	cmp	r5, #0
 80068b0:	db0a      	blt.n	80068c8 <__ieee754_pow+0x188>
 80068b2:	ec47 6b10 	vmov	d0, r6, r7
 80068b6:	b009      	add	sp, #36	; 0x24
 80068b8:	ecbd 8b06 	vpop	{d8-d10}
 80068bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c0:	f000 bc6c 	b.w	800719c <__ieee754_sqrt>
 80068c4:	2300      	movs	r3, #0
 80068c6:	9304      	str	r3, [sp, #16]
 80068c8:	ec47 6b10 	vmov	d0, r6, r7
 80068cc:	f001 f83c 	bl	8007948 <fabs>
 80068d0:	ec51 0b10 	vmov	r0, r1, d0
 80068d4:	f1ba 0f00 	cmp.w	sl, #0
 80068d8:	d129      	bne.n	800692e <__ieee754_pow+0x1ee>
 80068da:	b124      	cbz	r4, 80068e6 <__ieee754_pow+0x1a6>
 80068dc:	4b2f      	ldr	r3, [pc, #188]	; (800699c <__ieee754_pow+0x25c>)
 80068de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d123      	bne.n	800692e <__ieee754_pow+0x1ee>
 80068e6:	f1b9 0f00 	cmp.w	r9, #0
 80068ea:	da05      	bge.n	80068f8 <__ieee754_pow+0x1b8>
 80068ec:	4602      	mov	r2, r0
 80068ee:	460b      	mov	r3, r1
 80068f0:	2000      	movs	r0, #0
 80068f2:	492a      	ldr	r1, [pc, #168]	; (800699c <__ieee754_pow+0x25c>)
 80068f4:	f7f9 ff56 	bl	80007a4 <__aeabi_ddiv>
 80068f8:	2d00      	cmp	r5, #0
 80068fa:	f6bf af40 	bge.w	800677e <__ieee754_pow+0x3e>
 80068fe:	9b04      	ldr	r3, [sp, #16]
 8006900:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006904:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006908:	4323      	orrs	r3, r4
 800690a:	d108      	bne.n	800691e <__ieee754_pow+0x1de>
 800690c:	4602      	mov	r2, r0
 800690e:	460b      	mov	r3, r1
 8006910:	4610      	mov	r0, r2
 8006912:	4619      	mov	r1, r3
 8006914:	f7f9 fc64 	bl	80001e0 <__aeabi_dsub>
 8006918:	4602      	mov	r2, r0
 800691a:	460b      	mov	r3, r1
 800691c:	e78f      	b.n	800683e <__ieee754_pow+0xfe>
 800691e:	9b04      	ldr	r3, [sp, #16]
 8006920:	2b01      	cmp	r3, #1
 8006922:	f47f af2c 	bne.w	800677e <__ieee754_pow+0x3e>
 8006926:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800692a:	4619      	mov	r1, r3
 800692c:	e727      	b.n	800677e <__ieee754_pow+0x3e>
 800692e:	0feb      	lsrs	r3, r5, #31
 8006930:	3b01      	subs	r3, #1
 8006932:	9306      	str	r3, [sp, #24]
 8006934:	9a06      	ldr	r2, [sp, #24]
 8006936:	9b04      	ldr	r3, [sp, #16]
 8006938:	4313      	orrs	r3, r2
 800693a:	d102      	bne.n	8006942 <__ieee754_pow+0x202>
 800693c:	4632      	mov	r2, r6
 800693e:	463b      	mov	r3, r7
 8006940:	e7e6      	b.n	8006910 <__ieee754_pow+0x1d0>
 8006942:	4b19      	ldr	r3, [pc, #100]	; (80069a8 <__ieee754_pow+0x268>)
 8006944:	4598      	cmp	r8, r3
 8006946:	f340 80fb 	ble.w	8006b40 <__ieee754_pow+0x400>
 800694a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800694e:	4598      	cmp	r8, r3
 8006950:	4b13      	ldr	r3, [pc, #76]	; (80069a0 <__ieee754_pow+0x260>)
 8006952:	dd0c      	ble.n	800696e <__ieee754_pow+0x22e>
 8006954:	429c      	cmp	r4, r3
 8006956:	dc0f      	bgt.n	8006978 <__ieee754_pow+0x238>
 8006958:	f1b9 0f00 	cmp.w	r9, #0
 800695c:	da0f      	bge.n	800697e <__ieee754_pow+0x23e>
 800695e:	2000      	movs	r0, #0
 8006960:	b009      	add	sp, #36	; 0x24
 8006962:	ecbd 8b06 	vpop	{d8-d10}
 8006966:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800696a:	f000 bfc1 	b.w	80078f0 <__math_oflow>
 800696e:	429c      	cmp	r4, r3
 8006970:	dbf2      	blt.n	8006958 <__ieee754_pow+0x218>
 8006972:	4b0a      	ldr	r3, [pc, #40]	; (800699c <__ieee754_pow+0x25c>)
 8006974:	429c      	cmp	r4, r3
 8006976:	dd19      	ble.n	80069ac <__ieee754_pow+0x26c>
 8006978:	f1b9 0f00 	cmp.w	r9, #0
 800697c:	dcef      	bgt.n	800695e <__ieee754_pow+0x21e>
 800697e:	2000      	movs	r0, #0
 8006980:	b009      	add	sp, #36	; 0x24
 8006982:	ecbd 8b06 	vpop	{d8-d10}
 8006986:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800698a:	f000 bfa8 	b.w	80078de <__math_uflow>
 800698e:	bf00      	nop
 8006990:	fff00000 	.word	0xfff00000
 8006994:	7ff00000 	.word	0x7ff00000
 8006998:	433fffff 	.word	0x433fffff
 800699c:	3ff00000 	.word	0x3ff00000
 80069a0:	3fefffff 	.word	0x3fefffff
 80069a4:	3fe00000 	.word	0x3fe00000
 80069a8:	41e00000 	.word	0x41e00000
 80069ac:	4b60      	ldr	r3, [pc, #384]	; (8006b30 <__ieee754_pow+0x3f0>)
 80069ae:	2200      	movs	r2, #0
 80069b0:	f7f9 fc16 	bl	80001e0 <__aeabi_dsub>
 80069b4:	a354      	add	r3, pc, #336	; (adr r3, 8006b08 <__ieee754_pow+0x3c8>)
 80069b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ba:	4604      	mov	r4, r0
 80069bc:	460d      	mov	r5, r1
 80069be:	f7f9 fdc7 	bl	8000550 <__aeabi_dmul>
 80069c2:	a353      	add	r3, pc, #332	; (adr r3, 8006b10 <__ieee754_pow+0x3d0>)
 80069c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c8:	4606      	mov	r6, r0
 80069ca:	460f      	mov	r7, r1
 80069cc:	4620      	mov	r0, r4
 80069ce:	4629      	mov	r1, r5
 80069d0:	f7f9 fdbe 	bl	8000550 <__aeabi_dmul>
 80069d4:	4b57      	ldr	r3, [pc, #348]	; (8006b34 <__ieee754_pow+0x3f4>)
 80069d6:	4682      	mov	sl, r0
 80069d8:	468b      	mov	fp, r1
 80069da:	2200      	movs	r2, #0
 80069dc:	4620      	mov	r0, r4
 80069de:	4629      	mov	r1, r5
 80069e0:	f7f9 fdb6 	bl	8000550 <__aeabi_dmul>
 80069e4:	4602      	mov	r2, r0
 80069e6:	460b      	mov	r3, r1
 80069e8:	a14b      	add	r1, pc, #300	; (adr r1, 8006b18 <__ieee754_pow+0x3d8>)
 80069ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069ee:	f7f9 fbf7 	bl	80001e0 <__aeabi_dsub>
 80069f2:	4622      	mov	r2, r4
 80069f4:	462b      	mov	r3, r5
 80069f6:	f7f9 fdab 	bl	8000550 <__aeabi_dmul>
 80069fa:	4602      	mov	r2, r0
 80069fc:	460b      	mov	r3, r1
 80069fe:	2000      	movs	r0, #0
 8006a00:	494d      	ldr	r1, [pc, #308]	; (8006b38 <__ieee754_pow+0x3f8>)
 8006a02:	f7f9 fbed 	bl	80001e0 <__aeabi_dsub>
 8006a06:	4622      	mov	r2, r4
 8006a08:	4680      	mov	r8, r0
 8006a0a:	4689      	mov	r9, r1
 8006a0c:	462b      	mov	r3, r5
 8006a0e:	4620      	mov	r0, r4
 8006a10:	4629      	mov	r1, r5
 8006a12:	f7f9 fd9d 	bl	8000550 <__aeabi_dmul>
 8006a16:	4602      	mov	r2, r0
 8006a18:	460b      	mov	r3, r1
 8006a1a:	4640      	mov	r0, r8
 8006a1c:	4649      	mov	r1, r9
 8006a1e:	f7f9 fd97 	bl	8000550 <__aeabi_dmul>
 8006a22:	a33f      	add	r3, pc, #252	; (adr r3, 8006b20 <__ieee754_pow+0x3e0>)
 8006a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a28:	f7f9 fd92 	bl	8000550 <__aeabi_dmul>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	460b      	mov	r3, r1
 8006a30:	4650      	mov	r0, sl
 8006a32:	4659      	mov	r1, fp
 8006a34:	f7f9 fbd4 	bl	80001e0 <__aeabi_dsub>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	4680      	mov	r8, r0
 8006a3e:	4689      	mov	r9, r1
 8006a40:	4630      	mov	r0, r6
 8006a42:	4639      	mov	r1, r7
 8006a44:	f7f9 fbce 	bl	80001e4 <__adddf3>
 8006a48:	2000      	movs	r0, #0
 8006a4a:	4632      	mov	r2, r6
 8006a4c:	463b      	mov	r3, r7
 8006a4e:	4604      	mov	r4, r0
 8006a50:	460d      	mov	r5, r1
 8006a52:	f7f9 fbc5 	bl	80001e0 <__aeabi_dsub>
 8006a56:	4602      	mov	r2, r0
 8006a58:	460b      	mov	r3, r1
 8006a5a:	4640      	mov	r0, r8
 8006a5c:	4649      	mov	r1, r9
 8006a5e:	f7f9 fbbf 	bl	80001e0 <__aeabi_dsub>
 8006a62:	9b04      	ldr	r3, [sp, #16]
 8006a64:	9a06      	ldr	r2, [sp, #24]
 8006a66:	3b01      	subs	r3, #1
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	4682      	mov	sl, r0
 8006a6c:	468b      	mov	fp, r1
 8006a6e:	f040 81e7 	bne.w	8006e40 <__ieee754_pow+0x700>
 8006a72:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006b28 <__ieee754_pow+0x3e8>
 8006a76:	eeb0 8a47 	vmov.f32	s16, s14
 8006a7a:	eef0 8a67 	vmov.f32	s17, s15
 8006a7e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006a82:	2600      	movs	r6, #0
 8006a84:	4632      	mov	r2, r6
 8006a86:	463b      	mov	r3, r7
 8006a88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a8c:	f7f9 fba8 	bl	80001e0 <__aeabi_dsub>
 8006a90:	4622      	mov	r2, r4
 8006a92:	462b      	mov	r3, r5
 8006a94:	f7f9 fd5c 	bl	8000550 <__aeabi_dmul>
 8006a98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a9c:	4680      	mov	r8, r0
 8006a9e:	4689      	mov	r9, r1
 8006aa0:	4650      	mov	r0, sl
 8006aa2:	4659      	mov	r1, fp
 8006aa4:	f7f9 fd54 	bl	8000550 <__aeabi_dmul>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	4640      	mov	r0, r8
 8006aae:	4649      	mov	r1, r9
 8006ab0:	f7f9 fb98 	bl	80001e4 <__adddf3>
 8006ab4:	4632      	mov	r2, r6
 8006ab6:	463b      	mov	r3, r7
 8006ab8:	4680      	mov	r8, r0
 8006aba:	4689      	mov	r9, r1
 8006abc:	4620      	mov	r0, r4
 8006abe:	4629      	mov	r1, r5
 8006ac0:	f7f9 fd46 	bl	8000550 <__aeabi_dmul>
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	4604      	mov	r4, r0
 8006ac8:	460d      	mov	r5, r1
 8006aca:	4602      	mov	r2, r0
 8006acc:	4649      	mov	r1, r9
 8006ace:	4640      	mov	r0, r8
 8006ad0:	f7f9 fb88 	bl	80001e4 <__adddf3>
 8006ad4:	4b19      	ldr	r3, [pc, #100]	; (8006b3c <__ieee754_pow+0x3fc>)
 8006ad6:	4299      	cmp	r1, r3
 8006ad8:	ec45 4b19 	vmov	d9, r4, r5
 8006adc:	4606      	mov	r6, r0
 8006ade:	460f      	mov	r7, r1
 8006ae0:	468b      	mov	fp, r1
 8006ae2:	f340 82f1 	ble.w	80070c8 <__ieee754_pow+0x988>
 8006ae6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006aea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006aee:	4303      	orrs	r3, r0
 8006af0:	f000 81e4 	beq.w	8006ebc <__ieee754_pow+0x77c>
 8006af4:	ec51 0b18 	vmov	r0, r1, d8
 8006af8:	2200      	movs	r2, #0
 8006afa:	2300      	movs	r3, #0
 8006afc:	f7f9 ff9a 	bl	8000a34 <__aeabi_dcmplt>
 8006b00:	3800      	subs	r0, #0
 8006b02:	bf18      	it	ne
 8006b04:	2001      	movne	r0, #1
 8006b06:	e72b      	b.n	8006960 <__ieee754_pow+0x220>
 8006b08:	60000000 	.word	0x60000000
 8006b0c:	3ff71547 	.word	0x3ff71547
 8006b10:	f85ddf44 	.word	0xf85ddf44
 8006b14:	3e54ae0b 	.word	0x3e54ae0b
 8006b18:	55555555 	.word	0x55555555
 8006b1c:	3fd55555 	.word	0x3fd55555
 8006b20:	652b82fe 	.word	0x652b82fe
 8006b24:	3ff71547 	.word	0x3ff71547
 8006b28:	00000000 	.word	0x00000000
 8006b2c:	bff00000 	.word	0xbff00000
 8006b30:	3ff00000 	.word	0x3ff00000
 8006b34:	3fd00000 	.word	0x3fd00000
 8006b38:	3fe00000 	.word	0x3fe00000
 8006b3c:	408fffff 	.word	0x408fffff
 8006b40:	4bd5      	ldr	r3, [pc, #852]	; (8006e98 <__ieee754_pow+0x758>)
 8006b42:	402b      	ands	r3, r5
 8006b44:	2200      	movs	r2, #0
 8006b46:	b92b      	cbnz	r3, 8006b54 <__ieee754_pow+0x414>
 8006b48:	4bd4      	ldr	r3, [pc, #848]	; (8006e9c <__ieee754_pow+0x75c>)
 8006b4a:	f7f9 fd01 	bl	8000550 <__aeabi_dmul>
 8006b4e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006b52:	460c      	mov	r4, r1
 8006b54:	1523      	asrs	r3, r4, #20
 8006b56:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006b5a:	4413      	add	r3, r2
 8006b5c:	9305      	str	r3, [sp, #20]
 8006b5e:	4bd0      	ldr	r3, [pc, #832]	; (8006ea0 <__ieee754_pow+0x760>)
 8006b60:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006b64:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006b68:	429c      	cmp	r4, r3
 8006b6a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006b6e:	dd08      	ble.n	8006b82 <__ieee754_pow+0x442>
 8006b70:	4bcc      	ldr	r3, [pc, #816]	; (8006ea4 <__ieee754_pow+0x764>)
 8006b72:	429c      	cmp	r4, r3
 8006b74:	f340 8162 	ble.w	8006e3c <__ieee754_pow+0x6fc>
 8006b78:	9b05      	ldr	r3, [sp, #20]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	9305      	str	r3, [sp, #20]
 8006b7e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006b82:	2400      	movs	r4, #0
 8006b84:	00e3      	lsls	r3, r4, #3
 8006b86:	9307      	str	r3, [sp, #28]
 8006b88:	4bc7      	ldr	r3, [pc, #796]	; (8006ea8 <__ieee754_pow+0x768>)
 8006b8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b8e:	ed93 7b00 	vldr	d7, [r3]
 8006b92:	4629      	mov	r1, r5
 8006b94:	ec53 2b17 	vmov	r2, r3, d7
 8006b98:	eeb0 9a47 	vmov.f32	s18, s14
 8006b9c:	eef0 9a67 	vmov.f32	s19, s15
 8006ba0:	4682      	mov	sl, r0
 8006ba2:	f7f9 fb1d 	bl	80001e0 <__aeabi_dsub>
 8006ba6:	4652      	mov	r2, sl
 8006ba8:	4606      	mov	r6, r0
 8006baa:	460f      	mov	r7, r1
 8006bac:	462b      	mov	r3, r5
 8006bae:	ec51 0b19 	vmov	r0, r1, d9
 8006bb2:	f7f9 fb17 	bl	80001e4 <__adddf3>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	460b      	mov	r3, r1
 8006bba:	2000      	movs	r0, #0
 8006bbc:	49bb      	ldr	r1, [pc, #748]	; (8006eac <__ieee754_pow+0x76c>)
 8006bbe:	f7f9 fdf1 	bl	80007a4 <__aeabi_ddiv>
 8006bc2:	ec41 0b1a 	vmov	d10, r0, r1
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	460b      	mov	r3, r1
 8006bca:	4630      	mov	r0, r6
 8006bcc:	4639      	mov	r1, r7
 8006bce:	f7f9 fcbf 	bl	8000550 <__aeabi_dmul>
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bd8:	9302      	str	r3, [sp, #8]
 8006bda:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006bde:	46ab      	mov	fp, r5
 8006be0:	106d      	asrs	r5, r5, #1
 8006be2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006be6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006bea:	ec41 0b18 	vmov	d8, r0, r1
 8006bee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	4640      	mov	r0, r8
 8006bf6:	4649      	mov	r1, r9
 8006bf8:	4614      	mov	r4, r2
 8006bfa:	461d      	mov	r5, r3
 8006bfc:	f7f9 fca8 	bl	8000550 <__aeabi_dmul>
 8006c00:	4602      	mov	r2, r0
 8006c02:	460b      	mov	r3, r1
 8006c04:	4630      	mov	r0, r6
 8006c06:	4639      	mov	r1, r7
 8006c08:	f7f9 faea 	bl	80001e0 <__aeabi_dsub>
 8006c0c:	ec53 2b19 	vmov	r2, r3, d9
 8006c10:	4606      	mov	r6, r0
 8006c12:	460f      	mov	r7, r1
 8006c14:	4620      	mov	r0, r4
 8006c16:	4629      	mov	r1, r5
 8006c18:	f7f9 fae2 	bl	80001e0 <__aeabi_dsub>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	460b      	mov	r3, r1
 8006c20:	4650      	mov	r0, sl
 8006c22:	4659      	mov	r1, fp
 8006c24:	f7f9 fadc 	bl	80001e0 <__aeabi_dsub>
 8006c28:	4642      	mov	r2, r8
 8006c2a:	464b      	mov	r3, r9
 8006c2c:	f7f9 fc90 	bl	8000550 <__aeabi_dmul>
 8006c30:	4602      	mov	r2, r0
 8006c32:	460b      	mov	r3, r1
 8006c34:	4630      	mov	r0, r6
 8006c36:	4639      	mov	r1, r7
 8006c38:	f7f9 fad2 	bl	80001e0 <__aeabi_dsub>
 8006c3c:	ec53 2b1a 	vmov	r2, r3, d10
 8006c40:	f7f9 fc86 	bl	8000550 <__aeabi_dmul>
 8006c44:	ec53 2b18 	vmov	r2, r3, d8
 8006c48:	ec41 0b19 	vmov	d9, r0, r1
 8006c4c:	ec51 0b18 	vmov	r0, r1, d8
 8006c50:	f7f9 fc7e 	bl	8000550 <__aeabi_dmul>
 8006c54:	a37c      	add	r3, pc, #496	; (adr r3, 8006e48 <__ieee754_pow+0x708>)
 8006c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5a:	4604      	mov	r4, r0
 8006c5c:	460d      	mov	r5, r1
 8006c5e:	f7f9 fc77 	bl	8000550 <__aeabi_dmul>
 8006c62:	a37b      	add	r3, pc, #492	; (adr r3, 8006e50 <__ieee754_pow+0x710>)
 8006c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c68:	f7f9 fabc 	bl	80001e4 <__adddf3>
 8006c6c:	4622      	mov	r2, r4
 8006c6e:	462b      	mov	r3, r5
 8006c70:	f7f9 fc6e 	bl	8000550 <__aeabi_dmul>
 8006c74:	a378      	add	r3, pc, #480	; (adr r3, 8006e58 <__ieee754_pow+0x718>)
 8006c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7a:	f7f9 fab3 	bl	80001e4 <__adddf3>
 8006c7e:	4622      	mov	r2, r4
 8006c80:	462b      	mov	r3, r5
 8006c82:	f7f9 fc65 	bl	8000550 <__aeabi_dmul>
 8006c86:	a376      	add	r3, pc, #472	; (adr r3, 8006e60 <__ieee754_pow+0x720>)
 8006c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8c:	f7f9 faaa 	bl	80001e4 <__adddf3>
 8006c90:	4622      	mov	r2, r4
 8006c92:	462b      	mov	r3, r5
 8006c94:	f7f9 fc5c 	bl	8000550 <__aeabi_dmul>
 8006c98:	a373      	add	r3, pc, #460	; (adr r3, 8006e68 <__ieee754_pow+0x728>)
 8006c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9e:	f7f9 faa1 	bl	80001e4 <__adddf3>
 8006ca2:	4622      	mov	r2, r4
 8006ca4:	462b      	mov	r3, r5
 8006ca6:	f7f9 fc53 	bl	8000550 <__aeabi_dmul>
 8006caa:	a371      	add	r3, pc, #452	; (adr r3, 8006e70 <__ieee754_pow+0x730>)
 8006cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb0:	f7f9 fa98 	bl	80001e4 <__adddf3>
 8006cb4:	4622      	mov	r2, r4
 8006cb6:	4606      	mov	r6, r0
 8006cb8:	460f      	mov	r7, r1
 8006cba:	462b      	mov	r3, r5
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	4629      	mov	r1, r5
 8006cc0:	f7f9 fc46 	bl	8000550 <__aeabi_dmul>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	4630      	mov	r0, r6
 8006cca:	4639      	mov	r1, r7
 8006ccc:	f7f9 fc40 	bl	8000550 <__aeabi_dmul>
 8006cd0:	4642      	mov	r2, r8
 8006cd2:	4604      	mov	r4, r0
 8006cd4:	460d      	mov	r5, r1
 8006cd6:	464b      	mov	r3, r9
 8006cd8:	ec51 0b18 	vmov	r0, r1, d8
 8006cdc:	f7f9 fa82 	bl	80001e4 <__adddf3>
 8006ce0:	ec53 2b19 	vmov	r2, r3, d9
 8006ce4:	f7f9 fc34 	bl	8000550 <__aeabi_dmul>
 8006ce8:	4622      	mov	r2, r4
 8006cea:	462b      	mov	r3, r5
 8006cec:	f7f9 fa7a 	bl	80001e4 <__adddf3>
 8006cf0:	4642      	mov	r2, r8
 8006cf2:	4682      	mov	sl, r0
 8006cf4:	468b      	mov	fp, r1
 8006cf6:	464b      	mov	r3, r9
 8006cf8:	4640      	mov	r0, r8
 8006cfa:	4649      	mov	r1, r9
 8006cfc:	f7f9 fc28 	bl	8000550 <__aeabi_dmul>
 8006d00:	4b6b      	ldr	r3, [pc, #428]	; (8006eb0 <__ieee754_pow+0x770>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	4606      	mov	r6, r0
 8006d06:	460f      	mov	r7, r1
 8006d08:	f7f9 fa6c 	bl	80001e4 <__adddf3>
 8006d0c:	4652      	mov	r2, sl
 8006d0e:	465b      	mov	r3, fp
 8006d10:	f7f9 fa68 	bl	80001e4 <__adddf3>
 8006d14:	2000      	movs	r0, #0
 8006d16:	4604      	mov	r4, r0
 8006d18:	460d      	mov	r5, r1
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	4640      	mov	r0, r8
 8006d20:	4649      	mov	r1, r9
 8006d22:	f7f9 fc15 	bl	8000550 <__aeabi_dmul>
 8006d26:	4b62      	ldr	r3, [pc, #392]	; (8006eb0 <__ieee754_pow+0x770>)
 8006d28:	4680      	mov	r8, r0
 8006d2a:	4689      	mov	r9, r1
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	4620      	mov	r0, r4
 8006d30:	4629      	mov	r1, r5
 8006d32:	f7f9 fa55 	bl	80001e0 <__aeabi_dsub>
 8006d36:	4632      	mov	r2, r6
 8006d38:	463b      	mov	r3, r7
 8006d3a:	f7f9 fa51 	bl	80001e0 <__aeabi_dsub>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	460b      	mov	r3, r1
 8006d42:	4650      	mov	r0, sl
 8006d44:	4659      	mov	r1, fp
 8006d46:	f7f9 fa4b 	bl	80001e0 <__aeabi_dsub>
 8006d4a:	ec53 2b18 	vmov	r2, r3, d8
 8006d4e:	f7f9 fbff 	bl	8000550 <__aeabi_dmul>
 8006d52:	4622      	mov	r2, r4
 8006d54:	4606      	mov	r6, r0
 8006d56:	460f      	mov	r7, r1
 8006d58:	462b      	mov	r3, r5
 8006d5a:	ec51 0b19 	vmov	r0, r1, d9
 8006d5e:	f7f9 fbf7 	bl	8000550 <__aeabi_dmul>
 8006d62:	4602      	mov	r2, r0
 8006d64:	460b      	mov	r3, r1
 8006d66:	4630      	mov	r0, r6
 8006d68:	4639      	mov	r1, r7
 8006d6a:	f7f9 fa3b 	bl	80001e4 <__adddf3>
 8006d6e:	4606      	mov	r6, r0
 8006d70:	460f      	mov	r7, r1
 8006d72:	4602      	mov	r2, r0
 8006d74:	460b      	mov	r3, r1
 8006d76:	4640      	mov	r0, r8
 8006d78:	4649      	mov	r1, r9
 8006d7a:	f7f9 fa33 	bl	80001e4 <__adddf3>
 8006d7e:	a33e      	add	r3, pc, #248	; (adr r3, 8006e78 <__ieee754_pow+0x738>)
 8006d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d84:	2000      	movs	r0, #0
 8006d86:	4604      	mov	r4, r0
 8006d88:	460d      	mov	r5, r1
 8006d8a:	f7f9 fbe1 	bl	8000550 <__aeabi_dmul>
 8006d8e:	4642      	mov	r2, r8
 8006d90:	ec41 0b18 	vmov	d8, r0, r1
 8006d94:	464b      	mov	r3, r9
 8006d96:	4620      	mov	r0, r4
 8006d98:	4629      	mov	r1, r5
 8006d9a:	f7f9 fa21 	bl	80001e0 <__aeabi_dsub>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	460b      	mov	r3, r1
 8006da2:	4630      	mov	r0, r6
 8006da4:	4639      	mov	r1, r7
 8006da6:	f7f9 fa1b 	bl	80001e0 <__aeabi_dsub>
 8006daa:	a335      	add	r3, pc, #212	; (adr r3, 8006e80 <__ieee754_pow+0x740>)
 8006dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db0:	f7f9 fbce 	bl	8000550 <__aeabi_dmul>
 8006db4:	a334      	add	r3, pc, #208	; (adr r3, 8006e88 <__ieee754_pow+0x748>)
 8006db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dba:	4606      	mov	r6, r0
 8006dbc:	460f      	mov	r7, r1
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	f7f9 fbc5 	bl	8000550 <__aeabi_dmul>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	460b      	mov	r3, r1
 8006dca:	4630      	mov	r0, r6
 8006dcc:	4639      	mov	r1, r7
 8006dce:	f7f9 fa09 	bl	80001e4 <__adddf3>
 8006dd2:	9a07      	ldr	r2, [sp, #28]
 8006dd4:	4b37      	ldr	r3, [pc, #220]	; (8006eb4 <__ieee754_pow+0x774>)
 8006dd6:	4413      	add	r3, r2
 8006dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ddc:	f7f9 fa02 	bl	80001e4 <__adddf3>
 8006de0:	4682      	mov	sl, r0
 8006de2:	9805      	ldr	r0, [sp, #20]
 8006de4:	468b      	mov	fp, r1
 8006de6:	f7f9 fb49 	bl	800047c <__aeabi_i2d>
 8006dea:	9a07      	ldr	r2, [sp, #28]
 8006dec:	4b32      	ldr	r3, [pc, #200]	; (8006eb8 <__ieee754_pow+0x778>)
 8006dee:	4413      	add	r3, r2
 8006df0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006df4:	4606      	mov	r6, r0
 8006df6:	460f      	mov	r7, r1
 8006df8:	4652      	mov	r2, sl
 8006dfa:	465b      	mov	r3, fp
 8006dfc:	ec51 0b18 	vmov	r0, r1, d8
 8006e00:	f7f9 f9f0 	bl	80001e4 <__adddf3>
 8006e04:	4642      	mov	r2, r8
 8006e06:	464b      	mov	r3, r9
 8006e08:	f7f9 f9ec 	bl	80001e4 <__adddf3>
 8006e0c:	4632      	mov	r2, r6
 8006e0e:	463b      	mov	r3, r7
 8006e10:	f7f9 f9e8 	bl	80001e4 <__adddf3>
 8006e14:	2000      	movs	r0, #0
 8006e16:	4632      	mov	r2, r6
 8006e18:	463b      	mov	r3, r7
 8006e1a:	4604      	mov	r4, r0
 8006e1c:	460d      	mov	r5, r1
 8006e1e:	f7f9 f9df 	bl	80001e0 <__aeabi_dsub>
 8006e22:	4642      	mov	r2, r8
 8006e24:	464b      	mov	r3, r9
 8006e26:	f7f9 f9db 	bl	80001e0 <__aeabi_dsub>
 8006e2a:	ec53 2b18 	vmov	r2, r3, d8
 8006e2e:	f7f9 f9d7 	bl	80001e0 <__aeabi_dsub>
 8006e32:	4602      	mov	r2, r0
 8006e34:	460b      	mov	r3, r1
 8006e36:	4650      	mov	r0, sl
 8006e38:	4659      	mov	r1, fp
 8006e3a:	e610      	b.n	8006a5e <__ieee754_pow+0x31e>
 8006e3c:	2401      	movs	r4, #1
 8006e3e:	e6a1      	b.n	8006b84 <__ieee754_pow+0x444>
 8006e40:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006e90 <__ieee754_pow+0x750>
 8006e44:	e617      	b.n	8006a76 <__ieee754_pow+0x336>
 8006e46:	bf00      	nop
 8006e48:	4a454eef 	.word	0x4a454eef
 8006e4c:	3fca7e28 	.word	0x3fca7e28
 8006e50:	93c9db65 	.word	0x93c9db65
 8006e54:	3fcd864a 	.word	0x3fcd864a
 8006e58:	a91d4101 	.word	0xa91d4101
 8006e5c:	3fd17460 	.word	0x3fd17460
 8006e60:	518f264d 	.word	0x518f264d
 8006e64:	3fd55555 	.word	0x3fd55555
 8006e68:	db6fabff 	.word	0xdb6fabff
 8006e6c:	3fdb6db6 	.word	0x3fdb6db6
 8006e70:	33333303 	.word	0x33333303
 8006e74:	3fe33333 	.word	0x3fe33333
 8006e78:	e0000000 	.word	0xe0000000
 8006e7c:	3feec709 	.word	0x3feec709
 8006e80:	dc3a03fd 	.word	0xdc3a03fd
 8006e84:	3feec709 	.word	0x3feec709
 8006e88:	145b01f5 	.word	0x145b01f5
 8006e8c:	be3e2fe0 	.word	0xbe3e2fe0
 8006e90:	00000000 	.word	0x00000000
 8006e94:	3ff00000 	.word	0x3ff00000
 8006e98:	7ff00000 	.word	0x7ff00000
 8006e9c:	43400000 	.word	0x43400000
 8006ea0:	0003988e 	.word	0x0003988e
 8006ea4:	000bb679 	.word	0x000bb679
 8006ea8:	08008458 	.word	0x08008458
 8006eac:	3ff00000 	.word	0x3ff00000
 8006eb0:	40080000 	.word	0x40080000
 8006eb4:	08008478 	.word	0x08008478
 8006eb8:	08008468 	.word	0x08008468
 8006ebc:	a3b5      	add	r3, pc, #724	; (adr r3, 8007194 <__ieee754_pow+0xa54>)
 8006ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec2:	4640      	mov	r0, r8
 8006ec4:	4649      	mov	r1, r9
 8006ec6:	f7f9 f98d 	bl	80001e4 <__adddf3>
 8006eca:	4622      	mov	r2, r4
 8006ecc:	ec41 0b1a 	vmov	d10, r0, r1
 8006ed0:	462b      	mov	r3, r5
 8006ed2:	4630      	mov	r0, r6
 8006ed4:	4639      	mov	r1, r7
 8006ed6:	f7f9 f983 	bl	80001e0 <__aeabi_dsub>
 8006eda:	4602      	mov	r2, r0
 8006edc:	460b      	mov	r3, r1
 8006ede:	ec51 0b1a 	vmov	r0, r1, d10
 8006ee2:	f7f9 fdc5 	bl	8000a70 <__aeabi_dcmpgt>
 8006ee6:	2800      	cmp	r0, #0
 8006ee8:	f47f ae04 	bne.w	8006af4 <__ieee754_pow+0x3b4>
 8006eec:	4aa4      	ldr	r2, [pc, #656]	; (8007180 <__ieee754_pow+0xa40>)
 8006eee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	f340 8108 	ble.w	8007108 <__ieee754_pow+0x9c8>
 8006ef8:	151b      	asrs	r3, r3, #20
 8006efa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006efe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006f02:	fa4a f303 	asr.w	r3, sl, r3
 8006f06:	445b      	add	r3, fp
 8006f08:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006f0c:	4e9d      	ldr	r6, [pc, #628]	; (8007184 <__ieee754_pow+0xa44>)
 8006f0e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006f12:	4116      	asrs	r6, r2
 8006f14:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006f18:	2000      	movs	r0, #0
 8006f1a:	ea23 0106 	bic.w	r1, r3, r6
 8006f1e:	f1c2 0214 	rsb	r2, r2, #20
 8006f22:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006f26:	fa4a fa02 	asr.w	sl, sl, r2
 8006f2a:	f1bb 0f00 	cmp.w	fp, #0
 8006f2e:	4602      	mov	r2, r0
 8006f30:	460b      	mov	r3, r1
 8006f32:	4620      	mov	r0, r4
 8006f34:	4629      	mov	r1, r5
 8006f36:	bfb8      	it	lt
 8006f38:	f1ca 0a00 	rsblt	sl, sl, #0
 8006f3c:	f7f9 f950 	bl	80001e0 <__aeabi_dsub>
 8006f40:	ec41 0b19 	vmov	d9, r0, r1
 8006f44:	4642      	mov	r2, r8
 8006f46:	464b      	mov	r3, r9
 8006f48:	ec51 0b19 	vmov	r0, r1, d9
 8006f4c:	f7f9 f94a 	bl	80001e4 <__adddf3>
 8006f50:	a37b      	add	r3, pc, #492	; (adr r3, 8007140 <__ieee754_pow+0xa00>)
 8006f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f56:	2000      	movs	r0, #0
 8006f58:	4604      	mov	r4, r0
 8006f5a:	460d      	mov	r5, r1
 8006f5c:	f7f9 faf8 	bl	8000550 <__aeabi_dmul>
 8006f60:	ec53 2b19 	vmov	r2, r3, d9
 8006f64:	4606      	mov	r6, r0
 8006f66:	460f      	mov	r7, r1
 8006f68:	4620      	mov	r0, r4
 8006f6a:	4629      	mov	r1, r5
 8006f6c:	f7f9 f938 	bl	80001e0 <__aeabi_dsub>
 8006f70:	4602      	mov	r2, r0
 8006f72:	460b      	mov	r3, r1
 8006f74:	4640      	mov	r0, r8
 8006f76:	4649      	mov	r1, r9
 8006f78:	f7f9 f932 	bl	80001e0 <__aeabi_dsub>
 8006f7c:	a372      	add	r3, pc, #456	; (adr r3, 8007148 <__ieee754_pow+0xa08>)
 8006f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f82:	f7f9 fae5 	bl	8000550 <__aeabi_dmul>
 8006f86:	a372      	add	r3, pc, #456	; (adr r3, 8007150 <__ieee754_pow+0xa10>)
 8006f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8c:	4680      	mov	r8, r0
 8006f8e:	4689      	mov	r9, r1
 8006f90:	4620      	mov	r0, r4
 8006f92:	4629      	mov	r1, r5
 8006f94:	f7f9 fadc 	bl	8000550 <__aeabi_dmul>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4640      	mov	r0, r8
 8006f9e:	4649      	mov	r1, r9
 8006fa0:	f7f9 f920 	bl	80001e4 <__adddf3>
 8006fa4:	4604      	mov	r4, r0
 8006fa6:	460d      	mov	r5, r1
 8006fa8:	4602      	mov	r2, r0
 8006faa:	460b      	mov	r3, r1
 8006fac:	4630      	mov	r0, r6
 8006fae:	4639      	mov	r1, r7
 8006fb0:	f7f9 f918 	bl	80001e4 <__adddf3>
 8006fb4:	4632      	mov	r2, r6
 8006fb6:	463b      	mov	r3, r7
 8006fb8:	4680      	mov	r8, r0
 8006fba:	4689      	mov	r9, r1
 8006fbc:	f7f9 f910 	bl	80001e0 <__aeabi_dsub>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	4629      	mov	r1, r5
 8006fc8:	f7f9 f90a 	bl	80001e0 <__aeabi_dsub>
 8006fcc:	4642      	mov	r2, r8
 8006fce:	4606      	mov	r6, r0
 8006fd0:	460f      	mov	r7, r1
 8006fd2:	464b      	mov	r3, r9
 8006fd4:	4640      	mov	r0, r8
 8006fd6:	4649      	mov	r1, r9
 8006fd8:	f7f9 faba 	bl	8000550 <__aeabi_dmul>
 8006fdc:	a35e      	add	r3, pc, #376	; (adr r3, 8007158 <__ieee754_pow+0xa18>)
 8006fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	460d      	mov	r5, r1
 8006fe6:	f7f9 fab3 	bl	8000550 <__aeabi_dmul>
 8006fea:	a35d      	add	r3, pc, #372	; (adr r3, 8007160 <__ieee754_pow+0xa20>)
 8006fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff0:	f7f9 f8f6 	bl	80001e0 <__aeabi_dsub>
 8006ff4:	4622      	mov	r2, r4
 8006ff6:	462b      	mov	r3, r5
 8006ff8:	f7f9 faaa 	bl	8000550 <__aeabi_dmul>
 8006ffc:	a35a      	add	r3, pc, #360	; (adr r3, 8007168 <__ieee754_pow+0xa28>)
 8006ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007002:	f7f9 f8ef 	bl	80001e4 <__adddf3>
 8007006:	4622      	mov	r2, r4
 8007008:	462b      	mov	r3, r5
 800700a:	f7f9 faa1 	bl	8000550 <__aeabi_dmul>
 800700e:	a358      	add	r3, pc, #352	; (adr r3, 8007170 <__ieee754_pow+0xa30>)
 8007010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007014:	f7f9 f8e4 	bl	80001e0 <__aeabi_dsub>
 8007018:	4622      	mov	r2, r4
 800701a:	462b      	mov	r3, r5
 800701c:	f7f9 fa98 	bl	8000550 <__aeabi_dmul>
 8007020:	a355      	add	r3, pc, #340	; (adr r3, 8007178 <__ieee754_pow+0xa38>)
 8007022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007026:	f7f9 f8dd 	bl	80001e4 <__adddf3>
 800702a:	4622      	mov	r2, r4
 800702c:	462b      	mov	r3, r5
 800702e:	f7f9 fa8f 	bl	8000550 <__aeabi_dmul>
 8007032:	4602      	mov	r2, r0
 8007034:	460b      	mov	r3, r1
 8007036:	4640      	mov	r0, r8
 8007038:	4649      	mov	r1, r9
 800703a:	f7f9 f8d1 	bl	80001e0 <__aeabi_dsub>
 800703e:	4604      	mov	r4, r0
 8007040:	460d      	mov	r5, r1
 8007042:	4602      	mov	r2, r0
 8007044:	460b      	mov	r3, r1
 8007046:	4640      	mov	r0, r8
 8007048:	4649      	mov	r1, r9
 800704a:	f7f9 fa81 	bl	8000550 <__aeabi_dmul>
 800704e:	2200      	movs	r2, #0
 8007050:	ec41 0b19 	vmov	d9, r0, r1
 8007054:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007058:	4620      	mov	r0, r4
 800705a:	4629      	mov	r1, r5
 800705c:	f7f9 f8c0 	bl	80001e0 <__aeabi_dsub>
 8007060:	4602      	mov	r2, r0
 8007062:	460b      	mov	r3, r1
 8007064:	ec51 0b19 	vmov	r0, r1, d9
 8007068:	f7f9 fb9c 	bl	80007a4 <__aeabi_ddiv>
 800706c:	4632      	mov	r2, r6
 800706e:	4604      	mov	r4, r0
 8007070:	460d      	mov	r5, r1
 8007072:	463b      	mov	r3, r7
 8007074:	4640      	mov	r0, r8
 8007076:	4649      	mov	r1, r9
 8007078:	f7f9 fa6a 	bl	8000550 <__aeabi_dmul>
 800707c:	4632      	mov	r2, r6
 800707e:	463b      	mov	r3, r7
 8007080:	f7f9 f8b0 	bl	80001e4 <__adddf3>
 8007084:	4602      	mov	r2, r0
 8007086:	460b      	mov	r3, r1
 8007088:	4620      	mov	r0, r4
 800708a:	4629      	mov	r1, r5
 800708c:	f7f9 f8a8 	bl	80001e0 <__aeabi_dsub>
 8007090:	4642      	mov	r2, r8
 8007092:	464b      	mov	r3, r9
 8007094:	f7f9 f8a4 	bl	80001e0 <__aeabi_dsub>
 8007098:	460b      	mov	r3, r1
 800709a:	4602      	mov	r2, r0
 800709c:	493a      	ldr	r1, [pc, #232]	; (8007188 <__ieee754_pow+0xa48>)
 800709e:	2000      	movs	r0, #0
 80070a0:	f7f9 f89e 	bl	80001e0 <__aeabi_dsub>
 80070a4:	ec41 0b10 	vmov	d0, r0, r1
 80070a8:	ee10 3a90 	vmov	r3, s1
 80070ac:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80070b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070b4:	da2b      	bge.n	800710e <__ieee754_pow+0x9ce>
 80070b6:	4650      	mov	r0, sl
 80070b8:	f000 fc5a 	bl	8007970 <scalbn>
 80070bc:	ec51 0b10 	vmov	r0, r1, d0
 80070c0:	ec53 2b18 	vmov	r2, r3, d8
 80070c4:	f7ff bbed 	b.w	80068a2 <__ieee754_pow+0x162>
 80070c8:	4b30      	ldr	r3, [pc, #192]	; (800718c <__ieee754_pow+0xa4c>)
 80070ca:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80070ce:	429e      	cmp	r6, r3
 80070d0:	f77f af0c 	ble.w	8006eec <__ieee754_pow+0x7ac>
 80070d4:	4b2e      	ldr	r3, [pc, #184]	; (8007190 <__ieee754_pow+0xa50>)
 80070d6:	440b      	add	r3, r1
 80070d8:	4303      	orrs	r3, r0
 80070da:	d009      	beq.n	80070f0 <__ieee754_pow+0x9b0>
 80070dc:	ec51 0b18 	vmov	r0, r1, d8
 80070e0:	2200      	movs	r2, #0
 80070e2:	2300      	movs	r3, #0
 80070e4:	f7f9 fca6 	bl	8000a34 <__aeabi_dcmplt>
 80070e8:	3800      	subs	r0, #0
 80070ea:	bf18      	it	ne
 80070ec:	2001      	movne	r0, #1
 80070ee:	e447      	b.n	8006980 <__ieee754_pow+0x240>
 80070f0:	4622      	mov	r2, r4
 80070f2:	462b      	mov	r3, r5
 80070f4:	f7f9 f874 	bl	80001e0 <__aeabi_dsub>
 80070f8:	4642      	mov	r2, r8
 80070fa:	464b      	mov	r3, r9
 80070fc:	f7f9 fcae 	bl	8000a5c <__aeabi_dcmpge>
 8007100:	2800      	cmp	r0, #0
 8007102:	f43f aef3 	beq.w	8006eec <__ieee754_pow+0x7ac>
 8007106:	e7e9      	b.n	80070dc <__ieee754_pow+0x99c>
 8007108:	f04f 0a00 	mov.w	sl, #0
 800710c:	e71a      	b.n	8006f44 <__ieee754_pow+0x804>
 800710e:	ec51 0b10 	vmov	r0, r1, d0
 8007112:	4619      	mov	r1, r3
 8007114:	e7d4      	b.n	80070c0 <__ieee754_pow+0x980>
 8007116:	491c      	ldr	r1, [pc, #112]	; (8007188 <__ieee754_pow+0xa48>)
 8007118:	2000      	movs	r0, #0
 800711a:	f7ff bb30 	b.w	800677e <__ieee754_pow+0x3e>
 800711e:	2000      	movs	r0, #0
 8007120:	2100      	movs	r1, #0
 8007122:	f7ff bb2c 	b.w	800677e <__ieee754_pow+0x3e>
 8007126:	4630      	mov	r0, r6
 8007128:	4639      	mov	r1, r7
 800712a:	f7ff bb28 	b.w	800677e <__ieee754_pow+0x3e>
 800712e:	9204      	str	r2, [sp, #16]
 8007130:	f7ff bb7a 	b.w	8006828 <__ieee754_pow+0xe8>
 8007134:	2300      	movs	r3, #0
 8007136:	f7ff bb64 	b.w	8006802 <__ieee754_pow+0xc2>
 800713a:	bf00      	nop
 800713c:	f3af 8000 	nop.w
 8007140:	00000000 	.word	0x00000000
 8007144:	3fe62e43 	.word	0x3fe62e43
 8007148:	fefa39ef 	.word	0xfefa39ef
 800714c:	3fe62e42 	.word	0x3fe62e42
 8007150:	0ca86c39 	.word	0x0ca86c39
 8007154:	be205c61 	.word	0xbe205c61
 8007158:	72bea4d0 	.word	0x72bea4d0
 800715c:	3e663769 	.word	0x3e663769
 8007160:	c5d26bf1 	.word	0xc5d26bf1
 8007164:	3ebbbd41 	.word	0x3ebbbd41
 8007168:	af25de2c 	.word	0xaf25de2c
 800716c:	3f11566a 	.word	0x3f11566a
 8007170:	16bebd93 	.word	0x16bebd93
 8007174:	3f66c16c 	.word	0x3f66c16c
 8007178:	5555553e 	.word	0x5555553e
 800717c:	3fc55555 	.word	0x3fc55555
 8007180:	3fe00000 	.word	0x3fe00000
 8007184:	000fffff 	.word	0x000fffff
 8007188:	3ff00000 	.word	0x3ff00000
 800718c:	4090cbff 	.word	0x4090cbff
 8007190:	3f6f3400 	.word	0x3f6f3400
 8007194:	652b82fe 	.word	0x652b82fe
 8007198:	3c971547 	.word	0x3c971547

0800719c <__ieee754_sqrt>:
 800719c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071a0:	ec55 4b10 	vmov	r4, r5, d0
 80071a4:	4e55      	ldr	r6, [pc, #340]	; (80072fc <__ieee754_sqrt+0x160>)
 80071a6:	43ae      	bics	r6, r5
 80071a8:	ee10 0a10 	vmov	r0, s0
 80071ac:	ee10 3a10 	vmov	r3, s0
 80071b0:	462a      	mov	r2, r5
 80071b2:	4629      	mov	r1, r5
 80071b4:	d110      	bne.n	80071d8 <__ieee754_sqrt+0x3c>
 80071b6:	ee10 2a10 	vmov	r2, s0
 80071ba:	462b      	mov	r3, r5
 80071bc:	f7f9 f9c8 	bl	8000550 <__aeabi_dmul>
 80071c0:	4602      	mov	r2, r0
 80071c2:	460b      	mov	r3, r1
 80071c4:	4620      	mov	r0, r4
 80071c6:	4629      	mov	r1, r5
 80071c8:	f7f9 f80c 	bl	80001e4 <__adddf3>
 80071cc:	4604      	mov	r4, r0
 80071ce:	460d      	mov	r5, r1
 80071d0:	ec45 4b10 	vmov	d0, r4, r5
 80071d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071d8:	2d00      	cmp	r5, #0
 80071da:	dc10      	bgt.n	80071fe <__ieee754_sqrt+0x62>
 80071dc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80071e0:	4330      	orrs	r0, r6
 80071e2:	d0f5      	beq.n	80071d0 <__ieee754_sqrt+0x34>
 80071e4:	b15d      	cbz	r5, 80071fe <__ieee754_sqrt+0x62>
 80071e6:	ee10 2a10 	vmov	r2, s0
 80071ea:	462b      	mov	r3, r5
 80071ec:	ee10 0a10 	vmov	r0, s0
 80071f0:	f7f8 fff6 	bl	80001e0 <__aeabi_dsub>
 80071f4:	4602      	mov	r2, r0
 80071f6:	460b      	mov	r3, r1
 80071f8:	f7f9 fad4 	bl	80007a4 <__aeabi_ddiv>
 80071fc:	e7e6      	b.n	80071cc <__ieee754_sqrt+0x30>
 80071fe:	1512      	asrs	r2, r2, #20
 8007200:	d074      	beq.n	80072ec <__ieee754_sqrt+0x150>
 8007202:	07d4      	lsls	r4, r2, #31
 8007204:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007208:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800720c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007210:	bf5e      	ittt	pl
 8007212:	0fda      	lsrpl	r2, r3, #31
 8007214:	005b      	lslpl	r3, r3, #1
 8007216:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800721a:	2400      	movs	r4, #0
 800721c:	0fda      	lsrs	r2, r3, #31
 800721e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007222:	107f      	asrs	r7, r7, #1
 8007224:	005b      	lsls	r3, r3, #1
 8007226:	2516      	movs	r5, #22
 8007228:	4620      	mov	r0, r4
 800722a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800722e:	1886      	adds	r6, r0, r2
 8007230:	428e      	cmp	r6, r1
 8007232:	bfde      	ittt	le
 8007234:	1b89      	suble	r1, r1, r6
 8007236:	18b0      	addle	r0, r6, r2
 8007238:	18a4      	addle	r4, r4, r2
 800723a:	0049      	lsls	r1, r1, #1
 800723c:	3d01      	subs	r5, #1
 800723e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007242:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007246:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800724a:	d1f0      	bne.n	800722e <__ieee754_sqrt+0x92>
 800724c:	462a      	mov	r2, r5
 800724e:	f04f 0e20 	mov.w	lr, #32
 8007252:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007256:	4281      	cmp	r1, r0
 8007258:	eb06 0c05 	add.w	ip, r6, r5
 800725c:	dc02      	bgt.n	8007264 <__ieee754_sqrt+0xc8>
 800725e:	d113      	bne.n	8007288 <__ieee754_sqrt+0xec>
 8007260:	459c      	cmp	ip, r3
 8007262:	d811      	bhi.n	8007288 <__ieee754_sqrt+0xec>
 8007264:	f1bc 0f00 	cmp.w	ip, #0
 8007268:	eb0c 0506 	add.w	r5, ip, r6
 800726c:	da43      	bge.n	80072f6 <__ieee754_sqrt+0x15a>
 800726e:	2d00      	cmp	r5, #0
 8007270:	db41      	blt.n	80072f6 <__ieee754_sqrt+0x15a>
 8007272:	f100 0801 	add.w	r8, r0, #1
 8007276:	1a09      	subs	r1, r1, r0
 8007278:	459c      	cmp	ip, r3
 800727a:	bf88      	it	hi
 800727c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8007280:	eba3 030c 	sub.w	r3, r3, ip
 8007284:	4432      	add	r2, r6
 8007286:	4640      	mov	r0, r8
 8007288:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800728c:	f1be 0e01 	subs.w	lr, lr, #1
 8007290:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8007294:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007298:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800729c:	d1db      	bne.n	8007256 <__ieee754_sqrt+0xba>
 800729e:	430b      	orrs	r3, r1
 80072a0:	d006      	beq.n	80072b0 <__ieee754_sqrt+0x114>
 80072a2:	1c50      	adds	r0, r2, #1
 80072a4:	bf13      	iteet	ne
 80072a6:	3201      	addne	r2, #1
 80072a8:	3401      	addeq	r4, #1
 80072aa:	4672      	moveq	r2, lr
 80072ac:	f022 0201 	bicne.w	r2, r2, #1
 80072b0:	1063      	asrs	r3, r4, #1
 80072b2:	0852      	lsrs	r2, r2, #1
 80072b4:	07e1      	lsls	r1, r4, #31
 80072b6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80072ba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80072be:	bf48      	it	mi
 80072c0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80072c4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80072c8:	4614      	mov	r4, r2
 80072ca:	e781      	b.n	80071d0 <__ieee754_sqrt+0x34>
 80072cc:	0ad9      	lsrs	r1, r3, #11
 80072ce:	3815      	subs	r0, #21
 80072d0:	055b      	lsls	r3, r3, #21
 80072d2:	2900      	cmp	r1, #0
 80072d4:	d0fa      	beq.n	80072cc <__ieee754_sqrt+0x130>
 80072d6:	02cd      	lsls	r5, r1, #11
 80072d8:	d50a      	bpl.n	80072f0 <__ieee754_sqrt+0x154>
 80072da:	f1c2 0420 	rsb	r4, r2, #32
 80072de:	fa23 f404 	lsr.w	r4, r3, r4
 80072e2:	1e55      	subs	r5, r2, #1
 80072e4:	4093      	lsls	r3, r2
 80072e6:	4321      	orrs	r1, r4
 80072e8:	1b42      	subs	r2, r0, r5
 80072ea:	e78a      	b.n	8007202 <__ieee754_sqrt+0x66>
 80072ec:	4610      	mov	r0, r2
 80072ee:	e7f0      	b.n	80072d2 <__ieee754_sqrt+0x136>
 80072f0:	0049      	lsls	r1, r1, #1
 80072f2:	3201      	adds	r2, #1
 80072f4:	e7ef      	b.n	80072d6 <__ieee754_sqrt+0x13a>
 80072f6:	4680      	mov	r8, r0
 80072f8:	e7bd      	b.n	8007276 <__ieee754_sqrt+0xda>
 80072fa:	bf00      	nop
 80072fc:	7ff00000 	.word	0x7ff00000

08007300 <__ieee754_powf>:
 8007300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007304:	ee10 4a90 	vmov	r4, s1
 8007308:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800730c:	ed2d 8b02 	vpush	{d8}
 8007310:	ee10 6a10 	vmov	r6, s0
 8007314:	eeb0 8a40 	vmov.f32	s16, s0
 8007318:	eef0 8a60 	vmov.f32	s17, s1
 800731c:	d10c      	bne.n	8007338 <__ieee754_powf+0x38>
 800731e:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8007322:	0076      	lsls	r6, r6, #1
 8007324:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8007328:	f240 8296 	bls.w	8007858 <__ieee754_powf+0x558>
 800732c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8007330:	ecbd 8b02 	vpop	{d8}
 8007334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007338:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800733c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8007340:	dcf4      	bgt.n	800732c <__ieee754_powf+0x2c>
 8007342:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8007346:	dd08      	ble.n	800735a <__ieee754_powf+0x5a>
 8007348:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800734c:	d1ee      	bne.n	800732c <__ieee754_powf+0x2c>
 800734e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8007352:	0064      	lsls	r4, r4, #1
 8007354:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8007358:	e7e6      	b.n	8007328 <__ieee754_powf+0x28>
 800735a:	2e00      	cmp	r6, #0
 800735c:	da20      	bge.n	80073a0 <__ieee754_powf+0xa0>
 800735e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8007362:	da2d      	bge.n	80073c0 <__ieee754_powf+0xc0>
 8007364:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8007368:	f2c0 827f 	blt.w	800786a <__ieee754_powf+0x56a>
 800736c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8007370:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8007374:	fa48 f703 	asr.w	r7, r8, r3
 8007378:	fa07 f303 	lsl.w	r3, r7, r3
 800737c:	4543      	cmp	r3, r8
 800737e:	f040 8274 	bne.w	800786a <__ieee754_powf+0x56a>
 8007382:	f007 0701 	and.w	r7, r7, #1
 8007386:	f1c7 0702 	rsb	r7, r7, #2
 800738a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800738e:	d11f      	bne.n	80073d0 <__ieee754_powf+0xd0>
 8007390:	2c00      	cmp	r4, #0
 8007392:	f280 8267 	bge.w	8007864 <__ieee754_powf+0x564>
 8007396:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800739a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800739e:	e7c7      	b.n	8007330 <__ieee754_powf+0x30>
 80073a0:	2700      	movs	r7, #0
 80073a2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80073a6:	d1f0      	bne.n	800738a <__ieee754_powf+0x8a>
 80073a8:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 80073ac:	f000 8254 	beq.w	8007858 <__ieee754_powf+0x558>
 80073b0:	dd08      	ble.n	80073c4 <__ieee754_powf+0xc4>
 80073b2:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 80076bc <__ieee754_powf+0x3bc>
 80073b6:	2c00      	cmp	r4, #0
 80073b8:	bfa8      	it	ge
 80073ba:	eeb0 0a68 	vmovge.f32	s0, s17
 80073be:	e7b7      	b.n	8007330 <__ieee754_powf+0x30>
 80073c0:	2702      	movs	r7, #2
 80073c2:	e7ee      	b.n	80073a2 <__ieee754_powf+0xa2>
 80073c4:	2c00      	cmp	r4, #0
 80073c6:	f280 824a 	bge.w	800785e <__ieee754_powf+0x55e>
 80073ca:	eeb1 0a68 	vneg.f32	s0, s17
 80073ce:	e7af      	b.n	8007330 <__ieee754_powf+0x30>
 80073d0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80073d4:	d102      	bne.n	80073dc <__ieee754_powf+0xdc>
 80073d6:	ee28 0a08 	vmul.f32	s0, s16, s16
 80073da:	e7a9      	b.n	8007330 <__ieee754_powf+0x30>
 80073dc:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80073e0:	eeb0 0a48 	vmov.f32	s0, s16
 80073e4:	d107      	bne.n	80073f6 <__ieee754_powf+0xf6>
 80073e6:	2e00      	cmp	r6, #0
 80073e8:	db05      	blt.n	80073f6 <__ieee754_powf+0xf6>
 80073ea:	ecbd 8b02 	vpop	{d8}
 80073ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073f2:	f000 ba53 	b.w	800789c <__ieee754_sqrtf>
 80073f6:	f000 fb41 	bl	8007a7c <fabsf>
 80073fa:	b125      	cbz	r5, 8007406 <__ieee754_powf+0x106>
 80073fc:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8007400:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007404:	d116      	bne.n	8007434 <__ieee754_powf+0x134>
 8007406:	2c00      	cmp	r4, #0
 8007408:	bfbc      	itt	lt
 800740a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800740e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8007412:	2e00      	cmp	r6, #0
 8007414:	da8c      	bge.n	8007330 <__ieee754_powf+0x30>
 8007416:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800741a:	ea55 0307 	orrs.w	r3, r5, r7
 800741e:	d104      	bne.n	800742a <__ieee754_powf+0x12a>
 8007420:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007424:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007428:	e782      	b.n	8007330 <__ieee754_powf+0x30>
 800742a:	2f01      	cmp	r7, #1
 800742c:	d180      	bne.n	8007330 <__ieee754_powf+0x30>
 800742e:	eeb1 0a40 	vneg.f32	s0, s0
 8007432:	e77d      	b.n	8007330 <__ieee754_powf+0x30>
 8007434:	0ff0      	lsrs	r0, r6, #31
 8007436:	3801      	subs	r0, #1
 8007438:	ea57 0300 	orrs.w	r3, r7, r0
 800743c:	d104      	bne.n	8007448 <__ieee754_powf+0x148>
 800743e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8007442:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8007446:	e773      	b.n	8007330 <__ieee754_powf+0x30>
 8007448:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800744c:	dd74      	ble.n	8007538 <__ieee754_powf+0x238>
 800744e:	4b9c      	ldr	r3, [pc, #624]	; (80076c0 <__ieee754_powf+0x3c0>)
 8007450:	429d      	cmp	r5, r3
 8007452:	dc08      	bgt.n	8007466 <__ieee754_powf+0x166>
 8007454:	2c00      	cmp	r4, #0
 8007456:	da0b      	bge.n	8007470 <__ieee754_powf+0x170>
 8007458:	2000      	movs	r0, #0
 800745a:	ecbd 8b02 	vpop	{d8}
 800745e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007462:	f000 ba6b 	b.w	800793c <__math_oflowf>
 8007466:	4b97      	ldr	r3, [pc, #604]	; (80076c4 <__ieee754_powf+0x3c4>)
 8007468:	429d      	cmp	r5, r3
 800746a:	dd08      	ble.n	800747e <__ieee754_powf+0x17e>
 800746c:	2c00      	cmp	r4, #0
 800746e:	dcf3      	bgt.n	8007458 <__ieee754_powf+0x158>
 8007470:	2000      	movs	r0, #0
 8007472:	ecbd 8b02 	vpop	{d8}
 8007476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800747a:	f000 ba59 	b.w	8007930 <__math_uflowf>
 800747e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007482:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007486:	eddf 6a90 	vldr	s13, [pc, #576]	; 80076c8 <__ieee754_powf+0x3c8>
 800748a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800748e:	eee0 6a67 	vfms.f32	s13, s0, s15
 8007492:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007496:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800749a:	ee20 7a00 	vmul.f32	s14, s0, s0
 800749e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074a2:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80076cc <__ieee754_powf+0x3cc>
 80074a6:	ee67 7a67 	vnmul.f32	s15, s14, s15
 80074aa:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80076d0 <__ieee754_powf+0x3d0>
 80074ae:	eee0 7a07 	vfma.f32	s15, s0, s14
 80074b2:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80076d4 <__ieee754_powf+0x3d4>
 80074b6:	eef0 6a67 	vmov.f32	s13, s15
 80074ba:	eee0 6a07 	vfma.f32	s13, s0, s14
 80074be:	ee16 3a90 	vmov	r3, s13
 80074c2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80074c6:	f023 030f 	bic.w	r3, r3, #15
 80074ca:	ee00 3a90 	vmov	s1, r3
 80074ce:	eee0 0a47 	vfms.f32	s1, s0, s14
 80074d2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80074d6:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80074da:	f024 040f 	bic.w	r4, r4, #15
 80074de:	ee07 4a10 	vmov	s14, r4
 80074e2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80074e6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80074ea:	ee07 3a90 	vmov	s15, r3
 80074ee:	eee7 0a27 	vfma.f32	s1, s14, s15
 80074f2:	3f01      	subs	r7, #1
 80074f4:	ea57 0200 	orrs.w	r2, r7, r0
 80074f8:	ee07 4a10 	vmov	s14, r4
 80074fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007500:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007504:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8007508:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800750c:	ee17 4a10 	vmov	r4, s14
 8007510:	bf08      	it	eq
 8007512:	eeb0 8a40 	vmoveq.f32	s16, s0
 8007516:	2c00      	cmp	r4, #0
 8007518:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800751c:	f340 817e 	ble.w	800781c <__ieee754_powf+0x51c>
 8007520:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8007524:	f340 80f8 	ble.w	8007718 <__ieee754_powf+0x418>
 8007528:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800752c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007530:	bf4c      	ite	mi
 8007532:	2001      	movmi	r0, #1
 8007534:	2000      	movpl	r0, #0
 8007536:	e790      	b.n	800745a <__ieee754_powf+0x15a>
 8007538:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800753c:	bf01      	itttt	eq
 800753e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 80076d8 <__ieee754_powf+0x3d8>
 8007542:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8007546:	f06f 0217 	mvneq.w	r2, #23
 800754a:	ee17 5a90 	vmoveq	r5, s15
 800754e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8007552:	bf18      	it	ne
 8007554:	2200      	movne	r2, #0
 8007556:	3b7f      	subs	r3, #127	; 0x7f
 8007558:	4413      	add	r3, r2
 800755a:	4a60      	ldr	r2, [pc, #384]	; (80076dc <__ieee754_powf+0x3dc>)
 800755c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8007560:	4295      	cmp	r5, r2
 8007562:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8007566:	dd06      	ble.n	8007576 <__ieee754_powf+0x276>
 8007568:	4a5d      	ldr	r2, [pc, #372]	; (80076e0 <__ieee754_powf+0x3e0>)
 800756a:	4295      	cmp	r5, r2
 800756c:	f340 80a4 	ble.w	80076b8 <__ieee754_powf+0x3b8>
 8007570:	3301      	adds	r3, #1
 8007572:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8007576:	2500      	movs	r5, #0
 8007578:	4a5a      	ldr	r2, [pc, #360]	; (80076e4 <__ieee754_powf+0x3e4>)
 800757a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800757e:	ee07 1a90 	vmov	s15, r1
 8007582:	ed92 7a00 	vldr	s14, [r2]
 8007586:	4a58      	ldr	r2, [pc, #352]	; (80076e8 <__ieee754_powf+0x3e8>)
 8007588:	ee37 6a27 	vadd.f32	s12, s14, s15
 800758c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007590:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8007594:	1049      	asrs	r1, r1, #1
 8007596:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800759a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800759e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 80075a2:	ee37 5ac7 	vsub.f32	s10, s15, s14
 80075a6:	ee06 1a10 	vmov	s12, r1
 80075aa:	ee65 4a26 	vmul.f32	s9, s10, s13
 80075ae:	ee36 7a47 	vsub.f32	s14, s12, s14
 80075b2:	ee14 6a90 	vmov	r6, s9
 80075b6:	4016      	ands	r6, r2
 80075b8:	ee05 6a90 	vmov	s11, r6
 80075bc:	eea5 5ac6 	vfms.f32	s10, s11, s12
 80075c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80075c4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80076ec <__ieee754_powf+0x3ec>
 80075c8:	eea5 5ae7 	vfms.f32	s10, s11, s15
 80075cc:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80075d0:	ee25 6a26 	vmul.f32	s12, s10, s13
 80075d4:	eddf 6a46 	vldr	s13, [pc, #280]	; 80076f0 <__ieee754_powf+0x3f0>
 80075d8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80075dc:	eddf 6a45 	vldr	s13, [pc, #276]	; 80076f4 <__ieee754_powf+0x3f4>
 80075e0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80075e4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80076c8 <__ieee754_powf+0x3c8>
 80075e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80075ec:	eddf 6a42 	vldr	s13, [pc, #264]	; 80076f8 <__ieee754_powf+0x3f8>
 80075f0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80075f4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80076fc <__ieee754_powf+0x3fc>
 80075f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80075fc:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8007600:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8007604:	ee66 6a86 	vmul.f32	s13, s13, s12
 8007608:	eee5 6a07 	vfma.f32	s13, s10, s14
 800760c:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8007610:	eef0 7a45 	vmov.f32	s15, s10
 8007614:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8007618:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800761c:	ee17 1a90 	vmov	r1, s15
 8007620:	4011      	ands	r1, r2
 8007622:	ee07 1a90 	vmov	s15, r1
 8007626:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800762a:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800762e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007632:	ee27 7a24 	vmul.f32	s14, s14, s9
 8007636:	eea6 7a27 	vfma.f32	s14, s12, s15
 800763a:	eeb0 6a47 	vmov.f32	s12, s14
 800763e:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8007642:	ee16 1a10 	vmov	r1, s12
 8007646:	4011      	ands	r1, r2
 8007648:	ee06 1a90 	vmov	s13, r1
 800764c:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8007650:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007700 <__ieee754_powf+0x400>
 8007654:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8007704 <__ieee754_powf+0x404>
 8007658:	ee37 7a66 	vsub.f32	s14, s14, s13
 800765c:	ee06 1a10 	vmov	s12, r1
 8007660:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007664:	eddf 7a28 	vldr	s15, [pc, #160]	; 8007708 <__ieee754_powf+0x408>
 8007668:	4928      	ldr	r1, [pc, #160]	; (800770c <__ieee754_powf+0x40c>)
 800766a:	eea6 7a27 	vfma.f32	s14, s12, s15
 800766e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8007672:	edd1 7a00 	vldr	s15, [r1]
 8007676:	ee37 7a27 	vadd.f32	s14, s14, s15
 800767a:	ee07 3a90 	vmov	s15, r3
 800767e:	4b24      	ldr	r3, [pc, #144]	; (8007710 <__ieee754_powf+0x410>)
 8007680:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007684:	eef0 7a47 	vmov.f32	s15, s14
 8007688:	eee6 7a25 	vfma.f32	s15, s12, s11
 800768c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8007690:	edd5 0a00 	vldr	s1, [r5]
 8007694:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8007698:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800769c:	ee17 3a90 	vmov	r3, s15
 80076a0:	4013      	ands	r3, r2
 80076a2:	ee07 3a90 	vmov	s15, r3
 80076a6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80076aa:	ee76 6ae0 	vsub.f32	s13, s13, s1
 80076ae:	eee6 6a65 	vfms.f32	s13, s12, s11
 80076b2:	ee77 7a66 	vsub.f32	s15, s14, s13
 80076b6:	e70e      	b.n	80074d6 <__ieee754_powf+0x1d6>
 80076b8:	2501      	movs	r5, #1
 80076ba:	e75d      	b.n	8007578 <__ieee754_powf+0x278>
 80076bc:	00000000 	.word	0x00000000
 80076c0:	3f7ffff3 	.word	0x3f7ffff3
 80076c4:	3f800007 	.word	0x3f800007
 80076c8:	3eaaaaab 	.word	0x3eaaaaab
 80076cc:	3fb8aa3b 	.word	0x3fb8aa3b
 80076d0:	36eca570 	.word	0x36eca570
 80076d4:	3fb8aa00 	.word	0x3fb8aa00
 80076d8:	4b800000 	.word	0x4b800000
 80076dc:	001cc471 	.word	0x001cc471
 80076e0:	005db3d6 	.word	0x005db3d6
 80076e4:	08008488 	.word	0x08008488
 80076e8:	fffff000 	.word	0xfffff000
 80076ec:	3e6c3255 	.word	0x3e6c3255
 80076f0:	3e53f142 	.word	0x3e53f142
 80076f4:	3e8ba305 	.word	0x3e8ba305
 80076f8:	3edb6db7 	.word	0x3edb6db7
 80076fc:	3f19999a 	.word	0x3f19999a
 8007700:	3f76384f 	.word	0x3f76384f
 8007704:	3f763800 	.word	0x3f763800
 8007708:	369dc3a0 	.word	0x369dc3a0
 800770c:	08008498 	.word	0x08008498
 8007710:	08008490 	.word	0x08008490
 8007714:	3338aa3c 	.word	0x3338aa3c
 8007718:	f040 8095 	bne.w	8007846 <__ieee754_powf+0x546>
 800771c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8007714 <__ieee754_powf+0x414>
 8007720:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007724:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8007728:	eef4 6ac7 	vcmpe.f32	s13, s14
 800772c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007730:	f73f aefa 	bgt.w	8007528 <__ieee754_powf+0x228>
 8007734:	15db      	asrs	r3, r3, #23
 8007736:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800773a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800773e:	4103      	asrs	r3, r0
 8007740:	4423      	add	r3, r4
 8007742:	494b      	ldr	r1, [pc, #300]	; (8007870 <__ieee754_powf+0x570>)
 8007744:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007748:	3a7f      	subs	r2, #127	; 0x7f
 800774a:	4111      	asrs	r1, r2
 800774c:	ea23 0101 	bic.w	r1, r3, r1
 8007750:	ee07 1a10 	vmov	s14, r1
 8007754:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8007758:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800775c:	f1c2 0217 	rsb	r2, r2, #23
 8007760:	4110      	asrs	r0, r2
 8007762:	2c00      	cmp	r4, #0
 8007764:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007768:	bfb8      	it	lt
 800776a:	4240      	neglt	r0, r0
 800776c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8007770:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8007874 <__ieee754_powf+0x574>
 8007774:	eddf 6a40 	vldr	s13, [pc, #256]	; 8007878 <__ieee754_powf+0x578>
 8007778:	ee17 3a10 	vmov	r3, s14
 800777c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007780:	f023 030f 	bic.w	r3, r3, #15
 8007784:	ee07 3a10 	vmov	s14, r3
 8007788:	ee77 7a67 	vsub.f32	s15, s14, s15
 800778c:	ee27 0a00 	vmul.f32	s0, s14, s0
 8007790:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8007794:	eddf 7a39 	vldr	s15, [pc, #228]	; 800787c <__ieee754_powf+0x57c>
 8007798:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800779c:	eef0 7a40 	vmov.f32	s15, s0
 80077a0:	eee7 7a26 	vfma.f32	s15, s14, s13
 80077a4:	eeb0 6a67 	vmov.f32	s12, s15
 80077a8:	eea7 6a66 	vfms.f32	s12, s14, s13
 80077ac:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80077b0:	ee30 0a46 	vsub.f32	s0, s0, s12
 80077b4:	eddf 6a32 	vldr	s13, [pc, #200]	; 8007880 <__ieee754_powf+0x580>
 80077b8:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8007884 <__ieee754_powf+0x584>
 80077bc:	eee7 6a06 	vfma.f32	s13, s14, s12
 80077c0:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8007888 <__ieee754_powf+0x588>
 80077c4:	eea6 6a87 	vfma.f32	s12, s13, s14
 80077c8:	eddf 6a30 	vldr	s13, [pc, #192]	; 800788c <__ieee754_powf+0x58c>
 80077cc:	eee6 6a07 	vfma.f32	s13, s12, s14
 80077d0:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8007890 <__ieee754_powf+0x590>
 80077d4:	eea6 6a87 	vfma.f32	s12, s13, s14
 80077d8:	eef0 6a67 	vmov.f32	s13, s15
 80077dc:	eee6 6a47 	vfms.f32	s13, s12, s14
 80077e0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80077e4:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80077e8:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80077ec:	eea7 0a80 	vfma.f32	s0, s15, s0
 80077f0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80077f4:	ee37 0a40 	vsub.f32	s0, s14, s0
 80077f8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80077fc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007800:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007804:	ee10 3a10 	vmov	r3, s0
 8007808:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800780c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007810:	da1f      	bge.n	8007852 <__ieee754_powf+0x552>
 8007812:	f000 f947 	bl	8007aa4 <scalbnf>
 8007816:	ee20 0a08 	vmul.f32	s0, s0, s16
 800781a:	e589      	b.n	8007330 <__ieee754_powf+0x30>
 800781c:	4a1d      	ldr	r2, [pc, #116]	; (8007894 <__ieee754_powf+0x594>)
 800781e:	4293      	cmp	r3, r2
 8007820:	dd07      	ble.n	8007832 <__ieee754_powf+0x532>
 8007822:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800782a:	bf4c      	ite	mi
 800782c:	2001      	movmi	r0, #1
 800782e:	2000      	movpl	r0, #0
 8007830:	e61f      	b.n	8007472 <__ieee754_powf+0x172>
 8007832:	d108      	bne.n	8007846 <__ieee754_powf+0x546>
 8007834:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007838:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800783c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007840:	f6ff af78 	blt.w	8007734 <__ieee754_powf+0x434>
 8007844:	e7ed      	b.n	8007822 <__ieee754_powf+0x522>
 8007846:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800784a:	f73f af73 	bgt.w	8007734 <__ieee754_powf+0x434>
 800784e:	2000      	movs	r0, #0
 8007850:	e78c      	b.n	800776c <__ieee754_powf+0x46c>
 8007852:	ee00 3a10 	vmov	s0, r3
 8007856:	e7de      	b.n	8007816 <__ieee754_powf+0x516>
 8007858:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800785c:	e568      	b.n	8007330 <__ieee754_powf+0x30>
 800785e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8007898 <__ieee754_powf+0x598>
 8007862:	e565      	b.n	8007330 <__ieee754_powf+0x30>
 8007864:	eeb0 0a48 	vmov.f32	s0, s16
 8007868:	e562      	b.n	8007330 <__ieee754_powf+0x30>
 800786a:	2700      	movs	r7, #0
 800786c:	e58d      	b.n	800738a <__ieee754_powf+0x8a>
 800786e:	bf00      	nop
 8007870:	007fffff 	.word	0x007fffff
 8007874:	35bfbe8c 	.word	0x35bfbe8c
 8007878:	3f317200 	.word	0x3f317200
 800787c:	3f317218 	.word	0x3f317218
 8007880:	b5ddea0e 	.word	0xb5ddea0e
 8007884:	3331bb4c 	.word	0x3331bb4c
 8007888:	388ab355 	.word	0x388ab355
 800788c:	bb360b61 	.word	0xbb360b61
 8007890:	3e2aaaab 	.word	0x3e2aaaab
 8007894:	43160000 	.word	0x43160000
 8007898:	00000000 	.word	0x00000000

0800789c <__ieee754_sqrtf>:
 800789c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80078a0:	4770      	bx	lr

080078a2 <with_errno>:
 80078a2:	b570      	push	{r4, r5, r6, lr}
 80078a4:	4604      	mov	r4, r0
 80078a6:	460d      	mov	r5, r1
 80078a8:	4616      	mov	r6, r2
 80078aa:	f7fe fe03 	bl	80064b4 <__errno>
 80078ae:	4629      	mov	r1, r5
 80078b0:	6006      	str	r6, [r0, #0]
 80078b2:	4620      	mov	r0, r4
 80078b4:	bd70      	pop	{r4, r5, r6, pc}

080078b6 <xflow>:
 80078b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078b8:	4614      	mov	r4, r2
 80078ba:	461d      	mov	r5, r3
 80078bc:	b108      	cbz	r0, 80078c2 <xflow+0xc>
 80078be:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80078c2:	e9cd 2300 	strd	r2, r3, [sp]
 80078c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078ca:	4620      	mov	r0, r4
 80078cc:	4629      	mov	r1, r5
 80078ce:	f7f8 fe3f 	bl	8000550 <__aeabi_dmul>
 80078d2:	2222      	movs	r2, #34	; 0x22
 80078d4:	b003      	add	sp, #12
 80078d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078da:	f7ff bfe2 	b.w	80078a2 <with_errno>

080078de <__math_uflow>:
 80078de:	b508      	push	{r3, lr}
 80078e0:	2200      	movs	r2, #0
 80078e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80078e6:	f7ff ffe6 	bl	80078b6 <xflow>
 80078ea:	ec41 0b10 	vmov	d0, r0, r1
 80078ee:	bd08      	pop	{r3, pc}

080078f0 <__math_oflow>:
 80078f0:	b508      	push	{r3, lr}
 80078f2:	2200      	movs	r2, #0
 80078f4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80078f8:	f7ff ffdd 	bl	80078b6 <xflow>
 80078fc:	ec41 0b10 	vmov	d0, r0, r1
 8007900:	bd08      	pop	{r3, pc}

08007902 <with_errnof>:
 8007902:	b513      	push	{r0, r1, r4, lr}
 8007904:	4604      	mov	r4, r0
 8007906:	ed8d 0a01 	vstr	s0, [sp, #4]
 800790a:	f7fe fdd3 	bl	80064b4 <__errno>
 800790e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8007912:	6004      	str	r4, [r0, #0]
 8007914:	b002      	add	sp, #8
 8007916:	bd10      	pop	{r4, pc}

08007918 <xflowf>:
 8007918:	b130      	cbz	r0, 8007928 <xflowf+0x10>
 800791a:	eef1 7a40 	vneg.f32	s15, s0
 800791e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007922:	2022      	movs	r0, #34	; 0x22
 8007924:	f7ff bfed 	b.w	8007902 <with_errnof>
 8007928:	eef0 7a40 	vmov.f32	s15, s0
 800792c:	e7f7      	b.n	800791e <xflowf+0x6>
	...

08007930 <__math_uflowf>:
 8007930:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007938 <__math_uflowf+0x8>
 8007934:	f7ff bff0 	b.w	8007918 <xflowf>
 8007938:	10000000 	.word	0x10000000

0800793c <__math_oflowf>:
 800793c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007944 <__math_oflowf+0x8>
 8007940:	f7ff bfea 	b.w	8007918 <xflowf>
 8007944:	70000000 	.word	0x70000000

08007948 <fabs>:
 8007948:	ec51 0b10 	vmov	r0, r1, d0
 800794c:	ee10 2a10 	vmov	r2, s0
 8007950:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007954:	ec43 2b10 	vmov	d0, r2, r3
 8007958:	4770      	bx	lr

0800795a <finite>:
 800795a:	b082      	sub	sp, #8
 800795c:	ed8d 0b00 	vstr	d0, [sp]
 8007960:	9801      	ldr	r0, [sp, #4]
 8007962:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007966:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800796a:	0fc0      	lsrs	r0, r0, #31
 800796c:	b002      	add	sp, #8
 800796e:	4770      	bx	lr

08007970 <scalbn>:
 8007970:	b570      	push	{r4, r5, r6, lr}
 8007972:	ec55 4b10 	vmov	r4, r5, d0
 8007976:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800797a:	4606      	mov	r6, r0
 800797c:	462b      	mov	r3, r5
 800797e:	b99a      	cbnz	r2, 80079a8 <scalbn+0x38>
 8007980:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007984:	4323      	orrs	r3, r4
 8007986:	d036      	beq.n	80079f6 <scalbn+0x86>
 8007988:	4b39      	ldr	r3, [pc, #228]	; (8007a70 <scalbn+0x100>)
 800798a:	4629      	mov	r1, r5
 800798c:	ee10 0a10 	vmov	r0, s0
 8007990:	2200      	movs	r2, #0
 8007992:	f7f8 fddd 	bl	8000550 <__aeabi_dmul>
 8007996:	4b37      	ldr	r3, [pc, #220]	; (8007a74 <scalbn+0x104>)
 8007998:	429e      	cmp	r6, r3
 800799a:	4604      	mov	r4, r0
 800799c:	460d      	mov	r5, r1
 800799e:	da10      	bge.n	80079c2 <scalbn+0x52>
 80079a0:	a32b      	add	r3, pc, #172	; (adr r3, 8007a50 <scalbn+0xe0>)
 80079a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a6:	e03a      	b.n	8007a1e <scalbn+0xae>
 80079a8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80079ac:	428a      	cmp	r2, r1
 80079ae:	d10c      	bne.n	80079ca <scalbn+0x5a>
 80079b0:	ee10 2a10 	vmov	r2, s0
 80079b4:	4620      	mov	r0, r4
 80079b6:	4629      	mov	r1, r5
 80079b8:	f7f8 fc14 	bl	80001e4 <__adddf3>
 80079bc:	4604      	mov	r4, r0
 80079be:	460d      	mov	r5, r1
 80079c0:	e019      	b.n	80079f6 <scalbn+0x86>
 80079c2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80079c6:	460b      	mov	r3, r1
 80079c8:	3a36      	subs	r2, #54	; 0x36
 80079ca:	4432      	add	r2, r6
 80079cc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80079d0:	428a      	cmp	r2, r1
 80079d2:	dd08      	ble.n	80079e6 <scalbn+0x76>
 80079d4:	2d00      	cmp	r5, #0
 80079d6:	a120      	add	r1, pc, #128	; (adr r1, 8007a58 <scalbn+0xe8>)
 80079d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079dc:	da1c      	bge.n	8007a18 <scalbn+0xa8>
 80079de:	a120      	add	r1, pc, #128	; (adr r1, 8007a60 <scalbn+0xf0>)
 80079e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079e4:	e018      	b.n	8007a18 <scalbn+0xa8>
 80079e6:	2a00      	cmp	r2, #0
 80079e8:	dd08      	ble.n	80079fc <scalbn+0x8c>
 80079ea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80079ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80079f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80079f6:	ec45 4b10 	vmov	d0, r4, r5
 80079fa:	bd70      	pop	{r4, r5, r6, pc}
 80079fc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007a00:	da19      	bge.n	8007a36 <scalbn+0xc6>
 8007a02:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007a06:	429e      	cmp	r6, r3
 8007a08:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007a0c:	dd0a      	ble.n	8007a24 <scalbn+0xb4>
 8007a0e:	a112      	add	r1, pc, #72	; (adr r1, 8007a58 <scalbn+0xe8>)
 8007a10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1e2      	bne.n	80079de <scalbn+0x6e>
 8007a18:	a30f      	add	r3, pc, #60	; (adr r3, 8007a58 <scalbn+0xe8>)
 8007a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1e:	f7f8 fd97 	bl	8000550 <__aeabi_dmul>
 8007a22:	e7cb      	b.n	80079bc <scalbn+0x4c>
 8007a24:	a10a      	add	r1, pc, #40	; (adr r1, 8007a50 <scalbn+0xe0>)
 8007a26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d0b8      	beq.n	80079a0 <scalbn+0x30>
 8007a2e:	a10e      	add	r1, pc, #56	; (adr r1, 8007a68 <scalbn+0xf8>)
 8007a30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a34:	e7b4      	b.n	80079a0 <scalbn+0x30>
 8007a36:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007a3a:	3236      	adds	r2, #54	; 0x36
 8007a3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007a40:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007a44:	4620      	mov	r0, r4
 8007a46:	4b0c      	ldr	r3, [pc, #48]	; (8007a78 <scalbn+0x108>)
 8007a48:	2200      	movs	r2, #0
 8007a4a:	e7e8      	b.n	8007a1e <scalbn+0xae>
 8007a4c:	f3af 8000 	nop.w
 8007a50:	c2f8f359 	.word	0xc2f8f359
 8007a54:	01a56e1f 	.word	0x01a56e1f
 8007a58:	8800759c 	.word	0x8800759c
 8007a5c:	7e37e43c 	.word	0x7e37e43c
 8007a60:	8800759c 	.word	0x8800759c
 8007a64:	fe37e43c 	.word	0xfe37e43c
 8007a68:	c2f8f359 	.word	0xc2f8f359
 8007a6c:	81a56e1f 	.word	0x81a56e1f
 8007a70:	43500000 	.word	0x43500000
 8007a74:	ffff3cb0 	.word	0xffff3cb0
 8007a78:	3c900000 	.word	0x3c900000

08007a7c <fabsf>:
 8007a7c:	ee10 3a10 	vmov	r3, s0
 8007a80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a84:	ee00 3a10 	vmov	s0, r3
 8007a88:	4770      	bx	lr

08007a8a <finitef>:
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007a90:	9801      	ldr	r0, [sp, #4]
 8007a92:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007a96:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007a9a:	bfac      	ite	ge
 8007a9c:	2000      	movge	r0, #0
 8007a9e:	2001      	movlt	r0, #1
 8007aa0:	b002      	add	sp, #8
 8007aa2:	4770      	bx	lr

08007aa4 <scalbnf>:
 8007aa4:	ee10 3a10 	vmov	r3, s0
 8007aa8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007aac:	d025      	beq.n	8007afa <scalbnf+0x56>
 8007aae:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007ab2:	d302      	bcc.n	8007aba <scalbnf+0x16>
 8007ab4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007ab8:	4770      	bx	lr
 8007aba:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8007abe:	d122      	bne.n	8007b06 <scalbnf+0x62>
 8007ac0:	4b2a      	ldr	r3, [pc, #168]	; (8007b6c <scalbnf+0xc8>)
 8007ac2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007b70 <scalbnf+0xcc>
 8007ac6:	4298      	cmp	r0, r3
 8007ac8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007acc:	db16      	blt.n	8007afc <scalbnf+0x58>
 8007ace:	ee10 3a10 	vmov	r3, s0
 8007ad2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007ad6:	3a19      	subs	r2, #25
 8007ad8:	4402      	add	r2, r0
 8007ada:	2afe      	cmp	r2, #254	; 0xfe
 8007adc:	dd15      	ble.n	8007b0a <scalbnf+0x66>
 8007ade:	ee10 3a10 	vmov	r3, s0
 8007ae2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8007b74 <scalbnf+0xd0>
 8007ae6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8007b78 <scalbnf+0xd4>
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	eeb0 7a67 	vmov.f32	s14, s15
 8007af0:	bfb8      	it	lt
 8007af2:	eef0 7a66 	vmovlt.f32	s15, s13
 8007af6:	ee27 0a27 	vmul.f32	s0, s14, s15
 8007afa:	4770      	bx	lr
 8007afc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007b7c <scalbnf+0xd8>
 8007b00:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007b04:	4770      	bx	lr
 8007b06:	0dd2      	lsrs	r2, r2, #23
 8007b08:	e7e6      	b.n	8007ad8 <scalbnf+0x34>
 8007b0a:	2a00      	cmp	r2, #0
 8007b0c:	dd06      	ble.n	8007b1c <scalbnf+0x78>
 8007b0e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007b12:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007b16:	ee00 3a10 	vmov	s0, r3
 8007b1a:	4770      	bx	lr
 8007b1c:	f112 0f16 	cmn.w	r2, #22
 8007b20:	da1a      	bge.n	8007b58 <scalbnf+0xb4>
 8007b22:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007b26:	4298      	cmp	r0, r3
 8007b28:	ee10 3a10 	vmov	r3, s0
 8007b2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b30:	dd0a      	ble.n	8007b48 <scalbnf+0xa4>
 8007b32:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8007b74 <scalbnf+0xd0>
 8007b36:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007b78 <scalbnf+0xd4>
 8007b3a:	eef0 7a40 	vmov.f32	s15, s0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	bf18      	it	ne
 8007b42:	eeb0 0a47 	vmovne.f32	s0, s14
 8007b46:	e7db      	b.n	8007b00 <scalbnf+0x5c>
 8007b48:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8007b7c <scalbnf+0xd8>
 8007b4c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8007b80 <scalbnf+0xdc>
 8007b50:	eef0 7a40 	vmov.f32	s15, s0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	e7f3      	b.n	8007b40 <scalbnf+0x9c>
 8007b58:	3219      	adds	r2, #25
 8007b5a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007b5e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007b62:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007b84 <scalbnf+0xe0>
 8007b66:	ee07 3a10 	vmov	s14, r3
 8007b6a:	e7c4      	b.n	8007af6 <scalbnf+0x52>
 8007b6c:	ffff3cb0 	.word	0xffff3cb0
 8007b70:	4c000000 	.word	0x4c000000
 8007b74:	7149f2ca 	.word	0x7149f2ca
 8007b78:	f149f2ca 	.word	0xf149f2ca
 8007b7c:	0da24260 	.word	0x0da24260
 8007b80:	8da24260 	.word	0x8da24260
 8007b84:	33000000 	.word	0x33000000

08007b88 <_init>:
 8007b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8a:	bf00      	nop
 8007b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b8e:	bc08      	pop	{r3}
 8007b90:	469e      	mov	lr, r3
 8007b92:	4770      	bx	lr

08007b94 <_fini>:
 8007b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b96:	bf00      	nop
 8007b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b9a:	bc08      	pop	{r3}
 8007b9c:	469e      	mov	lr, r3
 8007b9e:	4770      	bx	lr
