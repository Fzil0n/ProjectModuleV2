
ProjectModuleV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c50  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000900  08007de8  08007de8  00017de8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086e8  080086e8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080086e8  080086e8  000186e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086f0  080086f0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086f0  080086f0  000186f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086f4  080086f4  000186f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080086f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  20000080  08008778  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a0  08008778  000205a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000153e5  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003398  00000000  00000000  00035495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  00038830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  00039928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004fb8  00000000  00000000  0003a858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bf87  00000000  00000000  0003f810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000939cc  00000000  00000000  0005b797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef163  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a44  00000000  00000000  000ef1b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007dd0 	.word	0x08007dd0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	08007dd0 	.word	0x08007dd0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b974 	b.w	8000ea0 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	468e      	mov	lr, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d14d      	bne.n	8000c7a <__udivmoddi4+0xaa>
 8000bde:	428a      	cmp	r2, r1
 8000be0:	4694      	mov	ip, r2
 8000be2:	d969      	bls.n	8000cb8 <__udivmoddi4+0xe8>
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	b152      	cbz	r2, 8000c00 <__udivmoddi4+0x30>
 8000bea:	fa01 f302 	lsl.w	r3, r1, r2
 8000bee:	f1c2 0120 	rsb	r1, r2, #32
 8000bf2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bf6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bfe:	4094      	lsls	r4, r2
 8000c00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c04:	0c21      	lsrs	r1, r4, #16
 8000c06:	fbbe f6f8 	udiv	r6, lr, r8
 8000c0a:	fa1f f78c 	uxth.w	r7, ip
 8000c0e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c12:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c16:	fb06 f107 	mul.w	r1, r6, r7
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x64>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c26:	f080 811f 	bcs.w	8000e68 <__udivmoddi4+0x298>
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	f240 811c 	bls.w	8000e68 <__udivmoddi4+0x298>
 8000c30:	3e02      	subs	r6, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1a5b      	subs	r3, r3, r1
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c44:	fb00 f707 	mul.w	r7, r0, r7
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x92>
 8000c4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c54:	f080 810a 	bcs.w	8000e6c <__udivmoddi4+0x29c>
 8000c58:	42a7      	cmp	r7, r4
 8000c5a:	f240 8107 	bls.w	8000e6c <__udivmoddi4+0x29c>
 8000c5e:	4464      	add	r4, ip
 8000c60:	3802      	subs	r0, #2
 8000c62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c66:	1be4      	subs	r4, r4, r7
 8000c68:	2600      	movs	r6, #0
 8000c6a:	b11d      	cbz	r5, 8000c74 <__udivmoddi4+0xa4>
 8000c6c:	40d4      	lsrs	r4, r2
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e9c5 4300 	strd	r4, r3, [r5]
 8000c74:	4631      	mov	r1, r6
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d909      	bls.n	8000c92 <__udivmoddi4+0xc2>
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	f000 80ef 	beq.w	8000e62 <__udivmoddi4+0x292>
 8000c84:	2600      	movs	r6, #0
 8000c86:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	fab3 f683 	clz	r6, r3
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d14a      	bne.n	8000d30 <__udivmoddi4+0x160>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xd4>
 8000c9e:	4282      	cmp	r2, r0
 8000ca0:	f200 80f9 	bhi.w	8000e96 <__udivmoddi4+0x2c6>
 8000ca4:	1a84      	subs	r4, r0, r2
 8000ca6:	eb61 0303 	sbc.w	r3, r1, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	469e      	mov	lr, r3
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	d0e0      	beq.n	8000c74 <__udivmoddi4+0xa4>
 8000cb2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cb6:	e7dd      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000cb8:	b902      	cbnz	r2, 8000cbc <__udivmoddi4+0xec>
 8000cba:	deff      	udf	#255	; 0xff
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	2a00      	cmp	r2, #0
 8000cc2:	f040 8092 	bne.w	8000dea <__udivmoddi4+0x21a>
 8000cc6:	eba1 010c 	sub.w	r1, r1, ip
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2601      	movs	r6, #1
 8000cd4:	0c20      	lsrs	r0, r4, #16
 8000cd6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cda:	fb07 1113 	mls	r1, r7, r3, r1
 8000cde:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ce2:	fb0e f003 	mul.w	r0, lr, r3
 8000ce6:	4288      	cmp	r0, r1
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x12c>
 8000cea:	eb1c 0101 	adds.w	r1, ip, r1
 8000cee:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x12a>
 8000cf4:	4288      	cmp	r0, r1
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2c0>
 8000cfa:	4643      	mov	r3, r8
 8000cfc:	1a09      	subs	r1, r1, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d04:	fb07 1110 	mls	r1, r7, r0, r1
 8000d08:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x156>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x154>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d24:	4608      	mov	r0, r1
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d2e:	e79c      	b.n	8000c6a <__udivmoddi4+0x9a>
 8000d30:	f1c6 0720 	rsb	r7, r6, #32
 8000d34:	40b3      	lsls	r3, r6
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d42:	fa01 f306 	lsl.w	r3, r1, r6
 8000d46:	431c      	orrs	r4, r3
 8000d48:	40f9      	lsrs	r1, r7
 8000d4a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d52:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d56:	0c20      	lsrs	r0, r4, #16
 8000d58:	fa1f fe8c 	uxth.w	lr, ip
 8000d5c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d60:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d64:	fb08 f00e 	mul.w	r0, r8, lr
 8000d68:	4288      	cmp	r0, r1
 8000d6a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b8>
 8000d70:	eb1c 0101 	adds.w	r1, ip, r1
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2bc>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2bc>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4461      	add	r1, ip
 8000d88:	1a09      	subs	r1, r1, r0
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d90:	fb09 1110 	mls	r1, r9, r0, r1
 8000d94:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d9c:	458e      	cmp	lr, r1
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1e2>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2b4>
 8000daa:	458e      	cmp	lr, r1
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2b4>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4461      	add	r1, ip
 8000db2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000db6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dba:	eba1 010e 	sub.w	r1, r1, lr
 8000dbe:	42a1      	cmp	r1, r4
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46a6      	mov	lr, r4
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x2a4>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x2a0>
 8000dc8:	b15d      	cbz	r5, 8000de2 <__udivmoddi4+0x212>
 8000dca:	ebb3 0208 	subs.w	r2, r3, r8
 8000dce:	eb61 010e 	sbc.w	r1, r1, lr
 8000dd2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dd6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dda:	40f1      	lsrs	r1, r6
 8000ddc:	431f      	orrs	r7, r3
 8000dde:	e9c5 7100 	strd	r7, r1, [r5]
 8000de2:	2600      	movs	r6, #0
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	f1c2 0320 	rsb	r3, r2, #32
 8000dee:	40d8      	lsrs	r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa21 f303 	lsr.w	r3, r1, r3
 8000df8:	4091      	lsls	r1, r2
 8000dfa:	4301      	orrs	r1, r0
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e08:	fb07 3610 	mls	r6, r7, r0, r3
 8000e0c:	0c0b      	lsrs	r3, r1, #16
 8000e0e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e12:	fb00 f60e 	mul.w	r6, r0, lr
 8000e16:	429e      	cmp	r6, r3
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x260>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b8>
 8000e28:	429e      	cmp	r6, r3
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b8>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1b9b      	subs	r3, r3, r6
 8000e32:	b289      	uxth	r1, r1
 8000e34:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e38:	fb07 3316 	mls	r3, r7, r6, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb06 f30e 	mul.w	r3, r6, lr
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x28a>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2b0>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2b0>
 8000e56:	3e02      	subs	r6, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	1ac9      	subs	r1, r1, r3
 8000e5c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0x104>
 8000e62:	462e      	mov	r6, r5
 8000e64:	4628      	mov	r0, r5
 8000e66:	e705      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000e68:	4606      	mov	r6, r0
 8000e6a:	e6e3      	b.n	8000c34 <__udivmoddi4+0x64>
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	e6f8      	b.n	8000c62 <__udivmoddi4+0x92>
 8000e70:	454b      	cmp	r3, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e80:	4646      	mov	r6, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x28a>
 8000e84:	4620      	mov	r0, r4
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1e2>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x260>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b8>
 8000e90:	3b02      	subs	r3, #2
 8000e92:	4461      	add	r1, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x12c>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e709      	b.n	8000cae <__udivmoddi4+0xde>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x156>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <InitKalmanStruct>:
extern arm_matrix_instance_f32 mat_P, mat_P_minus, mat_Q;
extern arm_matrix_instance_f32 mat_C, mat_R, mat_S, mat_K;
extern arm_matrix_instance_f32 mat_temp3x3A,mat_temp3x3B, mat_temp3x1,mat_temp1x3, mat_temp1x1;

void InitKalmanStruct(Kalman* KF,float32_t q,float32_t r)
{
 8000ea4:	b5b0      	push	{r4, r5, r7, lr}
 8000ea6:	b0a0      	sub	sp, #128	; 0x80
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	ed87 0a02 	vstr	s0, [r7, #8]
 8000eb0:	edc7 0a01 	vstr	s1, [r7, #4]
	KF->R = r;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	655a      	str	r2, [r3, #84]	; 0x54
	KF->var_Q = q;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	68ba      	ldr	r2, [r7, #8]
 8000ebe:	659a      	str	r2, [r3, #88]	; 0x58
	KF->D = 0;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f04f 0200 	mov.w	r2, #0
 8000ec6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	float32_t a[9] = {
 8000eca:	4b8d      	ldr	r3, [pc, #564]	; (8001100 <InitKalmanStruct+0x25c>)
 8000ecc:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000ed0:	461d      	mov	r5, r3
 8000ed2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ed6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eda:	682b      	ldr	r3, [r5, #0]
 8000edc:	6023      	str	r3, [r4, #0]
			1.0, 0.001/2.5, 0.0000005/(2.5*2.5),
			0  , 1.0      , 0.001/2.5,
			0  , 0        , 1.0
	};
	float iden[9] = {
 8000ede:	4b89      	ldr	r3, [pc, #548]	; (8001104 <InitKalmanStruct+0x260>)
 8000ee0:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000ee4:	461d      	mov	r5, r3
 8000ee6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eee:	682b      	ldr	r3, [r5, #0]
 8000ef0:	6023      	str	r3, [r4, #0]
			1.0, 0  , 0,
			0  , 1.0, 0,
			0  , 0  , 1.0
	};
	int i;
	for(i=0;i<9;i++)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000ef6:	e023      	b.n	8000f40 <InitKalmanStruct+0x9c>
	{
		KF->A[i] = a[i];
 8000ef8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	3380      	adds	r3, #128	; 0x80
 8000efe:	443b      	add	r3, r7
 8000f00:	3b28      	subs	r3, #40	; 0x28
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	68f9      	ldr	r1, [r7, #12]
 8000f06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f08:	3318      	adds	r3, #24
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	601a      	str	r2, [r3, #0]
		KF->I[i] = iden[i];
 8000f10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	3380      	adds	r3, #128	; 0x80
 8000f16:	443b      	add	r3, r7
 8000f18:	3b4c      	subs	r3, #76	; 0x4c
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	68f9      	ldr	r1, [r7, #12]
 8000f1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f20:	332e      	adds	r3, #46	; 0x2e
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	440b      	add	r3, r1
 8000f26:	601a      	str	r2, [r3, #0]
		KF->P[i] = 0;
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	3304      	adds	r3, #4
 8000f34:	f04f 0200 	mov.w	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
	for(i=0;i<9;i++)
 8000f3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000f40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f42:	2b08      	cmp	r3, #8
 8000f44:	ddd8      	ble.n	8000ef8 <InitKalmanStruct+0x54>
	}
	float32_t b[3] = {
 8000f46:	f04f 0300 	mov.w	r3, #0
 8000f4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f4c:	f04f 0300 	mov.w	r3, #0
 8000f50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f52:	f04f 0300 	mov.w	r3, #0
 8000f56:	633b      	str	r3, [r7, #48]	; 0x30
			0, 0, 0
	};
	float32_t c[3] = {
 8000f58:	f04f 0300 	mov.w	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
 8000f5e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000f62:	623b      	str	r3, [r7, #32]
 8000f64:	f04f 0300 	mov.w	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
			0, 1, 0
	};
	float32_t g[3] = {
 8000f6a:	4a67      	ldr	r2, [pc, #412]	; (8001108 <InitKalmanStruct+0x264>)
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0.001 * 0.001 * 0.001 / (6*2.5*2.5*2.5),
			0.0000005/(2.5*2.5),
			0.001/2.5
	};

	for(i=0;i<3;i++)
 8000f76:	2300      	movs	r3, #0
 8000f78:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000f7a:	e02e      	b.n	8000fda <InitKalmanStruct+0x136>
	{
		KF->B[i] = b[i];
 8000f7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	3380      	adds	r3, #128	; 0x80
 8000f82:	443b      	add	r3, r7
 8000f84:	3b58      	subs	r3, #88	; 0x58
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	68f9      	ldr	r1, [r7, #12]
 8000f8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f8c:	3320      	adds	r3, #32
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	440b      	add	r3, r1
 8000f92:	3304      	adds	r3, #4
 8000f94:	601a      	str	r2, [r3, #0]
		KF->C[i] = c[i];
 8000f96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	3380      	adds	r3, #128	; 0x80
 8000f9c:	443b      	add	r3, r7
 8000f9e:	3b64      	subs	r3, #100	; 0x64
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	68f9      	ldr	r1, [r7, #12]
 8000fa4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fa6:	3324      	adds	r3, #36	; 0x24
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	440b      	add	r3, r1
 8000fac:	601a      	str	r2, [r3, #0]
		KF->G[i] = g[i];
 8000fae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	3380      	adds	r3, #128	; 0x80
 8000fb4:	443b      	add	r3, r7
 8000fb6:	3b70      	subs	r3, #112	; 0x70
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	68f9      	ldr	r1, [r7, #12]
 8000fbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fbe:	3328      	adds	r3, #40	; 0x28
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	601a      	str	r2, [r3, #0]
		KF->x_hat[i] = 0;
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
	for(i=0;i<3;i++)
 8000fd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000fda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	ddcd      	ble.n	8000f7c <InitKalmanStruct+0xd8>
	}

	  arm_mat_init_f32(&mat_A, 3, 3,KF->A);//3x3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	3360      	adds	r3, #96	; 0x60
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	2103      	movs	r1, #3
 8000fe8:	4848      	ldr	r0, [pc, #288]	; (800110c <InitKalmanStruct+0x268>)
 8000fea:	f002 fa16 	bl	800341a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_x_hat, 3, 1, KF->x_hat);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2103      	movs	r1, #3
 8000ff4:	4846      	ldr	r0, [pc, #280]	; (8001110 <InitKalmanStruct+0x26c>)
 8000ff6:	f002 fa10 	bl	800341a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_x_hat_minus, 3, 1, KF->x_hat_minus);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	33dc      	adds	r3, #220	; 0xdc
 8000ffe:	2201      	movs	r2, #1
 8001000:	2103      	movs	r1, #3
 8001002:	4844      	ldr	r0, [pc, #272]	; (8001114 <InitKalmanStruct+0x270>)
 8001004:	f002 fa09 	bl	800341a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_B, 3, 1, KF->B);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	3384      	adds	r3, #132	; 0x84
 800100c:	2201      	movs	r2, #1
 800100e:	2103      	movs	r1, #3
 8001010:	4841      	ldr	r0, [pc, #260]	; (8001118 <InitKalmanStruct+0x274>)
 8001012:	f002 fa02 	bl	800341a <arm_mat_init_f32>
	  //arm_mat_init_f32(&mat_u, 1, 1, NULL);  // Set the input control vector if needed
	  arm_mat_init_f32(&mat_P, 3, 3, KF->P);//3x3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	330c      	adds	r3, #12
 800101a:	2203      	movs	r2, #3
 800101c:	2103      	movs	r1, #3
 800101e:	483f      	ldr	r0, [pc, #252]	; (800111c <InitKalmanStruct+0x278>)
 8001020:	f002 f9fb 	bl	800341a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_P_minus, 3, 3, KF->P_minus);//3x3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	33e8      	adds	r3, #232	; 0xe8
 8001028:	2203      	movs	r2, #3
 800102a:	2103      	movs	r1, #3
 800102c:	483c      	ldr	r0, [pc, #240]	; (8001120 <InitKalmanStruct+0x27c>)
 800102e:	f002 f9f4 	bl	800341a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_Q, 3, 3,KF->Q);//3x3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	3330      	adds	r3, #48	; 0x30
 8001036:	2203      	movs	r2, #3
 8001038:	2103      	movs	r1, #3
 800103a:	483a      	ldr	r0, [pc, #232]	; (8001124 <InitKalmanStruct+0x280>)
 800103c:	f002 f9ed 	bl	800341a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_C, 1, 3, KF->C);//1x3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	3390      	adds	r3, #144	; 0x90
 8001044:	2203      	movs	r2, #3
 8001046:	2101      	movs	r1, #1
 8001048:	4837      	ldr	r0, [pc, #220]	; (8001128 <InitKalmanStruct+0x284>)
 800104a:	f002 f9e6 	bl	800341a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_R, 1, 1, &KF->R);//1x1
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	3354      	adds	r3, #84	; 0x54
 8001052:	2201      	movs	r2, #1
 8001054:	2101      	movs	r1, #1
 8001056:	4835      	ldr	r0, [pc, #212]	; (800112c <InitKalmanStruct+0x288>)
 8001058:	f002 f9df 	bl	800341a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_S, 1, 1, KF->S);//1x1
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001062:	2201      	movs	r2, #1
 8001064:	2101      	movs	r1, #1
 8001066:	4832      	ldr	r0, [pc, #200]	; (8001130 <InitKalmanStruct+0x28c>)
 8001068:	f002 f9d7 	bl	800341a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_K, 3, 1, KF->K);//3x1
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001072:	2201      	movs	r2, #1
 8001074:	2103      	movs	r1, #3
 8001076:	482f      	ldr	r0, [pc, #188]	; (8001134 <InitKalmanStruct+0x290>)
 8001078:	f002 f9cf 	bl	800341a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp3x3A, 3, 3, KF->temp3x3A);//3x3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8001082:	2203      	movs	r2, #3
 8001084:	2103      	movs	r1, #3
 8001086:	482c      	ldr	r0, [pc, #176]	; (8001138 <InitKalmanStruct+0x294>)
 8001088:	f002 f9c7 	bl	800341a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp3x3B, 3, 3, KF->temp3x3B);//3x3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001092:	2203      	movs	r2, #3
 8001094:	2103      	movs	r1, #3
 8001096:	4829      	ldr	r0, [pc, #164]	; (800113c <InitKalmanStruct+0x298>)
 8001098:	f002 f9bf 	bl	800341a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp3x1, 3, 1, KF->temp3x1);//3x1
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80010a2:	2201      	movs	r2, #1
 80010a4:	2103      	movs	r1, #3
 80010a6:	4826      	ldr	r0, [pc, #152]	; (8001140 <InitKalmanStruct+0x29c>)
 80010a8:	f002 f9b7 	bl	800341a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp1x3, 1, 3, KF->temp1x3);//1x3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 80010b2:	2203      	movs	r2, #3
 80010b4:	2101      	movs	r1, #1
 80010b6:	4823      	ldr	r0, [pc, #140]	; (8001144 <InitKalmanStruct+0x2a0>)
 80010b8:	f002 f9af 	bl	800341a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp1x1, 1, 1, &KF->temp1x1);//1x1
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80010c2:	2201      	movs	r2, #1
 80010c4:	2101      	movs	r1, #1
 80010c6:	4820      	ldr	r0, [pc, #128]	; (8001148 <InitKalmanStruct+0x2a4>)
 80010c8:	f002 f9a7 	bl	800341a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_G, 3, 1, KF->G);//3x1
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	33a0      	adds	r3, #160	; 0xa0
 80010d0:	2201      	movs	r2, #1
 80010d2:	2103      	movs	r1, #3
 80010d4:	481d      	ldr	r0, [pc, #116]	; (800114c <InitKalmanStruct+0x2a8>)
 80010d6:	f002 f9a0 	bl	800341a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_GT, 1, 3, KF->GT);//1x3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	33ac      	adds	r3, #172	; 0xac
 80010de:	2203      	movs	r2, #3
 80010e0:	2101      	movs	r1, #1
 80010e2:	481b      	ldr	r0, [pc, #108]	; (8001150 <InitKalmanStruct+0x2ac>)
 80010e4:	f002 f999 	bl	800341a <arm_mat_init_f32>
	  arm_mat_init_f32(&eye, 3, 3, KF->I);//1x3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	33b8      	adds	r3, #184	; 0xb8
 80010ec:	2203      	movs	r2, #3
 80010ee:	2103      	movs	r1, #3
 80010f0:	4818      	ldr	r0, [pc, #96]	; (8001154 <InitKalmanStruct+0x2b0>)
 80010f2:	f002 f992 	bl	800341a <arm_mat_init_f32>

}
 80010f6:	bf00      	nop
 80010f8:	3780      	adds	r7, #128	; 0x80
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bdb0      	pop	{r4, r5, r7, pc}
 80010fe:	bf00      	nop
 8001100:	08007de8 	.word	0x08007de8
 8001104:	08007e0c 	.word	0x08007e0c
 8001108:	08007e30 	.word	0x08007e30
 800110c:	2000033c 	.word	0x2000033c
 8001110:	20000344 	.word	0x20000344
 8001114:	2000034c 	.word	0x2000034c
 8001118:	20000354 	.word	0x20000354
 800111c:	20000364 	.word	0x20000364
 8001120:	2000036c 	.word	0x2000036c
 8001124:	20000374 	.word	0x20000374
 8001128:	2000038c 	.word	0x2000038c
 800112c:	20000394 	.word	0x20000394
 8001130:	2000039c 	.word	0x2000039c
 8001134:	200003a4 	.word	0x200003a4
 8001138:	200003ac 	.word	0x200003ac
 800113c:	200003b4 	.word	0x200003b4
 8001140:	200003bc 	.word	0x200003bc
 8001144:	200003c4 	.word	0x200003c4
 8001148:	200003cc 	.word	0x200003cc
 800114c:	20000384 	.word	0x20000384
 8001150:	2000037c 	.word	0x2000037c
 8001154:	2000035c 	.word	0x2000035c

08001158 <kalman_filter>:

void kalman_filter()
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
    //Process model: x_hat_minus = mat_A*x_hat
    arm_mat_mult_f32(&mat_A, &mat_x_hat, &mat_x_hat_minus);			//A*X
 800115c:	4a39      	ldr	r2, [pc, #228]	; (8001244 <kalman_filter+0xec>)
 800115e:	493a      	ldr	r1, [pc, #232]	; (8001248 <kalman_filter+0xf0>)
 8001160:	483a      	ldr	r0, [pc, #232]	; (800124c <kalman_filter+0xf4>)
 8001162:	f002 fce9 	bl	8003b38 <arm_mat_mult_f32>
    // If an input control vector is used:
    // arm_mat_mult_f32(&mat_B, &mat_u, &mat_temp3x3A);
    // arm_mat_add_f32(&mat_x_hat_minus, &mat_temp3x3A, &mat_x_hat_minus);

    // Predict covariance matrix: P_minus = A * P * A^T + Q
    arm_mat_trans_f32(&mat_A, &mat_temp3x3A);					    //AT
 8001166:	493a      	ldr	r1, [pc, #232]	; (8001250 <kalman_filter+0xf8>)
 8001168:	4838      	ldr	r0, [pc, #224]	; (800124c <kalman_filter+0xf4>)
 800116a:	f002 fdd0 	bl	8003d0e <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_A, &mat_P, &mat_temp3x3B);			    //A*P
 800116e:	4a39      	ldr	r2, [pc, #228]	; (8001254 <kalman_filter+0xfc>)
 8001170:	4939      	ldr	r1, [pc, #228]	; (8001258 <kalman_filter+0x100>)
 8001172:	4836      	ldr	r0, [pc, #216]	; (800124c <kalman_filter+0xf4>)
 8001174:	f002 fce0 	bl	8003b38 <arm_mat_mult_f32>
    arm_mat_mult_f32(&mat_temp3x3B, &mat_temp3x3A, &mat_P_minus);	//A*P*AT
 8001178:	4a38      	ldr	r2, [pc, #224]	; (800125c <kalman_filter+0x104>)
 800117a:	4935      	ldr	r1, [pc, #212]	; (8001250 <kalman_filter+0xf8>)
 800117c:	4835      	ldr	r0, [pc, #212]	; (8001254 <kalman_filter+0xfc>)
 800117e:	f002 fcdb 	bl	8003b38 <arm_mat_mult_f32>
    arm_mat_trans_f32(&mat_G, &mat_GT);								//GT
 8001182:	4937      	ldr	r1, [pc, #220]	; (8001260 <kalman_filter+0x108>)
 8001184:	4837      	ldr	r0, [pc, #220]	; (8001264 <kalman_filter+0x10c>)
 8001186:	f002 fdc2 	bl	8003d0e <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_G, &mat_GT, &mat_Q);						//G*GT
 800118a:	4a37      	ldr	r2, [pc, #220]	; (8001268 <kalman_filter+0x110>)
 800118c:	4934      	ldr	r1, [pc, #208]	; (8001260 <kalman_filter+0x108>)
 800118e:	4835      	ldr	r0, [pc, #212]	; (8001264 <kalman_filter+0x10c>)
 8001190:	f002 fcd2 	bl	8003b38 <arm_mat_mult_f32>
    arm_mat_scale_f32(&mat_Q,KF.var_Q, &mat_Q);						//G*GT*var_q
 8001194:	4b35      	ldr	r3, [pc, #212]	; (800126c <kalman_filter+0x114>)
 8001196:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800119a:	4933      	ldr	r1, [pc, #204]	; (8001268 <kalman_filter+0x110>)
 800119c:	eeb0 0a67 	vmov.f32	s0, s15
 80011a0:	4831      	ldr	r0, [pc, #196]	; (8001268 <kalman_filter+0x110>)
 80011a2:	f002 fd43 	bl	8003c2c <arm_mat_scale_f32>
    arm_mat_add_f32(&mat_P_minus, &mat_Q, &mat_P_minus);			//A * P * A^T + Q
 80011a6:	4a2d      	ldr	r2, [pc, #180]	; (800125c <kalman_filter+0x104>)
 80011a8:	492f      	ldr	r1, [pc, #188]	; (8001268 <kalman_filter+0x110>)
 80011aa:	482c      	ldr	r0, [pc, #176]	; (800125c <kalman_filter+0x104>)
 80011ac:	f002 f8fa 	bl	80033a4 <arm_mat_add_f32>

    // Calculate innovation covariance: S = C * P_minus * C^T + R
    arm_mat_mult_f32(&mat_C, &mat_P_minus, &mat_temp1x3);			//C*P
 80011b0:	4a2f      	ldr	r2, [pc, #188]	; (8001270 <kalman_filter+0x118>)
 80011b2:	492a      	ldr	r1, [pc, #168]	; (800125c <kalman_filter+0x104>)
 80011b4:	482f      	ldr	r0, [pc, #188]	; (8001274 <kalman_filter+0x11c>)
 80011b6:	f002 fcbf 	bl	8003b38 <arm_mat_mult_f32>
    arm_mat_trans_f32(&mat_C, &mat_temp3x1);						//CT
 80011ba:	492f      	ldr	r1, [pc, #188]	; (8001278 <kalman_filter+0x120>)
 80011bc:	482d      	ldr	r0, [pc, #180]	; (8001274 <kalman_filter+0x11c>)
 80011be:	f002 fda6 	bl	8003d0e <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_temp1x3, &mat_temp3x1, &mat_temp1x1);		//C*P*C^T
 80011c2:	4a2e      	ldr	r2, [pc, #184]	; (800127c <kalman_filter+0x124>)
 80011c4:	492c      	ldr	r1, [pc, #176]	; (8001278 <kalman_filter+0x120>)
 80011c6:	482a      	ldr	r0, [pc, #168]	; (8001270 <kalman_filter+0x118>)
 80011c8:	f002 fcb6 	bl	8003b38 <arm_mat_mult_f32>
    arm_mat_add_f32(&mat_temp1x1, &mat_R, &mat_S);					//C*P*C^T + R
 80011cc:	4a2c      	ldr	r2, [pc, #176]	; (8001280 <kalman_filter+0x128>)
 80011ce:	492d      	ldr	r1, [pc, #180]	; (8001284 <kalman_filter+0x12c>)
 80011d0:	482a      	ldr	r0, [pc, #168]	; (800127c <kalman_filter+0x124>)
 80011d2:	f002 f8e7 	bl	80033a4 <arm_mat_add_f32>

    //==> Calculate Kalman gain: K = P_minus * C^T * S^(-1)
    arm_mat_inverse_f32(&mat_S, &mat_temp1x1);						//inv(S)
 80011d6:	4929      	ldr	r1, [pc, #164]	; (800127c <kalman_filter+0x124>)
 80011d8:	4829      	ldr	r0, [pc, #164]	; (8001280 <kalman_filter+0x128>)
 80011da:	f002 f936 	bl	800344a <arm_mat_inverse_f32>
    arm_mat_mult_f32(&mat_P_minus, &mat_temp3x1, &mat_temp3x3A);	//P*CT
 80011de:	4a1c      	ldr	r2, [pc, #112]	; (8001250 <kalman_filter+0xf8>)
 80011e0:	4925      	ldr	r1, [pc, #148]	; (8001278 <kalman_filter+0x120>)
 80011e2:	481e      	ldr	r0, [pc, #120]	; (800125c <kalman_filter+0x104>)
 80011e4:	f002 fca8 	bl	8003b38 <arm_mat_mult_f32>
    arm_mat_mult_f32(&mat_temp3x3A, &mat_temp1x1, &mat_K);			//P*CT*inv(S)
 80011e8:	4a27      	ldr	r2, [pc, #156]	; (8001288 <kalman_filter+0x130>)
 80011ea:	4924      	ldr	r1, [pc, #144]	; (800127c <kalman_filter+0x124>)
 80011ec:	4818      	ldr	r0, [pc, #96]	; (8001250 <kalman_filter+0xf8>)
 80011ee:	f002 fca3 	bl	8003b38 <arm_mat_mult_f32>

    //==> Update state estimate: x_hat = x_hat_minus + K * (z - C * x_hat_minus)
    arm_mat_mult_f32(&mat_C, &mat_x_hat_minus, &mat_temp1x1);		//C*X
 80011f2:	4a22      	ldr	r2, [pc, #136]	; (800127c <kalman_filter+0x124>)
 80011f4:	4913      	ldr	r1, [pc, #76]	; (8001244 <kalman_filter+0xec>)
 80011f6:	481f      	ldr	r0, [pc, #124]	; (8001274 <kalman_filter+0x11c>)
 80011f8:	f002 fc9e 	bl	8003b38 <arm_mat_mult_f32>
    //float32_t innovation = z - temp1x1;								//Z-C*X
    arm_mat_scale_f32(&mat_K, KF.z - KF.temp1x1, &mat_temp3x1);			//K*(Z-C*X)
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <kalman_filter+0x114>)
 80011fe:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8001202:	4b1a      	ldr	r3, [pc, #104]	; (800126c <kalman_filter+0x114>)
 8001204:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
 8001208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120c:	491a      	ldr	r1, [pc, #104]	; (8001278 <kalman_filter+0x120>)
 800120e:	eeb0 0a67 	vmov.f32	s0, s15
 8001212:	481d      	ldr	r0, [pc, #116]	; (8001288 <kalman_filter+0x130>)
 8001214:	f002 fd0a 	bl	8003c2c <arm_mat_scale_f32>
    arm_mat_add_f32(&mat_x_hat_minus, &mat_temp3x1, &mat_x_hat);	//X - K*(Z-C*X) ========> X estimate
 8001218:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <kalman_filter+0xf0>)
 800121a:	4917      	ldr	r1, [pc, #92]	; (8001278 <kalman_filter+0x120>)
 800121c:	4809      	ldr	r0, [pc, #36]	; (8001244 <kalman_filter+0xec>)
 800121e:	f002 f8c1 	bl	80033a4 <arm_mat_add_f32>

    // Update covariance matrix: P = (I - K * C) * P_minus
    arm_mat_mult_f32(&mat_K, &mat_C, &mat_temp3x3B);				//K*C
 8001222:	4a0c      	ldr	r2, [pc, #48]	; (8001254 <kalman_filter+0xfc>)
 8001224:	4913      	ldr	r1, [pc, #76]	; (8001274 <kalman_filter+0x11c>)
 8001226:	4818      	ldr	r0, [pc, #96]	; (8001288 <kalman_filter+0x130>)
 8001228:	f002 fc86 	bl	8003b38 <arm_mat_mult_f32>
    arm_mat_sub_f32(&eye, &mat_P_minus, &mat_temp3x3A);				//I - K*C
 800122c:	4a08      	ldr	r2, [pc, #32]	; (8001250 <kalman_filter+0xf8>)
 800122e:	490b      	ldr	r1, [pc, #44]	; (800125c <kalman_filter+0x104>)
 8001230:	4816      	ldr	r0, [pc, #88]	; (800128c <kalman_filter+0x134>)
 8001232:	f002 fd31 	bl	8003c98 <arm_mat_sub_f32>
    arm_mat_mult_f32(&mat_temp3x3A, &mat_P_minus, &mat_P);			//(I - K*C)*P ===========> P estimate
 8001236:	4a08      	ldr	r2, [pc, #32]	; (8001258 <kalman_filter+0x100>)
 8001238:	4908      	ldr	r1, [pc, #32]	; (800125c <kalman_filter+0x104>)
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <kalman_filter+0xf8>)
 800123c:	f002 fc7c 	bl	8003b38 <arm_mat_mult_f32>
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2000034c 	.word	0x2000034c
 8001248:	20000344 	.word	0x20000344
 800124c:	2000033c 	.word	0x2000033c
 8001250:	200003ac 	.word	0x200003ac
 8001254:	200003b4 	.word	0x200003b4
 8001258:	20000364 	.word	0x20000364
 800125c:	2000036c 	.word	0x2000036c
 8001260:	2000037c 	.word	0x2000037c
 8001264:	20000384 	.word	0x20000384
 8001268:	20000374 	.word	0x20000374
 800126c:	200001bc 	.word	0x200001bc
 8001270:	200003c4 	.word	0x200003c4
 8001274:	2000038c 	.word	0x2000038c
 8001278:	200003bc 	.word	0x200003bc
 800127c:	200003cc 	.word	0x200003cc
 8001280:	2000039c 	.word	0x2000039c
 8001284:	20000394 	.word	0x20000394
 8001288:	200003a4 	.word	0x200003a4
 800128c:	2000035c 	.word	0x2000035c

08001290 <PIDSetup>:
 */

#include "PIDController.h"

void PIDSetup(PID* temp,float32_t Kp, float32_t Ki, float32_t Kd, float32_t tolerance)
{
 8001290:	b480      	push	{r7}
 8001292:	b087      	sub	sp, #28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6178      	str	r0, [r7, #20]
 8001298:	ed87 0a04 	vstr	s0, [r7, #16]
 800129c:	edc7 0a03 	vstr	s1, [r7, #12]
 80012a0:	ed87 1a02 	vstr	s2, [r7, #8]
 80012a4:	edc7 1a01 	vstr	s3, [r7, #4]
	temp->Kp = Kp;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	601a      	str	r2, [r3, #0]
	temp->Ki = Ki;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	68fa      	ldr	r2, [r7, #12]
 80012b2:	605a      	str	r2, [r3, #4]
	temp->Kd = Kd;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	609a      	str	r2, [r3, #8]
	temp->tolerance = tolerance;
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	629a      	str	r2, [r3, #40]	; 0x28
	temp->U = 0;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
	temp->Delta_U = 0;
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
	temp->U_minus = 0;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	2200      	movs	r2, #0
 80012d0:	615a      	str	r2, [r3, #20]
	temp->Error = 0;
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]
	temp->Error_minus = 0;
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
	temp->Error_minus2 = 0;
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	621a      	str	r2, [r3, #32]
}
 80012ea:	bf00      	nop
 80012ec:	371c      	adds	r7, #28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <PIDRun>:

void PIDRun(PID* temp, float32_t Feedback, float32_t Ref)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b085      	sub	sp, #20
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	ed87 0a02 	vstr	s0, [r7, #8]
 8001302:	edc7 0a01 	vstr	s1, [r7, #4]
	temp->Error = Ref - Feedback;
 8001306:	ed97 7a01 	vldr	s14, [r7, #4]
 800130a:	edd7 7a02 	vldr	s15, [r7, #8]
 800130e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	edc3 7a06 	vstr	s15, [r3, #24]
	if(temp->Error > 0)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	edd3 7a06 	vldr	s15, [r3, #24]
 800131e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001326:	dd04      	ble.n	8001332 <PIDRun+0x3c>
	{
		temp->MotorDir = 0;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2200      	movs	r2, #0
 800132c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001330:	e00b      	b.n	800134a <PIDRun+0x54>
	}
	else if (temp->Error < 0)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	edd3 7a06 	vldr	s15, [r3, #24]
 8001338:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800133c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001340:	d503      	bpl.n	800134a <PIDRun+0x54>
	{
		temp->MotorDir = 1;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2201      	movs	r2, #1
 8001346:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
	//U Update
	temp->Delta_U = (temp->Kp + temp->Ki + temp->Kd) * temp->Error
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	ed93 7a00 	vldr	s14, [r3]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	edd3 7a01 	vldr	s15, [r3, #4]
 8001356:	ee37 7a27 	vadd.f32	s14, s14, s15
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001360:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	edd3 7a06 	vldr	s15, [r3, #24]
 800136a:	ee27 7a27 	vmul.f32	s14, s14, s15
			  - (temp->Kp + 2*temp->Kd) * temp->Error_minus
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	edd3 6a00 	vldr	s13, [r3]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	edd3 7a02 	vldr	s15, [r3, #8]
 800137a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800137e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	edd3 7a07 	vldr	s15, [r3, #28]
 8001388:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800138c:	ee37 7a67 	vsub.f32	s14, s14, s15
			  + temp->Kd * temp->Error_minus2;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	edd3 6a02 	vldr	s13, [r3, #8]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	edd3 7a08 	vldr	s15, [r3, #32]
 800139c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013a0:	ee77 7a27 	vadd.f32	s15, s14, s15
	temp->Delta_U = (temp->Kp + temp->Ki + temp->Kd) * temp->Error
 80013a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013a8:	ee17 2a90 	vmov	r2, s15
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	611a      	str	r2, [r3, #16]
	temp->U = temp->Delta_U + temp->U_minus;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	691a      	ldr	r2, [r3, #16]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	695b      	ldr	r3, [r3, #20]
 80013b8:	441a      	add	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	60da      	str	r2, [r3, #12]
	temp->U_minus = temp->U;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	68da      	ldr	r2, [r3, #12]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	615a      	str	r2, [r3, #20]
	//Error Update
	temp->Error_minus2 = temp->Error_minus;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	69da      	ldr	r2, [r3, #28]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	621a      	str	r2, [r3, #32]
	temp->Error_minus = temp->Error;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	699a      	ldr	r2, [r3, #24]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	61da      	str	r2, [r3, #28]
}
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <CascadeLoop>:

void CascadeLoop(PID* Pos, PID* Velo, float32_t PosFeedback, float32_t VeloFeedback, QuinticTraj* TrajReference, float32_t tolerance)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b08a      	sub	sp, #40	; 0x28
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	61f8      	str	r0, [r7, #28]
 80013ea:	61b9      	str	r1, [r7, #24]
 80013ec:	ed87 0a05 	vstr	s0, [r7, #20]
 80013f0:	edc7 0a04 	vstr	s1, [r7, #16]
 80013f4:	60fa      	str	r2, [r7, #12]
 80013f6:	ed87 1a02 	vstr	s2, [r7, #8]
	if(fabs(TrajReference->current_pos - PosFeedback) == 0 )
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	ee07 3a90 	vmov	s15, r3
 8001402:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001406:	edd7 7a05 	vldr	s15, [r7, #20]
 800140a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800140e:	eef0 7ae7 	vabs.f32	s15, s15
 8001412:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141a:	d116      	bne.n	800144a <CascadeLoop+0x68>
	{
		Velo->U = 0;
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
		Pos->ESS = TrajReference->current_pos - PosFeedback;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	ee07 3a90 	vmov	s15, r3
 800142a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800142e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001432:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001436:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800143a:	edc7 7a01 	vstr	s15, [r7, #4]
 800143e:	793b      	ldrb	r3, [r7, #4]
 8001440:	b25a      	sxtb	r2, r3
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		PIDRun(Velo, VeloFeedback, veloRef);

	}


}
 8001448:	e01e      	b.n	8001488 <CascadeLoop+0xa6>
		PIDRun(Pos, PosFeedback, TrajReference->current_pos);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	ee07 3a90 	vmov	s15, r3
 8001452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001456:	eef0 0a67 	vmov.f32	s1, s15
 800145a:	ed97 0a05 	vldr	s0, [r7, #20]
 800145e:	69f8      	ldr	r0, [r7, #28]
 8001460:	f7ff ff49 	bl	80012f6 <PIDRun>
		float32_t veloRef = Pos->U + TrajReference->current_velo;
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	68da      	ldr	r2, [r3, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	4413      	add	r3, r2
 800146e:	ee07 3a90 	vmov	s15, r3
 8001472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001476:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		PIDRun(Velo, VeloFeedback, veloRef);
 800147a:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 800147e:	ed97 0a04 	vldr	s0, [r7, #16]
 8001482:	69b8      	ldr	r0, [r7, #24]
 8001484:	f7ff ff37 	bl	80012f6 <PIDRun>
}
 8001488:	bf00      	nop
 800148a:	3728      	adds	r7, #40	; 0x28
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <QuinticSetup>:
 *      Author: tanawatp
 */
#include "QuinticTrajectory.h"

void QuinticSetup(QuinticTraj* temp, float32_t vmax, float32_t amax)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	ed87 0a02 	vstr	s0, [r7, #8]
 800149c:	edc7 0a01 	vstr	s1, [r7, #4]
	temp->v_max = vmax;
 80014a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80014a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014a8:	ee17 2a90 	vmov	r2, s15
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	619a      	str	r2, [r3, #24]
	temp->a_max = amax;
 80014b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80014b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014b8:	ee17 2a90 	vmov	r2, s15
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	61da      	str	r2, [r3, #28]
	temp->State = Ready;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	//temp->final_pos = 300;
}
 80014c8:	bf00      	nop
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	0000      	movs	r0, r0
	...

080014d8 <QuinticGenerator>:
void QuinticGenerator(QuinticTraj* temp,int8_t ess)
{
 80014d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	460b      	mov	r3, r1
 80014e4:	70fb      	strb	r3, [r7, #3]
	//temp->final_pos = temp->final_pos * 8192/120;
	temp->displacement = temp->final_pos - (temp->start_pos+ess);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6819      	ldr	r1, [r3, #0]
 80014ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014f2:	440b      	add	r3, r1
 80014f4:	1ad2      	subs	r2, r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	609a      	str	r2, [r3, #8]
	if(temp->displacement<0)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	da04      	bge.n	800150c <QuinticGenerator+0x34>
	{
		temp->Dir = 1;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	f883 2020 	strb.w	r2, [r3, #32]
 800150a:	e007      	b.n	800151c <QuinticGenerator+0x44>
	}
	else if (temp->displacement>0)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	2b00      	cmp	r3, #0
 8001512:	dd03      	ble.n	800151c <QuinticGenerator+0x44>
	{
		temp->Dir = 0;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2020 	strb.w	r2, [r3, #32]
	}
	temp->timeAcc = 0.5*sqrtf(23.094*fabs(temp->displacement)/temp->a_max);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	4618      	mov	r0, r3
 8001522:	f7fe ffab 	bl	800047c <__aeabi_i2d>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4690      	mov	r8, r2
 800152c:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001530:	a388      	add	r3, pc, #544	; (adr r3, 8001754 <QuinticGenerator+0x27c>)
 8001532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001536:	4640      	mov	r0, r8
 8001538:	4649      	mov	r1, r9
 800153a:	f7ff f809 	bl	8000550 <__aeabi_dmul>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4690      	mov	r8, r2
 8001544:	4699      	mov	r9, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	4618      	mov	r0, r3
 800154c:	f7fe ff96 	bl	800047c <__aeabi_i2d>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4640      	mov	r0, r8
 8001556:	4649      	mov	r1, r9
 8001558:	f7ff f924 	bl	80007a4 <__aeabi_ddiv>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	f7ff facc 	bl	8000b00 <__aeabi_d2f>
 8001568:	4603      	mov	r3, r0
 800156a:	ee00 3a10 	vmov	s0, r3
 800156e:	f005 f9ed 	bl	800694c <sqrtf>
 8001572:	ee10 3a10 	vmov	r3, s0
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe ff92 	bl	80004a0 <__aeabi_f2d>
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	4b6f      	ldr	r3, [pc, #444]	; (8001740 <QuinticGenerator+0x268>)
 8001582:	f7fe ffe5 	bl	8000550 <__aeabi_dmul>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f7ff fab7 	bl	8000b00 <__aeabi_d2f>
 8001592:	4602      	mov	r2, r0
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	645a      	str	r2, [r3, #68]	; 0x44
	temp->timeVelo = 1.875*fabs(temp->displacement)/temp->v_max;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe ff6d 	bl	800047c <__aeabi_i2d>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4614      	mov	r4, r2
 80015a8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	4b64      	ldr	r3, [pc, #400]	; (8001744 <QuinticGenerator+0x26c>)
 80015b2:	4620      	mov	r0, r4
 80015b4:	4629      	mov	r1, r5
 80015b6:	f7fe ffcb 	bl	8000550 <__aeabi_dmul>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4614      	mov	r4, r2
 80015c0:	461d      	mov	r5, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe ff58 	bl	800047c <__aeabi_i2d>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4620      	mov	r0, r4
 80015d2:	4629      	mov	r1, r5
 80015d4:	f7ff f8e6 	bl	80007a4 <__aeabi_ddiv>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff fa8e 	bl	8000b00 <__aeabi_d2f>
 80015e4:	4602      	mov	r2, r0
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	649a      	str	r2, [r3, #72]	; 0x48
	temp->TotalTime = MAX(temp->timeAcc,temp->timeVelo);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80015f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fe:	dd02      	ble.n	8001606 <QuinticGenerator+0x12e>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001604:	e001      	b.n	800160a <QuinticGenerator+0x132>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	63d3      	str	r3, [r2, #60]	; 0x3c
	temp->coeff[0] = temp->start_pos;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	ee07 3a90 	vmov	s15, r3
 8001616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	temp->coeff[1] = 0;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	629a      	str	r2, [r3, #40]	; 0x28
	temp->coeff[2] = 0;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	62da      	str	r2, [r3, #44]	; 0x2c
	temp->coeff[3] = 10.0*temp->displacement/powf(temp->TotalTime,3);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ff21 	bl	800047c <__aeabi_i2d>
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	4b42      	ldr	r3, [pc, #264]	; (8001748 <QuinticGenerator+0x270>)
 8001640:	f7fe ff86 	bl	8000550 <__aeabi_dmul>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4614      	mov	r4, r2
 800164a:	461d      	mov	r5, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001652:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001656:	eeb0 0a67 	vmov.f32	s0, s15
 800165a:	f005 f91f 	bl	800689c <powf>
 800165e:	ee10 3a10 	vmov	r3, s0
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe ff1c 	bl	80004a0 <__aeabi_f2d>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4620      	mov	r0, r4
 800166e:	4629      	mov	r1, r5
 8001670:	f7ff f898 	bl	80007a4 <__aeabi_ddiv>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	f7ff fa40 	bl	8000b00 <__aeabi_d2f>
 8001680:	4602      	mov	r2, r0
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	631a      	str	r2, [r3, #48]	; 0x30
	temp->coeff[4] = -15.0*temp->displacement/powf(temp->TotalTime,4);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe fef6 	bl	800047c <__aeabi_i2d>
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	4b2d      	ldr	r3, [pc, #180]	; (800174c <QuinticGenerator+0x274>)
 8001696:	f7fe ff5b 	bl	8000550 <__aeabi_dmul>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4614      	mov	r4, r2
 80016a0:	461d      	mov	r5, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80016a8:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80016ac:	eeb0 0a67 	vmov.f32	s0, s15
 80016b0:	f005 f8f4 	bl	800689c <powf>
 80016b4:	ee10 3a10 	vmov	r3, s0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe fef1 	bl	80004a0 <__aeabi_f2d>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4620      	mov	r0, r4
 80016c4:	4629      	mov	r1, r5
 80016c6:	f7ff f86d 	bl	80007a4 <__aeabi_ddiv>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4610      	mov	r0, r2
 80016d0:	4619      	mov	r1, r3
 80016d2:	f7ff fa15 	bl	8000b00 <__aeabi_d2f>
 80016d6:	4602      	mov	r2, r0
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	635a      	str	r2, [r3, #52]	; 0x34
	temp->coeff[5] = 6.0*temp->displacement/powf(temp->TotalTime,5);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe fecb 	bl	800047c <__aeabi_i2d>
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	4b19      	ldr	r3, [pc, #100]	; (8001750 <QuinticGenerator+0x278>)
 80016ec:	f7fe ff30 	bl	8000550 <__aeabi_dmul>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4614      	mov	r4, r2
 80016f6:	461d      	mov	r5, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80016fe:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8001702:	eeb0 0a67 	vmov.f32	s0, s15
 8001706:	f005 f8c9 	bl	800689c <powf>
 800170a:	ee10 3a10 	vmov	r3, s0
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe fec6 	bl	80004a0 <__aeabi_f2d>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4620      	mov	r0, r4
 800171a:	4629      	mov	r1, r5
 800171c:	f7ff f842 	bl	80007a4 <__aeabi_ddiv>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4610      	mov	r0, r2
 8001726:	4619      	mov	r1, r3
 8001728:	f7ff f9ea 	bl	8000b00 <__aeabi_d2f>
 800172c:	4602      	mov	r2, r0
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800173c:	f3af 8000 	nop.w
 8001740:	3fe00000 	.word	0x3fe00000
 8001744:	3ffe0000 	.word	0x3ffe0000
 8001748:	40240000 	.word	0x40240000
 800174c:	c02e0000 	.word	0xc02e0000
 8001750:	40180000 	.word	0x40180000
 8001754:	624dd2f2 	.word	0x624dd2f2
 8001758:	40371810 	.word	0x40371810

0800175c <QuinticEvaluator>:
void QuinticEvaluator(QuinticTraj* temp)
{
 800175c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001760:	ed2d 8b02 	vpush	{d8}
 8001764:	b084      	sub	sp, #16
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
	float32_t time = temp->time;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	60fb      	str	r3, [r7, #12]
	temp->current_pos = temp->coeff[0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
						+ temp->coeff[1]*time
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800177c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001780:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001784:	ee37 8a27 	vadd.f32	s16, s14, s15
						+ temp->coeff[2]*powf(time,2)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	edd3 8a0b 	vldr	s17, [r3, #44]	; 0x2c
 800178e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001792:	ed97 0a03 	vldr	s0, [r7, #12]
 8001796:	f005 f881 	bl	800689c <powf>
 800179a:	eef0 7a40 	vmov.f32	s15, s0
 800179e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80017a2:	ee38 8a27 	vadd.f32	s16, s16, s15
						+ temp->coeff[3]*powf(time,3)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	edd3 8a0c 	vldr	s17, [r3, #48]	; 0x30
 80017ac:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80017b0:	ed97 0a03 	vldr	s0, [r7, #12]
 80017b4:	f005 f872 	bl	800689c <powf>
 80017b8:	eef0 7a40 	vmov.f32	s15, s0
 80017bc:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80017c0:	ee38 8a27 	vadd.f32	s16, s16, s15
						+ temp->coeff[4]*powf(time,4)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	edd3 8a0d 	vldr	s17, [r3, #52]	; 0x34
 80017ca:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80017ce:	ed97 0a03 	vldr	s0, [r7, #12]
 80017d2:	f005 f863 	bl	800689c <powf>
 80017d6:	eef0 7a40 	vmov.f32	s15, s0
 80017da:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80017de:	ee38 8a27 	vadd.f32	s16, s16, s15
						+ temp->coeff[5]*powf(time,5);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	edd3 8a0e 	vldr	s17, [r3, #56]	; 0x38
 80017e8:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80017ec:	ed97 0a03 	vldr	s0, [r7, #12]
 80017f0:	f005 f854 	bl	800689c <powf>
 80017f4:	eef0 7a40 	vmov.f32	s15, s0
 80017f8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80017fc:	ee78 7a27 	vadd.f32	s15, s16, s15
	temp->current_pos = temp->coeff[0]
 8001800:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001804:	ee17 2a90 	vmov	r2, s15
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	60da      	str	r2, [r3, #12]

	temp->current_velo = temp->coeff[1]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fe45 	bl	80004a0 <__aeabi_f2d>
 8001816:	4604      	mov	r4, r0
 8001818:	460d      	mov	r5, r1
						+ 2.0*temp->coeff[2]*time
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe fe3e 	bl	80004a0 <__aeabi_f2d>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	f7fe fcdc 	bl	80001e4 <__adddf3>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4690      	mov	r8, r2
 8001832:	4699      	mov	r9, r3
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	f7fe fe33 	bl	80004a0 <__aeabi_f2d>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4640      	mov	r0, r8
 8001840:	4649      	mov	r1, r9
 8001842:	f7fe fe85 	bl	8000550 <__aeabi_dmul>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4620      	mov	r0, r4
 800184c:	4629      	mov	r1, r5
 800184e:	f7fe fcc9 	bl	80001e4 <__adddf3>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4614      	mov	r4, r2
 8001858:	461d      	mov	r5, r3
						+ 3.0*temp->coeff[3]*powf(time,2)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fe1e 	bl	80004a0 <__aeabi_f2d>
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	4b8e      	ldr	r3, [pc, #568]	; (8001aa4 <QuinticEvaluator+0x348>)
 800186a:	f7fe fe71 	bl	8000550 <__aeabi_dmul>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4690      	mov	r8, r2
 8001874:	4699      	mov	r9, r3
 8001876:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800187a:	ed97 0a03 	vldr	s0, [r7, #12]
 800187e:	f005 f80d 	bl	800689c <powf>
 8001882:	ee10 3a10 	vmov	r3, s0
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fe0a 	bl	80004a0 <__aeabi_f2d>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4640      	mov	r0, r8
 8001892:	4649      	mov	r1, r9
 8001894:	f7fe fe5c 	bl	8000550 <__aeabi_dmul>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4620      	mov	r0, r4
 800189e:	4629      	mov	r1, r5
 80018a0:	f7fe fca0 	bl	80001e4 <__adddf3>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4614      	mov	r4, r2
 80018aa:	461d      	mov	r5, r3
						+ 4.0*temp->coeff[4]*powf(time,3)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fdf5 	bl	80004a0 <__aeabi_f2d>
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	4b7b      	ldr	r3, [pc, #492]	; (8001aa8 <QuinticEvaluator+0x34c>)
 80018bc:	f7fe fe48 	bl	8000550 <__aeabi_dmul>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4690      	mov	r8, r2
 80018c6:	4699      	mov	r9, r3
 80018c8:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80018cc:	ed97 0a03 	vldr	s0, [r7, #12]
 80018d0:	f004 ffe4 	bl	800689c <powf>
 80018d4:	ee10 3a10 	vmov	r3, s0
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fde1 	bl	80004a0 <__aeabi_f2d>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4640      	mov	r0, r8
 80018e4:	4649      	mov	r1, r9
 80018e6:	f7fe fe33 	bl	8000550 <__aeabi_dmul>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4620      	mov	r0, r4
 80018f0:	4629      	mov	r1, r5
 80018f2:	f7fe fc77 	bl	80001e4 <__adddf3>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4614      	mov	r4, r2
 80018fc:	461d      	mov	r5, r3
						+ 5.0*temp->coeff[5]*powf(time,4);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fdcc 	bl	80004a0 <__aeabi_f2d>
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	4b67      	ldr	r3, [pc, #412]	; (8001aac <QuinticEvaluator+0x350>)
 800190e:	f7fe fe1f 	bl	8000550 <__aeabi_dmul>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4690      	mov	r8, r2
 8001918:	4699      	mov	r9, r3
 800191a:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800191e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001922:	f004 ffbb 	bl	800689c <powf>
 8001926:	ee10 3a10 	vmov	r3, s0
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe fdb8 	bl	80004a0 <__aeabi_f2d>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4640      	mov	r0, r8
 8001936:	4649      	mov	r1, r9
 8001938:	f7fe fe0a 	bl	8000550 <__aeabi_dmul>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4620      	mov	r0, r4
 8001942:	4629      	mov	r1, r5
 8001944:	f7fe fc4e 	bl	80001e4 <__adddf3>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
	temp->current_velo = temp->coeff[1]
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	f7ff f8ae 	bl	8000ab0 <__aeabi_d2iz>
 8001954:	4602      	mov	r2, r0
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	611a      	str	r2, [r3, #16]

	temp->current_acc = 2.0*temp->coeff[2]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fd9e 	bl	80004a0 <__aeabi_f2d>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	f7fe fc3c 	bl	80001e4 <__adddf3>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4614      	mov	r4, r2
 8001972:	461d      	mov	r5, r3
						+ 6.0*temp->coeff[3]*time
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001978:	4618      	mov	r0, r3
 800197a:	f7fe fd91 	bl	80004a0 <__aeabi_f2d>
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	4b4b      	ldr	r3, [pc, #300]	; (8001ab0 <QuinticEvaluator+0x354>)
 8001984:	f7fe fde4 	bl	8000550 <__aeabi_dmul>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4690      	mov	r8, r2
 800198e:	4699      	mov	r9, r3
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f7fe fd85 	bl	80004a0 <__aeabi_f2d>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4640      	mov	r0, r8
 800199c:	4649      	mov	r1, r9
 800199e:	f7fe fdd7 	bl	8000550 <__aeabi_dmul>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4620      	mov	r0, r4
 80019a8:	4629      	mov	r1, r5
 80019aa:	f7fe fc1b 	bl	80001e4 <__adddf3>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4614      	mov	r4, r2
 80019b4:	461d      	mov	r5, r3
						+ 12.0*temp->coeff[4]*powf(time,2)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fd70 	bl	80004a0 <__aeabi_f2d>
 80019c0:	f04f 0200 	mov.w	r2, #0
 80019c4:	4b3b      	ldr	r3, [pc, #236]	; (8001ab4 <QuinticEvaluator+0x358>)
 80019c6:	f7fe fdc3 	bl	8000550 <__aeabi_dmul>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	4690      	mov	r8, r2
 80019d0:	4699      	mov	r9, r3
 80019d2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80019d6:	ed97 0a03 	vldr	s0, [r7, #12]
 80019da:	f004 ff5f 	bl	800689c <powf>
 80019de:	ee10 3a10 	vmov	r3, s0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fd5c 	bl	80004a0 <__aeabi_f2d>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4640      	mov	r0, r8
 80019ee:	4649      	mov	r1, r9
 80019f0:	f7fe fdae 	bl	8000550 <__aeabi_dmul>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4620      	mov	r0, r4
 80019fa:	4629      	mov	r1, r5
 80019fc:	f7fe fbf2 	bl	80001e4 <__adddf3>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4614      	mov	r4, r2
 8001a06:	461d      	mov	r5, r3
						+ 20.0*temp->coeff[5]*powf(time,3);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe fd47 	bl	80004a0 <__aeabi_f2d>
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	4b28      	ldr	r3, [pc, #160]	; (8001ab8 <QuinticEvaluator+0x35c>)
 8001a18:	f7fe fd9a 	bl	8000550 <__aeabi_dmul>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4690      	mov	r8, r2
 8001a22:	4699      	mov	r9, r3
 8001a24:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001a28:	ed97 0a03 	vldr	s0, [r7, #12]
 8001a2c:	f004 ff36 	bl	800689c <powf>
 8001a30:	ee10 3a10 	vmov	r3, s0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe fd33 	bl	80004a0 <__aeabi_f2d>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4640      	mov	r0, r8
 8001a40:	4649      	mov	r1, r9
 8001a42:	f7fe fd85 	bl	8000550 <__aeabi_dmul>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	4629      	mov	r1, r5
 8001a4e:	f7fe fbc9 	bl	80001e4 <__adddf3>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
	temp->current_acc = 2.0*temp->coeff[2]
 8001a56:	4610      	mov	r0, r2
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f7ff f829 	bl	8000ab0 <__aeabi_d2iz>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	615a      	str	r2, [r3, #20]
	if(time >= temp->TotalTime)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001a6a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a76:	da00      	bge.n	8001a7a <QuinticEvaluator+0x31e>
		temp->start_pos = temp->final_pos;
		temp->current_pos = temp->start_pos;
		temp->current_velo = 0;
		temp->current_acc = 0;
	}
}
 8001a78:	e00d      	b.n	8001a96 <QuinticEvaluator+0x33a>
		temp->start_pos = temp->final_pos;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	601a      	str	r2, [r3, #0]
		temp->current_pos = temp->start_pos;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	60da      	str	r2, [r3, #12]
		temp->current_velo = 0;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
		temp->current_acc = 0;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	615a      	str	r2, [r3, #20]
}
 8001a96:	bf00      	nop
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	ecbd 8b02 	vpop	{d8}
 8001aa0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001aa4:	40080000 	.word	0x40080000
 8001aa8:	40100000 	.word	0x40100000
 8001aac:	40140000 	.word	0x40140000
 8001ab0:	40180000 	.word	0x40180000
 8001ab4:	40280000 	.word	0x40280000
 8001ab8:	40340000 	.word	0x40340000

08001abc <QuinticRun>:
void QuinticRun(QuinticTraj* temp, int8_t ess, float32_t dt)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	ed87 0a01 	vstr	s0, [r7, #4]
 8001aca:	72fb      	strb	r3, [r7, #11]
	switch(temp->State)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d020      	beq.n	8001b18 <QuinticRun+0x5c>
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	dc3d      	bgt.n	8001b56 <QuinticRun+0x9a>
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d002      	beq.n	8001ae4 <QuinticRun+0x28>
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d00b      	beq.n	8001afa <QuinticRun+0x3e>
		{
			temp->State = Ready;
		}
		break;
	}
}
 8001ae2:	e038      	b.n	8001b56 <QuinticRun+0x9a>
		if(temp->start_pos != temp->final_pos)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d031      	beq.n	8001b54 <QuinticRun+0x98>
			temp->State = PreCal;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8001af8:	e02c      	b.n	8001b54 <QuinticRun+0x98>
		temp->time = 0;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	641a      	str	r2, [r3, #64]	; 0x40
		QuinticGenerator(temp,ess);
 8001b02:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001b06:	4619      	mov	r1, r3
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f7ff fce5 	bl	80014d8 <QuinticGenerator>
		temp->State = Run;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2202      	movs	r2, #2
 8001b12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8001b16:	e01e      	b.n	8001b56 <QuinticRun+0x9a>
		temp->time = temp->time + dt;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001b1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		QuinticEvaluator(temp);
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f7ff fe15 	bl	800175c <QuinticEvaluator>
		if(temp->time > temp->TotalTime)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001b3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b46:	dc00      	bgt.n	8001b4a <QuinticRun+0x8e>
		break;
 8001b48:	e005      	b.n	8001b56 <QuinticRun+0x9a>
			temp->State = Ready;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8001b52:	e000      	b.n	8001b56 <QuinticRun+0x9a>
		break;
 8001b54:	bf00      	nop
}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <InitReadEncoder>:
//{ //get time in micros
//	return __HAL_TIM_GET_COUNTER(&htim5)+ ReadEncoderParam._micros;
//}

void InitReadEncoder(ReadEncoder* Read, uint32_t samplingtime)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	6039      	str	r1, [r7, #0]
	Read->MotorSetDuty = 0;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
	Read->Pulse_Compare = 0;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	805a      	strh	r2, [r3, #2]
	Read->DIR = 0;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	711a      	strb	r2, [r3, #4]
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
	...

08001b88 <QEIGetFeedback>:
//	//Delay
//	QEIData.data[1] = QEIData.data[0];
//	QEIData.timestamp[1] = QEIData.timestamp[0];
//}
void QEIGetFeedback(QEI* temp, uint16_t Hz)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	807b      	strh	r3, [r7, #2]
	temp->QEIPosition = __HAL_TIM_GET_COUNTER(&htim2);
 8001b94:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <QEIGetFeedback+0x4c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	605a      	str	r2, [r3, #4]
	temp->QEIVelocity = (temp->QEIPosition - temp->QEIPosition_minus) * Hz;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	887a      	ldrh	r2, [r7, #2]
 8001bac:	fb02 f303 	mul.w	r3, r2, r3
 8001bb0:	ee07 3a90 	vmov	s15, r3
 8001bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	edc3 7a02 	vstr	s15, [r3, #8]
	temp->QEIPosition_minus = temp->QEIPosition;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	601a      	str	r2, [r3, #0]
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	20000438 	.word	0x20000438

08001bd8 <TraySetup>:
 */
#include "TrayLocalization.h"
#include "arm_math.h"

void TraySetup(Tray* temp, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	4608      	mov	r0, r1
 8001be2:	4611      	mov	r1, r2
 8001be4:	461a      	mov	r2, r3
 8001be6:	4603      	mov	r3, r0
 8001be8:	817b      	strh	r3, [r7, #10]
 8001bea:	460b      	mov	r3, r1
 8001bec:	813b      	strh	r3, [r7, #8]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	80fb      	strh	r3, [r7, #6]
	temp->Edge1_X = x1;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	897a      	ldrh	r2, [r7, #10]
 8001bf6:	801a      	strh	r2, [r3, #0]
	temp->Edge1_Y = y1;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	893a      	ldrh	r2, [r7, #8]
 8001bfc:	805a      	strh	r2, [r3, #2]
	temp->Edge2_X = x2;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	88fa      	ldrh	r2, [r7, #6]
 8001c02:	809a      	strh	r2, [r3, #4]
	temp->Edge2_Y = y2;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8b3a      	ldrh	r2, [r7, #24]
 8001c08:	80da      	strh	r2, [r3, #6]
}
 8001c0a:	bf00      	nop
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <TrayLocalization>:
void TrayLocalization(Tray* temp)
{
 8001c18:	b5b0      	push	{r4, r5, r7, lr}
 8001c1a:	ed2d 8b02 	vpush	{d8}
 8001c1e:	b08e      	sub	sp, #56	; 0x38
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
	uint16_t RefX_case1[3] = {10,30,50};
 8001c24:	4aba      	ldr	r2, [pc, #744]	; (8001f10 <TrayLocalization+0x2f8>)
 8001c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c2e:	6018      	str	r0, [r3, #0]
 8001c30:	3304      	adds	r3, #4
 8001c32:	8019      	strh	r1, [r3, #0]
	uint16_t RefY_case1[3] = {40*8192/120,25*8192/120,10*8192/120};
 8001c34:	4ab7      	ldr	r2, [pc, #732]	; (8001f14 <TrayLocalization+0x2fc>)
 8001c36:	f107 031c 	add.w	r3, r7, #28
 8001c3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c3e:	6018      	str	r0, [r3, #0]
 8001c40:	3304      	adds	r3, #4
 8001c42:	8019      	strh	r1, [r3, #0]

	uint16_t RefX_case2[3] = {10,25,40};
 8001c44:	4ab4      	ldr	r2, [pc, #720]	; (8001f18 <TrayLocalization+0x300>)
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c4e:	6018      	str	r0, [r3, #0]
 8001c50:	3304      	adds	r3, #4
 8001c52:	8019      	strh	r1, [r3, #0]
	uint16_t RefY_case2[3] = {50*8192/120,30*8192/120,10*8192/120};
 8001c54:	4ab1      	ldr	r2, [pc, #708]	; (8001f1c <TrayLocalization+0x304>)
 8001c56:	f107 030c 	add.w	r3, r7, #12
 8001c5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c5e:	6018      	str	r0, [r3, #0]
 8001c60:	3304      	adds	r3, #4
 8001c62:	8019      	strh	r1, [r3, #0]
	int16_t deltaX = (temp->Edge2_X - temp->Edge1_X)*8192/120;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	889b      	ldrh	r3, [r3, #4]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	035b      	lsls	r3, r3, #13
 8001c72:	4aab      	ldr	r2, [pc, #684]	; (8001f20 <TrayLocalization+0x308>)
 8001c74:	fb82 1203 	smull	r1, r2, r2, r3
 8001c78:	441a      	add	r2, r3
 8001c7a:	1192      	asrs	r2, r2, #6
 8001c7c:	17db      	asrs	r3, r3, #31
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	867b      	strh	r3, [r7, #50]	; 0x32
	int16_t deltaY = temp->Edge2_Y - temp->Edge1_Y;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	88da      	ldrh	r2, [r3, #6]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	885b      	ldrh	r3, [r3, #2]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	863b      	strh	r3, [r7, #48]	; 0x30
	float32_t lengh = sqrt(pow(deltaX,2) + pow(deltaY,2));
 8001c90:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fbf1 	bl	800047c <__aeabi_i2d>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	ed9f 1b9a 	vldr	d1, [pc, #616]	; 8001f08 <TrayLocalization+0x2f0>
 8001ca2:	ec43 2b10 	vmov	d0, r2, r3
 8001ca6:	f004 fd5d 	bl	8006764 <pow>
 8001caa:	ec55 4b10 	vmov	r4, r5, d0
 8001cae:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fbe2 	bl	800047c <__aeabi_i2d>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	ed9f 1b92 	vldr	d1, [pc, #584]	; 8001f08 <TrayLocalization+0x2f0>
 8001cc0:	ec43 2b10 	vmov	d0, r2, r3
 8001cc4:	f004 fd4e 	bl	8006764 <pow>
 8001cc8:	ec53 2b10 	vmov	r2, r3, d0
 8001ccc:	4620      	mov	r0, r4
 8001cce:	4629      	mov	r1, r5
 8001cd0:	f7fe fa88 	bl	80001e4 <__adddf3>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	ec43 2b17 	vmov	d7, r2, r3
 8001cdc:	eeb0 0a47 	vmov.f32	s0, s14
 8001ce0:	eef0 0a67 	vmov.f32	s1, s15
 8001ce4:	f004 fdae 	bl	8006844 <sqrt>
 8001ce8:	ec53 2b10 	vmov	r2, r3, d0
 8001cec:	4610      	mov	r0, r2
 8001cee:	4619      	mov	r1, r3
 8001cf0:	f7fe ff06 	bl	8000b00 <__aeabi_d2f>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	62fb      	str	r3, [r7, #44]	; 0x2c

	if((3276 <= lengh)&&(lengh <= 3550))
 8001cf8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001cfc:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8001f24 <TrayLocalization+0x30c>
 8001d00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d08:	db0d      	blt.n	8001d26 <TrayLocalization+0x10e>
 8001d0a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d0e:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8001f28 <TrayLocalization+0x310>
 8001d12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1a:	d804      	bhi.n	8001d26 <TrayLocalization+0x10e>
	{
		temp->Flag = 1;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8001d24:	e01a      	b.n	8001d5c <TrayLocalization+0x144>
	}
	else if ((3960 <= lengh)&&(lengh <= 4233))
 8001d26:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d2a:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8001f2c <TrayLocalization+0x314>
 8001d2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d36:	db0d      	blt.n	8001d54 <TrayLocalization+0x13c>
 8001d38:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d3c:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8001f30 <TrayLocalization+0x318>
 8001d40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d48:	d804      	bhi.n	8001d54 <TrayLocalization+0x13c>
	{
		temp->Flag = 2;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8001d52:	e003      	b.n	8001d5c <TrayLocalization+0x144>
	}
	else
	{
		temp->Flag = 0;//Lenght Error!!
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}
	float32_t theta;
	arm_atan2_f32(deltaY,deltaX,&theta);
 8001d5c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001d60:	ee07 3a90 	vmov	s15, r3
 8001d64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d68:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001d6c:	ee07 3a10 	vmov	s14, r3
 8001d70:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d74:	f107 0308 	add.w	r3, r7, #8
 8001d78:	4618      	mov	r0, r3
 8001d7a:	eef0 0a47 	vmov.f32	s1, s14
 8001d7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d82:	f000 ffe1 	bl	8002d48 <arm_atan2_f32>
	int8_t i;
	int8_t j;
	uint8_t ind = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	switch(temp->Flag)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f993 302d 	ldrsb.w	r3, [r3, #45]	; 0x2d
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	f000 80af 	beq.w	8001ef6 <TrayLocalization+0x2de>
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	f300 816a 	bgt.w	8002072 <TrayLocalization+0x45a>
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 8166 	beq.w	8002070 <TrayLocalization+0x458>
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	f040 8164 	bne.w	8002072 <TrayLocalization+0x45a>
	{
	case 1:
		for(i=0;i<3;i++)
 8001daa:	2300      	movs	r3, #0
 8001dac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001db0:	e09b      	b.n	8001eea <TrayLocalization+0x2d2>
		{
			for(j=0;j<3;j++)
 8001db2:	2300      	movs	r3, #0
 8001db4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001db8:	e08b      	b.n	8001ed2 <TrayLocalization+0x2ba>
			{
				temp->Holes_X[ind] = temp->Edge1_X
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	ee07 3a90 	vmov	s15, r3
								+ arm_cos_f32(theta)*RefX_case1[i]
 8001dc2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001dc6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dca:	eeb0 0a67 	vmov.f32	s0, s15
 8001dce:	f001 f9e1 	bl	8003194 <arm_cos_f32>
 8001dd2:	eeb0 7a40 	vmov.f32	s14, s0
 8001dd6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	3338      	adds	r3, #56	; 0x38
 8001dde:	443b      	add	r3, r7
 8001de0:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001de4:	ee07 3a90 	vmov	s15, r3
 8001de8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df0:	ee38 8a27 	vadd.f32	s16, s16, s15
								- arm_sin_f32(theta)*RefY_case1[j];
 8001df4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001df8:	eeb0 0a67 	vmov.f32	s0, s15
 8001dfc:	f001 fa50 	bl	80032a0 <arm_sin_f32>
 8001e00:	eeb0 7a40 	vmov.f32	s14, s0
 8001e04:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	3338      	adds	r3, #56	; 0x38
 8001e0c:	443b      	add	r3, r7
 8001e0e:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001e12:	ee07 3a90 	vmov	s15, r3
 8001e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e1e:	ee78 7a67 	vsub.f32	s15, s16, s15
				temp->Holes_X[ind] = temp->Edge1_X
 8001e22:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8001e26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e2a:	ee17 3a90 	vmov	r3, s15
 8001e2e:	b299      	uxth	r1, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3204      	adds	r2, #4
 8001e34:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				temp->Holes_Y[ind] = temp->Edge1_Y
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	885b      	ldrh	r3, [r3, #2]
 8001e3c:	ee07 3a90 	vmov	s15, r3
								+ arm_cos_f32(theta)*RefY_case1[j]
 8001e40:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001e44:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e48:	eeb0 0a67 	vmov.f32	s0, s15
 8001e4c:	f001 f9a2 	bl	8003194 <arm_cos_f32>
 8001e50:	eeb0 7a40 	vmov.f32	s14, s0
 8001e54:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	3338      	adds	r3, #56	; 0x38
 8001e5c:	443b      	add	r3, r7
 8001e5e:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001e62:	ee07 3a90 	vmov	s15, r3
 8001e66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e6e:	ee38 8a27 	vadd.f32	s16, s16, s15
								+ arm_sin_f32(theta)*RefX_case1[i];
 8001e72:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e76:	eeb0 0a67 	vmov.f32	s0, s15
 8001e7a:	f001 fa11 	bl	80032a0 <arm_sin_f32>
 8001e7e:	eeb0 7a40 	vmov.f32	s14, s0
 8001e82:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	3338      	adds	r3, #56	; 0x38
 8001e8a:	443b      	add	r3, r7
 8001e8c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001e90:	ee07 3a90 	vmov	s15, r3
 8001e94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e9c:	ee78 7a27 	vadd.f32	s15, s16, s15
				temp->Holes_Y[ind] = temp->Edge1_Y
 8001ea0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001ea4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ea8:	ee17 2a90 	vmov	r2, s15
 8001eac:	b291      	uxth	r1, r2
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	330c      	adds	r3, #12
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	4413      	add	r3, r2
 8001eb6:	460a      	mov	r2, r1
 8001eb8:	805a      	strh	r2, [r3, #2]
				ind += 1;
 8001eba:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			for(j=0;j<3;j++)
 8001ec4:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001ed2:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	f77f af6f 	ble.w	8001dba <TrayLocalization+0x1a2>
		for(i=0;i<3;i++)
 8001edc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001eea:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	f77f af5f 	ble.w	8001db2 <TrayLocalization+0x19a>
			}
		}
		break;
 8001ef4:	e0bd      	b.n	8002072 <TrayLocalization+0x45a>
	case 2:
		for(i=0;i<3;i++)
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001efc:	e0b2      	b.n	8002064 <TrayLocalization+0x44c>
		{
			for(j=0;j<3;j++)
 8001efe:	2300      	movs	r3, #0
 8001f00:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001f04:	e0a2      	b.n	800204c <TrayLocalization+0x434>
 8001f06:	bf00      	nop
 8001f08:	00000000 	.word	0x00000000
 8001f0c:	40000000 	.word	0x40000000
 8001f10:	08007e3c 	.word	0x08007e3c
 8001f14:	08007e44 	.word	0x08007e44
 8001f18:	08007e4c 	.word	0x08007e4c
 8001f1c:	08007e54 	.word	0x08007e54
 8001f20:	88888889 	.word	0x88888889
 8001f24:	454cc000 	.word	0x454cc000
 8001f28:	455de000 	.word	0x455de000
 8001f2c:	45778000 	.word	0x45778000
 8001f30:	45844800 	.word	0x45844800
			{
				temp->Holes_X[ind] = temp->Edge1_X
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	ee07 3a90 	vmov	s15, r3
								+ arm_cos_f32(theta)*RefX_case2[i]
 8001f3c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001f40:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f44:	eeb0 0a67 	vmov.f32	s0, s15
 8001f48:	f001 f924 	bl	8003194 <arm_cos_f32>
 8001f4c:	eeb0 7a40 	vmov.f32	s14, s0
 8001f50:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	3338      	adds	r3, #56	; 0x38
 8001f58:	443b      	add	r3, r7
 8001f5a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001f5e:	ee07 3a90 	vmov	s15, r3
 8001f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f6a:	ee38 8a27 	vadd.f32	s16, s16, s15
								- arm_sin_f32(theta)*RefY_case2[j];
 8001f6e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f72:	eeb0 0a67 	vmov.f32	s0, s15
 8001f76:	f001 f993 	bl	80032a0 <arm_sin_f32>
 8001f7a:	eeb0 7a40 	vmov.f32	s14, s0
 8001f7e:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	3338      	adds	r3, #56	; 0x38
 8001f86:	443b      	add	r3, r7
 8001f88:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8001f8c:	ee07 3a90 	vmov	s15, r3
 8001f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f98:	ee78 7a67 	vsub.f32	s15, s16, s15
				temp->Holes_X[ind] = temp->Edge1_X
 8001f9c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8001fa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fa4:	ee17 3a90 	vmov	r3, s15
 8001fa8:	b299      	uxth	r1, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3204      	adds	r2, #4
 8001fae:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				temp->Holes_Y[ind] = temp->Edge1_Y
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	885b      	ldrh	r3, [r3, #2]
 8001fb6:	ee07 3a90 	vmov	s15, r3
								+ arm_cos_f32(theta)*RefY_case2[j]
 8001fba:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001fbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc6:	f001 f8e5 	bl	8003194 <arm_cos_f32>
 8001fca:	eeb0 7a40 	vmov.f32	s14, s0
 8001fce:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	3338      	adds	r3, #56	; 0x38
 8001fd6:	443b      	add	r3, r7
 8001fd8:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8001fdc:	ee07 3a90 	vmov	s15, r3
 8001fe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fe8:	ee38 8a27 	vadd.f32	s16, s16, s15
								+ arm_sin_f32(theta)*RefX_case2[i];
 8001fec:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ff0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff4:	f001 f954 	bl	80032a0 <arm_sin_f32>
 8001ff8:	eeb0 7a40 	vmov.f32	s14, s0
 8001ffc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	3338      	adds	r3, #56	; 0x38
 8002004:	443b      	add	r3, r7
 8002006:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800200a:	ee07 3a90 	vmov	s15, r3
 800200e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002016:	ee78 7a27 	vadd.f32	s15, s16, s15
				temp->Holes_Y[ind] = temp->Edge1_Y
 800201a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800201e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002022:	ee17 2a90 	vmov	r2, s15
 8002026:	b291      	uxth	r1, r2
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	330c      	adds	r3, #12
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4413      	add	r3, r2
 8002030:	460a      	mov	r2, r1
 8002032:	805a      	strh	r2, [r3, #2]
				ind += 1;
 8002034:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002038:	3301      	adds	r3, #1
 800203a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			for(j=0;j<3;j++)
 800203e:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8002042:	b2db      	uxtb	r3, r3
 8002044:	3301      	adds	r3, #1
 8002046:	b2db      	uxtb	r3, r3
 8002048:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800204c:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8002050:	2b02      	cmp	r3, #2
 8002052:	f77f af6f 	ble.w	8001f34 <TrayLocalization+0x31c>
		for(i=0;i<3;i++)
 8002056:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800205a:	b2db      	uxtb	r3, r3
 800205c:	3301      	adds	r3, #1
 800205e:	b2db      	uxtb	r3, r3
 8002060:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002064:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002068:	2b02      	cmp	r3, #2
 800206a:	f77f af48 	ble.w	8001efe <TrayLocalization+0x2e6>
			}
		}
		break;
 800206e:	e000      	b.n	8002072 <TrayLocalization+0x45a>
	case 0:
		break;
 8002070:	bf00      	nop
	}
}
 8002072:	bf00      	nop
 8002074:	3738      	adds	r7, #56	; 0x38
 8002076:	46bd      	mov	sp, r7
 8002078:	ecbd 8b02 	vpop	{d8}
 800207c:	bdb0      	pop	{r4, r5, r7, pc}
 800207e:	bf00      	nop

08002080 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08a      	sub	sp, #40	; 0x28
 8002084:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002086:	f107 0314 	add.w	r3, r7, #20
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]
 8002090:	609a      	str	r2, [r3, #8]
 8002092:	60da      	str	r2, [r3, #12]
 8002094:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	4b41      	ldr	r3, [pc, #260]	; (80021a0 <MX_GPIO_Init+0x120>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a40      	ldr	r2, [pc, #256]	; (80021a0 <MX_GPIO_Init+0x120>)
 80020a0:	f043 0304 	orr.w	r3, r3, #4
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4b3e      	ldr	r3, [pc, #248]	; (80021a0 <MX_GPIO_Init+0x120>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	4b3a      	ldr	r3, [pc, #232]	; (80021a0 <MX_GPIO_Init+0x120>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a39      	ldr	r2, [pc, #228]	; (80021a0 <MX_GPIO_Init+0x120>)
 80020bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b37      	ldr	r3, [pc, #220]	; (80021a0 <MX_GPIO_Init+0x120>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	4b33      	ldr	r3, [pc, #204]	; (80021a0 <MX_GPIO_Init+0x120>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	4a32      	ldr	r2, [pc, #200]	; (80021a0 <MX_GPIO_Init+0x120>)
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	6313      	str	r3, [r2, #48]	; 0x30
 80020de:	4b30      	ldr	r3, [pc, #192]	; (80021a0 <MX_GPIO_Init+0x120>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	607b      	str	r3, [r7, #4]
 80020ee:	4b2c      	ldr	r3, [pc, #176]	; (80021a0 <MX_GPIO_Init+0x120>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a2b      	ldr	r2, [pc, #172]	; (80021a0 <MX_GPIO_Init+0x120>)
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b29      	ldr	r3, [pc, #164]	; (80021a0 <MX_GPIO_Init+0x120>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	607b      	str	r3, [r7, #4]
 8002104:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002106:	2200      	movs	r2, #0
 8002108:	2120      	movs	r1, #32
 800210a:	4826      	ldr	r0, [pc, #152]	; (80021a4 <MX_GPIO_Init+0x124>)
 800210c:	f002 f948 	bl	80043a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8002110:	2200      	movs	r2, #0
 8002112:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002116:	4824      	ldr	r0, [pc, #144]	; (80021a8 <MX_GPIO_Init+0x128>)
 8002118:	f002 f942 	bl	80043a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800211c:	2200      	movs	r2, #0
 800211e:	2140      	movs	r1, #64	; 0x40
 8002120:	4822      	ldr	r0, [pc, #136]	; (80021ac <MX_GPIO_Init+0x12c>)
 8002122:	f002 f93d 	bl	80043a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002126:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800212a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800212c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002130:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	4619      	mov	r1, r3
 800213c:	481b      	ldr	r0, [pc, #108]	; (80021ac <MX_GPIO_Init+0x12c>)
 800213e:	f001 ffab 	bl	8004098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002142:	2320      	movs	r3, #32
 8002144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002146:	2301      	movs	r3, #1
 8002148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214e:	2300      	movs	r3, #0
 8002150:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002152:	f107 0314 	add.w	r3, r7, #20
 8002156:	4619      	mov	r1, r3
 8002158:	4812      	ldr	r0, [pc, #72]	; (80021a4 <MX_GPIO_Init+0x124>)
 800215a:	f001 ff9d 	bl	8004098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800215e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002164:	2301      	movs	r3, #1
 8002166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216c:	2300      	movs	r3, #0
 800216e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002170:	f107 0314 	add.w	r3, r7, #20
 8002174:	4619      	mov	r1, r3
 8002176:	480c      	ldr	r0, [pc, #48]	; (80021a8 <MX_GPIO_Init+0x128>)
 8002178:	f001 ff8e 	bl	8004098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800217c:	2340      	movs	r3, #64	; 0x40
 800217e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002180:	2301      	movs	r3, #1
 8002182:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002184:	2300      	movs	r3, #0
 8002186:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002188:	2300      	movs	r3, #0
 800218a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800218c:	f107 0314 	add.w	r3, r7, #20
 8002190:	4619      	mov	r1, r3
 8002192:	4806      	ldr	r0, [pc, #24]	; (80021ac <MX_GPIO_Init+0x12c>)
 8002194:	f001 ff80 	bl	8004098 <HAL_GPIO_Init>

}
 8002198:	bf00      	nop
 800219a:	3728      	adds	r7, #40	; 0x28
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40020000 	.word	0x40020000
 80021a8:	40020400 	.word	0x40020400
 80021ac:	40020800 	.word	0x40020800

080021b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021b4:	4b12      	ldr	r3, [pc, #72]	; (8002200 <MX_I2C1_Init+0x50>)
 80021b6:	4a13      	ldr	r2, [pc, #76]	; (8002204 <MX_I2C1_Init+0x54>)
 80021b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80021ba:	4b11      	ldr	r3, [pc, #68]	; (8002200 <MX_I2C1_Init+0x50>)
 80021bc:	4a12      	ldr	r2, [pc, #72]	; (8002208 <MX_I2C1_Init+0x58>)
 80021be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021c0:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <MX_I2C1_Init+0x50>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021c6:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <MX_I2C1_Init+0x50>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021cc:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <MX_I2C1_Init+0x50>)
 80021ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021d4:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <MX_I2C1_Init+0x50>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021da:	4b09      	ldr	r3, [pc, #36]	; (8002200 <MX_I2C1_Init+0x50>)
 80021dc:	2200      	movs	r2, #0
 80021de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021e0:	4b07      	ldr	r3, [pc, #28]	; (8002200 <MX_I2C1_Init+0x50>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021e6:	4b06      	ldr	r3, [pc, #24]	; (8002200 <MX_I2C1_Init+0x50>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021ec:	4804      	ldr	r0, [pc, #16]	; (8002200 <MX_I2C1_Init+0x50>)
 80021ee:	f002 f8f1 	bl	80043d4 <HAL_I2C_Init>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80021f8:	f000 fa38 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021fc:	bf00      	nop
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	2000009c 	.word	0x2000009c
 8002204:	40005400 	.word	0x40005400
 8002208:	00061a80 	.word	0x00061a80

0800220c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08a      	sub	sp, #40	; 0x28
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a19      	ldr	r2, [pc, #100]	; (8002290 <HAL_I2C_MspInit+0x84>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d12b      	bne.n	8002286 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	4b18      	ldr	r3, [pc, #96]	; (8002294 <HAL_I2C_MspInit+0x88>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	4a17      	ldr	r2, [pc, #92]	; (8002294 <HAL_I2C_MspInit+0x88>)
 8002238:	f043 0302 	orr.w	r3, r3, #2
 800223c:	6313      	str	r3, [r2, #48]	; 0x30
 800223e:	4b15      	ldr	r3, [pc, #84]	; (8002294 <HAL_I2C_MspInit+0x88>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800224a:	23c0      	movs	r3, #192	; 0xc0
 800224c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800224e:	2312      	movs	r3, #18
 8002250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002256:	2303      	movs	r3, #3
 8002258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800225a:	2304      	movs	r3, #4
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225e:	f107 0314 	add.w	r3, r7, #20
 8002262:	4619      	mov	r1, r3
 8002264:	480c      	ldr	r0, [pc, #48]	; (8002298 <HAL_I2C_MspInit+0x8c>)
 8002266:	f001 ff17 	bl	8004098 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	4b09      	ldr	r3, [pc, #36]	; (8002294 <HAL_I2C_MspInit+0x88>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	4a08      	ldr	r2, [pc, #32]	; (8002294 <HAL_I2C_MspInit+0x88>)
 8002274:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002278:	6413      	str	r3, [r2, #64]	; 0x40
 800227a:	4b06      	ldr	r3, [pc, #24]	; (8002294 <HAL_I2C_MspInit+0x88>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002286:	bf00      	nop
 8002288:	3728      	adds	r7, #40	; 0x28
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40005400 	.word	0x40005400
 8002294:	40023800 	.word	0x40023800
 8002298:	40020400 	.word	0x40020400

0800229c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022a2:	f001 fd75 	bl	8003d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022a6:	f000 f89b 	bl	80023e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022aa:	f7ff fee9 	bl	8002080 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80022ae:	f000 fcaf 	bl	8002c10 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80022b2:	f000 fa63 	bl	800277c <MX_TIM2_Init>
  MX_TIM5_Init();
 80022b6:	f000 fb79 	bl	80029ac <MX_TIM5_Init>
  MX_TIM3_Init();
 80022ba:	f000 fab3 	bl	8002824 <MX_TIM3_Init>
  MX_I2C1_Init();
 80022be:	f7ff ff77 	bl	80021b0 <MX_I2C1_Init>
  MX_TIM4_Init();
 80022c2:	f000 fb25 	bl	8002910 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  //Setup Initial vaules
  InitKalmanStruct(&KF,Var_Q,Var_R);
 80022c6:	4b31      	ldr	r3, [pc, #196]	; (800238c <main+0xf0>)
 80022c8:	edd3 7a00 	vldr	s15, [r3]
 80022cc:	4b30      	ldr	r3, [pc, #192]	; (8002390 <main+0xf4>)
 80022ce:	ed93 7a00 	vldr	s14, [r3]
 80022d2:	eef0 0a47 	vmov.f32	s1, s14
 80022d6:	eeb0 0a67 	vmov.f32	s0, s15
 80022da:	482e      	ldr	r0, [pc, #184]	; (8002394 <main+0xf8>)
 80022dc:	f7fe fde2 	bl	8000ea4 <InitKalmanStruct>

  InitReadEncoder(&ReadEncoderParam, 1000);
 80022e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80022e4:	482c      	ldr	r0, [pc, #176]	; (8002398 <main+0xfc>)
 80022e6:	f7ff fc3a 	bl	8001b5e <InitReadEncoder>

  QuinticSetup(&QuinticVar, vmax, amax);
 80022ea:	4b2c      	ldr	r3, [pc, #176]	; (800239c <main+0x100>)
 80022ec:	edd3 7a00 	vldr	s15, [r3]
 80022f0:	4b2b      	ldr	r3, [pc, #172]	; (80023a0 <main+0x104>)
 80022f2:	ed93 7a00 	vldr	s14, [r3]
 80022f6:	eef0 0a47 	vmov.f32	s1, s14
 80022fa:	eeb0 0a67 	vmov.f32	s0, s15
 80022fe:	4829      	ldr	r0, [pc, #164]	; (80023a4 <main+0x108>)
 8002300:	f7ff f8c6 	bl	8001490 <QuinticSetup>

  PIDSetup(&PositionLoop, 0.0095, 1.005, 0.005, 10);
 8002304:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8002308:	ed9f 1a27 	vldr	s2, [pc, #156]	; 80023a8 <main+0x10c>
 800230c:	eddf 0a27 	vldr	s1, [pc, #156]	; 80023ac <main+0x110>
 8002310:	ed9f 0a27 	vldr	s0, [pc, #156]	; 80023b0 <main+0x114>
 8002314:	4827      	ldr	r0, [pc, #156]	; (80023b4 <main+0x118>)
 8002316:	f7fe ffbb 	bl	8001290 <PIDSetup>
  PIDSetup(&VelocityLoop, 3.0, 0.00001, 0, 0.00003);
 800231a:	eddf 1a27 	vldr	s3, [pc, #156]	; 80023b8 <main+0x11c>
 800231e:	ed9f 1a27 	vldr	s2, [pc, #156]	; 80023bc <main+0x120>
 8002322:	eddf 0a27 	vldr	s1, [pc, #156]	; 80023c0 <main+0x124>
 8002326:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800232a:	4826      	ldr	r0, [pc, #152]	; (80023c4 <main+0x128>)
 800232c:	f7fe ffb0 	bl	8001290 <PIDSetup>

  TraySetup(&PickTray, 4644, 37399, 8774, 37358);
 8002330:	f249 13ee 	movw	r3, #37358	; 0x91ee
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	f242 2346 	movw	r3, #8774	; 0x2246
 800233a:	f249 2217 	movw	r2, #37399	; 0x9217
 800233e:	f241 2124 	movw	r1, #4644	; 0x1224
 8002342:	4821      	ldr	r0, [pc, #132]	; (80023c8 <main+0x12c>)
 8002344:	f7ff fc48 	bl	8001bd8 <TraySetup>
  TraySetup(&PlaceTray, 15052, 19020, 17984, 17326);
 8002348:	f244 33ae 	movw	r3, #17326	; 0x43ae
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	f244 6340 	movw	r3, #17984	; 0x4640
 8002352:	f644 224c 	movw	r2, #19020	; 0x4a4c
 8002356:	f643 21cc 	movw	r1, #15052	; 0x3acc
 800235a:	481c      	ldr	r0, [pc, #112]	; (80023cc <main+0x130>)
 800235c:	f7ff fc3c 	bl	8001bd8 <TraySetup>
  TrayLocalization(&PickTray);
 8002360:	4819      	ldr	r0, [pc, #100]	; (80023c8 <main+0x12c>)
 8002362:	f7ff fc59 	bl	8001c18 <TrayLocalization>
  TrayLocalization(&PlaceTray);
 8002366:	4819      	ldr	r0, [pc, #100]	; (80023cc <main+0x130>)
 8002368:	f7ff fc56 	bl	8001c18 <TrayLocalization>
  //Timers Start
  HAL_TIM_Base_Start_IT(&htim4);
 800236c:	4818      	ldr	r0, [pc, #96]	; (80023d0 <main+0x134>)
 800236e:	f002 fe5d 	bl	800502c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2);  //Start QEI
 8002372:	2104      	movs	r1, #4
 8002374:	4817      	ldr	r0, [pc, #92]	; (80023d4 <main+0x138>)
 8002376:	f003 f86b 	bl	8005450 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);//Start PWM
 800237a:	2108      	movs	r1, #8
 800237c:	4816      	ldr	r0, [pc, #88]	; (80023d8 <main+0x13c>)
 800237e:	f002 ff11 	bl	80051a4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8002382:	4816      	ldr	r0, [pc, #88]	; (80023dc <main+0x140>)
 8002384:	f002 fe52 	bl	800502c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002388:	e7fe      	b.n	8002388 <main+0xec>
 800238a:	bf00      	nop
 800238c:	20000008 	.word	0x20000008
 8002390:	2000000c 	.word	0x2000000c
 8002394:	200001bc 	.word	0x200001bc
 8002398:	200000f8 	.word	0x200000f8
 800239c:	20000000 	.word	0x20000000
 80023a0:	20000004 	.word	0x20000004
 80023a4:	2000010c 	.word	0x2000010c
 80023a8:	3ba3d70a 	.word	0x3ba3d70a
 80023ac:	3f80a3d7 	.word	0x3f80a3d7
 80023b0:	3c1ba5e3 	.word	0x3c1ba5e3
 80023b4:	2000015c 	.word	0x2000015c
 80023b8:	37fba882 	.word	0x37fba882
 80023bc:	00000000 	.word	0x00000000
 80023c0:	3727c5ac 	.word	0x3727c5ac
 80023c4:	2000018c 	.word	0x2000018c
 80023c8:	200003d8 	.word	0x200003d8
 80023cc:	20000408 	.word	0x20000408
 80023d0:	200004c8 	.word	0x200004c8
 80023d4:	20000438 	.word	0x20000438
 80023d8:	20000480 	.word	0x20000480
 80023dc:	20000510 	.word	0x20000510

080023e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b094      	sub	sp, #80	; 0x50
 80023e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023e6:	f107 0320 	add.w	r3, r7, #32
 80023ea:	2230      	movs	r2, #48	; 0x30
 80023ec:	2100      	movs	r1, #0
 80023ee:	4618      	mov	r0, r3
 80023f0:	f004 f9b0 	bl	8006754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023f4:	f107 030c 	add.w	r3, r7, #12
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002404:	2300      	movs	r3, #0
 8002406:	60bb      	str	r3, [r7, #8]
 8002408:	4b27      	ldr	r3, [pc, #156]	; (80024a8 <SystemClock_Config+0xc8>)
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240c:	4a26      	ldr	r2, [pc, #152]	; (80024a8 <SystemClock_Config+0xc8>)
 800240e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002412:	6413      	str	r3, [r2, #64]	; 0x40
 8002414:	4b24      	ldr	r3, [pc, #144]	; (80024a8 <SystemClock_Config+0xc8>)
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002420:	2300      	movs	r3, #0
 8002422:	607b      	str	r3, [r7, #4]
 8002424:	4b21      	ldr	r3, [pc, #132]	; (80024ac <SystemClock_Config+0xcc>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a20      	ldr	r2, [pc, #128]	; (80024ac <SystemClock_Config+0xcc>)
 800242a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	4b1e      	ldr	r3, [pc, #120]	; (80024ac <SystemClock_Config+0xcc>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002438:	607b      	str	r3, [r7, #4]
 800243a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800243c:	2302      	movs	r3, #2
 800243e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002440:	2301      	movs	r3, #1
 8002442:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002444:	2310      	movs	r3, #16
 8002446:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002448:	2302      	movs	r3, #2
 800244a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800244c:	2300      	movs	r3, #0
 800244e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002450:	2308      	movs	r3, #8
 8002452:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002454:	2364      	movs	r3, #100	; 0x64
 8002456:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002458:	2302      	movs	r3, #2
 800245a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800245c:	2304      	movs	r3, #4
 800245e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002460:	f107 0320 	add.w	r3, r7, #32
 8002464:	4618      	mov	r0, r3
 8002466:	f002 f8f9 	bl	800465c <HAL_RCC_OscConfig>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002470:	f000 f8fc 	bl	800266c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002474:	230f      	movs	r3, #15
 8002476:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002478:	2302      	movs	r3, #2
 800247a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002484:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002486:	2300      	movs	r3, #0
 8002488:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800248a:	f107 030c 	add.w	r3, r7, #12
 800248e:	2103      	movs	r1, #3
 8002490:	4618      	mov	r0, r3
 8002492:	f002 fb5b 	bl	8004b4c <HAL_RCC_ClockConfig>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800249c:	f000 f8e6 	bl	800266c <Error_Handler>
  }
}
 80024a0:	bf00      	nop
 80024a2:	3750      	adds	r7, #80	; 0x50
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40007000 	.word	0x40007000

080024b0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a60      	ldr	r2, [pc, #384]	; (800263c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	f040 80b4 	bne.w	800262a <HAL_TIM_PeriodElapsedCallback+0x17a>
	{
		switch(OpState)
 80024c2:	4b5f      	ldr	r3, [pc, #380]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b06      	cmp	r3, #6
 80024c8:	f200 80b4 	bhi.w	8002634 <HAL_TIM_PeriodElapsedCallback+0x184>
 80024cc:	a201      	add	r2, pc, #4	; (adr r2, 80024d4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80024ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d2:	bf00      	nop
 80024d4:	080024f1 	.word	0x080024f1
 80024d8:	0800262f 	.word	0x0800262f
 80024dc:	0800262f 	.word	0x0800262f
 80024e0:	0800262f 	.word	0x0800262f
 80024e4:	0800262f 	.word	0x0800262f
 80024e8:	080024f9 	.word	0x080024f9
 80024ec:	08002599 	.word	0x08002599
		{
		case Init:
			OpState = ControlLoop;
 80024f0:	4b53      	ldr	r3, [pc, #332]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80024f2:	2205      	movs	r2, #5
 80024f4:	701a      	strb	r2, [r3, #0]
			break;
 80024f6:	e09d      	b.n	8002634 <HAL_TIM_PeriodElapsedCallback+0x184>
		case SetTray:
			break;
		case PreProcess:
			break;
		case ControlLoop:
			QEIGetFeedback(&QEIData, 2500);
 80024f8:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80024fc:	4851      	ldr	r0, [pc, #324]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80024fe:	f7ff fb43 	bl	8001b88 <QEIGetFeedback>
			KF.z = QEIData.QEIVelocity;
 8002502:	4b50      	ldr	r3, [pc, #320]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	4a50      	ldr	r2, [pc, #320]	; (8002648 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002508:	65d3      	str	r3, [r2, #92]	; 0x5c
			kalman_filter();
 800250a:	f7fe fe25 	bl	8001158 <kalman_filter>
			ZEstimateVelocity = KF.x_hat[1];
 800250e:	4b4e      	ldr	r3, [pc, #312]	; (8002648 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	4a4e      	ldr	r2, [pc, #312]	; (800264c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002514:	6013      	str	r3, [r2, #0]
			QuinticRun(&QuinticVar,PositionLoop.ESS,0.0004);
 8002516:	4b4e      	ldr	r3, [pc, #312]	; (8002650 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002518:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 800251c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8002654 <HAL_TIM_PeriodElapsedCallback+0x1a4>
 8002520:	4619      	mov	r1, r3
 8002522:	484d      	ldr	r0, [pc, #308]	; (8002658 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002524:	f7ff faca 	bl	8001abc <QuinticRun>
			CascadeLoop(&PositionLoop, &VelocityLoop, QEIData.QEIPosition, KF.x_hat[1],&QuinticVar, 3);
 8002528:	4b46      	ldr	r3, [pc, #280]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	ee07 3a90 	vmov	s15, r3
 8002530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002534:	4b44      	ldr	r3, [pc, #272]	; (8002648 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002536:	ed93 7a01 	vldr	s14, [r3, #4]
 800253a:	eeb0 1a08 	vmov.f32	s2, #8	; 0x40400000  3.0
 800253e:	4a46      	ldr	r2, [pc, #280]	; (8002658 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002540:	eef0 0a47 	vmov.f32	s1, s14
 8002544:	eeb0 0a67 	vmov.f32	s0, s15
 8002548:	4944      	ldr	r1, [pc, #272]	; (800265c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800254a:	4841      	ldr	r0, [pc, #260]	; (8002650 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800254c:	f7fe ff49 	bl	80013e2 <CascadeLoop>
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,abs(VelocityLoop.U));
 8002550:	4b42      	ldr	r3, [pc, #264]	; (800265c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002558:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800255c:	4b40      	ldr	r3, [pc, #256]	; (8002660 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, VelocityLoop.MotorDir);
 8002562:	4b3e      	ldr	r3, [pc, #248]	; (800265c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002564:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8002568:	b2db      	uxtb	r3, r3
 800256a:	461a      	mov	r2, r3
 800256c:	2140      	movs	r1, #64	; 0x40
 800256e:	483d      	ldr	r0, [pc, #244]	; (8002664 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002570:	f001 ff16 	bl	80043a0 <HAL_GPIO_WritePin>
			if(PositionLoop.Error == PositionLoop.Error_minus)
 8002574:	4b36      	ldr	r3, [pc, #216]	; (8002650 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002576:	ed93 7a06 	vldr	s14, [r3, #24]
 800257a:	4b35      	ldr	r3, [pc, #212]	; (8002650 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800257c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002580:	eeb4 7a67 	vcmp.f32	s14, s15
 8002584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002588:	d153      	bne.n	8002632 <HAL_TIM_PeriodElapsedCallback+0x182>
			{
				OpState = Waiting;
 800258a:	4b2d      	ldr	r3, [pc, #180]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800258c:	2206      	movs	r2, #6
 800258e:	701a      	strb	r2, [r3, #0]
				OpVar.waitTime = 0;
 8002590:	4b35      	ldr	r3, [pc, #212]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002592:	2200      	movs	r2, #0
 8002594:	801a      	strh	r2, [r3, #0]
			}
			break;
 8002596:	e04c      	b.n	8002632 <HAL_TIM_PeriodElapsedCallback+0x182>
		case Waiting:
			QEIGetFeedback(&QEIData, 2500);
 8002598:	f640 11c4 	movw	r1, #2500	; 0x9c4
 800259c:	4829      	ldr	r0, [pc, #164]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800259e:	f7ff faf3 	bl	8001b88 <QEIGetFeedback>
			KF.z = QEIData.QEIVelocity;
 80025a2:	4b28      	ldr	r3, [pc, #160]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	4a28      	ldr	r2, [pc, #160]	; (8002648 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80025a8:	65d3      	str	r3, [r2, #92]	; 0x5c
			kalman_filter();
 80025aa:	f7fe fdd5 	bl	8001158 <kalman_filter>
			ZEstimateVelocity = KF.x_hat[1];
 80025ae:	4b26      	ldr	r3, [pc, #152]	; (8002648 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	4a26      	ldr	r2, [pc, #152]	; (800264c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80025b4:	6013      	str	r3, [r2, #0]
			CascadeLoop(&PositionLoop, &VelocityLoop, QEIData.QEIPosition, KF.x_hat[1],&QuinticVar, 3);
 80025b6:	4b23      	ldr	r3, [pc, #140]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	ee07 3a90 	vmov	s15, r3
 80025be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025c2:	4b21      	ldr	r3, [pc, #132]	; (8002648 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80025c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80025c8:	eeb0 1a08 	vmov.f32	s2, #8	; 0x40400000  3.0
 80025cc:	4a22      	ldr	r2, [pc, #136]	; (8002658 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80025ce:	eef0 0a47 	vmov.f32	s1, s14
 80025d2:	eeb0 0a67 	vmov.f32	s0, s15
 80025d6:	4921      	ldr	r1, [pc, #132]	; (800265c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80025d8:	481d      	ldr	r0, [pc, #116]	; (8002650 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80025da:	f7fe ff02 	bl	80013e2 <CascadeLoop>
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,abs(VelocityLoop.U));
 80025de:	4b1f      	ldr	r3, [pc, #124]	; (800265c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80025e6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80025ea:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, VelocityLoop.MotorDir);
 80025f0:	4b1a      	ldr	r3, [pc, #104]	; (800265c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80025f2:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	461a      	mov	r2, r3
 80025fa:	2140      	movs	r1, #64	; 0x40
 80025fc:	4819      	ldr	r0, [pc, #100]	; (8002664 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80025fe:	f001 fecf 	bl	80043a0 <HAL_GPIO_WritePin>
			if(OpVar.waitTime <= 4999)
 8002602:	4b19      	ldr	r3, [pc, #100]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	f241 3287 	movw	r2, #4999	; 0x1387
 800260a:	4293      	cmp	r3, r2
 800260c:	d809      	bhi.n	8002622 <HAL_TIM_PeriodElapsedCallback+0x172>
			{
				OpState = ControlLoop;
 800260e:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002610:	2205      	movs	r2, #5
 8002612:	701a      	strb	r2, [r3, #0]
				OpVar.waitTime += 1;
 8002614:	4b14      	ldr	r3, [pc, #80]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	3301      	adds	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	4b12      	ldr	r3, [pc, #72]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800261e:	801a      	strh	r2, [r3, #0]
			}
			else
			{
				OpState = ControlLoop;
			}
			break;
 8002620:	e008      	b.n	8002634 <HAL_TIM_PeriodElapsedCallback+0x184>
				OpState = ControlLoop;
 8002622:	4b07      	ldr	r3, [pc, #28]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002624:	2205      	movs	r2, #5
 8002626:	701a      	strb	r2, [r3, #0]
			break;
 8002628:	e004      	b.n	8002634 <HAL_TIM_PeriodElapsedCallback+0x184>
		}


	}
 800262a:	bf00      	nop
 800262c:	e002      	b.n	8002634 <HAL_TIM_PeriodElapsedCallback+0x184>
			break;
 800262e:	bf00      	nop
 8002630:	e000      	b.n	8002634 <HAL_TIM_PeriodElapsedCallback+0x184>
			break;
 8002632:	bf00      	nop
}
 8002634:	bf00      	nop
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	200004c8 	.word	0x200004c8
 8002640:	200000f0 	.word	0x200000f0
 8002644:	20000100 	.word	0x20000100
 8002648:	200001bc 	.word	0x200001bc
 800264c:	200003d4 	.word	0x200003d4
 8002650:	2000015c 	.word	0x2000015c
 8002654:	39d1b717 	.word	0x39d1b717
 8002658:	2000010c 	.word	0x2000010c
 800265c:	2000018c 	.word	0x2000018c
 8002660:	20000480 	.word	0x20000480
 8002664:	40020800 	.word	0x40020800
 8002668:	200000f4 	.word	0x200000f4

0800266c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002670:	b672      	cpsid	i
}
 8002672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002674:	e7fe      	b.n	8002674 <Error_Handler+0x8>
	...

08002678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	607b      	str	r3, [r7, #4]
 8002682:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <HAL_MspInit+0x4c>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	4a0f      	ldr	r2, [pc, #60]	; (80026c4 <HAL_MspInit+0x4c>)
 8002688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800268c:	6453      	str	r3, [r2, #68]	; 0x44
 800268e:	4b0d      	ldr	r3, [pc, #52]	; (80026c4 <HAL_MspInit+0x4c>)
 8002690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002696:	607b      	str	r3, [r7, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	603b      	str	r3, [r7, #0]
 800269e:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <HAL_MspInit+0x4c>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	4a08      	ldr	r2, [pc, #32]	; (80026c4 <HAL_MspInit+0x4c>)
 80026a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a8:	6413      	str	r3, [r2, #64]	; 0x40
 80026aa:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_MspInit+0x4c>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b2:	603b      	str	r3, [r7, #0]
 80026b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80026b6:	2007      	movs	r0, #7
 80026b8:	f001 fcac 	bl	8004014 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40023800 	.word	0x40023800

080026c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026cc:	e7fe      	b.n	80026cc <NMI_Handler+0x4>

080026ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ce:	b480      	push	{r7}
 80026d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026d2:	e7fe      	b.n	80026d2 <HardFault_Handler+0x4>

080026d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026d8:	e7fe      	b.n	80026d8 <MemManage_Handler+0x4>

080026da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026da:	b480      	push	{r7}
 80026dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026de:	e7fe      	b.n	80026de <BusFault_Handler+0x4>

080026e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026e4:	e7fe      	b.n	80026e4 <UsageFault_Handler+0x4>

080026e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026e6:	b480      	push	{r7}
 80026e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026f8:	bf00      	nop
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002702:	b480      	push	{r7}
 8002704:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002706:	bf00      	nop
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002714:	f001 fb8e 	bl	8003e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002718:	bf00      	nop
 800271a:	bd80      	pop	{r7, pc}

0800271c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002720:	4802      	ldr	r0, [pc, #8]	; (800272c <TIM2_IRQHandler+0x10>)
 8002722:	f002 ff23 	bl	800556c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20000438 	.word	0x20000438

08002730 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002734:	4802      	ldr	r0, [pc, #8]	; (8002740 <TIM3_IRQHandler+0x10>)
 8002736:	f002 ff19 	bl	800556c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20000480 	.word	0x20000480

08002744 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002748:	4802      	ldr	r0, [pc, #8]	; (8002754 <TIM4_IRQHandler+0x10>)
 800274a:	f002 ff0f 	bl	800556c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	200004c8 	.word	0x200004c8

08002758 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800275c:	4b06      	ldr	r3, [pc, #24]	; (8002778 <SystemInit+0x20>)
 800275e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002762:	4a05      	ldr	r2, [pc, #20]	; (8002778 <SystemInit+0x20>)
 8002764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08c      	sub	sp, #48	; 0x30
 8002780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002782:	f107 030c 	add.w	r3, r7, #12
 8002786:	2224      	movs	r2, #36	; 0x24
 8002788:	2100      	movs	r1, #0
 800278a:	4618      	mov	r0, r3
 800278c:	f003 ffe2 	bl	8006754 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002790:	1d3b      	adds	r3, r7, #4
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002798:	4b21      	ldr	r3, [pc, #132]	; (8002820 <MX_TIM2_Init+0xa4>)
 800279a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800279e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80027a0:	4b1f      	ldr	r3, [pc, #124]	; (8002820 <MX_TIM2_Init+0xa4>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027a6:	4b1e      	ldr	r3, [pc, #120]	; (8002820 <MX_TIM2_Init+0xa4>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80027ac:	4b1c      	ldr	r3, [pc, #112]	; (8002820 <MX_TIM2_Init+0xa4>)
 80027ae:	f04f 32ff 	mov.w	r2, #4294967295
 80027b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027b4:	4b1a      	ldr	r3, [pc, #104]	; (8002820 <MX_TIM2_Init+0xa4>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ba:	4b19      	ldr	r3, [pc, #100]	; (8002820 <MX_TIM2_Init+0xa4>)
 80027bc:	2200      	movs	r2, #0
 80027be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80027c0:	2303      	movs	r3, #3
 80027c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80027c4:	2300      	movs	r3, #0
 80027c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80027c8:	2301      	movs	r3, #1
 80027ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80027cc:	2300      	movs	r3, #0
 80027ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80027d4:	2300      	movs	r3, #0
 80027d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80027d8:	2301      	movs	r3, #1
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80027dc:	2300      	movs	r3, #0
 80027de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80027e4:	f107 030c 	add.w	r3, r7, #12
 80027e8:	4619      	mov	r1, r3
 80027ea:	480d      	ldr	r0, [pc, #52]	; (8002820 <MX_TIM2_Init+0xa4>)
 80027ec:	f002 fd8a 	bl	8005304 <HAL_TIM_Encoder_Init>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80027f6:	f7ff ff39 	bl	800266c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027fa:	2300      	movs	r3, #0
 80027fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027fe:	2300      	movs	r3, #0
 8002800:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002802:	1d3b      	adds	r3, r7, #4
 8002804:	4619      	mov	r1, r3
 8002806:	4806      	ldr	r0, [pc, #24]	; (8002820 <MX_TIM2_Init+0xa4>)
 8002808:	f003 fc36 	bl	8006078 <HAL_TIMEx_MasterConfigSynchronization>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002812:	f7ff ff2b 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002816:	bf00      	nop
 8002818:	3730      	adds	r7, #48	; 0x30
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20000438 	.word	0x20000438

08002824 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b08e      	sub	sp, #56	; 0x38
 8002828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800282a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	605a      	str	r2, [r3, #4]
 8002834:	609a      	str	r2, [r3, #8]
 8002836:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002838:	f107 0320 	add.w	r3, r7, #32
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002842:	1d3b      	adds	r3, r7, #4
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	611a      	str	r2, [r3, #16]
 8002850:	615a      	str	r2, [r3, #20]
 8002852:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002854:	4b2c      	ldr	r3, [pc, #176]	; (8002908 <MX_TIM3_Init+0xe4>)
 8002856:	4a2d      	ldr	r2, [pc, #180]	; (800290c <MX_TIM3_Init+0xe8>)
 8002858:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800285a:	4b2b      	ldr	r3, [pc, #172]	; (8002908 <MX_TIM3_Init+0xe4>)
 800285c:	2200      	movs	r2, #0
 800285e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002860:	4b29      	ldr	r3, [pc, #164]	; (8002908 <MX_TIM3_Init+0xe4>)
 8002862:	2200      	movs	r2, #0
 8002864:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8002866:	4b28      	ldr	r3, [pc, #160]	; (8002908 <MX_TIM3_Init+0xe4>)
 8002868:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800286c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800286e:	4b26      	ldr	r3, [pc, #152]	; (8002908 <MX_TIM3_Init+0xe4>)
 8002870:	2200      	movs	r2, #0
 8002872:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002874:	4b24      	ldr	r3, [pc, #144]	; (8002908 <MX_TIM3_Init+0xe4>)
 8002876:	2200      	movs	r2, #0
 8002878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800287a:	4823      	ldr	r0, [pc, #140]	; (8002908 <MX_TIM3_Init+0xe4>)
 800287c:	f002 fb86 	bl	8004f8c <HAL_TIM_Base_Init>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002886:	f7ff fef1 	bl	800266c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800288a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800288e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002890:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002894:	4619      	mov	r1, r3
 8002896:	481c      	ldr	r0, [pc, #112]	; (8002908 <MX_TIM3_Init+0xe4>)
 8002898:	f003 f832 	bl	8005900 <HAL_TIM_ConfigClockSource>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80028a2:	f7ff fee3 	bl	800266c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80028a6:	4818      	ldr	r0, [pc, #96]	; (8002908 <MX_TIM3_Init+0xe4>)
 80028a8:	f002 fc22 	bl	80050f0 <HAL_TIM_PWM_Init>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80028b2:	f7ff fedb 	bl	800266c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028b6:	2300      	movs	r3, #0
 80028b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ba:	2300      	movs	r3, #0
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028be:	f107 0320 	add.w	r3, r7, #32
 80028c2:	4619      	mov	r1, r3
 80028c4:	4810      	ldr	r0, [pc, #64]	; (8002908 <MX_TIM3_Init+0xe4>)
 80028c6:	f003 fbd7 	bl	8006078 <HAL_TIMEx_MasterConfigSynchronization>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80028d0:	f7ff fecc 	bl	800266c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028d4:	2360      	movs	r3, #96	; 0x60
 80028d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028d8:	2300      	movs	r3, #0
 80028da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028dc:	2300      	movs	r3, #0
 80028de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028e4:	1d3b      	adds	r3, r7, #4
 80028e6:	2208      	movs	r2, #8
 80028e8:	4619      	mov	r1, r3
 80028ea:	4807      	ldr	r0, [pc, #28]	; (8002908 <MX_TIM3_Init+0xe4>)
 80028ec:	f002 ff46 	bl	800577c <HAL_TIM_PWM_ConfigChannel>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80028f6:	f7ff feb9 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80028fa:	4803      	ldr	r0, [pc, #12]	; (8002908 <MX_TIM3_Init+0xe4>)
 80028fc:	f000 f94e 	bl	8002b9c <HAL_TIM_MspPostInit>

}
 8002900:	bf00      	nop
 8002902:	3738      	adds	r7, #56	; 0x38
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	20000480 	.word	0x20000480
 800290c:	40000400 	.word	0x40000400

08002910 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002916:	f107 0308 	add.w	r3, r7, #8
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	605a      	str	r2, [r3, #4]
 8002920:	609a      	str	r2, [r3, #8]
 8002922:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002924:	463b      	mov	r3, r7
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800292c:	4b1d      	ldr	r3, [pc, #116]	; (80029a4 <MX_TIM4_Init+0x94>)
 800292e:	4a1e      	ldr	r2, [pc, #120]	; (80029a8 <MX_TIM4_Init+0x98>)
 8002930:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8002932:	4b1c      	ldr	r3, [pc, #112]	; (80029a4 <MX_TIM4_Init+0x94>)
 8002934:	2263      	movs	r2, #99	; 0x63
 8002936:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002938:	4b1a      	ldr	r3, [pc, #104]	; (80029a4 <MX_TIM4_Init+0x94>)
 800293a:	2200      	movs	r2, #0
 800293c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 399;
 800293e:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <MX_TIM4_Init+0x94>)
 8002940:	f240 128f 	movw	r2, #399	; 0x18f
 8002944:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002946:	4b17      	ldr	r3, [pc, #92]	; (80029a4 <MX_TIM4_Init+0x94>)
 8002948:	2200      	movs	r2, #0
 800294a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800294c:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <MX_TIM4_Init+0x94>)
 800294e:	2200      	movs	r2, #0
 8002950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002952:	4814      	ldr	r0, [pc, #80]	; (80029a4 <MX_TIM4_Init+0x94>)
 8002954:	f002 fb1a 	bl	8004f8c <HAL_TIM_Base_Init>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800295e:	f7ff fe85 	bl	800266c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002966:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002968:	f107 0308 	add.w	r3, r7, #8
 800296c:	4619      	mov	r1, r3
 800296e:	480d      	ldr	r0, [pc, #52]	; (80029a4 <MX_TIM4_Init+0x94>)
 8002970:	f002 ffc6 	bl	8005900 <HAL_TIM_ConfigClockSource>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800297a:	f7ff fe77 	bl	800266c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800297e:	2300      	movs	r3, #0
 8002980:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002982:	2300      	movs	r3, #0
 8002984:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002986:	463b      	mov	r3, r7
 8002988:	4619      	mov	r1, r3
 800298a:	4806      	ldr	r0, [pc, #24]	; (80029a4 <MX_TIM4_Init+0x94>)
 800298c:	f003 fb74 	bl	8006078 <HAL_TIMEx_MasterConfigSynchronization>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002996:	f7ff fe69 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800299a:	bf00      	nop
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	200004c8 	.word	0x200004c8
 80029a8:	40000800 	.word	0x40000800

080029ac <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029b2:	f107 0308 	add.w	r3, r7, #8
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	605a      	str	r2, [r3, #4]
 80029bc:	609a      	str	r2, [r3, #8]
 80029be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029c0:	463b      	mov	r3, r7
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80029c8:	4b1d      	ldr	r3, [pc, #116]	; (8002a40 <MX_TIM5_Init+0x94>)
 80029ca:	4a1e      	ldr	r2, [pc, #120]	; (8002a44 <MX_TIM5_Init+0x98>)
 80029cc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 80029ce:	4b1c      	ldr	r3, [pc, #112]	; (8002a40 <MX_TIM5_Init+0x94>)
 80029d0:	2253      	movs	r2, #83	; 0x53
 80029d2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029d4:	4b1a      	ldr	r3, [pc, #104]	; (8002a40 <MX_TIM5_Init+0x94>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80029da:	4b19      	ldr	r3, [pc, #100]	; (8002a40 <MX_TIM5_Init+0x94>)
 80029dc:	f04f 32ff 	mov.w	r2, #4294967295
 80029e0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029e2:	4b17      	ldr	r3, [pc, #92]	; (8002a40 <MX_TIM5_Init+0x94>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029e8:	4b15      	ldr	r3, [pc, #84]	; (8002a40 <MX_TIM5_Init+0x94>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80029ee:	4814      	ldr	r0, [pc, #80]	; (8002a40 <MX_TIM5_Init+0x94>)
 80029f0:	f002 facc 	bl	8004f8c <HAL_TIM_Base_Init>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80029fa:	f7ff fe37 	bl	800266c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002a04:	f107 0308 	add.w	r3, r7, #8
 8002a08:	4619      	mov	r1, r3
 8002a0a:	480d      	ldr	r0, [pc, #52]	; (8002a40 <MX_TIM5_Init+0x94>)
 8002a0c:	f002 ff78 	bl	8005900 <HAL_TIM_ConfigClockSource>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002a16:	f7ff fe29 	bl	800266c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002a22:	463b      	mov	r3, r7
 8002a24:	4619      	mov	r1, r3
 8002a26:	4806      	ldr	r0, [pc, #24]	; (8002a40 <MX_TIM5_Init+0x94>)
 8002a28:	f003 fb26 	bl	8006078 <HAL_TIMEx_MasterConfigSynchronization>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002a32:	f7ff fe1b 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002a36:	bf00      	nop
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000510 	.word	0x20000510
 8002a44:	40000c00 	.word	0x40000c00

08002a48 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08a      	sub	sp, #40	; 0x28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a50:	f107 0314 	add.w	r3, r7, #20
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	605a      	str	r2, [r3, #4]
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	60da      	str	r2, [r3, #12]
 8002a5e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a68:	d133      	bne.n	8002ad2 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	4b1b      	ldr	r3, [pc, #108]	; (8002adc <HAL_TIM_Encoder_MspInit+0x94>)
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	4a1a      	ldr	r2, [pc, #104]	; (8002adc <HAL_TIM_Encoder_MspInit+0x94>)
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	6413      	str	r3, [r2, #64]	; 0x40
 8002a7a:	4b18      	ldr	r3, [pc, #96]	; (8002adc <HAL_TIM_Encoder_MspInit+0x94>)
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	613b      	str	r3, [r7, #16]
 8002a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	4b14      	ldr	r3, [pc, #80]	; (8002adc <HAL_TIM_Encoder_MspInit+0x94>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	4a13      	ldr	r2, [pc, #76]	; (8002adc <HAL_TIM_Encoder_MspInit+0x94>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	6313      	str	r3, [r2, #48]	; 0x30
 8002a96:	4b11      	ldr	r3, [pc, #68]	; (8002adc <HAL_TIM_Encoder_MspInit+0x94>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab6:	f107 0314 	add.w	r3, r7, #20
 8002aba:	4619      	mov	r1, r3
 8002abc:	4808      	ldr	r0, [pc, #32]	; (8002ae0 <HAL_TIM_Encoder_MspInit+0x98>)
 8002abe:	f001 faeb 	bl	8004098 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	201c      	movs	r0, #28
 8002ac8:	f001 faaf 	bl	800402a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002acc:	201c      	movs	r0, #28
 8002ace:	f001 fac8 	bl	8004062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002ad2:	bf00      	nop
 8002ad4:	3728      	adds	r7, #40	; 0x28
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40020000 	.word	0x40020000

08002ae4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a26      	ldr	r2, [pc, #152]	; (8002b8c <HAL_TIM_Base_MspInit+0xa8>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d116      	bne.n	8002b24 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	4b25      	ldr	r3, [pc, #148]	; (8002b90 <HAL_TIM_Base_MspInit+0xac>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	4a24      	ldr	r2, [pc, #144]	; (8002b90 <HAL_TIM_Base_MspInit+0xac>)
 8002b00:	f043 0302 	orr.w	r3, r3, #2
 8002b04:	6413      	str	r3, [r2, #64]	; 0x40
 8002b06:	4b22      	ldr	r3, [pc, #136]	; (8002b90 <HAL_TIM_Base_MspInit+0xac>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002b12:	2200      	movs	r2, #0
 8002b14:	2100      	movs	r1, #0
 8002b16:	201d      	movs	r0, #29
 8002b18:	f001 fa87 	bl	800402a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b1c:	201d      	movs	r0, #29
 8002b1e:	f001 faa0 	bl	8004062 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002b22:	e02e      	b.n	8002b82 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM4)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a1a      	ldr	r2, [pc, #104]	; (8002b94 <HAL_TIM_Base_MspInit+0xb0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d116      	bne.n	8002b5c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b2e:	2300      	movs	r3, #0
 8002b30:	613b      	str	r3, [r7, #16]
 8002b32:	4b17      	ldr	r3, [pc, #92]	; (8002b90 <HAL_TIM_Base_MspInit+0xac>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	4a16      	ldr	r2, [pc, #88]	; (8002b90 <HAL_TIM_Base_MspInit+0xac>)
 8002b38:	f043 0304 	orr.w	r3, r3, #4
 8002b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b3e:	4b14      	ldr	r3, [pc, #80]	; (8002b90 <HAL_TIM_Base_MspInit+0xac>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	201e      	movs	r0, #30
 8002b50:	f001 fa6b 	bl	800402a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002b54:	201e      	movs	r0, #30
 8002b56:	f001 fa84 	bl	8004062 <HAL_NVIC_EnableIRQ>
}
 8002b5a:	e012      	b.n	8002b82 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM5)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a0d      	ldr	r2, [pc, #52]	; (8002b98 <HAL_TIM_Base_MspInit+0xb4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d10d      	bne.n	8002b82 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <HAL_TIM_Base_MspInit+0xac>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	4a08      	ldr	r2, [pc, #32]	; (8002b90 <HAL_TIM_Base_MspInit+0xac>)
 8002b70:	f043 0308 	orr.w	r3, r3, #8
 8002b74:	6413      	str	r3, [r2, #64]	; 0x40
 8002b76:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <HAL_TIM_Base_MspInit+0xac>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]
}
 8002b82:	bf00      	nop
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40000400 	.word	0x40000400
 8002b90:	40023800 	.word	0x40023800
 8002b94:	40000800 	.word	0x40000800
 8002b98:	40000c00 	.word	0x40000c00

08002b9c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b088      	sub	sp, #32
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba4:	f107 030c 	add.w	r3, r7, #12
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a12      	ldr	r2, [pc, #72]	; (8002c04 <HAL_TIM_MspPostInit+0x68>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d11e      	bne.n	8002bfc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <HAL_TIM_MspPostInit+0x6c>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	4a10      	ldr	r2, [pc, #64]	; (8002c08 <HAL_TIM_MspPostInit+0x6c>)
 8002bc8:	f043 0304 	orr.w	r3, r3, #4
 8002bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bce:	4b0e      	ldr	r3, [pc, #56]	; (8002c08 <HAL_TIM_MspPostInit+0x6c>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	60bb      	str	r3, [r7, #8]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002bda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bde:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be0:	2302      	movs	r3, #2
 8002be2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be8:	2300      	movs	r3, #0
 8002bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bec:	2302      	movs	r3, #2
 8002bee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bf0:	f107 030c 	add.w	r3, r7, #12
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4805      	ldr	r0, [pc, #20]	; (8002c0c <HAL_TIM_MspPostInit+0x70>)
 8002bf8:	f001 fa4e 	bl	8004098 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002bfc:	bf00      	nop
 8002bfe:	3720      	adds	r7, #32
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40000400 	.word	0x40000400
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	40020800 	.word	0x40020800

08002c10 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c14:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <MX_USART2_UART_Init+0x4c>)
 8002c16:	4a12      	ldr	r2, [pc, #72]	; (8002c60 <MX_USART2_UART_Init+0x50>)
 8002c18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c1a:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <MX_USART2_UART_Init+0x4c>)
 8002c1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c22:	4b0e      	ldr	r3, [pc, #56]	; (8002c5c <MX_USART2_UART_Init+0x4c>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <MX_USART2_UART_Init+0x4c>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <MX_USART2_UART_Init+0x4c>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c34:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <MX_USART2_UART_Init+0x4c>)
 8002c36:	220c      	movs	r2, #12
 8002c38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c3a:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <MX_USART2_UART_Init+0x4c>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c40:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <MX_USART2_UART_Init+0x4c>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c46:	4805      	ldr	r0, [pc, #20]	; (8002c5c <MX_USART2_UART_Init+0x4c>)
 8002c48:	f003 fa98 	bl	800617c <HAL_UART_Init>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c52:	f7ff fd0b 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000558 	.word	0x20000558
 8002c60:	40004400 	.word	0x40004400

08002c64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08a      	sub	sp, #40	; 0x28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6c:	f107 0314 	add.w	r3, r7, #20
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	60da      	str	r2, [r3, #12]
 8002c7a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a19      	ldr	r2, [pc, #100]	; (8002ce8 <HAL_UART_MspInit+0x84>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d12b      	bne.n	8002cde <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	4b18      	ldr	r3, [pc, #96]	; (8002cec <HAL_UART_MspInit+0x88>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	4a17      	ldr	r2, [pc, #92]	; (8002cec <HAL_UART_MspInit+0x88>)
 8002c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c94:	6413      	str	r3, [r2, #64]	; 0x40
 8002c96:	4b15      	ldr	r3, [pc, #84]	; (8002cec <HAL_UART_MspInit+0x88>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	4b11      	ldr	r3, [pc, #68]	; (8002cec <HAL_UART_MspInit+0x88>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	4a10      	ldr	r2, [pc, #64]	; (8002cec <HAL_UART_MspInit+0x88>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb2:	4b0e      	ldr	r3, [pc, #56]	; (8002cec <HAL_UART_MspInit+0x88>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002cbe:	230c      	movs	r3, #12
 8002cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cce:	2307      	movs	r3, #7
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd2:	f107 0314 	add.w	r3, r7, #20
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4805      	ldr	r0, [pc, #20]	; (8002cf0 <HAL_UART_MspInit+0x8c>)
 8002cda:	f001 f9dd 	bl	8004098 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002cde:	bf00      	nop
 8002ce0:	3728      	adds	r7, #40	; 0x28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40004400 	.word	0x40004400
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	40020000 	.word	0x40020000

08002cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cf8:	480d      	ldr	r0, [pc, #52]	; (8002d30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cfa:	490e      	ldr	r1, [pc, #56]	; (8002d34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002cfc:	4a0e      	ldr	r2, [pc, #56]	; (8002d38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d00:	e002      	b.n	8002d08 <LoopCopyDataInit>

08002d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d06:	3304      	adds	r3, #4

08002d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d0c:	d3f9      	bcc.n	8002d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d0e:	4a0b      	ldr	r2, [pc, #44]	; (8002d3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d10:	4c0b      	ldr	r4, [pc, #44]	; (8002d40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d14:	e001      	b.n	8002d1a <LoopFillZerobss>

08002d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d18:	3204      	adds	r2, #4

08002d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d1c:	d3fb      	bcc.n	8002d16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d1e:	f7ff fd1b 	bl	8002758 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d22:	f003 fcf3 	bl	800670c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d26:	f7ff fab9 	bl	800229c <main>
  bx  lr    
 8002d2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d34:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002d38:	080086f8 	.word	0x080086f8
  ldr r2, =_sbss
 8002d3c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002d40:	200005a0 	.word	0x200005a0

08002d44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d44:	e7fe      	b.n	8002d44 <ADC_IRQHandler>
	...

08002d48 <arm_atan2_f32>:
                   and compute the right angle.
*/


arm_status arm_atan2_f32(float32_t y,float32_t x,float32_t *result)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b0a1      	sub	sp, #132	; 0x84
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002d52:	edc7 0a02 	vstr	s1, [r7, #8]
 8002d56:	6078      	str	r0, [r7, #4]
    if (x > 0.0f)
 8002d58:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d64:	f340 808e 	ble.w	8002e84 <arm_atan2_f32+0x13c>
    {
        *result=arm_atan_f32(y/x);
 8002d68:	edd7 6a03 	vldr	s13, [r7, #12]
 8002d6c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002d70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d74:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
   int sign=0;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	67bb      	str	r3, [r7, #120]	; 0x78
   float32_t res=0.0f;
 8002d7c:	f04f 0300 	mov.w	r3, #0
 8002d80:	677b      	str	r3, [r7, #116]	; 0x74
   if (x < 0.0f)
 8002d82:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002d86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8e:	d507      	bpl.n	8002da0 <arm_atan2_f32+0x58>
      sign=1;
 8002d90:	2301      	movs	r3, #1
 8002d92:	67bb      	str	r3, [r7, #120]	; 0x78
      x=-x;
 8002d94:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002d98:	eef1 7a67 	vneg.f32	s15, s15
 8002d9c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
   if (x > 1.0f)
 8002da0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002da4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002da8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db0:	dd31      	ble.n	8002e16 <arm_atan2_f32+0xce>
      x = 1.0f / x;
 8002db2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002db6:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dbe:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
 8002dc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dc4:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8002dc6:	4bb5      	ldr	r3, [pc, #724]	; (800309c <arm_atan2_f32+0x354>)
 8002dc8:	66fb      	str	r3, [r7, #108]	; 0x6c
    int i=1;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	66bb      	str	r3, [r7, #104]	; 0x68
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002dce:	2301      	movs	r3, #1
 8002dd0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dd2:	e014      	b.n	8002dfe <arm_atan2_f32+0xb6>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8002dd4:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002dd8:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002ddc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002de0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002de2:	f1c3 0309 	rsb	r3, r3, #9
 8002de6:	4aae      	ldr	r2, [pc, #696]	; (80030a0 <arm_atan2_f32+0x358>)
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	edd3 7a00 	vldr	s15, [r3]
 8002df0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df4:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002df8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e00:	2b09      	cmp	r3, #9
 8002e02:	dde7      	ble.n	8002dd4 <arm_atan2_f32+0x8c>
    return(res);
 8002e04:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8002e08:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80030a4 <arm_atan2_f32+0x35c>
 8002e0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e10:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
 8002e14:	e028      	b.n	8002e68 <arm_atan2_f32+0x120>
 8002e16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e18:	667b      	str	r3, [r7, #100]	; 0x64
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8002e1a:	4ba0      	ldr	r3, [pc, #640]	; (800309c <arm_atan2_f32+0x354>)
 8002e1c:	663b      	str	r3, [r7, #96]	; 0x60
    int i=1;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	65fb      	str	r3, [r7, #92]	; 0x5c
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002e22:	2301      	movs	r3, #1
 8002e24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e26:	e014      	b.n	8002e52 <arm_atan2_f32+0x10a>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8002e28:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002e2c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002e30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e36:	f1c3 0309 	rsb	r3, r3, #9
 8002e3a:	4a99      	ldr	r2, [pc, #612]	; (80030a0 <arm_atan2_f32+0x358>)
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	edd3 7a00 	vldr	s15, [r3]
 8002e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e48:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002e4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e4e:	3301      	adds	r3, #1
 8002e50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e54:	2b09      	cmp	r3, #9
 8002e56:	dde7      	ble.n	8002e28 <arm_atan2_f32+0xe0>
    return(res);
 8002e58:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
     res += arm_atan_limited_f32(x);
 8002e5c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e64:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
   if (sign)
 8002e68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d005      	beq.n	8002e7a <arm_atan2_f32+0x132>
     res = -res;
 8002e6e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002e72:	eef1 7a67 	vneg.f32	s15, s15
 8002e76:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
   return(res);
 8002e7a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
        *result=arm_atan_f32(y/x);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	601a      	str	r2, [r3, #0]
        return(ARM_MATH_SUCCESS);
 8002e80:	2300      	movs	r3, #0
 8002e82:	e175      	b.n	8003170 <arm_atan2_f32+0x428>
    }
    if (x < 0.0f)
 8002e84:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e90:	f140 814d 	bpl.w	800312e <arm_atan2_f32+0x3e6>
    {
        if (y > 0.0f)
 8002e94:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea0:	f340 8093 	ble.w	8002fca <arm_atan2_f32+0x282>
        {
           *result=arm_atan_f32(y/x) + PI;
 8002ea4:	edd7 6a03 	vldr	s13, [r7, #12]
 8002ea8:	ed97 7a02 	vldr	s14, [r7, #8]
 8002eac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002eb0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
   int sign=0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	657b      	str	r3, [r7, #84]	; 0x54
   float32_t res=0.0f;
 8002eb8:	f04f 0300 	mov.w	r3, #0
 8002ebc:	653b      	str	r3, [r7, #80]	; 0x50
   if (x < 0.0f)
 8002ebe:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002ec2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eca:	d507      	bpl.n	8002edc <arm_atan2_f32+0x194>
      sign=1;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	657b      	str	r3, [r7, #84]	; 0x54
      x=-x;
 8002ed0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002ed4:	eef1 7a67 	vneg.f32	s15, s15
 8002ed8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
   if (x > 1.0f)
 8002edc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002ee0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ee4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eec:	dd31      	ble.n	8002f52 <arm_atan2_f32+0x20a>
      x = 1.0f / x;
 8002eee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ef2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002efa:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8002efe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f00:	64fb      	str	r3, [r7, #76]	; 0x4c
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8002f02:	4b66      	ldr	r3, [pc, #408]	; (800309c <arm_atan2_f32+0x354>)
 8002f04:	64bb      	str	r3, [r7, #72]	; 0x48
    int i=1;
 8002f06:	2301      	movs	r3, #1
 8002f08:	647b      	str	r3, [r7, #68]	; 0x44
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	647b      	str	r3, [r7, #68]	; 0x44
 8002f0e:	e014      	b.n	8002f3a <arm_atan2_f32+0x1f2>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8002f10:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002f14:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002f18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f1e:	f1c3 0309 	rsb	r3, r3, #9
 8002f22:	4a5f      	ldr	r2, [pc, #380]	; (80030a0 <arm_atan2_f32+0x358>)
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	edd3 7a00 	vldr	s15, [r3]
 8002f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f30:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f36:	3301      	adds	r3, #1
 8002f38:	647b      	str	r3, [r7, #68]	; 0x44
 8002f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f3c:	2b09      	cmp	r3, #9
 8002f3e:	dde7      	ble.n	8002f10 <arm_atan2_f32+0x1c8>
    return(res);
 8002f40:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8002f44:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80030a4 <arm_atan2_f32+0x35c>
 8002f48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f4c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8002f50:	e028      	b.n	8002fa4 <arm_atan2_f32+0x25c>
 8002f52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f54:	643b      	str	r3, [r7, #64]	; 0x40
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8002f56:	4b51      	ldr	r3, [pc, #324]	; (800309c <arm_atan2_f32+0x354>)
 8002f58:	63fb      	str	r3, [r7, #60]	; 0x3c
    int i=1;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	63bb      	str	r3, [r7, #56]	; 0x38
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002f5e:	2301      	movs	r3, #1
 8002f60:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f62:	e014      	b.n	8002f8e <arm_atan2_f32+0x246>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8002f64:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002f68:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002f6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f72:	f1c3 0309 	rsb	r3, r3, #9
 8002f76:	4a4a      	ldr	r2, [pc, #296]	; (80030a0 <arm_atan2_f32+0x358>)
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	edd3 7a00 	vldr	s15, [r3]
 8002f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f84:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8002f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f90:	2b09      	cmp	r3, #9
 8002f92:	dde7      	ble.n	8002f64 <arm_atan2_f32+0x21c>
    return(res);
 8002f94:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
     res += arm_atan_limited_f32(x);
 8002f98:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002f9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fa0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
   if (sign)
 8002fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d005      	beq.n	8002fb6 <arm_atan2_f32+0x26e>
     res = -res;
 8002faa:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002fae:	eef1 7a67 	vneg.f32	s15, s15
 8002fb2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
   return(res);
 8002fb6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
           *result=arm_atan_f32(y/x) + PI;
 8002fba:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80030a8 <arm_atan2_f32+0x360>
 8002fbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	edc3 7a00 	vstr	s15, [r3]
 8002fc8:	e0af      	b.n	800312a <arm_atan2_f32+0x3e2>
        }
        else if (y < 0.0f)
 8002fca:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd6:	f140 809c 	bpl.w	8003112 <arm_atan2_f32+0x3ca>
        {
           *result=arm_atan_f32(y/x) - PI;
 8002fda:	edd7 6a03 	vldr	s13, [r7, #12]
 8002fde:	ed97 7a02 	vldr	s14, [r7, #8]
 8002fe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fe6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
   int sign=0;
 8002fea:	2300      	movs	r3, #0
 8002fec:	633b      	str	r3, [r7, #48]	; 0x30
   float32_t res=0.0f;
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
   if (x < 0.0f)
 8002ff4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002ff8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003000:	d507      	bpl.n	8003012 <arm_atan2_f32+0x2ca>
      sign=1;
 8003002:	2301      	movs	r3, #1
 8003004:	633b      	str	r3, [r7, #48]	; 0x30
      x=-x;
 8003006:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800300a:	eef1 7a67 	vneg.f32	s15, s15
 800300e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
   if (x > 1.0f)
 8003012:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003016:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800301a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800301e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003022:	dd31      	ble.n	8003088 <arm_atan2_f32+0x340>
      x = 1.0f / x;
 8003024:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003028:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800302c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003030:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8003034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003036:	62bb      	str	r3, [r7, #40]	; 0x28
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8003038:	4b18      	ldr	r3, [pc, #96]	; (800309c <arm_atan2_f32+0x354>)
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
    int i=1;
 800303c:	2301      	movs	r3, #1
 800303e:	623b      	str	r3, [r7, #32]
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8003040:	2301      	movs	r3, #1
 8003042:	623b      	str	r3, [r7, #32]
 8003044:	e014      	b.n	8003070 <arm_atan2_f32+0x328>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8003046:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800304a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800304e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	f1c3 0309 	rsb	r3, r3, #9
 8003058:	4a11      	ldr	r2, [pc, #68]	; (80030a0 <arm_atan2_f32+0x358>)
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	edd3 7a00 	vldr	s15, [r3]
 8003062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003066:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	3301      	adds	r3, #1
 800306e:	623b      	str	r3, [r7, #32]
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	2b09      	cmp	r3, #9
 8003074:	dde7      	ble.n	8003046 <arm_atan2_f32+0x2fe>
    return(res);
 8003076:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
      res = PIHALFF32 - arm_atan_limited_f32(x);
 800307a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80030a4 <arm_atan2_f32+0x35c>
 800307e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003082:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8003086:	e031      	b.n	80030ec <arm_atan2_f32+0x3a4>
 8003088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308a:	61fb      	str	r3, [r7, #28]
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 800308c:	4b03      	ldr	r3, [pc, #12]	; (800309c <arm_atan2_f32+0x354>)
 800308e:	61bb      	str	r3, [r7, #24]
    int i=1;
 8003090:	2301      	movs	r3, #1
 8003092:	617b      	str	r3, [r7, #20]
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8003094:	2301      	movs	r3, #1
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	e01d      	b.n	80030d6 <arm_atan2_f32+0x38e>
 800309a:	bf00      	nop
 800309c:	bd0492a5 	.word	0xbd0492a5
 80030a0:	08008678 	.word	0x08008678
 80030a4:	3fc90fdb 	.word	0x3fc90fdb
 80030a8:	40490fdb 	.word	0x40490fdb
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80030ac:	ed97 7a07 	vldr	s14, [r7, #28]
 80030b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80030b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f1c3 0309 	rsb	r3, r3, #9
 80030be:	4a2f      	ldr	r2, [pc, #188]	; (800317c <arm_atan2_f32+0x434>)
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	edd3 7a00 	vldr	s15, [r3]
 80030c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030cc:	edc7 7a06 	vstr	s15, [r7, #24]
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	3301      	adds	r3, #1
 80030d4:	617b      	str	r3, [r7, #20]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2b09      	cmp	r3, #9
 80030da:	dde7      	ble.n	80030ac <arm_atan2_f32+0x364>
    return(res);
 80030dc:	edd7 7a06 	vldr	s15, [r7, #24]
     res += arm_atan_limited_f32(x);
 80030e0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80030e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030e8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
   if (sign)
 80030ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d005      	beq.n	80030fe <arm_atan2_f32+0x3b6>
     res = -res;
 80030f2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80030f6:	eef1 7a67 	vneg.f32	s15, s15
 80030fa:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
   return(res);
 80030fe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
           *result=arm_atan_f32(y/x) - PI;
 8003102:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003180 <arm_atan2_f32+0x438>
 8003106:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	edc3 7a00 	vstr	s15, [r3]
 8003110:	e00b      	b.n	800312a <arm_atan2_f32+0x3e2>
        }
        else
        {
            if (signbit(y))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <arm_atan2_f32+0x3dc>
            {
               *result= -PI;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a19      	ldr	r2, [pc, #100]	; (8003184 <arm_atan2_f32+0x43c>)
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	e002      	b.n	800312a <arm_atan2_f32+0x3e2>
            }
            else
            {
               *result= PI;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a18      	ldr	r2, [pc, #96]	; (8003188 <arm_atan2_f32+0x440>)
 8003128:	601a      	str	r2, [r3, #0]
            }
        }
        return(ARM_MATH_SUCCESS);
 800312a:	2300      	movs	r3, #0
 800312c:	e020      	b.n	8003170 <arm_atan2_f32+0x428>
    }
    if (x == 0.0f)
 800312e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003132:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800313a:	d117      	bne.n	800316c <arm_atan2_f32+0x424>
    {
        if (y > 0.0f)
 800313c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003140:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003148:	dd04      	ble.n	8003154 <arm_atan2_f32+0x40c>
        {
            *result=PIHALFF32;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a0f      	ldr	r2, [pc, #60]	; (800318c <arm_atan2_f32+0x444>)
 800314e:	601a      	str	r2, [r3, #0]
            return(ARM_MATH_SUCCESS);
 8003150:	2300      	movs	r3, #0
 8003152:	e00d      	b.n	8003170 <arm_atan2_f32+0x428>
        }
        if (y < 0.0f)
 8003154:	edd7 7a03 	vldr	s15, [r7, #12]
 8003158:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800315c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003160:	d504      	bpl.n	800316c <arm_atan2_f32+0x424>
        {
            *result=-PIHALFF32;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a0a      	ldr	r2, [pc, #40]	; (8003190 <arm_atan2_f32+0x448>)
 8003166:	601a      	str	r2, [r3, #0]
            return(ARM_MATH_SUCCESS);
 8003168:	2300      	movs	r3, #0
 800316a:	e001      	b.n	8003170 <arm_atan2_f32+0x428>
        }
    }
    

    return(ARM_MATH_NANINF);
 800316c:	f06f 0303 	mvn.w	r3, #3

}
 8003170:	4618      	mov	r0, r3
 8003172:	3784      	adds	r7, #132	; 0x84
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	08008678 	.word	0x08008678
 8003180:	40490fdb 	.word	0x40490fdb
 8003184:	c0490fdb 	.word	0xc0490fdb
 8003188:	40490fdb 	.word	0x40490fdb
 800318c:	3fc90fdb 	.word	0x3fc90fdb
 8003190:	bfc90fdb 	.word	0xbfc90fdb

08003194 <arm_cos_f32>:
  @param[in]     x  input value in radians
  @return        cos(x)
 */
float32_t arm_cos_f32(
  float32_t x)
{
 8003194:	b480      	push	{r7}
 8003196:	b08b      	sub	sp, #44	; 0x2c
 8003198:	af00      	add	r7, sp, #0
 800319a:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 800319e:	edd7 7a01 	vldr	s15, [r7, #4]
 80031a2:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003294 <arm_cos_f32+0x100>
 80031a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031aa:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80031ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031b2:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 80031b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80031ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031be:	ee17 3a90 	vmov	r3, s15
 80031c2:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 80031c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80031c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d0:	d502      	bpl.n	80031d8 <arm_cos_f32+0x44>
  {
    n--;
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	3b01      	subs	r3, #1
 80031d6:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	ee07 3a90 	vmov	s15, r3
 80031de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031e2:	ed97 7a06 	vldr	s14, [r7, #24]
 80031e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031ea:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 80031ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80031f2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003298 <arm_cos_f32+0x104>
 80031f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031fa:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 80031fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8003202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003206:	ee17 3a90 	vmov	r3, s15
 800320a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 800320c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800320e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003212:	d309      	bcc.n	8003228 <arm_cos_f32+0x94>
    index = 0;
 8003214:	2300      	movs	r3, #0
 8003216:	84fb      	strh	r3, [r7, #38]	; 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 8003218:	edd7 7a07 	vldr	s15, [r7, #28]
 800321c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003298 <arm_cos_f32+0x104>
 8003220:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003224:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8003228:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800322a:	ee07 3a90 	vmov	s15, r3
 800322e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003232:	ed97 7a07 	vldr	s14, [r7, #28]
 8003236:	ee77 7a67 	vsub.f32	s15, s14, s15
 800323a:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 800323e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003240:	4a16      	ldr	r2, [pc, #88]	; (800329c <arm_cos_f32+0x108>)
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 800324a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800324c:	3301      	adds	r3, #1
 800324e:	4a13      	ldr	r2, [pc, #76]	; (800329c <arm_cos_f32+0x108>)
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  cosVal = (1.0f - fract) * a + fract * b;
 8003258:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800325c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003260:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003264:	edd7 7a04 	vldr	s15, [r7, #16]
 8003268:	ee27 7a27 	vmul.f32	s14, s14, s15
 800326c:	edd7 6a05 	vldr	s13, [r7, #20]
 8003270:	edd7 7a03 	vldr	s15, [r7, #12]
 8003274:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003278:	ee77 7a27 	vadd.f32	s15, s14, s15
 800327c:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (cosVal);
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	ee07 3a90 	vmov	s15, r3
}
 8003286:	eeb0 0a67 	vmov.f32	s0, s15
 800328a:	372c      	adds	r7, #44	; 0x2c
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	3e22f983 	.word	0x3e22f983
 8003298:	44000000 	.word	0x44000000
 800329c:	08007e74 	.word	0x08007e74

080032a0 <arm_sin_f32>:
  @return        sin(x)
 */

float32_t arm_sin_f32(
  float32_t x)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b08b      	sub	sp, #44	; 0x2c
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 80032aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80032ae:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8003398 <arm_sin_f32+0xf8>
 80032b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032b6:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 80032ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80032be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032c2:	ee17 3a90 	vmov	r3, s15
 80032c6:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 80032c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80032cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d4:	d502      	bpl.n	80032dc <arm_sin_f32+0x3c>
  {
    n--;
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	3b01      	subs	r3, #1
 80032da:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	ee07 3a90 	vmov	s15, r3
 80032e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032e6:	ed97 7a06 	vldr	s14, [r7, #24]
 80032ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032ee:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 80032f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80032f6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800339c <arm_sin_f32+0xfc>
 80032fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032fe:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 8003302:	edd7 7a07 	vldr	s15, [r7, #28]
 8003306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800330a:	ee17 3a90 	vmov	r3, s15
 800330e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 8003310:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003316:	d309      	bcc.n	800332c <arm_sin_f32+0x8c>
    index = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	84fb      	strh	r3, [r7, #38]	; 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 800331c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003320:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800339c <arm_sin_f32+0xfc>
 8003324:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003328:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 800332c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800332e:	ee07 3a90 	vmov	s15, r3
 8003332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003336:	ed97 7a07 	vldr	s14, [r7, #28]
 800333a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800333e:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 8003342:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003344:	4a16      	ldr	r2, [pc, #88]	; (80033a0 <arm_sin_f32+0x100>)
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 800334e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003350:	3301      	adds	r3, #1
 8003352:	4a13      	ldr	r2, [pc, #76]	; (80033a0 <arm_sin_f32+0x100>)
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 800335c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003360:	edd7 7a05 	vldr	s15, [r7, #20]
 8003364:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003368:	edd7 7a04 	vldr	s15, [r7, #16]
 800336c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003370:	edd7 6a05 	vldr	s13, [r7, #20]
 8003374:	edd7 7a03 	vldr	s15, [r7, #12]
 8003378:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800337c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003380:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (sinVal);
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	ee07 3a90 	vmov	s15, r3
}
 800338a:	eeb0 0a67 	vmov.f32	s0, s15
 800338e:	372c      	adds	r7, #44	; 0x2c
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	3e22f983 	.word	0x3e22f983
 800339c:	44000000 	.word	0x44000000
 80033a0:	08007e74 	.word	0x08007e74

080033a4 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b08b      	sub	sp, #44	; 0x2c
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	461a      	mov	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	885b      	ldrh	r3, [r3, #2]
 80033cc:	fb02 f303 	mul.w	r3, r2, r3
 80033d0:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 80033d6:	e013      	b.n	8003400 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	1d1a      	adds	r2, r3, #4
 80033dc:	627a      	str	r2, [r7, #36]	; 0x24
 80033de:	ed93 7a00 	vldr	s14, [r3]
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	1d1a      	adds	r2, r3, #4
 80033e6:	623a      	str	r2, [r7, #32]
 80033e8:	edd3 7a00 	vldr	s15, [r3]
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	1d1a      	adds	r2, r3, #4
 80033f0:	61fa      	str	r2, [r7, #28]
 80033f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033f6:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	3b01      	subs	r3, #1
 80033fe:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1e8      	bne.n	80033d8 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8003406:	2300      	movs	r3, #0
 8003408:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800340a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800340e:	4618      	mov	r0, r3
 8003410:	372c      	adds	r7, #44	; 0x2c
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800341a:	b480      	push	{r7}
 800341c:	b085      	sub	sp, #20
 800341e:	af00      	add	r7, sp, #0
 8003420:	60f8      	str	r0, [r7, #12]
 8003422:	607b      	str	r3, [r7, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	817b      	strh	r3, [r7, #10]
 8003428:	4613      	mov	r3, r2
 800342a:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	897a      	ldrh	r2, [r7, #10]
 8003430:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	893a      	ldrh	r2, [r7, #8]
 8003436:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	605a      	str	r2, [r3, #4]
}
 800343e:	bf00      	nop
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800344a:	b480      	push	{r7}
 800344c:	b0bb      	sub	sp, #236	; 0xec
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
 8003452:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	667b      	str	r3, [r7, #100]	; 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	663b      	str	r3, [r7, #96]	; 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	885b      	ldrh	r3, [r3, #2]
 800346a:	65bb      	str	r3, [r7, #88]	; 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800346c:	f04f 0300 	mov.w	r3, #0
 8003470:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003474:	f04f 0300 	mov.w	r3, #0
 8003478:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800347a:	2300      	movs	r3, #0
 800347c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 8003480:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003482:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 8003486:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003488:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800348c:	e03b      	b.n	8003506 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800348e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003490:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 800349a:	e00c      	b.n	80034b6 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800349c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034a0:	1d1a      	adds	r2, r3, #4
 80034a2:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
        j--;
 80034ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80034b0:	3b01      	subs	r3, #1
 80034b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 80034b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1ee      	bne.n	800349c <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 80034be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034c2:	1d1a      	adds	r2, r3, #4
 80034c4:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80034c8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80034cc:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 80034ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80034d2:	3b01      	subs	r3, #1
 80034d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 80034d8:	e00c      	b.n	80034f4 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 80034da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034de:	1d1a      	adds	r2, r3, #4
 80034e0:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80034e4:	f04f 0200 	mov.w	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]
        j--;
 80034ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80034ee:	3b01      	subs	r3, #1
 80034f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 80034f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1ee      	bne.n	80034da <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 80034fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003500:	3b01      	subs	r3, #1
 8003502:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    while (rowCnt > 0U)
 8003506:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1bf      	bne.n	800348e <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800350e:	2300      	movs	r3, #0
 8003510:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003514:	e2c7      	b.n	8003aa6 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 8003516:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800351a:	653b      	str	r3, [r7, #80]	; 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	885b      	ldrh	r3, [r3, #2]
 8003524:	3301      	adds	r3, #1
 8003526:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800352a:	fb01 f303 	mul.w	r3, r1, r3
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      pivot = *pTmp;
 8003536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      selectedRow = column;
 8003540:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003544:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8003548:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800354c:	3301      	adds	r3, #1
 800354e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003552:	e02c      	b.n	80035ae <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	885b      	ldrh	r3, [r3, #2]
 800355c:	4619      	mov	r1, r3
 800355e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003562:	fb03 f101 	mul.w	r1, r3, r1
 8003566:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800356a:	440b      	add	r3, r1
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
          newPivot = *pTmp;
 8003574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	657b      	str	r3, [r7, #84]	; 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800357c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003580:	eeb0 7ae7 	vabs.f32	s14, s15
 8003584:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8003588:	eef0 7ae7 	vabs.f32	s15, s15
 800358c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003594:	dd06      	ble.n	80035a4 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 8003596:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800359a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            pivot = newPivot;
 800359e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 80035a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035a8:	3301      	adds	r3, #1
 80035aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80035ae:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80035b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d3cd      	bcc.n	8003554 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 80035b8:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80035bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80035c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c4:	f000 809b 	beq.w	80036fe <arm_mat_inverse_f32+0x2b4>
 80035c8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80035cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035d0:	429a      	cmp	r2, r3
 80035d2:	f000 8094 	beq.w	80036fe <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	885b      	ldrh	r3, [r3, #2]
 80035ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80035f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80035fa:	fb03 f202 	mul.w	r2, r3, r2
 80035fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003602:	4413      	add	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800360a:	4413      	add	r3, r2
 800360c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003612:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003616:	fb03 f202 	mul.w	r2, r3, r2
 800361a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800361e:	4413      	add	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003626:	4413      	add	r3, r2
 8003628:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800362c:	2300      	movs	r3, #0
 800362e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003632:	e018      	b.n	8003666 <arm_mat_inverse_f32+0x21c>
 8003634:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	63bb      	str	r3, [r7, #56]	; 0x38
 800363c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003640:	1d1a      	adds	r2, r3, #4
 8003642:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8003646:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800364a:	6812      	ldr	r2, [r2, #0]
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003652:	1d1a      	adds	r2, r3, #4
 8003654:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003658:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003660:	3301      	adds	r3, #1
 8003662:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003666:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800366a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800366c:	429a      	cmp	r2, r3
 800366e:	dbe1      	blt.n	8003634 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	885b      	ldrh	r3, [r3, #2]
 8003684:	647b      	str	r3, [r7, #68]	; 0x44
 8003686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003688:	643b      	str	r3, [r7, #64]	; 0x40
 800368a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800368c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800368e:	fb02 f303 	mul.w	r3, r2, r3
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003698:	4413      	add	r3, r2
 800369a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800369e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80036a4:	fb02 f303 	mul.w	r3, r2, r3
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80036ae:	4413      	add	r3, r2
 80036b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80036b4:	2300      	movs	r3, #0
 80036b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036ba:	e018      	b.n	80036ee <arm_mat_inverse_f32+0x2a4>
 80036bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036c8:	1d1a      	adds	r2, r3, #4
 80036ca:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80036ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80036d2:	6812      	ldr	r2, [r2, #0]
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80036da:	1d1a      	adds	r2, r3, #4
 80036dc:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80036e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80036e8:	3301      	adds	r3, #1
 80036ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80036f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036f4:	429a      	cmp	r2, r3
 80036f6:	dbe1      	blt.n	80036bc <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 80036f8:	2301      	movs	r3, #1
 80036fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 80036fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003702:	2b01      	cmp	r3, #1
 8003704:	d009      	beq.n	800371a <arm_mat_inverse_f32+0x2d0>
 8003706:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800370a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800370e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003712:	d102      	bne.n	800371a <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 8003714:	f06f 0304 	mvn.w	r3, #4
 8003718:	e208      	b.n	8003b2c <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800371a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800371e:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 8003722:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003726:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	885b      	ldrh	r3, [r3, #2]
 8003736:	637b      	str	r3, [r7, #52]	; 0x34
 8003738:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800373a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	633b      	str	r3, [r7, #48]	; 0x30
 8003742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003744:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003746:	fb03 f202 	mul.w	r2, r3, r2
 800374a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800374e:	4413      	add	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8003756:	4413      	add	r3, r2
 8003758:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800375c:	2300      	movs	r3, #0
 800375e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003762:	e011      	b.n	8003788 <arm_mat_inverse_f32+0x33e>
 8003764:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003768:	1d1a      	adds	r2, r3, #4
 800376a:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800376e:	ed93 7a00 	vldr	s14, [r3]
 8003772:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8003776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800377a:	edc3 7a00 	vstr	s15, [r3]
 800377e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003782:	3301      	adds	r3, #1
 8003784:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003788:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800378c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378e:	429a      	cmp	r2, r3
 8003790:	dbe8      	blt.n	8003764 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	885b      	ldrh	r3, [r3, #2]
 800379e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80037a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80037a8:	fb02 f303 	mul.w	r3, r2, r3
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80037b2:	4413      	add	r3, r2
 80037b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80037b8:	2300      	movs	r3, #0
 80037ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80037be:	e011      	b.n	80037e4 <arm_mat_inverse_f32+0x39a>
 80037c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037c4:	1d1a      	adds	r2, r3, #4
 80037c6:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80037ca:	ed93 7a00 	vldr	s14, [r3]
 80037ce:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80037d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037d6:	edc3 7a00 	vstr	s15, [r3]
 80037da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037de:	3301      	adds	r3, #1
 80037e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80037e4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80037e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ea:	429a      	cmp	r2, r3
 80037ec:	dbe8      	blt.n	80037c0 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 80037ee:	2300      	movs	r3, #0
 80037f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      for (;rowNb < pivotRow; rowNb++)
 80037f4:	e0ae      	b.n	8003954 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	885b      	ldrh	r3, [r3, #2]
 80037fe:	4619      	mov	r1, r3
 8003800:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003804:	fb03 f101 	mul.w	r1, r3, r1
 8003808:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800380c:	440b      	add	r3, r1
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           pivot = *pTmp;
 8003816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	885b      	ldrh	r3, [r3, #2]
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	613b      	str	r3, [r7, #16]
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003846:	fb03 f202 	mul.w	r2, r3, r2
 800384a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800384e:	4413      	add	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003856:	4413      	add	r3, r2
 8003858:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003860:	fb03 f202 	mul.w	r2, r3, r2
 8003864:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003868:	4413      	add	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003870:	4413      	add	r3, r2
 8003872:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003876:	2300      	movs	r3, #0
 8003878:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800387c:	e01a      	b.n	80038b4 <arm_mat_inverse_f32+0x46a>
 800387e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003882:	1d1a      	adds	r2, r3, #4
 8003884:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003888:	ed93 7a00 	vldr	s14, [r3]
 800388c:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8003890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003894:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003898:	1d1a      	adds	r2, r3, #4
 800389a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800389e:	ed93 7a00 	vldr	s14, [r3]
 80038a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038a6:	edc3 7a00 	vstr	s15, [r3]
 80038aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80038ae:	3301      	adds	r3, #1
 80038b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80038b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	dbdf      	blt.n	800387e <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	885b      	ldrh	r3, [r3, #2]
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	60bb      	str	r3, [r7, #8]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80038de:	fb02 f303 	mul.w	r3, r2, r3
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80038e8:	4413      	add	r3, r2
 80038ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80038f2:	fb02 f303 	mul.w	r3, r2, r3
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80038fc:	4413      	add	r3, r2
 80038fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003902:	2300      	movs	r3, #0
 8003904:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003908:	e01a      	b.n	8003940 <arm_mat_inverse_f32+0x4f6>
 800390a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800390e:	1d1a      	adds	r2, r3, #4
 8003910:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003914:	ed93 7a00 	vldr	s14, [r3]
 8003918:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800391c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003920:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003924:	1d1a      	adds	r2, r3, #4
 8003926:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800392a:	ed93 7a00 	vldr	s14, [r3]
 800392e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003932:	edc3 7a00 	vstr	s15, [r3]
 8003936:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800393a:	3301      	adds	r3, #1
 800393c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003940:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	429a      	cmp	r2, r3
 8003948:	dbdf      	blt.n	800390a <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800394a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800394e:	3301      	adds	r3, #1
 8003950:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003954:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800395a:	429a      	cmp	r2, r3
 800395c:	f4ff af4b 	bcc.w	80037f6 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8003960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003962:	3301      	adds	r3, #1
 8003964:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003968:	e092      	b.n	8003a90 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	885b      	ldrh	r3, [r3, #2]
 8003972:	4619      	mov	r1, r3
 8003974:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003978:	fb03 f101 	mul.w	r1, r3, r1
 800397c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003980:	440b      	add	r3, r1
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           pivot = *pTmp;
 800398a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	67bb      	str	r3, [r7, #120]	; 0x78
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	677b      	str	r3, [r7, #116]	; 0x74
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	885b      	ldrh	r3, [r3, #2]
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24
 80039a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	623b      	str	r3, [r7, #32]
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80039b6:	fb03 f202 	mul.w	r2, r3, r2
 80039ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039be:	4413      	add	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80039c4:	4413      	add	r3, r2
 80039c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80039cc:	fb03 f202 	mul.w	r2, r3, r2
 80039d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039d4:	4413      	add	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80039da:	4413      	add	r3, r2
 80039dc:	677b      	str	r3, [r7, #116]	; 0x74
 80039de:	2300      	movs	r3, #0
 80039e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80039e2:	e014      	b.n	8003a0e <arm_mat_inverse_f32+0x5c4>
 80039e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039e6:	1d1a      	adds	r2, r3, #4
 80039e8:	677a      	str	r2, [r7, #116]	; 0x74
 80039ea:	ed93 7a00 	vldr	s14, [r3]
 80039ee:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80039f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039f8:	1d1a      	adds	r2, r3, #4
 80039fa:	67ba      	str	r2, [r7, #120]	; 0x78
 80039fc:	ed93 7a00 	vldr	s14, [r3]
 8003a00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a04:	edc3 7a00 	vstr	s15, [r3]
 8003a08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a0e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	dbe6      	blt.n	80039e4 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	885b      	ldrh	r3, [r3, #2]
 8003a26:	61fb      	str	r3, [r7, #28]
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	61bb      	str	r3, [r7, #24]
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003a32:	fb02 f303 	mul.w	r3, r2, r3
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a3a:	4413      	add	r3, r2
 8003a3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003a42:	fb02 f303 	mul.w	r3, r2, r3
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a4a:	4413      	add	r3, r2
 8003a4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a4e:	2300      	movs	r3, #0
 8003a50:	673b      	str	r3, [r7, #112]	; 0x70
 8003a52:	e014      	b.n	8003a7e <arm_mat_inverse_f32+0x634>
 8003a54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a56:	1d1a      	adds	r2, r3, #4
 8003a58:	66ba      	str	r2, [r7, #104]	; 0x68
 8003a5a:	ed93 7a00 	vldr	s14, [r3]
 8003a5e:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8003a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a68:	1d1a      	adds	r2, r3, #4
 8003a6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a6c:	ed93 7a00 	vldr	s14, [r3]
 8003a70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a74:	edc3 7a00 	vstr	s15, [r3]
 8003a78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	673b      	str	r3, [r7, #112]	; 0x70
 8003a7e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	dbe6      	blt.n	8003a54 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8003a86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003a90:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003a94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a96:	429a      	cmp	r2, r3
 8003a98:	f4ff af67 	bcc.w	800396a <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 8003a9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003aa6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003aaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003aac:	429a      	cmp	r2, r3
 8003aae:	f4ff ad32 	bcc.w	8003516 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 8003ab8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d033      	beq.n	8003b28 <arm_mat_inverse_f32+0x6de>
 8003ac0:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8003ac4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003acc:	d12c      	bne.n	8003b28 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	667b      	str	r3, [r7, #100]	; 0x64
      for (i = 0; i < numRows * numCols; i++)
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ada:	e010      	b.n	8003afe <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 8003adc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003ae4:	4413      	add	r3, r2
 8003ae6:	edd3 7a00 	vldr	s15, [r3]
 8003aea:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af2:	d10d      	bne.n	8003b10 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 8003af4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003af8:	3301      	adds	r3, #1
 8003afa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003afe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b02:	fb02 f303 	mul.w	r3, r2, r3
 8003b06:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d3e6      	bcc.n	8003adc <arm_mat_inverse_f32+0x692>
 8003b0e:	e000      	b.n	8003b12 <arm_mat_inverse_f32+0x6c8>
            break;
 8003b10:	bf00      	nop
      }

      if (i == numRows * numCols)
 8003b12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b16:	fb02 f303 	mul.w	r3, r2, r3
 8003b1a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d102      	bne.n	8003b28 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 8003b22:	23fb      	movs	r3, #251	; 0xfb
 8003b24:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
    }
  }

  /* Return to application */
  return (status);
 8003b28:	f997 30c3 	ldrsb.w	r3, [r7, #195]	; 0xc3
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	37ec      	adds	r7, #236	; 0xec
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b093      	sub	sp, #76	; 0x4c
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	643b      	str	r3, [r7, #64]	; 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	881b      	ldrh	r3, [r3, #0]
 8003b66:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	885b      	ldrh	r3, [r3, #2]
 8003b6c:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	885b      	ldrh	r3, [r3, #2]
 8003b72:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 8003b74:	2300      	movs	r3, #0
 8003b76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b78:	8b7b      	ldrh	r3, [r7, #26]
 8003b7a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 8003b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	69fa      	ldr	r2, [r7, #28]
 8003b82:	4413      	add	r3, r2
 8003b84:	63bb      	str	r3, [r7, #56]	; 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 8003b86:	8b3b      	ldrh	r3, [r7, #24]
 8003b88:	633b      	str	r3, [r7, #48]	; 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	643b      	str	r3, [r7, #64]	; 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8003b90:	f04f 0300 	mov.w	r3, #0
 8003b94:	637b      	str	r3, [r7, #52]	; 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 8003b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b98:	647b      	str	r3, [r7, #68]	; 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 8003b9a:	8afb      	ldrh	r3, [r7, #22]
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 8003b9e:	e017      	b.n	8003bd0 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 8003ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ba2:	1d1a      	adds	r2, r3, #4
 8003ba4:	647a      	str	r2, [r7, #68]	; 0x44
 8003ba6:	ed93 7a00 	vldr	s14, [r3]
 8003baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bac:	edd3 7a00 	vldr	s15, [r3]
 8003bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003bb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bbc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
          pIn2 += numColsB;
 8003bc0:	8b3b      	ldrh	r3, [r7, #24]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bc6:	4413      	add	r3, r2
 8003bc8:	643b      	str	r3, [r7, #64]	; 0x40

          /* Decrement loop counter */
          colCnt--;
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	627b      	str	r3, [r7, #36]	; 0x24
        while (colCnt > 0U)
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1e4      	bne.n	8003ba0 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 8003bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd8:	1d1a      	adds	r2, r3, #4
 8003bda:	63ba      	str	r2, [r7, #56]	; 0x38
 8003bdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bde:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 8003be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be2:	3b01      	subs	r3, #1
 8003be4:	633b      	str	r3, [r7, #48]	; 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 8003be6:	8b3a      	ldrh	r2, [r7, #24]
 8003be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	6a3a      	ldr	r2, [r7, #32]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	643b      	str	r3, [r7, #64]	; 0x40

      } while (col > 0U);
 8003bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1ca      	bne.n	8003b90 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 8003bfa:	8b3b      	ldrh	r3, [r7, #24]
 8003bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bfe:	4413      	add	r3, r2
 8003c00:	62fb      	str	r3, [r7, #44]	; 0x2c
      pInA = pInA + numColsA;
 8003c02:	8afb      	ldrh	r3, [r7, #22]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c08:	4413      	add	r3, r2
 8003c0a:	63fb      	str	r3, [r7, #60]	; 0x3c

      /* Decrement row loop counter */
      row--;
 8003c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	62bb      	str	r3, [r7, #40]	; 0x28

    } while (row > 0U);
 8003c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1b1      	bne.n	8003b7c <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 8003c1c:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	374c      	adds	r7, #76	; 0x4c
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b08b      	sub	sp, #44	; 0x2c
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c38:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	881b      	ldrh	r3, [r3, #0]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	885b      	ldrh	r3, [r3, #2]
 8003c50:	fb02 f303 	mul.w	r3, r2, r3
 8003c54:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8003c5a:	e010      	b.n	8003c7e <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	1d1a      	adds	r2, r3, #4
 8003c60:	627a      	str	r2, [r7, #36]	; 0x24
 8003c62:	ed93 7a00 	vldr	s14, [r3]
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	1d1a      	adds	r2, r3, #4
 8003c6a:	623a      	str	r2, [r7, #32]
 8003c6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c74:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1eb      	bne.n	8003c5c <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8003c84:	2300      	movs	r3, #0
 8003c86:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 8003c88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	372c      	adds	r7, #44	; 0x2c
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b08b      	sub	sp, #44	; 0x2c
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	881b      	ldrh	r3, [r3, #0]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	885b      	ldrh	r3, [r3, #2]
 8003cc0:	fb02 f303 	mul.w	r3, r2, r3
 8003cc4:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8003cca:	e013      	b.n	8003cf4 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	1d1a      	adds	r2, r3, #4
 8003cd0:	627a      	str	r2, [r7, #36]	; 0x24
 8003cd2:	ed93 7a00 	vldr	s14, [r3]
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	1d1a      	adds	r2, r3, #4
 8003cda:	623a      	str	r2, [r7, #32]
 8003cdc:	edd3 7a00 	vldr	s15, [r3]
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	1d1a      	adds	r2, r3, #4
 8003ce4:	61fa      	str	r2, [r7, #28]
 8003ce6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cea:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1e8      	bne.n	8003ccc <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8003cfe:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	372c      	adds	r7, #44	; 0x2c
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b08b      	sub	sp, #44	; 0x2c
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
 8003d16:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	885b      	ldrh	r3, [r3, #2]
 8003d2e:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8003d30:	89fb      	ldrh	r3, [r7, #14]
 8003d32:	61bb      	str	r3, [r7, #24]
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	4413      	add	r3, r2
 8003d40:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8003d42:	89bb      	ldrh	r3, [r7, #12]
 8003d44:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8003d46:	e00d      	b.n	8003d64 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8003d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4a:	1d1a      	adds	r2, r3, #4
 8003d4c:	627a      	str	r2, [r7, #36]	; 0x24
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8003d54:	89fb      	ldrh	r3, [r7, #14]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	6a3a      	ldr	r2, [r7, #32]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	3b01      	subs	r3, #1
 8003d62:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1ee      	bne.n	8003d48 <arm_mat_trans_f32+0x3a>
      }

      i++;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	3b01      	subs	r3, #1
 8003d74:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1dd      	bne.n	8003d38 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 8003d80:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	372c      	adds	r7, #44	; 0x2c
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d94:	4b0e      	ldr	r3, [pc, #56]	; (8003dd0 <HAL_Init+0x40>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a0d      	ldr	r2, [pc, #52]	; (8003dd0 <HAL_Init+0x40>)
 8003d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003da0:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <HAL_Init+0x40>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a0a      	ldr	r2, [pc, #40]	; (8003dd0 <HAL_Init+0x40>)
 8003da6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003daa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dac:	4b08      	ldr	r3, [pc, #32]	; (8003dd0 <HAL_Init+0x40>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a07      	ldr	r2, [pc, #28]	; (8003dd0 <HAL_Init+0x40>)
 8003db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003db8:	2003      	movs	r0, #3
 8003dba:	f000 f92b 	bl	8004014 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	f000 f808 	bl	8003dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003dc4:	f7fe fc58 	bl	8002678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	40023c00 	.word	0x40023c00

08003dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ddc:	4b12      	ldr	r3, [pc, #72]	; (8003e28 <HAL_InitTick+0x54>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	4b12      	ldr	r3, [pc, #72]	; (8003e2c <HAL_InitTick+0x58>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	4619      	mov	r1, r3
 8003de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 f943 	bl	800407e <HAL_SYSTICK_Config>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e00e      	b.n	8003e20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b0f      	cmp	r3, #15
 8003e06:	d80a      	bhi.n	8003e1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e08:	2200      	movs	r2, #0
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e10:	f000 f90b 	bl	800402a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e14:	4a06      	ldr	r2, [pc, #24]	; (8003e30 <HAL_InitTick+0x5c>)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	e000      	b.n	8003e20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	20000010 	.word	0x20000010
 8003e2c:	20000018 	.word	0x20000018
 8003e30:	20000014 	.word	0x20000014

08003e34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e38:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <HAL_IncTick+0x20>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <HAL_IncTick+0x24>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4413      	add	r3, r2
 8003e44:	4a04      	ldr	r2, [pc, #16]	; (8003e58 <HAL_IncTick+0x24>)
 8003e46:	6013      	str	r3, [r2, #0]
}
 8003e48:	bf00      	nop
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	20000018 	.word	0x20000018
 8003e58:	2000059c 	.word	0x2000059c

08003e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8003e60:	4b03      	ldr	r3, [pc, #12]	; (8003e70 <HAL_GetTick+0x14>)
 8003e62:	681b      	ldr	r3, [r3, #0]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	2000059c 	.word	0x2000059c

08003e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e84:	4b0c      	ldr	r3, [pc, #48]	; (8003eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e90:	4013      	ands	r3, r2
 8003e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ea6:	4a04      	ldr	r2, [pc, #16]	; (8003eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	60d3      	str	r3, [r2, #12]
}
 8003eac:	bf00      	nop
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	e000ed00 	.word	0xe000ed00

08003ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ec0:	4b04      	ldr	r3, [pc, #16]	; (8003ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	0a1b      	lsrs	r3, r3, #8
 8003ec6:	f003 0307 	and.w	r3, r3, #7
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	e000ed00 	.word	0xe000ed00

08003ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	db0b      	blt.n	8003f02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eea:	79fb      	ldrb	r3, [r7, #7]
 8003eec:	f003 021f 	and.w	r2, r3, #31
 8003ef0:	4907      	ldr	r1, [pc, #28]	; (8003f10 <__NVIC_EnableIRQ+0x38>)
 8003ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef6:	095b      	lsrs	r3, r3, #5
 8003ef8:	2001      	movs	r0, #1
 8003efa:	fa00 f202 	lsl.w	r2, r0, r2
 8003efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f02:	bf00      	nop
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	e000e100 	.word	0xe000e100

08003f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	6039      	str	r1, [r7, #0]
 8003f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	db0a      	blt.n	8003f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	490c      	ldr	r1, [pc, #48]	; (8003f60 <__NVIC_SetPriority+0x4c>)
 8003f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f32:	0112      	lsls	r2, r2, #4
 8003f34:	b2d2      	uxtb	r2, r2
 8003f36:	440b      	add	r3, r1
 8003f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f3c:	e00a      	b.n	8003f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	4908      	ldr	r1, [pc, #32]	; (8003f64 <__NVIC_SetPriority+0x50>)
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	3b04      	subs	r3, #4
 8003f4c:	0112      	lsls	r2, r2, #4
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	440b      	add	r3, r1
 8003f52:	761a      	strb	r2, [r3, #24]
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	e000e100 	.word	0xe000e100
 8003f64:	e000ed00 	.word	0xe000ed00

08003f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b089      	sub	sp, #36	; 0x24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f003 0307 	and.w	r3, r3, #7
 8003f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	f1c3 0307 	rsb	r3, r3, #7
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	bf28      	it	cs
 8003f86:	2304      	movcs	r3, #4
 8003f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	2b06      	cmp	r3, #6
 8003f90:	d902      	bls.n	8003f98 <NVIC_EncodePriority+0x30>
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	3b03      	subs	r3, #3
 8003f96:	e000      	b.n	8003f9a <NVIC_EncodePriority+0x32>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa6:	43da      	mvns	r2, r3
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	401a      	ands	r2, r3
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fba:	43d9      	mvns	r1, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc0:	4313      	orrs	r3, r2
         );
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3724      	adds	r7, #36	; 0x24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
	...

08003fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fe0:	d301      	bcc.n	8003fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e00f      	b.n	8004006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fe6:	4a0a      	ldr	r2, [pc, #40]	; (8004010 <SysTick_Config+0x40>)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fee:	210f      	movs	r1, #15
 8003ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff4:	f7ff ff8e 	bl	8003f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ff8:	4b05      	ldr	r3, [pc, #20]	; (8004010 <SysTick_Config+0x40>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ffe:	4b04      	ldr	r3, [pc, #16]	; (8004010 <SysTick_Config+0x40>)
 8004000:	2207      	movs	r2, #7
 8004002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	e000e010 	.word	0xe000e010

08004014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f7ff ff29 	bl	8003e74 <__NVIC_SetPriorityGrouping>
}
 8004022:	bf00      	nop
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800402a:	b580      	push	{r7, lr}
 800402c:	b086      	sub	sp, #24
 800402e:	af00      	add	r7, sp, #0
 8004030:	4603      	mov	r3, r0
 8004032:	60b9      	str	r1, [r7, #8]
 8004034:	607a      	str	r2, [r7, #4]
 8004036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004038:	2300      	movs	r3, #0
 800403a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800403c:	f7ff ff3e 	bl	8003ebc <__NVIC_GetPriorityGrouping>
 8004040:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	68b9      	ldr	r1, [r7, #8]
 8004046:	6978      	ldr	r0, [r7, #20]
 8004048:	f7ff ff8e 	bl	8003f68 <NVIC_EncodePriority>
 800404c:	4602      	mov	r2, r0
 800404e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004052:	4611      	mov	r1, r2
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff ff5d 	bl	8003f14 <__NVIC_SetPriority>
}
 800405a:	bf00      	nop
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b082      	sub	sp, #8
 8004066:	af00      	add	r7, sp, #0
 8004068:	4603      	mov	r3, r0
 800406a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800406c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff ff31 	bl	8003ed8 <__NVIC_EnableIRQ>
}
 8004076:	bf00      	nop
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b082      	sub	sp, #8
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7ff ffa2 	bl	8003fd0 <SysTick_Config>
 800408c:	4603      	mov	r3, r0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
	...

08004098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004098:	b480      	push	{r7}
 800409a:	b089      	sub	sp, #36	; 0x24
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ae:	2300      	movs	r3, #0
 80040b0:	61fb      	str	r3, [r7, #28]
 80040b2:	e159      	b.n	8004368 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040b4:	2201      	movs	r2, #1
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	fa02 f303 	lsl.w	r3, r2, r3
 80040bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	4013      	ands	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	f040 8148 	bne.w	8004362 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d005      	beq.n	80040ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d130      	bne.n	800414c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	2203      	movs	r2, #3
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	43db      	mvns	r3, r3
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	4013      	ands	r3, r2
 8004100:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	4313      	orrs	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004120:	2201      	movs	r2, #1
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	43db      	mvns	r3, r3
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	4013      	ands	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	091b      	lsrs	r3, r3, #4
 8004136:	f003 0201 	and.w	r2, r3, #1
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	4313      	orrs	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f003 0303 	and.w	r3, r3, #3
 8004154:	2b03      	cmp	r3, #3
 8004156:	d017      	beq.n	8004188 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	2203      	movs	r2, #3
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	43db      	mvns	r3, r3
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	4013      	ands	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	4313      	orrs	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f003 0303 	and.w	r3, r3, #3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d123      	bne.n	80041dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	08da      	lsrs	r2, r3, #3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3208      	adds	r2, #8
 800419c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	220f      	movs	r2, #15
 80041ac:	fa02 f303 	lsl.w	r3, r2, r3
 80041b0:	43db      	mvns	r3, r3
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	4013      	ands	r3, r2
 80041b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	691a      	ldr	r2, [r3, #16]
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	f003 0307 	and.w	r3, r3, #7
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	08da      	lsrs	r2, r3, #3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3208      	adds	r2, #8
 80041d6:	69b9      	ldr	r1, [r7, #24]
 80041d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	2203      	movs	r2, #3
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	43db      	mvns	r3, r3
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	4013      	ands	r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f003 0203 	and.w	r2, r3, #3
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	4313      	orrs	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 80a2 	beq.w	8004362 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800421e:	2300      	movs	r3, #0
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	4b57      	ldr	r3, [pc, #348]	; (8004380 <HAL_GPIO_Init+0x2e8>)
 8004224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004226:	4a56      	ldr	r2, [pc, #344]	; (8004380 <HAL_GPIO_Init+0x2e8>)
 8004228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800422c:	6453      	str	r3, [r2, #68]	; 0x44
 800422e:	4b54      	ldr	r3, [pc, #336]	; (8004380 <HAL_GPIO_Init+0x2e8>)
 8004230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800423a:	4a52      	ldr	r2, [pc, #328]	; (8004384 <HAL_GPIO_Init+0x2ec>)
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	089b      	lsrs	r3, r3, #2
 8004240:	3302      	adds	r3, #2
 8004242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004246:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	220f      	movs	r2, #15
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	43db      	mvns	r3, r3
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	4013      	ands	r3, r2
 800425c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a49      	ldr	r2, [pc, #292]	; (8004388 <HAL_GPIO_Init+0x2f0>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d019      	beq.n	800429a <HAL_GPIO_Init+0x202>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a48      	ldr	r2, [pc, #288]	; (800438c <HAL_GPIO_Init+0x2f4>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d013      	beq.n	8004296 <HAL_GPIO_Init+0x1fe>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a47      	ldr	r2, [pc, #284]	; (8004390 <HAL_GPIO_Init+0x2f8>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d00d      	beq.n	8004292 <HAL_GPIO_Init+0x1fa>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a46      	ldr	r2, [pc, #280]	; (8004394 <HAL_GPIO_Init+0x2fc>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d007      	beq.n	800428e <HAL_GPIO_Init+0x1f6>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a45      	ldr	r2, [pc, #276]	; (8004398 <HAL_GPIO_Init+0x300>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d101      	bne.n	800428a <HAL_GPIO_Init+0x1f2>
 8004286:	2304      	movs	r3, #4
 8004288:	e008      	b.n	800429c <HAL_GPIO_Init+0x204>
 800428a:	2307      	movs	r3, #7
 800428c:	e006      	b.n	800429c <HAL_GPIO_Init+0x204>
 800428e:	2303      	movs	r3, #3
 8004290:	e004      	b.n	800429c <HAL_GPIO_Init+0x204>
 8004292:	2302      	movs	r3, #2
 8004294:	e002      	b.n	800429c <HAL_GPIO_Init+0x204>
 8004296:	2301      	movs	r3, #1
 8004298:	e000      	b.n	800429c <HAL_GPIO_Init+0x204>
 800429a:	2300      	movs	r3, #0
 800429c:	69fa      	ldr	r2, [r7, #28]
 800429e:	f002 0203 	and.w	r2, r2, #3
 80042a2:	0092      	lsls	r2, r2, #2
 80042a4:	4093      	lsls	r3, r2
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042ac:	4935      	ldr	r1, [pc, #212]	; (8004384 <HAL_GPIO_Init+0x2ec>)
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	089b      	lsrs	r3, r3, #2
 80042b2:	3302      	adds	r3, #2
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042ba:	4b38      	ldr	r3, [pc, #224]	; (800439c <HAL_GPIO_Init+0x304>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	43db      	mvns	r3, r3
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	4013      	ands	r3, r2
 80042c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042de:	4a2f      	ldr	r2, [pc, #188]	; (800439c <HAL_GPIO_Init+0x304>)
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042e4:	4b2d      	ldr	r3, [pc, #180]	; (800439c <HAL_GPIO_Init+0x304>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	43db      	mvns	r3, r3
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	4013      	ands	r3, r2
 80042f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	4313      	orrs	r3, r2
 8004306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004308:	4a24      	ldr	r2, [pc, #144]	; (800439c <HAL_GPIO_Init+0x304>)
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800430e:	4b23      	ldr	r3, [pc, #140]	; (800439c <HAL_GPIO_Init+0x304>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	43db      	mvns	r3, r3
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	4013      	ands	r3, r2
 800431c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	4313      	orrs	r3, r2
 8004330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004332:	4a1a      	ldr	r2, [pc, #104]	; (800439c <HAL_GPIO_Init+0x304>)
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004338:	4b18      	ldr	r3, [pc, #96]	; (800439c <HAL_GPIO_Init+0x304>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	43db      	mvns	r3, r3
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	4013      	ands	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	4313      	orrs	r3, r2
 800435a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800435c:	4a0f      	ldr	r2, [pc, #60]	; (800439c <HAL_GPIO_Init+0x304>)
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	3301      	adds	r3, #1
 8004366:	61fb      	str	r3, [r7, #28]
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	2b0f      	cmp	r3, #15
 800436c:	f67f aea2 	bls.w	80040b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004370:	bf00      	nop
 8004372:	bf00      	nop
 8004374:	3724      	adds	r7, #36	; 0x24
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	40023800 	.word	0x40023800
 8004384:	40013800 	.word	0x40013800
 8004388:	40020000 	.word	0x40020000
 800438c:	40020400 	.word	0x40020400
 8004390:	40020800 	.word	0x40020800
 8004394:	40020c00 	.word	0x40020c00
 8004398:	40021000 	.word	0x40021000
 800439c:	40013c00 	.word	0x40013c00

080043a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	460b      	mov	r3, r1
 80043aa:	807b      	strh	r3, [r7, #2]
 80043ac:	4613      	mov	r3, r2
 80043ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043b0:	787b      	ldrb	r3, [r7, #1]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043b6:	887a      	ldrh	r2, [r7, #2]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043bc:	e003      	b.n	80043c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043be:	887b      	ldrh	r3, [r7, #2]
 80043c0:	041a      	lsls	r2, r3, #16
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	619a      	str	r2, [r3, #24]
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
	...

080043d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e12b      	b.n	800463e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d106      	bne.n	8004400 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fd ff06 	bl	800220c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2224      	movs	r2, #36	; 0x24
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f022 0201 	bic.w	r2, r2, #1
 8004416:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004426:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004436:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004438:	f000 fd80 	bl	8004f3c <HAL_RCC_GetPCLK1Freq>
 800443c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	4a81      	ldr	r2, [pc, #516]	; (8004648 <HAL_I2C_Init+0x274>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d807      	bhi.n	8004458 <HAL_I2C_Init+0x84>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4a80      	ldr	r2, [pc, #512]	; (800464c <HAL_I2C_Init+0x278>)
 800444c:	4293      	cmp	r3, r2
 800444e:	bf94      	ite	ls
 8004450:	2301      	movls	r3, #1
 8004452:	2300      	movhi	r3, #0
 8004454:	b2db      	uxtb	r3, r3
 8004456:	e006      	b.n	8004466 <HAL_I2C_Init+0x92>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4a7d      	ldr	r2, [pc, #500]	; (8004650 <HAL_I2C_Init+0x27c>)
 800445c:	4293      	cmp	r3, r2
 800445e:	bf94      	ite	ls
 8004460:	2301      	movls	r3, #1
 8004462:	2300      	movhi	r3, #0
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e0e7      	b.n	800463e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	4a78      	ldr	r2, [pc, #480]	; (8004654 <HAL_I2C_Init+0x280>)
 8004472:	fba2 2303 	umull	r2, r3, r2, r3
 8004476:	0c9b      	lsrs	r3, r3, #18
 8004478:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	430a      	orrs	r2, r1
 800448c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	4a6a      	ldr	r2, [pc, #424]	; (8004648 <HAL_I2C_Init+0x274>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d802      	bhi.n	80044a8 <HAL_I2C_Init+0xd4>
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	3301      	adds	r3, #1
 80044a6:	e009      	b.n	80044bc <HAL_I2C_Init+0xe8>
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80044ae:	fb02 f303 	mul.w	r3, r2, r3
 80044b2:	4a69      	ldr	r2, [pc, #420]	; (8004658 <HAL_I2C_Init+0x284>)
 80044b4:	fba2 2303 	umull	r2, r3, r2, r3
 80044b8:	099b      	lsrs	r3, r3, #6
 80044ba:	3301      	adds	r3, #1
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6812      	ldr	r2, [r2, #0]
 80044c0:	430b      	orrs	r3, r1
 80044c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80044ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	495c      	ldr	r1, [pc, #368]	; (8004648 <HAL_I2C_Init+0x274>)
 80044d8:	428b      	cmp	r3, r1
 80044da:	d819      	bhi.n	8004510 <HAL_I2C_Init+0x13c>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	1e59      	subs	r1, r3, #1
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80044ea:	1c59      	adds	r1, r3, #1
 80044ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80044f0:	400b      	ands	r3, r1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <HAL_I2C_Init+0x138>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	1e59      	subs	r1, r3, #1
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	fbb1 f3f3 	udiv	r3, r1, r3
 8004504:	3301      	adds	r3, #1
 8004506:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800450a:	e051      	b.n	80045b0 <HAL_I2C_Init+0x1dc>
 800450c:	2304      	movs	r3, #4
 800450e:	e04f      	b.n	80045b0 <HAL_I2C_Init+0x1dc>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d111      	bne.n	800453c <HAL_I2C_Init+0x168>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	1e58      	subs	r0, r3, #1
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6859      	ldr	r1, [r3, #4]
 8004520:	460b      	mov	r3, r1
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	440b      	add	r3, r1
 8004526:	fbb0 f3f3 	udiv	r3, r0, r3
 800452a:	3301      	adds	r3, #1
 800452c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004530:	2b00      	cmp	r3, #0
 8004532:	bf0c      	ite	eq
 8004534:	2301      	moveq	r3, #1
 8004536:	2300      	movne	r3, #0
 8004538:	b2db      	uxtb	r3, r3
 800453a:	e012      	b.n	8004562 <HAL_I2C_Init+0x18e>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	1e58      	subs	r0, r3, #1
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6859      	ldr	r1, [r3, #4]
 8004544:	460b      	mov	r3, r1
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	440b      	add	r3, r1
 800454a:	0099      	lsls	r1, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004552:	3301      	adds	r3, #1
 8004554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004558:	2b00      	cmp	r3, #0
 800455a:	bf0c      	ite	eq
 800455c:	2301      	moveq	r3, #1
 800455e:	2300      	movne	r3, #0
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <HAL_I2C_Init+0x196>
 8004566:	2301      	movs	r3, #1
 8004568:	e022      	b.n	80045b0 <HAL_I2C_Init+0x1dc>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10e      	bne.n	8004590 <HAL_I2C_Init+0x1bc>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	1e58      	subs	r0, r3, #1
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6859      	ldr	r1, [r3, #4]
 800457a:	460b      	mov	r3, r1
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	440b      	add	r3, r1
 8004580:	fbb0 f3f3 	udiv	r3, r0, r3
 8004584:	3301      	adds	r3, #1
 8004586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800458a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800458e:	e00f      	b.n	80045b0 <HAL_I2C_Init+0x1dc>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	1e58      	subs	r0, r3, #1
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6859      	ldr	r1, [r3, #4]
 8004598:	460b      	mov	r3, r1
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	440b      	add	r3, r1
 800459e:	0099      	lsls	r1, r3, #2
 80045a0:	440b      	add	r3, r1
 80045a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80045a6:	3301      	adds	r3, #1
 80045a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045b0:	6879      	ldr	r1, [r7, #4]
 80045b2:	6809      	ldr	r1, [r1, #0]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69da      	ldr	r2, [r3, #28]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	431a      	orrs	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80045de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6911      	ldr	r1, [r2, #16]
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	68d2      	ldr	r2, [r2, #12]
 80045ea:	4311      	orrs	r1, r2
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6812      	ldr	r2, [r2, #0]
 80045f0:	430b      	orrs	r3, r1
 80045f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	695a      	ldr	r2, [r3, #20]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	431a      	orrs	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0201 	orr.w	r2, r2, #1
 800461e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2220      	movs	r2, #32
 800462a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	000186a0 	.word	0x000186a0
 800464c:	001e847f 	.word	0x001e847f
 8004650:	003d08ff 	.word	0x003d08ff
 8004654:	431bde83 	.word	0x431bde83
 8004658:	10624dd3 	.word	0x10624dd3

0800465c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e267      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d075      	beq.n	8004766 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800467a:	4b88      	ldr	r3, [pc, #544]	; (800489c <HAL_RCC_OscConfig+0x240>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 030c 	and.w	r3, r3, #12
 8004682:	2b04      	cmp	r3, #4
 8004684:	d00c      	beq.n	80046a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004686:	4b85      	ldr	r3, [pc, #532]	; (800489c <HAL_RCC_OscConfig+0x240>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800468e:	2b08      	cmp	r3, #8
 8004690:	d112      	bne.n	80046b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004692:	4b82      	ldr	r3, [pc, #520]	; (800489c <HAL_RCC_OscConfig+0x240>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800469a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800469e:	d10b      	bne.n	80046b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046a0:	4b7e      	ldr	r3, [pc, #504]	; (800489c <HAL_RCC_OscConfig+0x240>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d05b      	beq.n	8004764 <HAL_RCC_OscConfig+0x108>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d157      	bne.n	8004764 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e242      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c0:	d106      	bne.n	80046d0 <HAL_RCC_OscConfig+0x74>
 80046c2:	4b76      	ldr	r3, [pc, #472]	; (800489c <HAL_RCC_OscConfig+0x240>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a75      	ldr	r2, [pc, #468]	; (800489c <HAL_RCC_OscConfig+0x240>)
 80046c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046cc:	6013      	str	r3, [r2, #0]
 80046ce:	e01d      	b.n	800470c <HAL_RCC_OscConfig+0xb0>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046d8:	d10c      	bne.n	80046f4 <HAL_RCC_OscConfig+0x98>
 80046da:	4b70      	ldr	r3, [pc, #448]	; (800489c <HAL_RCC_OscConfig+0x240>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a6f      	ldr	r2, [pc, #444]	; (800489c <HAL_RCC_OscConfig+0x240>)
 80046e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	4b6d      	ldr	r3, [pc, #436]	; (800489c <HAL_RCC_OscConfig+0x240>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a6c      	ldr	r2, [pc, #432]	; (800489c <HAL_RCC_OscConfig+0x240>)
 80046ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046f0:	6013      	str	r3, [r2, #0]
 80046f2:	e00b      	b.n	800470c <HAL_RCC_OscConfig+0xb0>
 80046f4:	4b69      	ldr	r3, [pc, #420]	; (800489c <HAL_RCC_OscConfig+0x240>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a68      	ldr	r2, [pc, #416]	; (800489c <HAL_RCC_OscConfig+0x240>)
 80046fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046fe:	6013      	str	r3, [r2, #0]
 8004700:	4b66      	ldr	r3, [pc, #408]	; (800489c <HAL_RCC_OscConfig+0x240>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a65      	ldr	r2, [pc, #404]	; (800489c <HAL_RCC_OscConfig+0x240>)
 8004706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800470a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d013      	beq.n	800473c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004714:	f7ff fba2 	bl	8003e5c <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800471a:	e008      	b.n	800472e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800471c:	f7ff fb9e 	bl	8003e5c <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b64      	cmp	r3, #100	; 0x64
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e207      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800472e:	4b5b      	ldr	r3, [pc, #364]	; (800489c <HAL_RCC_OscConfig+0x240>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0f0      	beq.n	800471c <HAL_RCC_OscConfig+0xc0>
 800473a:	e014      	b.n	8004766 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800473c:	f7ff fb8e 	bl	8003e5c <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004744:	f7ff fb8a 	bl	8003e5c <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b64      	cmp	r3, #100	; 0x64
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e1f3      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004756:	4b51      	ldr	r3, [pc, #324]	; (800489c <HAL_RCC_OscConfig+0x240>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1f0      	bne.n	8004744 <HAL_RCC_OscConfig+0xe8>
 8004762:	e000      	b.n	8004766 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d063      	beq.n	800483a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004772:	4b4a      	ldr	r3, [pc, #296]	; (800489c <HAL_RCC_OscConfig+0x240>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f003 030c 	and.w	r3, r3, #12
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00b      	beq.n	8004796 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800477e:	4b47      	ldr	r3, [pc, #284]	; (800489c <HAL_RCC_OscConfig+0x240>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004786:	2b08      	cmp	r3, #8
 8004788:	d11c      	bne.n	80047c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800478a:	4b44      	ldr	r3, [pc, #272]	; (800489c <HAL_RCC_OscConfig+0x240>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d116      	bne.n	80047c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004796:	4b41      	ldr	r3, [pc, #260]	; (800489c <HAL_RCC_OscConfig+0x240>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d005      	beq.n	80047ae <HAL_RCC_OscConfig+0x152>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d001      	beq.n	80047ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e1c7      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ae:	4b3b      	ldr	r3, [pc, #236]	; (800489c <HAL_RCC_OscConfig+0x240>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	4937      	ldr	r1, [pc, #220]	; (800489c <HAL_RCC_OscConfig+0x240>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047c2:	e03a      	b.n	800483a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d020      	beq.n	800480e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047cc:	4b34      	ldr	r3, [pc, #208]	; (80048a0 <HAL_RCC_OscConfig+0x244>)
 80047ce:	2201      	movs	r2, #1
 80047d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d2:	f7ff fb43 	bl	8003e5c <HAL_GetTick>
 80047d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d8:	e008      	b.n	80047ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047da:	f7ff fb3f 	bl	8003e5c <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d901      	bls.n	80047ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e1a8      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ec:	4b2b      	ldr	r3, [pc, #172]	; (800489c <HAL_RCC_OscConfig+0x240>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0f0      	beq.n	80047da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f8:	4b28      	ldr	r3, [pc, #160]	; (800489c <HAL_RCC_OscConfig+0x240>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	00db      	lsls	r3, r3, #3
 8004806:	4925      	ldr	r1, [pc, #148]	; (800489c <HAL_RCC_OscConfig+0x240>)
 8004808:	4313      	orrs	r3, r2
 800480a:	600b      	str	r3, [r1, #0]
 800480c:	e015      	b.n	800483a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800480e:	4b24      	ldr	r3, [pc, #144]	; (80048a0 <HAL_RCC_OscConfig+0x244>)
 8004810:	2200      	movs	r2, #0
 8004812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004814:	f7ff fb22 	bl	8003e5c <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800481c:	f7ff fb1e 	bl	8003e5c <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e187      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800482e:	4b1b      	ldr	r3, [pc, #108]	; (800489c <HAL_RCC_OscConfig+0x240>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1f0      	bne.n	800481c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0308 	and.w	r3, r3, #8
 8004842:	2b00      	cmp	r3, #0
 8004844:	d036      	beq.n	80048b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d016      	beq.n	800487c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800484e:	4b15      	ldr	r3, [pc, #84]	; (80048a4 <HAL_RCC_OscConfig+0x248>)
 8004850:	2201      	movs	r2, #1
 8004852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004854:	f7ff fb02 	bl	8003e5c <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800485c:	f7ff fafe 	bl	8003e5c <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e167      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800486e:	4b0b      	ldr	r3, [pc, #44]	; (800489c <HAL_RCC_OscConfig+0x240>)
 8004870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0f0      	beq.n	800485c <HAL_RCC_OscConfig+0x200>
 800487a:	e01b      	b.n	80048b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800487c:	4b09      	ldr	r3, [pc, #36]	; (80048a4 <HAL_RCC_OscConfig+0x248>)
 800487e:	2200      	movs	r2, #0
 8004880:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004882:	f7ff faeb 	bl	8003e5c <HAL_GetTick>
 8004886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004888:	e00e      	b.n	80048a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800488a:	f7ff fae7 	bl	8003e5c <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d907      	bls.n	80048a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e150      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
 800489c:	40023800 	.word	0x40023800
 80048a0:	42470000 	.word	0x42470000
 80048a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048a8:	4b88      	ldr	r3, [pc, #544]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 80048aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1ea      	bne.n	800488a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 8097 	beq.w	80049f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048c2:	2300      	movs	r3, #0
 80048c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048c6:	4b81      	ldr	r3, [pc, #516]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10f      	bne.n	80048f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048d2:	2300      	movs	r3, #0
 80048d4:	60bb      	str	r3, [r7, #8]
 80048d6:	4b7d      	ldr	r3, [pc, #500]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	4a7c      	ldr	r2, [pc, #496]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 80048dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048e0:	6413      	str	r3, [r2, #64]	; 0x40
 80048e2:	4b7a      	ldr	r3, [pc, #488]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ea:	60bb      	str	r3, [r7, #8]
 80048ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ee:	2301      	movs	r3, #1
 80048f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f2:	4b77      	ldr	r3, [pc, #476]	; (8004ad0 <HAL_RCC_OscConfig+0x474>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d118      	bne.n	8004930 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048fe:	4b74      	ldr	r3, [pc, #464]	; (8004ad0 <HAL_RCC_OscConfig+0x474>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a73      	ldr	r2, [pc, #460]	; (8004ad0 <HAL_RCC_OscConfig+0x474>)
 8004904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004908:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800490a:	f7ff faa7 	bl	8003e5c <HAL_GetTick>
 800490e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004910:	e008      	b.n	8004924 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004912:	f7ff faa3 	bl	8003e5c <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e10c      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004924:	4b6a      	ldr	r3, [pc, #424]	; (8004ad0 <HAL_RCC_OscConfig+0x474>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492c:	2b00      	cmp	r3, #0
 800492e:	d0f0      	beq.n	8004912 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d106      	bne.n	8004946 <HAL_RCC_OscConfig+0x2ea>
 8004938:	4b64      	ldr	r3, [pc, #400]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 800493a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493c:	4a63      	ldr	r2, [pc, #396]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 800493e:	f043 0301 	orr.w	r3, r3, #1
 8004942:	6713      	str	r3, [r2, #112]	; 0x70
 8004944:	e01c      	b.n	8004980 <HAL_RCC_OscConfig+0x324>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	2b05      	cmp	r3, #5
 800494c:	d10c      	bne.n	8004968 <HAL_RCC_OscConfig+0x30c>
 800494e:	4b5f      	ldr	r3, [pc, #380]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 8004950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004952:	4a5e      	ldr	r2, [pc, #376]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 8004954:	f043 0304 	orr.w	r3, r3, #4
 8004958:	6713      	str	r3, [r2, #112]	; 0x70
 800495a:	4b5c      	ldr	r3, [pc, #368]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 800495c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495e:	4a5b      	ldr	r2, [pc, #364]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 8004960:	f043 0301 	orr.w	r3, r3, #1
 8004964:	6713      	str	r3, [r2, #112]	; 0x70
 8004966:	e00b      	b.n	8004980 <HAL_RCC_OscConfig+0x324>
 8004968:	4b58      	ldr	r3, [pc, #352]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 800496a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496c:	4a57      	ldr	r2, [pc, #348]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 800496e:	f023 0301 	bic.w	r3, r3, #1
 8004972:	6713      	str	r3, [r2, #112]	; 0x70
 8004974:	4b55      	ldr	r3, [pc, #340]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 8004976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004978:	4a54      	ldr	r2, [pc, #336]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 800497a:	f023 0304 	bic.w	r3, r3, #4
 800497e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d015      	beq.n	80049b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004988:	f7ff fa68 	bl	8003e5c <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800498e:	e00a      	b.n	80049a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004990:	f7ff fa64 	bl	8003e5c <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	f241 3288 	movw	r2, #5000	; 0x1388
 800499e:	4293      	cmp	r3, r2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e0cb      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049a6:	4b49      	ldr	r3, [pc, #292]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 80049a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0ee      	beq.n	8004990 <HAL_RCC_OscConfig+0x334>
 80049b2:	e014      	b.n	80049de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b4:	f7ff fa52 	bl	8003e5c <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ba:	e00a      	b.n	80049d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049bc:	f7ff fa4e 	bl	8003e5c <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e0b5      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049d2:	4b3e      	ldr	r3, [pc, #248]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 80049d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1ee      	bne.n	80049bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049de:	7dfb      	ldrb	r3, [r7, #23]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d105      	bne.n	80049f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049e4:	4b39      	ldr	r3, [pc, #228]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 80049e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e8:	4a38      	ldr	r2, [pc, #224]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 80049ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 80a1 	beq.w	8004b3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049fa:	4b34      	ldr	r3, [pc, #208]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 030c 	and.w	r3, r3, #12
 8004a02:	2b08      	cmp	r3, #8
 8004a04:	d05c      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d141      	bne.n	8004a92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a0e:	4b31      	ldr	r3, [pc, #196]	; (8004ad4 <HAL_RCC_OscConfig+0x478>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a14:	f7ff fa22 	bl	8003e5c <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a1c:	f7ff fa1e 	bl	8003e5c <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e087      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a2e:	4b27      	ldr	r3, [pc, #156]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1f0      	bne.n	8004a1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	69da      	ldr	r2, [r3, #28]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	431a      	orrs	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a48:	019b      	lsls	r3, r3, #6
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a50:	085b      	lsrs	r3, r3, #1
 8004a52:	3b01      	subs	r3, #1
 8004a54:	041b      	lsls	r3, r3, #16
 8004a56:	431a      	orrs	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5c:	061b      	lsls	r3, r3, #24
 8004a5e:	491b      	ldr	r1, [pc, #108]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a64:	4b1b      	ldr	r3, [pc, #108]	; (8004ad4 <HAL_RCC_OscConfig+0x478>)
 8004a66:	2201      	movs	r2, #1
 8004a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a6a:	f7ff f9f7 	bl	8003e5c <HAL_GetTick>
 8004a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a70:	e008      	b.n	8004a84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a72:	f7ff f9f3 	bl	8003e5c <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d901      	bls.n	8004a84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e05c      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a84:	4b11      	ldr	r3, [pc, #68]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0f0      	beq.n	8004a72 <HAL_RCC_OscConfig+0x416>
 8004a90:	e054      	b.n	8004b3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a92:	4b10      	ldr	r3, [pc, #64]	; (8004ad4 <HAL_RCC_OscConfig+0x478>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a98:	f7ff f9e0 	bl	8003e5c <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aa0:	f7ff f9dc 	bl	8003e5c <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e045      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ab2:	4b06      	ldr	r3, [pc, #24]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1f0      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x444>
 8004abe:	e03d      	b.n	8004b3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d107      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e038      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	40007000 	.word	0x40007000
 8004ad4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ad8:	4b1b      	ldr	r3, [pc, #108]	; (8004b48 <HAL_RCC_OscConfig+0x4ec>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d028      	beq.n	8004b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d121      	bne.n	8004b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d11a      	bne.n	8004b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b08:	4013      	ands	r3, r2
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d111      	bne.n	8004b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1e:	085b      	lsrs	r3, r3, #1
 8004b20:	3b01      	subs	r3, #1
 8004b22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d107      	bne.n	8004b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d001      	beq.n	8004b3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e000      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3718      	adds	r7, #24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	40023800 	.word	0x40023800

08004b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e0cc      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b60:	4b68      	ldr	r3, [pc, #416]	; (8004d04 <HAL_RCC_ClockConfig+0x1b8>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d90c      	bls.n	8004b88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b6e:	4b65      	ldr	r3, [pc, #404]	; (8004d04 <HAL_RCC_ClockConfig+0x1b8>)
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b76:	4b63      	ldr	r3, [pc, #396]	; (8004d04 <HAL_RCC_ClockConfig+0x1b8>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d001      	beq.n	8004b88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e0b8      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d020      	beq.n	8004bd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d005      	beq.n	8004bac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ba0:	4b59      	ldr	r3, [pc, #356]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	4a58      	ldr	r2, [pc, #352]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004baa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0308 	and.w	r3, r3, #8
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d005      	beq.n	8004bc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bb8:	4b53      	ldr	r3, [pc, #332]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	4a52      	ldr	r2, [pc, #328]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bc4:	4b50      	ldr	r3, [pc, #320]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	494d      	ldr	r1, [pc, #308]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d044      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d107      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bea:	4b47      	ldr	r3, [pc, #284]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d119      	bne.n	8004c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e07f      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d003      	beq.n	8004c0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c06:	2b03      	cmp	r3, #3
 8004c08:	d107      	bne.n	8004c1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c0a:	4b3f      	ldr	r3, [pc, #252]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d109      	bne.n	8004c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e06f      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c1a:	4b3b      	ldr	r3, [pc, #236]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e067      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c2a:	4b37      	ldr	r3, [pc, #220]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f023 0203 	bic.w	r2, r3, #3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	4934      	ldr	r1, [pc, #208]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c3c:	f7ff f90e 	bl	8003e5c <HAL_GetTick>
 8004c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c42:	e00a      	b.n	8004c5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c44:	f7ff f90a 	bl	8003e5c <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e04f      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c5a:	4b2b      	ldr	r3, [pc, #172]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 020c 	and.w	r2, r3, #12
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d1eb      	bne.n	8004c44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c6c:	4b25      	ldr	r3, [pc, #148]	; (8004d04 <HAL_RCC_ClockConfig+0x1b8>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d20c      	bcs.n	8004c94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c7a:	4b22      	ldr	r3, [pc, #136]	; (8004d04 <HAL_RCC_ClockConfig+0x1b8>)
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c82:	4b20      	ldr	r3, [pc, #128]	; (8004d04 <HAL_RCC_ClockConfig+0x1b8>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d001      	beq.n	8004c94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e032      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d008      	beq.n	8004cb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ca0:	4b19      	ldr	r3, [pc, #100]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	4916      	ldr	r1, [pc, #88]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d009      	beq.n	8004cd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cbe:	4b12      	ldr	r3, [pc, #72]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	490e      	ldr	r1, [pc, #56]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cd2:	f000 f821 	bl	8004d18 <HAL_RCC_GetSysClockFreq>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	4b0b      	ldr	r3, [pc, #44]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	091b      	lsrs	r3, r3, #4
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	490a      	ldr	r1, [pc, #40]	; (8004d0c <HAL_RCC_ClockConfig+0x1c0>)
 8004ce4:	5ccb      	ldrb	r3, [r1, r3]
 8004ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cea:	4a09      	ldr	r2, [pc, #36]	; (8004d10 <HAL_RCC_ClockConfig+0x1c4>)
 8004cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cee:	4b09      	ldr	r3, [pc, #36]	; (8004d14 <HAL_RCC_ClockConfig+0x1c8>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7ff f86e 	bl	8003dd4 <HAL_InitTick>

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	40023c00 	.word	0x40023c00
 8004d08:	40023800 	.word	0x40023800
 8004d0c:	08007e5c 	.word	0x08007e5c
 8004d10:	20000010 	.word	0x20000010
 8004d14:	20000014 	.word	0x20000014

08004d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d1c:	b094      	sub	sp, #80	; 0x50
 8004d1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	647b      	str	r3, [r7, #68]	; 0x44
 8004d24:	2300      	movs	r3, #0
 8004d26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d28:	2300      	movs	r3, #0
 8004d2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d30:	4b79      	ldr	r3, [pc, #484]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f003 030c 	and.w	r3, r3, #12
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d00d      	beq.n	8004d58 <HAL_RCC_GetSysClockFreq+0x40>
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	f200 80e1 	bhi.w	8004f04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d002      	beq.n	8004d4c <HAL_RCC_GetSysClockFreq+0x34>
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d003      	beq.n	8004d52 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d4a:	e0db      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d4c:	4b73      	ldr	r3, [pc, #460]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x204>)
 8004d4e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004d50:	e0db      	b.n	8004f0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d52:	4b73      	ldr	r3, [pc, #460]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d56:	e0d8      	b.n	8004f0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d58:	4b6f      	ldr	r3, [pc, #444]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d60:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d62:	4b6d      	ldr	r3, [pc, #436]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d063      	beq.n	8004e36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d6e:	4b6a      	ldr	r3, [pc, #424]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	099b      	lsrs	r3, r3, #6
 8004d74:	2200      	movs	r2, #0
 8004d76:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d80:	633b      	str	r3, [r7, #48]	; 0x30
 8004d82:	2300      	movs	r3, #0
 8004d84:	637b      	str	r3, [r7, #52]	; 0x34
 8004d86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d8a:	4622      	mov	r2, r4
 8004d8c:	462b      	mov	r3, r5
 8004d8e:	f04f 0000 	mov.w	r0, #0
 8004d92:	f04f 0100 	mov.w	r1, #0
 8004d96:	0159      	lsls	r1, r3, #5
 8004d98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d9c:	0150      	lsls	r0, r2, #5
 8004d9e:	4602      	mov	r2, r0
 8004da0:	460b      	mov	r3, r1
 8004da2:	4621      	mov	r1, r4
 8004da4:	1a51      	subs	r1, r2, r1
 8004da6:	6139      	str	r1, [r7, #16]
 8004da8:	4629      	mov	r1, r5
 8004daa:	eb63 0301 	sbc.w	r3, r3, r1
 8004dae:	617b      	str	r3, [r7, #20]
 8004db0:	f04f 0200 	mov.w	r2, #0
 8004db4:	f04f 0300 	mov.w	r3, #0
 8004db8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dbc:	4659      	mov	r1, fp
 8004dbe:	018b      	lsls	r3, r1, #6
 8004dc0:	4651      	mov	r1, sl
 8004dc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004dc6:	4651      	mov	r1, sl
 8004dc8:	018a      	lsls	r2, r1, #6
 8004dca:	4651      	mov	r1, sl
 8004dcc:	ebb2 0801 	subs.w	r8, r2, r1
 8004dd0:	4659      	mov	r1, fp
 8004dd2:	eb63 0901 	sbc.w	r9, r3, r1
 8004dd6:	f04f 0200 	mov.w	r2, #0
 8004dda:	f04f 0300 	mov.w	r3, #0
 8004dde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004de2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004de6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dea:	4690      	mov	r8, r2
 8004dec:	4699      	mov	r9, r3
 8004dee:	4623      	mov	r3, r4
 8004df0:	eb18 0303 	adds.w	r3, r8, r3
 8004df4:	60bb      	str	r3, [r7, #8]
 8004df6:	462b      	mov	r3, r5
 8004df8:	eb49 0303 	adc.w	r3, r9, r3
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	f04f 0200 	mov.w	r2, #0
 8004e02:	f04f 0300 	mov.w	r3, #0
 8004e06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e0a:	4629      	mov	r1, r5
 8004e0c:	024b      	lsls	r3, r1, #9
 8004e0e:	4621      	mov	r1, r4
 8004e10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e14:	4621      	mov	r1, r4
 8004e16:	024a      	lsls	r2, r1, #9
 8004e18:	4610      	mov	r0, r2
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e1e:	2200      	movs	r2, #0
 8004e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e28:	f7fb feba 	bl	8000ba0 <__aeabi_uldivmod>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	460b      	mov	r3, r1
 8004e30:	4613      	mov	r3, r2
 8004e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e34:	e058      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e36:	4b38      	ldr	r3, [pc, #224]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	099b      	lsrs	r3, r3, #6
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	4618      	mov	r0, r3
 8004e40:	4611      	mov	r1, r2
 8004e42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e46:	623b      	str	r3, [r7, #32]
 8004e48:	2300      	movs	r3, #0
 8004e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e50:	4642      	mov	r2, r8
 8004e52:	464b      	mov	r3, r9
 8004e54:	f04f 0000 	mov.w	r0, #0
 8004e58:	f04f 0100 	mov.w	r1, #0
 8004e5c:	0159      	lsls	r1, r3, #5
 8004e5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e62:	0150      	lsls	r0, r2, #5
 8004e64:	4602      	mov	r2, r0
 8004e66:	460b      	mov	r3, r1
 8004e68:	4641      	mov	r1, r8
 8004e6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e6e:	4649      	mov	r1, r9
 8004e70:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	f04f 0300 	mov.w	r3, #0
 8004e7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e88:	ebb2 040a 	subs.w	r4, r2, sl
 8004e8c:	eb63 050b 	sbc.w	r5, r3, fp
 8004e90:	f04f 0200 	mov.w	r2, #0
 8004e94:	f04f 0300 	mov.w	r3, #0
 8004e98:	00eb      	lsls	r3, r5, #3
 8004e9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e9e:	00e2      	lsls	r2, r4, #3
 8004ea0:	4614      	mov	r4, r2
 8004ea2:	461d      	mov	r5, r3
 8004ea4:	4643      	mov	r3, r8
 8004ea6:	18e3      	adds	r3, r4, r3
 8004ea8:	603b      	str	r3, [r7, #0]
 8004eaa:	464b      	mov	r3, r9
 8004eac:	eb45 0303 	adc.w	r3, r5, r3
 8004eb0:	607b      	str	r3, [r7, #4]
 8004eb2:	f04f 0200 	mov.w	r2, #0
 8004eb6:	f04f 0300 	mov.w	r3, #0
 8004eba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ebe:	4629      	mov	r1, r5
 8004ec0:	028b      	lsls	r3, r1, #10
 8004ec2:	4621      	mov	r1, r4
 8004ec4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ec8:	4621      	mov	r1, r4
 8004eca:	028a      	lsls	r2, r1, #10
 8004ecc:	4610      	mov	r0, r2
 8004ece:	4619      	mov	r1, r3
 8004ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	61bb      	str	r3, [r7, #24]
 8004ed6:	61fa      	str	r2, [r7, #28]
 8004ed8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004edc:	f7fb fe60 	bl	8000ba0 <__aeabi_uldivmod>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ee8:	4b0b      	ldr	r3, [pc, #44]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	0c1b      	lsrs	r3, r3, #16
 8004eee:	f003 0303 	and.w	r3, r3, #3
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004ef8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f02:	e002      	b.n	8004f0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f04:	4b05      	ldr	r3, [pc, #20]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x204>)
 8004f06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3750      	adds	r7, #80	; 0x50
 8004f10:	46bd      	mov	sp, r7
 8004f12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f16:	bf00      	nop
 8004f18:	40023800 	.word	0x40023800
 8004f1c:	00f42400 	.word	0x00f42400
 8004f20:	007a1200 	.word	0x007a1200

08004f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f28:	4b03      	ldr	r3, [pc, #12]	; (8004f38 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	20000010 	.word	0x20000010

08004f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f40:	f7ff fff0 	bl	8004f24 <HAL_RCC_GetHCLKFreq>
 8004f44:	4602      	mov	r2, r0
 8004f46:	4b05      	ldr	r3, [pc, #20]	; (8004f5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	0a9b      	lsrs	r3, r3, #10
 8004f4c:	f003 0307 	and.w	r3, r3, #7
 8004f50:	4903      	ldr	r1, [pc, #12]	; (8004f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f52:	5ccb      	ldrb	r3, [r1, r3]
 8004f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	08007e6c 	.word	0x08007e6c

08004f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f68:	f7ff ffdc 	bl	8004f24 <HAL_RCC_GetHCLKFreq>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	4b05      	ldr	r3, [pc, #20]	; (8004f84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	0b5b      	lsrs	r3, r3, #13
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	4903      	ldr	r1, [pc, #12]	; (8004f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f7a:	5ccb      	ldrb	r3, [r1, r3]
 8004f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	40023800 	.word	0x40023800
 8004f88:	08007e6c 	.word	0x08007e6c

08004f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e041      	b.n	8005022 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d106      	bne.n	8004fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7fd fd96 	bl	8002ae4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2202      	movs	r2, #2
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	4619      	mov	r1, r3
 8004fca:	4610      	mov	r0, r2
 8004fcc:	f000 fd88 	bl	8005ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
	...

0800502c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b01      	cmp	r3, #1
 800503e:	d001      	beq.n	8005044 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e044      	b.n	80050ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2202      	movs	r2, #2
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68da      	ldr	r2, [r3, #12]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0201 	orr.w	r2, r2, #1
 800505a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a1e      	ldr	r2, [pc, #120]	; (80050dc <HAL_TIM_Base_Start_IT+0xb0>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d018      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x6c>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800506e:	d013      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x6c>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a1a      	ldr	r2, [pc, #104]	; (80050e0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d00e      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x6c>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a19      	ldr	r2, [pc, #100]	; (80050e4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d009      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x6c>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a17      	ldr	r2, [pc, #92]	; (80050e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d004      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x6c>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a16      	ldr	r2, [pc, #88]	; (80050ec <HAL_TIM_Base_Start_IT+0xc0>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d111      	bne.n	80050bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b06      	cmp	r3, #6
 80050a8:	d010      	beq.n	80050cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f042 0201 	orr.w	r2, r2, #1
 80050b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ba:	e007      	b.n	80050cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f042 0201 	orr.w	r2, r2, #1
 80050ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	40010000 	.word	0x40010000
 80050e0:	40000400 	.word	0x40000400
 80050e4:	40000800 	.word	0x40000800
 80050e8:	40000c00 	.word	0x40000c00
 80050ec:	40014000 	.word	0x40014000

080050f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e041      	b.n	8005186 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d106      	bne.n	800511c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f839 	bl	800518e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3304      	adds	r3, #4
 800512c:	4619      	mov	r1, r3
 800512e:	4610      	mov	r0, r2
 8005130:	f000 fcd6 	bl	8005ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800518e:	b480      	push	{r7}
 8005190:	b083      	sub	sp, #12
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
	...

080051a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d109      	bne.n	80051c8 <HAL_TIM_PWM_Start+0x24>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b01      	cmp	r3, #1
 80051be:	bf14      	ite	ne
 80051c0:	2301      	movne	r3, #1
 80051c2:	2300      	moveq	r3, #0
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	e022      	b.n	800520e <HAL_TIM_PWM_Start+0x6a>
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	d109      	bne.n	80051e2 <HAL_TIM_PWM_Start+0x3e>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	bf14      	ite	ne
 80051da:	2301      	movne	r3, #1
 80051dc:	2300      	moveq	r3, #0
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	e015      	b.n	800520e <HAL_TIM_PWM_Start+0x6a>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	d109      	bne.n	80051fc <HAL_TIM_PWM_Start+0x58>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	bf14      	ite	ne
 80051f4:	2301      	movne	r3, #1
 80051f6:	2300      	moveq	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	e008      	b.n	800520e <HAL_TIM_PWM_Start+0x6a>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b01      	cmp	r3, #1
 8005206:	bf14      	ite	ne
 8005208:	2301      	movne	r3, #1
 800520a:	2300      	moveq	r3, #0
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e068      	b.n	80052e8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d104      	bne.n	8005226 <HAL_TIM_PWM_Start+0x82>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005224:	e013      	b.n	800524e <HAL_TIM_PWM_Start+0xaa>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b04      	cmp	r3, #4
 800522a:	d104      	bne.n	8005236 <HAL_TIM_PWM_Start+0x92>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2202      	movs	r2, #2
 8005230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005234:	e00b      	b.n	800524e <HAL_TIM_PWM_Start+0xaa>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	2b08      	cmp	r3, #8
 800523a:	d104      	bne.n	8005246 <HAL_TIM_PWM_Start+0xa2>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005244:	e003      	b.n	800524e <HAL_TIM_PWM_Start+0xaa>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2202      	movs	r2, #2
 800524a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2201      	movs	r2, #1
 8005254:	6839      	ldr	r1, [r7, #0]
 8005256:	4618      	mov	r0, r3
 8005258:	f000 fee8 	bl	800602c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a23      	ldr	r2, [pc, #140]	; (80052f0 <HAL_TIM_PWM_Start+0x14c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d107      	bne.n	8005276 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005274:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a1d      	ldr	r2, [pc, #116]	; (80052f0 <HAL_TIM_PWM_Start+0x14c>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d018      	beq.n	80052b2 <HAL_TIM_PWM_Start+0x10e>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005288:	d013      	beq.n	80052b2 <HAL_TIM_PWM_Start+0x10e>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a19      	ldr	r2, [pc, #100]	; (80052f4 <HAL_TIM_PWM_Start+0x150>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d00e      	beq.n	80052b2 <HAL_TIM_PWM_Start+0x10e>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a17      	ldr	r2, [pc, #92]	; (80052f8 <HAL_TIM_PWM_Start+0x154>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d009      	beq.n	80052b2 <HAL_TIM_PWM_Start+0x10e>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a16      	ldr	r2, [pc, #88]	; (80052fc <HAL_TIM_PWM_Start+0x158>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d004      	beq.n	80052b2 <HAL_TIM_PWM_Start+0x10e>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a14      	ldr	r2, [pc, #80]	; (8005300 <HAL_TIM_PWM_Start+0x15c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d111      	bne.n	80052d6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f003 0307 	and.w	r3, r3, #7
 80052bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2b06      	cmp	r3, #6
 80052c2:	d010      	beq.n	80052e6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0201 	orr.w	r2, r2, #1
 80052d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d4:	e007      	b.n	80052e6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f042 0201 	orr.w	r2, r2, #1
 80052e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	40010000 	.word	0x40010000
 80052f4:	40000400 	.word	0x40000400
 80052f8:	40000800 	.word	0x40000800
 80052fc:	40000c00 	.word	0x40000c00
 8005300:	40014000 	.word	0x40014000

08005304 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d101      	bne.n	8005318 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e097      	b.n	8005448 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	d106      	bne.n	8005332 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f7fd fb8b 	bl	8002a48 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2202      	movs	r2, #2
 8005336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	6812      	ldr	r2, [r2, #0]
 8005344:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005348:	f023 0307 	bic.w	r3, r3, #7
 800534c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	3304      	adds	r3, #4
 8005356:	4619      	mov	r1, r3
 8005358:	4610      	mov	r0, r2
 800535a:	f000 fbc1 	bl	8005ae0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	4313      	orrs	r3, r2
 800537e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005386:	f023 0303 	bic.w	r3, r3, #3
 800538a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	689a      	ldr	r2, [r3, #8]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	021b      	lsls	r3, r3, #8
 8005396:	4313      	orrs	r3, r2
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	4313      	orrs	r3, r2
 800539c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80053a4:	f023 030c 	bic.w	r3, r3, #12
 80053a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	021b      	lsls	r3, r3, #8
 80053c0:	4313      	orrs	r3, r2
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	011a      	lsls	r2, r3, #4
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	031b      	lsls	r3, r3, #12
 80053d4:	4313      	orrs	r3, r2
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	4313      	orrs	r3, r2
 80053da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80053e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80053ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	4313      	orrs	r3, r2
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3718      	adds	r7, #24
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005460:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005468:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005470:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005478:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d110      	bne.n	80054a2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005480:	7bfb      	ldrb	r3, [r7, #15]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d102      	bne.n	800548c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005486:	7b7b      	ldrb	r3, [r7, #13]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d001      	beq.n	8005490 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e069      	b.n	8005564 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054a0:	e031      	b.n	8005506 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2b04      	cmp	r3, #4
 80054a6:	d110      	bne.n	80054ca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054a8:	7bbb      	ldrb	r3, [r7, #14]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d102      	bne.n	80054b4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054ae:	7b3b      	ldrb	r3, [r7, #12]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d001      	beq.n	80054b8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e055      	b.n	8005564 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054c8:	e01d      	b.n	8005506 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054ca:	7bfb      	ldrb	r3, [r7, #15]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d108      	bne.n	80054e2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054d0:	7bbb      	ldrb	r3, [r7, #14]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d105      	bne.n	80054e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054d6:	7b7b      	ldrb	r3, [r7, #13]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d102      	bne.n	80054e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054dc:	7b3b      	ldrb	r3, [r7, #12]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d001      	beq.n	80054e6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e03e      	b.n	8005564 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2202      	movs	r2, #2
 80054ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2202      	movs	r2, #2
 80054f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2202      	movs	r2, #2
 80054fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2202      	movs	r2, #2
 8005502:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <HAL_TIM_Encoder_Start+0xc4>
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	2b04      	cmp	r3, #4
 8005510:	d008      	beq.n	8005524 <HAL_TIM_Encoder_Start+0xd4>
 8005512:	e00f      	b.n	8005534 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2201      	movs	r2, #1
 800551a:	2100      	movs	r1, #0
 800551c:	4618      	mov	r0, r3
 800551e:	f000 fd85 	bl	800602c <TIM_CCxChannelCmd>
      break;
 8005522:	e016      	b.n	8005552 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2201      	movs	r2, #1
 800552a:	2104      	movs	r1, #4
 800552c:	4618      	mov	r0, r3
 800552e:	f000 fd7d 	bl	800602c <TIM_CCxChannelCmd>
      break;
 8005532:	e00e      	b.n	8005552 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2201      	movs	r2, #1
 800553a:	2100      	movs	r1, #0
 800553c:	4618      	mov	r0, r3
 800553e:	f000 fd75 	bl	800602c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2201      	movs	r2, #1
 8005548:	2104      	movs	r1, #4
 800554a:	4618      	mov	r0, r3
 800554c:	f000 fd6e 	bl	800602c <TIM_CCxChannelCmd>
      break;
 8005550:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f042 0201 	orr.w	r2, r2, #1
 8005560:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b02      	cmp	r3, #2
 8005580:	d122      	bne.n	80055c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b02      	cmp	r3, #2
 800558e:	d11b      	bne.n	80055c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f06f 0202 	mvn.w	r2, #2
 8005598:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	f003 0303 	and.w	r3, r3, #3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fa77 	bl	8005aa2 <HAL_TIM_IC_CaptureCallback>
 80055b4:	e005      	b.n	80055c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fa69 	bl	8005a8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 fa7a 	bl	8005ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f003 0304 	and.w	r3, r3, #4
 80055d2:	2b04      	cmp	r3, #4
 80055d4:	d122      	bne.n	800561c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b04      	cmp	r3, #4
 80055e2:	d11b      	bne.n	800561c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f06f 0204 	mvn.w	r2, #4
 80055ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2202      	movs	r2, #2
 80055f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fa4d 	bl	8005aa2 <HAL_TIM_IC_CaptureCallback>
 8005608:	e005      	b.n	8005616 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 fa3f 	bl	8005a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 fa50 	bl	8005ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f003 0308 	and.w	r3, r3, #8
 8005626:	2b08      	cmp	r3, #8
 8005628:	d122      	bne.n	8005670 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b08      	cmp	r3, #8
 8005636:	d11b      	bne.n	8005670 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f06f 0208 	mvn.w	r2, #8
 8005640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2204      	movs	r2, #4
 8005646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	f003 0303 	and.w	r3, r3, #3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fa23 	bl	8005aa2 <HAL_TIM_IC_CaptureCallback>
 800565c:	e005      	b.n	800566a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 fa15 	bl	8005a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 fa26 	bl	8005ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f003 0310 	and.w	r3, r3, #16
 800567a:	2b10      	cmp	r3, #16
 800567c:	d122      	bne.n	80056c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f003 0310 	and.w	r3, r3, #16
 8005688:	2b10      	cmp	r3, #16
 800568a:	d11b      	bne.n	80056c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f06f 0210 	mvn.w	r2, #16
 8005694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2208      	movs	r2, #8
 800569a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f9f9 	bl	8005aa2 <HAL_TIM_IC_CaptureCallback>
 80056b0:	e005      	b.n	80056be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f9eb 	bl	8005a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f9fc 	bl	8005ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d10e      	bne.n	80056f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d107      	bne.n	80056f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f06f 0201 	mvn.w	r2, #1
 80056e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7fc fee0 	bl	80024b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056fa:	2b80      	cmp	r3, #128	; 0x80
 80056fc:	d10e      	bne.n	800571c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005708:	2b80      	cmp	r3, #128	; 0x80
 800570a:	d107      	bne.n	800571c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fd26 	bl	8006168 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005726:	2b40      	cmp	r3, #64	; 0x40
 8005728:	d10e      	bne.n	8005748 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005734:	2b40      	cmp	r3, #64	; 0x40
 8005736:	d107      	bne.n	8005748 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f9c1 	bl	8005aca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	f003 0320 	and.w	r3, r3, #32
 8005752:	2b20      	cmp	r3, #32
 8005754:	d10e      	bne.n	8005774 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f003 0320 	and.w	r3, r3, #32
 8005760:	2b20      	cmp	r3, #32
 8005762:	d107      	bne.n	8005774 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f06f 0220 	mvn.w	r2, #32
 800576c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 fcf0 	bl	8006154 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005774:	bf00      	nop
 8005776:	3708      	adds	r7, #8
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005788:	2300      	movs	r3, #0
 800578a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005792:	2b01      	cmp	r3, #1
 8005794:	d101      	bne.n	800579a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005796:	2302      	movs	r3, #2
 8005798:	e0ae      	b.n	80058f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b0c      	cmp	r3, #12
 80057a6:	f200 809f 	bhi.w	80058e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80057aa:	a201      	add	r2, pc, #4	; (adr r2, 80057b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b0:	080057e5 	.word	0x080057e5
 80057b4:	080058e9 	.word	0x080058e9
 80057b8:	080058e9 	.word	0x080058e9
 80057bc:	080058e9 	.word	0x080058e9
 80057c0:	08005825 	.word	0x08005825
 80057c4:	080058e9 	.word	0x080058e9
 80057c8:	080058e9 	.word	0x080058e9
 80057cc:	080058e9 	.word	0x080058e9
 80057d0:	08005867 	.word	0x08005867
 80057d4:	080058e9 	.word	0x080058e9
 80057d8:	080058e9 	.word	0x080058e9
 80057dc:	080058e9 	.word	0x080058e9
 80057e0:	080058a7 	.word	0x080058a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68b9      	ldr	r1, [r7, #8]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 f9f8 	bl	8005be0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	699a      	ldr	r2, [r3, #24]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f042 0208 	orr.w	r2, r2, #8
 80057fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	699a      	ldr	r2, [r3, #24]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0204 	bic.w	r2, r2, #4
 800580e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6999      	ldr	r1, [r3, #24]
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	691a      	ldr	r2, [r3, #16]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	619a      	str	r2, [r3, #24]
      break;
 8005822:	e064      	b.n	80058ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68b9      	ldr	r1, [r7, #8]
 800582a:	4618      	mov	r0, r3
 800582c:	f000 fa3e 	bl	8005cac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	699a      	ldr	r2, [r3, #24]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800583e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	699a      	ldr	r2, [r3, #24]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800584e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6999      	ldr	r1, [r3, #24]
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	021a      	lsls	r2, r3, #8
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	430a      	orrs	r2, r1
 8005862:	619a      	str	r2, [r3, #24]
      break;
 8005864:	e043      	b.n	80058ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68b9      	ldr	r1, [r7, #8]
 800586c:	4618      	mov	r0, r3
 800586e:	f000 fa89 	bl	8005d84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	69da      	ldr	r2, [r3, #28]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f042 0208 	orr.w	r2, r2, #8
 8005880:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	69da      	ldr	r2, [r3, #28]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 0204 	bic.w	r2, r2, #4
 8005890:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	69d9      	ldr	r1, [r3, #28]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	691a      	ldr	r2, [r3, #16]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	430a      	orrs	r2, r1
 80058a2:	61da      	str	r2, [r3, #28]
      break;
 80058a4:	e023      	b.n	80058ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68b9      	ldr	r1, [r7, #8]
 80058ac:	4618      	mov	r0, r3
 80058ae:	f000 fad3 	bl	8005e58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	69da      	ldr	r2, [r3, #28]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	69da      	ldr	r2, [r3, #28]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	69d9      	ldr	r1, [r3, #28]
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	021a      	lsls	r2, r3, #8
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	430a      	orrs	r2, r1
 80058e4:	61da      	str	r2, [r3, #28]
      break;
 80058e6:	e002      	b.n	80058ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	75fb      	strb	r3, [r7, #23]
      break;
 80058ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3718      	adds	r7, #24
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800590a:	2300      	movs	r3, #0
 800590c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005914:	2b01      	cmp	r3, #1
 8005916:	d101      	bne.n	800591c <HAL_TIM_ConfigClockSource+0x1c>
 8005918:	2302      	movs	r3, #2
 800591a:	e0b4      	b.n	8005a86 <HAL_TIM_ConfigClockSource+0x186>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2202      	movs	r2, #2
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800593a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005942:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005954:	d03e      	beq.n	80059d4 <HAL_TIM_ConfigClockSource+0xd4>
 8005956:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800595a:	f200 8087 	bhi.w	8005a6c <HAL_TIM_ConfigClockSource+0x16c>
 800595e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005962:	f000 8086 	beq.w	8005a72 <HAL_TIM_ConfigClockSource+0x172>
 8005966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800596a:	d87f      	bhi.n	8005a6c <HAL_TIM_ConfigClockSource+0x16c>
 800596c:	2b70      	cmp	r3, #112	; 0x70
 800596e:	d01a      	beq.n	80059a6 <HAL_TIM_ConfigClockSource+0xa6>
 8005970:	2b70      	cmp	r3, #112	; 0x70
 8005972:	d87b      	bhi.n	8005a6c <HAL_TIM_ConfigClockSource+0x16c>
 8005974:	2b60      	cmp	r3, #96	; 0x60
 8005976:	d050      	beq.n	8005a1a <HAL_TIM_ConfigClockSource+0x11a>
 8005978:	2b60      	cmp	r3, #96	; 0x60
 800597a:	d877      	bhi.n	8005a6c <HAL_TIM_ConfigClockSource+0x16c>
 800597c:	2b50      	cmp	r3, #80	; 0x50
 800597e:	d03c      	beq.n	80059fa <HAL_TIM_ConfigClockSource+0xfa>
 8005980:	2b50      	cmp	r3, #80	; 0x50
 8005982:	d873      	bhi.n	8005a6c <HAL_TIM_ConfigClockSource+0x16c>
 8005984:	2b40      	cmp	r3, #64	; 0x40
 8005986:	d058      	beq.n	8005a3a <HAL_TIM_ConfigClockSource+0x13a>
 8005988:	2b40      	cmp	r3, #64	; 0x40
 800598a:	d86f      	bhi.n	8005a6c <HAL_TIM_ConfigClockSource+0x16c>
 800598c:	2b30      	cmp	r3, #48	; 0x30
 800598e:	d064      	beq.n	8005a5a <HAL_TIM_ConfigClockSource+0x15a>
 8005990:	2b30      	cmp	r3, #48	; 0x30
 8005992:	d86b      	bhi.n	8005a6c <HAL_TIM_ConfigClockSource+0x16c>
 8005994:	2b20      	cmp	r3, #32
 8005996:	d060      	beq.n	8005a5a <HAL_TIM_ConfigClockSource+0x15a>
 8005998:	2b20      	cmp	r3, #32
 800599a:	d867      	bhi.n	8005a6c <HAL_TIM_ConfigClockSource+0x16c>
 800599c:	2b00      	cmp	r3, #0
 800599e:	d05c      	beq.n	8005a5a <HAL_TIM_ConfigClockSource+0x15a>
 80059a0:	2b10      	cmp	r3, #16
 80059a2:	d05a      	beq.n	8005a5a <HAL_TIM_ConfigClockSource+0x15a>
 80059a4:	e062      	b.n	8005a6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6818      	ldr	r0, [r3, #0]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	6899      	ldr	r1, [r3, #8]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f000 fb19 	bl	8005fec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	609a      	str	r2, [r3, #8]
      break;
 80059d2:	e04f      	b.n	8005a74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6818      	ldr	r0, [r3, #0]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	6899      	ldr	r1, [r3, #8]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f000 fb02 	bl	8005fec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689a      	ldr	r2, [r3, #8]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059f6:	609a      	str	r2, [r3, #8]
      break;
 80059f8:	e03c      	b.n	8005a74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6818      	ldr	r0, [r3, #0]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	6859      	ldr	r1, [r3, #4]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	461a      	mov	r2, r3
 8005a08:	f000 fa76 	bl	8005ef8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2150      	movs	r1, #80	; 0x50
 8005a12:	4618      	mov	r0, r3
 8005a14:	f000 facf 	bl	8005fb6 <TIM_ITRx_SetConfig>
      break;
 8005a18:	e02c      	b.n	8005a74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6818      	ldr	r0, [r3, #0]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	6859      	ldr	r1, [r3, #4]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	461a      	mov	r2, r3
 8005a28:	f000 fa95 	bl	8005f56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2160      	movs	r1, #96	; 0x60
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 fabf 	bl	8005fb6 <TIM_ITRx_SetConfig>
      break;
 8005a38:	e01c      	b.n	8005a74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6818      	ldr	r0, [r3, #0]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	6859      	ldr	r1, [r3, #4]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	461a      	mov	r2, r3
 8005a48:	f000 fa56 	bl	8005ef8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2140      	movs	r1, #64	; 0x40
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 faaf 	bl	8005fb6 <TIM_ITRx_SetConfig>
      break;
 8005a58:	e00c      	b.n	8005a74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4619      	mov	r1, r3
 8005a64:	4610      	mov	r0, r2
 8005a66:	f000 faa6 	bl	8005fb6 <TIM_ITRx_SetConfig>
      break;
 8005a6a:	e003      	b.n	8005a74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a70:	e000      	b.n	8005a74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b083      	sub	sp, #12
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b083      	sub	sp, #12
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005aaa:	bf00      	nop
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b083      	sub	sp, #12
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005abe:	bf00      	nop
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr

08005aca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b083      	sub	sp, #12
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ad2:	bf00      	nop
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
	...

08005ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a34      	ldr	r2, [pc, #208]	; (8005bc4 <TIM_Base_SetConfig+0xe4>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d00f      	beq.n	8005b18 <TIM_Base_SetConfig+0x38>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005afe:	d00b      	beq.n	8005b18 <TIM_Base_SetConfig+0x38>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a31      	ldr	r2, [pc, #196]	; (8005bc8 <TIM_Base_SetConfig+0xe8>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d007      	beq.n	8005b18 <TIM_Base_SetConfig+0x38>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a30      	ldr	r2, [pc, #192]	; (8005bcc <TIM_Base_SetConfig+0xec>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d003      	beq.n	8005b18 <TIM_Base_SetConfig+0x38>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a2f      	ldr	r2, [pc, #188]	; (8005bd0 <TIM_Base_SetConfig+0xf0>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d108      	bne.n	8005b2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a25      	ldr	r2, [pc, #148]	; (8005bc4 <TIM_Base_SetConfig+0xe4>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d01b      	beq.n	8005b6a <TIM_Base_SetConfig+0x8a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b38:	d017      	beq.n	8005b6a <TIM_Base_SetConfig+0x8a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a22      	ldr	r2, [pc, #136]	; (8005bc8 <TIM_Base_SetConfig+0xe8>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d013      	beq.n	8005b6a <TIM_Base_SetConfig+0x8a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a21      	ldr	r2, [pc, #132]	; (8005bcc <TIM_Base_SetConfig+0xec>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d00f      	beq.n	8005b6a <TIM_Base_SetConfig+0x8a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a20      	ldr	r2, [pc, #128]	; (8005bd0 <TIM_Base_SetConfig+0xf0>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d00b      	beq.n	8005b6a <TIM_Base_SetConfig+0x8a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a1f      	ldr	r2, [pc, #124]	; (8005bd4 <TIM_Base_SetConfig+0xf4>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d007      	beq.n	8005b6a <TIM_Base_SetConfig+0x8a>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a1e      	ldr	r2, [pc, #120]	; (8005bd8 <TIM_Base_SetConfig+0xf8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d003      	beq.n	8005b6a <TIM_Base_SetConfig+0x8a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a1d      	ldr	r2, [pc, #116]	; (8005bdc <TIM_Base_SetConfig+0xfc>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d108      	bne.n	8005b7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a08      	ldr	r2, [pc, #32]	; (8005bc4 <TIM_Base_SetConfig+0xe4>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d103      	bne.n	8005bb0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	691a      	ldr	r2, [r3, #16]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	615a      	str	r2, [r3, #20]
}
 8005bb6:	bf00      	nop
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	40010000 	.word	0x40010000
 8005bc8:	40000400 	.word	0x40000400
 8005bcc:	40000800 	.word	0x40000800
 8005bd0:	40000c00 	.word	0x40000c00
 8005bd4:	40014000 	.word	0x40014000
 8005bd8:	40014400 	.word	0x40014400
 8005bdc:	40014800 	.word	0x40014800

08005be0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	f023 0201 	bic.w	r2, r3, #1
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f023 0303 	bic.w	r3, r3, #3
 8005c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f023 0302 	bic.w	r3, r3, #2
 8005c28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a1c      	ldr	r2, [pc, #112]	; (8005ca8 <TIM_OC1_SetConfig+0xc8>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d10c      	bne.n	8005c56 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	f023 0308 	bic.w	r3, r3, #8
 8005c42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f023 0304 	bic.w	r3, r3, #4
 8005c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a13      	ldr	r2, [pc, #76]	; (8005ca8 <TIM_OC1_SetConfig+0xc8>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d111      	bne.n	8005c82 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	621a      	str	r2, [r3, #32]
}
 8005c9c:	bf00      	nop
 8005c9e:	371c      	adds	r7, #28
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	40010000 	.word	0x40010000

08005cac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b087      	sub	sp, #28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	f023 0210 	bic.w	r2, r3, #16
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	021b      	lsls	r3, r3, #8
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	f023 0320 	bic.w	r3, r3, #32
 8005cf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	011b      	lsls	r3, r3, #4
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a1e      	ldr	r2, [pc, #120]	; (8005d80 <TIM_OC2_SetConfig+0xd4>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d10d      	bne.n	8005d28 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	011b      	lsls	r3, r3, #4
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a15      	ldr	r2, [pc, #84]	; (8005d80 <TIM_OC2_SetConfig+0xd4>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d113      	bne.n	8005d58 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	621a      	str	r2, [r3, #32]
}
 8005d72:	bf00      	nop
 8005d74:	371c      	adds	r7, #28
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	40010000 	.word	0x40010000

08005d84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b087      	sub	sp, #28
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	69db      	ldr	r3, [r3, #28]
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0303 	bic.w	r3, r3, #3
 8005dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005dcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	021b      	lsls	r3, r3, #8
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a1d      	ldr	r2, [pc, #116]	; (8005e54 <TIM_OC3_SetConfig+0xd0>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d10d      	bne.n	8005dfe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005de8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	021b      	lsls	r3, r3, #8
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a14      	ldr	r2, [pc, #80]	; (8005e54 <TIM_OC3_SetConfig+0xd0>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d113      	bne.n	8005e2e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	011b      	lsls	r3, r3, #4
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	011b      	lsls	r3, r3, #4
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	621a      	str	r2, [r3, #32]
}
 8005e48:	bf00      	nop
 8005e4a:	371c      	adds	r7, #28
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr
 8005e54:	40010000 	.word	0x40010000

08005e58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	021b      	lsls	r3, r3, #8
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ea2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	031b      	lsls	r3, r3, #12
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a10      	ldr	r2, [pc, #64]	; (8005ef4 <TIM_OC4_SetConfig+0x9c>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d109      	bne.n	8005ecc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ebe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	695b      	ldr	r3, [r3, #20]
 8005ec4:	019b      	lsls	r3, r3, #6
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	621a      	str	r2, [r3, #32]
}
 8005ee6:	bf00      	nop
 8005ee8:	371c      	adds	r7, #28
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	40010000 	.word	0x40010000

08005ef8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b087      	sub	sp, #28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	f023 0201 	bic.w	r2, r3, #1
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	011b      	lsls	r3, r3, #4
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	f023 030a 	bic.w	r3, r3, #10
 8005f34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	621a      	str	r2, [r3, #32]
}
 8005f4a:	bf00      	nop
 8005f4c:	371c      	adds	r7, #28
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b087      	sub	sp, #28
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	60f8      	str	r0, [r7, #12]
 8005f5e:	60b9      	str	r1, [r7, #8]
 8005f60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	f023 0210 	bic.w	r2, r3, #16
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6a1b      	ldr	r3, [r3, #32]
 8005f78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	031b      	lsls	r3, r3, #12
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	011b      	lsls	r3, r3, #4
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	621a      	str	r2, [r3, #32]
}
 8005faa:	bf00      	nop
 8005fac:	371c      	adds	r7, #28
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b085      	sub	sp, #20
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	f043 0307 	orr.w	r3, r3, #7
 8005fd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	609a      	str	r2, [r3, #8]
}
 8005fe0:	bf00      	nop
 8005fe2:	3714      	adds	r7, #20
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
 8005ff8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006006:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	021a      	lsls	r2, r3, #8
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	431a      	orrs	r2, r3
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	4313      	orrs	r3, r2
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	4313      	orrs	r3, r2
 8006018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	609a      	str	r2, [r3, #8]
}
 8006020:	bf00      	nop
 8006022:	371c      	adds	r7, #28
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	f003 031f 	and.w	r3, r3, #31
 800603e:	2201      	movs	r2, #1
 8006040:	fa02 f303 	lsl.w	r3, r2, r3
 8006044:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6a1a      	ldr	r2, [r3, #32]
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	43db      	mvns	r3, r3
 800604e:	401a      	ands	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6a1a      	ldr	r2, [r3, #32]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	f003 031f 	and.w	r3, r3, #31
 800605e:	6879      	ldr	r1, [r7, #4]
 8006060:	fa01 f303 	lsl.w	r3, r1, r3
 8006064:	431a      	orrs	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	621a      	str	r2, [r3, #32]
}
 800606a:	bf00      	nop
 800606c:	371c      	adds	r7, #28
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
	...

08006078 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006088:	2b01      	cmp	r3, #1
 800608a:	d101      	bne.n	8006090 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800608c:	2302      	movs	r3, #2
 800608e:	e050      	b.n	8006132 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2202      	movs	r2, #2
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a1c      	ldr	r2, [pc, #112]	; (8006140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d018      	beq.n	8006106 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060dc:	d013      	beq.n	8006106 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a18      	ldr	r2, [pc, #96]	; (8006144 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d00e      	beq.n	8006106 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a16      	ldr	r2, [pc, #88]	; (8006148 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d009      	beq.n	8006106 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a15      	ldr	r2, [pc, #84]	; (800614c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d004      	beq.n	8006106 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a13      	ldr	r2, [pc, #76]	; (8006150 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d10c      	bne.n	8006120 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800610c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	4313      	orrs	r3, r2
 8006116:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68ba      	ldr	r2, [r7, #8]
 800611e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3714      	adds	r7, #20
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	40010000 	.word	0x40010000
 8006144:	40000400 	.word	0x40000400
 8006148:	40000800 	.word	0x40000800
 800614c:	40000c00 	.word	0x40000c00
 8006150:	40014000 	.word	0x40014000

08006154 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e03f      	b.n	800620e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d106      	bne.n	80061a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7fc fd5e 	bl	8002c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2224      	movs	r2, #36	; 0x24
 80061ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68da      	ldr	r2, [r3, #12]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f829 	bl	8006218 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	691a      	ldr	r2, [r3, #16]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	695a      	ldr	r2, [r3, #20]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68da      	ldr	r2, [r3, #12]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2220      	movs	r2, #32
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2220      	movs	r2, #32
 8006208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
	...

08006218 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800621c:	b0c0      	sub	sp, #256	; 0x100
 800621e:	af00      	add	r7, sp, #0
 8006220:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006234:	68d9      	ldr	r1, [r3, #12]
 8006236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	ea40 0301 	orr.w	r3, r0, r1
 8006240:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006246:	689a      	ldr	r2, [r3, #8]
 8006248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	431a      	orrs	r2, r3
 8006250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	431a      	orrs	r2, r3
 8006258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	4313      	orrs	r3, r2
 8006260:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006270:	f021 010c 	bic.w	r1, r1, #12
 8006274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800627e:	430b      	orrs	r3, r1
 8006280:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800628e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006292:	6999      	ldr	r1, [r3, #24]
 8006294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	ea40 0301 	orr.w	r3, r0, r1
 800629e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	4b8f      	ldr	r3, [pc, #572]	; (80064e4 <UART_SetConfig+0x2cc>)
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d005      	beq.n	80062b8 <UART_SetConfig+0xa0>
 80062ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	4b8d      	ldr	r3, [pc, #564]	; (80064e8 <UART_SetConfig+0x2d0>)
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d104      	bne.n	80062c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062b8:	f7fe fe54 	bl	8004f64 <HAL_RCC_GetPCLK2Freq>
 80062bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80062c0:	e003      	b.n	80062ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062c2:	f7fe fe3b 	bl	8004f3c <HAL_RCC_GetPCLK1Freq>
 80062c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ce:	69db      	ldr	r3, [r3, #28]
 80062d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062d4:	f040 810c 	bne.w	80064f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062dc:	2200      	movs	r2, #0
 80062de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80062e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80062ea:	4622      	mov	r2, r4
 80062ec:	462b      	mov	r3, r5
 80062ee:	1891      	adds	r1, r2, r2
 80062f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80062f2:	415b      	adcs	r3, r3
 80062f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80062fa:	4621      	mov	r1, r4
 80062fc:	eb12 0801 	adds.w	r8, r2, r1
 8006300:	4629      	mov	r1, r5
 8006302:	eb43 0901 	adc.w	r9, r3, r1
 8006306:	f04f 0200 	mov.w	r2, #0
 800630a:	f04f 0300 	mov.w	r3, #0
 800630e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006312:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006316:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800631a:	4690      	mov	r8, r2
 800631c:	4699      	mov	r9, r3
 800631e:	4623      	mov	r3, r4
 8006320:	eb18 0303 	adds.w	r3, r8, r3
 8006324:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006328:	462b      	mov	r3, r5
 800632a:	eb49 0303 	adc.w	r3, r9, r3
 800632e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800633e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006342:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006346:	460b      	mov	r3, r1
 8006348:	18db      	adds	r3, r3, r3
 800634a:	653b      	str	r3, [r7, #80]	; 0x50
 800634c:	4613      	mov	r3, r2
 800634e:	eb42 0303 	adc.w	r3, r2, r3
 8006352:	657b      	str	r3, [r7, #84]	; 0x54
 8006354:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006358:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800635c:	f7fa fc20 	bl	8000ba0 <__aeabi_uldivmod>
 8006360:	4602      	mov	r2, r0
 8006362:	460b      	mov	r3, r1
 8006364:	4b61      	ldr	r3, [pc, #388]	; (80064ec <UART_SetConfig+0x2d4>)
 8006366:	fba3 2302 	umull	r2, r3, r3, r2
 800636a:	095b      	lsrs	r3, r3, #5
 800636c:	011c      	lsls	r4, r3, #4
 800636e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006372:	2200      	movs	r2, #0
 8006374:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006378:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800637c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006380:	4642      	mov	r2, r8
 8006382:	464b      	mov	r3, r9
 8006384:	1891      	adds	r1, r2, r2
 8006386:	64b9      	str	r1, [r7, #72]	; 0x48
 8006388:	415b      	adcs	r3, r3
 800638a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800638c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006390:	4641      	mov	r1, r8
 8006392:	eb12 0a01 	adds.w	sl, r2, r1
 8006396:	4649      	mov	r1, r9
 8006398:	eb43 0b01 	adc.w	fp, r3, r1
 800639c:	f04f 0200 	mov.w	r2, #0
 80063a0:	f04f 0300 	mov.w	r3, #0
 80063a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063b0:	4692      	mov	sl, r2
 80063b2:	469b      	mov	fp, r3
 80063b4:	4643      	mov	r3, r8
 80063b6:	eb1a 0303 	adds.w	r3, sl, r3
 80063ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063be:	464b      	mov	r3, r9
 80063c0:	eb4b 0303 	adc.w	r3, fp, r3
 80063c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80063d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80063dc:	460b      	mov	r3, r1
 80063de:	18db      	adds	r3, r3, r3
 80063e0:	643b      	str	r3, [r7, #64]	; 0x40
 80063e2:	4613      	mov	r3, r2
 80063e4:	eb42 0303 	adc.w	r3, r2, r3
 80063e8:	647b      	str	r3, [r7, #68]	; 0x44
 80063ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80063ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80063f2:	f7fa fbd5 	bl	8000ba0 <__aeabi_uldivmod>
 80063f6:	4602      	mov	r2, r0
 80063f8:	460b      	mov	r3, r1
 80063fa:	4611      	mov	r1, r2
 80063fc:	4b3b      	ldr	r3, [pc, #236]	; (80064ec <UART_SetConfig+0x2d4>)
 80063fe:	fba3 2301 	umull	r2, r3, r3, r1
 8006402:	095b      	lsrs	r3, r3, #5
 8006404:	2264      	movs	r2, #100	; 0x64
 8006406:	fb02 f303 	mul.w	r3, r2, r3
 800640a:	1acb      	subs	r3, r1, r3
 800640c:	00db      	lsls	r3, r3, #3
 800640e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006412:	4b36      	ldr	r3, [pc, #216]	; (80064ec <UART_SetConfig+0x2d4>)
 8006414:	fba3 2302 	umull	r2, r3, r3, r2
 8006418:	095b      	lsrs	r3, r3, #5
 800641a:	005b      	lsls	r3, r3, #1
 800641c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006420:	441c      	add	r4, r3
 8006422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006426:	2200      	movs	r2, #0
 8006428:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800642c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006430:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006434:	4642      	mov	r2, r8
 8006436:	464b      	mov	r3, r9
 8006438:	1891      	adds	r1, r2, r2
 800643a:	63b9      	str	r1, [r7, #56]	; 0x38
 800643c:	415b      	adcs	r3, r3
 800643e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006440:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006444:	4641      	mov	r1, r8
 8006446:	1851      	adds	r1, r2, r1
 8006448:	6339      	str	r1, [r7, #48]	; 0x30
 800644a:	4649      	mov	r1, r9
 800644c:	414b      	adcs	r3, r1
 800644e:	637b      	str	r3, [r7, #52]	; 0x34
 8006450:	f04f 0200 	mov.w	r2, #0
 8006454:	f04f 0300 	mov.w	r3, #0
 8006458:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800645c:	4659      	mov	r1, fp
 800645e:	00cb      	lsls	r3, r1, #3
 8006460:	4651      	mov	r1, sl
 8006462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006466:	4651      	mov	r1, sl
 8006468:	00ca      	lsls	r2, r1, #3
 800646a:	4610      	mov	r0, r2
 800646c:	4619      	mov	r1, r3
 800646e:	4603      	mov	r3, r0
 8006470:	4642      	mov	r2, r8
 8006472:	189b      	adds	r3, r3, r2
 8006474:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006478:	464b      	mov	r3, r9
 800647a:	460a      	mov	r2, r1
 800647c:	eb42 0303 	adc.w	r3, r2, r3
 8006480:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006490:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006494:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006498:	460b      	mov	r3, r1
 800649a:	18db      	adds	r3, r3, r3
 800649c:	62bb      	str	r3, [r7, #40]	; 0x28
 800649e:	4613      	mov	r3, r2
 80064a0:	eb42 0303 	adc.w	r3, r2, r3
 80064a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80064ae:	f7fa fb77 	bl	8000ba0 <__aeabi_uldivmod>
 80064b2:	4602      	mov	r2, r0
 80064b4:	460b      	mov	r3, r1
 80064b6:	4b0d      	ldr	r3, [pc, #52]	; (80064ec <UART_SetConfig+0x2d4>)
 80064b8:	fba3 1302 	umull	r1, r3, r3, r2
 80064bc:	095b      	lsrs	r3, r3, #5
 80064be:	2164      	movs	r1, #100	; 0x64
 80064c0:	fb01 f303 	mul.w	r3, r1, r3
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	00db      	lsls	r3, r3, #3
 80064c8:	3332      	adds	r3, #50	; 0x32
 80064ca:	4a08      	ldr	r2, [pc, #32]	; (80064ec <UART_SetConfig+0x2d4>)
 80064cc:	fba2 2303 	umull	r2, r3, r2, r3
 80064d0:	095b      	lsrs	r3, r3, #5
 80064d2:	f003 0207 	and.w	r2, r3, #7
 80064d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4422      	add	r2, r4
 80064de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064e0:	e105      	b.n	80066ee <UART_SetConfig+0x4d6>
 80064e2:	bf00      	nop
 80064e4:	40011000 	.word	0x40011000
 80064e8:	40011400 	.word	0x40011400
 80064ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064f4:	2200      	movs	r2, #0
 80064f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80064fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80064fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006502:	4642      	mov	r2, r8
 8006504:	464b      	mov	r3, r9
 8006506:	1891      	adds	r1, r2, r2
 8006508:	6239      	str	r1, [r7, #32]
 800650a:	415b      	adcs	r3, r3
 800650c:	627b      	str	r3, [r7, #36]	; 0x24
 800650e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006512:	4641      	mov	r1, r8
 8006514:	1854      	adds	r4, r2, r1
 8006516:	4649      	mov	r1, r9
 8006518:	eb43 0501 	adc.w	r5, r3, r1
 800651c:	f04f 0200 	mov.w	r2, #0
 8006520:	f04f 0300 	mov.w	r3, #0
 8006524:	00eb      	lsls	r3, r5, #3
 8006526:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800652a:	00e2      	lsls	r2, r4, #3
 800652c:	4614      	mov	r4, r2
 800652e:	461d      	mov	r5, r3
 8006530:	4643      	mov	r3, r8
 8006532:	18e3      	adds	r3, r4, r3
 8006534:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006538:	464b      	mov	r3, r9
 800653a:	eb45 0303 	adc.w	r3, r5, r3
 800653e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800654e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006552:	f04f 0200 	mov.w	r2, #0
 8006556:	f04f 0300 	mov.w	r3, #0
 800655a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800655e:	4629      	mov	r1, r5
 8006560:	008b      	lsls	r3, r1, #2
 8006562:	4621      	mov	r1, r4
 8006564:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006568:	4621      	mov	r1, r4
 800656a:	008a      	lsls	r2, r1, #2
 800656c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006570:	f7fa fb16 	bl	8000ba0 <__aeabi_uldivmod>
 8006574:	4602      	mov	r2, r0
 8006576:	460b      	mov	r3, r1
 8006578:	4b60      	ldr	r3, [pc, #384]	; (80066fc <UART_SetConfig+0x4e4>)
 800657a:	fba3 2302 	umull	r2, r3, r3, r2
 800657e:	095b      	lsrs	r3, r3, #5
 8006580:	011c      	lsls	r4, r3, #4
 8006582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006586:	2200      	movs	r2, #0
 8006588:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800658c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006590:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006594:	4642      	mov	r2, r8
 8006596:	464b      	mov	r3, r9
 8006598:	1891      	adds	r1, r2, r2
 800659a:	61b9      	str	r1, [r7, #24]
 800659c:	415b      	adcs	r3, r3
 800659e:	61fb      	str	r3, [r7, #28]
 80065a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065a4:	4641      	mov	r1, r8
 80065a6:	1851      	adds	r1, r2, r1
 80065a8:	6139      	str	r1, [r7, #16]
 80065aa:	4649      	mov	r1, r9
 80065ac:	414b      	adcs	r3, r1
 80065ae:	617b      	str	r3, [r7, #20]
 80065b0:	f04f 0200 	mov.w	r2, #0
 80065b4:	f04f 0300 	mov.w	r3, #0
 80065b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065bc:	4659      	mov	r1, fp
 80065be:	00cb      	lsls	r3, r1, #3
 80065c0:	4651      	mov	r1, sl
 80065c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065c6:	4651      	mov	r1, sl
 80065c8:	00ca      	lsls	r2, r1, #3
 80065ca:	4610      	mov	r0, r2
 80065cc:	4619      	mov	r1, r3
 80065ce:	4603      	mov	r3, r0
 80065d0:	4642      	mov	r2, r8
 80065d2:	189b      	adds	r3, r3, r2
 80065d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065d8:	464b      	mov	r3, r9
 80065da:	460a      	mov	r2, r1
 80065dc:	eb42 0303 	adc.w	r3, r2, r3
 80065e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80065ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80065f0:	f04f 0200 	mov.w	r2, #0
 80065f4:	f04f 0300 	mov.w	r3, #0
 80065f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80065fc:	4649      	mov	r1, r9
 80065fe:	008b      	lsls	r3, r1, #2
 8006600:	4641      	mov	r1, r8
 8006602:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006606:	4641      	mov	r1, r8
 8006608:	008a      	lsls	r2, r1, #2
 800660a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800660e:	f7fa fac7 	bl	8000ba0 <__aeabi_uldivmod>
 8006612:	4602      	mov	r2, r0
 8006614:	460b      	mov	r3, r1
 8006616:	4b39      	ldr	r3, [pc, #228]	; (80066fc <UART_SetConfig+0x4e4>)
 8006618:	fba3 1302 	umull	r1, r3, r3, r2
 800661c:	095b      	lsrs	r3, r3, #5
 800661e:	2164      	movs	r1, #100	; 0x64
 8006620:	fb01 f303 	mul.w	r3, r1, r3
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	011b      	lsls	r3, r3, #4
 8006628:	3332      	adds	r3, #50	; 0x32
 800662a:	4a34      	ldr	r2, [pc, #208]	; (80066fc <UART_SetConfig+0x4e4>)
 800662c:	fba2 2303 	umull	r2, r3, r2, r3
 8006630:	095b      	lsrs	r3, r3, #5
 8006632:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006636:	441c      	add	r4, r3
 8006638:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800663c:	2200      	movs	r2, #0
 800663e:	673b      	str	r3, [r7, #112]	; 0x70
 8006640:	677a      	str	r2, [r7, #116]	; 0x74
 8006642:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006646:	4642      	mov	r2, r8
 8006648:	464b      	mov	r3, r9
 800664a:	1891      	adds	r1, r2, r2
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	415b      	adcs	r3, r3
 8006650:	60fb      	str	r3, [r7, #12]
 8006652:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006656:	4641      	mov	r1, r8
 8006658:	1851      	adds	r1, r2, r1
 800665a:	6039      	str	r1, [r7, #0]
 800665c:	4649      	mov	r1, r9
 800665e:	414b      	adcs	r3, r1
 8006660:	607b      	str	r3, [r7, #4]
 8006662:	f04f 0200 	mov.w	r2, #0
 8006666:	f04f 0300 	mov.w	r3, #0
 800666a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800666e:	4659      	mov	r1, fp
 8006670:	00cb      	lsls	r3, r1, #3
 8006672:	4651      	mov	r1, sl
 8006674:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006678:	4651      	mov	r1, sl
 800667a:	00ca      	lsls	r2, r1, #3
 800667c:	4610      	mov	r0, r2
 800667e:	4619      	mov	r1, r3
 8006680:	4603      	mov	r3, r0
 8006682:	4642      	mov	r2, r8
 8006684:	189b      	adds	r3, r3, r2
 8006686:	66bb      	str	r3, [r7, #104]	; 0x68
 8006688:	464b      	mov	r3, r9
 800668a:	460a      	mov	r2, r1
 800668c:	eb42 0303 	adc.w	r3, r2, r3
 8006690:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	663b      	str	r3, [r7, #96]	; 0x60
 800669c:	667a      	str	r2, [r7, #100]	; 0x64
 800669e:	f04f 0200 	mov.w	r2, #0
 80066a2:	f04f 0300 	mov.w	r3, #0
 80066a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80066aa:	4649      	mov	r1, r9
 80066ac:	008b      	lsls	r3, r1, #2
 80066ae:	4641      	mov	r1, r8
 80066b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066b4:	4641      	mov	r1, r8
 80066b6:	008a      	lsls	r2, r1, #2
 80066b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80066bc:	f7fa fa70 	bl	8000ba0 <__aeabi_uldivmod>
 80066c0:	4602      	mov	r2, r0
 80066c2:	460b      	mov	r3, r1
 80066c4:	4b0d      	ldr	r3, [pc, #52]	; (80066fc <UART_SetConfig+0x4e4>)
 80066c6:	fba3 1302 	umull	r1, r3, r3, r2
 80066ca:	095b      	lsrs	r3, r3, #5
 80066cc:	2164      	movs	r1, #100	; 0x64
 80066ce:	fb01 f303 	mul.w	r3, r1, r3
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	011b      	lsls	r3, r3, #4
 80066d6:	3332      	adds	r3, #50	; 0x32
 80066d8:	4a08      	ldr	r2, [pc, #32]	; (80066fc <UART_SetConfig+0x4e4>)
 80066da:	fba2 2303 	umull	r2, r3, r2, r3
 80066de:	095b      	lsrs	r3, r3, #5
 80066e0:	f003 020f 	and.w	r2, r3, #15
 80066e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4422      	add	r2, r4
 80066ec:	609a      	str	r2, [r3, #8]
}
 80066ee:	bf00      	nop
 80066f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80066f4:	46bd      	mov	sp, r7
 80066f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066fa:	bf00      	nop
 80066fc:	51eb851f 	.word	0x51eb851f

08006700 <__errno>:
 8006700:	4b01      	ldr	r3, [pc, #4]	; (8006708 <__errno+0x8>)
 8006702:	6818      	ldr	r0, [r3, #0]
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	2000001c 	.word	0x2000001c

0800670c <__libc_init_array>:
 800670c:	b570      	push	{r4, r5, r6, lr}
 800670e:	4d0d      	ldr	r5, [pc, #52]	; (8006744 <__libc_init_array+0x38>)
 8006710:	4c0d      	ldr	r4, [pc, #52]	; (8006748 <__libc_init_array+0x3c>)
 8006712:	1b64      	subs	r4, r4, r5
 8006714:	10a4      	asrs	r4, r4, #2
 8006716:	2600      	movs	r6, #0
 8006718:	42a6      	cmp	r6, r4
 800671a:	d109      	bne.n	8006730 <__libc_init_array+0x24>
 800671c:	4d0b      	ldr	r5, [pc, #44]	; (800674c <__libc_init_array+0x40>)
 800671e:	4c0c      	ldr	r4, [pc, #48]	; (8006750 <__libc_init_array+0x44>)
 8006720:	f001 fb56 	bl	8007dd0 <_init>
 8006724:	1b64      	subs	r4, r4, r5
 8006726:	10a4      	asrs	r4, r4, #2
 8006728:	2600      	movs	r6, #0
 800672a:	42a6      	cmp	r6, r4
 800672c:	d105      	bne.n	800673a <__libc_init_array+0x2e>
 800672e:	bd70      	pop	{r4, r5, r6, pc}
 8006730:	f855 3b04 	ldr.w	r3, [r5], #4
 8006734:	4798      	blx	r3
 8006736:	3601      	adds	r6, #1
 8006738:	e7ee      	b.n	8006718 <__libc_init_array+0xc>
 800673a:	f855 3b04 	ldr.w	r3, [r5], #4
 800673e:	4798      	blx	r3
 8006740:	3601      	adds	r6, #1
 8006742:	e7f2      	b.n	800672a <__libc_init_array+0x1e>
 8006744:	080086f0 	.word	0x080086f0
 8006748:	080086f0 	.word	0x080086f0
 800674c:	080086f0 	.word	0x080086f0
 8006750:	080086f4 	.word	0x080086f4

08006754 <memset>:
 8006754:	4402      	add	r2, r0
 8006756:	4603      	mov	r3, r0
 8006758:	4293      	cmp	r3, r2
 800675a:	d100      	bne.n	800675e <memset+0xa>
 800675c:	4770      	bx	lr
 800675e:	f803 1b01 	strb.w	r1, [r3], #1
 8006762:	e7f9      	b.n	8006758 <memset+0x4>

08006764 <pow>:
 8006764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006766:	ed2d 8b02 	vpush	{d8}
 800676a:	eeb0 8a40 	vmov.f32	s16, s0
 800676e:	eef0 8a60 	vmov.f32	s17, s1
 8006772:	ec55 4b11 	vmov	r4, r5, d1
 8006776:	f000 f907 	bl	8006988 <__ieee754_pow>
 800677a:	4622      	mov	r2, r4
 800677c:	462b      	mov	r3, r5
 800677e:	4620      	mov	r0, r4
 8006780:	4629      	mov	r1, r5
 8006782:	ec57 6b10 	vmov	r6, r7, d0
 8006786:	f7fa f97d 	bl	8000a84 <__aeabi_dcmpun>
 800678a:	2800      	cmp	r0, #0
 800678c:	d13b      	bne.n	8006806 <pow+0xa2>
 800678e:	ec51 0b18 	vmov	r0, r1, d8
 8006792:	2200      	movs	r2, #0
 8006794:	2300      	movs	r3, #0
 8006796:	f7fa f943 	bl	8000a20 <__aeabi_dcmpeq>
 800679a:	b1b8      	cbz	r0, 80067cc <pow+0x68>
 800679c:	2200      	movs	r2, #0
 800679e:	2300      	movs	r3, #0
 80067a0:	4620      	mov	r0, r4
 80067a2:	4629      	mov	r1, r5
 80067a4:	f7fa f93c 	bl	8000a20 <__aeabi_dcmpeq>
 80067a8:	2800      	cmp	r0, #0
 80067aa:	d146      	bne.n	800683a <pow+0xd6>
 80067ac:	ec45 4b10 	vmov	d0, r4, r5
 80067b0:	f001 f9f7 	bl	8007ba2 <finite>
 80067b4:	b338      	cbz	r0, 8006806 <pow+0xa2>
 80067b6:	2200      	movs	r2, #0
 80067b8:	2300      	movs	r3, #0
 80067ba:	4620      	mov	r0, r4
 80067bc:	4629      	mov	r1, r5
 80067be:	f7fa f939 	bl	8000a34 <__aeabi_dcmplt>
 80067c2:	b300      	cbz	r0, 8006806 <pow+0xa2>
 80067c4:	f7ff ff9c 	bl	8006700 <__errno>
 80067c8:	2322      	movs	r3, #34	; 0x22
 80067ca:	e01b      	b.n	8006804 <pow+0xa0>
 80067cc:	ec47 6b10 	vmov	d0, r6, r7
 80067d0:	f001 f9e7 	bl	8007ba2 <finite>
 80067d4:	b9e0      	cbnz	r0, 8006810 <pow+0xac>
 80067d6:	eeb0 0a48 	vmov.f32	s0, s16
 80067da:	eef0 0a68 	vmov.f32	s1, s17
 80067de:	f001 f9e0 	bl	8007ba2 <finite>
 80067e2:	b1a8      	cbz	r0, 8006810 <pow+0xac>
 80067e4:	ec45 4b10 	vmov	d0, r4, r5
 80067e8:	f001 f9db 	bl	8007ba2 <finite>
 80067ec:	b180      	cbz	r0, 8006810 <pow+0xac>
 80067ee:	4632      	mov	r2, r6
 80067f0:	463b      	mov	r3, r7
 80067f2:	4630      	mov	r0, r6
 80067f4:	4639      	mov	r1, r7
 80067f6:	f7fa f945 	bl	8000a84 <__aeabi_dcmpun>
 80067fa:	2800      	cmp	r0, #0
 80067fc:	d0e2      	beq.n	80067c4 <pow+0x60>
 80067fe:	f7ff ff7f 	bl	8006700 <__errno>
 8006802:	2321      	movs	r3, #33	; 0x21
 8006804:	6003      	str	r3, [r0, #0]
 8006806:	ecbd 8b02 	vpop	{d8}
 800680a:	ec47 6b10 	vmov	d0, r6, r7
 800680e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006810:	2200      	movs	r2, #0
 8006812:	2300      	movs	r3, #0
 8006814:	4630      	mov	r0, r6
 8006816:	4639      	mov	r1, r7
 8006818:	f7fa f902 	bl	8000a20 <__aeabi_dcmpeq>
 800681c:	2800      	cmp	r0, #0
 800681e:	d0f2      	beq.n	8006806 <pow+0xa2>
 8006820:	eeb0 0a48 	vmov.f32	s0, s16
 8006824:	eef0 0a68 	vmov.f32	s1, s17
 8006828:	f001 f9bb 	bl	8007ba2 <finite>
 800682c:	2800      	cmp	r0, #0
 800682e:	d0ea      	beq.n	8006806 <pow+0xa2>
 8006830:	ec45 4b10 	vmov	d0, r4, r5
 8006834:	f001 f9b5 	bl	8007ba2 <finite>
 8006838:	e7c3      	b.n	80067c2 <pow+0x5e>
 800683a:	4f01      	ldr	r7, [pc, #4]	; (8006840 <pow+0xdc>)
 800683c:	2600      	movs	r6, #0
 800683e:	e7e2      	b.n	8006806 <pow+0xa2>
 8006840:	3ff00000 	.word	0x3ff00000

08006844 <sqrt>:
 8006844:	b538      	push	{r3, r4, r5, lr}
 8006846:	ed2d 8b02 	vpush	{d8}
 800684a:	ec55 4b10 	vmov	r4, r5, d0
 800684e:	f000 fdc9 	bl	80073e4 <__ieee754_sqrt>
 8006852:	4622      	mov	r2, r4
 8006854:	462b      	mov	r3, r5
 8006856:	4620      	mov	r0, r4
 8006858:	4629      	mov	r1, r5
 800685a:	eeb0 8a40 	vmov.f32	s16, s0
 800685e:	eef0 8a60 	vmov.f32	s17, s1
 8006862:	f7fa f90f 	bl	8000a84 <__aeabi_dcmpun>
 8006866:	b990      	cbnz	r0, 800688e <sqrt+0x4a>
 8006868:	2200      	movs	r2, #0
 800686a:	2300      	movs	r3, #0
 800686c:	4620      	mov	r0, r4
 800686e:	4629      	mov	r1, r5
 8006870:	f7fa f8e0 	bl	8000a34 <__aeabi_dcmplt>
 8006874:	b158      	cbz	r0, 800688e <sqrt+0x4a>
 8006876:	f7ff ff43 	bl	8006700 <__errno>
 800687a:	2321      	movs	r3, #33	; 0x21
 800687c:	6003      	str	r3, [r0, #0]
 800687e:	2200      	movs	r2, #0
 8006880:	2300      	movs	r3, #0
 8006882:	4610      	mov	r0, r2
 8006884:	4619      	mov	r1, r3
 8006886:	f7f9 ff8d 	bl	80007a4 <__aeabi_ddiv>
 800688a:	ec41 0b18 	vmov	d8, r0, r1
 800688e:	eeb0 0a48 	vmov.f32	s0, s16
 8006892:	eef0 0a68 	vmov.f32	s1, s17
 8006896:	ecbd 8b02 	vpop	{d8}
 800689a:	bd38      	pop	{r3, r4, r5, pc}

0800689c <powf>:
 800689c:	b508      	push	{r3, lr}
 800689e:	ed2d 8b04 	vpush	{d8-d9}
 80068a2:	eeb0 8a60 	vmov.f32	s16, s1
 80068a6:	eeb0 9a40 	vmov.f32	s18, s0
 80068aa:	f000 fe4d 	bl	8007548 <__ieee754_powf>
 80068ae:	eeb4 8a48 	vcmp.f32	s16, s16
 80068b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068b6:	eef0 8a40 	vmov.f32	s17, s0
 80068ba:	d63e      	bvs.n	800693a <powf+0x9e>
 80068bc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80068c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068c4:	d112      	bne.n	80068ec <powf+0x50>
 80068c6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80068ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068ce:	d039      	beq.n	8006944 <powf+0xa8>
 80068d0:	eeb0 0a48 	vmov.f32	s0, s16
 80068d4:	f001 f9fd 	bl	8007cd2 <finitef>
 80068d8:	b378      	cbz	r0, 800693a <powf+0x9e>
 80068da:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80068de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068e2:	d52a      	bpl.n	800693a <powf+0x9e>
 80068e4:	f7ff ff0c 	bl	8006700 <__errno>
 80068e8:	2322      	movs	r3, #34	; 0x22
 80068ea:	e014      	b.n	8006916 <powf+0x7a>
 80068ec:	f001 f9f1 	bl	8007cd2 <finitef>
 80068f0:	b998      	cbnz	r0, 800691a <powf+0x7e>
 80068f2:	eeb0 0a49 	vmov.f32	s0, s18
 80068f6:	f001 f9ec 	bl	8007cd2 <finitef>
 80068fa:	b170      	cbz	r0, 800691a <powf+0x7e>
 80068fc:	eeb0 0a48 	vmov.f32	s0, s16
 8006900:	f001 f9e7 	bl	8007cd2 <finitef>
 8006904:	b148      	cbz	r0, 800691a <powf+0x7e>
 8006906:	eef4 8a68 	vcmp.f32	s17, s17
 800690a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800690e:	d7e9      	bvc.n	80068e4 <powf+0x48>
 8006910:	f7ff fef6 	bl	8006700 <__errno>
 8006914:	2321      	movs	r3, #33	; 0x21
 8006916:	6003      	str	r3, [r0, #0]
 8006918:	e00f      	b.n	800693a <powf+0x9e>
 800691a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800691e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006922:	d10a      	bne.n	800693a <powf+0x9e>
 8006924:	eeb0 0a49 	vmov.f32	s0, s18
 8006928:	f001 f9d3 	bl	8007cd2 <finitef>
 800692c:	b128      	cbz	r0, 800693a <powf+0x9e>
 800692e:	eeb0 0a48 	vmov.f32	s0, s16
 8006932:	f001 f9ce 	bl	8007cd2 <finitef>
 8006936:	2800      	cmp	r0, #0
 8006938:	d1d4      	bne.n	80068e4 <powf+0x48>
 800693a:	eeb0 0a68 	vmov.f32	s0, s17
 800693e:	ecbd 8b04 	vpop	{d8-d9}
 8006942:	bd08      	pop	{r3, pc}
 8006944:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8006948:	e7f7      	b.n	800693a <powf+0x9e>
	...

0800694c <sqrtf>:
 800694c:	b508      	push	{r3, lr}
 800694e:	ed2d 8b02 	vpush	{d8}
 8006952:	eeb0 8a40 	vmov.f32	s16, s0
 8006956:	f001 f8c5 	bl	8007ae4 <__ieee754_sqrtf>
 800695a:	eeb4 8a48 	vcmp.f32	s16, s16
 800695e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006962:	d60c      	bvs.n	800697e <sqrtf+0x32>
 8006964:	eddf 8a07 	vldr	s17, [pc, #28]	; 8006984 <sqrtf+0x38>
 8006968:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800696c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006970:	d505      	bpl.n	800697e <sqrtf+0x32>
 8006972:	f7ff fec5 	bl	8006700 <__errno>
 8006976:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800697a:	2321      	movs	r3, #33	; 0x21
 800697c:	6003      	str	r3, [r0, #0]
 800697e:	ecbd 8b02 	vpop	{d8}
 8006982:	bd08      	pop	{r3, pc}
 8006984:	00000000 	.word	0x00000000

08006988 <__ieee754_pow>:
 8006988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800698c:	ed2d 8b06 	vpush	{d8-d10}
 8006990:	b089      	sub	sp, #36	; 0x24
 8006992:	ed8d 1b00 	vstr	d1, [sp]
 8006996:	e9dd 2900 	ldrd	r2, r9, [sp]
 800699a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800699e:	ea58 0102 	orrs.w	r1, r8, r2
 80069a2:	ec57 6b10 	vmov	r6, r7, d0
 80069a6:	d115      	bne.n	80069d4 <__ieee754_pow+0x4c>
 80069a8:	19b3      	adds	r3, r6, r6
 80069aa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80069ae:	4152      	adcs	r2, r2
 80069b0:	4299      	cmp	r1, r3
 80069b2:	4b89      	ldr	r3, [pc, #548]	; (8006bd8 <__ieee754_pow+0x250>)
 80069b4:	4193      	sbcs	r3, r2
 80069b6:	f080 84d2 	bcs.w	800735e <__ieee754_pow+0x9d6>
 80069ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069be:	4630      	mov	r0, r6
 80069c0:	4639      	mov	r1, r7
 80069c2:	f7f9 fc0f 	bl	80001e4 <__adddf3>
 80069c6:	ec41 0b10 	vmov	d0, r0, r1
 80069ca:	b009      	add	sp, #36	; 0x24
 80069cc:	ecbd 8b06 	vpop	{d8-d10}
 80069d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d4:	4b81      	ldr	r3, [pc, #516]	; (8006bdc <__ieee754_pow+0x254>)
 80069d6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80069da:	429c      	cmp	r4, r3
 80069dc:	ee10 aa10 	vmov	sl, s0
 80069e0:	463d      	mov	r5, r7
 80069e2:	dc06      	bgt.n	80069f2 <__ieee754_pow+0x6a>
 80069e4:	d101      	bne.n	80069ea <__ieee754_pow+0x62>
 80069e6:	2e00      	cmp	r6, #0
 80069e8:	d1e7      	bne.n	80069ba <__ieee754_pow+0x32>
 80069ea:	4598      	cmp	r8, r3
 80069ec:	dc01      	bgt.n	80069f2 <__ieee754_pow+0x6a>
 80069ee:	d10f      	bne.n	8006a10 <__ieee754_pow+0x88>
 80069f0:	b172      	cbz	r2, 8006a10 <__ieee754_pow+0x88>
 80069f2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80069f6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80069fa:	ea55 050a 	orrs.w	r5, r5, sl
 80069fe:	d1dc      	bne.n	80069ba <__ieee754_pow+0x32>
 8006a00:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006a04:	18db      	adds	r3, r3, r3
 8006a06:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006a0a:	4152      	adcs	r2, r2
 8006a0c:	429d      	cmp	r5, r3
 8006a0e:	e7d0      	b.n	80069b2 <__ieee754_pow+0x2a>
 8006a10:	2d00      	cmp	r5, #0
 8006a12:	da3b      	bge.n	8006a8c <__ieee754_pow+0x104>
 8006a14:	4b72      	ldr	r3, [pc, #456]	; (8006be0 <__ieee754_pow+0x258>)
 8006a16:	4598      	cmp	r8, r3
 8006a18:	dc51      	bgt.n	8006abe <__ieee754_pow+0x136>
 8006a1a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006a1e:	4598      	cmp	r8, r3
 8006a20:	f340 84ac 	ble.w	800737c <__ieee754_pow+0x9f4>
 8006a24:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006a28:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006a2c:	2b14      	cmp	r3, #20
 8006a2e:	dd0f      	ble.n	8006a50 <__ieee754_pow+0xc8>
 8006a30:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006a34:	fa22 f103 	lsr.w	r1, r2, r3
 8006a38:	fa01 f303 	lsl.w	r3, r1, r3
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	f040 849d 	bne.w	800737c <__ieee754_pow+0x9f4>
 8006a42:	f001 0101 	and.w	r1, r1, #1
 8006a46:	f1c1 0302 	rsb	r3, r1, #2
 8006a4a:	9304      	str	r3, [sp, #16]
 8006a4c:	b182      	cbz	r2, 8006a70 <__ieee754_pow+0xe8>
 8006a4e:	e05f      	b.n	8006b10 <__ieee754_pow+0x188>
 8006a50:	2a00      	cmp	r2, #0
 8006a52:	d15b      	bne.n	8006b0c <__ieee754_pow+0x184>
 8006a54:	f1c3 0314 	rsb	r3, r3, #20
 8006a58:	fa48 f103 	asr.w	r1, r8, r3
 8006a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a60:	4543      	cmp	r3, r8
 8006a62:	f040 8488 	bne.w	8007376 <__ieee754_pow+0x9ee>
 8006a66:	f001 0101 	and.w	r1, r1, #1
 8006a6a:	f1c1 0302 	rsb	r3, r1, #2
 8006a6e:	9304      	str	r3, [sp, #16]
 8006a70:	4b5c      	ldr	r3, [pc, #368]	; (8006be4 <__ieee754_pow+0x25c>)
 8006a72:	4598      	cmp	r8, r3
 8006a74:	d132      	bne.n	8006adc <__ieee754_pow+0x154>
 8006a76:	f1b9 0f00 	cmp.w	r9, #0
 8006a7a:	f280 8478 	bge.w	800736e <__ieee754_pow+0x9e6>
 8006a7e:	4959      	ldr	r1, [pc, #356]	; (8006be4 <__ieee754_pow+0x25c>)
 8006a80:	4632      	mov	r2, r6
 8006a82:	463b      	mov	r3, r7
 8006a84:	2000      	movs	r0, #0
 8006a86:	f7f9 fe8d 	bl	80007a4 <__aeabi_ddiv>
 8006a8a:	e79c      	b.n	80069c6 <__ieee754_pow+0x3e>
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	9304      	str	r3, [sp, #16]
 8006a90:	2a00      	cmp	r2, #0
 8006a92:	d13d      	bne.n	8006b10 <__ieee754_pow+0x188>
 8006a94:	4b51      	ldr	r3, [pc, #324]	; (8006bdc <__ieee754_pow+0x254>)
 8006a96:	4598      	cmp	r8, r3
 8006a98:	d1ea      	bne.n	8006a70 <__ieee754_pow+0xe8>
 8006a9a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006a9e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006aa2:	ea53 030a 	orrs.w	r3, r3, sl
 8006aa6:	f000 845a 	beq.w	800735e <__ieee754_pow+0x9d6>
 8006aaa:	4b4f      	ldr	r3, [pc, #316]	; (8006be8 <__ieee754_pow+0x260>)
 8006aac:	429c      	cmp	r4, r3
 8006aae:	dd08      	ble.n	8006ac2 <__ieee754_pow+0x13a>
 8006ab0:	f1b9 0f00 	cmp.w	r9, #0
 8006ab4:	f2c0 8457 	blt.w	8007366 <__ieee754_pow+0x9de>
 8006ab8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006abc:	e783      	b.n	80069c6 <__ieee754_pow+0x3e>
 8006abe:	2302      	movs	r3, #2
 8006ac0:	e7e5      	b.n	8006a8e <__ieee754_pow+0x106>
 8006ac2:	f1b9 0f00 	cmp.w	r9, #0
 8006ac6:	f04f 0000 	mov.w	r0, #0
 8006aca:	f04f 0100 	mov.w	r1, #0
 8006ace:	f6bf af7a 	bge.w	80069c6 <__ieee754_pow+0x3e>
 8006ad2:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006ad6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006ada:	e774      	b.n	80069c6 <__ieee754_pow+0x3e>
 8006adc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006ae0:	d106      	bne.n	8006af0 <__ieee754_pow+0x168>
 8006ae2:	4632      	mov	r2, r6
 8006ae4:	463b      	mov	r3, r7
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	4639      	mov	r1, r7
 8006aea:	f7f9 fd31 	bl	8000550 <__aeabi_dmul>
 8006aee:	e76a      	b.n	80069c6 <__ieee754_pow+0x3e>
 8006af0:	4b3e      	ldr	r3, [pc, #248]	; (8006bec <__ieee754_pow+0x264>)
 8006af2:	4599      	cmp	r9, r3
 8006af4:	d10c      	bne.n	8006b10 <__ieee754_pow+0x188>
 8006af6:	2d00      	cmp	r5, #0
 8006af8:	db0a      	blt.n	8006b10 <__ieee754_pow+0x188>
 8006afa:	ec47 6b10 	vmov	d0, r6, r7
 8006afe:	b009      	add	sp, #36	; 0x24
 8006b00:	ecbd 8b06 	vpop	{d8-d10}
 8006b04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b08:	f000 bc6c 	b.w	80073e4 <__ieee754_sqrt>
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	9304      	str	r3, [sp, #16]
 8006b10:	ec47 6b10 	vmov	d0, r6, r7
 8006b14:	f001 f83c 	bl	8007b90 <fabs>
 8006b18:	ec51 0b10 	vmov	r0, r1, d0
 8006b1c:	f1ba 0f00 	cmp.w	sl, #0
 8006b20:	d129      	bne.n	8006b76 <__ieee754_pow+0x1ee>
 8006b22:	b124      	cbz	r4, 8006b2e <__ieee754_pow+0x1a6>
 8006b24:	4b2f      	ldr	r3, [pc, #188]	; (8006be4 <__ieee754_pow+0x25c>)
 8006b26:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d123      	bne.n	8006b76 <__ieee754_pow+0x1ee>
 8006b2e:	f1b9 0f00 	cmp.w	r9, #0
 8006b32:	da05      	bge.n	8006b40 <__ieee754_pow+0x1b8>
 8006b34:	4602      	mov	r2, r0
 8006b36:	460b      	mov	r3, r1
 8006b38:	2000      	movs	r0, #0
 8006b3a:	492a      	ldr	r1, [pc, #168]	; (8006be4 <__ieee754_pow+0x25c>)
 8006b3c:	f7f9 fe32 	bl	80007a4 <__aeabi_ddiv>
 8006b40:	2d00      	cmp	r5, #0
 8006b42:	f6bf af40 	bge.w	80069c6 <__ieee754_pow+0x3e>
 8006b46:	9b04      	ldr	r3, [sp, #16]
 8006b48:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006b4c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006b50:	4323      	orrs	r3, r4
 8006b52:	d108      	bne.n	8006b66 <__ieee754_pow+0x1de>
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	4610      	mov	r0, r2
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	f7f9 fb40 	bl	80001e0 <__aeabi_dsub>
 8006b60:	4602      	mov	r2, r0
 8006b62:	460b      	mov	r3, r1
 8006b64:	e78f      	b.n	8006a86 <__ieee754_pow+0xfe>
 8006b66:	9b04      	ldr	r3, [sp, #16]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	f47f af2c 	bne.w	80069c6 <__ieee754_pow+0x3e>
 8006b6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b72:	4619      	mov	r1, r3
 8006b74:	e727      	b.n	80069c6 <__ieee754_pow+0x3e>
 8006b76:	0feb      	lsrs	r3, r5, #31
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	9306      	str	r3, [sp, #24]
 8006b7c:	9a06      	ldr	r2, [sp, #24]
 8006b7e:	9b04      	ldr	r3, [sp, #16]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	d102      	bne.n	8006b8a <__ieee754_pow+0x202>
 8006b84:	4632      	mov	r2, r6
 8006b86:	463b      	mov	r3, r7
 8006b88:	e7e6      	b.n	8006b58 <__ieee754_pow+0x1d0>
 8006b8a:	4b19      	ldr	r3, [pc, #100]	; (8006bf0 <__ieee754_pow+0x268>)
 8006b8c:	4598      	cmp	r8, r3
 8006b8e:	f340 80fb 	ble.w	8006d88 <__ieee754_pow+0x400>
 8006b92:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006b96:	4598      	cmp	r8, r3
 8006b98:	4b13      	ldr	r3, [pc, #76]	; (8006be8 <__ieee754_pow+0x260>)
 8006b9a:	dd0c      	ble.n	8006bb6 <__ieee754_pow+0x22e>
 8006b9c:	429c      	cmp	r4, r3
 8006b9e:	dc0f      	bgt.n	8006bc0 <__ieee754_pow+0x238>
 8006ba0:	f1b9 0f00 	cmp.w	r9, #0
 8006ba4:	da0f      	bge.n	8006bc6 <__ieee754_pow+0x23e>
 8006ba6:	2000      	movs	r0, #0
 8006ba8:	b009      	add	sp, #36	; 0x24
 8006baa:	ecbd 8b06 	vpop	{d8-d10}
 8006bae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb2:	f000 bfc1 	b.w	8007b38 <__math_oflow>
 8006bb6:	429c      	cmp	r4, r3
 8006bb8:	dbf2      	blt.n	8006ba0 <__ieee754_pow+0x218>
 8006bba:	4b0a      	ldr	r3, [pc, #40]	; (8006be4 <__ieee754_pow+0x25c>)
 8006bbc:	429c      	cmp	r4, r3
 8006bbe:	dd19      	ble.n	8006bf4 <__ieee754_pow+0x26c>
 8006bc0:	f1b9 0f00 	cmp.w	r9, #0
 8006bc4:	dcef      	bgt.n	8006ba6 <__ieee754_pow+0x21e>
 8006bc6:	2000      	movs	r0, #0
 8006bc8:	b009      	add	sp, #36	; 0x24
 8006bca:	ecbd 8b06 	vpop	{d8-d10}
 8006bce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd2:	f000 bfa8 	b.w	8007b26 <__math_uflow>
 8006bd6:	bf00      	nop
 8006bd8:	fff00000 	.word	0xfff00000
 8006bdc:	7ff00000 	.word	0x7ff00000
 8006be0:	433fffff 	.word	0x433fffff
 8006be4:	3ff00000 	.word	0x3ff00000
 8006be8:	3fefffff 	.word	0x3fefffff
 8006bec:	3fe00000 	.word	0x3fe00000
 8006bf0:	41e00000 	.word	0x41e00000
 8006bf4:	4b60      	ldr	r3, [pc, #384]	; (8006d78 <__ieee754_pow+0x3f0>)
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f7f9 faf2 	bl	80001e0 <__aeabi_dsub>
 8006bfc:	a354      	add	r3, pc, #336	; (adr r3, 8006d50 <__ieee754_pow+0x3c8>)
 8006bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c02:	4604      	mov	r4, r0
 8006c04:	460d      	mov	r5, r1
 8006c06:	f7f9 fca3 	bl	8000550 <__aeabi_dmul>
 8006c0a:	a353      	add	r3, pc, #332	; (adr r3, 8006d58 <__ieee754_pow+0x3d0>)
 8006c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c10:	4606      	mov	r6, r0
 8006c12:	460f      	mov	r7, r1
 8006c14:	4620      	mov	r0, r4
 8006c16:	4629      	mov	r1, r5
 8006c18:	f7f9 fc9a 	bl	8000550 <__aeabi_dmul>
 8006c1c:	4b57      	ldr	r3, [pc, #348]	; (8006d7c <__ieee754_pow+0x3f4>)
 8006c1e:	4682      	mov	sl, r0
 8006c20:	468b      	mov	fp, r1
 8006c22:	2200      	movs	r2, #0
 8006c24:	4620      	mov	r0, r4
 8006c26:	4629      	mov	r1, r5
 8006c28:	f7f9 fc92 	bl	8000550 <__aeabi_dmul>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	460b      	mov	r3, r1
 8006c30:	a14b      	add	r1, pc, #300	; (adr r1, 8006d60 <__ieee754_pow+0x3d8>)
 8006c32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c36:	f7f9 fad3 	bl	80001e0 <__aeabi_dsub>
 8006c3a:	4622      	mov	r2, r4
 8006c3c:	462b      	mov	r3, r5
 8006c3e:	f7f9 fc87 	bl	8000550 <__aeabi_dmul>
 8006c42:	4602      	mov	r2, r0
 8006c44:	460b      	mov	r3, r1
 8006c46:	2000      	movs	r0, #0
 8006c48:	494d      	ldr	r1, [pc, #308]	; (8006d80 <__ieee754_pow+0x3f8>)
 8006c4a:	f7f9 fac9 	bl	80001e0 <__aeabi_dsub>
 8006c4e:	4622      	mov	r2, r4
 8006c50:	4680      	mov	r8, r0
 8006c52:	4689      	mov	r9, r1
 8006c54:	462b      	mov	r3, r5
 8006c56:	4620      	mov	r0, r4
 8006c58:	4629      	mov	r1, r5
 8006c5a:	f7f9 fc79 	bl	8000550 <__aeabi_dmul>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	460b      	mov	r3, r1
 8006c62:	4640      	mov	r0, r8
 8006c64:	4649      	mov	r1, r9
 8006c66:	f7f9 fc73 	bl	8000550 <__aeabi_dmul>
 8006c6a:	a33f      	add	r3, pc, #252	; (adr r3, 8006d68 <__ieee754_pow+0x3e0>)
 8006c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c70:	f7f9 fc6e 	bl	8000550 <__aeabi_dmul>
 8006c74:	4602      	mov	r2, r0
 8006c76:	460b      	mov	r3, r1
 8006c78:	4650      	mov	r0, sl
 8006c7a:	4659      	mov	r1, fp
 8006c7c:	f7f9 fab0 	bl	80001e0 <__aeabi_dsub>
 8006c80:	4602      	mov	r2, r0
 8006c82:	460b      	mov	r3, r1
 8006c84:	4680      	mov	r8, r0
 8006c86:	4689      	mov	r9, r1
 8006c88:	4630      	mov	r0, r6
 8006c8a:	4639      	mov	r1, r7
 8006c8c:	f7f9 faaa 	bl	80001e4 <__adddf3>
 8006c90:	2000      	movs	r0, #0
 8006c92:	4632      	mov	r2, r6
 8006c94:	463b      	mov	r3, r7
 8006c96:	4604      	mov	r4, r0
 8006c98:	460d      	mov	r5, r1
 8006c9a:	f7f9 faa1 	bl	80001e0 <__aeabi_dsub>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	4640      	mov	r0, r8
 8006ca4:	4649      	mov	r1, r9
 8006ca6:	f7f9 fa9b 	bl	80001e0 <__aeabi_dsub>
 8006caa:	9b04      	ldr	r3, [sp, #16]
 8006cac:	9a06      	ldr	r2, [sp, #24]
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	4682      	mov	sl, r0
 8006cb4:	468b      	mov	fp, r1
 8006cb6:	f040 81e7 	bne.w	8007088 <__ieee754_pow+0x700>
 8006cba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006d70 <__ieee754_pow+0x3e8>
 8006cbe:	eeb0 8a47 	vmov.f32	s16, s14
 8006cc2:	eef0 8a67 	vmov.f32	s17, s15
 8006cc6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006cca:	2600      	movs	r6, #0
 8006ccc:	4632      	mov	r2, r6
 8006cce:	463b      	mov	r3, r7
 8006cd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006cd4:	f7f9 fa84 	bl	80001e0 <__aeabi_dsub>
 8006cd8:	4622      	mov	r2, r4
 8006cda:	462b      	mov	r3, r5
 8006cdc:	f7f9 fc38 	bl	8000550 <__aeabi_dmul>
 8006ce0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ce4:	4680      	mov	r8, r0
 8006ce6:	4689      	mov	r9, r1
 8006ce8:	4650      	mov	r0, sl
 8006cea:	4659      	mov	r1, fp
 8006cec:	f7f9 fc30 	bl	8000550 <__aeabi_dmul>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	4640      	mov	r0, r8
 8006cf6:	4649      	mov	r1, r9
 8006cf8:	f7f9 fa74 	bl	80001e4 <__adddf3>
 8006cfc:	4632      	mov	r2, r6
 8006cfe:	463b      	mov	r3, r7
 8006d00:	4680      	mov	r8, r0
 8006d02:	4689      	mov	r9, r1
 8006d04:	4620      	mov	r0, r4
 8006d06:	4629      	mov	r1, r5
 8006d08:	f7f9 fc22 	bl	8000550 <__aeabi_dmul>
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	4604      	mov	r4, r0
 8006d10:	460d      	mov	r5, r1
 8006d12:	4602      	mov	r2, r0
 8006d14:	4649      	mov	r1, r9
 8006d16:	4640      	mov	r0, r8
 8006d18:	f7f9 fa64 	bl	80001e4 <__adddf3>
 8006d1c:	4b19      	ldr	r3, [pc, #100]	; (8006d84 <__ieee754_pow+0x3fc>)
 8006d1e:	4299      	cmp	r1, r3
 8006d20:	ec45 4b19 	vmov	d9, r4, r5
 8006d24:	4606      	mov	r6, r0
 8006d26:	460f      	mov	r7, r1
 8006d28:	468b      	mov	fp, r1
 8006d2a:	f340 82f1 	ble.w	8007310 <__ieee754_pow+0x988>
 8006d2e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006d32:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006d36:	4303      	orrs	r3, r0
 8006d38:	f000 81e4 	beq.w	8007104 <__ieee754_pow+0x77c>
 8006d3c:	ec51 0b18 	vmov	r0, r1, d8
 8006d40:	2200      	movs	r2, #0
 8006d42:	2300      	movs	r3, #0
 8006d44:	f7f9 fe76 	bl	8000a34 <__aeabi_dcmplt>
 8006d48:	3800      	subs	r0, #0
 8006d4a:	bf18      	it	ne
 8006d4c:	2001      	movne	r0, #1
 8006d4e:	e72b      	b.n	8006ba8 <__ieee754_pow+0x220>
 8006d50:	60000000 	.word	0x60000000
 8006d54:	3ff71547 	.word	0x3ff71547
 8006d58:	f85ddf44 	.word	0xf85ddf44
 8006d5c:	3e54ae0b 	.word	0x3e54ae0b
 8006d60:	55555555 	.word	0x55555555
 8006d64:	3fd55555 	.word	0x3fd55555
 8006d68:	652b82fe 	.word	0x652b82fe
 8006d6c:	3ff71547 	.word	0x3ff71547
 8006d70:	00000000 	.word	0x00000000
 8006d74:	bff00000 	.word	0xbff00000
 8006d78:	3ff00000 	.word	0x3ff00000
 8006d7c:	3fd00000 	.word	0x3fd00000
 8006d80:	3fe00000 	.word	0x3fe00000
 8006d84:	408fffff 	.word	0x408fffff
 8006d88:	4bd5      	ldr	r3, [pc, #852]	; (80070e0 <__ieee754_pow+0x758>)
 8006d8a:	402b      	ands	r3, r5
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	b92b      	cbnz	r3, 8006d9c <__ieee754_pow+0x414>
 8006d90:	4bd4      	ldr	r3, [pc, #848]	; (80070e4 <__ieee754_pow+0x75c>)
 8006d92:	f7f9 fbdd 	bl	8000550 <__aeabi_dmul>
 8006d96:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006d9a:	460c      	mov	r4, r1
 8006d9c:	1523      	asrs	r3, r4, #20
 8006d9e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006da2:	4413      	add	r3, r2
 8006da4:	9305      	str	r3, [sp, #20]
 8006da6:	4bd0      	ldr	r3, [pc, #832]	; (80070e8 <__ieee754_pow+0x760>)
 8006da8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006dac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006db0:	429c      	cmp	r4, r3
 8006db2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006db6:	dd08      	ble.n	8006dca <__ieee754_pow+0x442>
 8006db8:	4bcc      	ldr	r3, [pc, #816]	; (80070ec <__ieee754_pow+0x764>)
 8006dba:	429c      	cmp	r4, r3
 8006dbc:	f340 8162 	ble.w	8007084 <__ieee754_pow+0x6fc>
 8006dc0:	9b05      	ldr	r3, [sp, #20]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	9305      	str	r3, [sp, #20]
 8006dc6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006dca:	2400      	movs	r4, #0
 8006dcc:	00e3      	lsls	r3, r4, #3
 8006dce:	9307      	str	r3, [sp, #28]
 8006dd0:	4bc7      	ldr	r3, [pc, #796]	; (80070f0 <__ieee754_pow+0x768>)
 8006dd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006dd6:	ed93 7b00 	vldr	d7, [r3]
 8006dda:	4629      	mov	r1, r5
 8006ddc:	ec53 2b17 	vmov	r2, r3, d7
 8006de0:	eeb0 9a47 	vmov.f32	s18, s14
 8006de4:	eef0 9a67 	vmov.f32	s19, s15
 8006de8:	4682      	mov	sl, r0
 8006dea:	f7f9 f9f9 	bl	80001e0 <__aeabi_dsub>
 8006dee:	4652      	mov	r2, sl
 8006df0:	4606      	mov	r6, r0
 8006df2:	460f      	mov	r7, r1
 8006df4:	462b      	mov	r3, r5
 8006df6:	ec51 0b19 	vmov	r0, r1, d9
 8006dfa:	f7f9 f9f3 	bl	80001e4 <__adddf3>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	460b      	mov	r3, r1
 8006e02:	2000      	movs	r0, #0
 8006e04:	49bb      	ldr	r1, [pc, #748]	; (80070f4 <__ieee754_pow+0x76c>)
 8006e06:	f7f9 fccd 	bl	80007a4 <__aeabi_ddiv>
 8006e0a:	ec41 0b1a 	vmov	d10, r0, r1
 8006e0e:	4602      	mov	r2, r0
 8006e10:	460b      	mov	r3, r1
 8006e12:	4630      	mov	r0, r6
 8006e14:	4639      	mov	r1, r7
 8006e16:	f7f9 fb9b 	bl	8000550 <__aeabi_dmul>
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e20:	9302      	str	r3, [sp, #8]
 8006e22:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006e26:	46ab      	mov	fp, r5
 8006e28:	106d      	asrs	r5, r5, #1
 8006e2a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006e2e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006e32:	ec41 0b18 	vmov	d8, r0, r1
 8006e36:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	4640      	mov	r0, r8
 8006e3e:	4649      	mov	r1, r9
 8006e40:	4614      	mov	r4, r2
 8006e42:	461d      	mov	r5, r3
 8006e44:	f7f9 fb84 	bl	8000550 <__aeabi_dmul>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	4630      	mov	r0, r6
 8006e4e:	4639      	mov	r1, r7
 8006e50:	f7f9 f9c6 	bl	80001e0 <__aeabi_dsub>
 8006e54:	ec53 2b19 	vmov	r2, r3, d9
 8006e58:	4606      	mov	r6, r0
 8006e5a:	460f      	mov	r7, r1
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	4629      	mov	r1, r5
 8006e60:	f7f9 f9be 	bl	80001e0 <__aeabi_dsub>
 8006e64:	4602      	mov	r2, r0
 8006e66:	460b      	mov	r3, r1
 8006e68:	4650      	mov	r0, sl
 8006e6a:	4659      	mov	r1, fp
 8006e6c:	f7f9 f9b8 	bl	80001e0 <__aeabi_dsub>
 8006e70:	4642      	mov	r2, r8
 8006e72:	464b      	mov	r3, r9
 8006e74:	f7f9 fb6c 	bl	8000550 <__aeabi_dmul>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	4630      	mov	r0, r6
 8006e7e:	4639      	mov	r1, r7
 8006e80:	f7f9 f9ae 	bl	80001e0 <__aeabi_dsub>
 8006e84:	ec53 2b1a 	vmov	r2, r3, d10
 8006e88:	f7f9 fb62 	bl	8000550 <__aeabi_dmul>
 8006e8c:	ec53 2b18 	vmov	r2, r3, d8
 8006e90:	ec41 0b19 	vmov	d9, r0, r1
 8006e94:	ec51 0b18 	vmov	r0, r1, d8
 8006e98:	f7f9 fb5a 	bl	8000550 <__aeabi_dmul>
 8006e9c:	a37c      	add	r3, pc, #496	; (adr r3, 8007090 <__ieee754_pow+0x708>)
 8006e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	460d      	mov	r5, r1
 8006ea6:	f7f9 fb53 	bl	8000550 <__aeabi_dmul>
 8006eaa:	a37b      	add	r3, pc, #492	; (adr r3, 8007098 <__ieee754_pow+0x710>)
 8006eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb0:	f7f9 f998 	bl	80001e4 <__adddf3>
 8006eb4:	4622      	mov	r2, r4
 8006eb6:	462b      	mov	r3, r5
 8006eb8:	f7f9 fb4a 	bl	8000550 <__aeabi_dmul>
 8006ebc:	a378      	add	r3, pc, #480	; (adr r3, 80070a0 <__ieee754_pow+0x718>)
 8006ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec2:	f7f9 f98f 	bl	80001e4 <__adddf3>
 8006ec6:	4622      	mov	r2, r4
 8006ec8:	462b      	mov	r3, r5
 8006eca:	f7f9 fb41 	bl	8000550 <__aeabi_dmul>
 8006ece:	a376      	add	r3, pc, #472	; (adr r3, 80070a8 <__ieee754_pow+0x720>)
 8006ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed4:	f7f9 f986 	bl	80001e4 <__adddf3>
 8006ed8:	4622      	mov	r2, r4
 8006eda:	462b      	mov	r3, r5
 8006edc:	f7f9 fb38 	bl	8000550 <__aeabi_dmul>
 8006ee0:	a373      	add	r3, pc, #460	; (adr r3, 80070b0 <__ieee754_pow+0x728>)
 8006ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee6:	f7f9 f97d 	bl	80001e4 <__adddf3>
 8006eea:	4622      	mov	r2, r4
 8006eec:	462b      	mov	r3, r5
 8006eee:	f7f9 fb2f 	bl	8000550 <__aeabi_dmul>
 8006ef2:	a371      	add	r3, pc, #452	; (adr r3, 80070b8 <__ieee754_pow+0x730>)
 8006ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef8:	f7f9 f974 	bl	80001e4 <__adddf3>
 8006efc:	4622      	mov	r2, r4
 8006efe:	4606      	mov	r6, r0
 8006f00:	460f      	mov	r7, r1
 8006f02:	462b      	mov	r3, r5
 8006f04:	4620      	mov	r0, r4
 8006f06:	4629      	mov	r1, r5
 8006f08:	f7f9 fb22 	bl	8000550 <__aeabi_dmul>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	460b      	mov	r3, r1
 8006f10:	4630      	mov	r0, r6
 8006f12:	4639      	mov	r1, r7
 8006f14:	f7f9 fb1c 	bl	8000550 <__aeabi_dmul>
 8006f18:	4642      	mov	r2, r8
 8006f1a:	4604      	mov	r4, r0
 8006f1c:	460d      	mov	r5, r1
 8006f1e:	464b      	mov	r3, r9
 8006f20:	ec51 0b18 	vmov	r0, r1, d8
 8006f24:	f7f9 f95e 	bl	80001e4 <__adddf3>
 8006f28:	ec53 2b19 	vmov	r2, r3, d9
 8006f2c:	f7f9 fb10 	bl	8000550 <__aeabi_dmul>
 8006f30:	4622      	mov	r2, r4
 8006f32:	462b      	mov	r3, r5
 8006f34:	f7f9 f956 	bl	80001e4 <__adddf3>
 8006f38:	4642      	mov	r2, r8
 8006f3a:	4682      	mov	sl, r0
 8006f3c:	468b      	mov	fp, r1
 8006f3e:	464b      	mov	r3, r9
 8006f40:	4640      	mov	r0, r8
 8006f42:	4649      	mov	r1, r9
 8006f44:	f7f9 fb04 	bl	8000550 <__aeabi_dmul>
 8006f48:	4b6b      	ldr	r3, [pc, #428]	; (80070f8 <__ieee754_pow+0x770>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	4606      	mov	r6, r0
 8006f4e:	460f      	mov	r7, r1
 8006f50:	f7f9 f948 	bl	80001e4 <__adddf3>
 8006f54:	4652      	mov	r2, sl
 8006f56:	465b      	mov	r3, fp
 8006f58:	f7f9 f944 	bl	80001e4 <__adddf3>
 8006f5c:	2000      	movs	r0, #0
 8006f5e:	4604      	mov	r4, r0
 8006f60:	460d      	mov	r5, r1
 8006f62:	4602      	mov	r2, r0
 8006f64:	460b      	mov	r3, r1
 8006f66:	4640      	mov	r0, r8
 8006f68:	4649      	mov	r1, r9
 8006f6a:	f7f9 faf1 	bl	8000550 <__aeabi_dmul>
 8006f6e:	4b62      	ldr	r3, [pc, #392]	; (80070f8 <__ieee754_pow+0x770>)
 8006f70:	4680      	mov	r8, r0
 8006f72:	4689      	mov	r9, r1
 8006f74:	2200      	movs	r2, #0
 8006f76:	4620      	mov	r0, r4
 8006f78:	4629      	mov	r1, r5
 8006f7a:	f7f9 f931 	bl	80001e0 <__aeabi_dsub>
 8006f7e:	4632      	mov	r2, r6
 8006f80:	463b      	mov	r3, r7
 8006f82:	f7f9 f92d 	bl	80001e0 <__aeabi_dsub>
 8006f86:	4602      	mov	r2, r0
 8006f88:	460b      	mov	r3, r1
 8006f8a:	4650      	mov	r0, sl
 8006f8c:	4659      	mov	r1, fp
 8006f8e:	f7f9 f927 	bl	80001e0 <__aeabi_dsub>
 8006f92:	ec53 2b18 	vmov	r2, r3, d8
 8006f96:	f7f9 fadb 	bl	8000550 <__aeabi_dmul>
 8006f9a:	4622      	mov	r2, r4
 8006f9c:	4606      	mov	r6, r0
 8006f9e:	460f      	mov	r7, r1
 8006fa0:	462b      	mov	r3, r5
 8006fa2:	ec51 0b19 	vmov	r0, r1, d9
 8006fa6:	f7f9 fad3 	bl	8000550 <__aeabi_dmul>
 8006faa:	4602      	mov	r2, r0
 8006fac:	460b      	mov	r3, r1
 8006fae:	4630      	mov	r0, r6
 8006fb0:	4639      	mov	r1, r7
 8006fb2:	f7f9 f917 	bl	80001e4 <__adddf3>
 8006fb6:	4606      	mov	r6, r0
 8006fb8:	460f      	mov	r7, r1
 8006fba:	4602      	mov	r2, r0
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	4640      	mov	r0, r8
 8006fc0:	4649      	mov	r1, r9
 8006fc2:	f7f9 f90f 	bl	80001e4 <__adddf3>
 8006fc6:	a33e      	add	r3, pc, #248	; (adr r3, 80070c0 <__ieee754_pow+0x738>)
 8006fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fcc:	2000      	movs	r0, #0
 8006fce:	4604      	mov	r4, r0
 8006fd0:	460d      	mov	r5, r1
 8006fd2:	f7f9 fabd 	bl	8000550 <__aeabi_dmul>
 8006fd6:	4642      	mov	r2, r8
 8006fd8:	ec41 0b18 	vmov	d8, r0, r1
 8006fdc:	464b      	mov	r3, r9
 8006fde:	4620      	mov	r0, r4
 8006fe0:	4629      	mov	r1, r5
 8006fe2:	f7f9 f8fd 	bl	80001e0 <__aeabi_dsub>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	460b      	mov	r3, r1
 8006fea:	4630      	mov	r0, r6
 8006fec:	4639      	mov	r1, r7
 8006fee:	f7f9 f8f7 	bl	80001e0 <__aeabi_dsub>
 8006ff2:	a335      	add	r3, pc, #212	; (adr r3, 80070c8 <__ieee754_pow+0x740>)
 8006ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff8:	f7f9 faaa 	bl	8000550 <__aeabi_dmul>
 8006ffc:	a334      	add	r3, pc, #208	; (adr r3, 80070d0 <__ieee754_pow+0x748>)
 8006ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007002:	4606      	mov	r6, r0
 8007004:	460f      	mov	r7, r1
 8007006:	4620      	mov	r0, r4
 8007008:	4629      	mov	r1, r5
 800700a:	f7f9 faa1 	bl	8000550 <__aeabi_dmul>
 800700e:	4602      	mov	r2, r0
 8007010:	460b      	mov	r3, r1
 8007012:	4630      	mov	r0, r6
 8007014:	4639      	mov	r1, r7
 8007016:	f7f9 f8e5 	bl	80001e4 <__adddf3>
 800701a:	9a07      	ldr	r2, [sp, #28]
 800701c:	4b37      	ldr	r3, [pc, #220]	; (80070fc <__ieee754_pow+0x774>)
 800701e:	4413      	add	r3, r2
 8007020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007024:	f7f9 f8de 	bl	80001e4 <__adddf3>
 8007028:	4682      	mov	sl, r0
 800702a:	9805      	ldr	r0, [sp, #20]
 800702c:	468b      	mov	fp, r1
 800702e:	f7f9 fa25 	bl	800047c <__aeabi_i2d>
 8007032:	9a07      	ldr	r2, [sp, #28]
 8007034:	4b32      	ldr	r3, [pc, #200]	; (8007100 <__ieee754_pow+0x778>)
 8007036:	4413      	add	r3, r2
 8007038:	e9d3 8900 	ldrd	r8, r9, [r3]
 800703c:	4606      	mov	r6, r0
 800703e:	460f      	mov	r7, r1
 8007040:	4652      	mov	r2, sl
 8007042:	465b      	mov	r3, fp
 8007044:	ec51 0b18 	vmov	r0, r1, d8
 8007048:	f7f9 f8cc 	bl	80001e4 <__adddf3>
 800704c:	4642      	mov	r2, r8
 800704e:	464b      	mov	r3, r9
 8007050:	f7f9 f8c8 	bl	80001e4 <__adddf3>
 8007054:	4632      	mov	r2, r6
 8007056:	463b      	mov	r3, r7
 8007058:	f7f9 f8c4 	bl	80001e4 <__adddf3>
 800705c:	2000      	movs	r0, #0
 800705e:	4632      	mov	r2, r6
 8007060:	463b      	mov	r3, r7
 8007062:	4604      	mov	r4, r0
 8007064:	460d      	mov	r5, r1
 8007066:	f7f9 f8bb 	bl	80001e0 <__aeabi_dsub>
 800706a:	4642      	mov	r2, r8
 800706c:	464b      	mov	r3, r9
 800706e:	f7f9 f8b7 	bl	80001e0 <__aeabi_dsub>
 8007072:	ec53 2b18 	vmov	r2, r3, d8
 8007076:	f7f9 f8b3 	bl	80001e0 <__aeabi_dsub>
 800707a:	4602      	mov	r2, r0
 800707c:	460b      	mov	r3, r1
 800707e:	4650      	mov	r0, sl
 8007080:	4659      	mov	r1, fp
 8007082:	e610      	b.n	8006ca6 <__ieee754_pow+0x31e>
 8007084:	2401      	movs	r4, #1
 8007086:	e6a1      	b.n	8006dcc <__ieee754_pow+0x444>
 8007088:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80070d8 <__ieee754_pow+0x750>
 800708c:	e617      	b.n	8006cbe <__ieee754_pow+0x336>
 800708e:	bf00      	nop
 8007090:	4a454eef 	.word	0x4a454eef
 8007094:	3fca7e28 	.word	0x3fca7e28
 8007098:	93c9db65 	.word	0x93c9db65
 800709c:	3fcd864a 	.word	0x3fcd864a
 80070a0:	a91d4101 	.word	0xa91d4101
 80070a4:	3fd17460 	.word	0x3fd17460
 80070a8:	518f264d 	.word	0x518f264d
 80070ac:	3fd55555 	.word	0x3fd55555
 80070b0:	db6fabff 	.word	0xdb6fabff
 80070b4:	3fdb6db6 	.word	0x3fdb6db6
 80070b8:	33333303 	.word	0x33333303
 80070bc:	3fe33333 	.word	0x3fe33333
 80070c0:	e0000000 	.word	0xe0000000
 80070c4:	3feec709 	.word	0x3feec709
 80070c8:	dc3a03fd 	.word	0xdc3a03fd
 80070cc:	3feec709 	.word	0x3feec709
 80070d0:	145b01f5 	.word	0x145b01f5
 80070d4:	be3e2fe0 	.word	0xbe3e2fe0
 80070d8:	00000000 	.word	0x00000000
 80070dc:	3ff00000 	.word	0x3ff00000
 80070e0:	7ff00000 	.word	0x7ff00000
 80070e4:	43400000 	.word	0x43400000
 80070e8:	0003988e 	.word	0x0003988e
 80070ec:	000bb679 	.word	0x000bb679
 80070f0:	080086a0 	.word	0x080086a0
 80070f4:	3ff00000 	.word	0x3ff00000
 80070f8:	40080000 	.word	0x40080000
 80070fc:	080086c0 	.word	0x080086c0
 8007100:	080086b0 	.word	0x080086b0
 8007104:	a3b5      	add	r3, pc, #724	; (adr r3, 80073dc <__ieee754_pow+0xa54>)
 8007106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710a:	4640      	mov	r0, r8
 800710c:	4649      	mov	r1, r9
 800710e:	f7f9 f869 	bl	80001e4 <__adddf3>
 8007112:	4622      	mov	r2, r4
 8007114:	ec41 0b1a 	vmov	d10, r0, r1
 8007118:	462b      	mov	r3, r5
 800711a:	4630      	mov	r0, r6
 800711c:	4639      	mov	r1, r7
 800711e:	f7f9 f85f 	bl	80001e0 <__aeabi_dsub>
 8007122:	4602      	mov	r2, r0
 8007124:	460b      	mov	r3, r1
 8007126:	ec51 0b1a 	vmov	r0, r1, d10
 800712a:	f7f9 fca1 	bl	8000a70 <__aeabi_dcmpgt>
 800712e:	2800      	cmp	r0, #0
 8007130:	f47f ae04 	bne.w	8006d3c <__ieee754_pow+0x3b4>
 8007134:	4aa4      	ldr	r2, [pc, #656]	; (80073c8 <__ieee754_pow+0xa40>)
 8007136:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800713a:	4293      	cmp	r3, r2
 800713c:	f340 8108 	ble.w	8007350 <__ieee754_pow+0x9c8>
 8007140:	151b      	asrs	r3, r3, #20
 8007142:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007146:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800714a:	fa4a f303 	asr.w	r3, sl, r3
 800714e:	445b      	add	r3, fp
 8007150:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007154:	4e9d      	ldr	r6, [pc, #628]	; (80073cc <__ieee754_pow+0xa44>)
 8007156:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800715a:	4116      	asrs	r6, r2
 800715c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007160:	2000      	movs	r0, #0
 8007162:	ea23 0106 	bic.w	r1, r3, r6
 8007166:	f1c2 0214 	rsb	r2, r2, #20
 800716a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800716e:	fa4a fa02 	asr.w	sl, sl, r2
 8007172:	f1bb 0f00 	cmp.w	fp, #0
 8007176:	4602      	mov	r2, r0
 8007178:	460b      	mov	r3, r1
 800717a:	4620      	mov	r0, r4
 800717c:	4629      	mov	r1, r5
 800717e:	bfb8      	it	lt
 8007180:	f1ca 0a00 	rsblt	sl, sl, #0
 8007184:	f7f9 f82c 	bl	80001e0 <__aeabi_dsub>
 8007188:	ec41 0b19 	vmov	d9, r0, r1
 800718c:	4642      	mov	r2, r8
 800718e:	464b      	mov	r3, r9
 8007190:	ec51 0b19 	vmov	r0, r1, d9
 8007194:	f7f9 f826 	bl	80001e4 <__adddf3>
 8007198:	a37b      	add	r3, pc, #492	; (adr r3, 8007388 <__ieee754_pow+0xa00>)
 800719a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719e:	2000      	movs	r0, #0
 80071a0:	4604      	mov	r4, r0
 80071a2:	460d      	mov	r5, r1
 80071a4:	f7f9 f9d4 	bl	8000550 <__aeabi_dmul>
 80071a8:	ec53 2b19 	vmov	r2, r3, d9
 80071ac:	4606      	mov	r6, r0
 80071ae:	460f      	mov	r7, r1
 80071b0:	4620      	mov	r0, r4
 80071b2:	4629      	mov	r1, r5
 80071b4:	f7f9 f814 	bl	80001e0 <__aeabi_dsub>
 80071b8:	4602      	mov	r2, r0
 80071ba:	460b      	mov	r3, r1
 80071bc:	4640      	mov	r0, r8
 80071be:	4649      	mov	r1, r9
 80071c0:	f7f9 f80e 	bl	80001e0 <__aeabi_dsub>
 80071c4:	a372      	add	r3, pc, #456	; (adr r3, 8007390 <__ieee754_pow+0xa08>)
 80071c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ca:	f7f9 f9c1 	bl	8000550 <__aeabi_dmul>
 80071ce:	a372      	add	r3, pc, #456	; (adr r3, 8007398 <__ieee754_pow+0xa10>)
 80071d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d4:	4680      	mov	r8, r0
 80071d6:	4689      	mov	r9, r1
 80071d8:	4620      	mov	r0, r4
 80071da:	4629      	mov	r1, r5
 80071dc:	f7f9 f9b8 	bl	8000550 <__aeabi_dmul>
 80071e0:	4602      	mov	r2, r0
 80071e2:	460b      	mov	r3, r1
 80071e4:	4640      	mov	r0, r8
 80071e6:	4649      	mov	r1, r9
 80071e8:	f7f8 fffc 	bl	80001e4 <__adddf3>
 80071ec:	4604      	mov	r4, r0
 80071ee:	460d      	mov	r5, r1
 80071f0:	4602      	mov	r2, r0
 80071f2:	460b      	mov	r3, r1
 80071f4:	4630      	mov	r0, r6
 80071f6:	4639      	mov	r1, r7
 80071f8:	f7f8 fff4 	bl	80001e4 <__adddf3>
 80071fc:	4632      	mov	r2, r6
 80071fe:	463b      	mov	r3, r7
 8007200:	4680      	mov	r8, r0
 8007202:	4689      	mov	r9, r1
 8007204:	f7f8 ffec 	bl	80001e0 <__aeabi_dsub>
 8007208:	4602      	mov	r2, r0
 800720a:	460b      	mov	r3, r1
 800720c:	4620      	mov	r0, r4
 800720e:	4629      	mov	r1, r5
 8007210:	f7f8 ffe6 	bl	80001e0 <__aeabi_dsub>
 8007214:	4642      	mov	r2, r8
 8007216:	4606      	mov	r6, r0
 8007218:	460f      	mov	r7, r1
 800721a:	464b      	mov	r3, r9
 800721c:	4640      	mov	r0, r8
 800721e:	4649      	mov	r1, r9
 8007220:	f7f9 f996 	bl	8000550 <__aeabi_dmul>
 8007224:	a35e      	add	r3, pc, #376	; (adr r3, 80073a0 <__ieee754_pow+0xa18>)
 8007226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722a:	4604      	mov	r4, r0
 800722c:	460d      	mov	r5, r1
 800722e:	f7f9 f98f 	bl	8000550 <__aeabi_dmul>
 8007232:	a35d      	add	r3, pc, #372	; (adr r3, 80073a8 <__ieee754_pow+0xa20>)
 8007234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007238:	f7f8 ffd2 	bl	80001e0 <__aeabi_dsub>
 800723c:	4622      	mov	r2, r4
 800723e:	462b      	mov	r3, r5
 8007240:	f7f9 f986 	bl	8000550 <__aeabi_dmul>
 8007244:	a35a      	add	r3, pc, #360	; (adr r3, 80073b0 <__ieee754_pow+0xa28>)
 8007246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724a:	f7f8 ffcb 	bl	80001e4 <__adddf3>
 800724e:	4622      	mov	r2, r4
 8007250:	462b      	mov	r3, r5
 8007252:	f7f9 f97d 	bl	8000550 <__aeabi_dmul>
 8007256:	a358      	add	r3, pc, #352	; (adr r3, 80073b8 <__ieee754_pow+0xa30>)
 8007258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725c:	f7f8 ffc0 	bl	80001e0 <__aeabi_dsub>
 8007260:	4622      	mov	r2, r4
 8007262:	462b      	mov	r3, r5
 8007264:	f7f9 f974 	bl	8000550 <__aeabi_dmul>
 8007268:	a355      	add	r3, pc, #340	; (adr r3, 80073c0 <__ieee754_pow+0xa38>)
 800726a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726e:	f7f8 ffb9 	bl	80001e4 <__adddf3>
 8007272:	4622      	mov	r2, r4
 8007274:	462b      	mov	r3, r5
 8007276:	f7f9 f96b 	bl	8000550 <__aeabi_dmul>
 800727a:	4602      	mov	r2, r0
 800727c:	460b      	mov	r3, r1
 800727e:	4640      	mov	r0, r8
 8007280:	4649      	mov	r1, r9
 8007282:	f7f8 ffad 	bl	80001e0 <__aeabi_dsub>
 8007286:	4604      	mov	r4, r0
 8007288:	460d      	mov	r5, r1
 800728a:	4602      	mov	r2, r0
 800728c:	460b      	mov	r3, r1
 800728e:	4640      	mov	r0, r8
 8007290:	4649      	mov	r1, r9
 8007292:	f7f9 f95d 	bl	8000550 <__aeabi_dmul>
 8007296:	2200      	movs	r2, #0
 8007298:	ec41 0b19 	vmov	d9, r0, r1
 800729c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80072a0:	4620      	mov	r0, r4
 80072a2:	4629      	mov	r1, r5
 80072a4:	f7f8 ff9c 	bl	80001e0 <__aeabi_dsub>
 80072a8:	4602      	mov	r2, r0
 80072aa:	460b      	mov	r3, r1
 80072ac:	ec51 0b19 	vmov	r0, r1, d9
 80072b0:	f7f9 fa78 	bl	80007a4 <__aeabi_ddiv>
 80072b4:	4632      	mov	r2, r6
 80072b6:	4604      	mov	r4, r0
 80072b8:	460d      	mov	r5, r1
 80072ba:	463b      	mov	r3, r7
 80072bc:	4640      	mov	r0, r8
 80072be:	4649      	mov	r1, r9
 80072c0:	f7f9 f946 	bl	8000550 <__aeabi_dmul>
 80072c4:	4632      	mov	r2, r6
 80072c6:	463b      	mov	r3, r7
 80072c8:	f7f8 ff8c 	bl	80001e4 <__adddf3>
 80072cc:	4602      	mov	r2, r0
 80072ce:	460b      	mov	r3, r1
 80072d0:	4620      	mov	r0, r4
 80072d2:	4629      	mov	r1, r5
 80072d4:	f7f8 ff84 	bl	80001e0 <__aeabi_dsub>
 80072d8:	4642      	mov	r2, r8
 80072da:	464b      	mov	r3, r9
 80072dc:	f7f8 ff80 	bl	80001e0 <__aeabi_dsub>
 80072e0:	460b      	mov	r3, r1
 80072e2:	4602      	mov	r2, r0
 80072e4:	493a      	ldr	r1, [pc, #232]	; (80073d0 <__ieee754_pow+0xa48>)
 80072e6:	2000      	movs	r0, #0
 80072e8:	f7f8 ff7a 	bl	80001e0 <__aeabi_dsub>
 80072ec:	ec41 0b10 	vmov	d0, r0, r1
 80072f0:	ee10 3a90 	vmov	r3, s1
 80072f4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80072f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072fc:	da2b      	bge.n	8007356 <__ieee754_pow+0x9ce>
 80072fe:	4650      	mov	r0, sl
 8007300:	f000 fc5a 	bl	8007bb8 <scalbn>
 8007304:	ec51 0b10 	vmov	r0, r1, d0
 8007308:	ec53 2b18 	vmov	r2, r3, d8
 800730c:	f7ff bbed 	b.w	8006aea <__ieee754_pow+0x162>
 8007310:	4b30      	ldr	r3, [pc, #192]	; (80073d4 <__ieee754_pow+0xa4c>)
 8007312:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007316:	429e      	cmp	r6, r3
 8007318:	f77f af0c 	ble.w	8007134 <__ieee754_pow+0x7ac>
 800731c:	4b2e      	ldr	r3, [pc, #184]	; (80073d8 <__ieee754_pow+0xa50>)
 800731e:	440b      	add	r3, r1
 8007320:	4303      	orrs	r3, r0
 8007322:	d009      	beq.n	8007338 <__ieee754_pow+0x9b0>
 8007324:	ec51 0b18 	vmov	r0, r1, d8
 8007328:	2200      	movs	r2, #0
 800732a:	2300      	movs	r3, #0
 800732c:	f7f9 fb82 	bl	8000a34 <__aeabi_dcmplt>
 8007330:	3800      	subs	r0, #0
 8007332:	bf18      	it	ne
 8007334:	2001      	movne	r0, #1
 8007336:	e447      	b.n	8006bc8 <__ieee754_pow+0x240>
 8007338:	4622      	mov	r2, r4
 800733a:	462b      	mov	r3, r5
 800733c:	f7f8 ff50 	bl	80001e0 <__aeabi_dsub>
 8007340:	4642      	mov	r2, r8
 8007342:	464b      	mov	r3, r9
 8007344:	f7f9 fb8a 	bl	8000a5c <__aeabi_dcmpge>
 8007348:	2800      	cmp	r0, #0
 800734a:	f43f aef3 	beq.w	8007134 <__ieee754_pow+0x7ac>
 800734e:	e7e9      	b.n	8007324 <__ieee754_pow+0x99c>
 8007350:	f04f 0a00 	mov.w	sl, #0
 8007354:	e71a      	b.n	800718c <__ieee754_pow+0x804>
 8007356:	ec51 0b10 	vmov	r0, r1, d0
 800735a:	4619      	mov	r1, r3
 800735c:	e7d4      	b.n	8007308 <__ieee754_pow+0x980>
 800735e:	491c      	ldr	r1, [pc, #112]	; (80073d0 <__ieee754_pow+0xa48>)
 8007360:	2000      	movs	r0, #0
 8007362:	f7ff bb30 	b.w	80069c6 <__ieee754_pow+0x3e>
 8007366:	2000      	movs	r0, #0
 8007368:	2100      	movs	r1, #0
 800736a:	f7ff bb2c 	b.w	80069c6 <__ieee754_pow+0x3e>
 800736e:	4630      	mov	r0, r6
 8007370:	4639      	mov	r1, r7
 8007372:	f7ff bb28 	b.w	80069c6 <__ieee754_pow+0x3e>
 8007376:	9204      	str	r2, [sp, #16]
 8007378:	f7ff bb7a 	b.w	8006a70 <__ieee754_pow+0xe8>
 800737c:	2300      	movs	r3, #0
 800737e:	f7ff bb64 	b.w	8006a4a <__ieee754_pow+0xc2>
 8007382:	bf00      	nop
 8007384:	f3af 8000 	nop.w
 8007388:	00000000 	.word	0x00000000
 800738c:	3fe62e43 	.word	0x3fe62e43
 8007390:	fefa39ef 	.word	0xfefa39ef
 8007394:	3fe62e42 	.word	0x3fe62e42
 8007398:	0ca86c39 	.word	0x0ca86c39
 800739c:	be205c61 	.word	0xbe205c61
 80073a0:	72bea4d0 	.word	0x72bea4d0
 80073a4:	3e663769 	.word	0x3e663769
 80073a8:	c5d26bf1 	.word	0xc5d26bf1
 80073ac:	3ebbbd41 	.word	0x3ebbbd41
 80073b0:	af25de2c 	.word	0xaf25de2c
 80073b4:	3f11566a 	.word	0x3f11566a
 80073b8:	16bebd93 	.word	0x16bebd93
 80073bc:	3f66c16c 	.word	0x3f66c16c
 80073c0:	5555553e 	.word	0x5555553e
 80073c4:	3fc55555 	.word	0x3fc55555
 80073c8:	3fe00000 	.word	0x3fe00000
 80073cc:	000fffff 	.word	0x000fffff
 80073d0:	3ff00000 	.word	0x3ff00000
 80073d4:	4090cbff 	.word	0x4090cbff
 80073d8:	3f6f3400 	.word	0x3f6f3400
 80073dc:	652b82fe 	.word	0x652b82fe
 80073e0:	3c971547 	.word	0x3c971547

080073e4 <__ieee754_sqrt>:
 80073e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073e8:	ec55 4b10 	vmov	r4, r5, d0
 80073ec:	4e55      	ldr	r6, [pc, #340]	; (8007544 <__ieee754_sqrt+0x160>)
 80073ee:	43ae      	bics	r6, r5
 80073f0:	ee10 0a10 	vmov	r0, s0
 80073f4:	ee10 3a10 	vmov	r3, s0
 80073f8:	462a      	mov	r2, r5
 80073fa:	4629      	mov	r1, r5
 80073fc:	d110      	bne.n	8007420 <__ieee754_sqrt+0x3c>
 80073fe:	ee10 2a10 	vmov	r2, s0
 8007402:	462b      	mov	r3, r5
 8007404:	f7f9 f8a4 	bl	8000550 <__aeabi_dmul>
 8007408:	4602      	mov	r2, r0
 800740a:	460b      	mov	r3, r1
 800740c:	4620      	mov	r0, r4
 800740e:	4629      	mov	r1, r5
 8007410:	f7f8 fee8 	bl	80001e4 <__adddf3>
 8007414:	4604      	mov	r4, r0
 8007416:	460d      	mov	r5, r1
 8007418:	ec45 4b10 	vmov	d0, r4, r5
 800741c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007420:	2d00      	cmp	r5, #0
 8007422:	dc10      	bgt.n	8007446 <__ieee754_sqrt+0x62>
 8007424:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007428:	4330      	orrs	r0, r6
 800742a:	d0f5      	beq.n	8007418 <__ieee754_sqrt+0x34>
 800742c:	b15d      	cbz	r5, 8007446 <__ieee754_sqrt+0x62>
 800742e:	ee10 2a10 	vmov	r2, s0
 8007432:	462b      	mov	r3, r5
 8007434:	ee10 0a10 	vmov	r0, s0
 8007438:	f7f8 fed2 	bl	80001e0 <__aeabi_dsub>
 800743c:	4602      	mov	r2, r0
 800743e:	460b      	mov	r3, r1
 8007440:	f7f9 f9b0 	bl	80007a4 <__aeabi_ddiv>
 8007444:	e7e6      	b.n	8007414 <__ieee754_sqrt+0x30>
 8007446:	1512      	asrs	r2, r2, #20
 8007448:	d074      	beq.n	8007534 <__ieee754_sqrt+0x150>
 800744a:	07d4      	lsls	r4, r2, #31
 800744c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007450:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8007454:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007458:	bf5e      	ittt	pl
 800745a:	0fda      	lsrpl	r2, r3, #31
 800745c:	005b      	lslpl	r3, r3, #1
 800745e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8007462:	2400      	movs	r4, #0
 8007464:	0fda      	lsrs	r2, r3, #31
 8007466:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800746a:	107f      	asrs	r7, r7, #1
 800746c:	005b      	lsls	r3, r3, #1
 800746e:	2516      	movs	r5, #22
 8007470:	4620      	mov	r0, r4
 8007472:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007476:	1886      	adds	r6, r0, r2
 8007478:	428e      	cmp	r6, r1
 800747a:	bfde      	ittt	le
 800747c:	1b89      	suble	r1, r1, r6
 800747e:	18b0      	addle	r0, r6, r2
 8007480:	18a4      	addle	r4, r4, r2
 8007482:	0049      	lsls	r1, r1, #1
 8007484:	3d01      	subs	r5, #1
 8007486:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800748a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800748e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007492:	d1f0      	bne.n	8007476 <__ieee754_sqrt+0x92>
 8007494:	462a      	mov	r2, r5
 8007496:	f04f 0e20 	mov.w	lr, #32
 800749a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800749e:	4281      	cmp	r1, r0
 80074a0:	eb06 0c05 	add.w	ip, r6, r5
 80074a4:	dc02      	bgt.n	80074ac <__ieee754_sqrt+0xc8>
 80074a6:	d113      	bne.n	80074d0 <__ieee754_sqrt+0xec>
 80074a8:	459c      	cmp	ip, r3
 80074aa:	d811      	bhi.n	80074d0 <__ieee754_sqrt+0xec>
 80074ac:	f1bc 0f00 	cmp.w	ip, #0
 80074b0:	eb0c 0506 	add.w	r5, ip, r6
 80074b4:	da43      	bge.n	800753e <__ieee754_sqrt+0x15a>
 80074b6:	2d00      	cmp	r5, #0
 80074b8:	db41      	blt.n	800753e <__ieee754_sqrt+0x15a>
 80074ba:	f100 0801 	add.w	r8, r0, #1
 80074be:	1a09      	subs	r1, r1, r0
 80074c0:	459c      	cmp	ip, r3
 80074c2:	bf88      	it	hi
 80074c4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80074c8:	eba3 030c 	sub.w	r3, r3, ip
 80074cc:	4432      	add	r2, r6
 80074ce:	4640      	mov	r0, r8
 80074d0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80074d4:	f1be 0e01 	subs.w	lr, lr, #1
 80074d8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80074dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80074e0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80074e4:	d1db      	bne.n	800749e <__ieee754_sqrt+0xba>
 80074e6:	430b      	orrs	r3, r1
 80074e8:	d006      	beq.n	80074f8 <__ieee754_sqrt+0x114>
 80074ea:	1c50      	adds	r0, r2, #1
 80074ec:	bf13      	iteet	ne
 80074ee:	3201      	addne	r2, #1
 80074f0:	3401      	addeq	r4, #1
 80074f2:	4672      	moveq	r2, lr
 80074f4:	f022 0201 	bicne.w	r2, r2, #1
 80074f8:	1063      	asrs	r3, r4, #1
 80074fa:	0852      	lsrs	r2, r2, #1
 80074fc:	07e1      	lsls	r1, r4, #31
 80074fe:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007502:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007506:	bf48      	it	mi
 8007508:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800750c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007510:	4614      	mov	r4, r2
 8007512:	e781      	b.n	8007418 <__ieee754_sqrt+0x34>
 8007514:	0ad9      	lsrs	r1, r3, #11
 8007516:	3815      	subs	r0, #21
 8007518:	055b      	lsls	r3, r3, #21
 800751a:	2900      	cmp	r1, #0
 800751c:	d0fa      	beq.n	8007514 <__ieee754_sqrt+0x130>
 800751e:	02cd      	lsls	r5, r1, #11
 8007520:	d50a      	bpl.n	8007538 <__ieee754_sqrt+0x154>
 8007522:	f1c2 0420 	rsb	r4, r2, #32
 8007526:	fa23 f404 	lsr.w	r4, r3, r4
 800752a:	1e55      	subs	r5, r2, #1
 800752c:	4093      	lsls	r3, r2
 800752e:	4321      	orrs	r1, r4
 8007530:	1b42      	subs	r2, r0, r5
 8007532:	e78a      	b.n	800744a <__ieee754_sqrt+0x66>
 8007534:	4610      	mov	r0, r2
 8007536:	e7f0      	b.n	800751a <__ieee754_sqrt+0x136>
 8007538:	0049      	lsls	r1, r1, #1
 800753a:	3201      	adds	r2, #1
 800753c:	e7ef      	b.n	800751e <__ieee754_sqrt+0x13a>
 800753e:	4680      	mov	r8, r0
 8007540:	e7bd      	b.n	80074be <__ieee754_sqrt+0xda>
 8007542:	bf00      	nop
 8007544:	7ff00000 	.word	0x7ff00000

08007548 <__ieee754_powf>:
 8007548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800754c:	ee10 4a90 	vmov	r4, s1
 8007550:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8007554:	ed2d 8b02 	vpush	{d8}
 8007558:	ee10 6a10 	vmov	r6, s0
 800755c:	eeb0 8a40 	vmov.f32	s16, s0
 8007560:	eef0 8a60 	vmov.f32	s17, s1
 8007564:	d10c      	bne.n	8007580 <__ieee754_powf+0x38>
 8007566:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800756a:	0076      	lsls	r6, r6, #1
 800756c:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8007570:	f240 8296 	bls.w	8007aa0 <__ieee754_powf+0x558>
 8007574:	ee38 0a28 	vadd.f32	s0, s16, s17
 8007578:	ecbd 8b02 	vpop	{d8}
 800757c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007580:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8007584:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8007588:	dcf4      	bgt.n	8007574 <__ieee754_powf+0x2c>
 800758a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800758e:	dd08      	ble.n	80075a2 <__ieee754_powf+0x5a>
 8007590:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8007594:	d1ee      	bne.n	8007574 <__ieee754_powf+0x2c>
 8007596:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800759a:	0064      	lsls	r4, r4, #1
 800759c:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80075a0:	e7e6      	b.n	8007570 <__ieee754_powf+0x28>
 80075a2:	2e00      	cmp	r6, #0
 80075a4:	da20      	bge.n	80075e8 <__ieee754_powf+0xa0>
 80075a6:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 80075aa:	da2d      	bge.n	8007608 <__ieee754_powf+0xc0>
 80075ac:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80075b0:	f2c0 827f 	blt.w	8007ab2 <__ieee754_powf+0x56a>
 80075b4:	ea4f 53e8 	mov.w	r3, r8, asr #23
 80075b8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80075bc:	fa48 f703 	asr.w	r7, r8, r3
 80075c0:	fa07 f303 	lsl.w	r3, r7, r3
 80075c4:	4543      	cmp	r3, r8
 80075c6:	f040 8274 	bne.w	8007ab2 <__ieee754_powf+0x56a>
 80075ca:	f007 0701 	and.w	r7, r7, #1
 80075ce:	f1c7 0702 	rsb	r7, r7, #2
 80075d2:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80075d6:	d11f      	bne.n	8007618 <__ieee754_powf+0xd0>
 80075d8:	2c00      	cmp	r4, #0
 80075da:	f280 8267 	bge.w	8007aac <__ieee754_powf+0x564>
 80075de:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80075e2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80075e6:	e7c7      	b.n	8007578 <__ieee754_powf+0x30>
 80075e8:	2700      	movs	r7, #0
 80075ea:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80075ee:	d1f0      	bne.n	80075d2 <__ieee754_powf+0x8a>
 80075f0:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 80075f4:	f000 8254 	beq.w	8007aa0 <__ieee754_powf+0x558>
 80075f8:	dd08      	ble.n	800760c <__ieee754_powf+0xc4>
 80075fa:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8007904 <__ieee754_powf+0x3bc>
 80075fe:	2c00      	cmp	r4, #0
 8007600:	bfa8      	it	ge
 8007602:	eeb0 0a68 	vmovge.f32	s0, s17
 8007606:	e7b7      	b.n	8007578 <__ieee754_powf+0x30>
 8007608:	2702      	movs	r7, #2
 800760a:	e7ee      	b.n	80075ea <__ieee754_powf+0xa2>
 800760c:	2c00      	cmp	r4, #0
 800760e:	f280 824a 	bge.w	8007aa6 <__ieee754_powf+0x55e>
 8007612:	eeb1 0a68 	vneg.f32	s0, s17
 8007616:	e7af      	b.n	8007578 <__ieee754_powf+0x30>
 8007618:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800761c:	d102      	bne.n	8007624 <__ieee754_powf+0xdc>
 800761e:	ee28 0a08 	vmul.f32	s0, s16, s16
 8007622:	e7a9      	b.n	8007578 <__ieee754_powf+0x30>
 8007624:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8007628:	eeb0 0a48 	vmov.f32	s0, s16
 800762c:	d107      	bne.n	800763e <__ieee754_powf+0xf6>
 800762e:	2e00      	cmp	r6, #0
 8007630:	db05      	blt.n	800763e <__ieee754_powf+0xf6>
 8007632:	ecbd 8b02 	vpop	{d8}
 8007636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800763a:	f000 ba53 	b.w	8007ae4 <__ieee754_sqrtf>
 800763e:	f000 fb41 	bl	8007cc4 <fabsf>
 8007642:	b125      	cbz	r5, 800764e <__ieee754_powf+0x106>
 8007644:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8007648:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800764c:	d116      	bne.n	800767c <__ieee754_powf+0x134>
 800764e:	2c00      	cmp	r4, #0
 8007650:	bfbc      	itt	lt
 8007652:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8007656:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800765a:	2e00      	cmp	r6, #0
 800765c:	da8c      	bge.n	8007578 <__ieee754_powf+0x30>
 800765e:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8007662:	ea55 0307 	orrs.w	r3, r5, r7
 8007666:	d104      	bne.n	8007672 <__ieee754_powf+0x12a>
 8007668:	ee70 7a40 	vsub.f32	s15, s0, s0
 800766c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007670:	e782      	b.n	8007578 <__ieee754_powf+0x30>
 8007672:	2f01      	cmp	r7, #1
 8007674:	d180      	bne.n	8007578 <__ieee754_powf+0x30>
 8007676:	eeb1 0a40 	vneg.f32	s0, s0
 800767a:	e77d      	b.n	8007578 <__ieee754_powf+0x30>
 800767c:	0ff0      	lsrs	r0, r6, #31
 800767e:	3801      	subs	r0, #1
 8007680:	ea57 0300 	orrs.w	r3, r7, r0
 8007684:	d104      	bne.n	8007690 <__ieee754_powf+0x148>
 8007686:	ee38 8a48 	vsub.f32	s16, s16, s16
 800768a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800768e:	e773      	b.n	8007578 <__ieee754_powf+0x30>
 8007690:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8007694:	dd74      	ble.n	8007780 <__ieee754_powf+0x238>
 8007696:	4b9c      	ldr	r3, [pc, #624]	; (8007908 <__ieee754_powf+0x3c0>)
 8007698:	429d      	cmp	r5, r3
 800769a:	dc08      	bgt.n	80076ae <__ieee754_powf+0x166>
 800769c:	2c00      	cmp	r4, #0
 800769e:	da0b      	bge.n	80076b8 <__ieee754_powf+0x170>
 80076a0:	2000      	movs	r0, #0
 80076a2:	ecbd 8b02 	vpop	{d8}
 80076a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076aa:	f000 ba6b 	b.w	8007b84 <__math_oflowf>
 80076ae:	4b97      	ldr	r3, [pc, #604]	; (800790c <__ieee754_powf+0x3c4>)
 80076b0:	429d      	cmp	r5, r3
 80076b2:	dd08      	ble.n	80076c6 <__ieee754_powf+0x17e>
 80076b4:	2c00      	cmp	r4, #0
 80076b6:	dcf3      	bgt.n	80076a0 <__ieee754_powf+0x158>
 80076b8:	2000      	movs	r0, #0
 80076ba:	ecbd 8b02 	vpop	{d8}
 80076be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076c2:	f000 ba59 	b.w	8007b78 <__math_uflowf>
 80076c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80076ca:	ee30 0a67 	vsub.f32	s0, s0, s15
 80076ce:	eddf 6a90 	vldr	s13, [pc, #576]	; 8007910 <__ieee754_powf+0x3c8>
 80076d2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80076d6:	eee0 6a67 	vfms.f32	s13, s0, s15
 80076da:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80076de:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80076e2:	ee20 7a00 	vmul.f32	s14, s0, s0
 80076e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ea:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8007914 <__ieee754_powf+0x3cc>
 80076ee:	ee67 7a67 	vnmul.f32	s15, s14, s15
 80076f2:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8007918 <__ieee754_powf+0x3d0>
 80076f6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80076fa:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800791c <__ieee754_powf+0x3d4>
 80076fe:	eef0 6a67 	vmov.f32	s13, s15
 8007702:	eee0 6a07 	vfma.f32	s13, s0, s14
 8007706:	ee16 3a90 	vmov	r3, s13
 800770a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800770e:	f023 030f 	bic.w	r3, r3, #15
 8007712:	ee00 3a90 	vmov	s1, r3
 8007716:	eee0 0a47 	vfms.f32	s1, s0, s14
 800771a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800771e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8007722:	f024 040f 	bic.w	r4, r4, #15
 8007726:	ee07 4a10 	vmov	s14, r4
 800772a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800772e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8007732:	ee07 3a90 	vmov	s15, r3
 8007736:	eee7 0a27 	vfma.f32	s1, s14, s15
 800773a:	3f01      	subs	r7, #1
 800773c:	ea57 0200 	orrs.w	r2, r7, r0
 8007740:	ee07 4a10 	vmov	s14, r4
 8007744:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007748:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800774c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8007750:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8007754:	ee17 4a10 	vmov	r4, s14
 8007758:	bf08      	it	eq
 800775a:	eeb0 8a40 	vmoveq.f32	s16, s0
 800775e:	2c00      	cmp	r4, #0
 8007760:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007764:	f340 817e 	ble.w	8007a64 <__ieee754_powf+0x51c>
 8007768:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800776c:	f340 80f8 	ble.w	8007960 <__ieee754_powf+0x418>
 8007770:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007778:	bf4c      	ite	mi
 800777a:	2001      	movmi	r0, #1
 800777c:	2000      	movpl	r0, #0
 800777e:	e790      	b.n	80076a2 <__ieee754_powf+0x15a>
 8007780:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8007784:	bf01      	itttt	eq
 8007786:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8007920 <__ieee754_powf+0x3d8>
 800778a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800778e:	f06f 0217 	mvneq.w	r2, #23
 8007792:	ee17 5a90 	vmoveq	r5, s15
 8007796:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800779a:	bf18      	it	ne
 800779c:	2200      	movne	r2, #0
 800779e:	3b7f      	subs	r3, #127	; 0x7f
 80077a0:	4413      	add	r3, r2
 80077a2:	4a60      	ldr	r2, [pc, #384]	; (8007924 <__ieee754_powf+0x3dc>)
 80077a4:	f3c5 0516 	ubfx	r5, r5, #0, #23
 80077a8:	4295      	cmp	r5, r2
 80077aa:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 80077ae:	dd06      	ble.n	80077be <__ieee754_powf+0x276>
 80077b0:	4a5d      	ldr	r2, [pc, #372]	; (8007928 <__ieee754_powf+0x3e0>)
 80077b2:	4295      	cmp	r5, r2
 80077b4:	f340 80a4 	ble.w	8007900 <__ieee754_powf+0x3b8>
 80077b8:	3301      	adds	r3, #1
 80077ba:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80077be:	2500      	movs	r5, #0
 80077c0:	4a5a      	ldr	r2, [pc, #360]	; (800792c <__ieee754_powf+0x3e4>)
 80077c2:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80077c6:	ee07 1a90 	vmov	s15, r1
 80077ca:	ed92 7a00 	vldr	s14, [r2]
 80077ce:	4a58      	ldr	r2, [pc, #352]	; (8007930 <__ieee754_powf+0x3e8>)
 80077d0:	ee37 6a27 	vadd.f32	s12, s14, s15
 80077d4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80077d8:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80077dc:	1049      	asrs	r1, r1, #1
 80077de:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80077e2:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80077e6:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 80077ea:	ee37 5ac7 	vsub.f32	s10, s15, s14
 80077ee:	ee06 1a10 	vmov	s12, r1
 80077f2:	ee65 4a26 	vmul.f32	s9, s10, s13
 80077f6:	ee36 7a47 	vsub.f32	s14, s12, s14
 80077fa:	ee14 6a90 	vmov	r6, s9
 80077fe:	4016      	ands	r6, r2
 8007800:	ee05 6a90 	vmov	s11, r6
 8007804:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8007808:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800780c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8007934 <__ieee754_powf+0x3ec>
 8007810:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8007814:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8007818:	ee25 6a26 	vmul.f32	s12, s10, s13
 800781c:	eddf 6a46 	vldr	s13, [pc, #280]	; 8007938 <__ieee754_powf+0x3f0>
 8007820:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8007824:	eddf 6a45 	vldr	s13, [pc, #276]	; 800793c <__ieee754_powf+0x3f4>
 8007828:	eee7 6a27 	vfma.f32	s13, s14, s15
 800782c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007910 <__ieee754_powf+0x3c8>
 8007830:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007834:	eddf 6a42 	vldr	s13, [pc, #264]	; 8007940 <__ieee754_powf+0x3f8>
 8007838:	eee7 6a27 	vfma.f32	s13, s14, s15
 800783c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8007944 <__ieee754_powf+0x3fc>
 8007840:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007844:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8007848:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800784c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8007850:	eee5 6a07 	vfma.f32	s13, s10, s14
 8007854:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8007858:	eef0 7a45 	vmov.f32	s15, s10
 800785c:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8007860:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007864:	ee17 1a90 	vmov	r1, s15
 8007868:	4011      	ands	r1, r2
 800786a:	ee07 1a90 	vmov	s15, r1
 800786e:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8007872:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8007876:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800787a:	ee27 7a24 	vmul.f32	s14, s14, s9
 800787e:	eea6 7a27 	vfma.f32	s14, s12, s15
 8007882:	eeb0 6a47 	vmov.f32	s12, s14
 8007886:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800788a:	ee16 1a10 	vmov	r1, s12
 800788e:	4011      	ands	r1, r2
 8007890:	ee06 1a90 	vmov	s13, r1
 8007894:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8007898:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007948 <__ieee754_powf+0x400>
 800789c:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800794c <__ieee754_powf+0x404>
 80078a0:	ee37 7a66 	vsub.f32	s14, s14, s13
 80078a4:	ee06 1a10 	vmov	s12, r1
 80078a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80078ac:	eddf 7a28 	vldr	s15, [pc, #160]	; 8007950 <__ieee754_powf+0x408>
 80078b0:	4928      	ldr	r1, [pc, #160]	; (8007954 <__ieee754_powf+0x40c>)
 80078b2:	eea6 7a27 	vfma.f32	s14, s12, s15
 80078b6:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80078ba:	edd1 7a00 	vldr	s15, [r1]
 80078be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80078c2:	ee07 3a90 	vmov	s15, r3
 80078c6:	4b24      	ldr	r3, [pc, #144]	; (8007958 <__ieee754_powf+0x410>)
 80078c8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80078cc:	eef0 7a47 	vmov.f32	s15, s14
 80078d0:	eee6 7a25 	vfma.f32	s15, s12, s11
 80078d4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80078d8:	edd5 0a00 	vldr	s1, [r5]
 80078dc:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80078e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078e4:	ee17 3a90 	vmov	r3, s15
 80078e8:	4013      	ands	r3, r2
 80078ea:	ee07 3a90 	vmov	s15, r3
 80078ee:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80078f2:	ee76 6ae0 	vsub.f32	s13, s13, s1
 80078f6:	eee6 6a65 	vfms.f32	s13, s12, s11
 80078fa:	ee77 7a66 	vsub.f32	s15, s14, s13
 80078fe:	e70e      	b.n	800771e <__ieee754_powf+0x1d6>
 8007900:	2501      	movs	r5, #1
 8007902:	e75d      	b.n	80077c0 <__ieee754_powf+0x278>
 8007904:	00000000 	.word	0x00000000
 8007908:	3f7ffff3 	.word	0x3f7ffff3
 800790c:	3f800007 	.word	0x3f800007
 8007910:	3eaaaaab 	.word	0x3eaaaaab
 8007914:	3fb8aa3b 	.word	0x3fb8aa3b
 8007918:	36eca570 	.word	0x36eca570
 800791c:	3fb8aa00 	.word	0x3fb8aa00
 8007920:	4b800000 	.word	0x4b800000
 8007924:	001cc471 	.word	0x001cc471
 8007928:	005db3d6 	.word	0x005db3d6
 800792c:	080086d0 	.word	0x080086d0
 8007930:	fffff000 	.word	0xfffff000
 8007934:	3e6c3255 	.word	0x3e6c3255
 8007938:	3e53f142 	.word	0x3e53f142
 800793c:	3e8ba305 	.word	0x3e8ba305
 8007940:	3edb6db7 	.word	0x3edb6db7
 8007944:	3f19999a 	.word	0x3f19999a
 8007948:	3f76384f 	.word	0x3f76384f
 800794c:	3f763800 	.word	0x3f763800
 8007950:	369dc3a0 	.word	0x369dc3a0
 8007954:	080086e0 	.word	0x080086e0
 8007958:	080086d8 	.word	0x080086d8
 800795c:	3338aa3c 	.word	0x3338aa3c
 8007960:	f040 8095 	bne.w	8007a8e <__ieee754_powf+0x546>
 8007964:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800795c <__ieee754_powf+0x414>
 8007968:	ee37 7a67 	vsub.f32	s14, s14, s15
 800796c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8007970:	eef4 6ac7 	vcmpe.f32	s13, s14
 8007974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007978:	f73f aefa 	bgt.w	8007770 <__ieee754_powf+0x228>
 800797c:	15db      	asrs	r3, r3, #23
 800797e:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8007982:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007986:	4103      	asrs	r3, r0
 8007988:	4423      	add	r3, r4
 800798a:	494b      	ldr	r1, [pc, #300]	; (8007ab8 <__ieee754_powf+0x570>)
 800798c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007990:	3a7f      	subs	r2, #127	; 0x7f
 8007992:	4111      	asrs	r1, r2
 8007994:	ea23 0101 	bic.w	r1, r3, r1
 8007998:	ee07 1a10 	vmov	s14, r1
 800799c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80079a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80079a4:	f1c2 0217 	rsb	r2, r2, #23
 80079a8:	4110      	asrs	r0, r2
 80079aa:	2c00      	cmp	r4, #0
 80079ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80079b0:	bfb8      	it	lt
 80079b2:	4240      	neglt	r0, r0
 80079b4:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80079b8:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8007abc <__ieee754_powf+0x574>
 80079bc:	eddf 6a40 	vldr	s13, [pc, #256]	; 8007ac0 <__ieee754_powf+0x578>
 80079c0:	ee17 3a10 	vmov	r3, s14
 80079c4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80079c8:	f023 030f 	bic.w	r3, r3, #15
 80079cc:	ee07 3a10 	vmov	s14, r3
 80079d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079d4:	ee27 0a00 	vmul.f32	s0, s14, s0
 80079d8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80079dc:	eddf 7a39 	vldr	s15, [pc, #228]	; 8007ac4 <__ieee754_powf+0x57c>
 80079e0:	eea0 0aa7 	vfma.f32	s0, s1, s15
 80079e4:	eef0 7a40 	vmov.f32	s15, s0
 80079e8:	eee7 7a26 	vfma.f32	s15, s14, s13
 80079ec:	eeb0 6a67 	vmov.f32	s12, s15
 80079f0:	eea7 6a66 	vfms.f32	s12, s14, s13
 80079f4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80079f8:	ee30 0a46 	vsub.f32	s0, s0, s12
 80079fc:	eddf 6a32 	vldr	s13, [pc, #200]	; 8007ac8 <__ieee754_powf+0x580>
 8007a00:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8007acc <__ieee754_powf+0x584>
 8007a04:	eee7 6a06 	vfma.f32	s13, s14, s12
 8007a08:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8007ad0 <__ieee754_powf+0x588>
 8007a0c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8007a10:	eddf 6a30 	vldr	s13, [pc, #192]	; 8007ad4 <__ieee754_powf+0x58c>
 8007a14:	eee6 6a07 	vfma.f32	s13, s12, s14
 8007a18:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8007ad8 <__ieee754_powf+0x590>
 8007a1c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8007a20:	eef0 6a67 	vmov.f32	s13, s15
 8007a24:	eee6 6a47 	vfms.f32	s13, s12, s14
 8007a28:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007a2c:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8007a30:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8007a34:	eea7 0a80 	vfma.f32	s0, s15, s0
 8007a38:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007a3c:	ee37 0a40 	vsub.f32	s0, s14, s0
 8007a40:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007a44:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007a48:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007a4c:	ee10 3a10 	vmov	r3, s0
 8007a50:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8007a54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a58:	da1f      	bge.n	8007a9a <__ieee754_powf+0x552>
 8007a5a:	f000 f947 	bl	8007cec <scalbnf>
 8007a5e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007a62:	e589      	b.n	8007578 <__ieee754_powf+0x30>
 8007a64:	4a1d      	ldr	r2, [pc, #116]	; (8007adc <__ieee754_powf+0x594>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	dd07      	ble.n	8007a7a <__ieee754_powf+0x532>
 8007a6a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a72:	bf4c      	ite	mi
 8007a74:	2001      	movmi	r0, #1
 8007a76:	2000      	movpl	r0, #0
 8007a78:	e61f      	b.n	80076ba <__ieee754_powf+0x172>
 8007a7a:	d108      	bne.n	8007a8e <__ieee754_powf+0x546>
 8007a7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007a80:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8007a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a88:	f6ff af78 	blt.w	800797c <__ieee754_powf+0x434>
 8007a8c:	e7ed      	b.n	8007a6a <__ieee754_powf+0x522>
 8007a8e:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8007a92:	f73f af73 	bgt.w	800797c <__ieee754_powf+0x434>
 8007a96:	2000      	movs	r0, #0
 8007a98:	e78c      	b.n	80079b4 <__ieee754_powf+0x46c>
 8007a9a:	ee00 3a10 	vmov	s0, r3
 8007a9e:	e7de      	b.n	8007a5e <__ieee754_powf+0x516>
 8007aa0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007aa4:	e568      	b.n	8007578 <__ieee754_powf+0x30>
 8007aa6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8007ae0 <__ieee754_powf+0x598>
 8007aaa:	e565      	b.n	8007578 <__ieee754_powf+0x30>
 8007aac:	eeb0 0a48 	vmov.f32	s0, s16
 8007ab0:	e562      	b.n	8007578 <__ieee754_powf+0x30>
 8007ab2:	2700      	movs	r7, #0
 8007ab4:	e58d      	b.n	80075d2 <__ieee754_powf+0x8a>
 8007ab6:	bf00      	nop
 8007ab8:	007fffff 	.word	0x007fffff
 8007abc:	35bfbe8c 	.word	0x35bfbe8c
 8007ac0:	3f317200 	.word	0x3f317200
 8007ac4:	3f317218 	.word	0x3f317218
 8007ac8:	b5ddea0e 	.word	0xb5ddea0e
 8007acc:	3331bb4c 	.word	0x3331bb4c
 8007ad0:	388ab355 	.word	0x388ab355
 8007ad4:	bb360b61 	.word	0xbb360b61
 8007ad8:	3e2aaaab 	.word	0x3e2aaaab
 8007adc:	43160000 	.word	0x43160000
 8007ae0:	00000000 	.word	0x00000000

08007ae4 <__ieee754_sqrtf>:
 8007ae4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007ae8:	4770      	bx	lr

08007aea <with_errno>:
 8007aea:	b570      	push	{r4, r5, r6, lr}
 8007aec:	4604      	mov	r4, r0
 8007aee:	460d      	mov	r5, r1
 8007af0:	4616      	mov	r6, r2
 8007af2:	f7fe fe05 	bl	8006700 <__errno>
 8007af6:	4629      	mov	r1, r5
 8007af8:	6006      	str	r6, [r0, #0]
 8007afa:	4620      	mov	r0, r4
 8007afc:	bd70      	pop	{r4, r5, r6, pc}

08007afe <xflow>:
 8007afe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b00:	4614      	mov	r4, r2
 8007b02:	461d      	mov	r5, r3
 8007b04:	b108      	cbz	r0, 8007b0a <xflow+0xc>
 8007b06:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007b0a:	e9cd 2300 	strd	r2, r3, [sp]
 8007b0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b12:	4620      	mov	r0, r4
 8007b14:	4629      	mov	r1, r5
 8007b16:	f7f8 fd1b 	bl	8000550 <__aeabi_dmul>
 8007b1a:	2222      	movs	r2, #34	; 0x22
 8007b1c:	b003      	add	sp, #12
 8007b1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b22:	f7ff bfe2 	b.w	8007aea <with_errno>

08007b26 <__math_uflow>:
 8007b26:	b508      	push	{r3, lr}
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007b2e:	f7ff ffe6 	bl	8007afe <xflow>
 8007b32:	ec41 0b10 	vmov	d0, r0, r1
 8007b36:	bd08      	pop	{r3, pc}

08007b38 <__math_oflow>:
 8007b38:	b508      	push	{r3, lr}
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007b40:	f7ff ffdd 	bl	8007afe <xflow>
 8007b44:	ec41 0b10 	vmov	d0, r0, r1
 8007b48:	bd08      	pop	{r3, pc}

08007b4a <with_errnof>:
 8007b4a:	b513      	push	{r0, r1, r4, lr}
 8007b4c:	4604      	mov	r4, r0
 8007b4e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007b52:	f7fe fdd5 	bl	8006700 <__errno>
 8007b56:	ed9d 0a01 	vldr	s0, [sp, #4]
 8007b5a:	6004      	str	r4, [r0, #0]
 8007b5c:	b002      	add	sp, #8
 8007b5e:	bd10      	pop	{r4, pc}

08007b60 <xflowf>:
 8007b60:	b130      	cbz	r0, 8007b70 <xflowf+0x10>
 8007b62:	eef1 7a40 	vneg.f32	s15, s0
 8007b66:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007b6a:	2022      	movs	r0, #34	; 0x22
 8007b6c:	f7ff bfed 	b.w	8007b4a <with_errnof>
 8007b70:	eef0 7a40 	vmov.f32	s15, s0
 8007b74:	e7f7      	b.n	8007b66 <xflowf+0x6>
	...

08007b78 <__math_uflowf>:
 8007b78:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007b80 <__math_uflowf+0x8>
 8007b7c:	f7ff bff0 	b.w	8007b60 <xflowf>
 8007b80:	10000000 	.word	0x10000000

08007b84 <__math_oflowf>:
 8007b84:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007b8c <__math_oflowf+0x8>
 8007b88:	f7ff bfea 	b.w	8007b60 <xflowf>
 8007b8c:	70000000 	.word	0x70000000

08007b90 <fabs>:
 8007b90:	ec51 0b10 	vmov	r0, r1, d0
 8007b94:	ee10 2a10 	vmov	r2, s0
 8007b98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007b9c:	ec43 2b10 	vmov	d0, r2, r3
 8007ba0:	4770      	bx	lr

08007ba2 <finite>:
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	ed8d 0b00 	vstr	d0, [sp]
 8007ba8:	9801      	ldr	r0, [sp, #4]
 8007baa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007bae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007bb2:	0fc0      	lsrs	r0, r0, #31
 8007bb4:	b002      	add	sp, #8
 8007bb6:	4770      	bx	lr

08007bb8 <scalbn>:
 8007bb8:	b570      	push	{r4, r5, r6, lr}
 8007bba:	ec55 4b10 	vmov	r4, r5, d0
 8007bbe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007bc2:	4606      	mov	r6, r0
 8007bc4:	462b      	mov	r3, r5
 8007bc6:	b99a      	cbnz	r2, 8007bf0 <scalbn+0x38>
 8007bc8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007bcc:	4323      	orrs	r3, r4
 8007bce:	d036      	beq.n	8007c3e <scalbn+0x86>
 8007bd0:	4b39      	ldr	r3, [pc, #228]	; (8007cb8 <scalbn+0x100>)
 8007bd2:	4629      	mov	r1, r5
 8007bd4:	ee10 0a10 	vmov	r0, s0
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f7f8 fcb9 	bl	8000550 <__aeabi_dmul>
 8007bde:	4b37      	ldr	r3, [pc, #220]	; (8007cbc <scalbn+0x104>)
 8007be0:	429e      	cmp	r6, r3
 8007be2:	4604      	mov	r4, r0
 8007be4:	460d      	mov	r5, r1
 8007be6:	da10      	bge.n	8007c0a <scalbn+0x52>
 8007be8:	a32b      	add	r3, pc, #172	; (adr r3, 8007c98 <scalbn+0xe0>)
 8007bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bee:	e03a      	b.n	8007c66 <scalbn+0xae>
 8007bf0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007bf4:	428a      	cmp	r2, r1
 8007bf6:	d10c      	bne.n	8007c12 <scalbn+0x5a>
 8007bf8:	ee10 2a10 	vmov	r2, s0
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	4629      	mov	r1, r5
 8007c00:	f7f8 faf0 	bl	80001e4 <__adddf3>
 8007c04:	4604      	mov	r4, r0
 8007c06:	460d      	mov	r5, r1
 8007c08:	e019      	b.n	8007c3e <scalbn+0x86>
 8007c0a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007c0e:	460b      	mov	r3, r1
 8007c10:	3a36      	subs	r2, #54	; 0x36
 8007c12:	4432      	add	r2, r6
 8007c14:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007c18:	428a      	cmp	r2, r1
 8007c1a:	dd08      	ble.n	8007c2e <scalbn+0x76>
 8007c1c:	2d00      	cmp	r5, #0
 8007c1e:	a120      	add	r1, pc, #128	; (adr r1, 8007ca0 <scalbn+0xe8>)
 8007c20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c24:	da1c      	bge.n	8007c60 <scalbn+0xa8>
 8007c26:	a120      	add	r1, pc, #128	; (adr r1, 8007ca8 <scalbn+0xf0>)
 8007c28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c2c:	e018      	b.n	8007c60 <scalbn+0xa8>
 8007c2e:	2a00      	cmp	r2, #0
 8007c30:	dd08      	ble.n	8007c44 <scalbn+0x8c>
 8007c32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007c36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007c3a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007c3e:	ec45 4b10 	vmov	d0, r4, r5
 8007c42:	bd70      	pop	{r4, r5, r6, pc}
 8007c44:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007c48:	da19      	bge.n	8007c7e <scalbn+0xc6>
 8007c4a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007c4e:	429e      	cmp	r6, r3
 8007c50:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007c54:	dd0a      	ble.n	8007c6c <scalbn+0xb4>
 8007c56:	a112      	add	r1, pc, #72	; (adr r1, 8007ca0 <scalbn+0xe8>)
 8007c58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1e2      	bne.n	8007c26 <scalbn+0x6e>
 8007c60:	a30f      	add	r3, pc, #60	; (adr r3, 8007ca0 <scalbn+0xe8>)
 8007c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c66:	f7f8 fc73 	bl	8000550 <__aeabi_dmul>
 8007c6a:	e7cb      	b.n	8007c04 <scalbn+0x4c>
 8007c6c:	a10a      	add	r1, pc, #40	; (adr r1, 8007c98 <scalbn+0xe0>)
 8007c6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d0b8      	beq.n	8007be8 <scalbn+0x30>
 8007c76:	a10e      	add	r1, pc, #56	; (adr r1, 8007cb0 <scalbn+0xf8>)
 8007c78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c7c:	e7b4      	b.n	8007be8 <scalbn+0x30>
 8007c7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007c82:	3236      	adds	r2, #54	; 0x36
 8007c84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007c88:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	4b0c      	ldr	r3, [pc, #48]	; (8007cc0 <scalbn+0x108>)
 8007c90:	2200      	movs	r2, #0
 8007c92:	e7e8      	b.n	8007c66 <scalbn+0xae>
 8007c94:	f3af 8000 	nop.w
 8007c98:	c2f8f359 	.word	0xc2f8f359
 8007c9c:	01a56e1f 	.word	0x01a56e1f
 8007ca0:	8800759c 	.word	0x8800759c
 8007ca4:	7e37e43c 	.word	0x7e37e43c
 8007ca8:	8800759c 	.word	0x8800759c
 8007cac:	fe37e43c 	.word	0xfe37e43c
 8007cb0:	c2f8f359 	.word	0xc2f8f359
 8007cb4:	81a56e1f 	.word	0x81a56e1f
 8007cb8:	43500000 	.word	0x43500000
 8007cbc:	ffff3cb0 	.word	0xffff3cb0
 8007cc0:	3c900000 	.word	0x3c900000

08007cc4 <fabsf>:
 8007cc4:	ee10 3a10 	vmov	r3, s0
 8007cc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ccc:	ee00 3a10 	vmov	s0, r3
 8007cd0:	4770      	bx	lr

08007cd2 <finitef>:
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007cd8:	9801      	ldr	r0, [sp, #4]
 8007cda:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007cde:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007ce2:	bfac      	ite	ge
 8007ce4:	2000      	movge	r0, #0
 8007ce6:	2001      	movlt	r0, #1
 8007ce8:	b002      	add	sp, #8
 8007cea:	4770      	bx	lr

08007cec <scalbnf>:
 8007cec:	ee10 3a10 	vmov	r3, s0
 8007cf0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007cf4:	d025      	beq.n	8007d42 <scalbnf+0x56>
 8007cf6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007cfa:	d302      	bcc.n	8007d02 <scalbnf+0x16>
 8007cfc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007d00:	4770      	bx	lr
 8007d02:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8007d06:	d122      	bne.n	8007d4e <scalbnf+0x62>
 8007d08:	4b2a      	ldr	r3, [pc, #168]	; (8007db4 <scalbnf+0xc8>)
 8007d0a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007db8 <scalbnf+0xcc>
 8007d0e:	4298      	cmp	r0, r3
 8007d10:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007d14:	db16      	blt.n	8007d44 <scalbnf+0x58>
 8007d16:	ee10 3a10 	vmov	r3, s0
 8007d1a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007d1e:	3a19      	subs	r2, #25
 8007d20:	4402      	add	r2, r0
 8007d22:	2afe      	cmp	r2, #254	; 0xfe
 8007d24:	dd15      	ble.n	8007d52 <scalbnf+0x66>
 8007d26:	ee10 3a10 	vmov	r3, s0
 8007d2a:	eddf 7a24 	vldr	s15, [pc, #144]	; 8007dbc <scalbnf+0xd0>
 8007d2e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8007dc0 <scalbnf+0xd4>
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	eeb0 7a67 	vmov.f32	s14, s15
 8007d38:	bfb8      	it	lt
 8007d3a:	eef0 7a66 	vmovlt.f32	s15, s13
 8007d3e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8007d42:	4770      	bx	lr
 8007d44:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007dc4 <scalbnf+0xd8>
 8007d48:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007d4c:	4770      	bx	lr
 8007d4e:	0dd2      	lsrs	r2, r2, #23
 8007d50:	e7e6      	b.n	8007d20 <scalbnf+0x34>
 8007d52:	2a00      	cmp	r2, #0
 8007d54:	dd06      	ble.n	8007d64 <scalbnf+0x78>
 8007d56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007d5a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007d5e:	ee00 3a10 	vmov	s0, r3
 8007d62:	4770      	bx	lr
 8007d64:	f112 0f16 	cmn.w	r2, #22
 8007d68:	da1a      	bge.n	8007da0 <scalbnf+0xb4>
 8007d6a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007d6e:	4298      	cmp	r0, r3
 8007d70:	ee10 3a10 	vmov	r3, s0
 8007d74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d78:	dd0a      	ble.n	8007d90 <scalbnf+0xa4>
 8007d7a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8007dbc <scalbnf+0xd0>
 8007d7e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007dc0 <scalbnf+0xd4>
 8007d82:	eef0 7a40 	vmov.f32	s15, s0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	bf18      	it	ne
 8007d8a:	eeb0 0a47 	vmovne.f32	s0, s14
 8007d8e:	e7db      	b.n	8007d48 <scalbnf+0x5c>
 8007d90:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8007dc4 <scalbnf+0xd8>
 8007d94:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8007dc8 <scalbnf+0xdc>
 8007d98:	eef0 7a40 	vmov.f32	s15, s0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	e7f3      	b.n	8007d88 <scalbnf+0x9c>
 8007da0:	3219      	adds	r2, #25
 8007da2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007da6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007daa:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007dcc <scalbnf+0xe0>
 8007dae:	ee07 3a10 	vmov	s14, r3
 8007db2:	e7c4      	b.n	8007d3e <scalbnf+0x52>
 8007db4:	ffff3cb0 	.word	0xffff3cb0
 8007db8:	4c000000 	.word	0x4c000000
 8007dbc:	7149f2ca 	.word	0x7149f2ca
 8007dc0:	f149f2ca 	.word	0xf149f2ca
 8007dc4:	0da24260 	.word	0x0da24260
 8007dc8:	8da24260 	.word	0x8da24260
 8007dcc:	33000000 	.word	0x33000000

08007dd0 <_init>:
 8007dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dd2:	bf00      	nop
 8007dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dd6:	bc08      	pop	{r3}
 8007dd8:	469e      	mov	lr, r3
 8007dda:	4770      	bx	lr

08007ddc <_fini>:
 8007ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dde:	bf00      	nop
 8007de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007de2:	bc08      	pop	{r3}
 8007de4:	469e      	mov	lr, r3
 8007de6:	4770      	bx	lr
