
ProjectModuleV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec60  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  0800edf8  0800edf8  0001edf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0e8  0800f0e8  000202a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f0e8  0800f0e8  0001f0e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f0f0  0800f0f0  000202a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f0f0  0800f0f0  0001f0f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f0f4  0800f0f4  0001f0f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a4  20000000  0800f0f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001018  200002a4  0800f39c  000202a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012bc  0800f39c  000212bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bd93  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004359  00000000  00000000  0003c067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  000403c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001250  00000000  00000000  00041808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c357  00000000  00000000  00042a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000218c4  00000000  00000000  0005edaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0018  00000000  00000000  00080673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012068b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005978  00000000  00000000  001206dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200002a4 	.word	0x200002a4
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800ede0 	.word	0x0800ede0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200002a8 	.word	0x200002a8
 80001d4:	0800ede0 	.word	0x0800ede0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b974 	b.w	8000ee0 <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9d08      	ldr	r5, [sp, #32]
 8000c16:	4604      	mov	r4, r0
 8000c18:	468e      	mov	lr, r1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d14d      	bne.n	8000cba <__udivmoddi4+0xaa>
 8000c1e:	428a      	cmp	r2, r1
 8000c20:	4694      	mov	ip, r2
 8000c22:	d969      	bls.n	8000cf8 <__udivmoddi4+0xe8>
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	b152      	cbz	r2, 8000c40 <__udivmoddi4+0x30>
 8000c2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2e:	f1c2 0120 	rsb	r1, r2, #32
 8000c32:	fa20 f101 	lsr.w	r1, r0, r1
 8000c36:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c3a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c3e:	4094      	lsls	r4, r2
 8000c40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c44:	0c21      	lsrs	r1, r4, #16
 8000c46:	fbbe f6f8 	udiv	r6, lr, r8
 8000c4a:	fa1f f78c 	uxth.w	r7, ip
 8000c4e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c52:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c56:	fb06 f107 	mul.w	r1, r6, r7
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	d90a      	bls.n	8000c74 <__udivmoddi4+0x64>
 8000c5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c62:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c66:	f080 811f 	bcs.w	8000ea8 <__udivmoddi4+0x298>
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	f240 811c 	bls.w	8000ea8 <__udivmoddi4+0x298>
 8000c70:	3e02      	subs	r6, #2
 8000c72:	4463      	add	r3, ip
 8000c74:	1a5b      	subs	r3, r3, r1
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c7c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c84:	fb00 f707 	mul.w	r7, r0, r7
 8000c88:	42a7      	cmp	r7, r4
 8000c8a:	d90a      	bls.n	8000ca2 <__udivmoddi4+0x92>
 8000c8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c90:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c94:	f080 810a 	bcs.w	8000eac <__udivmoddi4+0x29c>
 8000c98:	42a7      	cmp	r7, r4
 8000c9a:	f240 8107 	bls.w	8000eac <__udivmoddi4+0x29c>
 8000c9e:	4464      	add	r4, ip
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca6:	1be4      	subs	r4, r4, r7
 8000ca8:	2600      	movs	r6, #0
 8000caa:	b11d      	cbz	r5, 8000cb4 <__udivmoddi4+0xa4>
 8000cac:	40d4      	lsrs	r4, r2
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	d909      	bls.n	8000cd2 <__udivmoddi4+0xc2>
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	f000 80ef 	beq.w	8000ea2 <__udivmoddi4+0x292>
 8000cc4:	2600      	movs	r6, #0
 8000cc6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cca:	4630      	mov	r0, r6
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	fab3 f683 	clz	r6, r3
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	d14a      	bne.n	8000d70 <__udivmoddi4+0x160>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xd4>
 8000cde:	4282      	cmp	r2, r0
 8000ce0:	f200 80f9 	bhi.w	8000ed6 <__udivmoddi4+0x2c6>
 8000ce4:	1a84      	subs	r4, r0, r2
 8000ce6:	eb61 0303 	sbc.w	r3, r1, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	469e      	mov	lr, r3
 8000cee:	2d00      	cmp	r5, #0
 8000cf0:	d0e0      	beq.n	8000cb4 <__udivmoddi4+0xa4>
 8000cf2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cf6:	e7dd      	b.n	8000cb4 <__udivmoddi4+0xa4>
 8000cf8:	b902      	cbnz	r2, 8000cfc <__udivmoddi4+0xec>
 8000cfa:	deff      	udf	#255	; 0xff
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f040 8092 	bne.w	8000e2a <__udivmoddi4+0x21a>
 8000d06:	eba1 010c 	sub.w	r1, r1, ip
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2601      	movs	r6, #1
 8000d14:	0c20      	lsrs	r0, r4, #16
 8000d16:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d1a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d1e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d22:	fb0e f003 	mul.w	r0, lr, r3
 8000d26:	4288      	cmp	r0, r1
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x12c>
 8000d2a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d2e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x12a>
 8000d34:	4288      	cmp	r0, r1
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2c0>
 8000d3a:	4643      	mov	r3, r8
 8000d3c:	1a09      	subs	r1, r1, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d44:	fb07 1110 	mls	r1, r7, r0, r1
 8000d48:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x156>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x154>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2ca>
 8000d64:	4608      	mov	r0, r1
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d6e:	e79c      	b.n	8000caa <__udivmoddi4+0x9a>
 8000d70:	f1c6 0720 	rsb	r7, r6, #32
 8000d74:	40b3      	lsls	r3, r6
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d82:	fa01 f306 	lsl.w	r3, r1, r6
 8000d86:	431c      	orrs	r4, r3
 8000d88:	40f9      	lsrs	r1, r7
 8000d8a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d92:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d96:	0c20      	lsrs	r0, r4, #16
 8000d98:	fa1f fe8c 	uxth.w	lr, ip
 8000d9c:	fb09 1118 	mls	r1, r9, r8, r1
 8000da0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000da4:	fb08 f00e 	mul.w	r0, r8, lr
 8000da8:	4288      	cmp	r0, r1
 8000daa:	fa02 f206 	lsl.w	r2, r2, r6
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b8>
 8000db0:	eb1c 0101 	adds.w	r1, ip, r1
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2bc>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2bc>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4461      	add	r1, ip
 8000dc8:	1a09      	subs	r1, r1, r0
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd0:	fb09 1110 	mls	r1, r9, r0, r1
 8000dd4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ddc:	458e      	cmp	lr, r1
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1e2>
 8000de0:	eb1c 0101 	adds.w	r1, ip, r1
 8000de4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2b4>
 8000dea:	458e      	cmp	lr, r1
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2b4>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4461      	add	r1, ip
 8000df2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000df6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dfa:	eba1 010e 	sub.w	r1, r1, lr
 8000dfe:	42a1      	cmp	r1, r4
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46a6      	mov	lr, r4
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x2a4>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x2a0>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x212>
 8000e0a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e0e:	eb61 010e 	sbc.w	r1, r1, lr
 8000e12:	fa01 f707 	lsl.w	r7, r1, r7
 8000e16:	fa22 f306 	lsr.w	r3, r2, r6
 8000e1a:	40f1      	lsrs	r1, r6
 8000e1c:	431f      	orrs	r7, r3
 8000e1e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e22:	2600      	movs	r6, #0
 8000e24:	4631      	mov	r1, r6
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	f1c2 0320 	rsb	r3, r2, #32
 8000e2e:	40d8      	lsrs	r0, r3
 8000e30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e34:	fa21 f303 	lsr.w	r3, r1, r3
 8000e38:	4091      	lsls	r1, r2
 8000e3a:	4301      	orrs	r1, r0
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e48:	fb07 3610 	mls	r6, r7, r0, r3
 8000e4c:	0c0b      	lsrs	r3, r1, #16
 8000e4e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e52:	fb00 f60e 	mul.w	r6, r0, lr
 8000e56:	429e      	cmp	r6, r3
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x260>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b8>
 8000e68:	429e      	cmp	r6, r3
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b8>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4463      	add	r3, ip
 8000e70:	1b9b      	subs	r3, r3, r6
 8000e72:	b289      	uxth	r1, r1
 8000e74:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e78:	fb07 3316 	mls	r3, r7, r6, r3
 8000e7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e80:	fb06 f30e 	mul.w	r3, r6, lr
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x28a>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2b0>
 8000e92:	428b      	cmp	r3, r1
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2b0>
 8000e96:	3e02      	subs	r6, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	1ac9      	subs	r1, r1, r3
 8000e9c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0x104>
 8000ea2:	462e      	mov	r6, r5
 8000ea4:	4628      	mov	r0, r5
 8000ea6:	e705      	b.n	8000cb4 <__udivmoddi4+0xa4>
 8000ea8:	4606      	mov	r6, r0
 8000eaa:	e6e3      	b.n	8000c74 <__udivmoddi4+0x64>
 8000eac:	4618      	mov	r0, r3
 8000eae:	e6f8      	b.n	8000ca2 <__udivmoddi4+0x92>
 8000eb0:	454b      	cmp	r3, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f8>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ebc:	3801      	subs	r0, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f8>
 8000ec0:	4646      	mov	r6, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x28a>
 8000ec4:	4620      	mov	r0, r4
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1e2>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x260>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b8>
 8000ed0:	3b02      	subs	r3, #2
 8000ed2:	4461      	add	r1, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x12c>
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	e709      	b.n	8000cee <__udivmoddi4+0xde>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x156>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <Endeffector_Update_Status>:
uint8_t Emergency_Status;
uint8_t TestMode_Status;
uint8_t RunMode_Status;
uint8_t GripperMode_Status;

void Endeffector_Update_Status(){
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
	Error_Status = (ReadData >> 5) & 0b00000111;
 8000ee8:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <Endeffector_Update_Status+0x60>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	095b      	lsrs	r3, r3, #5
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <Endeffector_Update_Status+0x64>)
 8000ef2:	701a      	strb	r2, [r3, #0]
	Emergency_Status = (ReadData >> 4) & 0b00000001;
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <Endeffector_Update_Status+0x60>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	091b      	lsrs	r3, r3, #4
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <Endeffector_Update_Status+0x68>)
 8000f04:	701a      	strb	r2, [r3, #0]
	TestMode_Status = (ReadData >> 3) & 0b00000001;
 8000f06:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <Endeffector_Update_Status+0x60>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	08db      	lsrs	r3, r3, #3
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <Endeffector_Update_Status+0x6c>)
 8000f16:	701a      	strb	r2, [r3, #0]
	RunMode_Status = (ReadData >> 2) & 0b00000001;
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <Endeffector_Update_Status+0x60>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	089b      	lsrs	r3, r3, #2
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <Endeffector_Update_Status+0x70>)
 8000f28:	701a      	strb	r2, [r3, #0]
	GripperMode_Status = ReadData & 0b00000011;
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <Endeffector_Update_Status+0x60>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <Endeffector_Update_Status+0x74>)
 8000f36:	701a      	strb	r2, [r3, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	200002c5 	.word	0x200002c5
 8000f48:	200002c8 	.word	0x200002c8
 8000f4c:	200002c9 	.word	0x200002c9
 8000f50:	200002ca 	.word	0x200002ca
 8000f54:	200002cb 	.word	0x200002cb
 8000f58:	200002cc 	.word	0x200002cc

08000f5c <Endeffector_Read_Status>:

void Endeffector_Read_Status(){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 8000f60:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <Endeffector_Read_Status+0x74>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d125      	bne.n	8000fb4 <Endeffector_Read_Status+0x58>
 8000f68:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <Endeffector_Read_Status+0x78>)
 8000f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b20      	cmp	r3, #32
 8000f72:	d11f      	bne.n	8000fb4 <Endeffector_Read_Status+0x58>
		HAL_I2C_Master_Receive_IT(&hi2c1, SlaveAddr, &ReadData, sizeof(ReadData));
 8000f74:	2301      	movs	r3, #1
 8000f76:	4a18      	ldr	r2, [pc, #96]	; (8000fd8 <Endeffector_Read_Status+0x7c>)
 8000f78:	212a      	movs	r1, #42	; 0x2a
 8000f7a:	4816      	ldr	r0, [pc, #88]	; (8000fd4 <Endeffector_Read_Status+0x78>)
 8000f7c:	f006 fa40 	bl	8007400 <HAL_I2C_Master_Receive_IT>
		count++;
 8000f80:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <Endeffector_Read_Status+0x80>)
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	3301      	adds	r3, #1
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <Endeffector_Read_Status+0x80>)
 8000f8a:	801a      	strh	r2, [r3, #0]
	}

	static uint32_t timestamp = 0;
	while(i < 150){
 8000f8c:	e012      	b.n	8000fb4 <Endeffector_Read_Status+0x58>
		if(HAL_GetTick() >= timestamp){
 8000f8e:	f004 fd43 	bl	8005a18 <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <Endeffector_Read_Status+0x84>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d30b      	bcc.n	8000fb4 <Endeffector_Read_Status+0x58>
			timestamp = HAL_GetTick() + 10;
 8000f9c:	f004 fd3c 	bl	8005a18 <HAL_GetTick>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	330a      	adds	r3, #10
 8000fa4:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <Endeffector_Read_Status+0x84>)
 8000fa6:	6013      	str	r3, [r2, #0]
			i++;
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <Endeffector_Read_Status+0x88>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <Endeffector_Read_Status+0x88>)
 8000fb2:	801a      	strh	r2, [r3, #0]
	while(i < 150){
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <Endeffector_Read_Status+0x88>)
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	2b95      	cmp	r3, #149	; 0x95
 8000fba:	d9e8      	bls.n	8000f8e <Endeffector_Read_Status+0x32>
		}
	}

	Endeffector_Update_Status();
 8000fbc:	f7ff ff92 	bl	8000ee4 <Endeffector_Update_Status>
	Stamp = 0;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <Endeffector_Read_Status+0x74>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
	i = 0;
 8000fc6:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <Endeffector_Read_Status+0x88>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	801a      	strh	r2, [r3, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	200002c0 	.word	0x200002c0
 8000fd4:	200003b8 	.word	0x200003b8
 8000fd8:	200002c5 	.word	0x200002c5
 8000fdc:	200002c6 	.word	0x200002c6
 8000fe0:	200002d0 	.word	0x200002d0
 8000fe4:	200002c2 	.word	0x200002c2

08000fe8 <Endeffector_SoftReset>:

void Endeffector_SoftReset(){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	static uint8_t CommandSeq[4] = {SoftReset_Seq1, SoftReset_Seq2, SoftReset_Seq3, SoftReset_Seq4};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 8000fec:	4b18      	ldr	r3, [pc, #96]	; (8001050 <Endeffector_SoftReset+0x68>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d11f      	bne.n	8001034 <Endeffector_SoftReset+0x4c>
 8000ff4:	4b17      	ldr	r3, [pc, #92]	; (8001054 <Endeffector_SoftReset+0x6c>)
 8000ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b20      	cmp	r3, #32
 8000ffe:	d119      	bne.n	8001034 <Endeffector_SoftReset+0x4c>
		HAL_I2C_Master_Transmit_IT(&hi2c1, SlaveAddr, CommandSeq, sizeof(CommandSeq));
 8001000:	2304      	movs	r3, #4
 8001002:	4a15      	ldr	r2, [pc, #84]	; (8001058 <Endeffector_SoftReset+0x70>)
 8001004:	212a      	movs	r1, #42	; 0x2a
 8001006:	4813      	ldr	r0, [pc, #76]	; (8001054 <Endeffector_SoftReset+0x6c>)
 8001008:	f006 f954 	bl	80072b4 <HAL_I2C_Master_Transmit_IT>
	}

	static uint32_t timestamp = 0;
	while(i < 150){
 800100c:	e012      	b.n	8001034 <Endeffector_SoftReset+0x4c>
		if(HAL_GetTick() >= timestamp){
 800100e:	f004 fd03 	bl	8005a18 <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <Endeffector_SoftReset+0x74>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	429a      	cmp	r2, r3
 800101a:	d30b      	bcc.n	8001034 <Endeffector_SoftReset+0x4c>
			timestamp = HAL_GetTick() + 10;
 800101c:	f004 fcfc 	bl	8005a18 <HAL_GetTick>
 8001020:	4603      	mov	r3, r0
 8001022:	330a      	adds	r3, #10
 8001024:	4a0d      	ldr	r2, [pc, #52]	; (800105c <Endeffector_SoftReset+0x74>)
 8001026:	6013      	str	r3, [r2, #0]
			i++;
 8001028:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <Endeffector_SoftReset+0x78>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	3301      	adds	r3, #1
 800102e:	b29a      	uxth	r2, r3
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <Endeffector_SoftReset+0x78>)
 8001032:	801a      	strh	r2, [r3, #0]
	while(i < 150){
 8001034:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <Endeffector_SoftReset+0x78>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	2b95      	cmp	r3, #149	; 0x95
 800103a:	d9e8      	bls.n	800100e <Endeffector_SoftReset+0x26>
		}
	}
	Endeffector_Read_Status();
 800103c:	f7ff ff8e 	bl	8000f5c <Endeffector_Read_Status>
	Stamp = 0;
 8001040:	4b03      	ldr	r3, [pc, #12]	; (8001050 <Endeffector_SoftReset+0x68>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
	i = 0;
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <Endeffector_SoftReset+0x78>)
 8001048:	2200      	movs	r2, #0
 800104a:	801a      	strh	r2, [r3, #0]
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200002c0 	.word	0x200002c0
 8001054:	200003b8 	.word	0x200003b8
 8001058:	20000000 	.word	0x20000000
 800105c:	200002d4 	.word	0x200002d4
 8001060:	200002c2 	.word	0x200002c2

08001064 <Endeffector_EmergencyTrigger>:

void Endeffector_EmergencyTrigger(){
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	static uint8_t EmergencyCommand[1] = {EmergencyTrigger};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 8001068:	4b18      	ldr	r3, [pc, #96]	; (80010cc <Endeffector_EmergencyTrigger+0x68>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d11f      	bne.n	80010b0 <Endeffector_EmergencyTrigger+0x4c>
 8001070:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <Endeffector_EmergencyTrigger+0x6c>)
 8001072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b20      	cmp	r3, #32
 800107a:	d119      	bne.n	80010b0 <Endeffector_EmergencyTrigger+0x4c>
		HAL_I2C_Master_Transmit_IT(&hi2c1, SlaveAddr, EmergencyCommand, sizeof(EmergencyCommand));
 800107c:	2301      	movs	r3, #1
 800107e:	4a15      	ldr	r2, [pc, #84]	; (80010d4 <Endeffector_EmergencyTrigger+0x70>)
 8001080:	212a      	movs	r1, #42	; 0x2a
 8001082:	4813      	ldr	r0, [pc, #76]	; (80010d0 <Endeffector_EmergencyTrigger+0x6c>)
 8001084:	f006 f916 	bl	80072b4 <HAL_I2C_Master_Transmit_IT>
	}

	static uint32_t timestamp = 0;
	while(i < 150){
 8001088:	e012      	b.n	80010b0 <Endeffector_EmergencyTrigger+0x4c>
		if(HAL_GetTick() >= timestamp){
 800108a:	f004 fcc5 	bl	8005a18 <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <Endeffector_EmergencyTrigger+0x74>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	429a      	cmp	r2, r3
 8001096:	d30b      	bcc.n	80010b0 <Endeffector_EmergencyTrigger+0x4c>
			timestamp = HAL_GetTick() + 10;
 8001098:	f004 fcbe 	bl	8005a18 <HAL_GetTick>
 800109c:	4603      	mov	r3, r0
 800109e:	330a      	adds	r3, #10
 80010a0:	4a0d      	ldr	r2, [pc, #52]	; (80010d8 <Endeffector_EmergencyTrigger+0x74>)
 80010a2:	6013      	str	r3, [r2, #0]
			i++;
 80010a4:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <Endeffector_EmergencyTrigger+0x78>)
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	3301      	adds	r3, #1
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <Endeffector_EmergencyTrigger+0x78>)
 80010ae:	801a      	strh	r2, [r3, #0]
	while(i < 150){
 80010b0:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <Endeffector_EmergencyTrigger+0x78>)
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	2b95      	cmp	r3, #149	; 0x95
 80010b6:	d9e8      	bls.n	800108a <Endeffector_EmergencyTrigger+0x26>
		}
	}

	Endeffector_Read_Status();
 80010b8:	f7ff ff50 	bl	8000f5c <Endeffector_Read_Status>
	Stamp = 0;
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <Endeffector_EmergencyTrigger+0x68>)
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
	i = 0;
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <Endeffector_EmergencyTrigger+0x78>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	801a      	strh	r2, [r3, #0]
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200002c0 	.word	0x200002c0
 80010d0:	200003b8 	.word	0x200003b8
 80010d4:	20000004 	.word	0x20000004
 80010d8:	200002d8 	.word	0x200002d8
 80010dc:	200002c2 	.word	0x200002c2

080010e0 <Endeffector_EmergencyExit>:

void Endeffector_EmergencyExit(){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	static uint8_t EmergencySeq[4] = {EmergencyOut_Seq1, EmergencyOut_Seq2, EmergencyOut_Seq3, EmergencyOut_Seq4};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <Endeffector_EmergencyExit+0x68>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d11f      	bne.n	800112c <Endeffector_EmergencyExit+0x4c>
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <Endeffector_EmergencyExit+0x6c>)
 80010ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b20      	cmp	r3, #32
 80010f6:	d119      	bne.n	800112c <Endeffector_EmergencyExit+0x4c>
		HAL_I2C_Master_Transmit_IT(&hi2c1, SlaveAddr, EmergencySeq, sizeof(EmergencySeq));
 80010f8:	2304      	movs	r3, #4
 80010fa:	4a15      	ldr	r2, [pc, #84]	; (8001150 <Endeffector_EmergencyExit+0x70>)
 80010fc:	212a      	movs	r1, #42	; 0x2a
 80010fe:	4813      	ldr	r0, [pc, #76]	; (800114c <Endeffector_EmergencyExit+0x6c>)
 8001100:	f006 f8d8 	bl	80072b4 <HAL_I2C_Master_Transmit_IT>
	}

	static uint32_t timestamp = 0;
	while(i < 150){
 8001104:	e012      	b.n	800112c <Endeffector_EmergencyExit+0x4c>
		if(HAL_GetTick() >= timestamp){
 8001106:	f004 fc87 	bl	8005a18 <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <Endeffector_EmergencyExit+0x74>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d30b      	bcc.n	800112c <Endeffector_EmergencyExit+0x4c>
			timestamp = HAL_GetTick() + 10;
 8001114:	f004 fc80 	bl	8005a18 <HAL_GetTick>
 8001118:	4603      	mov	r3, r0
 800111a:	330a      	adds	r3, #10
 800111c:	4a0d      	ldr	r2, [pc, #52]	; (8001154 <Endeffector_EmergencyExit+0x74>)
 800111e:	6013      	str	r3, [r2, #0]
			i++;
 8001120:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <Endeffector_EmergencyExit+0x78>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	3301      	adds	r3, #1
 8001126:	b29a      	uxth	r2, r3
 8001128:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <Endeffector_EmergencyExit+0x78>)
 800112a:	801a      	strh	r2, [r3, #0]
	while(i < 150){
 800112c:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <Endeffector_EmergencyExit+0x78>)
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	2b95      	cmp	r3, #149	; 0x95
 8001132:	d9e8      	bls.n	8001106 <Endeffector_EmergencyExit+0x26>
		}
	}

	Endeffector_Read_Status();
 8001134:	f7ff ff12 	bl	8000f5c <Endeffector_Read_Status>
	Stamp = 0;
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <Endeffector_EmergencyExit+0x68>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
	i = 0;
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <Endeffector_EmergencyExit+0x78>)
 8001140:	2200      	movs	r2, #0
 8001142:	801a      	strh	r2, [r3, #0]
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200002c0 	.word	0x200002c0
 800114c:	200003b8 	.word	0x200003b8
 8001150:	20000008 	.word	0x20000008
 8001154:	200002dc 	.word	0x200002dc
 8001158:	200002c2 	.word	0x200002c2

0800115c <Endeffector_TestModeOn>:

void Endeffector_TestModeOn(){
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	static uint8_t TestModeON[2] = {TestMode_Command, TestMode_On};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 8001160:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <Endeffector_TestModeOn+0x68>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d11f      	bne.n	80011a8 <Endeffector_TestModeOn+0x4c>
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <Endeffector_TestModeOn+0x6c>)
 800116a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b20      	cmp	r3, #32
 8001172:	d119      	bne.n	80011a8 <Endeffector_TestModeOn+0x4c>
		HAL_I2C_Master_Transmit_IT(&hi2c1, SlaveAddr, TestModeON, sizeof(TestModeON));
 8001174:	2302      	movs	r3, #2
 8001176:	4a15      	ldr	r2, [pc, #84]	; (80011cc <Endeffector_TestModeOn+0x70>)
 8001178:	212a      	movs	r1, #42	; 0x2a
 800117a:	4813      	ldr	r0, [pc, #76]	; (80011c8 <Endeffector_TestModeOn+0x6c>)
 800117c:	f006 f89a 	bl	80072b4 <HAL_I2C_Master_Transmit_IT>
	}

	static uint32_t timestamp = 0;
	while(i < 150){
 8001180:	e012      	b.n	80011a8 <Endeffector_TestModeOn+0x4c>
		if(HAL_GetTick() >= timestamp){
 8001182:	f004 fc49 	bl	8005a18 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <Endeffector_TestModeOn+0x74>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	429a      	cmp	r2, r3
 800118e:	d30b      	bcc.n	80011a8 <Endeffector_TestModeOn+0x4c>
			timestamp = HAL_GetTick() + 10;
 8001190:	f004 fc42 	bl	8005a18 <HAL_GetTick>
 8001194:	4603      	mov	r3, r0
 8001196:	330a      	adds	r3, #10
 8001198:	4a0d      	ldr	r2, [pc, #52]	; (80011d0 <Endeffector_TestModeOn+0x74>)
 800119a:	6013      	str	r3, [r2, #0]
			i++;
 800119c:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <Endeffector_TestModeOn+0x78>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	3301      	adds	r3, #1
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <Endeffector_TestModeOn+0x78>)
 80011a6:	801a      	strh	r2, [r3, #0]
	while(i < 150){
 80011a8:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <Endeffector_TestModeOn+0x78>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	2b95      	cmp	r3, #149	; 0x95
 80011ae:	d9e8      	bls.n	8001182 <Endeffector_TestModeOn+0x26>
		}
	}

	Endeffector_Read_Status();
 80011b0:	f7ff fed4 	bl	8000f5c <Endeffector_Read_Status>
	Stamp = 0;
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <Endeffector_TestModeOn+0x68>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
	i = 0;
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <Endeffector_TestModeOn+0x78>)
 80011bc:	2200      	movs	r2, #0
 80011be:	801a      	strh	r2, [r3, #0]
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200002c0 	.word	0x200002c0
 80011c8:	200003b8 	.word	0x200003b8
 80011cc:	2000000c 	.word	0x2000000c
 80011d0:	200002e0 	.word	0x200002e0
 80011d4:	200002c2 	.word	0x200002c2

080011d8 <Endeffector_TestModeOff>:

void Endeffector_TestModeOff(){
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	static uint8_t TestModeOff[2] = {TestMode_Command, TestMode_Off};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 80011dc:	4b18      	ldr	r3, [pc, #96]	; (8001240 <Endeffector_TestModeOff+0x68>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d11f      	bne.n	8001224 <Endeffector_TestModeOff+0x4c>
 80011e4:	4b17      	ldr	r3, [pc, #92]	; (8001244 <Endeffector_TestModeOff+0x6c>)
 80011e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b20      	cmp	r3, #32
 80011ee:	d119      	bne.n	8001224 <Endeffector_TestModeOff+0x4c>
		HAL_I2C_Master_Transmit_IT(&hi2c1, SlaveAddr, TestModeOff, sizeof(TestModeOff));
 80011f0:	2302      	movs	r3, #2
 80011f2:	4a15      	ldr	r2, [pc, #84]	; (8001248 <Endeffector_TestModeOff+0x70>)
 80011f4:	212a      	movs	r1, #42	; 0x2a
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <Endeffector_TestModeOff+0x6c>)
 80011f8:	f006 f85c 	bl	80072b4 <HAL_I2C_Master_Transmit_IT>
	}

	static uint32_t timestamp = 0;
	while(i < 150){
 80011fc:	e012      	b.n	8001224 <Endeffector_TestModeOff+0x4c>
		if(HAL_GetTick() >= timestamp){
 80011fe:	f004 fc0b 	bl	8005a18 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <Endeffector_TestModeOff+0x74>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	429a      	cmp	r2, r3
 800120a:	d30b      	bcc.n	8001224 <Endeffector_TestModeOff+0x4c>
			timestamp = HAL_GetTick() + 10;
 800120c:	f004 fc04 	bl	8005a18 <HAL_GetTick>
 8001210:	4603      	mov	r3, r0
 8001212:	330a      	adds	r3, #10
 8001214:	4a0d      	ldr	r2, [pc, #52]	; (800124c <Endeffector_TestModeOff+0x74>)
 8001216:	6013      	str	r3, [r2, #0]
			i++;
 8001218:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <Endeffector_TestModeOff+0x78>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	3301      	adds	r3, #1
 800121e:	b29a      	uxth	r2, r3
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <Endeffector_TestModeOff+0x78>)
 8001222:	801a      	strh	r2, [r3, #0]
	while(i < 150){
 8001224:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <Endeffector_TestModeOff+0x78>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	2b95      	cmp	r3, #149	; 0x95
 800122a:	d9e8      	bls.n	80011fe <Endeffector_TestModeOff+0x26>
		}
	}

	Endeffector_Read_Status();
 800122c:	f7ff fe96 	bl	8000f5c <Endeffector_Read_Status>
	Stamp = 0;
 8001230:	4b03      	ldr	r3, [pc, #12]	; (8001240 <Endeffector_TestModeOff+0x68>)
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
	i = 0;
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <Endeffector_TestModeOff+0x78>)
 8001238:	2200      	movs	r2, #0
 800123a:	801a      	strh	r2, [r3, #0]
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	200002c0 	.word	0x200002c0
 8001244:	200003b8 	.word	0x200003b8
 8001248:	20000010 	.word	0x20000010
 800124c:	200002e4 	.word	0x200002e4
 8001250:	200002c2 	.word	0x200002c2

08001254 <Endeffector_GripperModeOn>:

void Endeffector_GripperModeOn(){
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	static uint8_t GripperOn[2] = {GripperMode_Command, GripperMode_On};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 8001258:	4b18      	ldr	r3, [pc, #96]	; (80012bc <Endeffector_GripperModeOn+0x68>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d11f      	bne.n	80012a0 <Endeffector_GripperModeOn+0x4c>
 8001260:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <Endeffector_GripperModeOn+0x6c>)
 8001262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b20      	cmp	r3, #32
 800126a:	d119      	bne.n	80012a0 <Endeffector_GripperModeOn+0x4c>
		HAL_I2C_Master_Transmit_IT(&hi2c1, SlaveAddr, GripperOn, sizeof(GripperOn));
 800126c:	2302      	movs	r3, #2
 800126e:	4a15      	ldr	r2, [pc, #84]	; (80012c4 <Endeffector_GripperModeOn+0x70>)
 8001270:	212a      	movs	r1, #42	; 0x2a
 8001272:	4813      	ldr	r0, [pc, #76]	; (80012c0 <Endeffector_GripperModeOn+0x6c>)
 8001274:	f006 f81e 	bl	80072b4 <HAL_I2C_Master_Transmit_IT>
	}

	static uint32_t timestamp = 0;
	while(i < 150){
 8001278:	e012      	b.n	80012a0 <Endeffector_GripperModeOn+0x4c>
		if(HAL_GetTick() >= timestamp){
 800127a:	f004 fbcd 	bl	8005a18 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <Endeffector_GripperModeOn+0x74>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	429a      	cmp	r2, r3
 8001286:	d30b      	bcc.n	80012a0 <Endeffector_GripperModeOn+0x4c>
			timestamp = HAL_GetTick() + 10;
 8001288:	f004 fbc6 	bl	8005a18 <HAL_GetTick>
 800128c:	4603      	mov	r3, r0
 800128e:	330a      	adds	r3, #10
 8001290:	4a0d      	ldr	r2, [pc, #52]	; (80012c8 <Endeffector_GripperModeOn+0x74>)
 8001292:	6013      	str	r3, [r2, #0]
			i++;
 8001294:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <Endeffector_GripperModeOn+0x78>)
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	3301      	adds	r3, #1
 800129a:	b29a      	uxth	r2, r3
 800129c:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <Endeffector_GripperModeOn+0x78>)
 800129e:	801a      	strh	r2, [r3, #0]
	while(i < 150){
 80012a0:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <Endeffector_GripperModeOn+0x78>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	2b95      	cmp	r3, #149	; 0x95
 80012a6:	d9e8      	bls.n	800127a <Endeffector_GripperModeOn+0x26>
		}
	}

	Endeffector_Read_Status();
 80012a8:	f7ff fe58 	bl	8000f5c <Endeffector_Read_Status>
	Stamp = 0;
 80012ac:	4b03      	ldr	r3, [pc, #12]	; (80012bc <Endeffector_GripperModeOn+0x68>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
	i = 0;
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <Endeffector_GripperModeOn+0x78>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	801a      	strh	r2, [r3, #0]
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	200002c0 	.word	0x200002c0
 80012c0:	200003b8 	.word	0x200003b8
 80012c4:	20000014 	.word	0x20000014
 80012c8:	200002e8 	.word	0x200002e8
 80012cc:	200002c2 	.word	0x200002c2

080012d0 <Endeffector_GripperModeOff>:

void Endeffector_GripperModeOff(){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	static uint8_t GripperOff[2] = {GripperMode_Command, GripperMode_Off};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 80012d4:	4b18      	ldr	r3, [pc, #96]	; (8001338 <Endeffector_GripperModeOff+0x68>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d11f      	bne.n	800131c <Endeffector_GripperModeOff+0x4c>
 80012dc:	4b17      	ldr	r3, [pc, #92]	; (800133c <Endeffector_GripperModeOff+0x6c>)
 80012de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b20      	cmp	r3, #32
 80012e6:	d119      	bne.n	800131c <Endeffector_GripperModeOff+0x4c>
		HAL_I2C_Master_Transmit_IT(&hi2c1, SlaveAddr, GripperOff, sizeof(GripperOff));
 80012e8:	2302      	movs	r3, #2
 80012ea:	4a15      	ldr	r2, [pc, #84]	; (8001340 <Endeffector_GripperModeOff+0x70>)
 80012ec:	212a      	movs	r1, #42	; 0x2a
 80012ee:	4813      	ldr	r0, [pc, #76]	; (800133c <Endeffector_GripperModeOff+0x6c>)
 80012f0:	f005 ffe0 	bl	80072b4 <HAL_I2C_Master_Transmit_IT>
	}

	static uint32_t timestamp = 0;
	while(i < 150){
 80012f4:	e012      	b.n	800131c <Endeffector_GripperModeOff+0x4c>
		if(HAL_GetTick() >= timestamp){
 80012f6:	f004 fb8f 	bl	8005a18 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	4b11      	ldr	r3, [pc, #68]	; (8001344 <Endeffector_GripperModeOff+0x74>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	429a      	cmp	r2, r3
 8001302:	d30b      	bcc.n	800131c <Endeffector_GripperModeOff+0x4c>
			timestamp = HAL_GetTick() + 10;
 8001304:	f004 fb88 	bl	8005a18 <HAL_GetTick>
 8001308:	4603      	mov	r3, r0
 800130a:	330a      	adds	r3, #10
 800130c:	4a0d      	ldr	r2, [pc, #52]	; (8001344 <Endeffector_GripperModeOff+0x74>)
 800130e:	6013      	str	r3, [r2, #0]
			i++;
 8001310:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <Endeffector_GripperModeOff+0x78>)
 8001312:	881b      	ldrh	r3, [r3, #0]
 8001314:	3301      	adds	r3, #1
 8001316:	b29a      	uxth	r2, r3
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <Endeffector_GripperModeOff+0x78>)
 800131a:	801a      	strh	r2, [r3, #0]
	while(i < 150){
 800131c:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <Endeffector_GripperModeOff+0x78>)
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	2b95      	cmp	r3, #149	; 0x95
 8001322:	d9e8      	bls.n	80012f6 <Endeffector_GripperModeOff+0x26>
		}
	}

	Endeffector_Read_Status();
 8001324:	f7ff fe1a 	bl	8000f5c <Endeffector_Read_Status>
	Stamp = 0;
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <Endeffector_GripperModeOff+0x68>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
	i = 0;
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <Endeffector_GripperModeOff+0x78>)
 8001330:	2200      	movs	r2, #0
 8001332:	801a      	strh	r2, [r3, #0]
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	200002c0 	.word	0x200002c0
 800133c:	200003b8 	.word	0x200003b8
 8001340:	20000018 	.word	0x20000018
 8001344:	200002ec 	.word	0x200002ec
 8001348:	200002c2 	.word	0x200002c2

0800134c <Endeffector_PickUp>:

void Endeffector_PickUp(){
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	static uint8_t PickUp[2] = {GripperMode_Command, GripperMode_PickUp};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 8001350:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <Endeffector_PickUp+0x68>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d11f      	bne.n	8001398 <Endeffector_PickUp+0x4c>
 8001358:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <Endeffector_PickUp+0x6c>)
 800135a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b20      	cmp	r3, #32
 8001362:	d119      	bne.n	8001398 <Endeffector_PickUp+0x4c>
		HAL_I2C_Master_Transmit_IT(&hi2c1, SlaveAddr, PickUp, sizeof(PickUp));
 8001364:	2302      	movs	r3, #2
 8001366:	4a15      	ldr	r2, [pc, #84]	; (80013bc <Endeffector_PickUp+0x70>)
 8001368:	212a      	movs	r1, #42	; 0x2a
 800136a:	4813      	ldr	r0, [pc, #76]	; (80013b8 <Endeffector_PickUp+0x6c>)
 800136c:	f005 ffa2 	bl	80072b4 <HAL_I2C_Master_Transmit_IT>
	}

	static uint32_t timestamp = 0;
	while(i < 150){
 8001370:	e012      	b.n	8001398 <Endeffector_PickUp+0x4c>
		if(HAL_GetTick() >= timestamp){
 8001372:	f004 fb51 	bl	8005a18 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <Endeffector_PickUp+0x74>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	429a      	cmp	r2, r3
 800137e:	d30b      	bcc.n	8001398 <Endeffector_PickUp+0x4c>
			timestamp = HAL_GetTick() + 10;
 8001380:	f004 fb4a 	bl	8005a18 <HAL_GetTick>
 8001384:	4603      	mov	r3, r0
 8001386:	330a      	adds	r3, #10
 8001388:	4a0d      	ldr	r2, [pc, #52]	; (80013c0 <Endeffector_PickUp+0x74>)
 800138a:	6013      	str	r3, [r2, #0]
			i++;
 800138c:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <Endeffector_PickUp+0x78>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	3301      	adds	r3, #1
 8001392:	b29a      	uxth	r2, r3
 8001394:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <Endeffector_PickUp+0x78>)
 8001396:	801a      	strh	r2, [r3, #0]
	while(i < 150){
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <Endeffector_PickUp+0x78>)
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	2b95      	cmp	r3, #149	; 0x95
 800139e:	d9e8      	bls.n	8001372 <Endeffector_PickUp+0x26>
		}
	}

	Endeffector_Read_Status();
 80013a0:	f7ff fddc 	bl	8000f5c <Endeffector_Read_Status>
	Stamp = 0;
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <Endeffector_PickUp+0x68>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
	i = 0;
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <Endeffector_PickUp+0x78>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	801a      	strh	r2, [r3, #0]
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200002c0 	.word	0x200002c0
 80013b8:	200003b8 	.word	0x200003b8
 80013bc:	2000001c 	.word	0x2000001c
 80013c0:	200002f0 	.word	0x200002f0
 80013c4:	200002c2 	.word	0x200002c2

080013c8 <Endeffector_PlaceDown>:

void Endeffector_PlaceDown(){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	static uint8_t PlaceDown[2] = {GripperMode_Command, GripperMode_PlaceDown};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 80013cc:	4b18      	ldr	r3, [pc, #96]	; (8001430 <Endeffector_PlaceDown+0x68>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d11f      	bne.n	8001414 <Endeffector_PlaceDown+0x4c>
 80013d4:	4b17      	ldr	r3, [pc, #92]	; (8001434 <Endeffector_PlaceDown+0x6c>)
 80013d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b20      	cmp	r3, #32
 80013de:	d119      	bne.n	8001414 <Endeffector_PlaceDown+0x4c>
		HAL_I2C_Master_Transmit_IT(&hi2c1, SlaveAddr, PlaceDown, sizeof(PlaceDown));
 80013e0:	2302      	movs	r3, #2
 80013e2:	4a15      	ldr	r2, [pc, #84]	; (8001438 <Endeffector_PlaceDown+0x70>)
 80013e4:	212a      	movs	r1, #42	; 0x2a
 80013e6:	4813      	ldr	r0, [pc, #76]	; (8001434 <Endeffector_PlaceDown+0x6c>)
 80013e8:	f005 ff64 	bl	80072b4 <HAL_I2C_Master_Transmit_IT>
	}

	static uint32_t timestamp = 0;
	while(i < 150){
 80013ec:	e012      	b.n	8001414 <Endeffector_PlaceDown+0x4c>
		if(HAL_GetTick() >= timestamp){
 80013ee:	f004 fb13 	bl	8005a18 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <Endeffector_PlaceDown+0x74>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d30b      	bcc.n	8001414 <Endeffector_PlaceDown+0x4c>
			timestamp = HAL_GetTick() + 10;
 80013fc:	f004 fb0c 	bl	8005a18 <HAL_GetTick>
 8001400:	4603      	mov	r3, r0
 8001402:	330a      	adds	r3, #10
 8001404:	4a0d      	ldr	r2, [pc, #52]	; (800143c <Endeffector_PlaceDown+0x74>)
 8001406:	6013      	str	r3, [r2, #0]
			i++;
 8001408:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <Endeffector_PlaceDown+0x78>)
 800140a:	881b      	ldrh	r3, [r3, #0]
 800140c:	3301      	adds	r3, #1
 800140e:	b29a      	uxth	r2, r3
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <Endeffector_PlaceDown+0x78>)
 8001412:	801a      	strh	r2, [r3, #0]
	while(i < 150){
 8001414:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <Endeffector_PlaceDown+0x78>)
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	2b95      	cmp	r3, #149	; 0x95
 800141a:	d9e8      	bls.n	80013ee <Endeffector_PlaceDown+0x26>
		}
	}
	Endeffector_Read_Status();
 800141c:	f7ff fd9e 	bl	8000f5c <Endeffector_Read_Status>
	Stamp = 0;
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <Endeffector_PlaceDown+0x68>)
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]
	i = 0;
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <Endeffector_PlaceDown+0x78>)
 8001428:	2200      	movs	r2, #0
 800142a:	801a      	strh	r2, [r3, #0]
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	200002c0 	.word	0x200002c0
 8001434:	200003b8 	.word	0x200003b8
 8001438:	20000020 	.word	0x20000020
 800143c:	200002f4 	.word	0x200002f4
 8001440:	200002c2 	.word	0x200002c2

08001444 <TestMode>:

void TestMode(){
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
	switch(TestState){
 8001448:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <TestMode+0x7c>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b09      	cmp	r3, #9
 800144e:	d835      	bhi.n	80014bc <TestMode+0x78>
 8001450:	a201      	add	r2, pc, #4	; (adr r2, 8001458 <TestMode+0x14>)
 8001452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001456:	bf00      	nop
 8001458:	08001481 	.word	0x08001481
 800145c:	08001487 	.word	0x08001487
 8001460:	0800148d 	.word	0x0800148d
 8001464:	08001493 	.word	0x08001493
 8001468:	08001499 	.word	0x08001499
 800146c:	0800149f 	.word	0x0800149f
 8001470:	080014a5 	.word	0x080014a5
 8001474:	080014ab 	.word	0x080014ab
 8001478:	080014b1 	.word	0x080014b1
 800147c:	080014b7 	.word	0x080014b7
	case Read_Status:
		Endeffector_Read_Status();
 8001480:	f7ff fd6c 	bl	8000f5c <Endeffector_Read_Status>
		break;
 8001484:	e01a      	b.n	80014bc <TestMode+0x78>
	case SoftReset:
		Endeffector_SoftReset();
 8001486:	f7ff fdaf 	bl	8000fe8 <Endeffector_SoftReset>
		break;
 800148a:	e017      	b.n	80014bc <TestMode+0x78>
	case TestModeOn:
		Endeffector_TestModeOn();
 800148c:	f7ff fe66 	bl	800115c <Endeffector_TestModeOn>
		break;
 8001490:	e014      	b.n	80014bc <TestMode+0x78>
	case TestModeOff:
		Endeffector_TestModeOff();
 8001492:	f7ff fea1 	bl	80011d8 <Endeffector_TestModeOff>
		break;
 8001496:	e011      	b.n	80014bc <TestMode+0x78>
	case GripperModeOn:
		Endeffector_GripperModeOn();
 8001498:	f7ff fedc 	bl	8001254 <Endeffector_GripperModeOn>
		break;
 800149c:	e00e      	b.n	80014bc <TestMode+0x78>
	case PickUp:
		Endeffector_PickUp();
 800149e:	f7ff ff55 	bl	800134c <Endeffector_PickUp>
		break;
 80014a2:	e00b      	b.n	80014bc <TestMode+0x78>
	case PlaceDown:
		Endeffector_PlaceDown();
 80014a4:	f7ff ff90 	bl	80013c8 <Endeffector_PlaceDown>
		break;
 80014a8:	e008      	b.n	80014bc <TestMode+0x78>
	case GripperModeOff:
		Endeffector_GripperModeOff();
 80014aa:	f7ff ff11 	bl	80012d0 <Endeffector_GripperModeOff>
		break;
 80014ae:	e005      	b.n	80014bc <TestMode+0x78>
	case GripperEmerTrigger:
		Endeffector_EmergencyTrigger();
 80014b0:	f7ff fdd8 	bl	8001064 <Endeffector_EmergencyTrigger>
		break;
 80014b4:	e002      	b.n	80014bc <TestMode+0x78>
	case GripperEmerExit:
		Endeffector_EmergencyExit();
 80014b6:	f7ff fe13 	bl	80010e0 <Endeffector_EmergencyExit>
		break;
 80014ba:	bf00      	nop
	}
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	200002c4 	.word	0x200002c4

080014c4 <CheckJoystick>:
uint32_t VR[2] = {0};
int8_t flag = 0;
int16_t counter = 0;

void CheckJoystick()
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
	if ((VR[0] >= 1800) && (VR[0] <= 2200) && (VR[1] >= 1800) && (VR[1] <= 2200))
 80014c8:	4b36      	ldr	r3, [pc, #216]	; (80015a4 <CheckJoystick+0xe0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80014d0:	d317      	bcc.n	8001502 <CheckJoystick+0x3e>
 80014d2:	4b34      	ldr	r3, [pc, #208]	; (80015a4 <CheckJoystick+0xe0>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f640 0298 	movw	r2, #2200	; 0x898
 80014da:	4293      	cmp	r3, r2
 80014dc:	d811      	bhi.n	8001502 <CheckJoystick+0x3e>
 80014de:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <CheckJoystick+0xe0>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80014e6:	d30c      	bcc.n	8001502 <CheckJoystick+0x3e>
 80014e8:	4b2e      	ldr	r3, [pc, #184]	; (80015a4 <CheckJoystick+0xe0>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f640 0298 	movw	r2, #2200	; 0x898
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d806      	bhi.n	8001502 <CheckJoystick+0x3e>
	{
	Joy.X = 0;
 80014f4:	4b2c      	ldr	r3, [pc, #176]	; (80015a8 <CheckJoystick+0xe4>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	801a      	strh	r2, [r3, #0]
	Joy.Y = 0;
 80014fa:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <CheckJoystick+0xe4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	805a      	strh	r2, [r3, #2]
 8001500:	e04b      	b.n	800159a <CheckJoystick+0xd6>
   }

  // down
	else if ((VR[0] <= 100) && (VR[1] <= 2200))
 8001502:	4b28      	ldr	r3, [pc, #160]	; (80015a4 <CheckJoystick+0xe0>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b64      	cmp	r3, #100	; 0x64
 8001508:	d80d      	bhi.n	8001526 <CheckJoystick+0x62>
 800150a:	4b26      	ldr	r3, [pc, #152]	; (80015a4 <CheckJoystick+0xe0>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f640 0298 	movw	r2, #2200	; 0x898
 8001512:	4293      	cmp	r3, r2
 8001514:	d807      	bhi.n	8001526 <CheckJoystick+0x62>
	{
	Joy.X = 0;
 8001516:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <CheckJoystick+0xe4>)
 8001518:	2200      	movs	r2, #0
 800151a:	801a      	strh	r2, [r3, #0]
	Joy.Y = -1;
 800151c:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <CheckJoystick+0xe4>)
 800151e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001522:	805a      	strh	r2, [r3, #2]
 8001524:	e039      	b.n	800159a <CheckJoystick+0xd6>
   }
 // up
  else if ((VR[0] >= 3900) && (VR[1] >= 2100))
 8001526:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <CheckJoystick+0xe0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f640 723b 	movw	r2, #3899	; 0xf3b
 800152e:	4293      	cmp	r3, r2
 8001530:	d90c      	bls.n	800154c <CheckJoystick+0x88>
 8001532:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <CheckJoystick+0xe0>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f640 0233 	movw	r2, #2099	; 0x833
 800153a:	4293      	cmp	r3, r2
 800153c:	d906      	bls.n	800154c <CheckJoystick+0x88>
	{
	Joy.X = 0;
 800153e:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <CheckJoystick+0xe4>)
 8001540:	2200      	movs	r2, #0
 8001542:	801a      	strh	r2, [r3, #0]
	Joy.Y = 1;
 8001544:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <CheckJoystick+0xe4>)
 8001546:	2201      	movs	r2, #1
 8001548:	805a      	strh	r2, [r3, #2]
 800154a:	e026      	b.n	800159a <CheckJoystick+0xd6>
   }

  // left
  else if ((VR[0] <= 2100) && (VR[1] <= 1500))
 800154c:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <CheckJoystick+0xe0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f640 0234 	movw	r2, #2100	; 0x834
 8001554:	4293      	cmp	r3, r2
 8001556:	d80d      	bhi.n	8001574 <CheckJoystick+0xb0>
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <CheckJoystick+0xe0>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001560:	4293      	cmp	r3, r2
 8001562:	d807      	bhi.n	8001574 <CheckJoystick+0xb0>
	{
	Joy.X = -1;
 8001564:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <CheckJoystick+0xe4>)
 8001566:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800156a:	801a      	strh	r2, [r3, #0]
	Joy.Y = 0;
 800156c:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <CheckJoystick+0xe4>)
 800156e:	2200      	movs	r2, #0
 8001570:	805a      	strh	r2, [r3, #2]
 8001572:	e012      	b.n	800159a <CheckJoystick+0xd6>
   }

  // right
  else if ((VR[0] >= 1900) && (VR[1] >= 2100))
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <CheckJoystick+0xe0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f240 726b 	movw	r2, #1899	; 0x76b
 800157c:	4293      	cmp	r3, r2
 800157e:	d90c      	bls.n	800159a <CheckJoystick+0xd6>
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <CheckJoystick+0xe0>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f640 0233 	movw	r2, #2099	; 0x833
 8001588:	4293      	cmp	r3, r2
 800158a:	d906      	bls.n	800159a <CheckJoystick+0xd6>
   {
	Joy.X = 1;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <CheckJoystick+0xe4>)
 800158e:	2201      	movs	r2, #1
 8001590:	801a      	strh	r2, [r3, #0]
	Joy.Y = 0;
 8001592:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <CheckJoystick+0xe4>)
 8001594:	2200      	movs	r2, #0
 8001596:	805a      	strh	r2, [r3, #2]
   }
}
 8001598:	e7ff      	b.n	800159a <CheckJoystick+0xd6>
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	20000304 	.word	0x20000304
 80015a8:	200002f8 	.word	0x200002f8

080015ac <CheckButton>:

int CheckButton()
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	// Button 1
		if(Joy.B1Log == 0 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0){
 80015b0:	4b39      	ldr	r3, [pc, #228]	; (8001698 <CheckButton+0xec>)
 80015b2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10d      	bne.n	80015d6 <CheckButton+0x2a>
 80015ba:	2110      	movs	r1, #16
 80015bc:	4837      	ldr	r0, [pc, #220]	; (800169c <CheckButton+0xf0>)
 80015be:	f005 fceb 	bl	8006f98 <HAL_GPIO_ReadPin>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d106      	bne.n	80015d6 <CheckButton+0x2a>
			Joy.status = 1;
 80015c8:	4b33      	ldr	r3, [pc, #204]	; (8001698 <CheckButton+0xec>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	809a      	strh	r2, [r3, #4]
			Joy.B1Log = 1;
 80015ce:	4b32      	ldr	r3, [pc, #200]	; (8001698 <CheckButton+0xec>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	80da      	strh	r2, [r3, #6]
 80015d4:	e024      	b.n	8001620 <CheckButton+0x74>
		}
		// Button 2
		else if(Joy.B2Log ==  0 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 0){
 80015d6:	4b30      	ldr	r3, [pc, #192]	; (8001698 <CheckButton+0xec>)
 80015d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d10d      	bne.n	80015fc <CheckButton+0x50>
 80015e0:	2101      	movs	r1, #1
 80015e2:	482f      	ldr	r0, [pc, #188]	; (80016a0 <CheckButton+0xf4>)
 80015e4:	f005 fcd8 	bl	8006f98 <HAL_GPIO_ReadPin>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d106      	bne.n	80015fc <CheckButton+0x50>
			Joy.status = 2;
 80015ee:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <CheckButton+0xec>)
 80015f0:	2202      	movs	r2, #2
 80015f2:	809a      	strh	r2, [r3, #4]
			Joy.B2Log = 1;
 80015f4:	4b28      	ldr	r3, [pc, #160]	; (8001698 <CheckButton+0xec>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	811a      	strh	r2, [r3, #8]
 80015fa:	e011      	b.n	8001620 <CheckButton+0x74>
	//		UpdatePosition();

		}
		// Button 3
		else if(Joy.B3Log ==  0 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == 0){
 80015fc:	4b26      	ldr	r3, [pc, #152]	; (8001698 <CheckButton+0xec>)
 80015fe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10c      	bne.n	8001620 <CheckButton+0x74>
 8001606:	2104      	movs	r1, #4
 8001608:	4826      	ldr	r0, [pc, #152]	; (80016a4 <CheckButton+0xf8>)
 800160a:	f005 fcc5 	bl	8006f98 <HAL_GPIO_ReadPin>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d105      	bne.n	8001620 <CheckButton+0x74>
			Joy.status = 3;
 8001614:	4b20      	ldr	r3, [pc, #128]	; (8001698 <CheckButton+0xec>)
 8001616:	2203      	movs	r2, #3
 8001618:	809a      	strh	r2, [r3, #4]
			Joy.B3Log = 1;
 800161a:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <CheckButton+0xec>)
 800161c:	2201      	movs	r2, #1
 800161e:	815a      	strh	r2, [r3, #10]
		}

		// Check log
		if(Joy.B1Log == 1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)){
 8001620:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <CheckButton+0xec>)
 8001622:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d10d      	bne.n	8001646 <CheckButton+0x9a>
 800162a:	2110      	movs	r1, #16
 800162c:	481b      	ldr	r0, [pc, #108]	; (800169c <CheckButton+0xf0>)
 800162e:	f005 fcb3 	bl	8006f98 <HAL_GPIO_ReadPin>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d006      	beq.n	8001646 <CheckButton+0x9a>
			Joy.status = 0;
 8001638:	4b17      	ldr	r3, [pc, #92]	; (8001698 <CheckButton+0xec>)
 800163a:	2200      	movs	r2, #0
 800163c:	809a      	strh	r2, [r3, #4]
			Joy.B1Log = 0;
 800163e:	4b16      	ldr	r3, [pc, #88]	; (8001698 <CheckButton+0xec>)
 8001640:	2200      	movs	r2, #0
 8001642:	80da      	strh	r2, [r3, #6]
 8001644:	e024      	b.n	8001690 <CheckButton+0xe4>
			// start
		}
		else if(Joy.B2Log == 1 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)){
 8001646:	4b14      	ldr	r3, [pc, #80]	; (8001698 <CheckButton+0xec>)
 8001648:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d10d      	bne.n	800166c <CheckButton+0xc0>
 8001650:	2101      	movs	r1, #1
 8001652:	4813      	ldr	r0, [pc, #76]	; (80016a0 <CheckButton+0xf4>)
 8001654:	f005 fca0 	bl	8006f98 <HAL_GPIO_ReadPin>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d006      	beq.n	800166c <CheckButton+0xc0>
			Joy.status = 0;
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <CheckButton+0xec>)
 8001660:	2200      	movs	r2, #0
 8001662:	809a      	strh	r2, [r3, #4]
			Joy.B2Log = 0;
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <CheckButton+0xec>)
 8001666:	2200      	movs	r2, #0
 8001668:	811a      	strh	r2, [r3, #8]
 800166a:	e011      	b.n	8001690 <CheckButton+0xe4>
		}
		else if(Joy.B3Log == 1 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)){
 800166c:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <CheckButton+0xec>)
 800166e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d10c      	bne.n	8001690 <CheckButton+0xe4>
 8001676:	2104      	movs	r1, #4
 8001678:	480a      	ldr	r0, [pc, #40]	; (80016a4 <CheckButton+0xf8>)
 800167a:	f005 fc8d 	bl	8006f98 <HAL_GPIO_ReadPin>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <CheckButton+0xe4>
			Joy.status = 0;
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <CheckButton+0xec>)
 8001686:	2200      	movs	r2, #0
 8001688:	809a      	strh	r2, [r3, #4]
			Joy.B3Log = 0;
 800168a:	4b03      	ldr	r3, [pc, #12]	; (8001698 <CheckButton+0xec>)
 800168c:	2200      	movs	r2, #0
 800168e:	815a      	strh	r2, [r3, #10]
		}

	return Joy.status;
 8001690:	4b01      	ldr	r3, [pc, #4]	; (8001698 <CheckButton+0xec>)
 8001692:	889b      	ldrh	r3, [r3, #4]
}
 8001694:	4618      	mov	r0, r3
 8001696:	bd80      	pop	{r7, pc}
 8001698:	200002f8 	.word	0x200002f8
 800169c:	40020000 	.word	0x40020000
 80016a0:	40020400 	.word	0x40020400
 80016a4:	40020800 	.word	0x40020800

080016a8 <InitKalmanStruct>:
extern arm_matrix_instance_f32 mat_P, mat_P_minus, mat_Q;
extern arm_matrix_instance_f32 mat_C, mat_R, mat_S, mat_K;
extern arm_matrix_instance_f32 mat_temp3x3A,mat_temp3x3B, mat_temp3x1,mat_temp1x3, mat_temp1x1;

void InitKalmanStruct(Kalman* KF,float32_t q,float32_t r)
{
 80016a8:	b5b0      	push	{r4, r5, r7, lr}
 80016aa:	b0a0      	sub	sp, #128	; 0x80
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80016b4:	edc7 0a01 	vstr	s1, [r7, #4]
	KF->R = r;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	655a      	str	r2, [r3, #84]	; 0x54
	KF->var_Q = q;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	68ba      	ldr	r2, [r7, #8]
 80016c2:	659a      	str	r2, [r3, #88]	; 0x58
	KF->D = 0;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	float32_t a[9] = {
 80016ce:	4b8d      	ldr	r3, [pc, #564]	; (8001904 <InitKalmanStruct+0x25c>)
 80016d0:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80016d4:	461d      	mov	r5, r3
 80016d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016de:	682b      	ldr	r3, [r5, #0]
 80016e0:	6023      	str	r3, [r4, #0]
			1.0, 0.001/2.5, 0.0000005/(2.5*2.5),
			0  , 1.0      , 0.001/2.5,
			0  , 0        , 1.0
	};
	float iden[9] = {
 80016e2:	4b89      	ldr	r3, [pc, #548]	; (8001908 <InitKalmanStruct+0x260>)
 80016e4:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80016e8:	461d      	mov	r5, r3
 80016ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016f2:	682b      	ldr	r3, [r5, #0]
 80016f4:	6023      	str	r3, [r4, #0]
			1.0, 0  , 0,
			0  , 1.0, 0,
			0  , 0  , 1.0
	};
	int i;
	for(i=0;i<9;i++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80016fa:	e023      	b.n	8001744 <InitKalmanStruct+0x9c>
	{
		KF->A[i] = a[i];
 80016fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	3380      	adds	r3, #128	; 0x80
 8001702:	443b      	add	r3, r7
 8001704:	3b28      	subs	r3, #40	; 0x28
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	68f9      	ldr	r1, [r7, #12]
 800170a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800170c:	3318      	adds	r3, #24
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	601a      	str	r2, [r3, #0]
		KF->I[i] = iden[i];
 8001714:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	3380      	adds	r3, #128	; 0x80
 800171a:	443b      	add	r3, r7
 800171c:	3b4c      	subs	r3, #76	; 0x4c
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	68f9      	ldr	r1, [r7, #12]
 8001722:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001724:	332e      	adds	r3, #46	; 0x2e
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	601a      	str	r2, [r3, #0]
		KF->P[i] = 0;
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001730:	3302      	adds	r3, #2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	3304      	adds	r3, #4
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
	for(i=0;i<9;i++)
 800173e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001740:	3301      	adds	r3, #1
 8001742:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001744:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001746:	2b08      	cmp	r3, #8
 8001748:	ddd8      	ble.n	80016fc <InitKalmanStruct+0x54>
	}
	float32_t b[3] = {
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001756:	f04f 0300 	mov.w	r3, #0
 800175a:	633b      	str	r3, [r7, #48]	; 0x30
			0, 0, 0
	};
	float32_t c[3] = {
 800175c:	f04f 0300 	mov.w	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
 8001762:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001766:	623b      	str	r3, [r7, #32]
 8001768:	f04f 0300 	mov.w	r3, #0
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
			0, 1, 0
	};
	float32_t g[3] = {
 800176e:	4a67      	ldr	r2, [pc, #412]	; (800190c <InitKalmanStruct+0x264>)
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	ca07      	ldmia	r2, {r0, r1, r2}
 8001776:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0.001 * 0.001 * 0.001 / (6*2.5*2.5*2.5),
			0.0000005/(2.5*2.5),
			0.001/2.5
	};

	for(i=0;i<3;i++)
 800177a:	2300      	movs	r3, #0
 800177c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800177e:	e02e      	b.n	80017de <InitKalmanStruct+0x136>
	{
		KF->B[i] = b[i];
 8001780:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	3380      	adds	r3, #128	; 0x80
 8001786:	443b      	add	r3, r7
 8001788:	3b58      	subs	r3, #88	; 0x58
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68f9      	ldr	r1, [r7, #12]
 800178e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001790:	3320      	adds	r3, #32
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	440b      	add	r3, r1
 8001796:	3304      	adds	r3, #4
 8001798:	601a      	str	r2, [r3, #0]
		KF->C[i] = c[i];
 800179a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	3380      	adds	r3, #128	; 0x80
 80017a0:	443b      	add	r3, r7
 80017a2:	3b64      	subs	r3, #100	; 0x64
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	68f9      	ldr	r1, [r7, #12]
 80017a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017aa:	3324      	adds	r3, #36	; 0x24
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	440b      	add	r3, r1
 80017b0:	601a      	str	r2, [r3, #0]
		KF->G[i] = g[i];
 80017b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	3380      	adds	r3, #128	; 0x80
 80017b8:	443b      	add	r3, r7
 80017ba:	3b70      	subs	r3, #112	; 0x70
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	68f9      	ldr	r1, [r7, #12]
 80017c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017c2:	3328      	adds	r3, #40	; 0x28
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	440b      	add	r3, r1
 80017c8:	601a      	str	r2, [r3, #0]
		KF->x_hat[i] = 0;
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
	for(i=0;i<3;i++)
 80017d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017da:	3301      	adds	r3, #1
 80017dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	ddcd      	ble.n	8001780 <InitKalmanStruct+0xd8>
	}

	  arm_mat_init_f32(&mat_A, 3, 3,KF->A);//3x3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	3360      	adds	r3, #96	; 0x60
 80017e8:	2203      	movs	r2, #3
 80017ea:	2103      	movs	r1, #3
 80017ec:	4848      	ldr	r0, [pc, #288]	; (8001910 <InitKalmanStruct+0x268>)
 80017ee:	f003 fbf2 	bl	8004fd6 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_x_hat, 3, 1, KF->x_hat);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2201      	movs	r2, #1
 80017f6:	2103      	movs	r1, #3
 80017f8:	4846      	ldr	r0, [pc, #280]	; (8001914 <InitKalmanStruct+0x26c>)
 80017fa:	f003 fbec 	bl	8004fd6 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_x_hat_minus, 3, 1, KF->x_hat_minus);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	33dc      	adds	r3, #220	; 0xdc
 8001802:	2201      	movs	r2, #1
 8001804:	2103      	movs	r1, #3
 8001806:	4844      	ldr	r0, [pc, #272]	; (8001918 <InitKalmanStruct+0x270>)
 8001808:	f003 fbe5 	bl	8004fd6 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_B, 3, 1, KF->B);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	3384      	adds	r3, #132	; 0x84
 8001810:	2201      	movs	r2, #1
 8001812:	2103      	movs	r1, #3
 8001814:	4841      	ldr	r0, [pc, #260]	; (800191c <InitKalmanStruct+0x274>)
 8001816:	f003 fbde 	bl	8004fd6 <arm_mat_init_f32>
	  //arm_mat_init_f32(&mat_u, 1, 1, NULL);  // Set the input control vector if needed
	  arm_mat_init_f32(&mat_P, 3, 3, KF->P);//3x3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	330c      	adds	r3, #12
 800181e:	2203      	movs	r2, #3
 8001820:	2103      	movs	r1, #3
 8001822:	483f      	ldr	r0, [pc, #252]	; (8001920 <InitKalmanStruct+0x278>)
 8001824:	f003 fbd7 	bl	8004fd6 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_P_minus, 3, 3, KF->P_minus);//3x3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	33e8      	adds	r3, #232	; 0xe8
 800182c:	2203      	movs	r2, #3
 800182e:	2103      	movs	r1, #3
 8001830:	483c      	ldr	r0, [pc, #240]	; (8001924 <InitKalmanStruct+0x27c>)
 8001832:	f003 fbd0 	bl	8004fd6 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_Q, 3, 3,KF->Q);//3x3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	3330      	adds	r3, #48	; 0x30
 800183a:	2203      	movs	r2, #3
 800183c:	2103      	movs	r1, #3
 800183e:	483a      	ldr	r0, [pc, #232]	; (8001928 <InitKalmanStruct+0x280>)
 8001840:	f003 fbc9 	bl	8004fd6 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_C, 1, 3, KF->C);//1x3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	3390      	adds	r3, #144	; 0x90
 8001848:	2203      	movs	r2, #3
 800184a:	2101      	movs	r1, #1
 800184c:	4837      	ldr	r0, [pc, #220]	; (800192c <InitKalmanStruct+0x284>)
 800184e:	f003 fbc2 	bl	8004fd6 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_R, 1, 1, &KF->R);//1x1
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	3354      	adds	r3, #84	; 0x54
 8001856:	2201      	movs	r2, #1
 8001858:	2101      	movs	r1, #1
 800185a:	4835      	ldr	r0, [pc, #212]	; (8001930 <InitKalmanStruct+0x288>)
 800185c:	f003 fbbb 	bl	8004fd6 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_S, 1, 1, KF->S);//1x1
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001866:	2201      	movs	r2, #1
 8001868:	2101      	movs	r1, #1
 800186a:	4832      	ldr	r0, [pc, #200]	; (8001934 <InitKalmanStruct+0x28c>)
 800186c:	f003 fbb3 	bl	8004fd6 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_K, 3, 1, KF->K);//3x1
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001876:	2201      	movs	r2, #1
 8001878:	2103      	movs	r1, #3
 800187a:	482f      	ldr	r0, [pc, #188]	; (8001938 <InitKalmanStruct+0x290>)
 800187c:	f003 fbab 	bl	8004fd6 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp3x3A, 3, 3, KF->temp3x3A);//3x3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8001886:	2203      	movs	r2, #3
 8001888:	2103      	movs	r1, #3
 800188a:	482c      	ldr	r0, [pc, #176]	; (800193c <InitKalmanStruct+0x294>)
 800188c:	f003 fba3 	bl	8004fd6 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp3x3B, 3, 3, KF->temp3x3B);//3x3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001896:	2203      	movs	r2, #3
 8001898:	2103      	movs	r1, #3
 800189a:	4829      	ldr	r0, [pc, #164]	; (8001940 <InitKalmanStruct+0x298>)
 800189c:	f003 fb9b 	bl	8004fd6 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp3x1, 3, 1, KF->temp3x1);//3x1
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80018a6:	2201      	movs	r2, #1
 80018a8:	2103      	movs	r1, #3
 80018aa:	4826      	ldr	r0, [pc, #152]	; (8001944 <InitKalmanStruct+0x29c>)
 80018ac:	f003 fb93 	bl	8004fd6 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp1x3, 1, 3, KF->temp1x3);//1x3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 80018b6:	2203      	movs	r2, #3
 80018b8:	2101      	movs	r1, #1
 80018ba:	4823      	ldr	r0, [pc, #140]	; (8001948 <InitKalmanStruct+0x2a0>)
 80018bc:	f003 fb8b 	bl	8004fd6 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp1x1, 1, 1, &KF->temp1x1);//1x1
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80018c6:	2201      	movs	r2, #1
 80018c8:	2101      	movs	r1, #1
 80018ca:	4820      	ldr	r0, [pc, #128]	; (800194c <InitKalmanStruct+0x2a4>)
 80018cc:	f003 fb83 	bl	8004fd6 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_G, 3, 1, KF->G);//3x1
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	33a0      	adds	r3, #160	; 0xa0
 80018d4:	2201      	movs	r2, #1
 80018d6:	2103      	movs	r1, #3
 80018d8:	481d      	ldr	r0, [pc, #116]	; (8001950 <InitKalmanStruct+0x2a8>)
 80018da:	f003 fb7c 	bl	8004fd6 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_GT, 1, 3, KF->GT);//1x3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	33ac      	adds	r3, #172	; 0xac
 80018e2:	2203      	movs	r2, #3
 80018e4:	2101      	movs	r1, #1
 80018e6:	481b      	ldr	r0, [pc, #108]	; (8001954 <InitKalmanStruct+0x2ac>)
 80018e8:	f003 fb75 	bl	8004fd6 <arm_mat_init_f32>
	  arm_mat_init_f32(&eye, 3, 3, KF->I);//1x3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	33b8      	adds	r3, #184	; 0xb8
 80018f0:	2203      	movs	r2, #3
 80018f2:	2103      	movs	r1, #3
 80018f4:	4818      	ldr	r0, [pc, #96]	; (8001958 <InitKalmanStruct+0x2b0>)
 80018f6:	f003 fb6e 	bl	8004fd6 <arm_mat_init_f32>

}
 80018fa:	bf00      	nop
 80018fc:	3780      	adds	r7, #128	; 0x80
 80018fe:	46bd      	mov	sp, r7
 8001900:	bdb0      	pop	{r4, r5, r7, pc}
 8001902:	bf00      	nop
 8001904:	0800edf8 	.word	0x0800edf8
 8001908:	0800ee1c 	.word	0x0800ee1c
 800190c:	0800ee40 	.word	0x0800ee40
 8001910:	20000668 	.word	0x20000668
 8001914:	20000670 	.word	0x20000670
 8001918:	20000678 	.word	0x20000678
 800191c:	20000680 	.word	0x20000680
 8001920:	20000690 	.word	0x20000690
 8001924:	20000698 	.word	0x20000698
 8001928:	200006a0 	.word	0x200006a0
 800192c:	200006b8 	.word	0x200006b8
 8001930:	200006c0 	.word	0x200006c0
 8001934:	200006c8 	.word	0x200006c8
 8001938:	200006d0 	.word	0x200006d0
 800193c:	200006d8 	.word	0x200006d8
 8001940:	200006e0 	.word	0x200006e0
 8001944:	200006e8 	.word	0x200006e8
 8001948:	200006f0 	.word	0x200006f0
 800194c:	200006f8 	.word	0x200006f8
 8001950:	200006b0 	.word	0x200006b0
 8001954:	200006a8 	.word	0x200006a8
 8001958:	20000688 	.word	0x20000688

0800195c <kalman_filter>:

void kalman_filter()
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
    //Process model: x_hat_minus = mat_A*x_hat
    arm_mat_mult_f32(&mat_A, &mat_x_hat, &mat_x_hat_minus);			//A*X
 8001960:	4a39      	ldr	r2, [pc, #228]	; (8001a48 <kalman_filter+0xec>)
 8001962:	493a      	ldr	r1, [pc, #232]	; (8001a4c <kalman_filter+0xf0>)
 8001964:	483a      	ldr	r0, [pc, #232]	; (8001a50 <kalman_filter+0xf4>)
 8001966:	f003 fec5 	bl	80056f4 <arm_mat_mult_f32>
    // If an input control vector is used:
    // arm_mat_mult_f32(&mat_B, &mat_u, &mat_temp3x3A);
    // arm_mat_add_f32(&mat_x_hat_minus, &mat_temp3x3A, &mat_x_hat_minus);

    // Predict covariance matrix: P_minus = A * P * A^T + Q
    arm_mat_trans_f32(&mat_A, &mat_temp3x3A);					    //AT
 800196a:	493a      	ldr	r1, [pc, #232]	; (8001a54 <kalman_filter+0xf8>)
 800196c:	4838      	ldr	r0, [pc, #224]	; (8001a50 <kalman_filter+0xf4>)
 800196e:	f003 ffac 	bl	80058ca <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_A, &mat_P, &mat_temp3x3B);			    //A*P
 8001972:	4a39      	ldr	r2, [pc, #228]	; (8001a58 <kalman_filter+0xfc>)
 8001974:	4939      	ldr	r1, [pc, #228]	; (8001a5c <kalman_filter+0x100>)
 8001976:	4836      	ldr	r0, [pc, #216]	; (8001a50 <kalman_filter+0xf4>)
 8001978:	f003 febc 	bl	80056f4 <arm_mat_mult_f32>
    arm_mat_mult_f32(&mat_temp3x3B, &mat_temp3x3A, &mat_P_minus);	//A*P*AT
 800197c:	4a38      	ldr	r2, [pc, #224]	; (8001a60 <kalman_filter+0x104>)
 800197e:	4935      	ldr	r1, [pc, #212]	; (8001a54 <kalman_filter+0xf8>)
 8001980:	4835      	ldr	r0, [pc, #212]	; (8001a58 <kalman_filter+0xfc>)
 8001982:	f003 feb7 	bl	80056f4 <arm_mat_mult_f32>
    arm_mat_trans_f32(&mat_G, &mat_GT);								//GT
 8001986:	4937      	ldr	r1, [pc, #220]	; (8001a64 <kalman_filter+0x108>)
 8001988:	4837      	ldr	r0, [pc, #220]	; (8001a68 <kalman_filter+0x10c>)
 800198a:	f003 ff9e 	bl	80058ca <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_G, &mat_GT, &mat_Q);						//G*GT
 800198e:	4a37      	ldr	r2, [pc, #220]	; (8001a6c <kalman_filter+0x110>)
 8001990:	4934      	ldr	r1, [pc, #208]	; (8001a64 <kalman_filter+0x108>)
 8001992:	4835      	ldr	r0, [pc, #212]	; (8001a68 <kalman_filter+0x10c>)
 8001994:	f003 feae 	bl	80056f4 <arm_mat_mult_f32>
    arm_mat_scale_f32(&mat_Q,KF.var_Q, &mat_Q);						//G*GT*var_q
 8001998:	4b35      	ldr	r3, [pc, #212]	; (8001a70 <kalman_filter+0x114>)
 800199a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800199e:	4933      	ldr	r1, [pc, #204]	; (8001a6c <kalman_filter+0x110>)
 80019a0:	eeb0 0a67 	vmov.f32	s0, s15
 80019a4:	4831      	ldr	r0, [pc, #196]	; (8001a6c <kalman_filter+0x110>)
 80019a6:	f003 ff1f 	bl	80057e8 <arm_mat_scale_f32>
    arm_mat_add_f32(&mat_P_minus, &mat_Q, &mat_P_minus);			//A * P * A^T + Q
 80019aa:	4a2d      	ldr	r2, [pc, #180]	; (8001a60 <kalman_filter+0x104>)
 80019ac:	492f      	ldr	r1, [pc, #188]	; (8001a6c <kalman_filter+0x110>)
 80019ae:	482c      	ldr	r0, [pc, #176]	; (8001a60 <kalman_filter+0x104>)
 80019b0:	f003 fad6 	bl	8004f60 <arm_mat_add_f32>

    // Calculate innovation covariance: S = C * P_minus * C^T + R
    arm_mat_mult_f32(&mat_C, &mat_P_minus, &mat_temp1x3);			//C*P
 80019b4:	4a2f      	ldr	r2, [pc, #188]	; (8001a74 <kalman_filter+0x118>)
 80019b6:	492a      	ldr	r1, [pc, #168]	; (8001a60 <kalman_filter+0x104>)
 80019b8:	482f      	ldr	r0, [pc, #188]	; (8001a78 <kalman_filter+0x11c>)
 80019ba:	f003 fe9b 	bl	80056f4 <arm_mat_mult_f32>
    arm_mat_trans_f32(&mat_C, &mat_temp3x1);						//CT
 80019be:	492f      	ldr	r1, [pc, #188]	; (8001a7c <kalman_filter+0x120>)
 80019c0:	482d      	ldr	r0, [pc, #180]	; (8001a78 <kalman_filter+0x11c>)
 80019c2:	f003 ff82 	bl	80058ca <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_temp1x3, &mat_temp3x1, &mat_temp1x1);		//C*P*C^T
 80019c6:	4a2e      	ldr	r2, [pc, #184]	; (8001a80 <kalman_filter+0x124>)
 80019c8:	492c      	ldr	r1, [pc, #176]	; (8001a7c <kalman_filter+0x120>)
 80019ca:	482a      	ldr	r0, [pc, #168]	; (8001a74 <kalman_filter+0x118>)
 80019cc:	f003 fe92 	bl	80056f4 <arm_mat_mult_f32>
    arm_mat_add_f32(&mat_temp1x1, &mat_R, &mat_S);					//C*P*C^T + R
 80019d0:	4a2c      	ldr	r2, [pc, #176]	; (8001a84 <kalman_filter+0x128>)
 80019d2:	492d      	ldr	r1, [pc, #180]	; (8001a88 <kalman_filter+0x12c>)
 80019d4:	482a      	ldr	r0, [pc, #168]	; (8001a80 <kalman_filter+0x124>)
 80019d6:	f003 fac3 	bl	8004f60 <arm_mat_add_f32>

    //==> Calculate Kalman gain: K = P_minus * C^T * S^(-1)
    arm_mat_inverse_f32(&mat_S, &mat_temp1x1);						//inv(S)
 80019da:	4929      	ldr	r1, [pc, #164]	; (8001a80 <kalman_filter+0x124>)
 80019dc:	4829      	ldr	r0, [pc, #164]	; (8001a84 <kalman_filter+0x128>)
 80019de:	f003 fb12 	bl	8005006 <arm_mat_inverse_f32>
    arm_mat_mult_f32(&mat_P_minus, &mat_temp3x1, &mat_temp3x3A);	//P*CT
 80019e2:	4a1c      	ldr	r2, [pc, #112]	; (8001a54 <kalman_filter+0xf8>)
 80019e4:	4925      	ldr	r1, [pc, #148]	; (8001a7c <kalman_filter+0x120>)
 80019e6:	481e      	ldr	r0, [pc, #120]	; (8001a60 <kalman_filter+0x104>)
 80019e8:	f003 fe84 	bl	80056f4 <arm_mat_mult_f32>
    arm_mat_mult_f32(&mat_temp3x3A, &mat_temp1x1, &mat_K);			//P*CT*inv(S)
 80019ec:	4a27      	ldr	r2, [pc, #156]	; (8001a8c <kalman_filter+0x130>)
 80019ee:	4924      	ldr	r1, [pc, #144]	; (8001a80 <kalman_filter+0x124>)
 80019f0:	4818      	ldr	r0, [pc, #96]	; (8001a54 <kalman_filter+0xf8>)
 80019f2:	f003 fe7f 	bl	80056f4 <arm_mat_mult_f32>

    //==> Update state estimate: x_hat = x_hat_minus + K * (z - C * x_hat_minus)
    arm_mat_mult_f32(&mat_C, &mat_x_hat_minus, &mat_temp1x1);		//C*X
 80019f6:	4a22      	ldr	r2, [pc, #136]	; (8001a80 <kalman_filter+0x124>)
 80019f8:	4913      	ldr	r1, [pc, #76]	; (8001a48 <kalman_filter+0xec>)
 80019fa:	481f      	ldr	r0, [pc, #124]	; (8001a78 <kalman_filter+0x11c>)
 80019fc:	f003 fe7a 	bl	80056f4 <arm_mat_mult_f32>
    //float32_t innovation = z - temp1x1;								//Z-C*X
    arm_mat_scale_f32(&mat_K, KF.z - KF.temp1x1, &mat_temp3x1);			//K*(Z-C*X)
 8001a00:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <kalman_filter+0x114>)
 8001a02:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8001a06:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <kalman_filter+0x114>)
 8001a08:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
 8001a0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a10:	491a      	ldr	r1, [pc, #104]	; (8001a7c <kalman_filter+0x120>)
 8001a12:	eeb0 0a67 	vmov.f32	s0, s15
 8001a16:	481d      	ldr	r0, [pc, #116]	; (8001a8c <kalman_filter+0x130>)
 8001a18:	f003 fee6 	bl	80057e8 <arm_mat_scale_f32>
    arm_mat_add_f32(&mat_x_hat_minus, &mat_temp3x1, &mat_x_hat);	//X - K*(Z-C*X) ========> X estimate
 8001a1c:	4a0b      	ldr	r2, [pc, #44]	; (8001a4c <kalman_filter+0xf0>)
 8001a1e:	4917      	ldr	r1, [pc, #92]	; (8001a7c <kalman_filter+0x120>)
 8001a20:	4809      	ldr	r0, [pc, #36]	; (8001a48 <kalman_filter+0xec>)
 8001a22:	f003 fa9d 	bl	8004f60 <arm_mat_add_f32>

    // Update covariance matrix: P = (I - K * C) * P_minus
    arm_mat_mult_f32(&mat_K, &mat_C, &mat_temp3x3B);				//K*C
 8001a26:	4a0c      	ldr	r2, [pc, #48]	; (8001a58 <kalman_filter+0xfc>)
 8001a28:	4913      	ldr	r1, [pc, #76]	; (8001a78 <kalman_filter+0x11c>)
 8001a2a:	4818      	ldr	r0, [pc, #96]	; (8001a8c <kalman_filter+0x130>)
 8001a2c:	f003 fe62 	bl	80056f4 <arm_mat_mult_f32>
    arm_mat_sub_f32(&eye, &mat_P_minus, &mat_temp3x3A);				//I - K*C
 8001a30:	4a08      	ldr	r2, [pc, #32]	; (8001a54 <kalman_filter+0xf8>)
 8001a32:	490b      	ldr	r1, [pc, #44]	; (8001a60 <kalman_filter+0x104>)
 8001a34:	4816      	ldr	r0, [pc, #88]	; (8001a90 <kalman_filter+0x134>)
 8001a36:	f003 ff0d 	bl	8005854 <arm_mat_sub_f32>
    arm_mat_mult_f32(&mat_temp3x3A, &mat_P_minus, &mat_P);			//(I - K*C)*P ===========> P estimate
 8001a3a:	4a08      	ldr	r2, [pc, #32]	; (8001a5c <kalman_filter+0x100>)
 8001a3c:	4908      	ldr	r1, [pc, #32]	; (8001a60 <kalman_filter+0x104>)
 8001a3e:	4805      	ldr	r0, [pc, #20]	; (8001a54 <kalman_filter+0xf8>)
 8001a40:	f003 fe58 	bl	80056f4 <arm_mat_mult_f32>
}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000678 	.word	0x20000678
 8001a4c:	20000670 	.word	0x20000670
 8001a50:	20000668 	.word	0x20000668
 8001a54:	200006d8 	.word	0x200006d8
 8001a58:	200006e0 	.word	0x200006e0
 8001a5c:	20000690 	.word	0x20000690
 8001a60:	20000698 	.word	0x20000698
 8001a64:	200006a8 	.word	0x200006a8
 8001a68:	200006b0 	.word	0x200006b0
 8001a6c:	200006a0 	.word	0x200006a0
 8001a70:	200004e8 	.word	0x200004e8
 8001a74:	200006f0 	.word	0x200006f0
 8001a78:	200006b8 	.word	0x200006b8
 8001a7c:	200006e8 	.word	0x200006e8
 8001a80:	200006f8 	.word	0x200006f8
 8001a84:	200006c8 	.word	0x200006c8
 8001a88:	200006c0 	.word	0x200006c0
 8001a8c:	200006d0 	.word	0x200006d0
 8001a90:	20000688 	.word	0x20000688

08001a94 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001a9c:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <modbus_1t5_Timeout+0x1c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	751a      	strb	r2, [r3, #20]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	2000030c 	.word	0x2000030c

08001ab4 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001abc:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <modbus_3t5_Timeout+0x1c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	755a      	strb	r2, [r3, #21]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	2000030c 	.word	0x2000030c

08001ad4 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <modbus_UART_Recived+0x60>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8001ae6:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <modbus_UART_Recived+0x60>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8001aee:	1c59      	adds	r1, r3, #1
 8001af0:	b289      	uxth	r1, r1
 8001af2:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 8001af6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001afa:	d210      	bcs.n	8001b1e <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001afc:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <modbus_UART_Recived+0x60>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68d8      	ldr	r0, [r3, #12]
 8001b02:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <modbus_UART_Recived+0x60>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <modbus_UART_Recived+0x60>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001b0e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001b12:	4413      	add	r3, r2
 8001b14:	3302      	adds	r3, #2
 8001b16:	2201      	movs	r2, #1
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f009 fc41 	bl	800b3a0 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001b1e:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <modbus_UART_Recived+0x60>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2200      	movs	r2, #0
 8001b28:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	2000030c 	.word	0x2000030c

08001b38 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001b42:	4a24      	ldr	r2, [pc, #144]	; (8001bd4 <Modbus_init+0x9c>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8001b48:	4b22      	ldr	r3, [pc, #136]	; (8001bd4 <Modbus_init+0x9c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8001b50:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <Modbus_init+0x9c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	4a20      	ldr	r2, [pc, #128]	; (8001bd8 <Modbus_init+0xa0>)
 8001b58:	2114      	movs	r1, #20
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f008 fe24 	bl	800a7a8 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001b60:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <Modbus_init+0x9c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	4a1d      	ldr	r2, [pc, #116]	; (8001bdc <Modbus_init+0xa4>)
 8001b68:	210e      	movs	r1, #14
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f008 fe1c 	bl	800a7a8 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8001b70:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <Modbus_init+0x9c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	4a1a      	ldr	r2, [pc, #104]	; (8001be0 <Modbus_init+0xa8>)
 8001b78:	2103      	movs	r1, #3
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f009 fb68 	bl	800b250 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001b80:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <Modbus_init+0x9c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68d8      	ldr	r0, [r3, #12]
 8001b86:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <Modbus_init+0x9c>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <Modbus_init+0x9c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001b92:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001b96:	4413      	add	r3, r2
 8001b98:	3302      	adds	r3, #2
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f009 fbff 	bl	800b3a0 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <Modbus_init+0x9c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d10c      	bne.n	8001bcc <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001bb2:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <Modbus_init+0x9c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f007 fe9f 	bl	80098fc <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001bbe:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <Modbus_init+0x9c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f008 f8de 	bl	8009d88 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	2000030c 	.word	0x2000030c
 8001bd8:	08001a95 	.word	0x08001a95
 8001bdc:	08001ab5 	.word	0x08001ab5
 8001be0:	08001ad5 	.word	0x08001ad5

08001be4 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001bf0:	23ff      	movs	r3, #255	; 0xff
 8001bf2:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001bf4:	23ff      	movs	r3, #255	; 0xff
 8001bf6:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001bf8:	e013      	b.n	8001c22 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	607a      	str	r2, [r7, #4]
 8001c00:	781a      	ldrb	r2, [r3, #0]
 8001c02:	7bbb      	ldrb	r3, [r7, #14]
 8001c04:	4053      	eors	r3, r2
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001c0a:	4a0f      	ldr	r2, [pc, #60]	; (8001c48 <CRC16+0x64>)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4413      	add	r3, r2
 8001c10:	781a      	ldrb	r2, [r3, #0]
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	4053      	eors	r3, r2
 8001c16:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001c18:	4a0c      	ldr	r2, [pc, #48]	; (8001c4c <CRC16+0x68>)
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001c22:	883b      	ldrh	r3, [r7, #0]
 8001c24:	1e5a      	subs	r2, r3, #1
 8001c26:	803a      	strh	r2, [r7, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1e6      	bne.n	8001bfa <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	021b      	lsls	r3, r3, #8
 8001c30:	b21a      	sxth	r2, r3
 8001c32:	7bbb      	ldrb	r3, [r7, #14]
 8001c34:	b21b      	sxth	r3, r3
 8001c36:	4313      	orrs	r3, r2
 8001c38:	b21b      	sxth	r3, r3
 8001c3a:	b29b      	uxth	r3, r3
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	20000124 	.word	0x20000124
 8001c4c:	20000024 	.word	0x20000024

08001c50 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8001c56:	4b81      	ldr	r3, [pc, #516]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	7e1b      	ldrb	r3, [r3, #24]
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d80a      	bhi.n	8001c78 <Modbus_Protocal_Worker+0x28>
 8001c62:	a201      	add	r2, pc, #4	; (adr r2, 8001c68 <Modbus_Protocal_Worker+0x18>)
 8001c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c68:	08001c83 	.word	0x08001c83
 8001c6c:	08001e23 	.word	0x08001e23
 8001c70:	08001d0f 	.word	0x08001d0f
 8001c74:	08001d35 	.word	0x08001d35
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001c78:	4b78      	ldr	r3, [pc, #480]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	761a      	strb	r2, [r3, #24]
		break;
 8001c80:	e0e8      	b.n	8001e54 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8001c82:	4b76      	ldr	r3, [pc, #472]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8001c8e:	f000 f9dd 	bl	800204c <Modbus_Emission>
 8001c92:	e01c      	b.n	8001cce <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8001c94:	4b71      	ldr	r3, [pc, #452]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	7d9b      	ldrb	r3, [r3, #22]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d017      	beq.n	8001cce <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001c9e:	4b6f      	ldr	r3, [pc, #444]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001ca6:	4b6d      	ldr	r3, [pc, #436]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2200      	movs	r2, #0
 8001cac:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8001cae:	4b6b      	ldr	r3, [pc, #428]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b68      	ldr	r3, [pc, #416]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f042 0201 	orr.w	r2, r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8001cc6:	4b65      	ldr	r3, [pc, #404]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2203      	movs	r2, #3
 8001ccc:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001cce:	4b63      	ldr	r3, [pc, #396]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b20      	cmp	r3, #32
 8001cdc:	f040 80b3 	bne.w	8001e46 <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001ce0:	4b5e      	ldr	r3, [pc, #376]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001cea:	4b5c      	ldr	r3, [pc, #368]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68d8      	ldr	r0, [r3, #12]
 8001cf0:	4b5a      	ldr	r3, [pc, #360]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b59      	ldr	r3, [pc, #356]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001cfc:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001d00:	4413      	add	r3, r2
 8001d02:	3302      	adds	r3, #2
 8001d04:	2201      	movs	r2, #1
 8001d06:	4619      	mov	r1, r3
 8001d08:	f009 fb4a 	bl	800b3a0 <HAL_UART_Receive_IT>
		}
		break;
 8001d0c:	e09b      	b.n	8001e46 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001d0e:	4b53      	ldr	r3, [pc, #332]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	7d1b      	ldrb	r3, [r3, #20]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 8098 	beq.w	8001e4a <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8001d1a:	4b50      	ldr	r3, [pc, #320]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001d22:	4b4e      	ldr	r3, [pc, #312]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	22fe      	movs	r2, #254	; 0xfe
 8001d28:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001d2a:	4b4c      	ldr	r3, [pc, #304]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2204      	movs	r2, #4
 8001d30:	761a      	strb	r2, [r3, #24]
		}
		break;
 8001d32:	e08a      	b.n	8001e4a <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8001d34:	4b49      	ldr	r3, [pc, #292]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	7d9b      	ldrb	r3, [r3, #22]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d009      	beq.n	8001d52 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 8001d3e:	4b47      	ldr	r3, [pc, #284]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d103      	bne.n	8001d52 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001d4a:	4b44      	ldr	r3, [pc, #272]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	22ff      	movs	r2, #255	; 0xff
 8001d50:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001d52:	4b42      	ldr	r3, [pc, #264]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001d5a:	f113 0f02 	cmn.w	r3, #2
 8001d5e:	d150      	bne.n	8001e02 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001d60:	4b3e      	ldr	r3, [pc, #248]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2200      	movs	r2, #0
 8001d66:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001d68:	4b3c      	ldr	r3, [pc, #240]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f203 2272 	addw	r2, r3, #626	; 0x272
 8001d70:	4b3a      	ldr	r3, [pc, #232]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001d78:	3b02      	subs	r3, #2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	f7ff ff31 	bl	8001be4 <CRC16>
 8001d82:	4603      	mov	r3, r0
 8001d84:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001d86:	793a      	ldrb	r2, [r7, #4]
 8001d88:	4b34      	ldr	r3, [pc, #208]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d8a:	6819      	ldr	r1, [r3, #0]
 8001d8c:	4b33      	ldr	r3, [pc, #204]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001d94:	3b02      	subs	r3, #2
 8001d96:	440b      	add	r3, r1
 8001d98:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d10c      	bne.n	8001dba <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001da0:	797a      	ldrb	r2, [r7, #5]
 8001da2:	4b2e      	ldr	r3, [pc, #184]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001da4:	6819      	ldr	r1, [r3, #0]
 8001da6:	4b2d      	ldr	r3, [pc, #180]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001dae:	3b01      	subs	r3, #1
 8001db0:	440b      	add	r3, r1
 8001db2:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d004      	beq.n	8001dc4 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001dba:	4b28      	ldr	r3, [pc, #160]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	22ff      	movs	r2, #255	; 0xff
 8001dc0:	75da      	strb	r2, [r3, #23]
				break;
 8001dc2:	e047      	b.n	8001e54 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001dc4:	4b25      	ldr	r3, [pc, #148]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001dcc:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d113      	bne.n	8001dfe <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001dd6:	4b21      	ldr	r3, [pc, #132]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001dde:	4b1f      	ldr	r3, [pc, #124]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 8001de6:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001de8:	4b1c      	ldr	r3, [pc, #112]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001df0:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001df2:	461a      	mov	r2, r3
 8001df4:	f00a fc96 	bl	800c724 <memcpy>

			//execute command
			Modbus_frame_response();
 8001df8:	f000 f910 	bl	800201c <Modbus_frame_response>
 8001dfc:	e001      	b.n	8001e02 <Modbus_Protocal_Worker+0x1b2>
				break;
 8001dfe:	bf00      	nop
					}
		break;


	}
}
 8001e00:	e028      	b.n	8001e54 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8001e02:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	7d5b      	ldrb	r3, [r3, #21]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d020      	beq.n	8001e4e <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001e0c:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2201      	movs	r2, #1
 8001e12:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001e14:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f009 fb6e 	bl	800b4fc <HAL_UART_AbortReceive>
		break;
 8001e20:	e015      	b.n	8001e4e <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b20      	cmp	r3, #32
 8001e30:	d10f      	bne.n	8001e52 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8001e3c:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2201      	movs	r2, #1
 8001e42:	761a      	strb	r2, [r3, #24]
		break;
 8001e44:	e005      	b.n	8001e52 <Modbus_Protocal_Worker+0x202>
		break;
 8001e46:	bf00      	nop
 8001e48:	e004      	b.n	8001e54 <Modbus_Protocal_Worker+0x204>
		break;
 8001e4a:	bf00      	nop
 8001e4c:	e002      	b.n	8001e54 <Modbus_Protocal_Worker+0x204>
		break;
 8001e4e:	bf00      	nop
 8001e50:	e000      	b.n	8001e54 <Modbus_Protocal_Worker+0x204>
		break;
 8001e52:	bf00      	nop
}
 8001e54:	bf00      	nop
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	2000030c 	.word	0x2000030c

08001e60 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001e66:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <modbusWrite1Register+0x80>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	7e9b      	ldrb	r3, [r3, #26]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <modbusWrite1Register+0x80>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	7edb      	ldrb	r3, [r3, #27]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8001e7e:	88fa      	ldrh	r2, [r7, #6]
 8001e80:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <modbusWrite1Register+0x80>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d903      	bls.n	8001e92 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001e8a:	2002      	movs	r0, #2
 8001e8c:	f000 f8a4 	bl	8001fd8 <ModbusErrorReply>
			 return;
 8001e90:	e023      	b.n	8001eda <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001e92:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <modbusWrite1Register+0x80>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <modbusWrite1Register+0x80>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6859      	ldr	r1, [r3, #4]
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	440b      	add	r3, r1
 8001ea2:	7f12      	ldrb	r2, [r2, #28]
 8001ea4:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <modbusWrite1Register+0x80>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <modbusWrite1Register+0x80>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6859      	ldr	r1, [r3, #4]
 8001eb0:	88fb      	ldrh	r3, [r7, #6]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	440b      	add	r3, r1
 8001eb6:	7f52      	ldrb	r2, [r2, #29]
 8001eb8:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001eba:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <modbusWrite1Register+0x80>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 8001ec2:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <modbusWrite1Register+0x80>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8001ec8:	2208      	movs	r2, #8
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f00a fc2a 	bl	800c724 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001ed0:	4b03      	ldr	r3, [pc, #12]	; (8001ee0 <modbusWrite1Register+0x80>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2205      	movs	r2, #5
 8001ed6:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	2000030c 	.word	0x2000030c

08001ee4 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001ee4:	b590      	push	{r4, r7, lr}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001eea:	4b3a      	ldr	r3, [pc, #232]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	7f1b      	ldrb	r3, [r3, #28]
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	021b      	lsls	r3, r3, #8
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	4b37      	ldr	r3, [pc, #220]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	7f5b      	ldrb	r3, [r3, #29]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	4413      	add	r3, r2
 8001f00:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001f02:	4b34      	ldr	r3, [pc, #208]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	7e9b      	ldrb	r3, [r3, #26]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	021b      	lsls	r3, r3, #8
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	4b31      	ldr	r3, [pc, #196]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	7edb      	ldrb	r3, [r3, #27]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	4413      	add	r3, r2
 8001f18:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001f1a:	88fb      	ldrh	r3, [r7, #6]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <modbusRead1Register+0x42>
 8001f20:	88fb      	ldrh	r3, [r7, #6]
 8001f22:	2b7d      	cmp	r3, #125	; 0x7d
 8001f24:	d903      	bls.n	8001f2e <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001f26:	2003      	movs	r0, #3
 8001f28:	f000 f856 	bl	8001fd8 <ModbusErrorReply>
		 return;
 8001f2c:	e04e      	b.n	8001fcc <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8001f2e:	88ba      	ldrh	r2, [r7, #4]
 8001f30:	4b28      	ldr	r3, [pc, #160]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d808      	bhi.n	8001f4c <modbusRead1Register+0x68>
 8001f3a:	88ba      	ldrh	r2, [r7, #4]
 8001f3c:	88fb      	ldrh	r3, [r7, #6]
 8001f3e:	4413      	add	r3, r2
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d903      	bls.n	8001f54 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001f4c:	2002      	movs	r0, #2
 8001f4e:	f000 f843 	bl	8001fd8 <ModbusErrorReply>
		 return;
 8001f52:	e03b      	b.n	8001fcc <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001f54:	4b1f      	ldr	r3, [pc, #124]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2203      	movs	r2, #3
 8001f5a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001f5e:	88fb      	ldrh	r3, [r7, #6]
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4b1c      	ldr	r3, [pc, #112]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	0052      	lsls	r2, r2, #1
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001f6e:	2400      	movs	r4, #0
 8001f70:	e020      	b.n	8001fb4 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001f72:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	88bb      	ldrh	r3, [r7, #4]
 8001f7a:	4423      	add	r3, r4
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	18d1      	adds	r1, r2, r3
 8001f80:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	1c63      	adds	r3, r4, #1
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	7849      	ldrb	r1, [r1, #1]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	460a      	mov	r2, r1
 8001f8e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001f92:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	88bb      	ldrh	r3, [r7, #4]
 8001f9a:	4423      	add	r3, r4
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	18d1      	adds	r1, r2, r3
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	0063      	lsls	r3, r4, #1
 8001fa6:	3303      	adds	r3, #3
 8001fa8:	7809      	ldrb	r1, [r1, #0]
 8001faa:	4413      	add	r3, r2
 8001fac:	460a      	mov	r2, r1
 8001fae:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8001fb2:	3401      	adds	r4, #1
 8001fb4:	88fb      	ldrh	r3, [r7, #6]
 8001fb6:	429c      	cmp	r4, r3
 8001fb8:	dbdb      	blt.n	8001f72 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001fba:	88fb      	ldrh	r3, [r7, #6]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	0052      	lsls	r2, r2, #1
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd90      	pop	{r4, r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	2000030c 	.word	0x2000030c

08001fd8 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <ModbusErrorReply+0x40>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	7e5a      	ldrb	r2, [r3, #25]
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <ModbusErrorReply+0x40>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001ff6:	4b08      	ldr	r3, [pc, #32]	; (8002018 <ModbusErrorReply+0x40>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	79fa      	ldrb	r2, [r7, #7]
 8001ffc:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 8002000:	4b05      	ldr	r3, [pc, #20]	; (8002018 <ModbusErrorReply+0x40>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2202      	movs	r2, #2
 8002006:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	2000030c 	.word	0x2000030c

0800201c <Modbus_frame_response>:

void Modbus_frame_response()
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8002020:	4b09      	ldr	r3, [pc, #36]	; (8002048 <Modbus_frame_response+0x2c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	7e5b      	ldrb	r3, [r3, #25]
 8002026:	2b03      	cmp	r3, #3
 8002028:	d004      	beq.n	8002034 <Modbus_frame_response+0x18>
 800202a:	2b06      	cmp	r3, #6
 800202c:	d105      	bne.n	800203a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800202e:	f7ff ff17 	bl	8001e60 <modbusWrite1Register>
		break;
 8002032:	e006      	b.n	8002042 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8002034:	f7ff ff56 	bl	8001ee4 <modbusRead1Register>
		break;
 8002038:	e003      	b.n	8002042 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800203a:	2001      	movs	r0, #1
 800203c:	f7ff ffcc 	bl	8001fd8 <ModbusErrorReply>
		break;
 8002040:	bf00      	nop

	}
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	2000030c 	.word	0x2000030c

0800204c <Modbus_Emission>:

void Modbus_Emission()
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002052:	4b3d      	ldr	r3, [pc, #244]	; (8002148 <Modbus_Emission+0xfc>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b20      	cmp	r3, #32
 8002060:	d15e      	bne.n	8002120 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8002062:	4b39      	ldr	r3, [pc, #228]	; (8002148 <Modbus_Emission+0xfc>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	4b38      	ldr	r3, [pc, #224]	; (8002148 <Modbus_Emission+0xfc>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	7812      	ldrb	r2, [r2, #0]
 800206c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8002070:	4b35      	ldr	r3, [pc, #212]	; (8002148 <Modbus_Emission+0xfc>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8002078:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 800207a:	4b33      	ldr	r3, [pc, #204]	; (8002148 <Modbus_Emission+0xfc>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 8002082:	4b31      	ldr	r3, [pc, #196]	; (8002148 <Modbus_Emission+0xfc>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 800208a:	461a      	mov	r2, r3
 800208c:	f00a fb4a 	bl	800c724 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8002090:	4b2d      	ldr	r3, [pc, #180]	; (8002148 <Modbus_Emission+0xfc>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8002098:	b29a      	uxth	r2, r3
 800209a:	4b2b      	ldr	r3, [pc, #172]	; (8002148 <Modbus_Emission+0xfc>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	3203      	adds	r2, #3
 80020a0:	b292      	uxth	r2, r2
 80020a2:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80020a6:	4b28      	ldr	r3, [pc, #160]	; (8002148 <Modbus_Emission+0xfc>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80020ae:	4b26      	ldr	r3, [pc, #152]	; (8002148 <Modbus_Emission+0xfc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80020b6:	3b02      	subs	r3, #2
 80020b8:	4619      	mov	r1, r3
 80020ba:	4610      	mov	r0, r2
 80020bc:	f7ff fd92 	bl	8001be4 <CRC16>
 80020c0:	4603      	mov	r3, r0
 80020c2:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80020c4:	4b20      	ldr	r3, [pc, #128]	; (8002148 <Modbus_Emission+0xfc>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4b1f      	ldr	r3, [pc, #124]	; (8002148 <Modbus_Emission+0xfc>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80020d0:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80020d2:	7939      	ldrb	r1, [r7, #4]
 80020d4:	4413      	add	r3, r2
 80020d6:	460a      	mov	r2, r1
 80020d8:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80020dc:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <Modbus_Emission+0xfc>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	4b19      	ldr	r3, [pc, #100]	; (8002148 <Modbus_Emission+0xfc>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80020e8:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80020ea:	7979      	ldrb	r1, [r7, #5]
 80020ec:	4413      	add	r3, r2
 80020ee:	460a      	mov	r2, r1
 80020f0:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80020f4:	4b14      	ldr	r3, [pc, #80]	; (8002148 <Modbus_Emission+0xfc>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b20      	cmp	r3, #32
 8002102:	d10d      	bne.n	8002120 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8002104:	4b10      	ldr	r3, [pc, #64]	; (8002148 <Modbus_Emission+0xfc>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 800210a:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <Modbus_Emission+0xfc>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8002112:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <Modbus_Emission+0xfc>)
 8002114:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8002116:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800211a:	461a      	mov	r2, r3
 800211c:	f009 f970 	bl	800b400 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8002120:	4b09      	ldr	r3, [pc, #36]	; (8002148 <Modbus_Emission+0xfc>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2200      	movs	r2, #0
 8002126:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8002128:	4b07      	ldr	r3, [pc, #28]	; (8002148 <Modbus_Emission+0xfc>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2200      	movs	r2, #0
 800212e:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <Modbus_Emission+0xfc>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2200      	movs	r2, #0
 8002136:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8002138:	4b03      	ldr	r3, [pc, #12]	; (8002148 <Modbus_Emission+0xfc>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2202      	movs	r2, #2
 800213e:	761a      	strb	r2, [r3, #24]
}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	2000030c 	.word	0x2000030c

0800214c <PIDSetup>:
 */

#include "PIDController.h"

void PIDSetup(PID* temp,float32_t Kp, float32_t Ki, float32_t Kd, float32_t tolerance)
{
 800214c:	b480      	push	{r7}
 800214e:	b087      	sub	sp, #28
 8002150:	af00      	add	r7, sp, #0
 8002152:	6178      	str	r0, [r7, #20]
 8002154:	ed87 0a04 	vstr	s0, [r7, #16]
 8002158:	edc7 0a03 	vstr	s1, [r7, #12]
 800215c:	ed87 1a02 	vstr	s2, [r7, #8]
 8002160:	edc7 1a01 	vstr	s3, [r7, #4]
	temp->Kp = Kp;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	601a      	str	r2, [r3, #0]
	temp->Ki = Ki;
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	605a      	str	r2, [r3, #4]
	temp->Kd = Kd;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	609a      	str	r2, [r3, #8]
	temp->tolerance = tolerance;
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	629a      	str	r2, [r3, #40]	; 0x28
	temp->U = 0;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	2200      	movs	r2, #0
 8002180:	60da      	str	r2, [r3, #12]
	temp->Delta_U = 0;
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	2200      	movs	r2, #0
 8002186:	611a      	str	r2, [r3, #16]
	temp->U_minus = 0;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	2200      	movs	r2, #0
 800218c:	615a      	str	r2, [r3, #20]
	temp->Error = 0;
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	2200      	movs	r2, #0
 8002192:	619a      	str	r2, [r3, #24]
	temp->Error_minus = 0;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	2200      	movs	r2, #0
 8002198:	61da      	str	r2, [r3, #28]
	temp->Error_minus2 = 0;
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	2200      	movs	r2, #0
 800219e:	621a      	str	r2, [r3, #32]
}
 80021a0:	bf00      	nop
 80021a2:	371c      	adds	r7, #28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <PIDRun>:

void PIDRun(PID* temp, float32_t Feedback, float32_t Ref)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80021b8:	edc7 0a01 	vstr	s1, [r7, #4]
	temp->Error = Ref - Feedback;
 80021bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80021c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80021c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021cc:	ee17 2a90 	vmov	r2, s15
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	619a      	str	r2, [r3, #24]
	if(temp->Error > 0)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	dd04      	ble.n	80021e6 <PIDRun+0x3a>
	{
		temp->MotorDir = 0;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80021e4:	e007      	b.n	80021f6 <PIDRun+0x4a>
	}
	else if (temp->Error < 0)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	da03      	bge.n	80021f6 <PIDRun+0x4a>
	{
		temp->MotorDir = 1;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
	//U Update
	temp->Delta_U = (temp->Kp + temp->Ki + temp->Kd) * temp->Error
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	ed93 7a00 	vldr	s14, [r3]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8002202:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	edd3 7a02 	vldr	s15, [r3, #8]
 800220c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	ee07 3a90 	vmov	s15, r3
 8002218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800221c:	ee27 7a27 	vmul.f32	s14, s14, s15
			  - (temp->Kp + 2*temp->Kd) * temp->Error_minus
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	edd3 6a00 	vldr	s13, [r3]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	edd3 7a02 	vldr	s15, [r3, #8]
 800222c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002230:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	ee07 3a90 	vmov	s15, r3
 800223c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002240:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002244:	ee37 7a67 	vsub.f32	s14, s14, s15
			  + temp->Kd * temp->Error_minus2;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	edd3 6a02 	vldr	s13, [r3, #8]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	ee07 3a90 	vmov	s15, r3
 8002256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800225a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800225e:	ee77 7a27 	vadd.f32	s15, s14, s15
	temp->Delta_U = (temp->Kp + temp->Ki + temp->Kd) * temp->Error
 8002262:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002266:	ee17 2a90 	vmov	r2, s15
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	611a      	str	r2, [r3, #16]
	temp->U = temp->Delta_U + temp->U_minus;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	691a      	ldr	r2, [r3, #16]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	441a      	add	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	60da      	str	r2, [r3, #12]
	temp->U_minus = temp->U;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	615a      	str	r2, [r3, #20]
	//Error Update
	temp->Error_minus2 = temp->Error_minus;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	69da      	ldr	r2, [r3, #28]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	621a      	str	r2, [r3, #32]
	temp->Error_minus = temp->Error;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	699a      	ldr	r2, [r3, #24]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	61da      	str	r2, [r3, #28]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <CascadeLoop>:

void CascadeLoop(PID* Pos, PID* Velo, float32_t xPosFeedback, float32_t VeloFeedback, QuinticTraj* TrajReference, float32_t tolerance)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6178      	str	r0, [r7, #20]
 80022a8:	6139      	str	r1, [r7, #16]
 80022aa:	ed87 0a03 	vstr	s0, [r7, #12]
 80022ae:	edc7 0a02 	vstr	s1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
 80022b4:	ed87 1a00 	vstr	s2, [r7]
	int32_t PosFeedback = __HAL_TIM_GET_COUNTER(&htim2);
 80022b8:	4b38      	ldr	r3, [pc, #224]	; (800239c <CascadeLoop+0xfc>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	61fb      	str	r3, [r7, #28]
	if(TrajReference->time >= TrajReference->TotalTime)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80022cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d4:	db23      	blt.n	800231e <CascadeLoop+0x7e>
	{
		//int32_t CurrentError = TrajReference->current_pos - PosFeedback;
		if((Pos->Error == Pos->Error_minus)&&(fabs(TrajReference->final_pos - __HAL_TIM_GET_COUNTER(&htim2)) <= 13))
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	699a      	ldr	r2, [r3, #24]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d145      	bne.n	800236e <CascadeLoop+0xce>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	461a      	mov	r2, r3
 80022e8:	4b2c      	ldr	r3, [pc, #176]	; (800239c <CascadeLoop+0xfc>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b0d      	cmp	r3, #13
 80022f2:	d83c      	bhi.n	800236e <CascadeLoop+0xce>
		{
				Pos->IsSteady = 1;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				Velo->U = 0;
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	2200      	movs	r2, #0
 8002300:	60da      	str	r2, [r3, #12]
				Pos->ESS = TrajReference->final_pos - __HAL_TIM_GET_COUNTER(&htim2);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	b2da      	uxtb	r2, r3
 8002308:	4b24      	ldr	r3, [pc, #144]	; (800239c <CascadeLoop+0xfc>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	b2db      	uxtb	r3, r3
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	b25a      	sxtb	r2, r3
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800231c:	e027      	b.n	800236e <CascadeLoop+0xce>
		}
	}
	else
	{
		Pos->IsSteady = 0;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		PIDRun(Pos, PosFeedback, TrajReference->current_pos);
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	ee07 3a90 	vmov	s15, r3
 800232c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	ee07 3a10 	vmov	s14, r3
 8002338:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800233c:	eef0 0a47 	vmov.f32	s1, s14
 8002340:	eeb0 0a67 	vmov.f32	s0, s15
 8002344:	6978      	ldr	r0, [r7, #20]
 8002346:	f7ff ff31 	bl	80021ac <PIDRun>
		float32_t veloRef = Pos->U + TrajReference->current_velo;
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	4413      	add	r3, r2
 8002354:	ee07 3a90 	vmov	s15, r3
 8002358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800235c:	edc7 7a06 	vstr	s15, [r7, #24]
		PIDRun(Velo, VeloFeedback, veloRef);
 8002360:	edd7 0a06 	vldr	s1, [r7, #24]
 8002364:	ed97 0a02 	vldr	s0, [r7, #8]
 8002368:	6938      	ldr	r0, [r7, #16]
 800236a:	f7ff ff1f 	bl	80021ac <PIDRun>
	}
	if(Velo->U > 40000)
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002376:	4293      	cmp	r3, r2
 8002378:	dd04      	ble.n	8002384 <CascadeLoop+0xe4>
	{
		Velo->U = 40000;
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002380:	60da      	str	r2, [r3, #12]
	{
		Velo->U = -40000;
	}


}
 8002382:	e007      	b.n	8002394 <CascadeLoop+0xf4>
	else if (Velo->U < -40000)
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4a05      	ldr	r2, [pc, #20]	; (80023a0 <CascadeLoop+0x100>)
 800238a:	4293      	cmp	r3, r2
 800238c:	da02      	bge.n	8002394 <CascadeLoop+0xf4>
		Velo->U = -40000;
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4a03      	ldr	r2, [pc, #12]	; (80023a0 <CascadeLoop+0x100>)
 8002392:	60da      	str	r2, [r3, #12]
}
 8002394:	bf00      	nop
 8002396:	3720      	adds	r7, #32
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000e60 	.word	0x20000e60
 80023a0:	ffff63c0 	.word	0xffff63c0

080023a4 <QuinticSetup>:
 *      Author: tanawatp
 */
#include "QuinticTrajectory.h"

void QuinticSetup(QuinticTraj* temp, float32_t vmax, float32_t amax)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	ed87 0a02 	vstr	s0, [r7, #8]
 80023b0:	edc7 0a01 	vstr	s1, [r7, #4]
	temp->v_max = vmax;
 80023b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80023b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023bc:	ee17 2a90 	vmov	r2, s15
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	619a      	str	r2, [r3, #24]
	temp->a_max = amax;
 80023c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80023c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023cc:	ee17 2a90 	vmov	r2, s15
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	61da      	str	r2, [r3, #28]
	temp->State = Ready;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	//temp->final_pos = 300;
}
 80023dc:	bf00      	nop
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <QuinticGenerator>:
void QuinticGenerator(QuinticTraj* temp,int8_t ess)
{
 80023e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	460b      	mov	r3, r1
 80023f4:	70fb      	strb	r3, [r7, #3]
	//temp->final_pos = temp->final_pos * 8192/120;
	temp->displacement = temp->final_pos - temp->start_pos;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	1ad2      	subs	r2, r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	609a      	str	r2, [r3, #8]
	if(temp->displacement<0)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	da04      	bge.n	8002416 <QuinticGenerator+0x2e>
	{
		temp->Dir = 1;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2020 	strb.w	r2, [r3, #32]
 8002414:	e007      	b.n	8002426 <QuinticGenerator+0x3e>
	}
	else if (temp->displacement>0)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2b00      	cmp	r3, #0
 800241c:	dd03      	ble.n	8002426 <QuinticGenerator+0x3e>
	{
		temp->Dir = 0;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2020 	strb.w	r2, [r3, #32]
	}
	temp->timeAcc = 0.5*sqrtf(23.094*fabs(temp->displacement)/temp->a_max);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	4618      	mov	r0, r3
 800242c:	f7fe f826 	bl	800047c <__aeabi_i2d>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4690      	mov	r8, r2
 8002436:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800243a:	a388      	add	r3, pc, #544	; (adr r3, 800265c <QuinticGenerator+0x274>)
 800243c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002440:	4640      	mov	r0, r8
 8002442:	4649      	mov	r1, r9
 8002444:	f7fe f884 	bl	8000550 <__aeabi_dmul>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	4690      	mov	r8, r2
 800244e:	4699      	mov	r9, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe f811 	bl	800047c <__aeabi_i2d>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4640      	mov	r0, r8
 8002460:	4649      	mov	r1, r9
 8002462:	f7fe f99f 	bl	80007a4 <__aeabi_ddiv>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	4610      	mov	r0, r2
 800246c:	4619      	mov	r1, r3
 800246e:	f7fe fb67 	bl	8000b40 <__aeabi_d2f>
 8002472:	4603      	mov	r3, r0
 8002474:	ee00 3a10 	vmov	s0, r3
 8002478:	f00a fb0a 	bl	800ca90 <sqrtf>
 800247c:	ee10 3a10 	vmov	r3, s0
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe f80d 	bl	80004a0 <__aeabi_f2d>
 8002486:	f04f 0200 	mov.w	r2, #0
 800248a:	4b6f      	ldr	r3, [pc, #444]	; (8002648 <QuinticGenerator+0x260>)
 800248c:	f7fe f860 	bl	8000550 <__aeabi_dmul>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4610      	mov	r0, r2
 8002496:	4619      	mov	r1, r3
 8002498:	f7fe fb52 	bl	8000b40 <__aeabi_d2f>
 800249c:	4602      	mov	r2, r0
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	645a      	str	r2, [r3, #68]	; 0x44
	temp->timeVelo = 1.875*fabs(temp->displacement)/temp->v_max;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fd ffe8 	bl	800047c <__aeabi_i2d>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4614      	mov	r4, r2
 80024b2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	4b64      	ldr	r3, [pc, #400]	; (800264c <QuinticGenerator+0x264>)
 80024bc:	4620      	mov	r0, r4
 80024be:	4629      	mov	r1, r5
 80024c0:	f7fe f846 	bl	8000550 <__aeabi_dmul>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4614      	mov	r4, r2
 80024ca:	461d      	mov	r5, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fd ffd3 	bl	800047c <__aeabi_i2d>
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	4620      	mov	r0, r4
 80024dc:	4629      	mov	r1, r5
 80024de:	f7fe f961 	bl	80007a4 <__aeabi_ddiv>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	4610      	mov	r0, r2
 80024e8:	4619      	mov	r1, r3
 80024ea:	f7fe fb29 	bl	8000b40 <__aeabi_d2f>
 80024ee:	4602      	mov	r2, r0
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	649a      	str	r2, [r3, #72]	; 0x48
	temp->TotalTime = MAX(temp->timeAcc,temp->timeVelo);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002500:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002508:	dd02      	ble.n	8002510 <QuinticGenerator+0x128>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	e001      	b.n	8002514 <QuinticGenerator+0x12c>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	63d3      	str	r3, [r2, #60]	; 0x3c
	temp->coeff[0] = temp->start_pos;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	ee07 3a90 	vmov	s15, r3
 8002520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	temp->coeff[1] = 0;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	629a      	str	r2, [r3, #40]	; 0x28
	temp->coeff[2] = 0;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	62da      	str	r2, [r3, #44]	; 0x2c
	temp->coeff[3] = 10.0*temp->displacement/powf(temp->TotalTime,3);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	4618      	mov	r0, r3
 8002540:	f7fd ff9c 	bl	800047c <__aeabi_i2d>
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	4b41      	ldr	r3, [pc, #260]	; (8002650 <QuinticGenerator+0x268>)
 800254a:	f7fe f801 	bl	8000550 <__aeabi_dmul>
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	4614      	mov	r4, r2
 8002554:	461d      	mov	r5, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800255c:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8002560:	eeb0 0a67 	vmov.f32	s0, s15
 8002564:	f00a fa3c 	bl	800c9e0 <powf>
 8002568:	ee10 3a10 	vmov	r3, s0
 800256c:	4618      	mov	r0, r3
 800256e:	f7fd ff97 	bl	80004a0 <__aeabi_f2d>
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	4620      	mov	r0, r4
 8002578:	4629      	mov	r1, r5
 800257a:	f7fe f913 	bl	80007a4 <__aeabi_ddiv>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	4610      	mov	r0, r2
 8002584:	4619      	mov	r1, r3
 8002586:	f7fe fadb 	bl	8000b40 <__aeabi_d2f>
 800258a:	4602      	mov	r2, r0
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	631a      	str	r2, [r3, #48]	; 0x30
	temp->coeff[4] = -15.0*temp->displacement/powf(temp->TotalTime,4);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	4618      	mov	r0, r3
 8002596:	f7fd ff71 	bl	800047c <__aeabi_i2d>
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	4b2d      	ldr	r3, [pc, #180]	; (8002654 <QuinticGenerator+0x26c>)
 80025a0:	f7fd ffd6 	bl	8000550 <__aeabi_dmul>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4614      	mov	r4, r2
 80025aa:	461d      	mov	r5, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80025b2:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80025b6:	eeb0 0a67 	vmov.f32	s0, s15
 80025ba:	f00a fa11 	bl	800c9e0 <powf>
 80025be:	ee10 3a10 	vmov	r3, s0
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fd ff6c 	bl	80004a0 <__aeabi_f2d>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4620      	mov	r0, r4
 80025ce:	4629      	mov	r1, r5
 80025d0:	f7fe f8e8 	bl	80007a4 <__aeabi_ddiv>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4610      	mov	r0, r2
 80025da:	4619      	mov	r1, r3
 80025dc:	f7fe fab0 	bl	8000b40 <__aeabi_d2f>
 80025e0:	4602      	mov	r2, r0
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	635a      	str	r2, [r3, #52]	; 0x34
	temp->coeff[5] = 6.0*temp->displacement/powf(temp->TotalTime,5);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fd ff46 	bl	800047c <__aeabi_i2d>
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	4b18      	ldr	r3, [pc, #96]	; (8002658 <QuinticGenerator+0x270>)
 80025f6:	f7fd ffab 	bl	8000550 <__aeabi_dmul>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4614      	mov	r4, r2
 8002600:	461d      	mov	r5, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002608:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 800260c:	eeb0 0a67 	vmov.f32	s0, s15
 8002610:	f00a f9e6 	bl	800c9e0 <powf>
 8002614:	ee10 3a10 	vmov	r3, s0
 8002618:	4618      	mov	r0, r3
 800261a:	f7fd ff41 	bl	80004a0 <__aeabi_f2d>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	4620      	mov	r0, r4
 8002624:	4629      	mov	r1, r5
 8002626:	f7fe f8bd 	bl	80007a4 <__aeabi_ddiv>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	4610      	mov	r0, r2
 8002630:	4619      	mov	r1, r3
 8002632:	f7fe fa85 	bl	8000b40 <__aeabi_d2f>
 8002636:	4602      	mov	r2, r0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800263c:	bf00      	nop
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002646:	bf00      	nop
 8002648:	3fe00000 	.word	0x3fe00000
 800264c:	3ffe0000 	.word	0x3ffe0000
 8002650:	40240000 	.word	0x40240000
 8002654:	c02e0000 	.word	0xc02e0000
 8002658:	40180000 	.word	0x40180000
 800265c:	624dd2f2 	.word	0x624dd2f2
 8002660:	40371810 	.word	0x40371810

08002664 <QuinticEvaluator>:
void QuinticEvaluator(QuinticTraj* temp)
{
 8002664:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002668:	ed2d 8b02 	vpush	{d8}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
	float32_t time = temp->time;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	60fb      	str	r3, [r7, #12]
	temp->current_pos = temp->coeff[0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
						+ temp->coeff[1]*time
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002684:	edd7 7a03 	vldr	s15, [r7, #12]
 8002688:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800268c:	ee37 8a27 	vadd.f32	s16, s14, s15
						+ temp->coeff[2]*powf(time,2)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	edd3 8a0b 	vldr	s17, [r3, #44]	; 0x2c
 8002696:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800269a:	ed97 0a03 	vldr	s0, [r7, #12]
 800269e:	f00a f99f 	bl	800c9e0 <powf>
 80026a2:	eef0 7a40 	vmov.f32	s15, s0
 80026a6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80026aa:	ee38 8a27 	vadd.f32	s16, s16, s15
						+ temp->coeff[3]*powf(time,3)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	edd3 8a0c 	vldr	s17, [r3, #48]	; 0x30
 80026b4:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80026b8:	ed97 0a03 	vldr	s0, [r7, #12]
 80026bc:	f00a f990 	bl	800c9e0 <powf>
 80026c0:	eef0 7a40 	vmov.f32	s15, s0
 80026c4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80026c8:	ee38 8a27 	vadd.f32	s16, s16, s15
						+ temp->coeff[4]*powf(time,4)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	edd3 8a0d 	vldr	s17, [r3, #52]	; 0x34
 80026d2:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80026d6:	ed97 0a03 	vldr	s0, [r7, #12]
 80026da:	f00a f981 	bl	800c9e0 <powf>
 80026de:	eef0 7a40 	vmov.f32	s15, s0
 80026e2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80026e6:	ee38 8a27 	vadd.f32	s16, s16, s15
						+ temp->coeff[5]*powf(time,5);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	edd3 8a0e 	vldr	s17, [r3, #56]	; 0x38
 80026f0:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80026f4:	ed97 0a03 	vldr	s0, [r7, #12]
 80026f8:	f00a f972 	bl	800c9e0 <powf>
 80026fc:	eef0 7a40 	vmov.f32	s15, s0
 8002700:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8002704:	ee78 7a27 	vadd.f32	s15, s16, s15
	temp->current_pos = temp->coeff[0]
 8002708:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800270c:	ee17 2a90 	vmov	r2, s15
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	60da      	str	r2, [r3, #12]

	temp->current_velo = temp->coeff[1]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002718:	4618      	mov	r0, r3
 800271a:	f7fd fec1 	bl	80004a0 <__aeabi_f2d>
 800271e:	4604      	mov	r4, r0
 8002720:	460d      	mov	r5, r1
						+ 2.0*temp->coeff[2]*time
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002726:	4618      	mov	r0, r3
 8002728:	f7fd feba 	bl	80004a0 <__aeabi_f2d>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	f7fd fd58 	bl	80001e4 <__adddf3>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4690      	mov	r8, r2
 800273a:	4699      	mov	r9, r3
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f7fd feaf 	bl	80004a0 <__aeabi_f2d>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4640      	mov	r0, r8
 8002748:	4649      	mov	r1, r9
 800274a:	f7fd ff01 	bl	8000550 <__aeabi_dmul>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	4620      	mov	r0, r4
 8002754:	4629      	mov	r1, r5
 8002756:	f7fd fd45 	bl	80001e4 <__adddf3>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4614      	mov	r4, r2
 8002760:	461d      	mov	r5, r3
						+ 3.0*temp->coeff[3]*powf(time,2)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	4618      	mov	r0, r3
 8002768:	f7fd fe9a 	bl	80004a0 <__aeabi_f2d>
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	4b8e      	ldr	r3, [pc, #568]	; (80029ac <QuinticEvaluator+0x348>)
 8002772:	f7fd feed 	bl	8000550 <__aeabi_dmul>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	4690      	mov	r8, r2
 800277c:	4699      	mov	r9, r3
 800277e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002782:	ed97 0a03 	vldr	s0, [r7, #12]
 8002786:	f00a f92b 	bl	800c9e0 <powf>
 800278a:	ee10 3a10 	vmov	r3, s0
 800278e:	4618      	mov	r0, r3
 8002790:	f7fd fe86 	bl	80004a0 <__aeabi_f2d>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4640      	mov	r0, r8
 800279a:	4649      	mov	r1, r9
 800279c:	f7fd fed8 	bl	8000550 <__aeabi_dmul>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4620      	mov	r0, r4
 80027a6:	4629      	mov	r1, r5
 80027a8:	f7fd fd1c 	bl	80001e4 <__adddf3>
 80027ac:	4602      	mov	r2, r0
 80027ae:	460b      	mov	r3, r1
 80027b0:	4614      	mov	r4, r2
 80027b2:	461d      	mov	r5, r3
						+ 4.0*temp->coeff[4]*powf(time,3)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fd fe71 	bl	80004a0 <__aeabi_f2d>
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	4b7b      	ldr	r3, [pc, #492]	; (80029b0 <QuinticEvaluator+0x34c>)
 80027c4:	f7fd fec4 	bl	8000550 <__aeabi_dmul>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4690      	mov	r8, r2
 80027ce:	4699      	mov	r9, r3
 80027d0:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80027d4:	ed97 0a03 	vldr	s0, [r7, #12]
 80027d8:	f00a f902 	bl	800c9e0 <powf>
 80027dc:	ee10 3a10 	vmov	r3, s0
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fd fe5d 	bl	80004a0 <__aeabi_f2d>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	4640      	mov	r0, r8
 80027ec:	4649      	mov	r1, r9
 80027ee:	f7fd feaf 	bl	8000550 <__aeabi_dmul>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	4620      	mov	r0, r4
 80027f8:	4629      	mov	r1, r5
 80027fa:	f7fd fcf3 	bl	80001e4 <__adddf3>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4614      	mov	r4, r2
 8002804:	461d      	mov	r5, r3
						+ 5.0*temp->coeff[5]*powf(time,4);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280a:	4618      	mov	r0, r3
 800280c:	f7fd fe48 	bl	80004a0 <__aeabi_f2d>
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	4b67      	ldr	r3, [pc, #412]	; (80029b4 <QuinticEvaluator+0x350>)
 8002816:	f7fd fe9b 	bl	8000550 <__aeabi_dmul>
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	4690      	mov	r8, r2
 8002820:	4699      	mov	r9, r3
 8002822:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8002826:	ed97 0a03 	vldr	s0, [r7, #12]
 800282a:	f00a f8d9 	bl	800c9e0 <powf>
 800282e:	ee10 3a10 	vmov	r3, s0
 8002832:	4618      	mov	r0, r3
 8002834:	f7fd fe34 	bl	80004a0 <__aeabi_f2d>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4640      	mov	r0, r8
 800283e:	4649      	mov	r1, r9
 8002840:	f7fd fe86 	bl	8000550 <__aeabi_dmul>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4620      	mov	r0, r4
 800284a:	4629      	mov	r1, r5
 800284c:	f7fd fcca 	bl	80001e4 <__adddf3>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
	temp->current_velo = temp->coeff[1]
 8002854:	4610      	mov	r0, r2
 8002856:	4619      	mov	r1, r3
 8002858:	f7fe f92a 	bl	8000ab0 <__aeabi_d2iz>
 800285c:	4602      	mov	r2, r0
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	611a      	str	r2, [r3, #16]

	temp->current_acc = 2.0*temp->coeff[2]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002866:	4618      	mov	r0, r3
 8002868:	f7fd fe1a 	bl	80004a0 <__aeabi_f2d>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	f7fd fcb8 	bl	80001e4 <__adddf3>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4614      	mov	r4, r2
 800287a:	461d      	mov	r5, r3
						+ 6.0*temp->coeff[3]*time
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	4618      	mov	r0, r3
 8002882:	f7fd fe0d 	bl	80004a0 <__aeabi_f2d>
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	4b4b      	ldr	r3, [pc, #300]	; (80029b8 <QuinticEvaluator+0x354>)
 800288c:	f7fd fe60 	bl	8000550 <__aeabi_dmul>
 8002890:	4602      	mov	r2, r0
 8002892:	460b      	mov	r3, r1
 8002894:	4690      	mov	r8, r2
 8002896:	4699      	mov	r9, r3
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f7fd fe01 	bl	80004a0 <__aeabi_f2d>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4640      	mov	r0, r8
 80028a4:	4649      	mov	r1, r9
 80028a6:	f7fd fe53 	bl	8000550 <__aeabi_dmul>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	4620      	mov	r0, r4
 80028b0:	4629      	mov	r1, r5
 80028b2:	f7fd fc97 	bl	80001e4 <__adddf3>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4614      	mov	r4, r2
 80028bc:	461d      	mov	r5, r3
						+ 12.0*temp->coeff[4]*powf(time,2)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fd fdec 	bl	80004a0 <__aeabi_f2d>
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	4b3b      	ldr	r3, [pc, #236]	; (80029bc <QuinticEvaluator+0x358>)
 80028ce:	f7fd fe3f 	bl	8000550 <__aeabi_dmul>
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4690      	mov	r8, r2
 80028d8:	4699      	mov	r9, r3
 80028da:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80028de:	ed97 0a03 	vldr	s0, [r7, #12]
 80028e2:	f00a f87d 	bl	800c9e0 <powf>
 80028e6:	ee10 3a10 	vmov	r3, s0
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fd fdd8 	bl	80004a0 <__aeabi_f2d>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4640      	mov	r0, r8
 80028f6:	4649      	mov	r1, r9
 80028f8:	f7fd fe2a 	bl	8000550 <__aeabi_dmul>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4620      	mov	r0, r4
 8002902:	4629      	mov	r1, r5
 8002904:	f7fd fc6e 	bl	80001e4 <__adddf3>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4614      	mov	r4, r2
 800290e:	461d      	mov	r5, r3
						+ 20.0*temp->coeff[5]*powf(time,3);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002914:	4618      	mov	r0, r3
 8002916:	f7fd fdc3 	bl	80004a0 <__aeabi_f2d>
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	4b28      	ldr	r3, [pc, #160]	; (80029c0 <QuinticEvaluator+0x35c>)
 8002920:	f7fd fe16 	bl	8000550 <__aeabi_dmul>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4690      	mov	r8, r2
 800292a:	4699      	mov	r9, r3
 800292c:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8002930:	ed97 0a03 	vldr	s0, [r7, #12]
 8002934:	f00a f854 	bl	800c9e0 <powf>
 8002938:	ee10 3a10 	vmov	r3, s0
 800293c:	4618      	mov	r0, r3
 800293e:	f7fd fdaf 	bl	80004a0 <__aeabi_f2d>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4640      	mov	r0, r8
 8002948:	4649      	mov	r1, r9
 800294a:	f7fd fe01 	bl	8000550 <__aeabi_dmul>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4620      	mov	r0, r4
 8002954:	4629      	mov	r1, r5
 8002956:	f7fd fc45 	bl	80001e4 <__adddf3>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
	temp->current_acc = 2.0*temp->coeff[2]
 800295e:	4610      	mov	r0, r2
 8002960:	4619      	mov	r1, r3
 8002962:	f7fe f8a5 	bl	8000ab0 <__aeabi_d2iz>
 8002966:	4602      	mov	r2, r0
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	615a      	str	r2, [r3, #20]
	if(time >= temp->TotalTime)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002972:	ed97 7a03 	vldr	s14, [r7, #12]
 8002976:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800297a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297e:	da00      	bge.n	8002982 <QuinticEvaluator+0x31e>
		temp->start_pos = temp->final_pos;
		temp->current_pos = temp->start_pos;
		temp->current_velo = 0;
		temp->current_acc = 0;
	}
}
 8002980:	e00d      	b.n	800299e <QuinticEvaluator+0x33a>
		temp->start_pos = temp->final_pos;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	601a      	str	r2, [r3, #0]
		temp->current_pos = temp->start_pos;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	60da      	str	r2, [r3, #12]
		temp->current_velo = 0;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	611a      	str	r2, [r3, #16]
		temp->current_acc = 0;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	615a      	str	r2, [r3, #20]
}
 800299e:	bf00      	nop
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	ecbd 8b02 	vpop	{d8}
 80029a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80029ac:	40080000 	.word	0x40080000
 80029b0:	40100000 	.word	0x40100000
 80029b4:	40140000 	.word	0x40140000
 80029b8:	40180000 	.word	0x40180000
 80029bc:	40280000 	.word	0x40280000
 80029c0:	40340000 	.word	0x40340000

080029c4 <QuinticRun>:
void QuinticRun(QuinticTraj* temp, int8_t ess, float32_t dt)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	460b      	mov	r3, r1
 80029ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80029d2:	72fb      	strb	r3, [r7, #11]
	switch(temp->State)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d020      	beq.n	8002a20 <QuinticRun+0x5c>
 80029de:	2b02      	cmp	r3, #2
 80029e0:	dc3d      	bgt.n	8002a5e <QuinticRun+0x9a>
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <QuinticRun+0x28>
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d00b      	beq.n	8002a02 <QuinticRun+0x3e>
		{
			temp->State = Ready;
		}
		break;
	}
}
 80029ea:	e038      	b.n	8002a5e <QuinticRun+0x9a>
		if(temp->start_pos != temp->final_pos)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d031      	beq.n	8002a5c <QuinticRun+0x98>
			temp->State = PreCal;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8002a00:	e02c      	b.n	8002a5c <QuinticRun+0x98>
		temp->time = 0;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	641a      	str	r2, [r3, #64]	; 0x40
		QuinticGenerator(temp,ess);
 8002a0a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002a0e:	4619      	mov	r1, r3
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f7ff fce9 	bl	80023e8 <QuinticGenerator>
		temp->State = Run;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2202      	movs	r2, #2
 8002a1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8002a1e:	e01e      	b.n	8002a5e <QuinticRun+0x9a>
		temp->time = temp->time + dt;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002a26:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		QuinticEvaluator(temp);
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f7ff fe15 	bl	8002664 <QuinticEvaluator>
		if(temp->time > temp->TotalTime)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002a46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a4e:	dc00      	bgt.n	8002a52 <QuinticRun+0x8e>
		break;
 8002a50:	e005      	b.n	8002a5e <QuinticRun+0x9a>
			temp->State = Ready;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8002a5a:	e000      	b.n	8002a5e <QuinticRun+0x9a>
		break;
 8002a5c:	bf00      	nop
}
 8002a5e:	bf00      	nop
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <InitReadEncoder>:
//{ //get time in micros
//	return __HAL_TIM_GET_COUNTER(&htim5)+ ReadEncoderParam._micros;
//}

void InitReadEncoder(ReadEncoder* Read, uint32_t samplingtime)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
 8002a6e:	6039      	str	r1, [r7, #0]
	Read->MotorSetDuty = 0;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	701a      	strb	r2, [r3, #0]
	Read->Pulse_Compare = 0;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	805a      	strh	r2, [r3, #2]
	Read->DIR = 0;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	711a      	strb	r2, [r3, #4]
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
	...

08002a90 <QEIGetFeedback>:
//	//Delay
//	QEIData.data[1] = QEIData.data[0];
//	QEIData.timestamp[1] = QEIData.timestamp[0];
//}
void QEIGetFeedback(QEI* temp, uint16_t Hz)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	807b      	strh	r3, [r7, #2]
	temp->QEIPosition = __HAL_TIM_GET_COUNTER(&htim2);
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <QEIGetFeedback+0x4c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	605a      	str	r2, [r3, #4]
	temp->QEIVelocity = (temp->QEIPosition - temp->QEIPosition_minus) * Hz;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	887a      	ldrh	r2, [r7, #2]
 8002ab4:	fb02 f303 	mul.w	r3, r2, r3
 8002ab8:	ee07 3a90 	vmov	s15, r3
 8002abc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	edc3 7a02 	vstr	s15, [r3, #8]
	temp->QEIPosition_minus = temp->QEIPosition;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	601a      	str	r2, [r3, #0]
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	20000e60 	.word	0x20000e60

08002ae0 <SetHome>:
 */
#include "Storage.h"
extern u16u8_t registerFrame[200];

void SetHome(OperationVar* temp)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
	temp->HomingKey = 1;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	719a      	strb	r2, [r3, #6]
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,30*500);
 8002aee:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <SetHome+0x2c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002af6:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 8002af8:	2201      	movs	r2, #1
 8002afa:	2140      	movs	r1, #64	; 0x40
 8002afc:	4804      	ldr	r0, [pc, #16]	; (8002b10 <SetHome+0x30>)
 8002afe:	f004 fa63 	bl	8006fc8 <HAL_GPIO_WritePin>
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20000f14 	.word	0x20000f14
 8002b10:	40020800 	.word	0x40020800

08002b14 <RunX_Axis>:

void RunX_Axis(int32_t XFinalPos, uint16_t velo, uint16_t accel)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	807b      	strh	r3, [r7, #2]
 8002b20:	4613      	mov	r3, r2
 8002b22:	803b      	strh	r3, [r7, #0]
	registerFrame[0x41].U16 = XFinalPos;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <RunX_Axis+0x40>)
 8002b2a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	registerFrame[0x42].U16 = velo;	//250 mm/s
 8002b2e:	4a09      	ldr	r2, [pc, #36]	; (8002b54 <RunX_Axis+0x40>)
 8002b30:	887b      	ldrh	r3, [r7, #2]
 8002b32:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
	registerFrame[0x42].U16 = accel;	//1000 mm/s^2
 8002b36:	4a07      	ldr	r2, [pc, #28]	; (8002b54 <RunX_Axis+0x40>)
 8002b38:	883b      	ldrh	r3, [r7, #0]
 8002b3a:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
	registerFrame[0x40].U16 = 0b0010;	//Run
 8002b3e:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <RunX_Axis+0x40>)
 8002b40:	2202      	movs	r2, #2
 8002b42:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	20000c9c 	.word	0x20000c9c

08002b58 <TraySetup>:
 */
#include "TrayLocalization.h"
#include "arm_math.h"
#include  "math.h"
void TraySetup(Tray* temp, float32_t x1, float32_t y1, float32_t x2, float32_t y2)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b087      	sub	sp, #28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6178      	str	r0, [r7, #20]
 8002b60:	ed87 0a04 	vstr	s0, [r7, #16]
 8002b64:	edc7 0a03 	vstr	s1, [r7, #12]
 8002b68:	ed87 1a02 	vstr	s2, [r7, #8]
 8002b6c:	edc7 1a01 	vstr	s3, [r7, #4]
	temp->Edge1_X = x1;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	601a      	str	r2, [r3, #0]
	temp->Edge1_Y = y1;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	605a      	str	r2, [r3, #4]
	temp->Edge2_X = x2;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	609a      	str	r2, [r3, #8]
	temp->Edge2_Y = y2;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	60da      	str	r2, [r3, #12]
}
 8002b88:	bf00      	nop
 8002b8a:	371c      	adds	r7, #28
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	0000      	movs	r0, r0
	...

08002b98 <TrayLocalization>:
void TrayLocalization(Tray* temp)
{
 8002b98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b9c:	b094      	sub	sp, #80	; 0x50
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
	float32_t RefX_case1[3] = {10.0,30.0,50.0};
 8002ba2:	4a69      	ldr	r2, [pc, #420]	; (8002d48 <TrayLocalization+0x1b0>)
 8002ba4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ba8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002baa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float32_t RefY_case1[3] = {40*8192.0/120.0,25*8192.0/120.0,10*8192.0/120.0};
 8002bae:	4a67      	ldr	r2, [pc, #412]	; (8002d4c <TrayLocalization+0x1b4>)
 8002bb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bb4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	float32_t RefX_case2[3] = {10.0,25.0,40.0};
 8002bba:	4a65      	ldr	r2, [pc, #404]	; (8002d50 <TrayLocalization+0x1b8>)
 8002bbc:	f107 031c 	add.w	r3, r7, #28
 8002bc0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bc2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float32_t RefY_case2[3] = {50*8192.0/120.0,30*8192.0/120.0,10*8192.0/120.0};
 8002bc6:	4a63      	ldr	r2, [pc, #396]	; (8002d54 <TrayLocalization+0x1bc>)
 8002bc8:	f107 0310 	add.w	r3, r7, #16
 8002bcc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float32_t deltaX = (temp->Edge2_X - temp->Edge1_X)*8192.0/120.0;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	ed93 7a02 	vldr	s14, [r3, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	edd3 7a00 	vldr	s15, [r3]
 8002bde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002be2:	ee17 0a90 	vmov	r0, s15
 8002be6:	f7fd fc5b 	bl	80004a0 <__aeabi_f2d>
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	4b5a      	ldr	r3, [pc, #360]	; (8002d58 <TrayLocalization+0x1c0>)
 8002bf0:	f7fd fcae 	bl	8000550 <__aeabi_dmul>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	4b56      	ldr	r3, [pc, #344]	; (8002d5c <TrayLocalization+0x1c4>)
 8002c02:	f7fd fdcf 	bl	80007a4 <__aeabi_ddiv>
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	f7fd ff97 	bl	8000b40 <__aeabi_d2f>
 8002c12:	4603      	mov	r3, r0
 8002c14:	64bb      	str	r3, [r7, #72]	; 0x48
	float32_t deltaY = temp->Edge2_Y - temp->Edge1_Y;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	ed93 7a03 	vldr	s14, [r3, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c26:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	float32_t lengh = sqrt(pow(deltaX,2) + pow(deltaY,2));
 8002c2a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002c2c:	f7fd fc38 	bl	80004a0 <__aeabi_f2d>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	ed9f 1b42 	vldr	d1, [pc, #264]	; 8002d40 <TrayLocalization+0x1a8>
 8002c38:	ec43 2b10 	vmov	d0, r2, r3
 8002c3c:	f009 fe34 	bl	800c8a8 <pow>
 8002c40:	ec55 4b10 	vmov	r4, r5, d0
 8002c44:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002c46:	f7fd fc2b 	bl	80004a0 <__aeabi_f2d>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	ed9f 1b3c 	vldr	d1, [pc, #240]	; 8002d40 <TrayLocalization+0x1a8>
 8002c52:	ec43 2b10 	vmov	d0, r2, r3
 8002c56:	f009 fe27 	bl	800c8a8 <pow>
 8002c5a:	ec53 2b10 	vmov	r2, r3, d0
 8002c5e:	4620      	mov	r0, r4
 8002c60:	4629      	mov	r1, r5
 8002c62:	f7fd fabf 	bl	80001e4 <__adddf3>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	ec43 2b17 	vmov	d7, r2, r3
 8002c6e:	eeb0 0a47 	vmov.f32	s0, s14
 8002c72:	eef0 0a67 	vmov.f32	s1, s15
 8002c76:	f009 fe87 	bl	800c988 <sqrt>
 8002c7a:	ec53 2b10 	vmov	r2, r3, d0
 8002c7e:	4610      	mov	r0, r2
 8002c80:	4619      	mov	r1, r3
 8002c82:	f7fd ff5d 	bl	8000b40 <__aeabi_d2f>
 8002c86:	4603      	mov	r3, r0
 8002c88:	643b      	str	r3, [r7, #64]	; 0x40

	if((3276 <= lengh)&&(lengh <= 3550))
 8002c8a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002c8e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002d60 <TrayLocalization+0x1c8>
 8002c92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c9a:	db0d      	blt.n	8002cb8 <TrayLocalization+0x120>
 8002c9c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002ca0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002d64 <TrayLocalization+0x1cc>
 8002ca4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cac:	d804      	bhi.n	8002cb8 <TrayLocalization+0x120>
	{
		temp->Flag = 2; //swap case
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8002cb6:	e01a      	b.n	8002cee <TrayLocalization+0x156>
	}
	else if ((3960 <= lengh)&&(lengh <= 4233))
 8002cb8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002cbc:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002d68 <TrayLocalization+0x1d0>
 8002cc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc8:	db0d      	blt.n	8002ce6 <TrayLocalization+0x14e>
 8002cca:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002cce:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002d6c <TrayLocalization+0x1d4>
 8002cd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cda:	d804      	bhi.n	8002ce6 <TrayLocalization+0x14e>
	{
		temp->Flag = 1;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8002ce4:	e003      	b.n	8002cee <TrayLocalization+0x156>
	}
	else
	{
		temp->Flag = 0;//Lenght Error!!
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	}
	float32_t theta;
	arm_atan2_f32(deltaY,deltaX,&theta);
 8002cee:	f107 030c 	add.w	r3, r7, #12
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	edd7 0a12 	vldr	s1, [r7, #72]	; 0x48
 8002cf8:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8002cfc:	f001 ff0a 	bl	8004b14 <arm_atan2_f32>
	temp->angle = theta;
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	65da      	str	r2, [r3, #92]	; 0x5c
	int8_t i;
	int8_t j;
	uint8_t ind = 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	switch(temp->Flag)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f993 3059 	ldrsb.w	r3, [r3, #89]	; 0x59
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	f000 8129 	beq.w	8002f6a <TrayLocalization+0x3d2>
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	f300 8230 	bgt.w	800317e <TrayLocalization+0x5e6>
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 822c 	beq.w	800317c <TrayLocalization+0x5e4>
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	f040 822a 	bne.w	800317e <TrayLocalization+0x5e6>
	{
	case 1:
		for(i=0;i<3;i++)
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002d30:	e115      	b.n	8002f5e <TrayLocalization+0x3c6>
		{
			for(j=0;j<3;j++)
 8002d32:	2300      	movs	r3, #0
 8002d34:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002d38:	e105      	b.n	8002f46 <TrayLocalization+0x3ae>
 8002d3a:	bf00      	nop
 8002d3c:	f3af 8000 	nop.w
 8002d40:	00000000 	.word	0x00000000
 8002d44:	40000000 	.word	0x40000000
 8002d48:	0800ee4c 	.word	0x0800ee4c
 8002d4c:	0800ee58 	.word	0x0800ee58
 8002d50:	0800ee64 	.word	0x0800ee64
 8002d54:	0800ee70 	.word	0x0800ee70
 8002d58:	40c00000 	.word	0x40c00000
 8002d5c:	405e0000 	.word	0x405e0000
 8002d60:	454cc000 	.word	0x454cc000
 8002d64:	455de000 	.word	0x455de000
 8002d68:	45778000 	.word	0x45778000
 8002d6c:	45844800 	.word	0x45844800
			{
				temp->Holes_X[ind] = temp->Edge1_X
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fd fb93 	bl	80004a0 <__aeabi_f2d>
 8002d7a:	4604      	mov	r4, r0
 8002d7c:	460d      	mov	r5, r1
								+ (cos(theta)*RefX_case1[i])
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fd fb8d 	bl	80004a0 <__aeabi_f2d>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	ec43 2b10 	vmov	d0, r2, r3
 8002d8e:	f009 fcdf 	bl	800c750 <cos>
 8002d92:	ec59 8b10 	vmov	r8, r9, d0
 8002d96:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	3350      	adds	r3, #80	; 0x50
 8002d9e:	443b      	add	r3, r7
 8002da0:	3b1c      	subs	r3, #28
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fd fb7b 	bl	80004a0 <__aeabi_f2d>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4640      	mov	r0, r8
 8002db0:	4649      	mov	r1, r9
 8002db2:	f7fd fbcd 	bl	8000550 <__aeabi_dmul>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4620      	mov	r0, r4
 8002dbc:	4629      	mov	r1, r5
 8002dbe:	f7fd fa11 	bl	80001e4 <__adddf3>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4614      	mov	r4, r2
 8002dc8:	461d      	mov	r5, r3
								- (sin(theta)*RefY_case1[j]*120.0/8192.0);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fd fb67 	bl	80004a0 <__aeabi_f2d>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	ec43 2b10 	vmov	d0, r2, r3
 8002dda:	f009 fd0d 	bl	800c7f8 <sin>
 8002dde:	ec59 8b10 	vmov	r8, r9, d0
 8002de2:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	3350      	adds	r3, #80	; 0x50
 8002dea:	443b      	add	r3, r7
 8002dec:	3b28      	subs	r3, #40	; 0x28
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fd fb55 	bl	80004a0 <__aeabi_f2d>
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	4640      	mov	r0, r8
 8002dfc:	4649      	mov	r1, r9
 8002dfe:	f7fd fba7 	bl	8000550 <__aeabi_dmul>
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	4610      	mov	r0, r2
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	4bd9      	ldr	r3, [pc, #868]	; (8003174 <TrayLocalization+0x5dc>)
 8002e10:	f7fd fb9e 	bl	8000550 <__aeabi_dmul>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4610      	mov	r0, r2
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	4bd5      	ldr	r3, [pc, #852]	; (8003178 <TrayLocalization+0x5e0>)
 8002e22:	f7fd fcbf 	bl	80007a4 <__aeabi_ddiv>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	4629      	mov	r1, r5
 8002e2e:	f7fd f9d7 	bl	80001e0 <__aeabi_dsub>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
				temp->Holes_X[ind] = temp->Edge1_X
 8002e36:	f897 404d 	ldrb.w	r4, [r7, #77]	; 0x4d
								- (sin(theta)*RefY_case1[j]*120.0/8192.0);
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	f7fd fe7f 	bl	8000b40 <__aeabi_d2f>
 8002e42:	4601      	mov	r1, r0
				temp->Holes_X[ind] = temp->Edge1_X
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	1d23      	adds	r3, r4, #4
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	6019      	str	r1, [r3, #0]
				temp->Holes_Y[ind] = temp->Edge1_Y
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fd fb24 	bl	80004a0 <__aeabi_f2d>
 8002e58:	4604      	mov	r4, r0
 8002e5a:	460d      	mov	r5, r1
								+ (cos(theta)*RefY_case1[j])
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fd fb1e 	bl	80004a0 <__aeabi_f2d>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	ec43 2b10 	vmov	d0, r2, r3
 8002e6c:	f009 fc70 	bl	800c750 <cos>
 8002e70:	ec59 8b10 	vmov	r8, r9, d0
 8002e74:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	3350      	adds	r3, #80	; 0x50
 8002e7c:	443b      	add	r3, r7
 8002e7e:	3b28      	subs	r3, #40	; 0x28
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fd fb0c 	bl	80004a0 <__aeabi_f2d>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4640      	mov	r0, r8
 8002e8e:	4649      	mov	r1, r9
 8002e90:	f7fd fb5e 	bl	8000550 <__aeabi_dmul>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4620      	mov	r0, r4
 8002e9a:	4629      	mov	r1, r5
 8002e9c:	f7fd f9a2 	bl	80001e4 <__adddf3>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	4614      	mov	r4, r2
 8002ea6:	461d      	mov	r5, r3
								+ (sin(theta)*RefX_case1[i]*8192.0/120.0);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fd faf8 	bl	80004a0 <__aeabi_f2d>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	ec43 2b10 	vmov	d0, r2, r3
 8002eb8:	f009 fc9e 	bl	800c7f8 <sin>
 8002ebc:	ec59 8b10 	vmov	r8, r9, d0
 8002ec0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	3350      	adds	r3, #80	; 0x50
 8002ec8:	443b      	add	r3, r7
 8002eca:	3b1c      	subs	r3, #28
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fd fae6 	bl	80004a0 <__aeabi_f2d>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4640      	mov	r0, r8
 8002eda:	4649      	mov	r1, r9
 8002edc:	f7fd fb38 	bl	8000550 <__aeabi_dmul>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	4ba2      	ldr	r3, [pc, #648]	; (8003178 <TrayLocalization+0x5e0>)
 8002eee:	f7fd fb2f 	bl	8000550 <__aeabi_dmul>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4610      	mov	r0, r2
 8002ef8:	4619      	mov	r1, r3
 8002efa:	f04f 0200 	mov.w	r2, #0
 8002efe:	4b9d      	ldr	r3, [pc, #628]	; (8003174 <TrayLocalization+0x5dc>)
 8002f00:	f7fd fc50 	bl	80007a4 <__aeabi_ddiv>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4620      	mov	r0, r4
 8002f0a:	4629      	mov	r1, r5
 8002f0c:	f7fd f96a 	bl	80001e4 <__adddf3>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
				temp->Holes_Y[ind] = temp->Edge1_Y
 8002f14:	f897 404d 	ldrb.w	r4, [r7, #77]	; 0x4d
 8002f18:	4610      	mov	r0, r2
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	f7fd fdf0 	bl	8000b00 <__aeabi_d2uiz>
 8002f20:	4601      	mov	r1, r0
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	f104 030c 	add.w	r3, r4, #12
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	6059      	str	r1, [r3, #4]
				ind += 1;
 8002f2e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002f32:	3301      	adds	r3, #1
 8002f34:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			for(j=0;j<3;j++)
 8002f38:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	3301      	adds	r3, #1
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002f46:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	f77f af10 	ble.w	8002d70 <TrayLocalization+0x1d8>
		for(i=0;i<3;i++)
 8002f50:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	3301      	adds	r3, #1
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002f5e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	f77f aee5 	ble.w	8002d32 <TrayLocalization+0x19a>
			}
		}
		break;
 8002f68:	e109      	b.n	800317e <TrayLocalization+0x5e6>
	case 2:
		for(i=0;i<3;i++)
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002f70:	e0fa      	b.n	8003168 <TrayLocalization+0x5d0>
		{
			for(j=0;j<3;j++)
 8002f72:	2300      	movs	r3, #0
 8002f74:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002f78:	e0ea      	b.n	8003150 <TrayLocalization+0x5b8>
			{
				temp->Holes_X[ind] = temp->Edge1_X
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fd fa8e 	bl	80004a0 <__aeabi_f2d>
 8002f84:	4604      	mov	r4, r0
 8002f86:	460d      	mov	r5, r1
								+ (cos(theta)*RefX_case2[i])
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fd fa88 	bl	80004a0 <__aeabi_f2d>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	ec43 2b10 	vmov	d0, r2, r3
 8002f98:	f009 fbda 	bl	800c750 <cos>
 8002f9c:	ec59 8b10 	vmov	r8, r9, d0
 8002fa0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	3350      	adds	r3, #80	; 0x50
 8002fa8:	443b      	add	r3, r7
 8002faa:	3b34      	subs	r3, #52	; 0x34
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fd fa76 	bl	80004a0 <__aeabi_f2d>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4640      	mov	r0, r8
 8002fba:	4649      	mov	r1, r9
 8002fbc:	f7fd fac8 	bl	8000550 <__aeabi_dmul>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	4629      	mov	r1, r5
 8002fc8:	f7fd f90c 	bl	80001e4 <__adddf3>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
 8002fd0:	4614      	mov	r4, r2
 8002fd2:	461d      	mov	r5, r3
								- (sin(theta)*RefY_case2[j]*120.0/8192.0);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fd fa62 	bl	80004a0 <__aeabi_f2d>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	ec43 2b10 	vmov	d0, r2, r3
 8002fe4:	f009 fc08 	bl	800c7f8 <sin>
 8002fe8:	ec59 8b10 	vmov	r8, r9, d0
 8002fec:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	3350      	adds	r3, #80	; 0x50
 8002ff4:	443b      	add	r3, r7
 8002ff6:	3b40      	subs	r3, #64	; 0x40
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fd fa50 	bl	80004a0 <__aeabi_f2d>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	4640      	mov	r0, r8
 8003006:	4649      	mov	r1, r9
 8003008:	f7fd faa2 	bl	8000550 <__aeabi_dmul>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	4610      	mov	r0, r2
 8003012:	4619      	mov	r1, r3
 8003014:	f04f 0200 	mov.w	r2, #0
 8003018:	4b56      	ldr	r3, [pc, #344]	; (8003174 <TrayLocalization+0x5dc>)
 800301a:	f7fd fa99 	bl	8000550 <__aeabi_dmul>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4610      	mov	r0, r2
 8003024:	4619      	mov	r1, r3
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	4b53      	ldr	r3, [pc, #332]	; (8003178 <TrayLocalization+0x5e0>)
 800302c:	f7fd fbba 	bl	80007a4 <__aeabi_ddiv>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4620      	mov	r0, r4
 8003036:	4629      	mov	r1, r5
 8003038:	f7fd f8d2 	bl	80001e0 <__aeabi_dsub>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
				temp->Holes_X[ind] = temp->Edge1_X
 8003040:	f897 404d 	ldrb.w	r4, [r7, #77]	; 0x4d
								- (sin(theta)*RefY_case2[j]*120.0/8192.0);
 8003044:	4610      	mov	r0, r2
 8003046:	4619      	mov	r1, r3
 8003048:	f7fd fd7a 	bl	8000b40 <__aeabi_d2f>
 800304c:	4601      	mov	r1, r0
				temp->Holes_X[ind] = temp->Edge1_X
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	1d23      	adds	r3, r4, #4
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	6019      	str	r1, [r3, #0]
				temp->Holes_Y[ind] = temp->Edge1_Y
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	4618      	mov	r0, r3
 800305e:	f7fd fa1f 	bl	80004a0 <__aeabi_f2d>
 8003062:	4604      	mov	r4, r0
 8003064:	460d      	mov	r5, r1
								+ (cos(theta)*RefY_case2[j])
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	4618      	mov	r0, r3
 800306a:	f7fd fa19 	bl	80004a0 <__aeabi_f2d>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	ec43 2b10 	vmov	d0, r2, r3
 8003076:	f009 fb6b 	bl	800c750 <cos>
 800307a:	ec59 8b10 	vmov	r8, r9, d0
 800307e:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	3350      	adds	r3, #80	; 0x50
 8003086:	443b      	add	r3, r7
 8003088:	3b40      	subs	r3, #64	; 0x40
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f7fd fa07 	bl	80004a0 <__aeabi_f2d>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4640      	mov	r0, r8
 8003098:	4649      	mov	r1, r9
 800309a:	f7fd fa59 	bl	8000550 <__aeabi_dmul>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4620      	mov	r0, r4
 80030a4:	4629      	mov	r1, r5
 80030a6:	f7fd f89d 	bl	80001e4 <__adddf3>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4614      	mov	r4, r2
 80030b0:	461d      	mov	r5, r3
								+ (sin(theta)*RefX_case2[i]*8192.0/120.0);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7fd f9f3 	bl	80004a0 <__aeabi_f2d>
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	ec43 2b10 	vmov	d0, r2, r3
 80030c2:	f009 fb99 	bl	800c7f8 <sin>
 80030c6:	ec59 8b10 	vmov	r8, r9, d0
 80030ca:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	3350      	adds	r3, #80	; 0x50
 80030d2:	443b      	add	r3, r7
 80030d4:	3b34      	subs	r3, #52	; 0x34
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7fd f9e1 	bl	80004a0 <__aeabi_f2d>
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	4640      	mov	r0, r8
 80030e4:	4649      	mov	r1, r9
 80030e6:	f7fd fa33 	bl	8000550 <__aeabi_dmul>
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	4610      	mov	r0, r2
 80030f0:	4619      	mov	r1, r3
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	4b20      	ldr	r3, [pc, #128]	; (8003178 <TrayLocalization+0x5e0>)
 80030f8:	f7fd fa2a 	bl	8000550 <__aeabi_dmul>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4610      	mov	r0, r2
 8003102:	4619      	mov	r1, r3
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	4b1a      	ldr	r3, [pc, #104]	; (8003174 <TrayLocalization+0x5dc>)
 800310a:	f7fd fb4b 	bl	80007a4 <__aeabi_ddiv>
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	4620      	mov	r0, r4
 8003114:	4629      	mov	r1, r5
 8003116:	f7fd f865 	bl	80001e4 <__adddf3>
 800311a:	4602      	mov	r2, r0
 800311c:	460b      	mov	r3, r1
				temp->Holes_Y[ind] = temp->Edge1_Y
 800311e:	f897 404d 	ldrb.w	r4, [r7, #77]	; 0x4d
 8003122:	4610      	mov	r0, r2
 8003124:	4619      	mov	r1, r3
 8003126:	f7fd fceb 	bl	8000b00 <__aeabi_d2uiz>
 800312a:	4601      	mov	r1, r0
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	f104 030c 	add.w	r3, r4, #12
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	6059      	str	r1, [r3, #4]
				ind += 1;
 8003138:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800313c:	3301      	adds	r3, #1
 800313e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			for(j=0;j<3;j++)
 8003142:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8003146:	b2db      	uxtb	r3, r3
 8003148:	3301      	adds	r3, #1
 800314a:	b2db      	uxtb	r3, r3
 800314c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8003150:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8003154:	2b02      	cmp	r3, #2
 8003156:	f77f af10 	ble.w	8002f7a <TrayLocalization+0x3e2>
		for(i=0;i<3;i++)
 800315a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800315e:	b2db      	uxtb	r3, r3
 8003160:	3301      	adds	r3, #1
 8003162:	b2db      	uxtb	r3, r3
 8003164:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8003168:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800316c:	2b02      	cmp	r3, #2
 800316e:	f77f af00 	ble.w	8002f72 <TrayLocalization+0x3da>
			}
		}
		break;
 8003172:	e004      	b.n	800317e <TrayLocalization+0x5e6>
 8003174:	405e0000 	.word	0x405e0000
 8003178:	40c00000 	.word	0x40c00000
	case 0:
		break;
 800317c:	bf00      	nop
	}
}
 800317e:	bf00      	nop
 8003180:	3750      	adds	r7, #80	; 0x50
 8003182:	46bd      	mov	sp, r7
 8003184:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003188 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800318e:	463b      	mov	r3, r7
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	605a      	str	r2, [r3, #4]
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800319a:	4b28      	ldr	r3, [pc, #160]	; (800323c <MX_ADC1_Init+0xb4>)
 800319c:	4a28      	ldr	r2, [pc, #160]	; (8003240 <MX_ADC1_Init+0xb8>)
 800319e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80031a0:	4b26      	ldr	r3, [pc, #152]	; (800323c <MX_ADC1_Init+0xb4>)
 80031a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80031a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80031a8:	4b24      	ldr	r3, [pc, #144]	; (800323c <MX_ADC1_Init+0xb4>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80031ae:	4b23      	ldr	r3, [pc, #140]	; (800323c <MX_ADC1_Init+0xb4>)
 80031b0:	2201      	movs	r2, #1
 80031b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80031b4:	4b21      	ldr	r3, [pc, #132]	; (800323c <MX_ADC1_Init+0xb4>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80031ba:	4b20      	ldr	r3, [pc, #128]	; (800323c <MX_ADC1_Init+0xb4>)
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80031c2:	4b1e      	ldr	r3, [pc, #120]	; (800323c <MX_ADC1_Init+0xb4>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80031c8:	4b1c      	ldr	r3, [pc, #112]	; (800323c <MX_ADC1_Init+0xb4>)
 80031ca:	4a1e      	ldr	r2, [pc, #120]	; (8003244 <MX_ADC1_Init+0xbc>)
 80031cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031ce:	4b1b      	ldr	r3, [pc, #108]	; (800323c <MX_ADC1_Init+0xb4>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80031d4:	4b19      	ldr	r3, [pc, #100]	; (800323c <MX_ADC1_Init+0xb4>)
 80031d6:	2202      	movs	r2, #2
 80031d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80031da:	4b18      	ldr	r3, [pc, #96]	; (800323c <MX_ADC1_Init+0xb4>)
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80031e2:	4b16      	ldr	r3, [pc, #88]	; (800323c <MX_ADC1_Init+0xb4>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80031e8:	4814      	ldr	r0, [pc, #80]	; (800323c <MX_ADC1_Init+0xb4>)
 80031ea:	f002 fc21 	bl	8005a30 <HAL_ADC_Init>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80031f4:	f001 f826 	bl	8004244 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80031f8:	230a      	movs	r3, #10
 80031fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80031fc:	2301      	movs	r3, #1
 80031fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8003200:	2306      	movs	r3, #6
 8003202:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003204:	463b      	mov	r3, r7
 8003206:	4619      	mov	r1, r3
 8003208:	480c      	ldr	r0, [pc, #48]	; (800323c <MX_ADC1_Init+0xb4>)
 800320a:	f002 fd63 	bl	8005cd4 <HAL_ADC_ConfigChannel>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003214:	f001 f816 	bl	8004244 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003218:	230b      	movs	r3, #11
 800321a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800321c:	2302      	movs	r3, #2
 800321e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003220:	463b      	mov	r3, r7
 8003222:	4619      	mov	r1, r3
 8003224:	4805      	ldr	r0, [pc, #20]	; (800323c <MX_ADC1_Init+0xb4>)
 8003226:	f002 fd55 	bl	8005cd4 <HAL_ADC_ConfigChannel>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003230:	f001 f808 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003234:	bf00      	nop
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	20000310 	.word	0x20000310
 8003240:	40012000 	.word	0x40012000
 8003244:	0f000001 	.word	0x0f000001

08003248 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08a      	sub	sp, #40	; 0x28
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003250:	f107 0314 	add.w	r3, r7, #20
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	605a      	str	r2, [r3, #4]
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	60da      	str	r2, [r3, #12]
 800325e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a2f      	ldr	r2, [pc, #188]	; (8003324 <HAL_ADC_MspInit+0xdc>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d157      	bne.n	800331a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	4b2e      	ldr	r3, [pc, #184]	; (8003328 <HAL_ADC_MspInit+0xe0>)
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	4a2d      	ldr	r2, [pc, #180]	; (8003328 <HAL_ADC_MspInit+0xe0>)
 8003274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003278:	6453      	str	r3, [r2, #68]	; 0x44
 800327a:	4b2b      	ldr	r3, [pc, #172]	; (8003328 <HAL_ADC_MspInit+0xe0>)
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003286:	2300      	movs	r3, #0
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	4b27      	ldr	r3, [pc, #156]	; (8003328 <HAL_ADC_MspInit+0xe0>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	4a26      	ldr	r2, [pc, #152]	; (8003328 <HAL_ADC_MspInit+0xe0>)
 8003290:	f043 0304 	orr.w	r3, r3, #4
 8003294:	6313      	str	r3, [r2, #48]	; 0x30
 8003296:	4b24      	ldr	r3, [pc, #144]	; (8003328 <HAL_ADC_MspInit+0xe0>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	f003 0304 	and.w	r3, r3, #4
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80032a2:	2303      	movs	r3, #3
 80032a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032a6:	2303      	movs	r3, #3
 80032a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032aa:	2300      	movs	r3, #0
 80032ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032ae:	f107 0314 	add.w	r3, r7, #20
 80032b2:	4619      	mov	r1, r3
 80032b4:	481d      	ldr	r0, [pc, #116]	; (800332c <HAL_ADC_MspInit+0xe4>)
 80032b6:	f003 fceb 	bl	8006c90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80032ba:	4b1d      	ldr	r3, [pc, #116]	; (8003330 <HAL_ADC_MspInit+0xe8>)
 80032bc:	4a1d      	ldr	r2, [pc, #116]	; (8003334 <HAL_ADC_MspInit+0xec>)
 80032be:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80032c0:	4b1b      	ldr	r3, [pc, #108]	; (8003330 <HAL_ADC_MspInit+0xe8>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032c6:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <HAL_ADC_MspInit+0xe8>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80032cc:	4b18      	ldr	r3, [pc, #96]	; (8003330 <HAL_ADC_MspInit+0xe8>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80032d2:	4b17      	ldr	r3, [pc, #92]	; (8003330 <HAL_ADC_MspInit+0xe8>)
 80032d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032d8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032da:	4b15      	ldr	r3, [pc, #84]	; (8003330 <HAL_ADC_MspInit+0xe8>)
 80032dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032e0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80032e2:	4b13      	ldr	r3, [pc, #76]	; (8003330 <HAL_ADC_MspInit+0xe8>)
 80032e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80032ea:	4b11      	ldr	r3, [pc, #68]	; (8003330 <HAL_ADC_MspInit+0xe8>)
 80032ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032f0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80032f2:	4b0f      	ldr	r3, [pc, #60]	; (8003330 <HAL_ADC_MspInit+0xe8>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032f8:	4b0d      	ldr	r3, [pc, #52]	; (8003330 <HAL_ADC_MspInit+0xe8>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80032fe:	480c      	ldr	r0, [pc, #48]	; (8003330 <HAL_ADC_MspInit+0xe8>)
 8003300:	f003 f8aa 	bl	8006458 <HAL_DMA_Init>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800330a:	f000 ff9b 	bl	8004244 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a07      	ldr	r2, [pc, #28]	; (8003330 <HAL_ADC_MspInit+0xe8>)
 8003312:	639a      	str	r2, [r3, #56]	; 0x38
 8003314:	4a06      	ldr	r2, [pc, #24]	; (8003330 <HAL_ADC_MspInit+0xe8>)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800331a:	bf00      	nop
 800331c:	3728      	adds	r7, #40	; 0x28
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40012000 	.word	0x40012000
 8003328:	40023800 	.word	0x40023800
 800332c:	40020800 	.word	0x40020800
 8003330:	20000358 	.word	0x20000358
 8003334:	40026410 	.word	0x40026410

08003338 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800333e:	2300      	movs	r3, #0
 8003340:	607b      	str	r3, [r7, #4]
 8003342:	4b17      	ldr	r3, [pc, #92]	; (80033a0 <MX_DMA_Init+0x68>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	4a16      	ldr	r2, [pc, #88]	; (80033a0 <MX_DMA_Init+0x68>)
 8003348:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800334c:	6313      	str	r3, [r2, #48]	; 0x30
 800334e:	4b14      	ldr	r3, [pc, #80]	; (80033a0 <MX_DMA_Init+0x68>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003356:	607b      	str	r3, [r7, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	603b      	str	r3, [r7, #0]
 800335e:	4b10      	ldr	r3, [pc, #64]	; (80033a0 <MX_DMA_Init+0x68>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	4a0f      	ldr	r2, [pc, #60]	; (80033a0 <MX_DMA_Init+0x68>)
 8003364:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003368:	6313      	str	r3, [r2, #48]	; 0x30
 800336a:	4b0d      	ldr	r3, [pc, #52]	; (80033a0 <MX_DMA_Init+0x68>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003372:	603b      	str	r3, [r7, #0]
 8003374:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8003376:	2200      	movs	r2, #0
 8003378:	2100      	movs	r1, #0
 800337a:	2011      	movs	r0, #17
 800337c:	f003 f835 	bl	80063ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003380:	2011      	movs	r0, #17
 8003382:	f003 f84e 	bl	8006422 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003386:	2200      	movs	r2, #0
 8003388:	2100      	movs	r1, #0
 800338a:	2038      	movs	r0, #56	; 0x38
 800338c:	f003 f82d 	bl	80063ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003390:	2038      	movs	r0, #56	; 0x38
 8003392:	f003 f846 	bl	8006422 <HAL_NVIC_EnableIRQ>

}
 8003396:	bf00      	nop
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40023800 	.word	0x40023800

080033a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08a      	sub	sp, #40	; 0x28
 80033a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033aa:	f107 0314 	add.w	r3, r7, #20
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	605a      	str	r2, [r3, #4]
 80033b4:	609a      	str	r2, [r3, #8]
 80033b6:	60da      	str	r2, [r3, #12]
 80033b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	613b      	str	r3, [r7, #16]
 80033be:	4b5f      	ldr	r3, [pc, #380]	; (800353c <MX_GPIO_Init+0x198>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	4a5e      	ldr	r2, [pc, #376]	; (800353c <MX_GPIO_Init+0x198>)
 80033c4:	f043 0304 	orr.w	r3, r3, #4
 80033c8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ca:	4b5c      	ldr	r3, [pc, #368]	; (800353c <MX_GPIO_Init+0x198>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	613b      	str	r3, [r7, #16]
 80033d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	4b58      	ldr	r3, [pc, #352]	; (800353c <MX_GPIO_Init+0x198>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	4a57      	ldr	r2, [pc, #348]	; (800353c <MX_GPIO_Init+0x198>)
 80033e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033e4:	6313      	str	r3, [r2, #48]	; 0x30
 80033e6:	4b55      	ldr	r3, [pc, #340]	; (800353c <MX_GPIO_Init+0x198>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	4b51      	ldr	r3, [pc, #324]	; (800353c <MX_GPIO_Init+0x198>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	4a50      	ldr	r2, [pc, #320]	; (800353c <MX_GPIO_Init+0x198>)
 80033fc:	f043 0301 	orr.w	r3, r3, #1
 8003400:	6313      	str	r3, [r2, #48]	; 0x30
 8003402:	4b4e      	ldr	r3, [pc, #312]	; (800353c <MX_GPIO_Init+0x198>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	60bb      	str	r3, [r7, #8]
 800340c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800340e:	2300      	movs	r3, #0
 8003410:	607b      	str	r3, [r7, #4]
 8003412:	4b4a      	ldr	r3, [pc, #296]	; (800353c <MX_GPIO_Init+0x198>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	4a49      	ldr	r2, [pc, #292]	; (800353c <MX_GPIO_Init+0x198>)
 8003418:	f043 0302 	orr.w	r3, r3, #2
 800341c:	6313      	str	r3, [r2, #48]	; 0x30
 800341e:	4b47      	ldr	r3, [pc, #284]	; (800353c <MX_GPIO_Init+0x198>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	607b      	str	r3, [r7, #4]
 8003428:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800342a:	2200      	movs	r2, #0
 800342c:	2120      	movs	r1, #32
 800342e:	4844      	ldr	r0, [pc, #272]	; (8003540 <MX_GPIO_Init+0x19c>)
 8003430:	f003 fdca 	bl	8006fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8003434:	2200      	movs	r2, #0
 8003436:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800343a:	4842      	ldr	r0, [pc, #264]	; (8003544 <MX_GPIO_Init+0x1a0>)
 800343c:	f003 fdc4 	bl	8006fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_10, GPIO_PIN_RESET);
 8003440:	2200      	movs	r2, #0
 8003442:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8003446:	4840      	ldr	r0, [pc, #256]	; (8003548 <MX_GPIO_Init+0x1a4>)
 8003448:	f003 fdbe 	bl	8006fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800344c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003452:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003458:	2300      	movs	r3, #0
 800345a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800345c:	f107 0314 	add.w	r3, r7, #20
 8003460:	4619      	mov	r1, r3
 8003462:	4839      	ldr	r0, [pc, #228]	; (8003548 <MX_GPIO_Init+0x1a4>)
 8003464:	f003 fc14 	bl	8006c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003468:	2304      	movs	r3, #4
 800346a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800346c:	2300      	movs	r3, #0
 800346e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003470:	2300      	movs	r3, #0
 8003472:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003474:	f107 0314 	add.w	r3, r7, #20
 8003478:	4619      	mov	r1, r3
 800347a:	4833      	ldr	r0, [pc, #204]	; (8003548 <MX_GPIO_Init+0x1a4>)
 800347c:	f003 fc08 	bl	8006c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003480:	2310      	movs	r3, #16
 8003482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003484:	2300      	movs	r3, #0
 8003486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003488:	2300      	movs	r3, #0
 800348a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800348c:	f107 0314 	add.w	r3, r7, #20
 8003490:	4619      	mov	r1, r3
 8003492:	482b      	ldr	r0, [pc, #172]	; (8003540 <MX_GPIO_Init+0x19c>)
 8003494:	f003 fbfc 	bl	8006c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003498:	2320      	movs	r3, #32
 800349a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800349c:	2301      	movs	r3, #1
 800349e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a0:	2300      	movs	r3, #0
 80034a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a4:	2300      	movs	r3, #0
 80034a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80034a8:	f107 0314 	add.w	r3, r7, #20
 80034ac:	4619      	mov	r1, r3
 80034ae:	4824      	ldr	r0, [pc, #144]	; (8003540 <MX_GPIO_Init+0x19c>)
 80034b0:	f003 fbee 	bl	8006c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80034b4:	2301      	movs	r3, #1
 80034b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034b8:	2300      	movs	r3, #0
 80034ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034bc:	2300      	movs	r3, #0
 80034be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034c0:	f107 0314 	add.w	r3, r7, #20
 80034c4:	4619      	mov	r1, r3
 80034c6:	481f      	ldr	r0, [pc, #124]	; (8003544 <MX_GPIO_Init+0x1a0>)
 80034c8:	f003 fbe2 	bl	8006c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034d2:	2301      	movs	r3, #1
 80034d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d6:	2300      	movs	r3, #0
 80034d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034da:	2300      	movs	r3, #0
 80034dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034de:	f107 0314 	add.w	r3, r7, #20
 80034e2:	4619      	mov	r1, r3
 80034e4:	4817      	ldr	r0, [pc, #92]	; (8003544 <MX_GPIO_Init+0x1a0>)
 80034e6:	f003 fbd3 	bl	8006c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 80034ea:	f44f 6388 	mov.w	r3, #1088	; 0x440
 80034ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034f0:	2301      	movs	r3, #1
 80034f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f8:	2300      	movs	r3, #0
 80034fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034fc:	f107 0314 	add.w	r3, r7, #20
 8003500:	4619      	mov	r1, r3
 8003502:	4811      	ldr	r0, [pc, #68]	; (8003548 <MX_GPIO_Init+0x1a4>)
 8003504:	f003 fbc4 	bl	8006c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003508:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800350c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800350e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003514:	2300      	movs	r3, #0
 8003516:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003518:	f107 0314 	add.w	r3, r7, #20
 800351c:	4619      	mov	r1, r3
 800351e:	4808      	ldr	r0, [pc, #32]	; (8003540 <MX_GPIO_Init+0x19c>)
 8003520:	f003 fbb6 	bl	8006c90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003524:	2200      	movs	r2, #0
 8003526:	2100      	movs	r1, #0
 8003528:	2028      	movs	r0, #40	; 0x28
 800352a:	f002 ff5e 	bl	80063ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800352e:	2028      	movs	r0, #40	; 0x28
 8003530:	f002 ff77 	bl	8006422 <HAL_NVIC_EnableIRQ>

}
 8003534:	bf00      	nop
 8003536:	3728      	adds	r7, #40	; 0x28
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40023800 	.word	0x40023800
 8003540:	40020000 	.word	0x40020000
 8003544:	40020400 	.word	0x40020400
 8003548:	40020800 	.word	0x40020800

0800354c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003550:	4b12      	ldr	r3, [pc, #72]	; (800359c <MX_I2C1_Init+0x50>)
 8003552:	4a13      	ldr	r2, [pc, #76]	; (80035a0 <MX_I2C1_Init+0x54>)
 8003554:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003556:	4b11      	ldr	r3, [pc, #68]	; (800359c <MX_I2C1_Init+0x50>)
 8003558:	4a12      	ldr	r2, [pc, #72]	; (80035a4 <MX_I2C1_Init+0x58>)
 800355a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800355c:	4b0f      	ldr	r3, [pc, #60]	; (800359c <MX_I2C1_Init+0x50>)
 800355e:	2200      	movs	r2, #0
 8003560:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003562:	4b0e      	ldr	r3, [pc, #56]	; (800359c <MX_I2C1_Init+0x50>)
 8003564:	2200      	movs	r2, #0
 8003566:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003568:	4b0c      	ldr	r3, [pc, #48]	; (800359c <MX_I2C1_Init+0x50>)
 800356a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800356e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003570:	4b0a      	ldr	r3, [pc, #40]	; (800359c <MX_I2C1_Init+0x50>)
 8003572:	2200      	movs	r2, #0
 8003574:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003576:	4b09      	ldr	r3, [pc, #36]	; (800359c <MX_I2C1_Init+0x50>)
 8003578:	2200      	movs	r2, #0
 800357a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800357c:	4b07      	ldr	r3, [pc, #28]	; (800359c <MX_I2C1_Init+0x50>)
 800357e:	2200      	movs	r2, #0
 8003580:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003582:	4b06      	ldr	r3, [pc, #24]	; (800359c <MX_I2C1_Init+0x50>)
 8003584:	2200      	movs	r2, #0
 8003586:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003588:	4804      	ldr	r0, [pc, #16]	; (800359c <MX_I2C1_Init+0x50>)
 800358a:	f003 fd4f 	bl	800702c <HAL_I2C_Init>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003594:	f000 fe56 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003598:	bf00      	nop
 800359a:	bd80      	pop	{r7, pc}
 800359c:	200003b8 	.word	0x200003b8
 80035a0:	40005400 	.word	0x40005400
 80035a4:	000186a0 	.word	0x000186a0

080035a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08a      	sub	sp, #40	; 0x28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b0:	f107 0314 	add.w	r3, r7, #20
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	605a      	str	r2, [r3, #4]
 80035ba:	609a      	str	r2, [r3, #8]
 80035bc:	60da      	str	r2, [r3, #12]
 80035be:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a21      	ldr	r2, [pc, #132]	; (800364c <HAL_I2C_MspInit+0xa4>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d13c      	bne.n	8003644 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	4b20      	ldr	r3, [pc, #128]	; (8003650 <HAL_I2C_MspInit+0xa8>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	4a1f      	ldr	r2, [pc, #124]	; (8003650 <HAL_I2C_MspInit+0xa8>)
 80035d4:	f043 0302 	orr.w	r3, r3, #2
 80035d8:	6313      	str	r3, [r2, #48]	; 0x30
 80035da:	4b1d      	ldr	r3, [pc, #116]	; (8003650 <HAL_I2C_MspInit+0xa8>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	613b      	str	r3, [r7, #16]
 80035e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80035e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80035ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035ec:	2312      	movs	r3, #18
 80035ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f4:	2303      	movs	r3, #3
 80035f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80035f8:	2304      	movs	r3, #4
 80035fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035fc:	f107 0314 	add.w	r3, r7, #20
 8003600:	4619      	mov	r1, r3
 8003602:	4814      	ldr	r0, [pc, #80]	; (8003654 <HAL_I2C_MspInit+0xac>)
 8003604:	f003 fb44 	bl	8006c90 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003608:	2300      	movs	r3, #0
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	4b10      	ldr	r3, [pc, #64]	; (8003650 <HAL_I2C_MspInit+0xa8>)
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	4a0f      	ldr	r2, [pc, #60]	; (8003650 <HAL_I2C_MspInit+0xa8>)
 8003612:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003616:	6413      	str	r3, [r2, #64]	; 0x40
 8003618:	4b0d      	ldr	r3, [pc, #52]	; (8003650 <HAL_I2C_MspInit+0xa8>)
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003620:	60fb      	str	r3, [r7, #12]
 8003622:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003624:	2200      	movs	r2, #0
 8003626:	2100      	movs	r1, #0
 8003628:	201f      	movs	r0, #31
 800362a:	f002 fede 	bl	80063ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800362e:	201f      	movs	r0, #31
 8003630:	f002 fef7 	bl	8006422 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003634:	2200      	movs	r2, #0
 8003636:	2100      	movs	r1, #0
 8003638:	2020      	movs	r0, #32
 800363a:	f002 fed6 	bl	80063ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800363e:	2020      	movs	r0, #32
 8003640:	f002 feef 	bl	8006422 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003644:	bf00      	nop
 8003646:	3728      	adds	r7, #40	; 0x28
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40005400 	.word	0x40005400
 8003650:	40023800 	.word	0x40023800
 8003654:	40020400 	.word	0x40020400

08003658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800365e:	f002 f975 	bl	800594c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003662:	f000 fb8d 	bl	8003d80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003666:	f7ff fe9d 	bl	80033a4 <MX_GPIO_Init>
  MX_DMA_Init();
 800366a:	f7ff fe65 	bl	8003338 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800366e:	f001 f979 	bl	8004964 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8003672:	f000 febb 	bl	80043ec <MX_TIM2_Init>
  MX_TIM5_Init();
 8003676:	f000 ffd1 	bl	800461c <MX_TIM5_Init>
  MX_TIM3_Init();
 800367a:	f000 ff0b 	bl	8004494 <MX_TIM3_Init>
  MX_I2C1_Init();
 800367e:	f7ff ff65 	bl	800354c <MX_I2C1_Init>
  MX_TIM4_Init();
 8003682:	f000 ff7d 	bl	8004580 <MX_TIM4_Init>
  MX_TIM11_Init();
 8003686:	f001 f817 	bl	80046b8 <MX_TIM11_Init>
  MX_ADC1_Init();
 800368a:	f7ff fd7d 	bl	8003188 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  //Setup Initial vaules
  InitKalmanStruct(&KF,Var_Q,Var_R);
 800368e:	4b9d      	ldr	r3, [pc, #628]	; (8003904 <main+0x2ac>)
 8003690:	edd3 7a00 	vldr	s15, [r3]
 8003694:	4b9c      	ldr	r3, [pc, #624]	; (8003908 <main+0x2b0>)
 8003696:	ed93 7a00 	vldr	s14, [r3]
 800369a:	eef0 0a47 	vmov.f32	s1, s14
 800369e:	eeb0 0a67 	vmov.f32	s0, s15
 80036a2:	489a      	ldr	r0, [pc, #616]	; (800390c <main+0x2b4>)
 80036a4:	f7fe f800 	bl	80016a8 <InitKalmanStruct>

  InitReadEncoder(&ReadEncoderParam, 1000);
 80036a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80036ac:	4898      	ldr	r0, [pc, #608]	; (8003910 <main+0x2b8>)
 80036ae:	f7ff f9da 	bl	8002a66 <InitReadEncoder>

  QuinticSetup(&QuinticVar, vmax, amax);
 80036b2:	4b98      	ldr	r3, [pc, #608]	; (8003914 <main+0x2bc>)
 80036b4:	edd3 7a00 	vldr	s15, [r3]
 80036b8:	4b97      	ldr	r3, [pc, #604]	; (8003918 <main+0x2c0>)
 80036ba:	ed93 7a00 	vldr	s14, [r3]
 80036be:	eef0 0a47 	vmov.f32	s1, s14
 80036c2:	eeb0 0a67 	vmov.f32	s0, s15
 80036c6:	4895      	ldr	r0, [pc, #596]	; (800391c <main+0x2c4>)
 80036c8:	f7fe fe6c 	bl	80023a4 <QuinticSetup>

  PIDSetup(&PositionLoop, 15, 2.5, 0.00001, 10);
 80036cc:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 80036d0:	ed9f 1a93 	vldr	s2, [pc, #588]	; 8003920 <main+0x2c8>
 80036d4:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
 80036d8:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 80036dc:	4891      	ldr	r0, [pc, #580]	; (8003924 <main+0x2cc>)
 80036de:	f7fe fd35 	bl	800214c <PIDSetup>
  PIDSetup(&VelocityLoop, 5.0, 0.00000001, 0, 0.00003);
 80036e2:	eddf 1a91 	vldr	s3, [pc, #580]	; 8003928 <main+0x2d0>
 80036e6:	ed9f 1a91 	vldr	s2, [pc, #580]	; 800392c <main+0x2d4>
 80036ea:	eddf 0a91 	vldr	s1, [pc, #580]	; 8003930 <main+0x2d8>
 80036ee:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80036f2:	4890      	ldr	r0, [pc, #576]	; (8003934 <main+0x2dc>)
 80036f4:	f7fe fd2a 	bl	800214c <PIDSetup>


  //Timers Start
  HAL_TIM_Base_Start_IT(&htim4);
 80036f8:	488f      	ldr	r0, [pc, #572]	; (8003938 <main+0x2e0>)
 80036fa:	f006 f8ff 	bl	80098fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2);  //Start QEI
 80036fe:	2104      	movs	r1, #4
 8003700:	488e      	ldr	r0, [pc, #568]	; (800393c <main+0x2e4>)
 8003702:	f006 fc5b 	bl	8009fbc <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);//Start PWM
 8003706:	2108      	movs	r1, #8
 8003708:	488d      	ldr	r0, [pc, #564]	; (8003940 <main+0x2e8>)
 800370a:	f006 fa25 	bl	8009b58 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 800370e:	488d      	ldr	r0, [pc, #564]	; (8003944 <main+0x2ec>)
 8003710:	f006 f8f4 	bl	80098fc <HAL_TIM_Base_Start_IT>

  hmodbus.huart = &huart2;
 8003714:	4b8c      	ldr	r3, [pc, #560]	; (8003948 <main+0x2f0>)
 8003716:	4a8d      	ldr	r2, [pc, #564]	; (800394c <main+0x2f4>)
 8003718:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim11;
 800371a:	4b8b      	ldr	r3, [pc, #556]	; (8003948 <main+0x2f0>)
 800371c:	4a8c      	ldr	r2, [pc, #560]	; (8003950 <main+0x2f8>)
 800371e:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8003720:	4b89      	ldr	r3, [pc, #548]	; (8003948 <main+0x2f0>)
 8003722:	2215      	movs	r2, #21
 8003724:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize = 200;
 8003726:	4b88      	ldr	r3, [pc, #544]	; (8003948 <main+0x2f0>)
 8003728:	22c8      	movs	r2, #200	; 0xc8
 800372a:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 800372c:	4989      	ldr	r1, [pc, #548]	; (8003954 <main+0x2fc>)
 800372e:	4886      	ldr	r0, [pc, #536]	; (8003948 <main+0x2f0>)
 8003730:	f7fe fa02 	bl	8001b38 <Modbus_init>

  HAL_ADC_Start_DMA(&hadc1, VR, 2); // Start ADC
 8003734:	2202      	movs	r2, #2
 8003736:	4988      	ldr	r1, [pc, #544]	; (8003958 <main+0x300>)
 8003738:	4888      	ldr	r0, [pc, #544]	; (800395c <main+0x304>)
 800373a:	f002 f9bd 	bl	8005ab8 <HAL_ADC_Start_DMA>

	//EndEff
	TestState = GripperModeOn;
 800373e:	4b88      	ldr	r3, [pc, #544]	; (8003960 <main+0x308>)
 8003740:	2204      	movs	r2, #4
 8003742:	701a      	strb	r2, [r3, #0]
	Stamp = 1;
 8003744:	4b87      	ldr	r3, [pc, #540]	; (8003964 <main+0x30c>)
 8003746:	2201      	movs	r2, #1
 8003748:	701a      	strb	r2, [r3, #0]
	TestMode();
 800374a:	f7fd fe7b 	bl	8001444 <TestMode>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	Modbus_Protocal_Worker();
 800374e:	f7fe fa7f 	bl	8001c50 <Modbus_Protocal_Worker>
	static uint32_t timestamp =0;
	static uint32_t Modbustimestamp = 0;
	if (HAL_GetTick() >= Modbustimestamp)
 8003752:	f002 f961 	bl	8005a18 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	4b83      	ldr	r3, [pc, #524]	; (8003968 <main+0x310>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	429a      	cmp	r2, r3
 800375e:	d31c      	bcc.n	800379a <main+0x142>
	{
	  Modbustimestamp = HAL_GetTick() + 200;
 8003760:	f002 f95a 	bl	8005a18 <HAL_GetTick>
 8003764:	4603      	mov	r3, r0
 8003766:	33c8      	adds	r3, #200	; 0xc8
 8003768:	4a7f      	ldr	r2, [pc, #508]	; (8003968 <main+0x310>)
 800376a:	6013      	str	r3, [r2, #0]
	  registerFrame[0x00].U16 = 0b0101100101100001;
 800376c:	4b79      	ldr	r3, [pc, #484]	; (8003954 <main+0x2fc>)
 800376e:	f645 1261 	movw	r2, #22881	; 0x5961
 8003772:	801a      	strh	r2, [r3, #0]
	  //Update y axis position to basesystem
	  registerFrame[0x11].U16 = (((QEIData.QEIPosition-OpVar.HomePosOffset) * 120) / 8192) * 10;
 8003774:	4b7d      	ldr	r3, [pc, #500]	; (800396c <main+0x314>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	461a      	mov	r2, r3
 800377a:	4b7d      	ldr	r3, [pc, #500]	; (8003970 <main+0x318>)
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	1ad2      	subs	r2, r2, r3
 8003780:	4613      	mov	r3, r2
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	1a9b      	subs	r3, r3, r2
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	0b5b      	lsrs	r3, r3, #13
 800378a:	b29b      	uxth	r3, r3
 800378c:	461a      	mov	r2, r3
 800378e:	0092      	lsls	r2, r2, #2
 8003790:	4413      	add	r3, r2
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	b29a      	uxth	r2, r3
 8003796:	4b6f      	ldr	r3, [pc, #444]	; (8003954 <main+0x2fc>)
 8003798:	845a      	strh	r2, [r3, #34]	; 0x22
	}

	if(OpVar.ProxStop == 0)
 800379a:	4b75      	ldr	r3, [pc, #468]	; (8003970 <main+0x318>)
 800379c:	795b      	ldrb	r3, [r3, #5]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f040 82ca 	bne.w	8003d38 <main+0x6e0>
	{
		switch(OpState)
 80037a4:	4b73      	ldr	r3, [pc, #460]	; (8003974 <main+0x31c>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b0a      	cmp	r3, #10
 80037aa:	d8d0      	bhi.n	800374e <main+0xf6>
 80037ac:	a201      	add	r2, pc, #4	; (adr r2, 80037b4 <main+0x15c>)
 80037ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b2:	bf00      	nop
 80037b4:	080037e1 	.word	0x080037e1
 80037b8:	080037f5 	.word	0x080037f5
 80037bc:	080038af 	.word	0x080038af
 80037c0:	080038eb 	.word	0x080038eb
 80037c4:	08003981 	.word	0x08003981
 80037c8:	0800374f 	.word	0x0800374f
 80037cc:	0800374f 	.word	0x0800374f
 80037d0:	08003a29 	.word	0x08003a29
 80037d4:	08003b21 	.word	0x08003b21
 80037d8:	08003c05 	.word	0x08003c05
 80037dc:	08003d1d 	.word	0x08003d1d
			{
			case Init:
				OpVar.ControllerEnable = 0;
 80037e0:	4b63      	ldr	r3, [pc, #396]	; (8003970 <main+0x318>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	745a      	strb	r2, [r3, #17]
				OpVar.JoyEnable = 0;
 80037e6:	4b62      	ldr	r3, [pc, #392]	; (8003970 <main+0x318>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	749a      	strb	r2, [r3, #18]
				SetHome(&OpVar);
 80037ec:	4860      	ldr	r0, [pc, #384]	; (8003970 <main+0x318>)
 80037ee:	f7ff f977 	bl	8002ae0 <SetHome>
			break;
 80037f2:	e2b4      	b.n	8003d5e <main+0x706>
			case PreHoming:
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 80037f4:	4b52      	ldr	r3, [pc, #328]	; (8003940 <main+0x2e8>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2200      	movs	r2, #0
 80037fa:	63da      	str	r2, [r3, #60]	; 0x3c
				QuinticVar.current_velo = 0;
 80037fc:	4b47      	ldr	r3, [pc, #284]	; (800391c <main+0x2c4>)
 80037fe:	2200      	movs	r2, #0
 8003800:	611a      	str	r2, [r3, #16]
				OpVar.HomingKey = 0;
 8003802:	4b5b      	ldr	r3, [pc, #364]	; (8003970 <main+0x318>)
 8003804:	2200      	movs	r2, #0
 8003806:	719a      	strb	r2, [r3, #6]
				if(HAL_GetTick() >= OpVar.waitTime)
 8003808:	f002 f906 	bl	8005a18 <HAL_GetTick>
 800380c:	4603      	mov	r3, r0
 800380e:	4a58      	ldr	r2, [pc, #352]	; (8003970 <main+0x318>)
 8003810:	8812      	ldrh	r2, [r2, #0]
 8003812:	4293      	cmp	r3, r2
 8003814:	d346      	bcc.n	80038a4 <main+0x24c>
				{
					OpVar.waitTime = 0;
 8003816:	4b56      	ldr	r3, [pc, #344]	; (8003970 <main+0x318>)
 8003818:	2200      	movs	r2, #0
 800381a:	801a      	strh	r2, [r3, #0]
					OpState = Homing;
 800381c:	4b55      	ldr	r3, [pc, #340]	; (8003974 <main+0x31c>)
 800381e:	2202      	movs	r2, #2
 8003820:	701a      	strb	r2, [r3, #0]
					InitKalmanStruct(&KF,Var_Q,Var_R);
 8003822:	4b38      	ldr	r3, [pc, #224]	; (8003904 <main+0x2ac>)
 8003824:	edd3 7a00 	vldr	s15, [r3]
 8003828:	4b37      	ldr	r3, [pc, #220]	; (8003908 <main+0x2b0>)
 800382a:	ed93 7a00 	vldr	s14, [r3]
 800382e:	eef0 0a47 	vmov.f32	s1, s14
 8003832:	eeb0 0a67 	vmov.f32	s0, s15
 8003836:	4835      	ldr	r0, [pc, #212]	; (800390c <main+0x2b4>)
 8003838:	f7fd ff36 	bl	80016a8 <InitKalmanStruct>
					PIDSetup(&PositionLoop, 15, 2.2, 0.00001, 10);
 800383c:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8003840:	ed9f 1a37 	vldr	s2, [pc, #220]	; 8003920 <main+0x2c8>
 8003844:	eddf 0a4c 	vldr	s1, [pc, #304]	; 8003978 <main+0x320>
 8003848:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 800384c:	4835      	ldr	r0, [pc, #212]	; (8003924 <main+0x2cc>)
 800384e:	f7fe fc7d 	bl	800214c <PIDSetup>
					PIDSetup(&VelocityLoop, 5.0, 0.00000001, 0, 0.00003);
 8003852:	eddf 1a35 	vldr	s3, [pc, #212]	; 8003928 <main+0x2d0>
 8003856:	ed9f 1a35 	vldr	s2, [pc, #212]	; 800392c <main+0x2d4>
 800385a:	eddf 0a35 	vldr	s1, [pc, #212]	; 8003930 <main+0x2d8>
 800385e:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8003862:	4834      	ldr	r0, [pc, #208]	; (8003934 <main+0x2dc>)
 8003864:	f7fe fc72 	bl	800214c <PIDSetup>
					//OpVar.HomePosOffset = __HAL_TIM_GET_COUNTER(&htim2);
					QuinticVar.start_pos = __HAL_TIM_GET_COUNTER(&htim2);
 8003868:	4b34      	ldr	r3, [pc, #208]	; (800393c <main+0x2e4>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	461a      	mov	r2, r3
 8003870:	4b2a      	ldr	r3, [pc, #168]	; (800391c <main+0x2c4>)
 8003872:	601a      	str	r2, [r3, #0]
					QuinticVar.final_pos = __HAL_TIM_GET_COUNTER(&htim2)*0.5 ;
 8003874:	4b31      	ldr	r3, [pc, #196]	; (800393c <main+0x2e4>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	4618      	mov	r0, r3
 800387c:	f7fc fdee 	bl	800045c <__aeabi_ui2d>
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	4b3d      	ldr	r3, [pc, #244]	; (800397c <main+0x324>)
 8003886:	f7fc fe63 	bl	8000550 <__aeabi_dmul>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	4610      	mov	r0, r2
 8003890:	4619      	mov	r1, r3
 8003892:	f7fd f90d 	bl	8000ab0 <__aeabi_d2iz>
 8003896:	4603      	mov	r3, r0
 8003898:	4a20      	ldr	r2, [pc, #128]	; (800391c <main+0x2c4>)
 800389a:	6053      	str	r3, [r2, #4]
					OpVar.HomingKey = 0;
 800389c:	4b34      	ldr	r3, [pc, #208]	; (8003970 <main+0x318>)
 800389e:	2200      	movs	r2, #0
 80038a0:	719a      	strb	r2, [r3, #6]
				}
				else
				{
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
				}
			break;
 80038a2:	e25c      	b.n	8003d5e <main+0x706>
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 80038a4:	4b26      	ldr	r3, [pc, #152]	; (8003940 <main+0x2e8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2200      	movs	r2, #0
 80038aa:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80038ac:	e257      	b.n	8003d5e <main+0x706>
			case Homing:
					OpVar.ControllerEnable = 1;
 80038ae:	4b30      	ldr	r3, [pc, #192]	; (8003970 <main+0x318>)
 80038b0:	2201      	movs	r2, #1
 80038b2:	745a      	strb	r2, [r3, #17]
					if(PositionLoop.IsSteady == 1)
 80038b4:	4b1b      	ldr	r3, [pc, #108]	; (8003924 <main+0x2cc>)
 80038b6:	f993 302d 	ldrsb.w	r3, [r3, #45]	; 0x2d
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	f040 8246 	bne.w	8003d4c <main+0x6f4>
					{
						OpVar.HomingKey = 0;
 80038c0:	4b2b      	ldr	r3, [pc, #172]	; (8003970 <main+0x318>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	719a      	strb	r2, [r3, #6]
						OpVar.HomePosOffset = __HAL_TIM_GET_COUNTER(&htim2);
 80038c6:	4b1d      	ldr	r3, [pc, #116]	; (800393c <main+0x2e4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	4a28      	ldr	r2, [pc, #160]	; (8003970 <main+0x318>)
 80038ce:	60d3      	str	r3, [r2, #12]
						OpState = Buffer;
 80038d0:	4b28      	ldr	r3, [pc, #160]	; (8003974 <main+0x31c>)
 80038d2:	2203      	movs	r2, #3
 80038d4:	701a      	strb	r2, [r3, #0]
						OpVar.waitTime = HAL_GetTick() + 1000;
 80038d6:	f002 f89f 	bl	8005a18 <HAL_GetTick>
 80038da:	4603      	mov	r3, r0
 80038dc:	b29b      	uxth	r3, r3
 80038de:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	4b22      	ldr	r3, [pc, #136]	; (8003970 <main+0x318>)
 80038e6:	801a      	strh	r2, [r3, #0]
					}
			break;
 80038e8:	e230      	b.n	8003d4c <main+0x6f4>
			case Buffer:
				if(HAL_GetTick() >= OpVar.waitTime)
 80038ea:	f002 f895 	bl	8005a18 <HAL_GetTick>
 80038ee:	4603      	mov	r3, r0
 80038f0:	4a1f      	ldr	r2, [pc, #124]	; (8003970 <main+0x318>)
 80038f2:	8812      	ldrh	r2, [r2, #0]
 80038f4:	4293      	cmp	r3, r2
 80038f6:	f0c0 822b 	bcc.w	8003d50 <main+0x6f8>
				{
						OpState = Home_Ok;
 80038fa:	4b1e      	ldr	r3, [pc, #120]	; (8003974 <main+0x31c>)
 80038fc:	2204      	movs	r2, #4
 80038fe:	701a      	strb	r2, [r3, #0]
				}
				break;
 8003900:	e226      	b.n	8003d50 <main+0x6f8>
 8003902:	bf00      	nop
 8003904:	2000022c 	.word	0x2000022c
 8003908:	20000230 	.word	0x20000230
 800390c:	200004e8 	.word	0x200004e8
 8003910:	20000424 	.word	0x20000424
 8003914:	20000224 	.word	0x20000224
 8003918:	20000228 	.word	0x20000228
 800391c:	20000438 	.word	0x20000438
 8003920:	3727c5ac 	.word	0x3727c5ac
 8003924:	20000488 	.word	0x20000488
 8003928:	37fba882 	.word	0x37fba882
 800392c:	00000000 	.word	0x00000000
 8003930:	322bcc77 	.word	0x322bcc77
 8003934:	200004b8 	.word	0x200004b8
 8003938:	20000fc8 	.word	0x20000fc8
 800393c:	20000e60 	.word	0x20000e60
 8003940:	20000f14 	.word	0x20000f14
 8003944:	2000107c 	.word	0x2000107c
 8003948:	200007c4 	.word	0x200007c4
 800394c:	200011e4 	.word	0x200011e4
 8003950:	20001130 	.word	0x20001130
 8003954:	20000c9c 	.word	0x20000c9c
 8003958:	20000304 	.word	0x20000304
 800395c:	20000310 	.word	0x20000310
 8003960:	200002c4 	.word	0x200002c4
 8003964:	200002c0 	.word	0x200002c0
 8003968:	20000e54 	.word	0x20000e54
 800396c:	2000042c 	.word	0x2000042c
 8003970:	20000410 	.word	0x20000410
 8003974:	2000040c 	.word	0x2000040c
 8003978:	400ccccd 	.word	0x400ccccd
 800397c:	3fe00000 	.word	0x3fe00000
			case Home_Ok:
				OpVar.ControllerEnable = 0;	//Disable Controller
 8003980:	4baa      	ldr	r3, [pc, #680]	; (8003c2c <main+0x5d4>)
 8003982:	2200      	movs	r2, #0
 8003984:	745a      	strb	r2, [r3, #17]
				OpVar.JoyEnable = 1;
 8003986:	4ba9      	ldr	r3, [pc, #676]	; (8003c2c <main+0x5d4>)
 8003988:	2201      	movs	r2, #1
 800398a:	749a      	strb	r2, [r3, #18]
				if(registerFrame[0x44].U16 == 0)
 800398c:	4ba8      	ldr	r3, [pc, #672]	; (8003c30 <main+0x5d8>)
 800398e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003992:	2b00      	cmp	r3, #0
 8003994:	d103      	bne.n	800399e <main+0x346>
				{
					registerFrame[0x40].U16 = 0b0000;	//ResetState
 8003996:	4ba6      	ldr	r3, [pc, #664]	; (8003c30 <main+0x5d8>)
 8003998:	2200      	movs	r2, #0
 800399a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
				}
				if(HAL_GetTick() >= timestamp)
 800399e:	f002 f83b 	bl	8005a18 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	4ba3      	ldr	r3, [pc, #652]	; (8003c34 <main+0x5dc>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	f0c0 81d3 	bcc.w	8003d54 <main+0x6fc>
				{
					timestamp = HAL_GetTick() + 10;
 80039ae:	f002 f833 	bl	8005a18 <HAL_GetTick>
 80039b2:	4603      	mov	r3, r0
 80039b4:	330a      	adds	r3, #10
 80039b6:	4a9f      	ldr	r2, [pc, #636]	; (8003c34 <main+0x5dc>)
 80039b8:	6013      	str	r3, [r2, #0]

					if(!onetime){
 80039ba:	4b9f      	ldr	r3, [pc, #636]	; (8003c38 <main+0x5e0>)
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10a      	bne.n	80039d8 <main+0x380>

						TestState = TestModeOn;
 80039c2:	4b9e      	ldr	r3, [pc, #632]	; (8003c3c <main+0x5e4>)
 80039c4:	2202      	movs	r2, #2
 80039c6:	701a      	strb	r2, [r3, #0]
						Stamp = 1;
 80039c8:	4b9d      	ldr	r3, [pc, #628]	; (8003c40 <main+0x5e8>)
 80039ca:	2201      	movs	r2, #1
 80039cc:	701a      	strb	r2, [r3, #0]
						TestMode();
 80039ce:	f7fd fd39 	bl	8001444 <TestMode>

						onetime = 1;
 80039d2:	4b99      	ldr	r3, [pc, #612]	; (8003c38 <main+0x5e0>)
 80039d4:	2201      	movs	r2, #1
 80039d6:	701a      	strb	r2, [r3, #0]
					}
					//JoyStick
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);	//Open Joy Pilot lamp
 80039d8:	2201      	movs	r2, #1
 80039da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80039de:	4899      	ldr	r0, [pc, #612]	; (8003c44 <main+0x5ec>)
 80039e0:	f003 faf2 	bl	8006fc8 <HAL_GPIO_WritePin>

					if(registerFrame[0x01].U16 == 4)	//Home
 80039e4:	4b92      	ldr	r3, [pc, #584]	; (8003c30 <main+0x5d8>)
 80039e6:	885b      	ldrh	r3, [r3, #2]
 80039e8:	2b04      	cmp	r3, #4
 80039ea:	d106      	bne.n	80039fa <main+0x3a2>
					{
						OpState = Init;
 80039ec:	4b96      	ldr	r3, [pc, #600]	; (8003c48 <main+0x5f0>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	701a      	strb	r2, [r3, #0]
						OpVar.ControllerEnable = 0;
 80039f2:	4b8e      	ldr	r3, [pc, #568]	; (8003c2c <main+0x5d4>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	745a      	strb	r2, [r3, #17]
					{
						OpState = PreProcess;
						OpVar.BaseMode = 1;
					}
				}
			break;
 80039f8:	e1ac      	b.n	8003d54 <main+0x6fc>
					else if(registerFrame[0x01].U16 == 8)	//TrayMode
 80039fa:	4b8d      	ldr	r3, [pc, #564]	; (8003c30 <main+0x5d8>)
 80039fc:	885b      	ldrh	r3, [r3, #2]
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d106      	bne.n	8003a10 <main+0x3b8>
						OpState = PreProcess;
 8003a02:	4b91      	ldr	r3, [pc, #580]	; (8003c48 <main+0x5f0>)
 8003a04:	2207      	movs	r2, #7
 8003a06:	701a      	strb	r2, [r3, #0]
						OpVar.BaseMode = 0;
 8003a08:	4b88      	ldr	r3, [pc, #544]	; (8003c2c <main+0x5d4>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	741a      	strb	r2, [r3, #16]
			break;
 8003a0e:	e1a1      	b.n	8003d54 <main+0x6fc>
					else if(registerFrame[0x01].U16 == 16)	//PointMode
 8003a10:	4b87      	ldr	r3, [pc, #540]	; (8003c30 <main+0x5d8>)
 8003a12:	885b      	ldrh	r3, [r3, #2]
 8003a14:	2b10      	cmp	r3, #16
 8003a16:	f040 819d 	bne.w	8003d54 <main+0x6fc>
						OpState = PreProcess;
 8003a1a:	4b8b      	ldr	r3, [pc, #556]	; (8003c48 <main+0x5f0>)
 8003a1c:	2207      	movs	r2, #7
 8003a1e:	701a      	strb	r2, [r3, #0]
						OpVar.BaseMode = 1;
 8003a20:	4b82      	ldr	r3, [pc, #520]	; (8003c2c <main+0x5d4>)
 8003a22:	2201      	movs	r2, #1
 8003a24:	741a      	strb	r2, [r3, #16]
			break;
 8003a26:	e195      	b.n	8003d54 <main+0x6fc>
			case TrayMode:
				//OpVar.ControllerEnable = 0;
			break;

			case PreProcess:
				OpVar.ControllerEnable = 0;
 8003a28:	4b80      	ldr	r3, [pc, #512]	; (8003c2c <main+0x5d4>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	745a      	strb	r2, [r3, #17]
				if(OpVar.BaseMode == 0)	//TrayMode
 8003a2e:	4b7f      	ldr	r3, [pc, #508]	; (8003c2c <main+0x5d4>)
 8003a30:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d166      	bne.n	8003b06 <main+0x4ae>
				{
					TraySetup(&PickTray,TrayPoint[0], TrayPoint[1], TrayPoint[2], TrayPoint[3]);
 8003a38:	4b84      	ldr	r3, [pc, #528]	; (8003c4c <main+0x5f4>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	ee07 3a90 	vmov	s15, r3
 8003a40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a44:	4b81      	ldr	r3, [pc, #516]	; (8003c4c <main+0x5f4>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	ee07 3a10 	vmov	s14, r3
 8003a4c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003a50:	4b7e      	ldr	r3, [pc, #504]	; (8003c4c <main+0x5f4>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	ee06 3a90 	vmov	s13, r3
 8003a58:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003a5c:	4b7b      	ldr	r3, [pc, #492]	; (8003c4c <main+0x5f4>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	ee06 3a10 	vmov	s12, r3
 8003a64:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8003a68:	eef0 1a46 	vmov.f32	s3, s12
 8003a6c:	eeb0 1a66 	vmov.f32	s2, s13
 8003a70:	eef0 0a47 	vmov.f32	s1, s14
 8003a74:	eeb0 0a67 	vmov.f32	s0, s15
 8003a78:	4875      	ldr	r0, [pc, #468]	; (8003c50 <main+0x5f8>)
 8003a7a:	f7ff f86d 	bl	8002b58 <TraySetup>
					TraySetup(&PlaceTray,TrayPoint[4], TrayPoint[5], TrayPoint[6], TrayPoint[7]);
 8003a7e:	4b73      	ldr	r3, [pc, #460]	; (8003c4c <main+0x5f4>)
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	ee07 3a90 	vmov	s15, r3
 8003a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a8a:	4b70      	ldr	r3, [pc, #448]	; (8003c4c <main+0x5f4>)
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	ee07 3a10 	vmov	s14, r3
 8003a92:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003a96:	4b6d      	ldr	r3, [pc, #436]	; (8003c4c <main+0x5f4>)
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	ee06 3a90 	vmov	s13, r3
 8003a9e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003aa2:	4b6a      	ldr	r3, [pc, #424]	; (8003c4c <main+0x5f4>)
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	ee06 3a10 	vmov	s12, r3
 8003aaa:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8003aae:	eef0 1a46 	vmov.f32	s3, s12
 8003ab2:	eeb0 1a66 	vmov.f32	s2, s13
 8003ab6:	eef0 0a47 	vmov.f32	s1, s14
 8003aba:	eeb0 0a67 	vmov.f32	s0, s15
 8003abe:	4865      	ldr	r0, [pc, #404]	; (8003c54 <main+0x5fc>)
 8003ac0:	f7ff f84a 	bl	8002b58 <TraySetup>
					TrayLocalization(&PickTray);
 8003ac4:	4862      	ldr	r0, [pc, #392]	; (8003c50 <main+0x5f8>)
 8003ac6:	f7ff f867 	bl	8002b98 <TrayLocalization>
					TrayLocalization(&PlaceTray);
 8003aca:	4862      	ldr	r0, [pc, #392]	; (8003c54 <main+0x5fc>)
 8003acc:	f7ff f864 	bl	8002b98 <TrayLocalization>
					QuinticVar.final_pos = PickTray.Holes_Y[0];
 8003ad0:	4b5f      	ldr	r3, [pc, #380]	; (8003c50 <main+0x5f8>)
 8003ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	4b60      	ldr	r3, [pc, #384]	; (8003c58 <main+0x600>)
 8003ad8:	605a      	str	r2, [r3, #4]
					RunX_Axis(PickTray.Holes_X[0], 2500, 3);
 8003ada:	4b5d      	ldr	r3, [pc, #372]	; (8003c50 <main+0x5f8>)
 8003adc:	edd3 7a04 	vldr	s15, [r3, #16]
 8003ae0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ae4:	2203      	movs	r2, #3
 8003ae6:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8003aea:	ee17 0a90 	vmov	r0, s15
 8003aee:	f7ff f811 	bl	8002b14 <RunX_Axis>
					OpVar.task = GoPick;	//current task.
 8003af2:	4b4e      	ldr	r3, [pc, #312]	; (8003c2c <main+0x5d4>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	70da      	strb	r2, [r3, #3]
					OpVar.holeInd = 0;
 8003af8:	4b4c      	ldr	r3, [pc, #304]	; (8003c2c <main+0x5d4>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	711a      	strb	r2, [r3, #4]
					OpState = ControlLoop;
 8003afe:	4b52      	ldr	r3, [pc, #328]	; (8003c48 <main+0x5f0>)
 8003b00:	2208      	movs	r2, #8
 8003b02:	701a      	strb	r2, [r3, #0]
					QuinticVar.final_pos = 0; //Point from Basesystem
					OpState = ControlLoop;

				}

			break;
 8003b04:	e128      	b.n	8003d58 <main+0x700>
				else if (OpVar.BaseMode == 1)	//PointMode
 8003b06:	4b49      	ldr	r3, [pc, #292]	; (8003c2c <main+0x5d4>)
 8003b08:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	f040 8123 	bne.w	8003d58 <main+0x700>
					QuinticVar.final_pos = 0; //Point from Basesystem
 8003b12:	4b51      	ldr	r3, [pc, #324]	; (8003c58 <main+0x600>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	605a      	str	r2, [r3, #4]
					OpState = ControlLoop;
 8003b18:	4b4b      	ldr	r3, [pc, #300]	; (8003c48 <main+0x5f0>)
 8003b1a:	2208      	movs	r2, #8
 8003b1c:	701a      	strb	r2, [r3, #0]
			break;
 8003b1e:	e11b      	b.n	8003d58 <main+0x700>

			case ControlLoop:
				OpVar.ControllerEnable = 1;
 8003b20:	4b42      	ldr	r3, [pc, #264]	; (8003c2c <main+0x5d4>)
 8003b22:	2201      	movs	r2, #1
 8003b24:	745a      	strb	r2, [r3, #17]
				OpVar.HomingKey = 2;
 8003b26:	4b41      	ldr	r3, [pc, #260]	; (8003c2c <main+0x5d4>)
 8003b28:	2202      	movs	r2, #2
 8003b2a:	719a      	strb	r2, [r3, #6]
				if(PositionLoop.IsSteady == 1)
 8003b2c:	4b4b      	ldr	r3, [pc, #300]	; (8003c5c <main+0x604>)
 8003b2e:	f993 302d 	ldrsb.w	r3, [r3, #45]	; 0x2d
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	f040 8112 	bne.w	8003d5c <main+0x704>
				{
					float32_t refX_Axis;
					switch(OpVar.task)
 8003b38:	4b3c      	ldr	r3, [pc, #240]	; (8003c2c <main+0x5d4>)
 8003b3a:	78db      	ldrb	r3, [r3, #3]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <main+0x4ee>
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d00f      	beq.n	8003b64 <main+0x50c>
 8003b44:	e01d      	b.n	8003b82 <main+0x52a>
					{
					case GoPick:
						refX_Axis = PickTray.Holes_X[OpVar.holeInd] * 10;
 8003b46:	4b39      	ldr	r3, [pc, #228]	; (8003c2c <main+0x5d4>)
 8003b48:	791b      	ldrb	r3, [r3, #4]
 8003b4a:	4a41      	ldr	r2, [pc, #260]	; (8003c50 <main+0x5f8>)
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	edd3 7a00 	vldr	s15, [r3]
 8003b56:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003b5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b5e:	edc7 7a01 	vstr	s15, [r7, #4]
						break;
 8003b62:	e00e      	b.n	8003b82 <main+0x52a>
					case GoPlace:
						refX_Axis = PlaceTray.Holes_X[OpVar.holeInd] * 10;
 8003b64:	4b31      	ldr	r3, [pc, #196]	; (8003c2c <main+0x5d4>)
 8003b66:	791b      	ldrb	r3, [r3, #4]
 8003b68:	4a3a      	ldr	r2, [pc, #232]	; (8003c54 <main+0x5fc>)
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	edd3 7a00 	vldr	s15, [r3]
 8003b74:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003b78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b7c:	edc7 7a01 	vstr	s15, [r7, #4]
						break;
 8003b80:	bf00      	nop
					}
					if(abs(registerFrame[0x44].U16 - refX_Axis)<=1)
 8003b82:	4b2b      	ldr	r3, [pc, #172]	; (8003c30 <main+0x5d8>)
 8003b84:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003b88:	ee07 3a90 	vmov	s15, r3
 8003b8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b90:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b9c:	ee17 3a90 	vmov	r3, s15
 8003ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba4:	f2c0 80da 	blt.w	8003d5c <main+0x704>
 8003ba8:	4b21      	ldr	r3, [pc, #132]	; (8003c30 <main+0x5d8>)
 8003baa:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003bae:	ee07 3a90 	vmov	s15, r3
 8003bb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bc2:	ee17 3a90 	vmov	r3, s15
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	f300 80c8 	bgt.w	8003d5c <main+0x704>
					{
						if(OpVar.BaseMode == 0)	//Tray
 8003bcc:	4b17      	ldr	r3, [pc, #92]	; (8003c2c <main+0x5d4>)
 8003bce:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10c      	bne.n	8003bf0 <main+0x598>
						{
							OpVar.waitTime = HAL_GetTick() + 2000;
 8003bd6:	f001 ff1f 	bl	8005a18 <HAL_GetTick>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	4b11      	ldr	r3, [pc, #68]	; (8003c2c <main+0x5d4>)
 8003be6:	801a      	strh	r2, [r3, #0]
							OpState = GripperWaiting;
 8003be8:	4b17      	ldr	r3, [pc, #92]	; (8003c48 <main+0x5f0>)
 8003bea:	2209      	movs	r2, #9
 8003bec:	701a      	strb	r2, [r3, #0]
						{
							OpState = Home_Ok;
						}
					}
				}
			break;
 8003bee:	e0b5      	b.n	8003d5c <main+0x704>
						else if (OpVar.BaseMode == 1)	//Point
 8003bf0:	4b0e      	ldr	r3, [pc, #56]	; (8003c2c <main+0x5d4>)
 8003bf2:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	f040 80b0 	bne.w	8003d5c <main+0x704>
							OpState = Home_Ok;
 8003bfc:	4b12      	ldr	r3, [pc, #72]	; (8003c48 <main+0x5f0>)
 8003bfe:	2204      	movs	r2, #4
 8003c00:	701a      	strb	r2, [r3, #0]
			break;
 8003c02:	e0ab      	b.n	8003d5c <main+0x704>

			case GripperWaiting:
				OpVar.ControllerEnable = 1;
 8003c04:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <main+0x5d4>)
 8003c06:	2201      	movs	r2, #1
 8003c08:	745a      	strb	r2, [r3, #17]
				if( HAL_GetTick() >= OpVar.waitTime)
 8003c0a:	f001 ff05 	bl	8005a18 <HAL_GetTick>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	4a06      	ldr	r2, [pc, #24]	; (8003c2c <main+0x5d4>)
 8003c12:	8812      	ldrh	r2, [r2, #0]
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d37f      	bcc.n	8003d18 <main+0x6c0>
				{
					OpVar.waitTime = 0;
 8003c18:	4b04      	ldr	r3, [pc, #16]	; (8003c2c <main+0x5d4>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	801a      	strh	r2, [r3, #0]
					switch(OpVar.task)
 8003c1e:	4b03      	ldr	r3, [pc, #12]	; (8003c2c <main+0x5d4>)
 8003c20:	78db      	ldrb	r3, [r3, #3]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d01c      	beq.n	8003c60 <main+0x608>
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d03c      	beq.n	8003ca4 <main+0x64c>
							OpState = ControlLoop;
						}
					break;
					}
				}
			break;
 8003c2a:	e098      	b.n	8003d5e <main+0x706>
 8003c2c:	20000410 	.word	0x20000410
 8003c30:	20000c9c 	.word	0x20000c9c
 8003c34:	20000e58 	.word	0x20000e58
 8003c38:	20000e50 	.word	0x20000e50
 8003c3c:	200002c4 	.word	0x200002c4
 8003c40:	200002c0 	.word	0x200002c0
 8003c44:	40020800 	.word	0x40020800
 8003c48:	2000040c 	.word	0x2000040c
 8003c4c:	20000e30 	.word	0x20000e30
 8003c50:	20000704 	.word	0x20000704
 8003c54:	20000764 	.word	0x20000764
 8003c58:	20000438 	.word	0x20000438
 8003c5c:	20000488 	.word	0x20000488
						QuinticVar.final_pos = PlaceTray.Holes_Y[OpVar.holeInd];
 8003c60:	4b3f      	ldr	r3, [pc, #252]	; (8003d60 <main+0x708>)
 8003c62:	791b      	ldrb	r3, [r3, #4]
 8003c64:	4a3f      	ldr	r2, [pc, #252]	; (8003d64 <main+0x70c>)
 8003c66:	330c      	adds	r3, #12
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	4b3d      	ldr	r3, [pc, #244]	; (8003d68 <main+0x710>)
 8003c72:	605a      	str	r2, [r3, #4]
						RunX_Axis(PlaceTray.Holes_X[OpVar.holeInd], 2500, 3);
 8003c74:	4b3a      	ldr	r3, [pc, #232]	; (8003d60 <main+0x708>)
 8003c76:	791b      	ldrb	r3, [r3, #4]
 8003c78:	4a3a      	ldr	r2, [pc, #232]	; (8003d64 <main+0x70c>)
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	edd3 7a00 	vldr	s15, [r3]
 8003c84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c88:	2203      	movs	r2, #3
 8003c8a:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8003c8e:	ee17 0a90 	vmov	r0, s15
 8003c92:	f7fe ff3f 	bl	8002b14 <RunX_Axis>
						OpVar.task = GoPlace;
 8003c96:	4b32      	ldr	r3, [pc, #200]	; (8003d60 <main+0x708>)
 8003c98:	2201      	movs	r2, #1
 8003c9a:	70da      	strb	r2, [r3, #3]
						OpState = ControlLoop;
 8003c9c:	4b33      	ldr	r3, [pc, #204]	; (8003d6c <main+0x714>)
 8003c9e:	2208      	movs	r2, #8
 8003ca0:	701a      	strb	r2, [r3, #0]
					break;
 8003ca2:	e03a      	b.n	8003d1a <main+0x6c2>
						if(OpVar.holeInd >= 8)
 8003ca4:	4b2e      	ldr	r3, [pc, #184]	; (8003d60 <main+0x708>)
 8003ca6:	791b      	ldrb	r3, [r3, #4]
 8003ca8:	2b07      	cmp	r3, #7
 8003caa:	d90d      	bls.n	8003cc8 <main+0x670>
							OpState = Init;
 8003cac:	4b2f      	ldr	r3, [pc, #188]	; (8003d6c <main+0x714>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	701a      	strb	r2, [r3, #0]
							registerFrame[0x40].U16 = 0b0001;	//Home
 8003cb2:	4b2f      	ldr	r3, [pc, #188]	; (8003d70 <main+0x718>)
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
							OpVar.ControllerEnable = 0;
 8003cba:	4b29      	ldr	r3, [pc, #164]	; (8003d60 <main+0x708>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	745a      	strb	r2, [r3, #17]
							OpVar.testDummy = 1;
 8003cc0:	4b27      	ldr	r3, [pc, #156]	; (8003d60 <main+0x708>)
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	74da      	strb	r2, [r3, #19]
					break;
 8003cc6:	e028      	b.n	8003d1a <main+0x6c2>
							OpVar.holeInd += 1;
 8003cc8:	4b25      	ldr	r3, [pc, #148]	; (8003d60 <main+0x708>)
 8003cca:	791b      	ldrb	r3, [r3, #4]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	4b23      	ldr	r3, [pc, #140]	; (8003d60 <main+0x708>)
 8003cd2:	711a      	strb	r2, [r3, #4]
							QuinticVar.final_pos = PickTray.Holes_Y[OpVar.holeInd];
 8003cd4:	4b22      	ldr	r3, [pc, #136]	; (8003d60 <main+0x708>)
 8003cd6:	791b      	ldrb	r3, [r3, #4]
 8003cd8:	4a26      	ldr	r2, [pc, #152]	; (8003d74 <main+0x71c>)
 8003cda:	330c      	adds	r3, #12
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	4b20      	ldr	r3, [pc, #128]	; (8003d68 <main+0x710>)
 8003ce6:	605a      	str	r2, [r3, #4]
							RunX_Axis(PickTray.Holes_X[OpVar.holeInd], 2500, 3);
 8003ce8:	4b1d      	ldr	r3, [pc, #116]	; (8003d60 <main+0x708>)
 8003cea:	791b      	ldrb	r3, [r3, #4]
 8003cec:	4a21      	ldr	r2, [pc, #132]	; (8003d74 <main+0x71c>)
 8003cee:	3304      	adds	r3, #4
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4413      	add	r3, r2
 8003cf4:	edd3 7a00 	vldr	s15, [r3]
 8003cf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cfc:	2203      	movs	r2, #3
 8003cfe:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8003d02:	ee17 0a90 	vmov	r0, s15
 8003d06:	f7fe ff05 	bl	8002b14 <RunX_Axis>
							OpVar.task = GoPick;
 8003d0a:	4b15      	ldr	r3, [pc, #84]	; (8003d60 <main+0x708>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	70da      	strb	r2, [r3, #3]
							OpState = ControlLoop;
 8003d10:	4b16      	ldr	r3, [pc, #88]	; (8003d6c <main+0x714>)
 8003d12:	2208      	movs	r2, #8
 8003d14:	701a      	strb	r2, [r3, #0]
					break;
 8003d16:	e000      	b.n	8003d1a <main+0x6c2>
				}
 8003d18:	bf00      	nop
			break;
 8003d1a:	e020      	b.n	8003d5e <main+0x706>

			case WaitingHome:
				OpVar.ControllerEnable = 0;
 8003d1c:	4b10      	ldr	r3, [pc, #64]	; (8003d60 <main+0x708>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	745a      	strb	r2, [r3, #17]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);
 8003d22:	2200      	movs	r2, #0
 8003d24:	2140      	movs	r1, #64	; 0x40
 8003d26:	4814      	ldr	r0, [pc, #80]	; (8003d78 <main+0x720>)
 8003d28:	f003 f94e 	bl	8006fc8 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,35*500);
 8003d2c:	4b13      	ldr	r3, [pc, #76]	; (8003d7c <main+0x724>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f244 425c 	movw	r2, #17500	; 0x445c
 8003d34:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8003d36:	e012      	b.n	8003d5e <main+0x706>
			}
		}
	  else if (OpVar.ProxStop == 1)
 8003d38:	4b09      	ldr	r3, [pc, #36]	; (8003d60 <main+0x708>)
 8003d3a:	795b      	ldrb	r3, [r3, #5]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	f47f ad06 	bne.w	800374e <main+0xf6>
	  {
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8003d42:	4b0e      	ldr	r3, [pc, #56]	; (8003d7c <main+0x724>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2200      	movs	r2, #0
 8003d48:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d4a:	e500      	b.n	800374e <main+0xf6>
			break;
 8003d4c:	bf00      	nop
 8003d4e:	e4fe      	b.n	800374e <main+0xf6>
				break;
 8003d50:	bf00      	nop
 8003d52:	e4fc      	b.n	800374e <main+0xf6>
			break;
 8003d54:	bf00      	nop
 8003d56:	e4fa      	b.n	800374e <main+0xf6>
			break;
 8003d58:	bf00      	nop
 8003d5a:	e4f8      	b.n	800374e <main+0xf6>
			break;
 8003d5c:	bf00      	nop
  {
 8003d5e:	e4f6      	b.n	800374e <main+0xf6>
 8003d60:	20000410 	.word	0x20000410
 8003d64:	20000764 	.word	0x20000764
 8003d68:	20000438 	.word	0x20000438
 8003d6c:	2000040c 	.word	0x2000040c
 8003d70:	20000c9c 	.word	0x20000c9c
 8003d74:	20000704 	.word	0x20000704
 8003d78:	40020800 	.word	0x40020800
 8003d7c:	20000f14 	.word	0x20000f14

08003d80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b094      	sub	sp, #80	; 0x50
 8003d84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d86:	f107 0320 	add.w	r3, r7, #32
 8003d8a:	2230      	movs	r2, #48	; 0x30
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f008 fcd6 	bl	800c740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d94:	f107 030c 	add.w	r3, r7, #12
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	605a      	str	r2, [r3, #4]
 8003d9e:	609a      	str	r2, [r3, #8]
 8003da0:	60da      	str	r2, [r3, #12]
 8003da2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003da4:	2300      	movs	r3, #0
 8003da6:	60bb      	str	r3, [r7, #8]
 8003da8:	4b27      	ldr	r3, [pc, #156]	; (8003e48 <SystemClock_Config+0xc8>)
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	4a26      	ldr	r2, [pc, #152]	; (8003e48 <SystemClock_Config+0xc8>)
 8003dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db2:	6413      	str	r3, [r2, #64]	; 0x40
 8003db4:	4b24      	ldr	r3, [pc, #144]	; (8003e48 <SystemClock_Config+0xc8>)
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dbc:	60bb      	str	r3, [r7, #8]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	607b      	str	r3, [r7, #4]
 8003dc4:	4b21      	ldr	r3, [pc, #132]	; (8003e4c <SystemClock_Config+0xcc>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a20      	ldr	r2, [pc, #128]	; (8003e4c <SystemClock_Config+0xcc>)
 8003dca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dce:	6013      	str	r3, [r2, #0]
 8003dd0:	4b1e      	ldr	r3, [pc, #120]	; (8003e4c <SystemClock_Config+0xcc>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003dd8:	607b      	str	r3, [r7, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003ddc:	2302      	movs	r3, #2
 8003dde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003de0:	2301      	movs	r3, #1
 8003de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003de4:	2310      	movs	r3, #16
 8003de6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003de8:	2302      	movs	r3, #2
 8003dea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003dec:	2300      	movs	r3, #0
 8003dee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003df0:	2308      	movs	r3, #8
 8003df2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003df4:	2364      	movs	r3, #100	; 0x64
 8003df6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003df8:	2302      	movs	r3, #2
 8003dfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003dfc:	2304      	movs	r3, #4
 8003dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e00:	f107 0320 	add.w	r3, r7, #32
 8003e04:	4618      	mov	r0, r3
 8003e06:	f005 f885 	bl	8008f14 <HAL_RCC_OscConfig>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003e10:	f000 fa18 	bl	8004244 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e14:	230f      	movs	r3, #15
 8003e16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e18:	2302      	movs	r3, #2
 8003e1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e26:	2300      	movs	r3, #0
 8003e28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003e2a:	f107 030c 	add.w	r3, r7, #12
 8003e2e:	2103      	movs	r1, #3
 8003e30:	4618      	mov	r0, r3
 8003e32:	f005 fae7 	bl	8009404 <HAL_RCC_ClockConfig>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003e3c:	f000 fa02 	bl	8004244 <Error_Handler>
  }
}
 8003e40:	bf00      	nop
 8003e42:	3750      	adds	r7, #80	; 0x50
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	40007000 	.word	0x40007000

08003e50 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	4603      	mov	r3, r0
 8003e58:	80fb      	strh	r3, [r7, #6]
		if(GPIO_Pin == GPIO_PIN_11)
 8003e5a:	88fb      	ldrh	r3, [r7, #6]
 8003e5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e60:	d12d      	bne.n	8003ebe <HAL_GPIO_EXTI_Callback+0x6e>
		{
			if(OpVar.HomingKey == 1)
 8003e62:	4b32      	ldr	r3, [pc, #200]	; (8003f2c <HAL_GPIO_EXTI_Callback+0xdc>)
 8003e64:	799b      	ldrb	r3, [r3, #6]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d11e      	bne.n	8003ea8 <HAL_GPIO_EXTI_Callback+0x58>
			{
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8003e6a:	4b31      	ldr	r3, [pc, #196]	; (8003f30 <HAL_GPIO_EXTI_Callback+0xe0>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COUNTER(&htim2,0);
 8003e72:	4b30      	ldr	r3, [pc, #192]	; (8003f34 <HAL_GPIO_EXTI_Callback+0xe4>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2200      	movs	r2, #0
 8003e78:	625a      	str	r2, [r3, #36]	; 0x24
				QEIData.QEIPosition = __HAL_TIM_GET_COUNTER(&htim2);
 8003e7a:	4b2e      	ldr	r3, [pc, #184]	; (8003f34 <HAL_GPIO_EXTI_Callback+0xe4>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	461a      	mov	r2, r3
 8003e82:	4b2d      	ldr	r3, [pc, #180]	; (8003f38 <HAL_GPIO_EXTI_Callback+0xe8>)
 8003e84:	605a      	str	r2, [r3, #4]
				OpVar.ProxStop = 0;
 8003e86:	4b29      	ldr	r3, [pc, #164]	; (8003f2c <HAL_GPIO_EXTI_Callback+0xdc>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	715a      	strb	r2, [r3, #5]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2140      	movs	r1, #64	; 0x40
 8003e90:	482a      	ldr	r0, [pc, #168]	; (8003f3c <HAL_GPIO_EXTI_Callback+0xec>)
 8003e92:	f003 f899 	bl	8006fc8 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,35*500);
 8003e96:	4b26      	ldr	r3, [pc, #152]	; (8003f30 <HAL_GPIO_EXTI_Callback+0xe0>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f244 425c 	movw	r2, #17500	; 0x445c
 8003e9e:	63da      	str	r2, [r3, #60]	; 0x3c
				OpState = WaitingHome;
 8003ea0:	4b27      	ldr	r3, [pc, #156]	; (8003f40 <HAL_GPIO_EXTI_Callback+0xf0>)
 8003ea2:	220a      	movs	r2, #10
 8003ea4:	701a      	strb	r2, [r3, #0]
 8003ea6:	e00a      	b.n	8003ebe <HAL_GPIO_EXTI_Callback+0x6e>
			}
			else if(OpVar.HomingKey == 2)
 8003ea8:	4b20      	ldr	r3, [pc, #128]	; (8003f2c <HAL_GPIO_EXTI_Callback+0xdc>)
 8003eaa:	799b      	ldrb	r3, [r3, #6]
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d106      	bne.n	8003ebe <HAL_GPIO_EXTI_Callback+0x6e>
			{
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8003eb0:	4b1f      	ldr	r3, [pc, #124]	; (8003f30 <HAL_GPIO_EXTI_Callback+0xe0>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	63da      	str	r2, [r3, #60]	; 0x3c
				OpVar.ProxStop = 1;
 8003eb8:	4b1c      	ldr	r3, [pc, #112]	; (8003f2c <HAL_GPIO_EXTI_Callback+0xdc>)
 8003eba:	2201      	movs	r2, #1
 8003ebc:	715a      	strb	r2, [r3, #5]
			}
		}
		if (GPIO_Pin == GPIO_PIN_12)
 8003ebe:	88fb      	ldrh	r3, [r7, #6]
 8003ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec4:	d12e      	bne.n	8003f24 <HAL_GPIO_EXTI_Callback+0xd4>
		{
			if(OpVar.HomingKey == 1)
 8003ec6:	4b19      	ldr	r3, [pc, #100]	; (8003f2c <HAL_GPIO_EXTI_Callback+0xdc>)
 8003ec8:	799b      	ldrb	r3, [r3, #6]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d11f      	bne.n	8003f0e <HAL_GPIO_EXTI_Callback+0xbe>
			{
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8003ece:	4b18      	ldr	r3, [pc, #96]	; (8003f30 <HAL_GPIO_EXTI_Callback+0xe0>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	63da      	str	r2, [r3, #60]	; 0x3c
				OpVar.HomingKey = 0;		//Disable Proximety Homing
 8003ed6:	4b15      	ldr	r3, [pc, #84]	; (8003f2c <HAL_GPIO_EXTI_Callback+0xdc>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	719a      	strb	r2, [r3, #6]
				OpVar.ProxStop = 0;
 8003edc:	4b13      	ldr	r3, [pc, #76]	; (8003f2c <HAL_GPIO_EXTI_Callback+0xdc>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	715a      	strb	r2, [r3, #5]
				OpVar.waitTime = HAL_GetTick() + 1000;
 8003ee2:	f001 fd99 	bl	8005a18 <HAL_GetTick>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	4b0e      	ldr	r3, [pc, #56]	; (8003f2c <HAL_GPIO_EXTI_Callback+0xdc>)
 8003ef2:	801a      	strh	r2, [r3, #0]
				OpVar.ControllerEnable = 1;	//Enable Controller
 8003ef4:	4b0d      	ldr	r3, [pc, #52]	; (8003f2c <HAL_GPIO_EXTI_Callback+0xdc>)
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	745a      	strb	r2, [r3, #17]
				QuinticVar.current_pos = __HAL_TIM_GET_COUNTER(&htim2);	//Dummy PID
 8003efa:	4b0e      	ldr	r3, [pc, #56]	; (8003f34 <HAL_GPIO_EXTI_Callback+0xe4>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	461a      	mov	r2, r3
 8003f02:	4b10      	ldr	r3, [pc, #64]	; (8003f44 <HAL_GPIO_EXTI_Callback+0xf4>)
 8003f04:	60da      	str	r2, [r3, #12]
				OpState = PreHoming;
 8003f06:	4b0e      	ldr	r3, [pc, #56]	; (8003f40 <HAL_GPIO_EXTI_Callback+0xf0>)
 8003f08:	2201      	movs	r2, #1
 8003f0a:	701a      	strb	r2, [r3, #0]
			{
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
				OpVar.ProxStop = 1;
			}
		}
}
 8003f0c:	e00a      	b.n	8003f24 <HAL_GPIO_EXTI_Callback+0xd4>
			else if(OpVar.HomingKey == 2)
 8003f0e:	4b07      	ldr	r3, [pc, #28]	; (8003f2c <HAL_GPIO_EXTI_Callback+0xdc>)
 8003f10:	799b      	ldrb	r3, [r3, #6]
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d106      	bne.n	8003f24 <HAL_GPIO_EXTI_Callback+0xd4>
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8003f16:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <HAL_GPIO_EXTI_Callback+0xe0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	63da      	str	r2, [r3, #60]	; 0x3c
				OpVar.ProxStop = 1;
 8003f1e:	4b03      	ldr	r3, [pc, #12]	; (8003f2c <HAL_GPIO_EXTI_Callback+0xdc>)
 8003f20:	2201      	movs	r2, #1
 8003f22:	715a      	strb	r2, [r3, #5]
}
 8003f24:	bf00      	nop
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	20000410 	.word	0x20000410
 8003f30:	20000f14 	.word	0x20000f14
 8003f34:	20000e60 	.word	0x20000e60
 8003f38:	2000042c 	.word	0x2000042c
 8003f3c:	40020800 	.word	0x40020800
 8003f40:	2000040c 	.word	0x2000040c
 8003f44:	20000438 	.word	0x20000438

08003f48 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a2b      	ldr	r2, [pc, #172]	; (8004000 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d14f      	bne.n	8003ff8 <HAL_TIM_PeriodElapsedCallback+0xb0>
	{
		QEIGetFeedback(&QEIData, 2500);
 8003f58:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8003f5c:	4829      	ldr	r0, [pc, #164]	; (8004004 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8003f5e:	f7fe fd97 	bl	8002a90 <QEIGetFeedback>
		KF.z = QEIData.QEIVelocity;
 8003f62:	4b28      	ldr	r3, [pc, #160]	; (8004004 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	4a28      	ldr	r2, [pc, #160]	; (8004008 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003f68:	65d3      	str	r3, [r2, #92]	; 0x5c
		kalman_filter();
 8003f6a:	f7fd fcf7 	bl	800195c <kalman_filter>
		ZEstimateVelocity = KF.x_hat[1];
 8003f6e:	4b26      	ldr	r3, [pc, #152]	; (8004008 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	4a26      	ldr	r2, [pc, #152]	; (800400c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003f74:	6013      	str	r3, [r2, #0]

		if(OpVar.ControllerEnable == 1)
 8003f76:	4b26      	ldr	r3, [pc, #152]	; (8004010 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003f78:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d12e      	bne.n	8003fde <HAL_TIM_PeriodElapsedCallback+0x96>
		{
			QuinticRun(&QuinticVar,PositionLoop.ESS,0.0004);
 8003f80:	4b24      	ldr	r3, [pc, #144]	; (8004014 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003f82:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 8003f86:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8004018 <HAL_TIM_PeriodElapsedCallback+0xd0>
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4823      	ldr	r0, [pc, #140]	; (800401c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8003f8e:	f7fe fd19 	bl	80029c4 <QuinticRun>
			CascadeLoop(&PositionLoop, &VelocityLoop, QEIData.QEIPosition, KF.x_hat[1],&QuinticVar, 3);
 8003f92:	4b1c      	ldr	r3, [pc, #112]	; (8004004 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	ee07 3a90 	vmov	s15, r3
 8003f9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f9e:	4b1a      	ldr	r3, [pc, #104]	; (8004008 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003fa0:	ed93 7a01 	vldr	s14, [r3, #4]
 8003fa4:	eeb0 1a08 	vmov.f32	s2, #8	; 0x40400000  3.0
 8003fa8:	4a1c      	ldr	r2, [pc, #112]	; (800401c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8003faa:	eef0 0a47 	vmov.f32	s1, s14
 8003fae:	eeb0 0a67 	vmov.f32	s0, s15
 8003fb2:	491b      	ldr	r1, [pc, #108]	; (8004020 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003fb4:	4817      	ldr	r0, [pc, #92]	; (8004014 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003fb6:	f7fe f973 	bl	80022a0 <CascadeLoop>
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,abs(VelocityLoop.U));
 8003fba:	4b19      	ldr	r3, [pc, #100]	; (8004020 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003fc2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003fc6:	4b17      	ldr	r3, [pc, #92]	; (8004024 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, VelocityLoop.MotorDir);
 8003fcc:	4b14      	ldr	r3, [pc, #80]	; (8004020 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003fce:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	2140      	movs	r1, #64	; 0x40
 8003fd8:	4813      	ldr	r0, [pc, #76]	; (8004028 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003fda:	f002 fff5 	bl	8006fc8 <HAL_GPIO_WritePin>
		}

		if(OpVar.JoyEnable == 1)
 8003fde:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003fe0:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d107      	bne.n	8003ff8 <HAL_TIM_PeriodElapsedCallback+0xb0>
		{
			CheckJoystick();
 8003fe8:	f7fd fa6c 	bl	80014c4 <CheckJoystick>
			CheckButton();
 8003fec:	f7fd fade 	bl	80015ac <CheckButton>
			//joyXjog();
			joyYjog();
 8003ff0:	f000 f81c 	bl	800402c <joyYjog>
			CollectPosition();
 8003ff4:	f000 f84e 	bl	8004094 <CollectPosition>
		}
	}
}
 8003ff8:	bf00      	nop
 8003ffa:	3708      	adds	r7, #8
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	20000fc8 	.word	0x20000fc8
 8004004:	2000042c 	.word	0x2000042c
 8004008:	200004e8 	.word	0x200004e8
 800400c:	20000700 	.word	0x20000700
 8004010:	20000410 	.word	0x20000410
 8004014:	20000488 	.word	0x20000488
 8004018:	39d1b717 	.word	0x39d1b717
 800401c:	20000438 	.word	0x20000438
 8004020:	200004b8 	.word	0x200004b8
 8004024:	20000f14 	.word	0x20000f14
 8004028:	40020800 	.word	0x40020800

0800402c <joyYjog>:
    if (Joy.status == 1) {
        registerFrame[0x40].U16 = 0x0001;
    }
}
void joyYjog()
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
    if (Joy.Y == 1) {
 8004030:	4b15      	ldr	r3, [pc, #84]	; (8004088 <joyYjog+0x5c>)
 8004032:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d10a      	bne.n	8004050 <joyYjog+0x24>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, SET);
 800403a:	2201      	movs	r2, #1
 800403c:	2140      	movs	r1, #64	; 0x40
 800403e:	4813      	ldr	r0, [pc, #76]	; (800408c <joyYjog+0x60>)
 8004040:	f002 ffc2 	bl	8006fc8 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 20000);
 8004044:	4b12      	ldr	r3, [pc, #72]	; (8004090 <joyYjog+0x64>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f644 6220 	movw	r2, #20000	; 0x4e20
 800404c:	63da      	str	r2, [r3, #60]	; 0x3c

//    if (Joy.status == 1) {
//
//    }

}
 800404e:	e019      	b.n	8004084 <joyYjog+0x58>
    } else if (Joy.Y == -1) {
 8004050:	4b0d      	ldr	r3, [pc, #52]	; (8004088 <joyYjog+0x5c>)
 8004052:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405a:	d10a      	bne.n	8004072 <joyYjog+0x46>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, RESET);
 800405c:	2200      	movs	r2, #0
 800405e:	2140      	movs	r1, #64	; 0x40
 8004060:	480a      	ldr	r0, [pc, #40]	; (800408c <joyYjog+0x60>)
 8004062:	f002 ffb1 	bl	8006fc8 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 20000);
 8004066:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <joyYjog+0x64>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800406e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004070:	e008      	b.n	8004084 <joyYjog+0x58>
    } else if (Joy.Y == 0) {
 8004072:	4b05      	ldr	r3, [pc, #20]	; (8004088 <joyYjog+0x5c>)
 8004074:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d103      	bne.n	8004084 <joyYjog+0x58>
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 800407c:	4b04      	ldr	r3, [pc, #16]	; (8004090 <joyYjog+0x64>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2200      	movs	r2, #0
 8004082:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004084:	bf00      	nop
 8004086:	bd80      	pop	{r7, pc}
 8004088:	200002f8 	.word	0x200002f8
 800408c:	40020800 	.word	0x40020800
 8004090:	20000f14 	.word	0x20000f14

08004094 <CollectPosition>:
void CollectPosition()
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0

    static uint8_t PreReset = 0;
    if (PreReset == 0 && Joy.status == 3) {
 800409a:	4b53      	ldr	r3, [pc, #332]	; (80041e8 <CollectPosition+0x154>)
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d114      	bne.n	80040cc <CollectPosition+0x38>
 80040a2:	4b52      	ldr	r3, [pc, #328]	; (80041ec <CollectPosition+0x158>)
 80040a4:	889b      	ldrh	r3, [r3, #4]
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d110      	bne.n	80040cc <CollectPosition+0x38>
        SubState = TrayP1;
 80040aa:	4b51      	ldr	r3, [pc, #324]	; (80041f0 <CollectPosition+0x15c>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i <= 7; i++) {
 80040b0:	2300      	movs	r3, #0
 80040b2:	71fb      	strb	r3, [r7, #7]
 80040b4:	e007      	b.n	80040c6 <CollectPosition+0x32>
            TrayPoint[i] = 0;
 80040b6:	79fb      	ldrb	r3, [r7, #7]
 80040b8:	4a4e      	ldr	r2, [pc, #312]	; (80041f4 <CollectPosition+0x160>)
 80040ba:	2100      	movs	r1, #0
 80040bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (uint8_t i = 0; i <= 7; i++) {
 80040c0:	79fb      	ldrb	r3, [r7, #7]
 80040c2:	3301      	adds	r3, #1
 80040c4:	71fb      	strb	r3, [r7, #7]
 80040c6:	79fb      	ldrb	r3, [r7, #7]
 80040c8:	2b07      	cmp	r3, #7
 80040ca:	d9f4      	bls.n	80040b6 <CollectPosition+0x22>
        }
    }

    static uint8_t PreRec = 0;

    switch (SubState) {
 80040cc:	4b48      	ldr	r3, [pc, #288]	; (80041f0 <CollectPosition+0x15c>)
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b03      	cmp	r3, #3
 80040d2:	d87b      	bhi.n	80041cc <CollectPosition+0x138>
 80040d4:	a201      	add	r2, pc, #4	; (adr r2, 80040dc <CollectPosition+0x48>)
 80040d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040da:	bf00      	nop
 80040dc:	080040ed 	.word	0x080040ed
 80040e0:	08004123 	.word	0x08004123
 80040e4:	08004159 	.word	0x08004159
 80040e8:	0800418f 	.word	0x0800418f
    case TrayP1:

        if (Joy.status == 2 && PreRec == 0) {
 80040ec:	4b3f      	ldr	r3, [pc, #252]	; (80041ec <CollectPosition+0x158>)
 80040ee:	889b      	ldrh	r3, [r3, #4]
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d164      	bne.n	80041be <CollectPosition+0x12a>
 80040f4:	4b40      	ldr	r3, [pc, #256]	; (80041f8 <CollectPosition+0x164>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d160      	bne.n	80041be <CollectPosition+0x12a>
            SubState = TrayP2;
 80040fc:	4b3c      	ldr	r3, [pc, #240]	; (80041f0 <CollectPosition+0x15c>)
 80040fe:	2201      	movs	r2, #1
 8004100:	701a      	strb	r2, [r3, #0]
            TrayPoint[0] = Uint2Int(registerFrame[0x44].U16);
 8004102:	4b3e      	ldr	r3, [pc, #248]	; (80041fc <CollectPosition+0x168>)
 8004104:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8004108:	4618      	mov	r0, r3
 800410a:	f000 f87b 	bl	8004204 <Uint2Int>
 800410e:	4603      	mov	r3, r0
 8004110:	461a      	mov	r2, r3
 8004112:	4b38      	ldr	r3, [pc, #224]	; (80041f4 <CollectPosition+0x160>)
 8004114:	601a      	str	r2, [r3, #0]
            TrayPoint[1] = __HAL_TIM_GET_COUNTER(&htim2);
 8004116:	4b3a      	ldr	r3, [pc, #232]	; (8004200 <CollectPosition+0x16c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	4a35      	ldr	r2, [pc, #212]	; (80041f4 <CollectPosition+0x160>)
 800411e:	6053      	str	r3, [r2, #4]
        }
        break;
 8004120:	e04d      	b.n	80041be <CollectPosition+0x12a>
    case TrayP2:

        if (Joy.status == 2 && PreRec == 0) {
 8004122:	4b32      	ldr	r3, [pc, #200]	; (80041ec <CollectPosition+0x158>)
 8004124:	889b      	ldrh	r3, [r3, #4]
 8004126:	2b02      	cmp	r3, #2
 8004128:	d14b      	bne.n	80041c2 <CollectPosition+0x12e>
 800412a:	4b33      	ldr	r3, [pc, #204]	; (80041f8 <CollectPosition+0x164>)
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d147      	bne.n	80041c2 <CollectPosition+0x12e>
            SubState = TrayP3;
 8004132:	4b2f      	ldr	r3, [pc, #188]	; (80041f0 <CollectPosition+0x15c>)
 8004134:	2202      	movs	r2, #2
 8004136:	701a      	strb	r2, [r3, #0]
            TrayPoint[2] = Uint2Int(registerFrame[0x44].U16);
 8004138:	4b30      	ldr	r3, [pc, #192]	; (80041fc <CollectPosition+0x168>)
 800413a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800413e:	4618      	mov	r0, r3
 8004140:	f000 f860 	bl	8004204 <Uint2Int>
 8004144:	4603      	mov	r3, r0
 8004146:	461a      	mov	r2, r3
 8004148:	4b2a      	ldr	r3, [pc, #168]	; (80041f4 <CollectPosition+0x160>)
 800414a:	609a      	str	r2, [r3, #8]
            TrayPoint[3] = __HAL_TIM_GET_COUNTER(&htim2);
 800414c:	4b2c      	ldr	r3, [pc, #176]	; (8004200 <CollectPosition+0x16c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004152:	4a28      	ldr	r2, [pc, #160]	; (80041f4 <CollectPosition+0x160>)
 8004154:	60d3      	str	r3, [r2, #12]
        }
        break;
 8004156:	e034      	b.n	80041c2 <CollectPosition+0x12e>
    case TrayP3:

        if (Joy.status == 2 && PreRec == 0) {
 8004158:	4b24      	ldr	r3, [pc, #144]	; (80041ec <CollectPosition+0x158>)
 800415a:	889b      	ldrh	r3, [r3, #4]
 800415c:	2b02      	cmp	r3, #2
 800415e:	d132      	bne.n	80041c6 <CollectPosition+0x132>
 8004160:	4b25      	ldr	r3, [pc, #148]	; (80041f8 <CollectPosition+0x164>)
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d12e      	bne.n	80041c6 <CollectPosition+0x132>
            SubState = TrayP4;
 8004168:	4b21      	ldr	r3, [pc, #132]	; (80041f0 <CollectPosition+0x15c>)
 800416a:	2203      	movs	r2, #3
 800416c:	701a      	strb	r2, [r3, #0]
            TrayPoint[4] = Uint2Int(registerFrame[0x44].U16);
 800416e:	4b23      	ldr	r3, [pc, #140]	; (80041fc <CollectPosition+0x168>)
 8004170:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8004174:	4618      	mov	r0, r3
 8004176:	f000 f845 	bl	8004204 <Uint2Int>
 800417a:	4603      	mov	r3, r0
 800417c:	461a      	mov	r2, r3
 800417e:	4b1d      	ldr	r3, [pc, #116]	; (80041f4 <CollectPosition+0x160>)
 8004180:	611a      	str	r2, [r3, #16]
            TrayPoint[5] = __HAL_TIM_GET_COUNTER(&htim2);
 8004182:	4b1f      	ldr	r3, [pc, #124]	; (8004200 <CollectPosition+0x16c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	4a1a      	ldr	r2, [pc, #104]	; (80041f4 <CollectPosition+0x160>)
 800418a:	6153      	str	r3, [r2, #20]

        }
        break;
 800418c:	e01b      	b.n	80041c6 <CollectPosition+0x132>
    case TrayP4:

        if (Joy.status == 2 && PreRec == 0) {
 800418e:	4b17      	ldr	r3, [pc, #92]	; (80041ec <CollectPosition+0x158>)
 8004190:	889b      	ldrh	r3, [r3, #4]
 8004192:	2b02      	cmp	r3, #2
 8004194:	d119      	bne.n	80041ca <CollectPosition+0x136>
 8004196:	4b18      	ldr	r3, [pc, #96]	; (80041f8 <CollectPosition+0x164>)
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d115      	bne.n	80041ca <CollectPosition+0x136>
            TrayPoint[6] = Uint2Int(registerFrame[0x44].U16);
 800419e:	4b17      	ldr	r3, [pc, #92]	; (80041fc <CollectPosition+0x168>)
 80041a0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 f82d 	bl	8004204 <Uint2Int>
 80041aa:	4603      	mov	r3, r0
 80041ac:	461a      	mov	r2, r3
 80041ae:	4b11      	ldr	r3, [pc, #68]	; (80041f4 <CollectPosition+0x160>)
 80041b0:	619a      	str	r2, [r3, #24]
            TrayPoint[7] = __HAL_TIM_GET_COUNTER(&htim2);
 80041b2:	4b13      	ldr	r3, [pc, #76]	; (8004200 <CollectPosition+0x16c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	4a0e      	ldr	r2, [pc, #56]	; (80041f4 <CollectPosition+0x160>)
 80041ba:	61d3      	str	r3, [r2, #28]
        }
        break;
 80041bc:	e005      	b.n	80041ca <CollectPosition+0x136>
        break;
 80041be:	bf00      	nop
 80041c0:	e004      	b.n	80041cc <CollectPosition+0x138>
        break;
 80041c2:	bf00      	nop
 80041c4:	e002      	b.n	80041cc <CollectPosition+0x138>
        break;
 80041c6:	bf00      	nop
 80041c8:	e000      	b.n	80041cc <CollectPosition+0x138>
        break;
 80041ca:	bf00      	nop

    }

    PreReset = Joy.status;
 80041cc:	4b07      	ldr	r3, [pc, #28]	; (80041ec <CollectPosition+0x158>)
 80041ce:	889b      	ldrh	r3, [r3, #4]
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <CollectPosition+0x154>)
 80041d4:	701a      	strb	r2, [r3, #0]
    PreRec = Joy.status;
 80041d6:	4b05      	ldr	r3, [pc, #20]	; (80041ec <CollectPosition+0x158>)
 80041d8:	889b      	ldrh	r3, [r3, #4]
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <CollectPosition+0x164>)
 80041de:	701a      	strb	r2, [r3, #0]
}
 80041e0:	bf00      	nop
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	20000e5c 	.word	0x20000e5c
 80041ec:	200002f8 	.word	0x200002f8
 80041f0:	20000e2c 	.word	0x20000e2c
 80041f4:	20000e30 	.word	0x20000e30
 80041f8:	20000e5d 	.word	0x20000e5d
 80041fc:	20000c9c 	.word	0x20000c9c
 8004200:	20000e60 	.word	0x20000e60

08004204 <Uint2Int>:

int16_t Uint2Int(uint16_t underflow)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	4603      	mov	r3, r0
 800420c:	80fb      	strh	r3, [r7, #6]
    uint16_t integer = 0;
 800420e:	2300      	movs	r3, #0
 8004210:	81bb      	strh	r3, [r7, #12]
    int16_t bitwise = 0;
 8004212:	2300      	movs	r3, #0
 8004214:	81fb      	strh	r3, [r7, #14]

    if (underflow > 40000) {
 8004216:	88fb      	ldrh	r3, [r7, #6]
 8004218:	f649 4240 	movw	r2, #40000	; 0x9c40
 800421c:	4293      	cmp	r3, r2
 800421e:	d907      	bls.n	8004230 <Uint2Int+0x2c>
        integer = (uint16_t) (UINT16_MAX - underflow + 1);
 8004220:	88fb      	ldrh	r3, [r7, #6]
 8004222:	425b      	negs	r3, r3
 8004224:	81bb      	strh	r3, [r7, #12]
        bitwise = ~integer;
 8004226:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800422a:	43db      	mvns	r3, r3
 800422c:	81fb      	strh	r3, [r7, #14]
 800422e:	e001      	b.n	8004234 <Uint2Int+0x30>
    } else {
        bitwise = underflow;
 8004230:	88fb      	ldrh	r3, [r7, #6]
 8004232:	81fb      	strh	r3, [r7, #14]
    }
    return bitwise;
 8004234:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8004238:	4618      	mov	r0, r3
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004248:	b672      	cpsid	i
}
 800424a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800424c:	e7fe      	b.n	800424c <Error_Handler+0x8>
	...

08004250 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004256:	2300      	movs	r3, #0
 8004258:	607b      	str	r3, [r7, #4]
 800425a:	4b10      	ldr	r3, [pc, #64]	; (800429c <HAL_MspInit+0x4c>)
 800425c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425e:	4a0f      	ldr	r2, [pc, #60]	; (800429c <HAL_MspInit+0x4c>)
 8004260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004264:	6453      	str	r3, [r2, #68]	; 0x44
 8004266:	4b0d      	ldr	r3, [pc, #52]	; (800429c <HAL_MspInit+0x4c>)
 8004268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800426e:	607b      	str	r3, [r7, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004272:	2300      	movs	r3, #0
 8004274:	603b      	str	r3, [r7, #0]
 8004276:	4b09      	ldr	r3, [pc, #36]	; (800429c <HAL_MspInit+0x4c>)
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	4a08      	ldr	r2, [pc, #32]	; (800429c <HAL_MspInit+0x4c>)
 800427c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004280:	6413      	str	r3, [r2, #64]	; 0x40
 8004282:	4b06      	ldr	r3, [pc, #24]	; (800429c <HAL_MspInit+0x4c>)
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428a:	603b      	str	r3, [r7, #0]
 800428c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800428e:	2007      	movs	r0, #7
 8004290:	f002 f8a0 	bl	80063d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004294:	bf00      	nop
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	40023800 	.word	0x40023800

080042a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80042a4:	e7fe      	b.n	80042a4 <NMI_Handler+0x4>

080042a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042a6:	b480      	push	{r7}
 80042a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042aa:	e7fe      	b.n	80042aa <HardFault_Handler+0x4>

080042ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042b0:	e7fe      	b.n	80042b0 <MemManage_Handler+0x4>

080042b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042b2:	b480      	push	{r7}
 80042b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042b6:	e7fe      	b.n	80042b6 <BusFault_Handler+0x4>

080042b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042bc:	e7fe      	b.n	80042bc <UsageFault_Handler+0x4>

080042be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042be:	b480      	push	{r7}
 80042c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042c2:	bf00      	nop
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042d0:	bf00      	nop
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042da:	b480      	push	{r7}
 80042dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042de:	bf00      	nop
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042ec:	f001 fb80 	bl	80059f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042f0:	bf00      	nop
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80042f8:	4802      	ldr	r0, [pc, #8]	; (8004304 <DMA1_Stream6_IRQHandler+0x10>)
 80042fa:	f002 fa45 	bl	8006788 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80042fe:	bf00      	nop
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	20001258 	.word	0x20001258

08004308 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800430c:	4802      	ldr	r0, [pc, #8]	; (8004318 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800430e:	f005 fee3 	bl	800a0d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004312:	bf00      	nop
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	20001130 	.word	0x20001130

0800431c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004320:	4802      	ldr	r0, [pc, #8]	; (800432c <TIM2_IRQHandler+0x10>)
 8004322:	f005 fed9 	bl	800a0d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004326:	bf00      	nop
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	20000e60 	.word	0x20000e60

08004330 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004334:	4802      	ldr	r0, [pc, #8]	; (8004340 <TIM3_IRQHandler+0x10>)
 8004336:	f005 fecf 	bl	800a0d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800433a:	bf00      	nop
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20000f14 	.word	0x20000f14

08004344 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004348:	4802      	ldr	r0, [pc, #8]	; (8004354 <TIM4_IRQHandler+0x10>)
 800434a:	f005 fec5 	bl	800a0d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800434e:	bf00      	nop
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	20000fc8 	.word	0x20000fc8

08004358 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800435c:	4802      	ldr	r0, [pc, #8]	; (8004368 <I2C1_EV_IRQHandler+0x10>)
 800435e:	f003 f8fd 	bl	800755c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004362:	bf00      	nop
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	200003b8 	.word	0x200003b8

0800436c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004370:	4802      	ldr	r0, [pc, #8]	; (800437c <I2C1_ER_IRQHandler+0x10>)
 8004372:	f003 fa64 	bl	800783e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004376:	bf00      	nop
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	200003b8 	.word	0x200003b8

08004380 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004384:	4802      	ldr	r0, [pc, #8]	; (8004390 <USART2_IRQHandler+0x10>)
 8004386:	f007 f95d 	bl	800b644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800438a:	bf00      	nop
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	200011e4 	.word	0x200011e4

08004394 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004398:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800439c:	f002 fe2e 	bl	8006ffc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80043a0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80043a4:	f002 fe2a 	bl	8006ffc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80043a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80043ac:	f002 fe26 	bl	8006ffc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80043b0:	bf00      	nop
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80043b8:	4802      	ldr	r0, [pc, #8]	; (80043c4 <DMA2_Stream0_IRQHandler+0x10>)
 80043ba:	f002 f9e5 	bl	8006788 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80043be:	bf00      	nop
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	20000358 	.word	0x20000358

080043c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043cc:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <SystemInit+0x20>)
 80043ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d2:	4a05      	ldr	r2, [pc, #20]	; (80043e8 <SystemInit+0x20>)
 80043d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043dc:	bf00      	nop
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	e000ed00 	.word	0xe000ed00

080043ec <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08c      	sub	sp, #48	; 0x30
 80043f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80043f2:	f107 030c 	add.w	r3, r7, #12
 80043f6:	2224      	movs	r2, #36	; 0x24
 80043f8:	2100      	movs	r1, #0
 80043fa:	4618      	mov	r0, r3
 80043fc:	f008 f9a0 	bl	800c740 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004400:	1d3b      	adds	r3, r7, #4
 8004402:	2200      	movs	r2, #0
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004408:	4b21      	ldr	r3, [pc, #132]	; (8004490 <MX_TIM2_Init+0xa4>)
 800440a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800440e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004410:	4b1f      	ldr	r3, [pc, #124]	; (8004490 <MX_TIM2_Init+0xa4>)
 8004412:	2200      	movs	r2, #0
 8004414:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004416:	4b1e      	ldr	r3, [pc, #120]	; (8004490 <MX_TIM2_Init+0xa4>)
 8004418:	2200      	movs	r2, #0
 800441a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800441c:	4b1c      	ldr	r3, [pc, #112]	; (8004490 <MX_TIM2_Init+0xa4>)
 800441e:	f04f 32ff 	mov.w	r2, #4294967295
 8004422:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004424:	4b1a      	ldr	r3, [pc, #104]	; (8004490 <MX_TIM2_Init+0xa4>)
 8004426:	2200      	movs	r2, #0
 8004428:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800442a:	4b19      	ldr	r3, [pc, #100]	; (8004490 <MX_TIM2_Init+0xa4>)
 800442c:	2200      	movs	r2, #0
 800442e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004430:	2303      	movs	r3, #3
 8004432:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004434:	2300      	movs	r3, #0
 8004436:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004438:	2301      	movs	r3, #1
 800443a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800443c:	2300      	movs	r3, #0
 800443e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004440:	2300      	movs	r3, #0
 8004442:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004444:	2300      	movs	r3, #0
 8004446:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004448:	2301      	movs	r3, #1
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800444c:	2300      	movs	r3, #0
 800444e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004450:	2300      	movs	r3, #0
 8004452:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004454:	f107 030c 	add.w	r3, r7, #12
 8004458:	4619      	mov	r1, r3
 800445a:	480d      	ldr	r0, [pc, #52]	; (8004490 <MX_TIM2_Init+0xa4>)
 800445c:	f005 fcfa 	bl	8009e54 <HAL_TIM_Encoder_Init>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8004466:	f7ff feed 	bl	8004244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800446a:	2300      	movs	r3, #0
 800446c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800446e:	2300      	movs	r3, #0
 8004470:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004472:	1d3b      	adds	r3, r7, #4
 8004474:	4619      	mov	r1, r3
 8004476:	4806      	ldr	r0, [pc, #24]	; (8004490 <MX_TIM2_Init+0xa4>)
 8004478:	f006 fe04 	bl	800b084 <HAL_TIMEx_MasterConfigSynchronization>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8004482:	f7ff fedf 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004486:	bf00      	nop
 8004488:	3730      	adds	r7, #48	; 0x30
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	20000e60 	.word	0x20000e60

08004494 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b08e      	sub	sp, #56	; 0x38
 8004498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800449a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	605a      	str	r2, [r3, #4]
 80044a4:	609a      	str	r2, [r3, #8]
 80044a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044a8:	f107 0320 	add.w	r3, r7, #32
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80044b2:	1d3b      	adds	r3, r7, #4
 80044b4:	2200      	movs	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	605a      	str	r2, [r3, #4]
 80044ba:	609a      	str	r2, [r3, #8]
 80044bc:	60da      	str	r2, [r3, #12]
 80044be:	611a      	str	r2, [r3, #16]
 80044c0:	615a      	str	r2, [r3, #20]
 80044c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80044c4:	4b2c      	ldr	r3, [pc, #176]	; (8004578 <MX_TIM3_Init+0xe4>)
 80044c6:	4a2d      	ldr	r2, [pc, #180]	; (800457c <MX_TIM3_Init+0xe8>)
 80044c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80044ca:	4b2b      	ldr	r3, [pc, #172]	; (8004578 <MX_TIM3_Init+0xe4>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044d0:	4b29      	ldr	r3, [pc, #164]	; (8004578 <MX_TIM3_Init+0xe4>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 80044d6:	4b28      	ldr	r3, [pc, #160]	; (8004578 <MX_TIM3_Init+0xe4>)
 80044d8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80044dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044de:	4b26      	ldr	r3, [pc, #152]	; (8004578 <MX_TIM3_Init+0xe4>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044e4:	4b24      	ldr	r3, [pc, #144]	; (8004578 <MX_TIM3_Init+0xe4>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80044ea:	4823      	ldr	r0, [pc, #140]	; (8004578 <MX_TIM3_Init+0xe4>)
 80044ec:	f005 f9aa 	bl	8009844 <HAL_TIM_Base_Init>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80044f6:	f7ff fea5 	bl	8004244 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004500:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004504:	4619      	mov	r1, r3
 8004506:	481c      	ldr	r0, [pc, #112]	; (8004578 <MX_TIM3_Init+0xe4>)
 8004508:	f006 f82c 	bl	800a564 <HAL_TIM_ConfigClockSource>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004512:	f7ff fe97 	bl	8004244 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004516:	4818      	ldr	r0, [pc, #96]	; (8004578 <MX_TIM3_Init+0xe4>)
 8004518:	f005 fab8 	bl	8009a8c <HAL_TIM_PWM_Init>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004522:	f7ff fe8f 	bl	8004244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004526:	2300      	movs	r3, #0
 8004528:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800452a:	2300      	movs	r3, #0
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800452e:	f107 0320 	add.w	r3, r7, #32
 8004532:	4619      	mov	r1, r3
 8004534:	4810      	ldr	r0, [pc, #64]	; (8004578 <MX_TIM3_Init+0xe4>)
 8004536:	f006 fda5 	bl	800b084 <HAL_TIMEx_MasterConfigSynchronization>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004540:	f7ff fe80 	bl	8004244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004544:	2360      	movs	r3, #96	; 0x60
 8004546:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004548:	2300      	movs	r3, #0
 800454a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800454c:	2300      	movs	r3, #0
 800454e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004550:	2300      	movs	r3, #0
 8004552:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004554:	1d3b      	adds	r3, r7, #4
 8004556:	2208      	movs	r2, #8
 8004558:	4619      	mov	r1, r3
 800455a:	4807      	ldr	r0, [pc, #28]	; (8004578 <MX_TIM3_Init+0xe4>)
 800455c:	f005 ff40 	bl	800a3e0 <HAL_TIM_PWM_ConfigChannel>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004566:	f7ff fe6d 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800456a:	4803      	ldr	r0, [pc, #12]	; (8004578 <MX_TIM3_Init+0xe4>)
 800456c:	f000 f9c0 	bl	80048f0 <HAL_TIM_MspPostInit>

}
 8004570:	bf00      	nop
 8004572:	3738      	adds	r7, #56	; 0x38
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	20000f14 	.word	0x20000f14
 800457c:	40000400 	.word	0x40000400

08004580 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004586:	f107 0308 	add.w	r3, r7, #8
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	605a      	str	r2, [r3, #4]
 8004590:	609a      	str	r2, [r3, #8]
 8004592:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004594:	463b      	mov	r3, r7
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800459c:	4b1d      	ldr	r3, [pc, #116]	; (8004614 <MX_TIM4_Init+0x94>)
 800459e:	4a1e      	ldr	r2, [pc, #120]	; (8004618 <MX_TIM4_Init+0x98>)
 80045a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 80045a2:	4b1c      	ldr	r3, [pc, #112]	; (8004614 <MX_TIM4_Init+0x94>)
 80045a4:	2263      	movs	r2, #99	; 0x63
 80045a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045a8:	4b1a      	ldr	r3, [pc, #104]	; (8004614 <MX_TIM4_Init+0x94>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 399;
 80045ae:	4b19      	ldr	r3, [pc, #100]	; (8004614 <MX_TIM4_Init+0x94>)
 80045b0:	f240 128f 	movw	r2, #399	; 0x18f
 80045b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045b6:	4b17      	ldr	r3, [pc, #92]	; (8004614 <MX_TIM4_Init+0x94>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045bc:	4b15      	ldr	r3, [pc, #84]	; (8004614 <MX_TIM4_Init+0x94>)
 80045be:	2200      	movs	r2, #0
 80045c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80045c2:	4814      	ldr	r0, [pc, #80]	; (8004614 <MX_TIM4_Init+0x94>)
 80045c4:	f005 f93e 	bl	8009844 <HAL_TIM_Base_Init>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80045ce:	f7ff fe39 	bl	8004244 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80045d8:	f107 0308 	add.w	r3, r7, #8
 80045dc:	4619      	mov	r1, r3
 80045de:	480d      	ldr	r0, [pc, #52]	; (8004614 <MX_TIM4_Init+0x94>)
 80045e0:	f005 ffc0 	bl	800a564 <HAL_TIM_ConfigClockSource>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80045ea:	f7ff fe2b 	bl	8004244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045ee:	2300      	movs	r3, #0
 80045f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045f2:	2300      	movs	r3, #0
 80045f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80045f6:	463b      	mov	r3, r7
 80045f8:	4619      	mov	r1, r3
 80045fa:	4806      	ldr	r0, [pc, #24]	; (8004614 <MX_TIM4_Init+0x94>)
 80045fc:	f006 fd42 	bl	800b084 <HAL_TIMEx_MasterConfigSynchronization>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8004606:	f7ff fe1d 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800460a:	bf00      	nop
 800460c:	3718      	adds	r7, #24
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20000fc8 	.word	0x20000fc8
 8004618:	40000800 	.word	0x40000800

0800461c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004622:	f107 0308 	add.w	r3, r7, #8
 8004626:	2200      	movs	r2, #0
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	605a      	str	r2, [r3, #4]
 800462c:	609a      	str	r2, [r3, #8]
 800462e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004630:	463b      	mov	r3, r7
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004638:	4b1d      	ldr	r3, [pc, #116]	; (80046b0 <MX_TIM5_Init+0x94>)
 800463a:	4a1e      	ldr	r2, [pc, #120]	; (80046b4 <MX_TIM5_Init+0x98>)
 800463c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 800463e:	4b1c      	ldr	r3, [pc, #112]	; (80046b0 <MX_TIM5_Init+0x94>)
 8004640:	2253      	movs	r2, #83	; 0x53
 8004642:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004644:	4b1a      	ldr	r3, [pc, #104]	; (80046b0 <MX_TIM5_Init+0x94>)
 8004646:	2200      	movs	r2, #0
 8004648:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800464a:	4b19      	ldr	r3, [pc, #100]	; (80046b0 <MX_TIM5_Init+0x94>)
 800464c:	f04f 32ff 	mov.w	r2, #4294967295
 8004650:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004652:	4b17      	ldr	r3, [pc, #92]	; (80046b0 <MX_TIM5_Init+0x94>)
 8004654:	2200      	movs	r2, #0
 8004656:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004658:	4b15      	ldr	r3, [pc, #84]	; (80046b0 <MX_TIM5_Init+0x94>)
 800465a:	2200      	movs	r2, #0
 800465c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800465e:	4814      	ldr	r0, [pc, #80]	; (80046b0 <MX_TIM5_Init+0x94>)
 8004660:	f005 f8f0 	bl	8009844 <HAL_TIM_Base_Init>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800466a:	f7ff fdeb 	bl	8004244 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800466e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004672:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004674:	f107 0308 	add.w	r3, r7, #8
 8004678:	4619      	mov	r1, r3
 800467a:	480d      	ldr	r0, [pc, #52]	; (80046b0 <MX_TIM5_Init+0x94>)
 800467c:	f005 ff72 	bl	800a564 <HAL_TIM_ConfigClockSource>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8004686:	f7ff fddd 	bl	8004244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800468a:	2300      	movs	r3, #0
 800468c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800468e:	2300      	movs	r3, #0
 8004690:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004692:	463b      	mov	r3, r7
 8004694:	4619      	mov	r1, r3
 8004696:	4806      	ldr	r0, [pc, #24]	; (80046b0 <MX_TIM5_Init+0x94>)
 8004698:	f006 fcf4 	bl	800b084 <HAL_TIMEx_MasterConfigSynchronization>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80046a2:	f7ff fdcf 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80046a6:	bf00      	nop
 80046a8:	3718      	adds	r7, #24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	2000107c 	.word	0x2000107c
 80046b4:	40000c00 	.word	0x40000c00

080046b8 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b088      	sub	sp, #32
 80046bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80046be:	1d3b      	adds	r3, r7, #4
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	605a      	str	r2, [r3, #4]
 80046c6:	609a      	str	r2, [r3, #8]
 80046c8:	60da      	str	r2, [r3, #12]
 80046ca:	611a      	str	r2, [r3, #16]
 80046cc:	615a      	str	r2, [r3, #20]
 80046ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80046d0:	4b21      	ldr	r3, [pc, #132]	; (8004758 <MX_TIM11_Init+0xa0>)
 80046d2:	4a22      	ldr	r2, [pc, #136]	; (800475c <MX_TIM11_Init+0xa4>)
 80046d4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80046d6:	4b20      	ldr	r3, [pc, #128]	; (8004758 <MX_TIM11_Init+0xa0>)
 80046d8:	2263      	movs	r2, #99	; 0x63
 80046da:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046dc:	4b1e      	ldr	r3, [pc, #120]	; (8004758 <MX_TIM11_Init+0xa0>)
 80046de:	2200      	movs	r2, #0
 80046e0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 80046e2:	4b1d      	ldr	r3, [pc, #116]	; (8004758 <MX_TIM11_Init+0xa0>)
 80046e4:	f240 72d5 	movw	r2, #2005	; 0x7d5
 80046e8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046ea:	4b1b      	ldr	r3, [pc, #108]	; (8004758 <MX_TIM11_Init+0xa0>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046f0:	4b19      	ldr	r3, [pc, #100]	; (8004758 <MX_TIM11_Init+0xa0>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80046f6:	4818      	ldr	r0, [pc, #96]	; (8004758 <MX_TIM11_Init+0xa0>)
 80046f8:	f005 f8a4 	bl	8009844 <HAL_TIM_Base_Init>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8004702:	f7ff fd9f 	bl	8004244 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8004706:	4814      	ldr	r0, [pc, #80]	; (8004758 <MX_TIM11_Init+0xa0>)
 8004708:	f005 f95a 	bl	80099c0 <HAL_TIM_OC_Init>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8004712:	f7ff fd97 	bl	8004244 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 8004716:	2108      	movs	r1, #8
 8004718:	480f      	ldr	r0, [pc, #60]	; (8004758 <MX_TIM11_Init+0xa0>)
 800471a:	f005 facd 	bl	8009cb8 <HAL_TIM_OnePulse_Init>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 8004724:	f7ff fd8e 	bl	8004244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8004728:	2310      	movs	r3, #16
 800472a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 800472c:	f240 5399 	movw	r3, #1433	; 0x599
 8004730:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004732:	2300      	movs	r3, #0
 8004734:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004736:	2300      	movs	r3, #0
 8004738:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800473a:	1d3b      	adds	r3, r7, #4
 800473c:	2200      	movs	r2, #0
 800473e:	4619      	mov	r1, r3
 8004740:	4805      	ldr	r0, [pc, #20]	; (8004758 <MX_TIM11_Init+0xa0>)
 8004742:	f005 fdf1 	bl	800a328 <HAL_TIM_OC_ConfigChannel>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 800474c:	f7ff fd7a 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8004750:	bf00      	nop
 8004752:	3720      	adds	r7, #32
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	20001130 	.word	0x20001130
 800475c:	40014800 	.word	0x40014800

08004760 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b08a      	sub	sp, #40	; 0x28
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004768:	f107 0314 	add.w	r3, r7, #20
 800476c:	2200      	movs	r2, #0
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	605a      	str	r2, [r3, #4]
 8004772:	609a      	str	r2, [r3, #8]
 8004774:	60da      	str	r2, [r3, #12]
 8004776:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004780:	d133      	bne.n	80047ea <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004782:	2300      	movs	r3, #0
 8004784:	613b      	str	r3, [r7, #16]
 8004786:	4b1b      	ldr	r3, [pc, #108]	; (80047f4 <HAL_TIM_Encoder_MspInit+0x94>)
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	4a1a      	ldr	r2, [pc, #104]	; (80047f4 <HAL_TIM_Encoder_MspInit+0x94>)
 800478c:	f043 0301 	orr.w	r3, r3, #1
 8004790:	6413      	str	r3, [r2, #64]	; 0x40
 8004792:	4b18      	ldr	r3, [pc, #96]	; (80047f4 <HAL_TIM_Encoder_MspInit+0x94>)
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800479e:	2300      	movs	r3, #0
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	4b14      	ldr	r3, [pc, #80]	; (80047f4 <HAL_TIM_Encoder_MspInit+0x94>)
 80047a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a6:	4a13      	ldr	r2, [pc, #76]	; (80047f4 <HAL_TIM_Encoder_MspInit+0x94>)
 80047a8:	f043 0301 	orr.w	r3, r3, #1
 80047ac:	6313      	str	r3, [r2, #48]	; 0x30
 80047ae:	4b11      	ldr	r3, [pc, #68]	; (80047f4 <HAL_TIM_Encoder_MspInit+0x94>)
 80047b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80047ba:	2303      	movs	r3, #3
 80047bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047be:	2302      	movs	r3, #2
 80047c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c2:	2300      	movs	r3, #0
 80047c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047c6:	2300      	movs	r3, #0
 80047c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80047ca:	2301      	movs	r3, #1
 80047cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047ce:	f107 0314 	add.w	r3, r7, #20
 80047d2:	4619      	mov	r1, r3
 80047d4:	4808      	ldr	r0, [pc, #32]	; (80047f8 <HAL_TIM_Encoder_MspInit+0x98>)
 80047d6:	f002 fa5b 	bl	8006c90 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80047da:	2200      	movs	r2, #0
 80047dc:	2100      	movs	r1, #0
 80047de:	201c      	movs	r0, #28
 80047e0:	f001 fe03 	bl	80063ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80047e4:	201c      	movs	r0, #28
 80047e6:	f001 fe1c 	bl	8006422 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80047ea:	bf00      	nop
 80047ec:	3728      	adds	r7, #40	; 0x28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	40023800 	.word	0x40023800
 80047f8:	40020000 	.word	0x40020000

080047fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a34      	ldr	r2, [pc, #208]	; (80048dc <HAL_TIM_Base_MspInit+0xe0>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d116      	bne.n	800483c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800480e:	2300      	movs	r3, #0
 8004810:	617b      	str	r3, [r7, #20]
 8004812:	4b33      	ldr	r3, [pc, #204]	; (80048e0 <HAL_TIM_Base_MspInit+0xe4>)
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	4a32      	ldr	r2, [pc, #200]	; (80048e0 <HAL_TIM_Base_MspInit+0xe4>)
 8004818:	f043 0302 	orr.w	r3, r3, #2
 800481c:	6413      	str	r3, [r2, #64]	; 0x40
 800481e:	4b30      	ldr	r3, [pc, #192]	; (80048e0 <HAL_TIM_Base_MspInit+0xe4>)
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	617b      	str	r3, [r7, #20]
 8004828:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800482a:	2200      	movs	r2, #0
 800482c:	2100      	movs	r1, #0
 800482e:	201d      	movs	r0, #29
 8004830:	f001 fddb 	bl	80063ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004834:	201d      	movs	r0, #29
 8004836:	f001 fdf4 	bl	8006422 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800483a:	e04a      	b.n	80048d2 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a28      	ldr	r2, [pc, #160]	; (80048e4 <HAL_TIM_Base_MspInit+0xe8>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d116      	bne.n	8004874 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004846:	2300      	movs	r3, #0
 8004848:	613b      	str	r3, [r7, #16]
 800484a:	4b25      	ldr	r3, [pc, #148]	; (80048e0 <HAL_TIM_Base_MspInit+0xe4>)
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	4a24      	ldr	r2, [pc, #144]	; (80048e0 <HAL_TIM_Base_MspInit+0xe4>)
 8004850:	f043 0304 	orr.w	r3, r3, #4
 8004854:	6413      	str	r3, [r2, #64]	; 0x40
 8004856:	4b22      	ldr	r3, [pc, #136]	; (80048e0 <HAL_TIM_Base_MspInit+0xe4>)
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	f003 0304 	and.w	r3, r3, #4
 800485e:	613b      	str	r3, [r7, #16]
 8004860:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 1);
 8004862:	2201      	movs	r2, #1
 8004864:	2100      	movs	r1, #0
 8004866:	201e      	movs	r0, #30
 8004868:	f001 fdbf 	bl	80063ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800486c:	201e      	movs	r0, #30
 800486e:	f001 fdd8 	bl	8006422 <HAL_NVIC_EnableIRQ>
}
 8004872:	e02e      	b.n	80048d2 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM5)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a1b      	ldr	r2, [pc, #108]	; (80048e8 <HAL_TIM_Base_MspInit+0xec>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d10e      	bne.n	800489c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800487e:	2300      	movs	r3, #0
 8004880:	60fb      	str	r3, [r7, #12]
 8004882:	4b17      	ldr	r3, [pc, #92]	; (80048e0 <HAL_TIM_Base_MspInit+0xe4>)
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	4a16      	ldr	r2, [pc, #88]	; (80048e0 <HAL_TIM_Base_MspInit+0xe4>)
 8004888:	f043 0308 	orr.w	r3, r3, #8
 800488c:	6413      	str	r3, [r2, #64]	; 0x40
 800488e:	4b14      	ldr	r3, [pc, #80]	; (80048e0 <HAL_TIM_Base_MspInit+0xe4>)
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	f003 0308 	and.w	r3, r3, #8
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	68fb      	ldr	r3, [r7, #12]
}
 800489a:	e01a      	b.n	80048d2 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM11)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a12      	ldr	r2, [pc, #72]	; (80048ec <HAL_TIM_Base_MspInit+0xf0>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d115      	bne.n	80048d2 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80048a6:	2300      	movs	r3, #0
 80048a8:	60bb      	str	r3, [r7, #8]
 80048aa:	4b0d      	ldr	r3, [pc, #52]	; (80048e0 <HAL_TIM_Base_MspInit+0xe4>)
 80048ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ae:	4a0c      	ldr	r2, [pc, #48]	; (80048e0 <HAL_TIM_Base_MspInit+0xe4>)
 80048b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048b4:	6453      	str	r3, [r2, #68]	; 0x44
 80048b6:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <HAL_TIM_Base_MspInit+0xe4>)
 80048b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048be:	60bb      	str	r3, [r7, #8]
 80048c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80048c2:	2200      	movs	r2, #0
 80048c4:	2100      	movs	r1, #0
 80048c6:	201a      	movs	r0, #26
 80048c8:	f001 fd8f 	bl	80063ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80048cc:	201a      	movs	r0, #26
 80048ce:	f001 fda8 	bl	8006422 <HAL_NVIC_EnableIRQ>
}
 80048d2:	bf00      	nop
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	40000400 	.word	0x40000400
 80048e0:	40023800 	.word	0x40023800
 80048e4:	40000800 	.word	0x40000800
 80048e8:	40000c00 	.word	0x40000c00
 80048ec:	40014800 	.word	0x40014800

080048f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b088      	sub	sp, #32
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048f8:	f107 030c 	add.w	r3, r7, #12
 80048fc:	2200      	movs	r2, #0
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	605a      	str	r2, [r3, #4]
 8004902:	609a      	str	r2, [r3, #8]
 8004904:	60da      	str	r2, [r3, #12]
 8004906:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a12      	ldr	r2, [pc, #72]	; (8004958 <HAL_TIM_MspPostInit+0x68>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d11e      	bne.n	8004950 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004912:	2300      	movs	r3, #0
 8004914:	60bb      	str	r3, [r7, #8]
 8004916:	4b11      	ldr	r3, [pc, #68]	; (800495c <HAL_TIM_MspPostInit+0x6c>)
 8004918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491a:	4a10      	ldr	r2, [pc, #64]	; (800495c <HAL_TIM_MspPostInit+0x6c>)
 800491c:	f043 0304 	orr.w	r3, r3, #4
 8004920:	6313      	str	r3, [r2, #48]	; 0x30
 8004922:	4b0e      	ldr	r3, [pc, #56]	; (800495c <HAL_TIM_MspPostInit+0x6c>)
 8004924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004926:	f003 0304 	and.w	r3, r3, #4
 800492a:	60bb      	str	r3, [r7, #8]
 800492c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800492e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004932:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004934:	2302      	movs	r3, #2
 8004936:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004938:	2300      	movs	r3, #0
 800493a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800493c:	2300      	movs	r3, #0
 800493e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004940:	2302      	movs	r3, #2
 8004942:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004944:	f107 030c 	add.w	r3, r7, #12
 8004948:	4619      	mov	r1, r3
 800494a:	4805      	ldr	r0, [pc, #20]	; (8004960 <HAL_TIM_MspPostInit+0x70>)
 800494c:	f002 f9a0 	bl	8006c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004950:	bf00      	nop
 8004952:	3720      	adds	r7, #32
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	40000400 	.word	0x40000400
 800495c:	40023800 	.word	0x40023800
 8004960:	40020800 	.word	0x40020800

08004964 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004968:	4b12      	ldr	r3, [pc, #72]	; (80049b4 <MX_USART2_UART_Init+0x50>)
 800496a:	4a13      	ldr	r2, [pc, #76]	; (80049b8 <MX_USART2_UART_Init+0x54>)
 800496c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800496e:	4b11      	ldr	r3, [pc, #68]	; (80049b4 <MX_USART2_UART_Init+0x50>)
 8004970:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8004974:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8004976:	4b0f      	ldr	r3, [pc, #60]	; (80049b4 <MX_USART2_UART_Init+0x50>)
 8004978:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800497c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800497e:	4b0d      	ldr	r3, [pc, #52]	; (80049b4 <MX_USART2_UART_Init+0x50>)
 8004980:	2200      	movs	r2, #0
 8004982:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8004984:	4b0b      	ldr	r3, [pc, #44]	; (80049b4 <MX_USART2_UART_Init+0x50>)
 8004986:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800498a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800498c:	4b09      	ldr	r3, [pc, #36]	; (80049b4 <MX_USART2_UART_Init+0x50>)
 800498e:	220c      	movs	r2, #12
 8004990:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004992:	4b08      	ldr	r3, [pc, #32]	; (80049b4 <MX_USART2_UART_Init+0x50>)
 8004994:	2200      	movs	r2, #0
 8004996:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004998:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <MX_USART2_UART_Init+0x50>)
 800499a:	2200      	movs	r2, #0
 800499c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800499e:	4805      	ldr	r0, [pc, #20]	; (80049b4 <MX_USART2_UART_Init+0x50>)
 80049a0:	f006 fbfc 	bl	800b19c <HAL_UART_Init>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80049aa:	f7ff fc4b 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80049ae:	bf00      	nop
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	200011e4 	.word	0x200011e4
 80049b8:	40004400 	.word	0x40004400

080049bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b08a      	sub	sp, #40	; 0x28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049c4:	f107 0314 	add.w	r3, r7, #20
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	605a      	str	r2, [r3, #4]
 80049ce:	609a      	str	r2, [r3, #8]
 80049d0:	60da      	str	r2, [r3, #12]
 80049d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a34      	ldr	r2, [pc, #208]	; (8004aac <HAL_UART_MspInit+0xf0>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d161      	bne.n	8004aa2 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80049de:	2300      	movs	r3, #0
 80049e0:	613b      	str	r3, [r7, #16]
 80049e2:	4b33      	ldr	r3, [pc, #204]	; (8004ab0 <HAL_UART_MspInit+0xf4>)
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	4a32      	ldr	r2, [pc, #200]	; (8004ab0 <HAL_UART_MspInit+0xf4>)
 80049e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049ec:	6413      	str	r3, [r2, #64]	; 0x40
 80049ee:	4b30      	ldr	r3, [pc, #192]	; (8004ab0 <HAL_UART_MspInit+0xf4>)
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f6:	613b      	str	r3, [r7, #16]
 80049f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049fa:	2300      	movs	r3, #0
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	4b2c      	ldr	r3, [pc, #176]	; (8004ab0 <HAL_UART_MspInit+0xf4>)
 8004a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a02:	4a2b      	ldr	r2, [pc, #172]	; (8004ab0 <HAL_UART_MspInit+0xf4>)
 8004a04:	f043 0301 	orr.w	r3, r3, #1
 8004a08:	6313      	str	r3, [r2, #48]	; 0x30
 8004a0a:	4b29      	ldr	r3, [pc, #164]	; (8004ab0 <HAL_UART_MspInit+0xf4>)
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004a16:	230c      	movs	r3, #12
 8004a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a22:	2303      	movs	r3, #3
 8004a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004a26:	2307      	movs	r3, #7
 8004a28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a2a:	f107 0314 	add.w	r3, r7, #20
 8004a2e:	4619      	mov	r1, r3
 8004a30:	4820      	ldr	r0, [pc, #128]	; (8004ab4 <HAL_UART_MspInit+0xf8>)
 8004a32:	f002 f92d 	bl	8006c90 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004a36:	4b20      	ldr	r3, [pc, #128]	; (8004ab8 <HAL_UART_MspInit+0xfc>)
 8004a38:	4a20      	ldr	r2, [pc, #128]	; (8004abc <HAL_UART_MspInit+0x100>)
 8004a3a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004a3c:	4b1e      	ldr	r3, [pc, #120]	; (8004ab8 <HAL_UART_MspInit+0xfc>)
 8004a3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a42:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a44:	4b1c      	ldr	r3, [pc, #112]	; (8004ab8 <HAL_UART_MspInit+0xfc>)
 8004a46:	2240      	movs	r2, #64	; 0x40
 8004a48:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a4a:	4b1b      	ldr	r3, [pc, #108]	; (8004ab8 <HAL_UART_MspInit+0xfc>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a50:	4b19      	ldr	r3, [pc, #100]	; (8004ab8 <HAL_UART_MspInit+0xfc>)
 8004a52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a56:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a58:	4b17      	ldr	r3, [pc, #92]	; (8004ab8 <HAL_UART_MspInit+0xfc>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a5e:	4b16      	ldr	r3, [pc, #88]	; (8004ab8 <HAL_UART_MspInit+0xfc>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004a64:	4b14      	ldr	r3, [pc, #80]	; (8004ab8 <HAL_UART_MspInit+0xfc>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004a6a:	4b13      	ldr	r3, [pc, #76]	; (8004ab8 <HAL_UART_MspInit+0xfc>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a70:	4b11      	ldr	r3, [pc, #68]	; (8004ab8 <HAL_UART_MspInit+0xfc>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004a76:	4810      	ldr	r0, [pc, #64]	; (8004ab8 <HAL_UART_MspInit+0xfc>)
 8004a78:	f001 fcee 	bl	8006458 <HAL_DMA_Init>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8004a82:	f7ff fbdf 	bl	8004244 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a0b      	ldr	r2, [pc, #44]	; (8004ab8 <HAL_UART_MspInit+0xfc>)
 8004a8a:	635a      	str	r2, [r3, #52]	; 0x34
 8004a8c:	4a0a      	ldr	r2, [pc, #40]	; (8004ab8 <HAL_UART_MspInit+0xfc>)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004a92:	2200      	movs	r2, #0
 8004a94:	2100      	movs	r1, #0
 8004a96:	2026      	movs	r0, #38	; 0x26
 8004a98:	f001 fca7 	bl	80063ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004a9c:	2026      	movs	r0, #38	; 0x26
 8004a9e:	f001 fcc0 	bl	8006422 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004aa2:	bf00      	nop
 8004aa4:	3728      	adds	r7, #40	; 0x28
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	40004400 	.word	0x40004400
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	40020000 	.word	0x40020000
 8004ab8:	20001258 	.word	0x20001258
 8004abc:	400260a0 	.word	0x400260a0

08004ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004af8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004ac4:	480d      	ldr	r0, [pc, #52]	; (8004afc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004ac6:	490e      	ldr	r1, [pc, #56]	; (8004b00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004ac8:	4a0e      	ldr	r2, [pc, #56]	; (8004b04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004acc:	e002      	b.n	8004ad4 <LoopCopyDataInit>

08004ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ad2:	3304      	adds	r3, #4

08004ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ad8:	d3f9      	bcc.n	8004ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ada:	4a0b      	ldr	r2, [pc, #44]	; (8004b08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004adc:	4c0b      	ldr	r4, [pc, #44]	; (8004b0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8004ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ae0:	e001      	b.n	8004ae6 <LoopFillZerobss>

08004ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ae4:	3204      	adds	r2, #4

08004ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ae8:	d3fb      	bcc.n	8004ae2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004aea:	f7ff fc6d 	bl	80043c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004aee:	f007 fdf5 	bl	800c6dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004af2:	f7fe fdb1 	bl	8003658 <main>
  bx  lr    
 8004af6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004af8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b00:	200002a4 	.word	0x200002a4
  ldr r2, =_sidata
 8004b04:	0800f0f8 	.word	0x0800f0f8
  ldr r2, =_sbss
 8004b08:	200002a4 	.word	0x200002a4
  ldr r4, =_ebss
 8004b0c:	200012bc 	.word	0x200012bc

08004b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b10:	e7fe      	b.n	8004b10 <ADC_IRQHandler>
	...

08004b14 <arm_atan2_f32>:
                   and compute the right angle.
*/


arm_status arm_atan2_f32(float32_t y,float32_t x,float32_t *result)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b0a1      	sub	sp, #132	; 0x84
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	ed87 0a03 	vstr	s0, [r7, #12]
 8004b1e:	edc7 0a02 	vstr	s1, [r7, #8]
 8004b22:	6078      	str	r0, [r7, #4]
    if (x > 0.0f)
 8004b24:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b30:	f340 808e 	ble.w	8004c50 <arm_atan2_f32+0x13c>
    {
        *result=arm_atan_f32(y/x);
 8004b34:	edd7 6a03 	vldr	s13, [r7, #12]
 8004b38:	ed97 7a02 	vldr	s14, [r7, #8]
 8004b3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b40:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
   int sign=0;
 8004b44:	2300      	movs	r3, #0
 8004b46:	67bb      	str	r3, [r7, #120]	; 0x78
   float32_t res=0.0f;
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	677b      	str	r3, [r7, #116]	; 0x74
   if (x < 0.0f)
 8004b4e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8004b52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b5a:	d507      	bpl.n	8004b6c <arm_atan2_f32+0x58>
      sign=1;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	67bb      	str	r3, [r7, #120]	; 0x78
      x=-x;
 8004b60:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8004b64:	eef1 7a67 	vneg.f32	s15, s15
 8004b68:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
   if (x > 1.0f)
 8004b6c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8004b70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b7c:	dd31      	ble.n	8004be2 <arm_atan2_f32+0xce>
      x = 1.0f / x;
 8004b7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b82:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8004b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b8a:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
 8004b8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b90:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8004b92:	4bb5      	ldr	r3, [pc, #724]	; (8004e68 <arm_atan2_f32+0x354>)
 8004b94:	66fb      	str	r3, [r7, #108]	; 0x6c
    int i=1;
 8004b96:	2301      	movs	r3, #1
 8004b98:	66bb      	str	r3, [r7, #104]	; 0x68
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b9e:	e014      	b.n	8004bca <arm_atan2_f32+0xb6>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8004ba0:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8004ba4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8004ba8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004bac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bae:	f1c3 0309 	rsb	r3, r3, #9
 8004bb2:	4aae      	ldr	r2, [pc, #696]	; (8004e6c <arm_atan2_f32+0x358>)
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	edd3 7a00 	vldr	s15, [r3]
 8004bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bc0:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8004bc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bcc:	2b09      	cmp	r3, #9
 8004bce:	dde7      	ble.n	8004ba0 <arm_atan2_f32+0x8c>
    return(res);
 8004bd0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8004bd4:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8004e70 <arm_atan2_f32+0x35c>
 8004bd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bdc:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
 8004be0:	e028      	b.n	8004c34 <arm_atan2_f32+0x120>
 8004be2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004be4:	667b      	str	r3, [r7, #100]	; 0x64
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8004be6:	4ba0      	ldr	r3, [pc, #640]	; (8004e68 <arm_atan2_f32+0x354>)
 8004be8:	663b      	str	r3, [r7, #96]	; 0x60
    int i=1;
 8004bea:	2301      	movs	r3, #1
 8004bec:	65fb      	str	r3, [r7, #92]	; 0x5c
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8004bee:	2301      	movs	r3, #1
 8004bf0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bf2:	e014      	b.n	8004c1e <arm_atan2_f32+0x10a>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8004bf4:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8004bf8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004bfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c02:	f1c3 0309 	rsb	r3, r3, #9
 8004c06:	4a99      	ldr	r2, [pc, #612]	; (8004e6c <arm_atan2_f32+0x358>)
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4413      	add	r3, r2
 8004c0c:	edd3 7a00 	vldr	s15, [r3]
 8004c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c14:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8004c18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c20:	2b09      	cmp	r3, #9
 8004c22:	dde7      	ble.n	8004bf4 <arm_atan2_f32+0xe0>
    return(res);
 8004c24:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
     res += arm_atan_limited_f32(x);
 8004c28:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8004c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c30:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
   if (sign)
 8004c34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d005      	beq.n	8004c46 <arm_atan2_f32+0x132>
     res = -res;
 8004c3a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004c3e:	eef1 7a67 	vneg.f32	s15, s15
 8004c42:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
   return(res);
 8004c46:	6f7a      	ldr	r2, [r7, #116]	; 0x74
        *result=arm_atan_f32(y/x);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	601a      	str	r2, [r3, #0]
        return(ARM_MATH_SUCCESS);
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	e175      	b.n	8004f3c <arm_atan2_f32+0x428>
    }
    if (x < 0.0f)
 8004c50:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c5c:	f140 814d 	bpl.w	8004efa <arm_atan2_f32+0x3e6>
    {
        if (y > 0.0f)
 8004c60:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c6c:	f340 8093 	ble.w	8004d96 <arm_atan2_f32+0x282>
        {
           *result=arm_atan_f32(y/x) + PI;
 8004c70:	edd7 6a03 	vldr	s13, [r7, #12]
 8004c74:	ed97 7a02 	vldr	s14, [r7, #8]
 8004c78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c7c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
   int sign=0;
 8004c80:	2300      	movs	r3, #0
 8004c82:	657b      	str	r3, [r7, #84]	; 0x54
   float32_t res=0.0f;
 8004c84:	f04f 0300 	mov.w	r3, #0
 8004c88:	653b      	str	r3, [r7, #80]	; 0x50
   if (x < 0.0f)
 8004c8a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004c8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c96:	d507      	bpl.n	8004ca8 <arm_atan2_f32+0x194>
      sign=1;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	657b      	str	r3, [r7, #84]	; 0x54
      x=-x;
 8004c9c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004ca0:	eef1 7a67 	vneg.f32	s15, s15
 8004ca4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
   if (x > 1.0f)
 8004ca8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004cac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb8:	dd31      	ble.n	8004d1e <arm_atan2_f32+0x20a>
      x = 1.0f / x;
 8004cba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cbe:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004cc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cc6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8004cca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8004cce:	4b66      	ldr	r3, [pc, #408]	; (8004e68 <arm_atan2_f32+0x354>)
 8004cd0:	64bb      	str	r3, [r7, #72]	; 0x48
    int i=1;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	647b      	str	r3, [r7, #68]	; 0x44
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	647b      	str	r3, [r7, #68]	; 0x44
 8004cda:	e014      	b.n	8004d06 <arm_atan2_f32+0x1f2>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8004cdc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004ce0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004ce4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cea:	f1c3 0309 	rsb	r3, r3, #9
 8004cee:	4a5f      	ldr	r2, [pc, #380]	; (8004e6c <arm_atan2_f32+0x358>)
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	edd3 7a00 	vldr	s15, [r3]
 8004cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cfc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8004d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d02:	3301      	adds	r3, #1
 8004d04:	647b      	str	r3, [r7, #68]	; 0x44
 8004d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d08:	2b09      	cmp	r3, #9
 8004d0a:	dde7      	ble.n	8004cdc <arm_atan2_f32+0x1c8>
    return(res);
 8004d0c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8004d10:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8004e70 <arm_atan2_f32+0x35c>
 8004d14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d18:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8004d1c:	e028      	b.n	8004d70 <arm_atan2_f32+0x25c>
 8004d1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d20:	643b      	str	r3, [r7, #64]	; 0x40
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8004d22:	4b51      	ldr	r3, [pc, #324]	; (8004e68 <arm_atan2_f32+0x354>)
 8004d24:	63fb      	str	r3, [r7, #60]	; 0x3c
    int i=1;
 8004d26:	2301      	movs	r3, #1
 8004d28:	63bb      	str	r3, [r7, #56]	; 0x38
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d2e:	e014      	b.n	8004d5a <arm_atan2_f32+0x246>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8004d30:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004d34:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004d38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3e:	f1c3 0309 	rsb	r3, r3, #9
 8004d42:	4a4a      	ldr	r2, [pc, #296]	; (8004e6c <arm_atan2_f32+0x358>)
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	edd3 7a00 	vldr	s15, [r3]
 8004d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d50:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8004d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d56:	3301      	adds	r3, #1
 8004d58:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5c:	2b09      	cmp	r3, #9
 8004d5e:	dde7      	ble.n	8004d30 <arm_atan2_f32+0x21c>
    return(res);
 8004d60:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
     res += arm_atan_limited_f32(x);
 8004d64:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004d68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d6c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
   if (sign)
 8004d70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d005      	beq.n	8004d82 <arm_atan2_f32+0x26e>
     res = -res;
 8004d76:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004d7a:	eef1 7a67 	vneg.f32	s15, s15
 8004d7e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
   return(res);
 8004d82:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
           *result=arm_atan_f32(y/x) + PI;
 8004d86:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8004e74 <arm_atan2_f32+0x360>
 8004d8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	edc3 7a00 	vstr	s15, [r3]
 8004d94:	e0af      	b.n	8004ef6 <arm_atan2_f32+0x3e2>
        }
        else if (y < 0.0f)
 8004d96:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da2:	f140 809c 	bpl.w	8004ede <arm_atan2_f32+0x3ca>
        {
           *result=arm_atan_f32(y/x) - PI;
 8004da6:	edd7 6a03 	vldr	s13, [r7, #12]
 8004daa:	ed97 7a02 	vldr	s14, [r7, #8]
 8004dae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004db2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
   int sign=0;
 8004db6:	2300      	movs	r3, #0
 8004db8:	633b      	str	r3, [r7, #48]	; 0x30
   float32_t res=0.0f;
 8004dba:	f04f 0300 	mov.w	r3, #0
 8004dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   if (x < 0.0f)
 8004dc0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004dc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dcc:	d507      	bpl.n	8004dde <arm_atan2_f32+0x2ca>
      sign=1;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	633b      	str	r3, [r7, #48]	; 0x30
      x=-x;
 8004dd2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004dd6:	eef1 7a67 	vneg.f32	s15, s15
 8004dda:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
   if (x > 1.0f)
 8004dde:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004de2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004de6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dee:	dd31      	ble.n	8004e54 <arm_atan2_f32+0x340>
      x = 1.0f / x;
 8004df0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004df4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004df8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dfc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8004e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e02:	62bb      	str	r3, [r7, #40]	; 0x28
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8004e04:	4b18      	ldr	r3, [pc, #96]	; (8004e68 <arm_atan2_f32+0x354>)
 8004e06:	627b      	str	r3, [r7, #36]	; 0x24
    int i=1;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	623b      	str	r3, [r7, #32]
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	623b      	str	r3, [r7, #32]
 8004e10:	e014      	b.n	8004e3c <arm_atan2_f32+0x328>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8004e12:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004e16:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004e1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	f1c3 0309 	rsb	r3, r3, #9
 8004e24:	4a11      	ldr	r2, [pc, #68]	; (8004e6c <arm_atan2_f32+0x358>)
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	edd3 7a00 	vldr	s15, [r3]
 8004e2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e32:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8004e36:	6a3b      	ldr	r3, [r7, #32]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	623b      	str	r3, [r7, #32]
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
 8004e3e:	2b09      	cmp	r3, #9
 8004e40:	dde7      	ble.n	8004e12 <arm_atan2_f32+0x2fe>
    return(res);
 8004e42:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8004e46:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004e70 <arm_atan2_f32+0x35c>
 8004e4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e4e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8004e52:	e031      	b.n	8004eb8 <arm_atan2_f32+0x3a4>
 8004e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e56:	61fb      	str	r3, [r7, #28]
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8004e58:	4b03      	ldr	r3, [pc, #12]	; (8004e68 <arm_atan2_f32+0x354>)
 8004e5a:	61bb      	str	r3, [r7, #24]
    int i=1;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	617b      	str	r3, [r7, #20]
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8004e60:	2301      	movs	r3, #1
 8004e62:	617b      	str	r3, [r7, #20]
 8004e64:	e01d      	b.n	8004ea2 <arm_atan2_f32+0x38e>
 8004e66:	bf00      	nop
 8004e68:	bd0492a5 	.word	0xbd0492a5
 8004e6c:	0800ee94 	.word	0x0800ee94
 8004e70:	3fc90fdb 	.word	0x3fc90fdb
 8004e74:	40490fdb 	.word	0x40490fdb
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8004e78:	ed97 7a07 	vldr	s14, [r7, #28]
 8004e7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004e80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f1c3 0309 	rsb	r3, r3, #9
 8004e8a:	4a2f      	ldr	r2, [pc, #188]	; (8004f48 <arm_atan2_f32+0x434>)
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	edd3 7a00 	vldr	s15, [r3]
 8004e94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e98:	edc7 7a06 	vstr	s15, [r7, #24]
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	617b      	str	r3, [r7, #20]
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2b09      	cmp	r3, #9
 8004ea6:	dde7      	ble.n	8004e78 <arm_atan2_f32+0x364>
    return(res);
 8004ea8:	edd7 7a06 	vldr	s15, [r7, #24]
     res += arm_atan_limited_f32(x);
 8004eac:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8004eb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004eb4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
   if (sign)
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d005      	beq.n	8004eca <arm_atan2_f32+0x3b6>
     res = -res;
 8004ebe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004ec2:	eef1 7a67 	vneg.f32	s15, s15
 8004ec6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
   return(res);
 8004eca:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
           *result=arm_atan_f32(y/x) - PI;
 8004ece:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004f4c <arm_atan2_f32+0x438>
 8004ed2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	edc3 7a00 	vstr	s15, [r3]
 8004edc:	e00b      	b.n	8004ef6 <arm_atan2_f32+0x3e2>
        }
        else
        {
            if (signbit(y))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d003      	beq.n	8004ef0 <arm_atan2_f32+0x3dc>
            {
               *result= -PI;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a19      	ldr	r2, [pc, #100]	; (8004f50 <arm_atan2_f32+0x43c>)
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	e002      	b.n	8004ef6 <arm_atan2_f32+0x3e2>
            }
            else
            {
               *result= PI;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a18      	ldr	r2, [pc, #96]	; (8004f54 <arm_atan2_f32+0x440>)
 8004ef4:	601a      	str	r2, [r3, #0]
            }
        }
        return(ARM_MATH_SUCCESS);
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	e020      	b.n	8004f3c <arm_atan2_f32+0x428>
    }
    if (x == 0.0f)
 8004efa:	edd7 7a02 	vldr	s15, [r7, #8]
 8004efe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f06:	d117      	bne.n	8004f38 <arm_atan2_f32+0x424>
    {
        if (y > 0.0f)
 8004f08:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f14:	dd04      	ble.n	8004f20 <arm_atan2_f32+0x40c>
        {
            *result=PIHALFF32;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a0f      	ldr	r2, [pc, #60]	; (8004f58 <arm_atan2_f32+0x444>)
 8004f1a:	601a      	str	r2, [r3, #0]
            return(ARM_MATH_SUCCESS);
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	e00d      	b.n	8004f3c <arm_atan2_f32+0x428>
        }
        if (y < 0.0f)
 8004f20:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f2c:	d504      	bpl.n	8004f38 <arm_atan2_f32+0x424>
        {
            *result=-PIHALFF32;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a0a      	ldr	r2, [pc, #40]	; (8004f5c <arm_atan2_f32+0x448>)
 8004f32:	601a      	str	r2, [r3, #0]
            return(ARM_MATH_SUCCESS);
 8004f34:	2300      	movs	r3, #0
 8004f36:	e001      	b.n	8004f3c <arm_atan2_f32+0x428>
        }
    }
    

    return(ARM_MATH_NANINF);
 8004f38:	f06f 0303 	mvn.w	r3, #3

}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3784      	adds	r7, #132	; 0x84
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	0800ee94 	.word	0x0800ee94
 8004f4c:	40490fdb 	.word	0x40490fdb
 8004f50:	c0490fdb 	.word	0xc0490fdb
 8004f54:	40490fdb 	.word	0x40490fdb
 8004f58:	3fc90fdb 	.word	0x3fc90fdb
 8004f5c:	bfc90fdb 	.word	0xbfc90fdb

08004f60 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b08b      	sub	sp, #44	; 0x2c
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	881b      	ldrh	r3, [r3, #0]
 8004f82:	461a      	mov	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	885b      	ldrh	r3, [r3, #2]
 8004f88:	fb02 f303 	mul.w	r3, r2, r3
 8004f8c:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8004f92:	e013      	b.n	8004fbc <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	1d1a      	adds	r2, r3, #4
 8004f98:	627a      	str	r2, [r7, #36]	; 0x24
 8004f9a:	ed93 7a00 	vldr	s14, [r3]
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	1d1a      	adds	r2, r3, #4
 8004fa2:	623a      	str	r2, [r7, #32]
 8004fa4:	edd3 7a00 	vldr	s15, [r3]
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	1d1a      	adds	r2, r3, #4
 8004fac:	61fa      	str	r2, [r7, #28]
 8004fae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fb2:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1e8      	bne.n	8004f94 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8004fc6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	372c      	adds	r7, #44	; 0x2c
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b085      	sub	sp, #20
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	60f8      	str	r0, [r7, #12]
 8004fde:	607b      	str	r3, [r7, #4]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	817b      	strh	r3, [r7, #10]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	897a      	ldrh	r2, [r7, #10]
 8004fec:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	893a      	ldrh	r2, [r7, #8]
 8004ff2:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	605a      	str	r2, [r3, #4]
}
 8004ffa:	bf00      	nop
 8004ffc:	3714      	adds	r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8005006:	b480      	push	{r7}
 8005008:	b0bb      	sub	sp, #236	; 0xec
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	667b      	str	r3, [r7, #100]	; 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	663b      	str	r3, [r7, #96]	; 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	881b      	ldrh	r3, [r3, #0]
 8005020:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	885b      	ldrh	r3, [r3, #2]
 8005026:	65bb      	str	r3, [r7, #88]	; 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 8005028:	f04f 0300 	mov.w	r3, #0
 800502c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005030:	f04f 0300 	mov.w	r3, #0
 8005034:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 8005036:	2300      	movs	r3, #0
 8005038:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800503c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800503e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 8005042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005044:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8005048:	e03b      	b.n	80050c2 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800504a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800504c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 8005056:	e00c      	b.n	8005072 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 8005058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800505c:	1d1a      	adds	r2, r3, #4
 800505e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	601a      	str	r2, [r3, #0]
        j--;
 8005068:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800506c:	3b01      	subs	r3, #1
 800506e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 8005072:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1ee      	bne.n	8005058 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800507a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800507e:	1d1a      	adds	r2, r3, #4
 8005080:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8005084:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005088:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800508a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800508e:	3b01      	subs	r3, #1
 8005090:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 8005094:	e00c      	b.n	80050b0 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 8005096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800509a:	1d1a      	adds	r2, r3, #4
 800509c:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80050a0:	f04f 0200 	mov.w	r2, #0
 80050a4:	601a      	str	r2, [r3, #0]
        j--;
 80050a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050aa:	3b01      	subs	r3, #1
 80050ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 80050b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1ee      	bne.n	8005096 <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 80050b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80050bc:	3b01      	subs	r3, #1
 80050be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    while (rowCnt > 0U)
 80050c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1bf      	bne.n	800504a <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 80050ca:	2300      	movs	r3, #0
 80050cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80050d0:	e2c7      	b.n	8005662 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 80050d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050d6:	653b      	str	r3, [r7, #80]	; 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	885b      	ldrh	r3, [r3, #2]
 80050e0:	3301      	adds	r3, #1
 80050e2:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80050e6:	fb01 f303 	mul.w	r3, r1, r3
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      pivot = *pTmp;
 80050f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      selectedRow = column;
 80050fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005100:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8005104:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005108:	3301      	adds	r3, #1
 800510a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800510e:	e02c      	b.n	800516a <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	885b      	ldrh	r3, [r3, #2]
 8005118:	4619      	mov	r1, r3
 800511a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800511e:	fb03 f101 	mul.w	r1, r3, r1
 8005122:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005126:	440b      	add	r3, r1
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
          newPivot = *pTmp;
 8005130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	657b      	str	r3, [r7, #84]	; 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 8005138:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800513c:	eeb0 7ae7 	vabs.f32	s14, s15
 8005140:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8005144:	eef0 7ae7 	vabs.f32	s15, s15
 8005148:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800514c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005150:	dd06      	ble.n	8005160 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 8005152:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005156:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            pivot = newPivot;
 800515a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800515c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8005160:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005164:	3301      	adds	r3, #1
 8005166:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800516a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800516e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005170:	429a      	cmp	r2, r3
 8005172:	d3cd      	bcc.n	8005110 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 8005174:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8005178:	eef5 7a40 	vcmp.f32	s15, #0.0
 800517c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005180:	f000 809b 	beq.w	80052ba <arm_mat_inverse_f32+0x2b4>
 8005184:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005188:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800518c:	429a      	cmp	r2, r3
 800518e:	f000 8094 	beq.w	80052ba <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	885b      	ldrh	r3, [r3, #2]
 80051a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80051b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80051b6:	fb03 f202 	mul.w	r2, r3, r2
 80051ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051be:	4413      	add	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80051c6:	4413      	add	r3, r2
 80051c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80051d2:	fb03 f202 	mul.w	r2, r3, r2
 80051d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051da:	4413      	add	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80051e2:	4413      	add	r3, r2
 80051e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051e8:	2300      	movs	r3, #0
 80051ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80051ee:	e018      	b.n	8005222 <arm_mat_inverse_f32+0x21c>
 80051f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80051f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80051fc:	1d1a      	adds	r2, r3, #4
 80051fe:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8005202:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005206:	6812      	ldr	r2, [r2, #0]
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800520e:	1d1a      	adds	r2, r3, #4
 8005210:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8005214:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005216:	601a      	str	r2, [r3, #0]
 8005218:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800521c:	3301      	adds	r3, #1
 800521e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005222:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005228:	429a      	cmp	r2, r3
 800522a:	dbe1      	blt.n	80051f0 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	885b      	ldrh	r3, [r3, #2]
 8005240:	647b      	str	r3, [r7, #68]	; 0x44
 8005242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005244:	643b      	str	r3, [r7, #64]	; 0x40
 8005246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005248:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800524a:	fb02 f303 	mul.w	r3, r2, r3
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005254:	4413      	add	r3, r2
 8005256:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800525a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800525c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005260:	fb02 f303 	mul.w	r3, r2, r3
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800526a:	4413      	add	r3, r2
 800526c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005270:	2300      	movs	r3, #0
 8005272:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005276:	e018      	b.n	80052aa <arm_mat_inverse_f32+0x2a4>
 8005278:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005280:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005284:	1d1a      	adds	r2, r3, #4
 8005286:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800528a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800528e:	6812      	ldr	r2, [r2, #0]
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005296:	1d1a      	adds	r2, r3, #4
 8005298:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800529c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80052a4:	3301      	adds	r3, #1
 80052a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80052ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052b0:	429a      	cmp	r2, r3
 80052b2:	dbe1      	blt.n	8005278 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 80052b4:	2301      	movs	r3, #1
 80052b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 80052ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d009      	beq.n	80052d6 <arm_mat_inverse_f32+0x2d0>
 80052c2:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80052c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80052ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ce:	d102      	bne.n	80052d6 <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 80052d0:	f06f 0304 	mvn.w	r3, #4
 80052d4:	e208      	b.n	80056e8 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 80052d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052da:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 80052de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052e2:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	885b      	ldrh	r3, [r3, #2]
 80052f2:	637b      	str	r3, [r7, #52]	; 0x34
 80052f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	633b      	str	r3, [r7, #48]	; 0x30
 80052fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005300:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005302:	fb03 f202 	mul.w	r2, r3, r2
 8005306:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800530a:	4413      	add	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8005312:	4413      	add	r3, r2
 8005314:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005318:	2300      	movs	r3, #0
 800531a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800531e:	e011      	b.n	8005344 <arm_mat_inverse_f32+0x33e>
 8005320:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005324:	1d1a      	adds	r2, r3, #4
 8005326:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800532a:	ed93 7a00 	vldr	s14, [r3]
 800532e:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8005332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005336:	edc3 7a00 	vstr	s15, [r3]
 800533a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800533e:	3301      	adds	r3, #1
 8005340:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005344:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534a:	429a      	cmp	r2, r3
 800534c:	dbe8      	blt.n	8005320 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	885b      	ldrh	r3, [r3, #2]
 800535a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800535c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005362:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005364:	fb02 f303 	mul.w	r3, r2, r3
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800536e:	4413      	add	r3, r2
 8005370:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005374:	2300      	movs	r3, #0
 8005376:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800537a:	e011      	b.n	80053a0 <arm_mat_inverse_f32+0x39a>
 800537c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005380:	1d1a      	adds	r2, r3, #4
 8005382:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8005386:	ed93 7a00 	vldr	s14, [r3]
 800538a:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800538e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005392:	edc3 7a00 	vstr	s15, [r3]
 8005396:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800539a:	3301      	adds	r3, #1
 800539c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80053a0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80053a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a6:	429a      	cmp	r2, r3
 80053a8:	dbe8      	blt.n	800537c <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 80053aa:	2300      	movs	r3, #0
 80053ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      for (;rowNb < pivotRow; rowNb++)
 80053b0:	e0ae      	b.n	8005510 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	885b      	ldrh	r3, [r3, #2]
 80053ba:	4619      	mov	r1, r3
 80053bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053c0:	fb03 f101 	mul.w	r1, r3, r1
 80053c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80053c8:	440b      	add	r3, r1
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           pivot = *pTmp;
 80053d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	885b      	ldrh	r3, [r3, #2]
 80053f0:	617b      	str	r3, [r7, #20]
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	613b      	str	r3, [r7, #16]
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8005402:	fb03 f202 	mul.w	r2, r3, r2
 8005406:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800540a:	4413      	add	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8005412:	4413      	add	r3, r2
 8005414:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800541c:	fb03 f202 	mul.w	r2, r3, r2
 8005420:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005424:	4413      	add	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800542c:	4413      	add	r3, r2
 800542e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005432:	2300      	movs	r3, #0
 8005434:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005438:	e01a      	b.n	8005470 <arm_mat_inverse_f32+0x46a>
 800543a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800543e:	1d1a      	adds	r2, r3, #4
 8005440:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005444:	ed93 7a00 	vldr	s14, [r3]
 8005448:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800544c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005450:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005454:	1d1a      	adds	r2, r3, #4
 8005456:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800545a:	ed93 7a00 	vldr	s14, [r3]
 800545e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005462:	edc3 7a00 	vstr	s15, [r3]
 8005466:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800546a:	3301      	adds	r3, #1
 800546c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005470:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	429a      	cmp	r2, r3
 8005478:	dbdf      	blt.n	800543a <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	885b      	ldrh	r3, [r3, #2]
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	60bb      	str	r3, [r7, #8]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800549a:	fb02 f303 	mul.w	r3, r2, r3
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80054a4:	4413      	add	r3, r2
 80054a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80054ae:	fb02 f303 	mul.w	r3, r2, r3
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054b8:	4413      	add	r3, r2
 80054ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054be:	2300      	movs	r3, #0
 80054c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80054c4:	e01a      	b.n	80054fc <arm_mat_inverse_f32+0x4f6>
 80054c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054ca:	1d1a      	adds	r2, r3, #4
 80054cc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80054d0:	ed93 7a00 	vldr	s14, [r3]
 80054d4:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80054d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054e0:	1d1a      	adds	r2, r3, #4
 80054e2:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80054e6:	ed93 7a00 	vldr	s14, [r3]
 80054ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054ee:	edc3 7a00 	vstr	s15, [r3]
 80054f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054f6:	3301      	adds	r3, #1
 80054f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80054fc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	429a      	cmp	r2, r3
 8005504:	dbdf      	blt.n	80054c6 <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 8005506:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800550a:	3301      	adds	r3, #1
 800550c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005510:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8005514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005516:	429a      	cmp	r2, r3
 8005518:	f4ff af4b 	bcc.w	80053b2 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800551c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800551e:	3301      	adds	r3, #1
 8005520:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005524:	e092      	b.n	800564c <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	885b      	ldrh	r3, [r3, #2]
 800552e:	4619      	mov	r1, r3
 8005530:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005534:	fb03 f101 	mul.w	r1, r3, r1
 8005538:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800553c:	440b      	add	r3, r1
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           pivot = *pTmp;
 8005546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	67bb      	str	r3, [r7, #120]	; 0x78
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	677b      	str	r3, [r7, #116]	; 0x74
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	885b      	ldrh	r3, [r3, #2]
 8005560:	627b      	str	r3, [r7, #36]	; 0x24
 8005562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005564:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	623b      	str	r3, [r7, #32]
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8005572:	fb03 f202 	mul.w	r2, r3, r2
 8005576:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800557a:	4413      	add	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005580:	4413      	add	r3, r2
 8005582:	67bb      	str	r3, [r7, #120]	; 0x78
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005588:	fb03 f202 	mul.w	r2, r3, r2
 800558c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005590:	4413      	add	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005596:	4413      	add	r3, r2
 8005598:	677b      	str	r3, [r7, #116]	; 0x74
 800559a:	2300      	movs	r3, #0
 800559c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800559e:	e014      	b.n	80055ca <arm_mat_inverse_f32+0x5c4>
 80055a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055a2:	1d1a      	adds	r2, r3, #4
 80055a4:	677a      	str	r2, [r7, #116]	; 0x74
 80055a6:	ed93 7a00 	vldr	s14, [r3]
 80055aa:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80055ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055b4:	1d1a      	adds	r2, r3, #4
 80055b6:	67ba      	str	r2, [r7, #120]	; 0x78
 80055b8:	ed93 7a00 	vldr	s14, [r3]
 80055bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055c0:	edc3 7a00 	vstr	s15, [r3]
 80055c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055c6:	3301      	adds	r3, #1
 80055c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80055ca:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	dbe6      	blt.n	80055a0 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	885b      	ldrh	r3, [r3, #2]
 80055e2:	61fb      	str	r3, [r7, #28]
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	61bb      	str	r3, [r7, #24]
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80055ee:	fb02 f303 	mul.w	r3, r2, r3
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055f6:	4413      	add	r3, r2
 80055f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80055fe:	fb02 f303 	mul.w	r3, r2, r3
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005606:	4413      	add	r3, r2
 8005608:	66bb      	str	r3, [r7, #104]	; 0x68
 800560a:	2300      	movs	r3, #0
 800560c:	673b      	str	r3, [r7, #112]	; 0x70
 800560e:	e014      	b.n	800563a <arm_mat_inverse_f32+0x634>
 8005610:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005612:	1d1a      	adds	r2, r3, #4
 8005614:	66ba      	str	r2, [r7, #104]	; 0x68
 8005616:	ed93 7a00 	vldr	s14, [r3]
 800561a:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800561e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005624:	1d1a      	adds	r2, r3, #4
 8005626:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005628:	ed93 7a00 	vldr	s14, [r3]
 800562c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005630:	edc3 7a00 	vstr	s15, [r3]
 8005634:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005636:	3301      	adds	r3, #1
 8005638:	673b      	str	r3, [r7, #112]	; 0x70
 800563a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	429a      	cmp	r2, r3
 8005640:	dbe6      	blt.n	8005610 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8005642:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005646:	3301      	adds	r3, #1
 8005648:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800564c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8005650:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005652:	429a      	cmp	r2, r3
 8005654:	f4ff af67 	bcc.w	8005526 <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 8005658:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800565c:	3301      	adds	r3, #1
 800565e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005662:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005666:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005668:	429a      	cmp	r2, r3
 800566a:	f4ff ad32 	bcc.w	80050d2 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800566e:	2300      	movs	r3, #0
 8005670:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 8005674:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005678:	2b01      	cmp	r3, #1
 800567a:	d033      	beq.n	80056e4 <arm_mat_inverse_f32+0x6de>
 800567c:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8005680:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005688:	d12c      	bne.n	80056e4 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	667b      	str	r3, [r7, #100]	; 0x64
      for (i = 0; i < numRows * numCols; i++)
 8005690:	2300      	movs	r3, #0
 8005692:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005696:	e010      	b.n	80056ba <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 8005698:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80056a0:	4413      	add	r3, r2
 80056a2:	edd3 7a00 	vldr	s15, [r3]
 80056a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80056aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ae:	d10d      	bne.n	80056cc <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 80056b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056b4:	3301      	adds	r3, #1
 80056b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80056ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056be:	fb02 f303 	mul.w	r3, r2, r3
 80056c2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d3e6      	bcc.n	8005698 <arm_mat_inverse_f32+0x692>
 80056ca:	e000      	b.n	80056ce <arm_mat_inverse_f32+0x6c8>
            break;
 80056cc:	bf00      	nop
      }

      if (i == numRows * numCols)
 80056ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056d2:	fb02 f303 	mul.w	r3, r2, r3
 80056d6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80056da:	429a      	cmp	r2, r3
 80056dc:	d102      	bne.n	80056e4 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 80056de:	23fb      	movs	r3, #251	; 0xfb
 80056e0:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
    }
  }

  /* Return to application */
  return (status);
 80056e4:	f997 30c3 	ldrsb.w	r3, [r7, #195]	; 0xc3
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	37ec      	adds	r7, #236	; 0xec
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b093      	sub	sp, #76	; 0x4c
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	643b      	str	r3, [r7, #64]	; 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	885b      	ldrh	r3, [r3, #2]
 8005728:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	885b      	ldrh	r3, [r3, #2]
 800572e:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 8005730:	2300      	movs	r3, #0
 8005732:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005734:	8b7b      	ldrh	r3, [r7, #26]
 8005736:	62bb      	str	r3, [r7, #40]	; 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 8005738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	69fa      	ldr	r2, [r7, #28]
 800573e:	4413      	add	r3, r2
 8005740:	63bb      	str	r3, [r7, #56]	; 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 8005742:	8b3b      	ldrh	r3, [r7, #24]
 8005744:	633b      	str	r3, [r7, #48]	; 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	643b      	str	r3, [r7, #64]	; 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800574c:	f04f 0300 	mov.w	r3, #0
 8005750:	637b      	str	r3, [r7, #52]	; 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 8005752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005754:	647b      	str	r3, [r7, #68]	; 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 8005756:	8afb      	ldrh	r3, [r7, #22]
 8005758:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800575a:	e017      	b.n	800578c <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800575c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800575e:	1d1a      	adds	r2, r3, #4
 8005760:	647a      	str	r2, [r7, #68]	; 0x44
 8005762:	ed93 7a00 	vldr	s14, [r3]
 8005766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005768:	edd3 7a00 	vldr	s15, [r3]
 800576c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005770:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005774:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005778:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
          pIn2 += numColsB;
 800577c:	8b3b      	ldrh	r3, [r7, #24]
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005782:	4413      	add	r3, r2
 8005784:	643b      	str	r3, [r7, #64]	; 0x40

          /* Decrement loop counter */
          colCnt--;
 8005786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005788:	3b01      	subs	r3, #1
 800578a:	627b      	str	r3, [r7, #36]	; 0x24
        while (colCnt > 0U)
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1e4      	bne.n	800575c <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 8005792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005794:	1d1a      	adds	r2, r3, #4
 8005796:	63ba      	str	r2, [r7, #56]	; 0x38
 8005798:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800579a:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800579c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579e:	3b01      	subs	r3, #1
 80057a0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 80057a2:	8b3a      	ldrh	r2, [r7, #24]
 80057a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	6a3a      	ldr	r2, [r7, #32]
 80057ac:	4413      	add	r3, r2
 80057ae:	643b      	str	r3, [r7, #64]	; 0x40

      } while (col > 0U);
 80057b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1ca      	bne.n	800574c <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 80057b6:	8b3b      	ldrh	r3, [r7, #24]
 80057b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057ba:	4413      	add	r3, r2
 80057bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pInA = pInA + numColsA;
 80057be:	8afb      	ldrh	r3, [r7, #22]
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057c4:	4413      	add	r3, r2
 80057c6:	63fb      	str	r3, [r7, #60]	; 0x3c

      /* Decrement row loop counter */
      row--;
 80057c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ca:	3b01      	subs	r3, #1
 80057cc:	62bb      	str	r3, [r7, #40]	; 0x28

    } while (row > 0U);
 80057ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1b1      	bne.n	8005738 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80057d4:	2300      	movs	r3, #0
 80057d6:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 80057d8:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	374c      	adds	r7, #76	; 0x4c
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b08b      	sub	sp, #44	; 0x2c
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80057f4:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	881b      	ldrh	r3, [r3, #0]
 8005806:	461a      	mov	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	885b      	ldrh	r3, [r3, #2]
 800580c:	fb02 f303 	mul.w	r3, r2, r3
 8005810:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8005816:	e010      	b.n	800583a <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581a:	1d1a      	adds	r2, r3, #4
 800581c:	627a      	str	r2, [r7, #36]	; 0x24
 800581e:	ed93 7a00 	vldr	s14, [r3]
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	1d1a      	adds	r2, r3, #4
 8005826:	623a      	str	r2, [r7, #32]
 8005828:	edd7 7a02 	vldr	s15, [r7, #8]
 800582c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005830:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	3b01      	subs	r3, #1
 8005838:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1eb      	bne.n	8005818 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8005840:	2300      	movs	r3, #0
 8005842:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 8005844:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005848:	4618      	mov	r0, r3
 800584a:	372c      	adds	r7, #44	; 0x2c
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8005854:	b480      	push	{r7}
 8005856:	b08b      	sub	sp, #44	; 0x2c
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	881b      	ldrh	r3, [r3, #0]
 8005876:	461a      	mov	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	885b      	ldrh	r3, [r3, #2]
 800587c:	fb02 f303 	mul.w	r3, r2, r3
 8005880:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8005886:	e013      	b.n	80058b0 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 8005888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588a:	1d1a      	adds	r2, r3, #4
 800588c:	627a      	str	r2, [r7, #36]	; 0x24
 800588e:	ed93 7a00 	vldr	s14, [r3]
 8005892:	6a3b      	ldr	r3, [r7, #32]
 8005894:	1d1a      	adds	r2, r3, #4
 8005896:	623a      	str	r2, [r7, #32]
 8005898:	edd3 7a00 	vldr	s15, [r3]
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	1d1a      	adds	r2, r3, #4
 80058a0:	61fa      	str	r2, [r7, #28]
 80058a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058a6:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	3b01      	subs	r3, #1
 80058ae:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1e8      	bne.n	8005888 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80058b6:	2300      	movs	r3, #0
 80058b8:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 80058ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	372c      	adds	r7, #44	; 0x2c
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b08b      	sub	sp, #44	; 0x2c
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
 80058d2:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	885b      	ldrh	r3, [r3, #2]
 80058ea:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 80058ec:	89fb      	ldrh	r3, [r7, #14]
 80058ee:	61bb      	str	r3, [r7, #24]
 80058f0:	2300      	movs	r3, #0
 80058f2:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	4413      	add	r3, r2
 80058fc:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 80058fe:	89bb      	ldrh	r3, [r7, #12]
 8005900:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8005902:	e00d      	b.n	8005920 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8005904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005906:	1d1a      	adds	r2, r3, #4
 8005908:	627a      	str	r2, [r7, #36]	; 0x24
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8005910:	89fb      	ldrh	r3, [r7, #14]
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	6a3a      	ldr	r2, [r7, #32]
 8005916:	4413      	add	r3, r2
 8005918:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	3b01      	subs	r3, #1
 800591e:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1ee      	bne.n	8005904 <arm_mat_trans_f32+0x3a>
      }

      i++;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	3301      	adds	r3, #1
 800592a:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	3b01      	subs	r3, #1
 8005930:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1dd      	bne.n	80058f4 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8005938:	2300      	movs	r3, #0
 800593a:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800593c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8005940:	4618      	mov	r0, r3
 8005942:	372c      	adds	r7, #44	; 0x2c
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005950:	4b0e      	ldr	r3, [pc, #56]	; (800598c <HAL_Init+0x40>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a0d      	ldr	r2, [pc, #52]	; (800598c <HAL_Init+0x40>)
 8005956:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800595a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800595c:	4b0b      	ldr	r3, [pc, #44]	; (800598c <HAL_Init+0x40>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a0a      	ldr	r2, [pc, #40]	; (800598c <HAL_Init+0x40>)
 8005962:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005966:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005968:	4b08      	ldr	r3, [pc, #32]	; (800598c <HAL_Init+0x40>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a07      	ldr	r2, [pc, #28]	; (800598c <HAL_Init+0x40>)
 800596e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005972:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005974:	2003      	movs	r0, #3
 8005976:	f000 fd2d 	bl	80063d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800597a:	2000      	movs	r0, #0
 800597c:	f000 f808 	bl	8005990 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005980:	f7fe fc66 	bl	8004250 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	40023c00 	.word	0x40023c00

08005990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005998:	4b12      	ldr	r3, [pc, #72]	; (80059e4 <HAL_InitTick+0x54>)
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	4b12      	ldr	r3, [pc, #72]	; (80059e8 <HAL_InitTick+0x58>)
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	4619      	mov	r1, r3
 80059a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80059aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 fd45 	bl	800643e <HAL_SYSTICK_Config>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e00e      	b.n	80059dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b0f      	cmp	r3, #15
 80059c2:	d80a      	bhi.n	80059da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80059c4:	2200      	movs	r2, #0
 80059c6:	6879      	ldr	r1, [r7, #4]
 80059c8:	f04f 30ff 	mov.w	r0, #4294967295
 80059cc:	f000 fd0d 	bl	80063ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80059d0:	4a06      	ldr	r2, [pc, #24]	; (80059ec <HAL_InitTick+0x5c>)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	e000      	b.n	80059dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3708      	adds	r7, #8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	20000234 	.word	0x20000234
 80059e8:	2000023c 	.word	0x2000023c
 80059ec:	20000238 	.word	0x20000238

080059f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059f0:	b480      	push	{r7}
 80059f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80059f4:	4b06      	ldr	r3, [pc, #24]	; (8005a10 <HAL_IncTick+0x20>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	461a      	mov	r2, r3
 80059fa:	4b06      	ldr	r3, [pc, #24]	; (8005a14 <HAL_IncTick+0x24>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4413      	add	r3, r2
 8005a00:	4a04      	ldr	r2, [pc, #16]	; (8005a14 <HAL_IncTick+0x24>)
 8005a02:	6013      	str	r3, [r2, #0]
}
 8005a04:	bf00      	nop
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	2000023c 	.word	0x2000023c
 8005a14:	200012b8 	.word	0x200012b8

08005a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8005a1c:	4b03      	ldr	r3, [pc, #12]	; (8005a2c <HAL_GetTick+0x14>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	200012b8 	.word	0x200012b8

08005a30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e033      	b.n	8005aae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d109      	bne.n	8005a62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f7fd fbfa 	bl	8003248 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a66:	f003 0310 	and.w	r3, r3, #16
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d118      	bne.n	8005aa0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005a76:	f023 0302 	bic.w	r3, r3, #2
 8005a7a:	f043 0202 	orr.w	r2, r3, #2
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fa58 	bl	8005f38 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a92:	f023 0303 	bic.w	r3, r3, #3
 8005a96:	f043 0201 	orr.w	r2, r3, #1
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	641a      	str	r2, [r3, #64]	; 0x40
 8005a9e:	e001      	b.n	8005aa4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
	...

08005ab8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d101      	bne.n	8005ad6 <HAL_ADC_Start_DMA+0x1e>
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	e0ce      	b.n	8005c74 <HAL_ADC_Start_DMA+0x1bc>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d018      	beq.n	8005b1e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689a      	ldr	r2, [r3, #8]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f042 0201 	orr.w	r2, r2, #1
 8005afa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005afc:	4b5f      	ldr	r3, [pc, #380]	; (8005c7c <HAL_ADC_Start_DMA+0x1c4>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a5f      	ldr	r2, [pc, #380]	; (8005c80 <HAL_ADC_Start_DMA+0x1c8>)
 8005b02:	fba2 2303 	umull	r2, r3, r2, r3
 8005b06:	0c9a      	lsrs	r2, r3, #18
 8005b08:	4613      	mov	r3, r2
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	4413      	add	r3, r2
 8005b0e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005b10:	e002      	b.n	8005b18 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	3b01      	subs	r3, #1
 8005b16:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1f9      	bne.n	8005b12 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b2c:	d107      	bne.n	8005b3e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b3c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	f040 8086 	bne.w	8005c5a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b52:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005b56:	f023 0301 	bic.w	r3, r3, #1
 8005b5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d007      	beq.n	8005b80 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005b78:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b8c:	d106      	bne.n	8005b9c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b92:	f023 0206 	bic.w	r2, r3, #6
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	645a      	str	r2, [r3, #68]	; 0x44
 8005b9a:	e002      	b.n	8005ba2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005baa:	4b36      	ldr	r3, [pc, #216]	; (8005c84 <HAL_ADC_Start_DMA+0x1cc>)
 8005bac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb2:	4a35      	ldr	r2, [pc, #212]	; (8005c88 <HAL_ADC_Start_DMA+0x1d0>)
 8005bb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bba:	4a34      	ldr	r2, [pc, #208]	; (8005c8c <HAL_ADC_Start_DMA+0x1d4>)
 8005bbc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc2:	4a33      	ldr	r2, [pc, #204]	; (8005c90 <HAL_ADC_Start_DMA+0x1d8>)
 8005bc4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005bce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005bde:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689a      	ldr	r2, [r3, #8]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	334c      	adds	r3, #76	; 0x4c
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f000 fcd8 	bl	80065b4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f003 031f 	and.w	r3, r3, #31
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10f      	bne.n	8005c30 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d129      	bne.n	8005c72 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	689a      	ldr	r2, [r3, #8]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005c2c:	609a      	str	r2, [r3, #8]
 8005c2e:	e020      	b.n	8005c72 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a17      	ldr	r2, [pc, #92]	; (8005c94 <HAL_ADC_Start_DMA+0x1dc>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d11b      	bne.n	8005c72 <HAL_ADC_Start_DMA+0x1ba>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d114      	bne.n	8005c72 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689a      	ldr	r2, [r3, #8]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005c56:	609a      	str	r2, [r3, #8]
 8005c58:	e00b      	b.n	8005c72 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	f043 0210 	orr.w	r2, r3, #16
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6a:	f043 0201 	orr.w	r2, r3, #1
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	20000234 	.word	0x20000234
 8005c80:	431bde83 	.word	0x431bde83
 8005c84:	40012300 	.word	0x40012300
 8005c88:	08006131 	.word	0x08006131
 8005c8c:	080061eb 	.word	0x080061eb
 8005c90:	08006207 	.word	0x08006207
 8005c94:	40012000 	.word	0x40012000

08005c98 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d101      	bne.n	8005cf0 <HAL_ADC_ConfigChannel+0x1c>
 8005cec:	2302      	movs	r3, #2
 8005cee:	e113      	b.n	8005f18 <HAL_ADC_ConfigChannel+0x244>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2b09      	cmp	r3, #9
 8005cfe:	d925      	bls.n	8005d4c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68d9      	ldr	r1, [r3, #12]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	4613      	mov	r3, r2
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	4413      	add	r3, r2
 8005d14:	3b1e      	subs	r3, #30
 8005d16:	2207      	movs	r2, #7
 8005d18:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1c:	43da      	mvns	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	400a      	ands	r2, r1
 8005d24:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68d9      	ldr	r1, [r3, #12]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	4618      	mov	r0, r3
 8005d38:	4603      	mov	r3, r0
 8005d3a:	005b      	lsls	r3, r3, #1
 8005d3c:	4403      	add	r3, r0
 8005d3e:	3b1e      	subs	r3, #30
 8005d40:	409a      	lsls	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	60da      	str	r2, [r3, #12]
 8005d4a:	e022      	b.n	8005d92 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6919      	ldr	r1, [r3, #16]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	461a      	mov	r2, r3
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	4413      	add	r3, r2
 8005d60:	2207      	movs	r2, #7
 8005d62:	fa02 f303 	lsl.w	r3, r2, r3
 8005d66:	43da      	mvns	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	400a      	ands	r2, r1
 8005d6e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6919      	ldr	r1, [r3, #16]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	689a      	ldr	r2, [r3, #8]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	4618      	mov	r0, r3
 8005d82:	4603      	mov	r3, r0
 8005d84:	005b      	lsls	r3, r3, #1
 8005d86:	4403      	add	r3, r0
 8005d88:	409a      	lsls	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	2b06      	cmp	r3, #6
 8005d98:	d824      	bhi.n	8005de4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	4613      	mov	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	3b05      	subs	r3, #5
 8005dac:	221f      	movs	r2, #31
 8005dae:	fa02 f303 	lsl.w	r3, r2, r3
 8005db2:	43da      	mvns	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	400a      	ands	r2, r1
 8005dba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	4618      	mov	r0, r3
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685a      	ldr	r2, [r3, #4]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4413      	add	r3, r2
 8005dd4:	3b05      	subs	r3, #5
 8005dd6:	fa00 f203 	lsl.w	r2, r0, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	635a      	str	r2, [r3, #52]	; 0x34
 8005de2:	e04c      	b.n	8005e7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	2b0c      	cmp	r3, #12
 8005dea:	d824      	bhi.n	8005e36 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	4613      	mov	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4413      	add	r3, r2
 8005dfc:	3b23      	subs	r3, #35	; 0x23
 8005dfe:	221f      	movs	r2, #31
 8005e00:	fa02 f303 	lsl.w	r3, r2, r3
 8005e04:	43da      	mvns	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	400a      	ands	r2, r1
 8005e0c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	4613      	mov	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	4413      	add	r3, r2
 8005e26:	3b23      	subs	r3, #35	; 0x23
 8005e28:	fa00 f203 	lsl.w	r2, r0, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	430a      	orrs	r2, r1
 8005e32:	631a      	str	r2, [r3, #48]	; 0x30
 8005e34:	e023      	b.n	8005e7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	4613      	mov	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	3b41      	subs	r3, #65	; 0x41
 8005e48:	221f      	movs	r2, #31
 8005e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4e:	43da      	mvns	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	400a      	ands	r2, r1
 8005e56:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	4618      	mov	r0, r3
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685a      	ldr	r2, [r3, #4]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	3b41      	subs	r3, #65	; 0x41
 8005e72:	fa00 f203 	lsl.w	r2, r0, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005e7e:	4b29      	ldr	r3, [pc, #164]	; (8005f24 <HAL_ADC_ConfigChannel+0x250>)
 8005e80:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a28      	ldr	r2, [pc, #160]	; (8005f28 <HAL_ADC_ConfigChannel+0x254>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d10f      	bne.n	8005eac <HAL_ADC_ConfigChannel+0x1d8>
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2b12      	cmp	r3, #18
 8005e92:	d10b      	bne.n	8005eac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a1d      	ldr	r2, [pc, #116]	; (8005f28 <HAL_ADC_ConfigChannel+0x254>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d12b      	bne.n	8005f0e <HAL_ADC_ConfigChannel+0x23a>
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a1c      	ldr	r2, [pc, #112]	; (8005f2c <HAL_ADC_ConfigChannel+0x258>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d003      	beq.n	8005ec8 <HAL_ADC_ConfigChannel+0x1f4>
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b11      	cmp	r3, #17
 8005ec6:	d122      	bne.n	8005f0e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a11      	ldr	r2, [pc, #68]	; (8005f2c <HAL_ADC_ConfigChannel+0x258>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d111      	bne.n	8005f0e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005eea:	4b11      	ldr	r3, [pc, #68]	; (8005f30 <HAL_ADC_ConfigChannel+0x25c>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a11      	ldr	r2, [pc, #68]	; (8005f34 <HAL_ADC_ConfigChannel+0x260>)
 8005ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef4:	0c9a      	lsrs	r2, r3, #18
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	005b      	lsls	r3, r3, #1
 8005efe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005f00:	e002      	b.n	8005f08 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	3b01      	subs	r3, #1
 8005f06:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1f9      	bne.n	8005f02 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3714      	adds	r7, #20
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr
 8005f24:	40012300 	.word	0x40012300
 8005f28:	40012000 	.word	0x40012000
 8005f2c:	10000012 	.word	0x10000012
 8005f30:	20000234 	.word	0x20000234
 8005f34:	431bde83 	.word	0x431bde83

08005f38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005f40:	4b79      	ldr	r3, [pc, #484]	; (8006128 <ADC_Init+0x1f0>)
 8005f42:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6859      	ldr	r1, [r3, #4]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	021a      	lsls	r2, r3, #8
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	685a      	ldr	r2, [r3, #4]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005f90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6859      	ldr	r1, [r3, #4]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689a      	ldr	r2, [r3, #8]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6899      	ldr	r1, [r3, #8]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68da      	ldr	r2, [r3, #12]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fca:	4a58      	ldr	r2, [pc, #352]	; (800612c <ADC_Init+0x1f4>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d022      	beq.n	8006016 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689a      	ldr	r2, [r3, #8]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005fde:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6899      	ldr	r1, [r3, #8]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	689a      	ldr	r2, [r3, #8]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006000:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6899      	ldr	r1, [r3, #8]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	430a      	orrs	r2, r1
 8006012:	609a      	str	r2, [r3, #8]
 8006014:	e00f      	b.n	8006036 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006024:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006034:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	689a      	ldr	r2, [r3, #8]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 0202 	bic.w	r2, r2, #2
 8006044:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6899      	ldr	r1, [r3, #8]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	7e1b      	ldrb	r3, [r3, #24]
 8006050:	005a      	lsls	r2, r3, #1
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d01b      	beq.n	800609c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006072:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685a      	ldr	r2, [r3, #4]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006082:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6859      	ldr	r1, [r3, #4]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608e:	3b01      	subs	r3, #1
 8006090:	035a      	lsls	r2, r3, #13
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	430a      	orrs	r2, r1
 8006098:	605a      	str	r2, [r3, #4]
 800609a:	e007      	b.n	80060ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80060ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	3b01      	subs	r3, #1
 80060c8:	051a      	lsls	r2, r3, #20
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	689a      	ldr	r2, [r3, #8]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80060e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6899      	ldr	r1, [r3, #8]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060ee:	025a      	lsls	r2, r3, #9
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689a      	ldr	r2, [r3, #8]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006106:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6899      	ldr	r1, [r3, #8]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	029a      	lsls	r2, r3, #10
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	430a      	orrs	r2, r1
 800611a:	609a      	str	r2, [r3, #8]
}
 800611c:	bf00      	nop
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr
 8006128:	40012300 	.word	0x40012300
 800612c:	0f000001 	.word	0x0f000001

08006130 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006142:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006146:	2b00      	cmp	r3, #0
 8006148:	d13c      	bne.n	80061c4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d12b      	bne.n	80061bc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006168:	2b00      	cmp	r3, #0
 800616a:	d127      	bne.n	80061bc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006172:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006176:	2b00      	cmp	r3, #0
 8006178:	d006      	beq.n	8006188 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006184:	2b00      	cmp	r3, #0
 8006186:	d119      	bne.n	80061bc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f022 0220 	bic.w	r2, r2, #32
 8006196:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d105      	bne.n	80061bc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b4:	f043 0201 	orr.w	r2, r3, #1
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f7ff fd6b 	bl	8005c98 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80061c2:	e00e      	b.n	80061e2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c8:	f003 0310 	and.w	r3, r3, #16
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d003      	beq.n	80061d8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f7ff fd75 	bl	8005cc0 <HAL_ADC_ErrorCallback>
}
 80061d6:	e004      	b.n	80061e2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	4798      	blx	r3
}
 80061e2:	bf00      	nop
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b084      	sub	sp, #16
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f7ff fd57 	bl	8005cac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80061fe:	bf00      	nop
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b084      	sub	sp, #16
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006212:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2240      	movs	r2, #64	; 0x40
 8006218:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800621e:	f043 0204 	orr.w	r2, r3, #4
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f7ff fd4a 	bl	8005cc0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800622c:	bf00      	nop
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f003 0307 	and.w	r3, r3, #7
 8006242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006244:	4b0c      	ldr	r3, [pc, #48]	; (8006278 <__NVIC_SetPriorityGrouping+0x44>)
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006250:	4013      	ands	r3, r2
 8006252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800625c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006266:	4a04      	ldr	r2, [pc, #16]	; (8006278 <__NVIC_SetPriorityGrouping+0x44>)
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	60d3      	str	r3, [r2, #12]
}
 800626c:	bf00      	nop
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	e000ed00 	.word	0xe000ed00

0800627c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800627c:	b480      	push	{r7}
 800627e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006280:	4b04      	ldr	r3, [pc, #16]	; (8006294 <__NVIC_GetPriorityGrouping+0x18>)
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	0a1b      	lsrs	r3, r3, #8
 8006286:	f003 0307 	and.w	r3, r3, #7
}
 800628a:	4618      	mov	r0, r3
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr
 8006294:	e000ed00 	.word	0xe000ed00

08006298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	4603      	mov	r3, r0
 80062a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	db0b      	blt.n	80062c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062aa:	79fb      	ldrb	r3, [r7, #7]
 80062ac:	f003 021f 	and.w	r2, r3, #31
 80062b0:	4907      	ldr	r1, [pc, #28]	; (80062d0 <__NVIC_EnableIRQ+0x38>)
 80062b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062b6:	095b      	lsrs	r3, r3, #5
 80062b8:	2001      	movs	r0, #1
 80062ba:	fa00 f202 	lsl.w	r2, r0, r2
 80062be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80062c2:	bf00      	nop
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	e000e100 	.word	0xe000e100

080062d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	4603      	mov	r3, r0
 80062dc:	6039      	str	r1, [r7, #0]
 80062de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	db0a      	blt.n	80062fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	490c      	ldr	r1, [pc, #48]	; (8006320 <__NVIC_SetPriority+0x4c>)
 80062ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062f2:	0112      	lsls	r2, r2, #4
 80062f4:	b2d2      	uxtb	r2, r2
 80062f6:	440b      	add	r3, r1
 80062f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80062fc:	e00a      	b.n	8006314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	b2da      	uxtb	r2, r3
 8006302:	4908      	ldr	r1, [pc, #32]	; (8006324 <__NVIC_SetPriority+0x50>)
 8006304:	79fb      	ldrb	r3, [r7, #7]
 8006306:	f003 030f 	and.w	r3, r3, #15
 800630a:	3b04      	subs	r3, #4
 800630c:	0112      	lsls	r2, r2, #4
 800630e:	b2d2      	uxtb	r2, r2
 8006310:	440b      	add	r3, r1
 8006312:	761a      	strb	r2, [r3, #24]
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr
 8006320:	e000e100 	.word	0xe000e100
 8006324:	e000ed00 	.word	0xe000ed00

08006328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006328:	b480      	push	{r7}
 800632a:	b089      	sub	sp, #36	; 0x24
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f003 0307 	and.w	r3, r3, #7
 800633a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	f1c3 0307 	rsb	r3, r3, #7
 8006342:	2b04      	cmp	r3, #4
 8006344:	bf28      	it	cs
 8006346:	2304      	movcs	r3, #4
 8006348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	3304      	adds	r3, #4
 800634e:	2b06      	cmp	r3, #6
 8006350:	d902      	bls.n	8006358 <NVIC_EncodePriority+0x30>
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	3b03      	subs	r3, #3
 8006356:	e000      	b.n	800635a <NVIC_EncodePriority+0x32>
 8006358:	2300      	movs	r3, #0
 800635a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800635c:	f04f 32ff 	mov.w	r2, #4294967295
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	fa02 f303 	lsl.w	r3, r2, r3
 8006366:	43da      	mvns	r2, r3
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	401a      	ands	r2, r3
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006370:	f04f 31ff 	mov.w	r1, #4294967295
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	fa01 f303 	lsl.w	r3, r1, r3
 800637a:	43d9      	mvns	r1, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006380:	4313      	orrs	r3, r2
         );
}
 8006382:	4618      	mov	r0, r3
 8006384:	3724      	adds	r7, #36	; 0x24
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
	...

08006390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3b01      	subs	r3, #1
 800639c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063a0:	d301      	bcc.n	80063a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80063a2:	2301      	movs	r3, #1
 80063a4:	e00f      	b.n	80063c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80063a6:	4a0a      	ldr	r2, [pc, #40]	; (80063d0 <SysTick_Config+0x40>)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	3b01      	subs	r3, #1
 80063ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80063ae:	210f      	movs	r1, #15
 80063b0:	f04f 30ff 	mov.w	r0, #4294967295
 80063b4:	f7ff ff8e 	bl	80062d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80063b8:	4b05      	ldr	r3, [pc, #20]	; (80063d0 <SysTick_Config+0x40>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80063be:	4b04      	ldr	r3, [pc, #16]	; (80063d0 <SysTick_Config+0x40>)
 80063c0:	2207      	movs	r2, #7
 80063c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	e000e010 	.word	0xe000e010

080063d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f7ff ff29 	bl	8006234 <__NVIC_SetPriorityGrouping>
}
 80063e2:	bf00      	nop
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b086      	sub	sp, #24
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	4603      	mov	r3, r0
 80063f2:	60b9      	str	r1, [r7, #8]
 80063f4:	607a      	str	r2, [r7, #4]
 80063f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80063f8:	2300      	movs	r3, #0
 80063fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80063fc:	f7ff ff3e 	bl	800627c <__NVIC_GetPriorityGrouping>
 8006400:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	68b9      	ldr	r1, [r7, #8]
 8006406:	6978      	ldr	r0, [r7, #20]
 8006408:	f7ff ff8e 	bl	8006328 <NVIC_EncodePriority>
 800640c:	4602      	mov	r2, r0
 800640e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006412:	4611      	mov	r1, r2
 8006414:	4618      	mov	r0, r3
 8006416:	f7ff ff5d 	bl	80062d4 <__NVIC_SetPriority>
}
 800641a:	bf00      	nop
 800641c:	3718      	adds	r7, #24
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b082      	sub	sp, #8
 8006426:	af00      	add	r7, sp, #0
 8006428:	4603      	mov	r3, r0
 800642a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800642c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006430:	4618      	mov	r0, r3
 8006432:	f7ff ff31 	bl	8006298 <__NVIC_EnableIRQ>
}
 8006436:	bf00      	nop
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b082      	sub	sp, #8
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7ff ffa2 	bl	8006390 <SysTick_Config>
 800644c:	4603      	mov	r3, r0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3708      	adds	r7, #8
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
	...

08006458 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006460:	2300      	movs	r3, #0
 8006462:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006464:	f7ff fad8 	bl	8005a18 <HAL_GetTick>
 8006468:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d101      	bne.n	8006474 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e099      	b.n	80065a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2202      	movs	r2, #2
 8006478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f022 0201 	bic.w	r2, r2, #1
 8006492:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006494:	e00f      	b.n	80064b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006496:	f7ff fabf 	bl	8005a18 <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	2b05      	cmp	r3, #5
 80064a2:	d908      	bls.n	80064b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2220      	movs	r2, #32
 80064a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2203      	movs	r2, #3
 80064ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e078      	b.n	80065a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1e8      	bne.n	8006496 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	4b38      	ldr	r3, [pc, #224]	; (80065b0 <HAL_DMA_Init+0x158>)
 80064d0:	4013      	ands	r3, r2
 80064d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80064e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a1b      	ldr	r3, [r3, #32]
 8006500:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	4313      	orrs	r3, r2
 8006506:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650c:	2b04      	cmp	r3, #4
 800650e:	d107      	bne.n	8006520 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006518:	4313      	orrs	r3, r2
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	4313      	orrs	r3, r2
 800651e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f023 0307 	bic.w	r3, r3, #7
 8006536:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	4313      	orrs	r3, r2
 8006540:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006546:	2b04      	cmp	r3, #4
 8006548:	d117      	bne.n	800657a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	4313      	orrs	r3, r2
 8006552:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00e      	beq.n	800657a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fb1b 	bl	8006b98 <DMA_CheckFifoParam>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d008      	beq.n	800657a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2240      	movs	r2, #64	; 0x40
 800656c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006576:	2301      	movs	r3, #1
 8006578:	e016      	b.n	80065a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fad2 	bl	8006b2c <DMA_CalcBaseAndBitshift>
 8006588:	4603      	mov	r3, r0
 800658a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006590:	223f      	movs	r2, #63	; 0x3f
 8006592:	409a      	lsls	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3718      	adds	r7, #24
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	f010803f 	.word	0xf010803f

080065b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
 80065c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d101      	bne.n	80065da <HAL_DMA_Start_IT+0x26>
 80065d6:	2302      	movs	r3, #2
 80065d8:	e040      	b.n	800665c <HAL_DMA_Start_IT+0xa8>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d12f      	bne.n	800664e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2202      	movs	r2, #2
 80065f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	68b9      	ldr	r1, [r7, #8]
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f000 fa64 	bl	8006ad0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800660c:	223f      	movs	r2, #63	; 0x3f
 800660e:	409a      	lsls	r2, r3
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f042 0216 	orr.w	r2, r2, #22
 8006622:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006628:	2b00      	cmp	r3, #0
 800662a:	d007      	beq.n	800663c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f042 0208 	orr.w	r2, r2, #8
 800663a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f042 0201 	orr.w	r2, r2, #1
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	e005      	b.n	800665a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006656:	2302      	movs	r3, #2
 8006658:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800665a:	7dfb      	ldrb	r3, [r7, #23]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3718      	adds	r7, #24
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006670:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006672:	f7ff f9d1 	bl	8005a18 <HAL_GetTick>
 8006676:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b02      	cmp	r3, #2
 8006682:	d008      	beq.n	8006696 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2280      	movs	r2, #128	; 0x80
 8006688:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e052      	b.n	800673c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 0216 	bic.w	r2, r2, #22
 80066a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	695a      	ldr	r2, [r3, #20]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d103      	bne.n	80066c6 <HAL_DMA_Abort+0x62>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d007      	beq.n	80066d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 0208 	bic.w	r2, r2, #8
 80066d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 0201 	bic.w	r2, r2, #1
 80066e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066e6:	e013      	b.n	8006710 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066e8:	f7ff f996 	bl	8005a18 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	2b05      	cmp	r3, #5
 80066f4:	d90c      	bls.n	8006710 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2220      	movs	r2, #32
 80066fa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2203      	movs	r2, #3
 8006700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e015      	b.n	800673c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1e4      	bne.n	80066e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006722:	223f      	movs	r2, #63	; 0x3f
 8006724:	409a      	lsls	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b02      	cmp	r3, #2
 8006756:	d004      	beq.n	8006762 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2280      	movs	r2, #128	; 0x80
 800675c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e00c      	b.n	800677c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2205      	movs	r2, #5
 8006766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f022 0201 	bic.w	r2, r2, #1
 8006778:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006790:	2300      	movs	r3, #0
 8006792:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006794:	4b8e      	ldr	r3, [pc, #568]	; (80069d0 <HAL_DMA_IRQHandler+0x248>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a8e      	ldr	r2, [pc, #568]	; (80069d4 <HAL_DMA_IRQHandler+0x24c>)
 800679a:	fba2 2303 	umull	r2, r3, r2, r3
 800679e:	0a9b      	lsrs	r3, r3, #10
 80067a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067b2:	2208      	movs	r2, #8
 80067b4:	409a      	lsls	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	4013      	ands	r3, r2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d01a      	beq.n	80067f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0304 	and.w	r3, r3, #4
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d013      	beq.n	80067f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f022 0204 	bic.w	r2, r2, #4
 80067da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e0:	2208      	movs	r2, #8
 80067e2:	409a      	lsls	r2, r3
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ec:	f043 0201 	orr.w	r2, r3, #1
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067f8:	2201      	movs	r2, #1
 80067fa:	409a      	lsls	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	4013      	ands	r3, r2
 8006800:	2b00      	cmp	r3, #0
 8006802:	d012      	beq.n	800682a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00b      	beq.n	800682a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006816:	2201      	movs	r2, #1
 8006818:	409a      	lsls	r2, r3
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006822:	f043 0202 	orr.w	r2, r3, #2
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800682e:	2204      	movs	r2, #4
 8006830:	409a      	lsls	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	4013      	ands	r3, r2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d012      	beq.n	8006860 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0302 	and.w	r3, r3, #2
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00b      	beq.n	8006860 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800684c:	2204      	movs	r2, #4
 800684e:	409a      	lsls	r2, r3
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006858:	f043 0204 	orr.w	r2, r3, #4
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006864:	2210      	movs	r2, #16
 8006866:	409a      	lsls	r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4013      	ands	r3, r2
 800686c:	2b00      	cmp	r3, #0
 800686e:	d043      	beq.n	80068f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0308 	and.w	r3, r3, #8
 800687a:	2b00      	cmp	r3, #0
 800687c:	d03c      	beq.n	80068f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006882:	2210      	movs	r2, #16
 8006884:	409a      	lsls	r2, r3
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d018      	beq.n	80068ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d108      	bne.n	80068b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d024      	beq.n	80068f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	4798      	blx	r3
 80068b6:	e01f      	b.n	80068f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d01b      	beq.n	80068f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	4798      	blx	r3
 80068c8:	e016      	b.n	80068f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d107      	bne.n	80068e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f022 0208 	bic.w	r2, r2, #8
 80068e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d003      	beq.n	80068f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068fc:	2220      	movs	r2, #32
 80068fe:	409a      	lsls	r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4013      	ands	r3, r2
 8006904:	2b00      	cmp	r3, #0
 8006906:	f000 808f 	beq.w	8006a28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0310 	and.w	r3, r3, #16
 8006914:	2b00      	cmp	r3, #0
 8006916:	f000 8087 	beq.w	8006a28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800691e:	2220      	movs	r2, #32
 8006920:	409a      	lsls	r2, r3
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b05      	cmp	r3, #5
 8006930:	d136      	bne.n	80069a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f022 0216 	bic.w	r2, r2, #22
 8006940:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	695a      	ldr	r2, [r3, #20]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006950:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	2b00      	cmp	r3, #0
 8006958:	d103      	bne.n	8006962 <HAL_DMA_IRQHandler+0x1da>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800695e:	2b00      	cmp	r3, #0
 8006960:	d007      	beq.n	8006972 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f022 0208 	bic.w	r2, r2, #8
 8006970:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006976:	223f      	movs	r2, #63	; 0x3f
 8006978:	409a      	lsls	r2, r3
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006992:	2b00      	cmp	r3, #0
 8006994:	d07e      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	4798      	blx	r3
        }
        return;
 800699e:	e079      	b.n	8006a94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d01d      	beq.n	80069ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10d      	bne.n	80069d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d031      	beq.n	8006a28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	4798      	blx	r3
 80069cc:	e02c      	b.n	8006a28 <HAL_DMA_IRQHandler+0x2a0>
 80069ce:	bf00      	nop
 80069d0:	20000234 	.word	0x20000234
 80069d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d023      	beq.n	8006a28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	4798      	blx	r3
 80069e8:	e01e      	b.n	8006a28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10f      	bne.n	8006a18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f022 0210 	bic.w	r2, r2, #16
 8006a06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d003      	beq.n	8006a28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d032      	beq.n	8006a96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a34:	f003 0301 	and.w	r3, r3, #1
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d022      	beq.n	8006a82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2205      	movs	r2, #5
 8006a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f022 0201 	bic.w	r2, r2, #1
 8006a52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	3301      	adds	r3, #1
 8006a58:	60bb      	str	r3, [r7, #8]
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d307      	bcc.n	8006a70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1f2      	bne.n	8006a54 <HAL_DMA_IRQHandler+0x2cc>
 8006a6e:	e000      	b.n	8006a72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006a70:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d005      	beq.n	8006a96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	4798      	blx	r3
 8006a92:	e000      	b.n	8006a96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006a94:	bf00      	nop
    }
  }
}
 8006a96:	3718      	adds	r7, #24
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006aaa:	b2db      	uxtb	r3, r3
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
 8006adc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006aec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	683a      	ldr	r2, [r7, #0]
 8006af4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	2b40      	cmp	r3, #64	; 0x40
 8006afc:	d108      	bne.n	8006b10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006b0e:	e007      	b.n	8006b20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	60da      	str	r2, [r3, #12]
}
 8006b20:	bf00      	nop
 8006b22:	3714      	adds	r7, #20
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	3b10      	subs	r3, #16
 8006b3c:	4a14      	ldr	r2, [pc, #80]	; (8006b90 <DMA_CalcBaseAndBitshift+0x64>)
 8006b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b42:	091b      	lsrs	r3, r3, #4
 8006b44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006b46:	4a13      	ldr	r2, [pc, #76]	; (8006b94 <DMA_CalcBaseAndBitshift+0x68>)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d909      	bls.n	8006b6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006b62:	f023 0303 	bic.w	r3, r3, #3
 8006b66:	1d1a      	adds	r2, r3, #4
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	659a      	str	r2, [r3, #88]	; 0x58
 8006b6c:	e007      	b.n	8006b7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006b76:	f023 0303 	bic.w	r3, r3, #3
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	aaaaaaab 	.word	0xaaaaaaab
 8006b94:	0800eebc 	.word	0x0800eebc

08006b98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	699b      	ldr	r3, [r3, #24]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d11f      	bne.n	8006bf2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	2b03      	cmp	r3, #3
 8006bb6:	d856      	bhi.n	8006c66 <DMA_CheckFifoParam+0xce>
 8006bb8:	a201      	add	r2, pc, #4	; (adr r2, 8006bc0 <DMA_CheckFifoParam+0x28>)
 8006bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bbe:	bf00      	nop
 8006bc0:	08006bd1 	.word	0x08006bd1
 8006bc4:	08006be3 	.word	0x08006be3
 8006bc8:	08006bd1 	.word	0x08006bd1
 8006bcc:	08006c67 	.word	0x08006c67
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d046      	beq.n	8006c6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006be0:	e043      	b.n	8006c6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006bea:	d140      	bne.n	8006c6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bf0:	e03d      	b.n	8006c6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bfa:	d121      	bne.n	8006c40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2b03      	cmp	r3, #3
 8006c00:	d837      	bhi.n	8006c72 <DMA_CheckFifoParam+0xda>
 8006c02:	a201      	add	r2, pc, #4	; (adr r2, 8006c08 <DMA_CheckFifoParam+0x70>)
 8006c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c08:	08006c19 	.word	0x08006c19
 8006c0c:	08006c1f 	.word	0x08006c1f
 8006c10:	08006c19 	.word	0x08006c19
 8006c14:	08006c31 	.word	0x08006c31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006c1c:	e030      	b.n	8006c80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d025      	beq.n	8006c76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c2e:	e022      	b.n	8006c76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006c38:	d11f      	bne.n	8006c7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006c3e:	e01c      	b.n	8006c7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d903      	bls.n	8006c4e <DMA_CheckFifoParam+0xb6>
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	2b03      	cmp	r3, #3
 8006c4a:	d003      	beq.n	8006c54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006c4c:	e018      	b.n	8006c80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	73fb      	strb	r3, [r7, #15]
      break;
 8006c52:	e015      	b.n	8006c80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00e      	beq.n	8006c7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	73fb      	strb	r3, [r7, #15]
      break;
 8006c64:	e00b      	b.n	8006c7e <DMA_CheckFifoParam+0xe6>
      break;
 8006c66:	bf00      	nop
 8006c68:	e00a      	b.n	8006c80 <DMA_CheckFifoParam+0xe8>
      break;
 8006c6a:	bf00      	nop
 8006c6c:	e008      	b.n	8006c80 <DMA_CheckFifoParam+0xe8>
      break;
 8006c6e:	bf00      	nop
 8006c70:	e006      	b.n	8006c80 <DMA_CheckFifoParam+0xe8>
      break;
 8006c72:	bf00      	nop
 8006c74:	e004      	b.n	8006c80 <DMA_CheckFifoParam+0xe8>
      break;
 8006c76:	bf00      	nop
 8006c78:	e002      	b.n	8006c80 <DMA_CheckFifoParam+0xe8>
      break;   
 8006c7a:	bf00      	nop
 8006c7c:	e000      	b.n	8006c80 <DMA_CheckFifoParam+0xe8>
      break;
 8006c7e:	bf00      	nop
    }
  } 
  
  return status; 
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3714      	adds	r7, #20
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop

08006c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b089      	sub	sp, #36	; 0x24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	61fb      	str	r3, [r7, #28]
 8006caa:	e159      	b.n	8006f60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006cac:	2201      	movs	r2, #1
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	f040 8148 	bne.w	8006f5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f003 0303 	and.w	r3, r3, #3
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d005      	beq.n	8006ce2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d130      	bne.n	8006d44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	005b      	lsls	r3, r3, #1
 8006cec:	2203      	movs	r2, #3
 8006cee:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf2:	43db      	mvns	r3, r3
 8006cf4:	69ba      	ldr	r2, [r7, #24]
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	68da      	ldr	r2, [r3, #12]
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	005b      	lsls	r3, r3, #1
 8006d02:	fa02 f303 	lsl.w	r3, r2, r3
 8006d06:	69ba      	ldr	r2, [r7, #24]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	69ba      	ldr	r2, [r7, #24]
 8006d10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006d18:	2201      	movs	r2, #1
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d20:	43db      	mvns	r3, r3
 8006d22:	69ba      	ldr	r2, [r7, #24]
 8006d24:	4013      	ands	r3, r2
 8006d26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	091b      	lsrs	r3, r3, #4
 8006d2e:	f003 0201 	and.w	r2, r3, #1
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	fa02 f303 	lsl.w	r3, r2, r3
 8006d38:	69ba      	ldr	r2, [r7, #24]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	69ba      	ldr	r2, [r7, #24]
 8006d42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	f003 0303 	and.w	r3, r3, #3
 8006d4c:	2b03      	cmp	r3, #3
 8006d4e:	d017      	beq.n	8006d80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	2203      	movs	r2, #3
 8006d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d60:	43db      	mvns	r3, r3
 8006d62:	69ba      	ldr	r2, [r7, #24]
 8006d64:	4013      	ands	r3, r2
 8006d66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	689a      	ldr	r2, [r3, #8]
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	005b      	lsls	r3, r3, #1
 8006d70:	fa02 f303 	lsl.w	r3, r2, r3
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f003 0303 	and.w	r3, r3, #3
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d123      	bne.n	8006dd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	08da      	lsrs	r2, r3, #3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	3208      	adds	r2, #8
 8006d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	f003 0307 	and.w	r3, r3, #7
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	220f      	movs	r2, #15
 8006da4:	fa02 f303 	lsl.w	r3, r2, r3
 8006da8:	43db      	mvns	r3, r3
 8006daa:	69ba      	ldr	r2, [r7, #24]
 8006dac:	4013      	ands	r3, r2
 8006dae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	691a      	ldr	r2, [r3, #16]
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	f003 0307 	and.w	r3, r3, #7
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	08da      	lsrs	r2, r3, #3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	3208      	adds	r2, #8
 8006dce:	69b9      	ldr	r1, [r7, #24]
 8006dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	005b      	lsls	r3, r3, #1
 8006dde:	2203      	movs	r2, #3
 8006de0:	fa02 f303 	lsl.w	r3, r2, r3
 8006de4:	43db      	mvns	r3, r3
 8006de6:	69ba      	ldr	r2, [r7, #24]
 8006de8:	4013      	ands	r3, r2
 8006dea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f003 0203 	and.w	r2, r3, #3
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	005b      	lsls	r3, r3, #1
 8006df8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dfc:	69ba      	ldr	r2, [r7, #24]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	69ba      	ldr	r2, [r7, #24]
 8006e06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f000 80a2 	beq.w	8006f5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e16:	2300      	movs	r3, #0
 8006e18:	60fb      	str	r3, [r7, #12]
 8006e1a:	4b57      	ldr	r3, [pc, #348]	; (8006f78 <HAL_GPIO_Init+0x2e8>)
 8006e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e1e:	4a56      	ldr	r2, [pc, #344]	; (8006f78 <HAL_GPIO_Init+0x2e8>)
 8006e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e24:	6453      	str	r3, [r2, #68]	; 0x44
 8006e26:	4b54      	ldr	r3, [pc, #336]	; (8006f78 <HAL_GPIO_Init+0x2e8>)
 8006e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e2e:	60fb      	str	r3, [r7, #12]
 8006e30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006e32:	4a52      	ldr	r2, [pc, #328]	; (8006f7c <HAL_GPIO_Init+0x2ec>)
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	089b      	lsrs	r3, r3, #2
 8006e38:	3302      	adds	r3, #2
 8006e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	f003 0303 	and.w	r3, r3, #3
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	220f      	movs	r2, #15
 8006e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4e:	43db      	mvns	r3, r3
 8006e50:	69ba      	ldr	r2, [r7, #24]
 8006e52:	4013      	ands	r3, r2
 8006e54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a49      	ldr	r2, [pc, #292]	; (8006f80 <HAL_GPIO_Init+0x2f0>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d019      	beq.n	8006e92 <HAL_GPIO_Init+0x202>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a48      	ldr	r2, [pc, #288]	; (8006f84 <HAL_GPIO_Init+0x2f4>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d013      	beq.n	8006e8e <HAL_GPIO_Init+0x1fe>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a47      	ldr	r2, [pc, #284]	; (8006f88 <HAL_GPIO_Init+0x2f8>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d00d      	beq.n	8006e8a <HAL_GPIO_Init+0x1fa>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a46      	ldr	r2, [pc, #280]	; (8006f8c <HAL_GPIO_Init+0x2fc>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d007      	beq.n	8006e86 <HAL_GPIO_Init+0x1f6>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a45      	ldr	r2, [pc, #276]	; (8006f90 <HAL_GPIO_Init+0x300>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d101      	bne.n	8006e82 <HAL_GPIO_Init+0x1f2>
 8006e7e:	2304      	movs	r3, #4
 8006e80:	e008      	b.n	8006e94 <HAL_GPIO_Init+0x204>
 8006e82:	2307      	movs	r3, #7
 8006e84:	e006      	b.n	8006e94 <HAL_GPIO_Init+0x204>
 8006e86:	2303      	movs	r3, #3
 8006e88:	e004      	b.n	8006e94 <HAL_GPIO_Init+0x204>
 8006e8a:	2302      	movs	r3, #2
 8006e8c:	e002      	b.n	8006e94 <HAL_GPIO_Init+0x204>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e000      	b.n	8006e94 <HAL_GPIO_Init+0x204>
 8006e92:	2300      	movs	r3, #0
 8006e94:	69fa      	ldr	r2, [r7, #28]
 8006e96:	f002 0203 	and.w	r2, r2, #3
 8006e9a:	0092      	lsls	r2, r2, #2
 8006e9c:	4093      	lsls	r3, r2
 8006e9e:	69ba      	ldr	r2, [r7, #24]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ea4:	4935      	ldr	r1, [pc, #212]	; (8006f7c <HAL_GPIO_Init+0x2ec>)
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	089b      	lsrs	r3, r3, #2
 8006eaa:	3302      	adds	r3, #2
 8006eac:	69ba      	ldr	r2, [r7, #24]
 8006eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006eb2:	4b38      	ldr	r3, [pc, #224]	; (8006f94 <HAL_GPIO_Init+0x304>)
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	43db      	mvns	r3, r3
 8006ebc:	69ba      	ldr	r2, [r7, #24]
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d003      	beq.n	8006ed6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006ece:	69ba      	ldr	r2, [r7, #24]
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006ed6:	4a2f      	ldr	r2, [pc, #188]	; (8006f94 <HAL_GPIO_Init+0x304>)
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006edc:	4b2d      	ldr	r3, [pc, #180]	; (8006f94 <HAL_GPIO_Init+0x304>)
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	43db      	mvns	r3, r3
 8006ee6:	69ba      	ldr	r2, [r7, #24]
 8006ee8:	4013      	ands	r3, r2
 8006eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d003      	beq.n	8006f00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006ef8:	69ba      	ldr	r2, [r7, #24]
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006f00:	4a24      	ldr	r2, [pc, #144]	; (8006f94 <HAL_GPIO_Init+0x304>)
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006f06:	4b23      	ldr	r3, [pc, #140]	; (8006f94 <HAL_GPIO_Init+0x304>)
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	43db      	mvns	r3, r3
 8006f10:	69ba      	ldr	r2, [r7, #24]
 8006f12:	4013      	ands	r3, r2
 8006f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d003      	beq.n	8006f2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006f22:	69ba      	ldr	r2, [r7, #24]
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006f2a:	4a1a      	ldr	r2, [pc, #104]	; (8006f94 <HAL_GPIO_Init+0x304>)
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006f30:	4b18      	ldr	r3, [pc, #96]	; (8006f94 <HAL_GPIO_Init+0x304>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	43db      	mvns	r3, r3
 8006f3a:	69ba      	ldr	r2, [r7, #24]
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d003      	beq.n	8006f54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006f4c:	69ba      	ldr	r2, [r7, #24]
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006f54:	4a0f      	ldr	r2, [pc, #60]	; (8006f94 <HAL_GPIO_Init+0x304>)
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	61fb      	str	r3, [r7, #28]
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	2b0f      	cmp	r3, #15
 8006f64:	f67f aea2 	bls.w	8006cac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006f68:	bf00      	nop
 8006f6a:	bf00      	nop
 8006f6c:	3724      	adds	r7, #36	; 0x24
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	40023800 	.word	0x40023800
 8006f7c:	40013800 	.word	0x40013800
 8006f80:	40020000 	.word	0x40020000
 8006f84:	40020400 	.word	0x40020400
 8006f88:	40020800 	.word	0x40020800
 8006f8c:	40020c00 	.word	0x40020c00
 8006f90:	40021000 	.word	0x40021000
 8006f94:	40013c00 	.word	0x40013c00

08006f98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	691a      	ldr	r2, [r3, #16]
 8006fa8:	887b      	ldrh	r3, [r7, #2]
 8006faa:	4013      	ands	r3, r2
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d002      	beq.n	8006fb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	73fb      	strb	r3, [r7, #15]
 8006fb4:	e001      	b.n	8006fba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	807b      	strh	r3, [r7, #2]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006fd8:	787b      	ldrb	r3, [r7, #1]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d003      	beq.n	8006fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006fde:	887a      	ldrh	r2, [r7, #2]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006fe4:	e003      	b.n	8006fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006fe6:	887b      	ldrh	r3, [r7, #2]
 8006fe8:	041a      	lsls	r2, r3, #16
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	619a      	str	r2, [r3, #24]
}
 8006fee:	bf00      	nop
 8006ff0:	370c      	adds	r7, #12
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
	...

08006ffc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	4603      	mov	r3, r0
 8007004:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007006:	4b08      	ldr	r3, [pc, #32]	; (8007028 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007008:	695a      	ldr	r2, [r3, #20]
 800700a:	88fb      	ldrh	r3, [r7, #6]
 800700c:	4013      	ands	r3, r2
 800700e:	2b00      	cmp	r3, #0
 8007010:	d006      	beq.n	8007020 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007012:	4a05      	ldr	r2, [pc, #20]	; (8007028 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007014:	88fb      	ldrh	r3, [r7, #6]
 8007016:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007018:	88fb      	ldrh	r3, [r7, #6]
 800701a:	4618      	mov	r0, r3
 800701c:	f7fc ff18 	bl	8003e50 <HAL_GPIO_EXTI_Callback>
  }
}
 8007020:	bf00      	nop
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	40013c00 	.word	0x40013c00

0800702c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d101      	bne.n	800703e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e12b      	b.n	8007296 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b00      	cmp	r3, #0
 8007048:	d106      	bne.n	8007058 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f7fc faa8 	bl	80035a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2224      	movs	r2, #36	; 0x24
 800705c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f022 0201 	bic.w	r2, r2, #1
 800706e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800707e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800708e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007090:	f002 fbb0 	bl	80097f4 <HAL_RCC_GetPCLK1Freq>
 8007094:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	4a81      	ldr	r2, [pc, #516]	; (80072a0 <HAL_I2C_Init+0x274>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d807      	bhi.n	80070b0 <HAL_I2C_Init+0x84>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	4a80      	ldr	r2, [pc, #512]	; (80072a4 <HAL_I2C_Init+0x278>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	bf94      	ite	ls
 80070a8:	2301      	movls	r3, #1
 80070aa:	2300      	movhi	r3, #0
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	e006      	b.n	80070be <HAL_I2C_Init+0x92>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	4a7d      	ldr	r2, [pc, #500]	; (80072a8 <HAL_I2C_Init+0x27c>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	bf94      	ite	ls
 80070b8:	2301      	movls	r3, #1
 80070ba:	2300      	movhi	r3, #0
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d001      	beq.n	80070c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e0e7      	b.n	8007296 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	4a78      	ldr	r2, [pc, #480]	; (80072ac <HAL_I2C_Init+0x280>)
 80070ca:	fba2 2303 	umull	r2, r3, r2, r3
 80070ce:	0c9b      	lsrs	r3, r3, #18
 80070d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	6a1b      	ldr	r3, [r3, #32]
 80070ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	4a6a      	ldr	r2, [pc, #424]	; (80072a0 <HAL_I2C_Init+0x274>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d802      	bhi.n	8007100 <HAL_I2C_Init+0xd4>
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	3301      	adds	r3, #1
 80070fe:	e009      	b.n	8007114 <HAL_I2C_Init+0xe8>
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007106:	fb02 f303 	mul.w	r3, r2, r3
 800710a:	4a69      	ldr	r2, [pc, #420]	; (80072b0 <HAL_I2C_Init+0x284>)
 800710c:	fba2 2303 	umull	r2, r3, r2, r3
 8007110:	099b      	lsrs	r3, r3, #6
 8007112:	3301      	adds	r3, #1
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	6812      	ldr	r2, [r2, #0]
 8007118:	430b      	orrs	r3, r1
 800711a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007126:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	495c      	ldr	r1, [pc, #368]	; (80072a0 <HAL_I2C_Init+0x274>)
 8007130:	428b      	cmp	r3, r1
 8007132:	d819      	bhi.n	8007168 <HAL_I2C_Init+0x13c>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	1e59      	subs	r1, r3, #1
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	005b      	lsls	r3, r3, #1
 800713e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007142:	1c59      	adds	r1, r3, #1
 8007144:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007148:	400b      	ands	r3, r1
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00a      	beq.n	8007164 <HAL_I2C_Init+0x138>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	1e59      	subs	r1, r3, #1
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	005b      	lsls	r3, r3, #1
 8007158:	fbb1 f3f3 	udiv	r3, r1, r3
 800715c:	3301      	adds	r3, #1
 800715e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007162:	e051      	b.n	8007208 <HAL_I2C_Init+0x1dc>
 8007164:	2304      	movs	r3, #4
 8007166:	e04f      	b.n	8007208 <HAL_I2C_Init+0x1dc>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d111      	bne.n	8007194 <HAL_I2C_Init+0x168>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	1e58      	subs	r0, r3, #1
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6859      	ldr	r1, [r3, #4]
 8007178:	460b      	mov	r3, r1
 800717a:	005b      	lsls	r3, r3, #1
 800717c:	440b      	add	r3, r1
 800717e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007182:	3301      	adds	r3, #1
 8007184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007188:	2b00      	cmp	r3, #0
 800718a:	bf0c      	ite	eq
 800718c:	2301      	moveq	r3, #1
 800718e:	2300      	movne	r3, #0
 8007190:	b2db      	uxtb	r3, r3
 8007192:	e012      	b.n	80071ba <HAL_I2C_Init+0x18e>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	1e58      	subs	r0, r3, #1
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6859      	ldr	r1, [r3, #4]
 800719c:	460b      	mov	r3, r1
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	440b      	add	r3, r1
 80071a2:	0099      	lsls	r1, r3, #2
 80071a4:	440b      	add	r3, r1
 80071a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80071aa:	3301      	adds	r3, #1
 80071ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	bf0c      	ite	eq
 80071b4:	2301      	moveq	r3, #1
 80071b6:	2300      	movne	r3, #0
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <HAL_I2C_Init+0x196>
 80071be:	2301      	movs	r3, #1
 80071c0:	e022      	b.n	8007208 <HAL_I2C_Init+0x1dc>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10e      	bne.n	80071e8 <HAL_I2C_Init+0x1bc>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	1e58      	subs	r0, r3, #1
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6859      	ldr	r1, [r3, #4]
 80071d2:	460b      	mov	r3, r1
 80071d4:	005b      	lsls	r3, r3, #1
 80071d6:	440b      	add	r3, r1
 80071d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80071dc:	3301      	adds	r3, #1
 80071de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071e6:	e00f      	b.n	8007208 <HAL_I2C_Init+0x1dc>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	1e58      	subs	r0, r3, #1
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6859      	ldr	r1, [r3, #4]
 80071f0:	460b      	mov	r3, r1
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	440b      	add	r3, r1
 80071f6:	0099      	lsls	r1, r3, #2
 80071f8:	440b      	add	r3, r1
 80071fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80071fe:	3301      	adds	r3, #1
 8007200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007204:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007208:	6879      	ldr	r1, [r7, #4]
 800720a:	6809      	ldr	r1, [r1, #0]
 800720c:	4313      	orrs	r3, r2
 800720e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	69da      	ldr	r2, [r3, #28]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	431a      	orrs	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	430a      	orrs	r2, r1
 800722a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007236:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	6911      	ldr	r1, [r2, #16]
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	68d2      	ldr	r2, [r2, #12]
 8007242:	4311      	orrs	r1, r2
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	6812      	ldr	r2, [r2, #0]
 8007248:	430b      	orrs	r3, r1
 800724a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	695a      	ldr	r2, [r3, #20]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	431a      	orrs	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	430a      	orrs	r2, r1
 8007266:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f042 0201 	orr.w	r2, r2, #1
 8007276:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2220      	movs	r2, #32
 8007282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	000186a0 	.word	0x000186a0
 80072a4:	001e847f 	.word	0x001e847f
 80072a8:	003d08ff 	.word	0x003d08ff
 80072ac:	431bde83 	.word	0x431bde83
 80072b0:	10624dd3 	.word	0x10624dd3

080072b4 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b087      	sub	sp, #28
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	607a      	str	r2, [r7, #4]
 80072be:	461a      	mov	r2, r3
 80072c0:	460b      	mov	r3, r1
 80072c2:	817b      	strh	r3, [r7, #10]
 80072c4:	4613      	mov	r3, r2
 80072c6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80072c8:	2300      	movs	r3, #0
 80072ca:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	2b20      	cmp	r3, #32
 80072d6:	f040 8085 	bne.w	80073e4 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80072da:	4b46      	ldr	r3, [pc, #280]	; (80073f4 <HAL_I2C_Master_Transmit_IT+0x140>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	08db      	lsrs	r3, r3, #3
 80072e0:	4a45      	ldr	r2, [pc, #276]	; (80073f8 <HAL_I2C_Master_Transmit_IT+0x144>)
 80072e2:	fba2 2303 	umull	r2, r3, r2, r3
 80072e6:	0a1a      	lsrs	r2, r3, #8
 80072e8:	4613      	mov	r3, r2
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	4413      	add	r3, r2
 80072ee:	009a      	lsls	r2, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	3b01      	subs	r3, #1
 80072f8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d116      	bne.n	800732e <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2220      	movs	r2, #32
 800730a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731a:	f043 0220 	orr.w	r2, r3, #32
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e05b      	b.n	80073e6 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	f003 0302 	and.w	r3, r3, #2
 8007338:	2b02      	cmp	r3, #2
 800733a:	d0db      	beq.n	80072f4 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007342:	2b01      	cmp	r3, #1
 8007344:	d101      	bne.n	800734a <HAL_I2C_Master_Transmit_IT+0x96>
 8007346:	2302      	movs	r3, #2
 8007348:	e04d      	b.n	80073e6 <HAL_I2C_Master_Transmit_IT+0x132>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0301 	and.w	r3, r3, #1
 800735c:	2b01      	cmp	r3, #1
 800735e:	d007      	beq.n	8007370 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f042 0201 	orr.w	r2, r2, #1
 800736e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800737e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2221      	movs	r2, #33	; 0x21
 8007384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2210      	movs	r2, #16
 800738c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	893a      	ldrh	r2, [r7, #8]
 80073a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	4a13      	ldr	r2, [pc, #76]	; (80073fc <HAL_I2C_Master_Transmit_IT+0x148>)
 80073b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80073b2:	897a      	ldrh	r2, [r7, #10]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	685a      	ldr	r2, [r3, #4]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80073ce:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073de:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80073e0:	2300      	movs	r3, #0
 80073e2:	e000      	b.n	80073e6 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 80073e4:	2302      	movs	r3, #2
  }
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	371c      	adds	r7, #28
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	20000234 	.word	0x20000234
 80073f8:	14f8b589 	.word	0x14f8b589
 80073fc:	ffff0000 	.word	0xffff0000

08007400 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8007400:	b480      	push	{r7}
 8007402:	b087      	sub	sp, #28
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	607a      	str	r2, [r7, #4]
 800740a:	461a      	mov	r2, r3
 800740c:	460b      	mov	r3, r1
 800740e:	817b      	strh	r3, [r7, #10]
 8007410:	4613      	mov	r3, r2
 8007412:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8007414:	2300      	movs	r3, #0
 8007416:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800741e:	b2db      	uxtb	r3, r3
 8007420:	2b20      	cmp	r3, #32
 8007422:	f040 808d 	bne.w	8007540 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8007426:	4b4a      	ldr	r3, [pc, #296]	; (8007550 <HAL_I2C_Master_Receive_IT+0x150>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	08db      	lsrs	r3, r3, #3
 800742c:	4a49      	ldr	r2, [pc, #292]	; (8007554 <HAL_I2C_Master_Receive_IT+0x154>)
 800742e:	fba2 2303 	umull	r2, r3, r2, r3
 8007432:	0a1a      	lsrs	r2, r3, #8
 8007434:	4613      	mov	r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	4413      	add	r3, r2
 800743a:	009a      	lsls	r2, r3, #2
 800743c:	4413      	add	r3, r2
 800743e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	3b01      	subs	r3, #1
 8007444:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d116      	bne.n	800747a <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2220      	movs	r2, #32
 8007456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007466:	f043 0220 	orr.w	r2, r3, #32
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e063      	b.n	8007542 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	f003 0302 	and.w	r3, r3, #2
 8007484:	2b02      	cmp	r3, #2
 8007486:	d0db      	beq.n	8007440 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800748e:	2b01      	cmp	r3, #1
 8007490:	d101      	bne.n	8007496 <HAL_I2C_Master_Receive_IT+0x96>
 8007492:	2302      	movs	r3, #2
 8007494:	e055      	b.n	8007542 <HAL_I2C_Master_Receive_IT+0x142>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0301 	and.w	r3, r3, #1
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d007      	beq.n	80074bc <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f042 0201 	orr.w	r2, r2, #1
 80074ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2222      	movs	r2, #34	; 0x22
 80074d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2210      	movs	r2, #16
 80074d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	893a      	ldrh	r2, [r7, #8]
 80074ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4a17      	ldr	r2, [pc, #92]	; (8007558 <HAL_I2C_Master_Receive_IT+0x158>)
 80074fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80074fe:	897a      	ldrh	r2, [r7, #10]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800751a:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800752a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800753a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800753c:	2300      	movs	r3, #0
 800753e:	e000      	b.n	8007542 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8007540:	2302      	movs	r3, #2
  }
}
 8007542:	4618      	mov	r0, r3
 8007544:	371c      	adds	r7, #28
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	20000234 	.word	0x20000234
 8007554:	14f8b589 	.word	0x14f8b589
 8007558:	ffff0000 	.word	0xffff0000

0800755c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b088      	sub	sp, #32
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007564:	2300      	movs	r3, #0
 8007566:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007574:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800757c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007584:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007586:	7bfb      	ldrb	r3, [r7, #15]
 8007588:	2b10      	cmp	r3, #16
 800758a:	d003      	beq.n	8007594 <HAL_I2C_EV_IRQHandler+0x38>
 800758c:	7bfb      	ldrb	r3, [r7, #15]
 800758e:	2b40      	cmp	r3, #64	; 0x40
 8007590:	f040 80c1 	bne.w	8007716 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10d      	bne.n	80075ca <HAL_I2C_EV_IRQHandler+0x6e>
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80075b4:	d003      	beq.n	80075be <HAL_I2C_EV_IRQHandler+0x62>
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80075bc:	d101      	bne.n	80075c2 <HAL_I2C_EV_IRQHandler+0x66>
 80075be:	2301      	movs	r3, #1
 80075c0:	e000      	b.n	80075c4 <HAL_I2C_EV_IRQHandler+0x68>
 80075c2:	2300      	movs	r3, #0
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	f000 8132 	beq.w	800782e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	f003 0301 	and.w	r3, r3, #1
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00c      	beq.n	80075ee <HAL_I2C_EV_IRQHandler+0x92>
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	0a5b      	lsrs	r3, r3, #9
 80075d8:	f003 0301 	and.w	r3, r3, #1
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d006      	beq.n	80075ee <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f001 fc7b 	bl	8008edc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 fd83 	bl	80080f2 <I2C_Master_SB>
 80075ec:	e092      	b.n	8007714 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	08db      	lsrs	r3, r3, #3
 80075f2:	f003 0301 	and.w	r3, r3, #1
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d009      	beq.n	800760e <HAL_I2C_EV_IRQHandler+0xb2>
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	0a5b      	lsrs	r3, r3, #9
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fdf9 	bl	80081fe <I2C_Master_ADD10>
 800760c:	e082      	b.n	8007714 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	085b      	lsrs	r3, r3, #1
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	2b00      	cmp	r3, #0
 8007618:	d009      	beq.n	800762e <HAL_I2C_EV_IRQHandler+0xd2>
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	0a5b      	lsrs	r3, r3, #9
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b00      	cmp	r3, #0
 8007624:	d003      	beq.n	800762e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fe13 	bl	8008252 <I2C_Master_ADDR>
 800762c:	e072      	b.n	8007714 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	089b      	lsrs	r3, r3, #2
 8007632:	f003 0301 	and.w	r3, r3, #1
 8007636:	2b00      	cmp	r3, #0
 8007638:	d03b      	beq.n	80076b2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007644:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007648:	f000 80f3 	beq.w	8007832 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	09db      	lsrs	r3, r3, #7
 8007650:	f003 0301 	and.w	r3, r3, #1
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00f      	beq.n	8007678 <HAL_I2C_EV_IRQHandler+0x11c>
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	0a9b      	lsrs	r3, r3, #10
 800765c:	f003 0301 	and.w	r3, r3, #1
 8007660:	2b00      	cmp	r3, #0
 8007662:	d009      	beq.n	8007678 <HAL_I2C_EV_IRQHandler+0x11c>
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	089b      	lsrs	r3, r3, #2
 8007668:	f003 0301 	and.w	r3, r3, #1
 800766c:	2b00      	cmp	r3, #0
 800766e:	d103      	bne.n	8007678 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 f9f3 	bl	8007a5c <I2C_MasterTransmit_TXE>
 8007676:	e04d      	b.n	8007714 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	089b      	lsrs	r3, r3, #2
 800767c:	f003 0301 	and.w	r3, r3, #1
 8007680:	2b00      	cmp	r3, #0
 8007682:	f000 80d6 	beq.w	8007832 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	0a5b      	lsrs	r3, r3, #9
 800768a:	f003 0301 	and.w	r3, r3, #1
 800768e:	2b00      	cmp	r3, #0
 8007690:	f000 80cf 	beq.w	8007832 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007694:	7bbb      	ldrb	r3, [r7, #14]
 8007696:	2b21      	cmp	r3, #33	; 0x21
 8007698:	d103      	bne.n	80076a2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fa7a 	bl	8007b94 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80076a0:	e0c7      	b.n	8007832 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80076a2:	7bfb      	ldrb	r3, [r7, #15]
 80076a4:	2b40      	cmp	r3, #64	; 0x40
 80076a6:	f040 80c4 	bne.w	8007832 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fae8 	bl	8007c80 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80076b0:	e0bf      	b.n	8007832 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076c0:	f000 80b7 	beq.w	8007832 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	099b      	lsrs	r3, r3, #6
 80076c8:	f003 0301 	and.w	r3, r3, #1
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00f      	beq.n	80076f0 <HAL_I2C_EV_IRQHandler+0x194>
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	0a9b      	lsrs	r3, r3, #10
 80076d4:	f003 0301 	and.w	r3, r3, #1
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d009      	beq.n	80076f0 <HAL_I2C_EV_IRQHandler+0x194>
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	089b      	lsrs	r3, r3, #2
 80076e0:	f003 0301 	and.w	r3, r3, #1
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d103      	bne.n	80076f0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 fb5d 	bl	8007da8 <I2C_MasterReceive_RXNE>
 80076ee:	e011      	b.n	8007714 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	089b      	lsrs	r3, r3, #2
 80076f4:	f003 0301 	and.w	r3, r3, #1
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f000 809a 	beq.w	8007832 <HAL_I2C_EV_IRQHandler+0x2d6>
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	0a5b      	lsrs	r3, r3, #9
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	2b00      	cmp	r3, #0
 8007708:	f000 8093 	beq.w	8007832 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fc06 	bl	8007f1e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007712:	e08e      	b.n	8007832 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007714:	e08d      	b.n	8007832 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771a:	2b00      	cmp	r3, #0
 800771c:	d004      	beq.n	8007728 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	695b      	ldr	r3, [r3, #20]
 8007724:	61fb      	str	r3, [r7, #28]
 8007726:	e007      	b.n	8007738 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	699b      	ldr	r3, [r3, #24]
 800772e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	085b      	lsrs	r3, r3, #1
 800773c:	f003 0301 	and.w	r3, r3, #1
 8007740:	2b00      	cmp	r3, #0
 8007742:	d012      	beq.n	800776a <HAL_I2C_EV_IRQHandler+0x20e>
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	0a5b      	lsrs	r3, r3, #9
 8007748:	f003 0301 	and.w	r3, r3, #1
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00c      	beq.n	800776a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007754:	2b00      	cmp	r3, #0
 8007756:	d003      	beq.n	8007760 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007760:	69b9      	ldr	r1, [r7, #24]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 ffc4 	bl	80086f0 <I2C_Slave_ADDR>
 8007768:	e066      	b.n	8007838 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	091b      	lsrs	r3, r3, #4
 800776e:	f003 0301 	and.w	r3, r3, #1
 8007772:	2b00      	cmp	r3, #0
 8007774:	d009      	beq.n	800778a <HAL_I2C_EV_IRQHandler+0x22e>
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	0a5b      	lsrs	r3, r3, #9
 800777a:	f003 0301 	and.w	r3, r3, #1
 800777e:	2b00      	cmp	r3, #0
 8007780:	d003      	beq.n	800778a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fffe 	bl	8008784 <I2C_Slave_STOPF>
 8007788:	e056      	b.n	8007838 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800778a:	7bbb      	ldrb	r3, [r7, #14]
 800778c:	2b21      	cmp	r3, #33	; 0x21
 800778e:	d002      	beq.n	8007796 <HAL_I2C_EV_IRQHandler+0x23a>
 8007790:	7bbb      	ldrb	r3, [r7, #14]
 8007792:	2b29      	cmp	r3, #41	; 0x29
 8007794:	d125      	bne.n	80077e2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	09db      	lsrs	r3, r3, #7
 800779a:	f003 0301 	and.w	r3, r3, #1
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00f      	beq.n	80077c2 <HAL_I2C_EV_IRQHandler+0x266>
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	0a9b      	lsrs	r3, r3, #10
 80077a6:	f003 0301 	and.w	r3, r3, #1
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d009      	beq.n	80077c2 <HAL_I2C_EV_IRQHandler+0x266>
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	089b      	lsrs	r3, r3, #2
 80077b2:	f003 0301 	and.w	r3, r3, #1
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d103      	bne.n	80077c2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 feda 	bl	8008574 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80077c0:	e039      	b.n	8007836 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	089b      	lsrs	r3, r3, #2
 80077c6:	f003 0301 	and.w	r3, r3, #1
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d033      	beq.n	8007836 <HAL_I2C_EV_IRQHandler+0x2da>
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	0a5b      	lsrs	r3, r3, #9
 80077d2:	f003 0301 	and.w	r3, r3, #1
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d02d      	beq.n	8007836 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 ff07 	bl	80085ee <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80077e0:	e029      	b.n	8007836 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	099b      	lsrs	r3, r3, #6
 80077e6:	f003 0301 	and.w	r3, r3, #1
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00f      	beq.n	800780e <HAL_I2C_EV_IRQHandler+0x2b2>
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	0a9b      	lsrs	r3, r3, #10
 80077f2:	f003 0301 	and.w	r3, r3, #1
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d009      	beq.n	800780e <HAL_I2C_EV_IRQHandler+0x2b2>
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	089b      	lsrs	r3, r3, #2
 80077fe:	f003 0301 	and.w	r3, r3, #1
 8007802:	2b00      	cmp	r3, #0
 8007804:	d103      	bne.n	800780e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 ff12 	bl	8008630 <I2C_SlaveReceive_RXNE>
 800780c:	e014      	b.n	8007838 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	089b      	lsrs	r3, r3, #2
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00e      	beq.n	8007838 <HAL_I2C_EV_IRQHandler+0x2dc>
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	0a5b      	lsrs	r3, r3, #9
 800781e:	f003 0301 	and.w	r3, r3, #1
 8007822:	2b00      	cmp	r3, #0
 8007824:	d008      	beq.n	8007838 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 ff40 	bl	80086ac <I2C_SlaveReceive_BTF>
 800782c:	e004      	b.n	8007838 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800782e:	bf00      	nop
 8007830:	e002      	b.n	8007838 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007832:	bf00      	nop
 8007834:	e000      	b.n	8007838 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007836:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007838:	3720      	adds	r7, #32
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800783e:	b580      	push	{r7, lr}
 8007840:	b08a      	sub	sp, #40	; 0x28
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	695b      	ldr	r3, [r3, #20]
 800784c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8007856:	2300      	movs	r3, #0
 8007858:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007860:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007862:	6a3b      	ldr	r3, [r7, #32]
 8007864:	0a1b      	lsrs	r3, r3, #8
 8007866:	f003 0301 	and.w	r3, r3, #1
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00e      	beq.n	800788c <HAL_I2C_ER_IRQHandler+0x4e>
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	0a1b      	lsrs	r3, r3, #8
 8007872:	f003 0301 	and.w	r3, r3, #1
 8007876:	2b00      	cmp	r3, #0
 8007878:	d008      	beq.n	800788c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800787a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787c:	f043 0301 	orr.w	r3, r3, #1
 8007880:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800788a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800788c:	6a3b      	ldr	r3, [r7, #32]
 800788e:	0a5b      	lsrs	r3, r3, #9
 8007890:	f003 0301 	and.w	r3, r3, #1
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00e      	beq.n	80078b6 <HAL_I2C_ER_IRQHandler+0x78>
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	0a1b      	lsrs	r3, r3, #8
 800789c:	f003 0301 	and.w	r3, r3, #1
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d008      	beq.n	80078b6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	f043 0302 	orr.w	r3, r3, #2
 80078aa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80078b4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80078b6:	6a3b      	ldr	r3, [r7, #32]
 80078b8:	0a9b      	lsrs	r3, r3, #10
 80078ba:	f003 0301 	and.w	r3, r3, #1
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d03f      	beq.n	8007942 <HAL_I2C_ER_IRQHandler+0x104>
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	0a1b      	lsrs	r3, r3, #8
 80078c6:	f003 0301 	and.w	r3, r3, #1
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d039      	beq.n	8007942 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80078ce:	7efb      	ldrb	r3, [r7, #27]
 80078d0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078e0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80078e8:	7ebb      	ldrb	r3, [r7, #26]
 80078ea:	2b20      	cmp	r3, #32
 80078ec:	d112      	bne.n	8007914 <HAL_I2C_ER_IRQHandler+0xd6>
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d10f      	bne.n	8007914 <HAL_I2C_ER_IRQHandler+0xd6>
 80078f4:	7cfb      	ldrb	r3, [r7, #19]
 80078f6:	2b21      	cmp	r3, #33	; 0x21
 80078f8:	d008      	beq.n	800790c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80078fa:	7cfb      	ldrb	r3, [r7, #19]
 80078fc:	2b29      	cmp	r3, #41	; 0x29
 80078fe:	d005      	beq.n	800790c <HAL_I2C_ER_IRQHandler+0xce>
 8007900:	7cfb      	ldrb	r3, [r7, #19]
 8007902:	2b28      	cmp	r3, #40	; 0x28
 8007904:	d106      	bne.n	8007914 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2b21      	cmp	r3, #33	; 0x21
 800790a:	d103      	bne.n	8007914 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f001 f869 	bl	80089e4 <I2C_Slave_AF>
 8007912:	e016      	b.n	8007942 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800791c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800791e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007920:	f043 0304 	orr.w	r3, r3, #4
 8007924:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007926:	7efb      	ldrb	r3, [r7, #27]
 8007928:	2b10      	cmp	r3, #16
 800792a:	d002      	beq.n	8007932 <HAL_I2C_ER_IRQHandler+0xf4>
 800792c:	7efb      	ldrb	r3, [r7, #27]
 800792e:	2b40      	cmp	r3, #64	; 0x40
 8007930:	d107      	bne.n	8007942 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007940:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007942:	6a3b      	ldr	r3, [r7, #32]
 8007944:	0adb      	lsrs	r3, r3, #11
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00e      	beq.n	800796c <HAL_I2C_ER_IRQHandler+0x12e>
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	0a1b      	lsrs	r3, r3, #8
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	2b00      	cmp	r3, #0
 8007958:	d008      	beq.n	800796c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800795a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795c:	f043 0308 	orr.w	r3, r3, #8
 8007960:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800796a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796e:	2b00      	cmp	r3, #0
 8007970:	d008      	beq.n	8007984 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007978:	431a      	orrs	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f001 f8a0 	bl	8008ac4 <I2C_ITError>
  }
}
 8007984:	bf00      	nop
 8007986:	3728      	adds	r7, #40	; 0x28
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007994:	bf00      	nop
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80079a8:	bf00      	nop
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80079bc:	bf00      	nop
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	460b      	mov	r3, r1
 80079e6:	70fb      	strb	r3, [r7, #3]
 80079e8:	4613      	mov	r3, r2
 80079ea:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80079ec:	bf00      	nop
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007a00:	bf00      	nop
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007a14:	bf00      	nop
 8007a16:	370c      	adds	r7, #12
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007a28:	bf00      	nop
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007a3c:	bf00      	nop
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a6a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a72:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a78:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d150      	bne.n	8007b24 <I2C_MasterTransmit_TXE+0xc8>
 8007a82:	7bfb      	ldrb	r3, [r7, #15]
 8007a84:	2b21      	cmp	r3, #33	; 0x21
 8007a86:	d14d      	bne.n	8007b24 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	2b08      	cmp	r3, #8
 8007a8c:	d01d      	beq.n	8007aca <I2C_MasterTransmit_TXE+0x6e>
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	2b20      	cmp	r3, #32
 8007a92:	d01a      	beq.n	8007aca <I2C_MasterTransmit_TXE+0x6e>
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007a9a:	d016      	beq.n	8007aca <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	685a      	ldr	r2, [r3, #4]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007aaa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2211      	movs	r2, #17
 8007ab0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2220      	movs	r2, #32
 8007abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f7ff ff62 	bl	800798c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007ac8:	e060      	b.n	8007b8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	685a      	ldr	r2, [r3, #4]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007ad8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ae8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2220      	movs	r2, #32
 8007af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	2b40      	cmp	r3, #64	; 0x40
 8007b02:	d107      	bne.n	8007b14 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f7ff ff7d 	bl	8007a0c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007b12:	e03b      	b.n	8007b8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f7ff ff35 	bl	800798c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007b22:	e033      	b.n	8007b8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007b24:	7bfb      	ldrb	r3, [r7, #15]
 8007b26:	2b21      	cmp	r3, #33	; 0x21
 8007b28:	d005      	beq.n	8007b36 <I2C_MasterTransmit_TXE+0xda>
 8007b2a:	7bbb      	ldrb	r3, [r7, #14]
 8007b2c:	2b40      	cmp	r3, #64	; 0x40
 8007b2e:	d12d      	bne.n	8007b8c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007b30:	7bfb      	ldrb	r3, [r7, #15]
 8007b32:	2b22      	cmp	r3, #34	; 0x22
 8007b34:	d12a      	bne.n	8007b8c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d108      	bne.n	8007b52 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	685a      	ldr	r2, [r3, #4]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b4e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007b50:	e01c      	b.n	8007b8c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b40      	cmp	r3, #64	; 0x40
 8007b5c:	d103      	bne.n	8007b66 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f88e 	bl	8007c80 <I2C_MemoryTransmit_TXE_BTF>
}
 8007b64:	e012      	b.n	8007b8c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6a:	781a      	ldrb	r2, [r3, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b76:	1c5a      	adds	r2, r3, #1
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	3b01      	subs	r3, #1
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007b8a:	e7ff      	b.n	8007b8c <I2C_MasterTransmit_TXE+0x130>
 8007b8c:	bf00      	nop
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	2b21      	cmp	r3, #33	; 0x21
 8007bac:	d164      	bne.n	8007c78 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d012      	beq.n	8007bde <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbc:	781a      	ldrb	r2, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc8:	1c5a      	adds	r2, r3, #1
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007bdc:	e04c      	b.n	8007c78 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2b08      	cmp	r3, #8
 8007be2:	d01d      	beq.n	8007c20 <I2C_MasterTransmit_BTF+0x8c>
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2b20      	cmp	r3, #32
 8007be8:	d01a      	beq.n	8007c20 <I2C_MasterTransmit_BTF+0x8c>
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007bf0:	d016      	beq.n	8007c20 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	685a      	ldr	r2, [r3, #4]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007c00:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2211      	movs	r2, #17
 8007c06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2220      	movs	r2, #32
 8007c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f7ff feb7 	bl	800798c <HAL_I2C_MasterTxCpltCallback>
}
 8007c1e:	e02b      	b.n	8007c78 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007c2e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c3e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2220      	movs	r2, #32
 8007c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	2b40      	cmp	r3, #64	; 0x40
 8007c58:	d107      	bne.n	8007c6a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7ff fed2 	bl	8007a0c <HAL_I2C_MemTxCpltCallback>
}
 8007c68:	e006      	b.n	8007c78 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f7ff fe8a 	bl	800798c <HAL_I2C_MasterTxCpltCallback>
}
 8007c78:	bf00      	nop
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c8e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d11d      	bne.n	8007cd4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d10b      	bne.n	8007cb8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cb0:	1c9a      	adds	r2, r3, #2
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007cb6:	e073      	b.n	8007da0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	121b      	asrs	r3, r3, #8
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ccc:	1c5a      	adds	r2, r3, #1
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007cd2:	e065      	b.n	8007da0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d10b      	bne.n	8007cf4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ce0:	b2da      	uxtb	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cec:	1c5a      	adds	r2, r3, #1
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007cf2:	e055      	b.n	8007da0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d151      	bne.n	8007da0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007cfc:	7bfb      	ldrb	r3, [r7, #15]
 8007cfe:	2b22      	cmp	r3, #34	; 0x22
 8007d00:	d10d      	bne.n	8007d1e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d10:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d16:	1c5a      	adds	r2, r3, #1
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007d1c:	e040      	b.n	8007da0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d015      	beq.n	8007d54 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
 8007d2a:	2b21      	cmp	r3, #33	; 0x21
 8007d2c:	d112      	bne.n	8007d54 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d32:	781a      	ldrb	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3e:	1c5a      	adds	r2, r3, #1
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007d52:	e025      	b.n	8007da0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d120      	bne.n	8007da0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007d5e:	7bfb      	ldrb	r3, [r7, #15]
 8007d60:	2b21      	cmp	r3, #33	; 0x21
 8007d62:	d11d      	bne.n	8007da0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	685a      	ldr	r2, [r3, #4]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007d72:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d82:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2220      	movs	r2, #32
 8007d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7ff fe36 	bl	8007a0c <HAL_I2C_MemTxCpltCallback>
}
 8007da0:	bf00      	nop
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b22      	cmp	r3, #34	; 0x22
 8007dba:	f040 80ac 	bne.w	8007f16 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2b03      	cmp	r3, #3
 8007dca:	d921      	bls.n	8007e10 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	691a      	ldr	r2, [r3, #16]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd6:	b2d2      	uxtb	r2, r2
 8007dd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dde:	1c5a      	adds	r2, r3, #1
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	3b01      	subs	r3, #1
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	2b03      	cmp	r3, #3
 8007dfa:	f040 808c 	bne.w	8007f16 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	685a      	ldr	r2, [r3, #4]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e0c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8007e0e:	e082      	b.n	8007f16 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d075      	beq.n	8007f04 <I2C_MasterReceive_RXNE+0x15c>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d002      	beq.n	8007e24 <I2C_MasterReceive_RXNE+0x7c>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d16f      	bne.n	8007f04 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f001 f827 	bl	8008e78 <I2C_WaitOnSTOPRequestThroughIT>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d142      	bne.n	8007eb6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e3e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	685a      	ldr	r2, [r3, #4]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e4e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	691a      	ldr	r2, [r3, #16]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5a:	b2d2      	uxtb	r2, r2
 8007e5c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e62:	1c5a      	adds	r2, r3, #1
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	b29a      	uxth	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2220      	movs	r2, #32
 8007e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	2b40      	cmp	r3, #64	; 0x40
 8007e88:	d10a      	bne.n	8007ea0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f7ff fdc1 	bl	8007a20 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007e9e:	e03a      	b.n	8007f16 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2212      	movs	r2, #18
 8007eac:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7ff fd76 	bl	80079a0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007eb4:	e02f      	b.n	8007f16 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	685a      	ldr	r2, [r3, #4]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007ec4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	691a      	ldr	r2, [r3, #16]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed0:	b2d2      	uxtb	r2, r2
 8007ed2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed8:	1c5a      	adds	r2, r3, #1
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	3b01      	subs	r3, #1
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2220      	movs	r2, #32
 8007ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f7ff fd99 	bl	8007a34 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007f02:	e008      	b.n	8007f16 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	685a      	ldr	r2, [r3, #4]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f12:	605a      	str	r2, [r3, #4]
}
 8007f14:	e7ff      	b.n	8007f16 <I2C_MasterReceive_RXNE+0x16e>
 8007f16:	bf00      	nop
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b084      	sub	sp, #16
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	2b04      	cmp	r3, #4
 8007f34:	d11b      	bne.n	8007f6e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	685a      	ldr	r2, [r3, #4]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f44:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	691a      	ldr	r2, [r3, #16]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f50:	b2d2      	uxtb	r2, r2
 8007f52:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f58:	1c5a      	adds	r2, r3, #1
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	3b01      	subs	r3, #1
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007f6c:	e0bd      	b.n	80080ea <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	2b03      	cmp	r3, #3
 8007f76:	d129      	bne.n	8007fcc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	685a      	ldr	r2, [r3, #4]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f86:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2b04      	cmp	r3, #4
 8007f8c:	d00a      	beq.n	8007fa4 <I2C_MasterReceive_BTF+0x86>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d007      	beq.n	8007fa4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fa2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	691a      	ldr	r2, [r3, #16]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fae:	b2d2      	uxtb	r2, r2
 8007fb0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb6:	1c5a      	adds	r2, r3, #1
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	b29a      	uxth	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007fca:	e08e      	b.n	80080ea <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d176      	bne.n	80080c4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d002      	beq.n	8007fe2 <I2C_MasterReceive_BTF+0xc4>
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2b10      	cmp	r3, #16
 8007fe0:	d108      	bne.n	8007ff4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ff0:	601a      	str	r2, [r3, #0]
 8007ff2:	e019      	b.n	8008028 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2b04      	cmp	r3, #4
 8007ff8:	d002      	beq.n	8008000 <I2C_MasterReceive_BTF+0xe2>
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d108      	bne.n	8008012 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800800e:	601a      	str	r2, [r3, #0]
 8008010:	e00a      	b.n	8008028 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2b10      	cmp	r3, #16
 8008016:	d007      	beq.n	8008028 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008026:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	691a      	ldr	r2, [r3, #16]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008032:	b2d2      	uxtb	r2, r2
 8008034:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803a:	1c5a      	adds	r2, r3, #1
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008044:	b29b      	uxth	r3, r3
 8008046:	3b01      	subs	r3, #1
 8008048:	b29a      	uxth	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	691a      	ldr	r2, [r3, #16]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008058:	b2d2      	uxtb	r2, r2
 800805a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008060:	1c5a      	adds	r2, r3, #1
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800806a:	b29b      	uxth	r3, r3
 800806c:	3b01      	subs	r3, #1
 800806e:	b29a      	uxth	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	685a      	ldr	r2, [r3, #4]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008082:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2220      	movs	r2, #32
 8008088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008092:	b2db      	uxtb	r3, r3
 8008094:	2b40      	cmp	r3, #64	; 0x40
 8008096:	d10a      	bne.n	80080ae <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f7ff fcba 	bl	8007a20 <HAL_I2C_MemRxCpltCallback>
}
 80080ac:	e01d      	b.n	80080ea <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2212      	movs	r2, #18
 80080ba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f7ff fc6f 	bl	80079a0 <HAL_I2C_MasterRxCpltCallback>
}
 80080c2:	e012      	b.n	80080ea <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	691a      	ldr	r2, [r3, #16]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ce:	b2d2      	uxtb	r2, r2
 80080d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d6:	1c5a      	adds	r2, r3, #1
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	3b01      	subs	r3, #1
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80080ea:	bf00      	nop
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80080f2:	b480      	push	{r7}
 80080f4:	b083      	sub	sp, #12
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008100:	b2db      	uxtb	r3, r3
 8008102:	2b40      	cmp	r3, #64	; 0x40
 8008104:	d117      	bne.n	8008136 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800810a:	2b00      	cmp	r3, #0
 800810c:	d109      	bne.n	8008122 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008112:	b2db      	uxtb	r3, r3
 8008114:	461a      	mov	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800811e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8008120:	e067      	b.n	80081f2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008126:	b2db      	uxtb	r3, r3
 8008128:	f043 0301 	orr.w	r3, r3, #1
 800812c:	b2da      	uxtb	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	611a      	str	r2, [r3, #16]
}
 8008134:	e05d      	b.n	80081f2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800813e:	d133      	bne.n	80081a8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b21      	cmp	r3, #33	; 0x21
 800814a:	d109      	bne.n	8008160 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008150:	b2db      	uxtb	r3, r3
 8008152:	461a      	mov	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800815c:	611a      	str	r2, [r3, #16]
 800815e:	e008      	b.n	8008172 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008164:	b2db      	uxtb	r3, r3
 8008166:	f043 0301 	orr.w	r3, r3, #1
 800816a:	b2da      	uxtb	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008176:	2b00      	cmp	r3, #0
 8008178:	d004      	beq.n	8008184 <I2C_Master_SB+0x92>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800817e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008180:	2b00      	cmp	r3, #0
 8008182:	d108      	bne.n	8008196 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008188:	2b00      	cmp	r3, #0
 800818a:	d032      	beq.n	80081f2 <I2C_Master_SB+0x100>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008192:	2b00      	cmp	r3, #0
 8008194:	d02d      	beq.n	80081f2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	685a      	ldr	r2, [r3, #4]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081a4:	605a      	str	r2, [r3, #4]
}
 80081a6:	e024      	b.n	80081f2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d10e      	bne.n	80081ce <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	11db      	asrs	r3, r3, #7
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	f003 0306 	and.w	r3, r3, #6
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	f063 030f 	orn	r3, r3, #15
 80081c4:	b2da      	uxtb	r2, r3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	611a      	str	r2, [r3, #16]
}
 80081cc:	e011      	b.n	80081f2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d10d      	bne.n	80081f2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081da:	b29b      	uxth	r3, r3
 80081dc:	11db      	asrs	r3, r3, #7
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	f003 0306 	and.w	r3, r3, #6
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	f063 030e 	orn	r3, r3, #14
 80081ea:	b2da      	uxtb	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	611a      	str	r2, [r3, #16]
}
 80081f2:	bf00      	nop
 80081f4:	370c      	adds	r7, #12
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr

080081fe <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80081fe:	b480      	push	{r7}
 8008200:	b083      	sub	sp, #12
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800820a:	b2da      	uxtb	r2, r3
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008216:	2b00      	cmp	r3, #0
 8008218:	d004      	beq.n	8008224 <I2C_Master_ADD10+0x26>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800821e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008220:	2b00      	cmp	r3, #0
 8008222:	d108      	bne.n	8008236 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00c      	beq.n	8008246 <I2C_Master_ADD10+0x48>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008232:	2b00      	cmp	r3, #0
 8008234:	d007      	beq.n	8008246 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	685a      	ldr	r2, [r3, #4]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008244:	605a      	str	r2, [r3, #4]
  }
}
 8008246:	bf00      	nop
 8008248:	370c      	adds	r7, #12
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr

08008252 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8008252:	b480      	push	{r7}
 8008254:	b091      	sub	sp, #68	; 0x44
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008260:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008268:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800826e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008276:	b2db      	uxtb	r3, r3
 8008278:	2b22      	cmp	r3, #34	; 0x22
 800827a:	f040 8169 	bne.w	8008550 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008282:	2b00      	cmp	r3, #0
 8008284:	d10f      	bne.n	80082a6 <I2C_Master_ADDR+0x54>
 8008286:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800828a:	2b40      	cmp	r3, #64	; 0x40
 800828c:	d10b      	bne.n	80082a6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800828e:	2300      	movs	r3, #0
 8008290:	633b      	str	r3, [r7, #48]	; 0x30
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	695b      	ldr	r3, [r3, #20]
 8008298:	633b      	str	r3, [r7, #48]	; 0x30
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	699b      	ldr	r3, [r3, #24]
 80082a0:	633b      	str	r3, [r7, #48]	; 0x30
 80082a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a4:	e160      	b.n	8008568 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d11d      	bne.n	80082ea <I2C_Master_ADDR+0x98>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80082b6:	d118      	bne.n	80082ea <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082b8:	2300      	movs	r3, #0
 80082ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	695b      	ldr	r3, [r3, #20]
 80082c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	699b      	ldr	r3, [r3, #24]
 80082ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082dc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082e2:	1c5a      	adds	r2, r3, #1
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	651a      	str	r2, [r3, #80]	; 0x50
 80082e8:	e13e      	b.n	8008568 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d113      	bne.n	800831c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082f4:	2300      	movs	r3, #0
 80082f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	699b      	ldr	r3, [r3, #24]
 8008306:	62bb      	str	r3, [r7, #40]	; 0x28
 8008308:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008318:	601a      	str	r2, [r3, #0]
 800831a:	e115      	b.n	8008548 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008320:	b29b      	uxth	r3, r3
 8008322:	2b01      	cmp	r3, #1
 8008324:	f040 808a 	bne.w	800843c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800832e:	d137      	bne.n	80083a0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800833e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800834a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800834e:	d113      	bne.n	8008378 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800835e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008360:	2300      	movs	r3, #0
 8008362:	627b      	str	r3, [r7, #36]	; 0x24
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	627b      	str	r3, [r7, #36]	; 0x24
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	699b      	ldr	r3, [r3, #24]
 8008372:	627b      	str	r3, [r7, #36]	; 0x24
 8008374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008376:	e0e7      	b.n	8008548 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008378:	2300      	movs	r3, #0
 800837a:	623b      	str	r3, [r7, #32]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	623b      	str	r3, [r7, #32]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	699b      	ldr	r3, [r3, #24]
 800838a:	623b      	str	r3, [r7, #32]
 800838c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800839c:	601a      	str	r2, [r3, #0]
 800839e:	e0d3      	b.n	8008548 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80083a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a2:	2b08      	cmp	r3, #8
 80083a4:	d02e      	beq.n	8008404 <I2C_Master_ADDR+0x1b2>
 80083a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a8:	2b20      	cmp	r3, #32
 80083aa:	d02b      	beq.n	8008404 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80083ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ae:	2b12      	cmp	r3, #18
 80083b0:	d102      	bne.n	80083b8 <I2C_Master_ADDR+0x166>
 80083b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d125      	bne.n	8008404 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80083b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ba:	2b04      	cmp	r3, #4
 80083bc:	d00e      	beq.n	80083dc <I2C_Master_ADDR+0x18a>
 80083be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c0:	2b02      	cmp	r3, #2
 80083c2:	d00b      	beq.n	80083dc <I2C_Master_ADDR+0x18a>
 80083c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c6:	2b10      	cmp	r3, #16
 80083c8:	d008      	beq.n	80083dc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083d8:	601a      	str	r2, [r3, #0]
 80083da:	e007      	b.n	80083ec <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80083ea:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083ec:	2300      	movs	r3, #0
 80083ee:	61fb      	str	r3, [r7, #28]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	695b      	ldr	r3, [r3, #20]
 80083f6:	61fb      	str	r3, [r7, #28]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	61fb      	str	r3, [r7, #28]
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	e0a1      	b.n	8008548 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008412:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008414:	2300      	movs	r3, #0
 8008416:	61bb      	str	r3, [r7, #24]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	695b      	ldr	r3, [r3, #20]
 800841e:	61bb      	str	r3, [r7, #24]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	61bb      	str	r3, [r7, #24]
 8008428:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008438:	601a      	str	r2, [r3, #0]
 800843a:	e085      	b.n	8008548 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008440:	b29b      	uxth	r3, r3
 8008442:	2b02      	cmp	r3, #2
 8008444:	d14d      	bne.n	80084e2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008448:	2b04      	cmp	r3, #4
 800844a:	d016      	beq.n	800847a <I2C_Master_ADDR+0x228>
 800844c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844e:	2b02      	cmp	r3, #2
 8008450:	d013      	beq.n	800847a <I2C_Master_ADDR+0x228>
 8008452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008454:	2b10      	cmp	r3, #16
 8008456:	d010      	beq.n	800847a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008466:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008476:	601a      	str	r2, [r3, #0]
 8008478:	e007      	b.n	800848a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008488:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008494:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008498:	d117      	bne.n	80084ca <I2C_Master_ADDR+0x278>
 800849a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80084a0:	d00b      	beq.n	80084ba <I2C_Master_ADDR+0x268>
 80084a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d008      	beq.n	80084ba <I2C_Master_ADDR+0x268>
 80084a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084aa:	2b08      	cmp	r3, #8
 80084ac:	d005      	beq.n	80084ba <I2C_Master_ADDR+0x268>
 80084ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b0:	2b10      	cmp	r3, #16
 80084b2:	d002      	beq.n	80084ba <I2C_Master_ADDR+0x268>
 80084b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b6:	2b20      	cmp	r3, #32
 80084b8:	d107      	bne.n	80084ca <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	685a      	ldr	r2, [r3, #4]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80084c8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084ca:	2300      	movs	r3, #0
 80084cc:	617b      	str	r3, [r7, #20]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	695b      	ldr	r3, [r3, #20]
 80084d4:	617b      	str	r3, [r7, #20]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	699b      	ldr	r3, [r3, #24]
 80084dc:	617b      	str	r3, [r7, #20]
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	e032      	b.n	8008548 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80084f0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008500:	d117      	bne.n	8008532 <I2C_Master_ADDR+0x2e0>
 8008502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008504:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008508:	d00b      	beq.n	8008522 <I2C_Master_ADDR+0x2d0>
 800850a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850c:	2b01      	cmp	r3, #1
 800850e:	d008      	beq.n	8008522 <I2C_Master_ADDR+0x2d0>
 8008510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008512:	2b08      	cmp	r3, #8
 8008514:	d005      	beq.n	8008522 <I2C_Master_ADDR+0x2d0>
 8008516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008518:	2b10      	cmp	r3, #16
 800851a:	d002      	beq.n	8008522 <I2C_Master_ADDR+0x2d0>
 800851c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851e:	2b20      	cmp	r3, #32
 8008520:	d107      	bne.n	8008532 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	685a      	ldr	r2, [r3, #4]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008530:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008532:	2300      	movs	r3, #0
 8008534:	613b      	str	r3, [r7, #16]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	695b      	ldr	r3, [r3, #20]
 800853c:	613b      	str	r3, [r7, #16]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	699b      	ldr	r3, [r3, #24]
 8008544:	613b      	str	r3, [r7, #16]
 8008546:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800854e:	e00b      	b.n	8008568 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008550:	2300      	movs	r3, #0
 8008552:	60fb      	str	r3, [r7, #12]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	695b      	ldr	r3, [r3, #20]
 800855a:	60fb      	str	r3, [r7, #12]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	699b      	ldr	r3, [r3, #24]
 8008562:	60fb      	str	r3, [r7, #12]
 8008564:	68fb      	ldr	r3, [r7, #12]
}
 8008566:	e7ff      	b.n	8008568 <I2C_Master_ADDR+0x316>
 8008568:	bf00      	nop
 800856a:	3744      	adds	r7, #68	; 0x44
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008582:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008588:	b29b      	uxth	r3, r3
 800858a:	2b00      	cmp	r3, #0
 800858c:	d02b      	beq.n	80085e6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008592:	781a      	ldrb	r2, [r3, #0]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859e:	1c5a      	adds	r2, r3, #1
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	3b01      	subs	r3, #1
 80085ac:	b29a      	uxth	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d114      	bne.n	80085e6 <I2C_SlaveTransmit_TXE+0x72>
 80085bc:	7bfb      	ldrb	r3, [r7, #15]
 80085be:	2b29      	cmp	r3, #41	; 0x29
 80085c0:	d111      	bne.n	80085e6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	685a      	ldr	r2, [r3, #4]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085d0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2221      	movs	r2, #33	; 0x21
 80085d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2228      	movs	r2, #40	; 0x28
 80085dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f7ff f9e7 	bl	80079b4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80085e6:	bf00      	nop
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80085ee:	b480      	push	{r7}
 80085f0:	b083      	sub	sp, #12
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d011      	beq.n	8008624 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008604:	781a      	ldrb	r2, [r3, #0]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008610:	1c5a      	adds	r2, r3, #1
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800861a:	b29b      	uxth	r3, r3
 800861c:	3b01      	subs	r3, #1
 800861e:	b29a      	uxth	r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008624:	bf00      	nop
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800863e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008644:	b29b      	uxth	r3, r3
 8008646:	2b00      	cmp	r3, #0
 8008648:	d02c      	beq.n	80086a4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	691a      	ldr	r2, [r3, #16]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008654:	b2d2      	uxtb	r2, r2
 8008656:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865c:	1c5a      	adds	r2, r3, #1
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008666:	b29b      	uxth	r3, r3
 8008668:	3b01      	subs	r3, #1
 800866a:	b29a      	uxth	r2, r3
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008674:	b29b      	uxth	r3, r3
 8008676:	2b00      	cmp	r3, #0
 8008678:	d114      	bne.n	80086a4 <I2C_SlaveReceive_RXNE+0x74>
 800867a:	7bfb      	ldrb	r3, [r7, #15]
 800867c:	2b2a      	cmp	r3, #42	; 0x2a
 800867e:	d111      	bne.n	80086a4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	685a      	ldr	r2, [r3, #4]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800868e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2222      	movs	r2, #34	; 0x22
 8008694:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2228      	movs	r2, #40	; 0x28
 800869a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7ff f992 	bl	80079c8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80086a4:	bf00      	nop
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b083      	sub	sp, #12
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d012      	beq.n	80086e4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	691a      	ldr	r2, [r3, #16]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c8:	b2d2      	uxtb	r2, r2
 80086ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d0:	1c5a      	adds	r2, r3, #1
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086da:	b29b      	uxth	r3, r3
 80086dc:	3b01      	subs	r3, #1
 80086de:	b29a      	uxth	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80086e4:	bf00      	nop
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80086fa:	2300      	movs	r3, #0
 80086fc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008704:	b2db      	uxtb	r3, r3
 8008706:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800870a:	2b28      	cmp	r3, #40	; 0x28
 800870c:	d127      	bne.n	800875e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	685a      	ldr	r2, [r3, #4]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800871c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	089b      	lsrs	r3, r3, #2
 8008722:	f003 0301 	and.w	r3, r3, #1
 8008726:	2b00      	cmp	r3, #0
 8008728:	d101      	bne.n	800872e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800872a:	2301      	movs	r3, #1
 800872c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	09db      	lsrs	r3, r3, #7
 8008732:	f003 0301 	and.w	r3, r3, #1
 8008736:	2b00      	cmp	r3, #0
 8008738:	d103      	bne.n	8008742 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	81bb      	strh	r3, [r7, #12]
 8008740:	e002      	b.n	8008748 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	699b      	ldr	r3, [r3, #24]
 8008746:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008750:	89ba      	ldrh	r2, [r7, #12]
 8008752:	7bfb      	ldrb	r3, [r7, #15]
 8008754:	4619      	mov	r1, r3
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f7ff f940 	bl	80079dc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800875c:	e00e      	b.n	800877c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800875e:	2300      	movs	r3, #0
 8008760:	60bb      	str	r3, [r7, #8]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	695b      	ldr	r3, [r3, #20]
 8008768:	60bb      	str	r3, [r7, #8]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	699b      	ldr	r3, [r3, #24]
 8008770:	60bb      	str	r3, [r7, #8]
 8008772:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800877c:	bf00      	nop
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008792:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	685a      	ldr	r2, [r3, #4]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80087a2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80087a4:	2300      	movs	r3, #0
 80087a6:	60bb      	str	r3, [r7, #8]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	60bb      	str	r3, [r7, #8]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f042 0201 	orr.w	r2, r2, #1
 80087be:	601a      	str	r2, [r3, #0]
 80087c0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087d0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087e0:	d172      	bne.n	80088c8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80087e2:	7bfb      	ldrb	r3, [r7, #15]
 80087e4:	2b22      	cmp	r3, #34	; 0x22
 80087e6:	d002      	beq.n	80087ee <I2C_Slave_STOPF+0x6a>
 80087e8:	7bfb      	ldrb	r3, [r7, #15]
 80087ea:	2b2a      	cmp	r3, #42	; 0x2a
 80087ec:	d135      	bne.n	800885a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008800:	b29b      	uxth	r3, r3
 8008802:	2b00      	cmp	r3, #0
 8008804:	d005      	beq.n	8008812 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880a:	f043 0204 	orr.w	r2, r3, #4
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	685a      	ldr	r2, [r3, #4]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008820:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008826:	4618      	mov	r0, r3
 8008828:	f7fe f938 	bl	8006a9c <HAL_DMA_GetState>
 800882c:	4603      	mov	r3, r0
 800882e:	2b01      	cmp	r3, #1
 8008830:	d049      	beq.n	80088c6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008836:	4a69      	ldr	r2, [pc, #420]	; (80089dc <I2C_Slave_STOPF+0x258>)
 8008838:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883e:	4618      	mov	r0, r3
 8008840:	f7fd ff80 	bl	8006744 <HAL_DMA_Abort_IT>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d03d      	beq.n	80088c6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800884e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008854:	4610      	mov	r0, r2
 8008856:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008858:	e035      	b.n	80088c6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	b29a      	uxth	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800886c:	b29b      	uxth	r3, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	d005      	beq.n	800887e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008876:	f043 0204 	orr.w	r2, r3, #4
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	685a      	ldr	r2, [r3, #4]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800888c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008892:	4618      	mov	r0, r3
 8008894:	f7fe f902 	bl	8006a9c <HAL_DMA_GetState>
 8008898:	4603      	mov	r3, r0
 800889a:	2b01      	cmp	r3, #1
 800889c:	d014      	beq.n	80088c8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088a2:	4a4e      	ldr	r2, [pc, #312]	; (80089dc <I2C_Slave_STOPF+0x258>)
 80088a4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7fd ff4a 	bl	8006744 <HAL_DMA_Abort_IT>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d008      	beq.n	80088c8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80088c0:	4610      	mov	r0, r2
 80088c2:	4798      	blx	r3
 80088c4:	e000      	b.n	80088c8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80088c6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d03e      	beq.n	8008950 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	695b      	ldr	r3, [r3, #20]
 80088d8:	f003 0304 	and.w	r3, r3, #4
 80088dc:	2b04      	cmp	r3, #4
 80088de:	d112      	bne.n	8008906 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	691a      	ldr	r2, [r3, #16]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ea:	b2d2      	uxtb	r2, r2
 80088ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f2:	1c5a      	adds	r2, r3, #1
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	3b01      	subs	r3, #1
 8008900:	b29a      	uxth	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	695b      	ldr	r3, [r3, #20]
 800890c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008910:	2b40      	cmp	r3, #64	; 0x40
 8008912:	d112      	bne.n	800893a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	691a      	ldr	r2, [r3, #16]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891e:	b2d2      	uxtb	r2, r2
 8008920:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008926:	1c5a      	adds	r2, r3, #1
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008930:	b29b      	uxth	r3, r3
 8008932:	3b01      	subs	r3, #1
 8008934:	b29a      	uxth	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800893e:	b29b      	uxth	r3, r3
 8008940:	2b00      	cmp	r3, #0
 8008942:	d005      	beq.n	8008950 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008948:	f043 0204 	orr.w	r2, r3, #4
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008954:	2b00      	cmp	r3, #0
 8008956:	d003      	beq.n	8008960 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f8b3 	bl	8008ac4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800895e:	e039      	b.n	80089d4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008960:	7bfb      	ldrb	r3, [r7, #15]
 8008962:	2b2a      	cmp	r3, #42	; 0x2a
 8008964:	d109      	bne.n	800897a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2228      	movs	r2, #40	; 0x28
 8008970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f7ff f827 	bl	80079c8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008980:	b2db      	uxtb	r3, r3
 8008982:	2b28      	cmp	r3, #40	; 0x28
 8008984:	d111      	bne.n	80089aa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a15      	ldr	r2, [pc, #84]	; (80089e0 <I2C_Slave_STOPF+0x25c>)
 800898a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2220      	movs	r2, #32
 8008996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f7ff f828 	bl	80079f8 <HAL_I2C_ListenCpltCallback>
}
 80089a8:	e014      	b.n	80089d4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ae:	2b22      	cmp	r3, #34	; 0x22
 80089b0:	d002      	beq.n	80089b8 <I2C_Slave_STOPF+0x234>
 80089b2:	7bfb      	ldrb	r3, [r7, #15]
 80089b4:	2b22      	cmp	r3, #34	; 0x22
 80089b6:	d10d      	bne.n	80089d4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2220      	movs	r2, #32
 80089c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f7fe fffa 	bl	80079c8 <HAL_I2C_SlaveRxCpltCallback>
}
 80089d4:	bf00      	nop
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	08008d29 	.word	0x08008d29
 80089e0:	ffff0000 	.word	0xffff0000

080089e4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089f2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	2b08      	cmp	r3, #8
 80089fe:	d002      	beq.n	8008a06 <I2C_Slave_AF+0x22>
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	2b20      	cmp	r3, #32
 8008a04:	d129      	bne.n	8008a5a <I2C_Slave_AF+0x76>
 8008a06:	7bfb      	ldrb	r3, [r7, #15]
 8008a08:	2b28      	cmp	r3, #40	; 0x28
 8008a0a:	d126      	bne.n	8008a5a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a2c      	ldr	r2, [pc, #176]	; (8008ac0 <I2C_Slave_AF+0xdc>)
 8008a10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	685a      	ldr	r2, [r3, #4]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008a20:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008a2a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a3a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2220      	movs	r2, #32
 8008a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7fe ffd0 	bl	80079f8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008a58:	e02e      	b.n	8008ab8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008a5a:	7bfb      	ldrb	r3, [r7, #15]
 8008a5c:	2b21      	cmp	r3, #33	; 0x21
 8008a5e:	d126      	bne.n	8008aae <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a17      	ldr	r2, [pc, #92]	; (8008ac0 <I2C_Slave_AF+0xdc>)
 8008a64:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2221      	movs	r2, #33	; 0x21
 8008a6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2220      	movs	r2, #32
 8008a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	685a      	ldr	r2, [r3, #4]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008a8a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008a94:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008aa4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f7fe ff84 	bl	80079b4 <HAL_I2C_SlaveTxCpltCallback>
}
 8008aac:	e004      	b.n	8008ab8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008ab6:	615a      	str	r2, [r3, #20]
}
 8008ab8:	bf00      	nop
 8008aba:	3710      	adds	r7, #16
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	ffff0000 	.word	0xffff0000

08008ac4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ad2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ada:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008adc:	7bbb      	ldrb	r3, [r7, #14]
 8008ade:	2b10      	cmp	r3, #16
 8008ae0:	d002      	beq.n	8008ae8 <I2C_ITError+0x24>
 8008ae2:	7bbb      	ldrb	r3, [r7, #14]
 8008ae4:	2b40      	cmp	r3, #64	; 0x40
 8008ae6:	d10a      	bne.n	8008afe <I2C_ITError+0x3a>
 8008ae8:	7bfb      	ldrb	r3, [r7, #15]
 8008aea:	2b22      	cmp	r3, #34	; 0x22
 8008aec:	d107      	bne.n	8008afe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008afc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008afe:	7bfb      	ldrb	r3, [r7, #15]
 8008b00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008b04:	2b28      	cmp	r3, #40	; 0x28
 8008b06:	d107      	bne.n	8008b18 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2228      	movs	r2, #40	; 0x28
 8008b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008b16:	e015      	b.n	8008b44 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b26:	d00a      	beq.n	8008b3e <I2C_ITError+0x7a>
 8008b28:	7bfb      	ldrb	r3, [r7, #15]
 8008b2a:	2b60      	cmp	r3, #96	; 0x60
 8008b2c:	d007      	beq.n	8008b3e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2220      	movs	r2, #32
 8008b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b52:	d162      	bne.n	8008c1a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	685a      	ldr	r2, [r3, #4]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b62:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d020      	beq.n	8008bb4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b76:	4a6a      	ldr	r2, [pc, #424]	; (8008d20 <I2C_ITError+0x25c>)
 8008b78:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7fd fde0 	bl	8006744 <HAL_DMA_Abort_IT>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f000 8089 	beq.w	8008c9e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f022 0201 	bic.w	r2, r2, #1
 8008b9a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2220      	movs	r2, #32
 8008ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008bae:	4610      	mov	r0, r2
 8008bb0:	4798      	blx	r3
 8008bb2:	e074      	b.n	8008c9e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb8:	4a59      	ldr	r2, [pc, #356]	; (8008d20 <I2C_ITError+0x25c>)
 8008bba:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f7fd fdbf 	bl	8006744 <HAL_DMA_Abort_IT>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d068      	beq.n	8008c9e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	695b      	ldr	r3, [r3, #20]
 8008bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bd6:	2b40      	cmp	r3, #64	; 0x40
 8008bd8:	d10b      	bne.n	8008bf2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	691a      	ldr	r2, [r3, #16]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be4:	b2d2      	uxtb	r2, r2
 8008be6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bec:	1c5a      	adds	r2, r3, #1
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f022 0201 	bic.w	r2, r2, #1
 8008c00:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2220      	movs	r2, #32
 8008c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008c14:	4610      	mov	r0, r2
 8008c16:	4798      	blx	r3
 8008c18:	e041      	b.n	8008c9e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	2b60      	cmp	r3, #96	; 0x60
 8008c24:	d125      	bne.n	8008c72 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2220      	movs	r2, #32
 8008c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	695b      	ldr	r3, [r3, #20]
 8008c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c3e:	2b40      	cmp	r3, #64	; 0x40
 8008c40:	d10b      	bne.n	8008c5a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	691a      	ldr	r2, [r3, #16]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4c:	b2d2      	uxtb	r2, r2
 8008c4e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c54:	1c5a      	adds	r2, r3, #1
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f022 0201 	bic.w	r2, r2, #1
 8008c68:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7fe feec 	bl	8007a48 <HAL_I2C_AbortCpltCallback>
 8008c70:	e015      	b.n	8008c9e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	695b      	ldr	r3, [r3, #20]
 8008c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c7c:	2b40      	cmp	r3, #64	; 0x40
 8008c7e:	d10b      	bne.n	8008c98 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	691a      	ldr	r2, [r3, #16]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8a:	b2d2      	uxtb	r2, r2
 8008c8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c92:	1c5a      	adds	r2, r3, #1
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f7fe fecb 	bl	8007a34 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	f003 0301 	and.w	r3, r3, #1
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10e      	bne.n	8008ccc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d109      	bne.n	8008ccc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d104      	bne.n	8008ccc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d007      	beq.n	8008cdc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	685a      	ldr	r2, [r3, #4]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008cda:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ce2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce8:	f003 0304 	and.w	r3, r3, #4
 8008cec:	2b04      	cmp	r3, #4
 8008cee:	d113      	bne.n	8008d18 <I2C_ITError+0x254>
 8008cf0:	7bfb      	ldrb	r3, [r7, #15]
 8008cf2:	2b28      	cmp	r3, #40	; 0x28
 8008cf4:	d110      	bne.n	8008d18 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a0a      	ldr	r2, [pc, #40]	; (8008d24 <I2C_ITError+0x260>)
 8008cfa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2220      	movs	r2, #32
 8008d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f7fe fe70 	bl	80079f8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008d18:	bf00      	nop
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	08008d29 	.word	0x08008d29
 8008d24:	ffff0000 	.word	0xffff0000

08008d28 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b086      	sub	sp, #24
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d30:	2300      	movs	r3, #0
 8008d32:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d38:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d40:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008d42:	4b4b      	ldr	r3, [pc, #300]	; (8008e70 <I2C_DMAAbort+0x148>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	08db      	lsrs	r3, r3, #3
 8008d48:	4a4a      	ldr	r2, [pc, #296]	; (8008e74 <I2C_DMAAbort+0x14c>)
 8008d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d4e:	0a1a      	lsrs	r2, r3, #8
 8008d50:	4613      	mov	r3, r2
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	4413      	add	r3, r2
 8008d56:	00da      	lsls	r2, r3, #3
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d106      	bne.n	8008d70 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d66:	f043 0220 	orr.w	r2, r3, #32
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008d6e:	e00a      	b.n	8008d86 <I2C_DMAAbort+0x5e>
    }
    count--;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	3b01      	subs	r3, #1
 8008d74:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d84:	d0ea      	beq.n	8008d5c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d003      	beq.n	8008d96 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d92:	2200      	movs	r2, #0
 8008d94:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d003      	beq.n	8008da6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da2:	2200      	movs	r2, #0
 8008da4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008db4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	2200      	movs	r2, #0
 8008dba:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d003      	beq.n	8008dcc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc8:	2200      	movs	r2, #0
 8008dca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d003      	beq.n	8008ddc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd8:	2200      	movs	r2, #0
 8008dda:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f022 0201 	bic.w	r2, r2, #1
 8008dea:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	2b60      	cmp	r3, #96	; 0x60
 8008df6:	d10e      	bne.n	8008e16 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	2220      	movs	r2, #32
 8008dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008e0e:	6978      	ldr	r0, [r7, #20]
 8008e10:	f7fe fe1a 	bl	8007a48 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008e14:	e027      	b.n	8008e66 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008e16:	7cfb      	ldrb	r3, [r7, #19]
 8008e18:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008e1c:	2b28      	cmp	r3, #40	; 0x28
 8008e1e:	d117      	bne.n	8008e50 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f042 0201 	orr.w	r2, r2, #1
 8008e2e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008e3e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	2200      	movs	r2, #0
 8008e44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	2228      	movs	r2, #40	; 0x28
 8008e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008e4e:	e007      	b.n	8008e60 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	2220      	movs	r2, #32
 8008e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008e60:	6978      	ldr	r0, [r7, #20]
 8008e62:	f7fe fde7 	bl	8007a34 <HAL_I2C_ErrorCallback>
}
 8008e66:	bf00      	nop
 8008e68:	3718      	adds	r7, #24
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	20000234 	.word	0x20000234
 8008e74:	14f8b589 	.word	0x14f8b589

08008e78 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b085      	sub	sp, #20
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e80:	2300      	movs	r3, #0
 8008e82:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008e84:	4b13      	ldr	r3, [pc, #76]	; (8008ed4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	08db      	lsrs	r3, r3, #3
 8008e8a:	4a13      	ldr	r2, [pc, #76]	; (8008ed8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e90:	0a1a      	lsrs	r2, r3, #8
 8008e92:	4613      	mov	r3, r2
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	4413      	add	r3, r2
 8008e98:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	3b01      	subs	r3, #1
 8008e9e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d107      	bne.n	8008eb6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eaa:	f043 0220 	orr.w	r2, r3, #32
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e008      	b.n	8008ec8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ec4:	d0e9      	beq.n	8008e9a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3714      	adds	r7, #20
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr
 8008ed4:	20000234 	.word	0x20000234
 8008ed8:	14f8b589 	.word	0x14f8b589

08008edc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008eec:	d103      	bne.n	8008ef6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008ef4:	e007      	b.n	8008f06 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008efe:	d102      	bne.n	8008f06 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2208      	movs	r2, #8
 8008f04:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008f06:	bf00      	nop
 8008f08:	370c      	adds	r7, #12
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
	...

08008f14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b086      	sub	sp, #24
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d101      	bne.n	8008f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e267      	b.n	80093f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 0301 	and.w	r3, r3, #1
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d075      	beq.n	800901e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008f32:	4b88      	ldr	r3, [pc, #544]	; (8009154 <HAL_RCC_OscConfig+0x240>)
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	f003 030c 	and.w	r3, r3, #12
 8008f3a:	2b04      	cmp	r3, #4
 8008f3c:	d00c      	beq.n	8008f58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008f3e:	4b85      	ldr	r3, [pc, #532]	; (8009154 <HAL_RCC_OscConfig+0x240>)
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008f46:	2b08      	cmp	r3, #8
 8008f48:	d112      	bne.n	8008f70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008f4a:	4b82      	ldr	r3, [pc, #520]	; (8009154 <HAL_RCC_OscConfig+0x240>)
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f56:	d10b      	bne.n	8008f70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f58:	4b7e      	ldr	r3, [pc, #504]	; (8009154 <HAL_RCC_OscConfig+0x240>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d05b      	beq.n	800901c <HAL_RCC_OscConfig+0x108>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d157      	bne.n	800901c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e242      	b.n	80093f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f78:	d106      	bne.n	8008f88 <HAL_RCC_OscConfig+0x74>
 8008f7a:	4b76      	ldr	r3, [pc, #472]	; (8009154 <HAL_RCC_OscConfig+0x240>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a75      	ldr	r2, [pc, #468]	; (8009154 <HAL_RCC_OscConfig+0x240>)
 8008f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f84:	6013      	str	r3, [r2, #0]
 8008f86:	e01d      	b.n	8008fc4 <HAL_RCC_OscConfig+0xb0>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f90:	d10c      	bne.n	8008fac <HAL_RCC_OscConfig+0x98>
 8008f92:	4b70      	ldr	r3, [pc, #448]	; (8009154 <HAL_RCC_OscConfig+0x240>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a6f      	ldr	r2, [pc, #444]	; (8009154 <HAL_RCC_OscConfig+0x240>)
 8008f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f9c:	6013      	str	r3, [r2, #0]
 8008f9e:	4b6d      	ldr	r3, [pc, #436]	; (8009154 <HAL_RCC_OscConfig+0x240>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a6c      	ldr	r2, [pc, #432]	; (8009154 <HAL_RCC_OscConfig+0x240>)
 8008fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fa8:	6013      	str	r3, [r2, #0]
 8008faa:	e00b      	b.n	8008fc4 <HAL_RCC_OscConfig+0xb0>
 8008fac:	4b69      	ldr	r3, [pc, #420]	; (8009154 <HAL_RCC_OscConfig+0x240>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a68      	ldr	r2, [pc, #416]	; (8009154 <HAL_RCC_OscConfig+0x240>)
 8008fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fb6:	6013      	str	r3, [r2, #0]
 8008fb8:	4b66      	ldr	r3, [pc, #408]	; (8009154 <HAL_RCC_OscConfig+0x240>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a65      	ldr	r2, [pc, #404]	; (8009154 <HAL_RCC_OscConfig+0x240>)
 8008fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008fc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d013      	beq.n	8008ff4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fcc:	f7fc fd24 	bl	8005a18 <HAL_GetTick>
 8008fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008fd2:	e008      	b.n	8008fe6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008fd4:	f7fc fd20 	bl	8005a18 <HAL_GetTick>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	1ad3      	subs	r3, r2, r3
 8008fde:	2b64      	cmp	r3, #100	; 0x64
 8008fe0:	d901      	bls.n	8008fe6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008fe2:	2303      	movs	r3, #3
 8008fe4:	e207      	b.n	80093f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008fe6:	4b5b      	ldr	r3, [pc, #364]	; (8009154 <HAL_RCC_OscConfig+0x240>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d0f0      	beq.n	8008fd4 <HAL_RCC_OscConfig+0xc0>
 8008ff2:	e014      	b.n	800901e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ff4:	f7fc fd10 	bl	8005a18 <HAL_GetTick>
 8008ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ffa:	e008      	b.n	800900e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ffc:	f7fc fd0c 	bl	8005a18 <HAL_GetTick>
 8009000:	4602      	mov	r2, r0
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	1ad3      	subs	r3, r2, r3
 8009006:	2b64      	cmp	r3, #100	; 0x64
 8009008:	d901      	bls.n	800900e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800900a:	2303      	movs	r3, #3
 800900c:	e1f3      	b.n	80093f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800900e:	4b51      	ldr	r3, [pc, #324]	; (8009154 <HAL_RCC_OscConfig+0x240>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009016:	2b00      	cmp	r3, #0
 8009018:	d1f0      	bne.n	8008ffc <HAL_RCC_OscConfig+0xe8>
 800901a:	e000      	b.n	800901e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800901c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f003 0302 	and.w	r3, r3, #2
 8009026:	2b00      	cmp	r3, #0
 8009028:	d063      	beq.n	80090f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800902a:	4b4a      	ldr	r3, [pc, #296]	; (8009154 <HAL_RCC_OscConfig+0x240>)
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	f003 030c 	and.w	r3, r3, #12
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00b      	beq.n	800904e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009036:	4b47      	ldr	r3, [pc, #284]	; (8009154 <HAL_RCC_OscConfig+0x240>)
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800903e:	2b08      	cmp	r3, #8
 8009040:	d11c      	bne.n	800907c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009042:	4b44      	ldr	r3, [pc, #272]	; (8009154 <HAL_RCC_OscConfig+0x240>)
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800904a:	2b00      	cmp	r3, #0
 800904c:	d116      	bne.n	800907c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800904e:	4b41      	ldr	r3, [pc, #260]	; (8009154 <HAL_RCC_OscConfig+0x240>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f003 0302 	and.w	r3, r3, #2
 8009056:	2b00      	cmp	r3, #0
 8009058:	d005      	beq.n	8009066 <HAL_RCC_OscConfig+0x152>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	2b01      	cmp	r3, #1
 8009060:	d001      	beq.n	8009066 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e1c7      	b.n	80093f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009066:	4b3b      	ldr	r3, [pc, #236]	; (8009154 <HAL_RCC_OscConfig+0x240>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	691b      	ldr	r3, [r3, #16]
 8009072:	00db      	lsls	r3, r3, #3
 8009074:	4937      	ldr	r1, [pc, #220]	; (8009154 <HAL_RCC_OscConfig+0x240>)
 8009076:	4313      	orrs	r3, r2
 8009078:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800907a:	e03a      	b.n	80090f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d020      	beq.n	80090c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009084:	4b34      	ldr	r3, [pc, #208]	; (8009158 <HAL_RCC_OscConfig+0x244>)
 8009086:	2201      	movs	r2, #1
 8009088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800908a:	f7fc fcc5 	bl	8005a18 <HAL_GetTick>
 800908e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009090:	e008      	b.n	80090a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009092:	f7fc fcc1 	bl	8005a18 <HAL_GetTick>
 8009096:	4602      	mov	r2, r0
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	1ad3      	subs	r3, r2, r3
 800909c:	2b02      	cmp	r3, #2
 800909e:	d901      	bls.n	80090a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80090a0:	2303      	movs	r3, #3
 80090a2:	e1a8      	b.n	80093f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090a4:	4b2b      	ldr	r3, [pc, #172]	; (8009154 <HAL_RCC_OscConfig+0x240>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 0302 	and.w	r3, r3, #2
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d0f0      	beq.n	8009092 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090b0:	4b28      	ldr	r3, [pc, #160]	; (8009154 <HAL_RCC_OscConfig+0x240>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	00db      	lsls	r3, r3, #3
 80090be:	4925      	ldr	r1, [pc, #148]	; (8009154 <HAL_RCC_OscConfig+0x240>)
 80090c0:	4313      	orrs	r3, r2
 80090c2:	600b      	str	r3, [r1, #0]
 80090c4:	e015      	b.n	80090f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80090c6:	4b24      	ldr	r3, [pc, #144]	; (8009158 <HAL_RCC_OscConfig+0x244>)
 80090c8:	2200      	movs	r2, #0
 80090ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090cc:	f7fc fca4 	bl	8005a18 <HAL_GetTick>
 80090d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80090d2:	e008      	b.n	80090e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80090d4:	f7fc fca0 	bl	8005a18 <HAL_GetTick>
 80090d8:	4602      	mov	r2, r0
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	1ad3      	subs	r3, r2, r3
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d901      	bls.n	80090e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80090e2:	2303      	movs	r3, #3
 80090e4:	e187      	b.n	80093f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80090e6:	4b1b      	ldr	r3, [pc, #108]	; (8009154 <HAL_RCC_OscConfig+0x240>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f003 0302 	and.w	r3, r3, #2
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d1f0      	bne.n	80090d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f003 0308 	and.w	r3, r3, #8
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d036      	beq.n	800916c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	695b      	ldr	r3, [r3, #20]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d016      	beq.n	8009134 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009106:	4b15      	ldr	r3, [pc, #84]	; (800915c <HAL_RCC_OscConfig+0x248>)
 8009108:	2201      	movs	r2, #1
 800910a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800910c:	f7fc fc84 	bl	8005a18 <HAL_GetTick>
 8009110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009112:	e008      	b.n	8009126 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009114:	f7fc fc80 	bl	8005a18 <HAL_GetTick>
 8009118:	4602      	mov	r2, r0
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	1ad3      	subs	r3, r2, r3
 800911e:	2b02      	cmp	r3, #2
 8009120:	d901      	bls.n	8009126 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009122:	2303      	movs	r3, #3
 8009124:	e167      	b.n	80093f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009126:	4b0b      	ldr	r3, [pc, #44]	; (8009154 <HAL_RCC_OscConfig+0x240>)
 8009128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800912a:	f003 0302 	and.w	r3, r3, #2
 800912e:	2b00      	cmp	r3, #0
 8009130:	d0f0      	beq.n	8009114 <HAL_RCC_OscConfig+0x200>
 8009132:	e01b      	b.n	800916c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009134:	4b09      	ldr	r3, [pc, #36]	; (800915c <HAL_RCC_OscConfig+0x248>)
 8009136:	2200      	movs	r2, #0
 8009138:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800913a:	f7fc fc6d 	bl	8005a18 <HAL_GetTick>
 800913e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009140:	e00e      	b.n	8009160 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009142:	f7fc fc69 	bl	8005a18 <HAL_GetTick>
 8009146:	4602      	mov	r2, r0
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	1ad3      	subs	r3, r2, r3
 800914c:	2b02      	cmp	r3, #2
 800914e:	d907      	bls.n	8009160 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009150:	2303      	movs	r3, #3
 8009152:	e150      	b.n	80093f6 <HAL_RCC_OscConfig+0x4e2>
 8009154:	40023800 	.word	0x40023800
 8009158:	42470000 	.word	0x42470000
 800915c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009160:	4b88      	ldr	r3, [pc, #544]	; (8009384 <HAL_RCC_OscConfig+0x470>)
 8009162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009164:	f003 0302 	and.w	r3, r3, #2
 8009168:	2b00      	cmp	r3, #0
 800916a:	d1ea      	bne.n	8009142 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f003 0304 	and.w	r3, r3, #4
 8009174:	2b00      	cmp	r3, #0
 8009176:	f000 8097 	beq.w	80092a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800917a:	2300      	movs	r3, #0
 800917c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800917e:	4b81      	ldr	r3, [pc, #516]	; (8009384 <HAL_RCC_OscConfig+0x470>)
 8009180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009186:	2b00      	cmp	r3, #0
 8009188:	d10f      	bne.n	80091aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800918a:	2300      	movs	r3, #0
 800918c:	60bb      	str	r3, [r7, #8]
 800918e:	4b7d      	ldr	r3, [pc, #500]	; (8009384 <HAL_RCC_OscConfig+0x470>)
 8009190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009192:	4a7c      	ldr	r2, [pc, #496]	; (8009384 <HAL_RCC_OscConfig+0x470>)
 8009194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009198:	6413      	str	r3, [r2, #64]	; 0x40
 800919a:	4b7a      	ldr	r3, [pc, #488]	; (8009384 <HAL_RCC_OscConfig+0x470>)
 800919c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091a2:	60bb      	str	r3, [r7, #8]
 80091a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80091a6:	2301      	movs	r3, #1
 80091a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091aa:	4b77      	ldr	r3, [pc, #476]	; (8009388 <HAL_RCC_OscConfig+0x474>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d118      	bne.n	80091e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80091b6:	4b74      	ldr	r3, [pc, #464]	; (8009388 <HAL_RCC_OscConfig+0x474>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a73      	ldr	r2, [pc, #460]	; (8009388 <HAL_RCC_OscConfig+0x474>)
 80091bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80091c2:	f7fc fc29 	bl	8005a18 <HAL_GetTick>
 80091c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091c8:	e008      	b.n	80091dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80091ca:	f7fc fc25 	bl	8005a18 <HAL_GetTick>
 80091ce:	4602      	mov	r2, r0
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	1ad3      	subs	r3, r2, r3
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d901      	bls.n	80091dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80091d8:	2303      	movs	r3, #3
 80091da:	e10c      	b.n	80093f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091dc:	4b6a      	ldr	r3, [pc, #424]	; (8009388 <HAL_RCC_OscConfig+0x474>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d0f0      	beq.n	80091ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d106      	bne.n	80091fe <HAL_RCC_OscConfig+0x2ea>
 80091f0:	4b64      	ldr	r3, [pc, #400]	; (8009384 <HAL_RCC_OscConfig+0x470>)
 80091f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091f4:	4a63      	ldr	r2, [pc, #396]	; (8009384 <HAL_RCC_OscConfig+0x470>)
 80091f6:	f043 0301 	orr.w	r3, r3, #1
 80091fa:	6713      	str	r3, [r2, #112]	; 0x70
 80091fc:	e01c      	b.n	8009238 <HAL_RCC_OscConfig+0x324>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	2b05      	cmp	r3, #5
 8009204:	d10c      	bne.n	8009220 <HAL_RCC_OscConfig+0x30c>
 8009206:	4b5f      	ldr	r3, [pc, #380]	; (8009384 <HAL_RCC_OscConfig+0x470>)
 8009208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800920a:	4a5e      	ldr	r2, [pc, #376]	; (8009384 <HAL_RCC_OscConfig+0x470>)
 800920c:	f043 0304 	orr.w	r3, r3, #4
 8009210:	6713      	str	r3, [r2, #112]	; 0x70
 8009212:	4b5c      	ldr	r3, [pc, #368]	; (8009384 <HAL_RCC_OscConfig+0x470>)
 8009214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009216:	4a5b      	ldr	r2, [pc, #364]	; (8009384 <HAL_RCC_OscConfig+0x470>)
 8009218:	f043 0301 	orr.w	r3, r3, #1
 800921c:	6713      	str	r3, [r2, #112]	; 0x70
 800921e:	e00b      	b.n	8009238 <HAL_RCC_OscConfig+0x324>
 8009220:	4b58      	ldr	r3, [pc, #352]	; (8009384 <HAL_RCC_OscConfig+0x470>)
 8009222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009224:	4a57      	ldr	r2, [pc, #348]	; (8009384 <HAL_RCC_OscConfig+0x470>)
 8009226:	f023 0301 	bic.w	r3, r3, #1
 800922a:	6713      	str	r3, [r2, #112]	; 0x70
 800922c:	4b55      	ldr	r3, [pc, #340]	; (8009384 <HAL_RCC_OscConfig+0x470>)
 800922e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009230:	4a54      	ldr	r2, [pc, #336]	; (8009384 <HAL_RCC_OscConfig+0x470>)
 8009232:	f023 0304 	bic.w	r3, r3, #4
 8009236:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d015      	beq.n	800926c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009240:	f7fc fbea 	bl	8005a18 <HAL_GetTick>
 8009244:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009246:	e00a      	b.n	800925e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009248:	f7fc fbe6 	bl	8005a18 <HAL_GetTick>
 800924c:	4602      	mov	r2, r0
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	1ad3      	subs	r3, r2, r3
 8009252:	f241 3288 	movw	r2, #5000	; 0x1388
 8009256:	4293      	cmp	r3, r2
 8009258:	d901      	bls.n	800925e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800925a:	2303      	movs	r3, #3
 800925c:	e0cb      	b.n	80093f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800925e:	4b49      	ldr	r3, [pc, #292]	; (8009384 <HAL_RCC_OscConfig+0x470>)
 8009260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009262:	f003 0302 	and.w	r3, r3, #2
 8009266:	2b00      	cmp	r3, #0
 8009268:	d0ee      	beq.n	8009248 <HAL_RCC_OscConfig+0x334>
 800926a:	e014      	b.n	8009296 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800926c:	f7fc fbd4 	bl	8005a18 <HAL_GetTick>
 8009270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009272:	e00a      	b.n	800928a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009274:	f7fc fbd0 	bl	8005a18 <HAL_GetTick>
 8009278:	4602      	mov	r2, r0
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	1ad3      	subs	r3, r2, r3
 800927e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009282:	4293      	cmp	r3, r2
 8009284:	d901      	bls.n	800928a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009286:	2303      	movs	r3, #3
 8009288:	e0b5      	b.n	80093f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800928a:	4b3e      	ldr	r3, [pc, #248]	; (8009384 <HAL_RCC_OscConfig+0x470>)
 800928c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800928e:	f003 0302 	and.w	r3, r3, #2
 8009292:	2b00      	cmp	r3, #0
 8009294:	d1ee      	bne.n	8009274 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009296:	7dfb      	ldrb	r3, [r7, #23]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d105      	bne.n	80092a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800929c:	4b39      	ldr	r3, [pc, #228]	; (8009384 <HAL_RCC_OscConfig+0x470>)
 800929e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a0:	4a38      	ldr	r2, [pc, #224]	; (8009384 <HAL_RCC_OscConfig+0x470>)
 80092a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	699b      	ldr	r3, [r3, #24]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f000 80a1 	beq.w	80093f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80092b2:	4b34      	ldr	r3, [pc, #208]	; (8009384 <HAL_RCC_OscConfig+0x470>)
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	f003 030c 	and.w	r3, r3, #12
 80092ba:	2b08      	cmp	r3, #8
 80092bc:	d05c      	beq.n	8009378 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	699b      	ldr	r3, [r3, #24]
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d141      	bne.n	800934a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092c6:	4b31      	ldr	r3, [pc, #196]	; (800938c <HAL_RCC_OscConfig+0x478>)
 80092c8:	2200      	movs	r2, #0
 80092ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092cc:	f7fc fba4 	bl	8005a18 <HAL_GetTick>
 80092d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80092d2:	e008      	b.n	80092e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80092d4:	f7fc fba0 	bl	8005a18 <HAL_GetTick>
 80092d8:	4602      	mov	r2, r0
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	1ad3      	subs	r3, r2, r3
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d901      	bls.n	80092e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80092e2:	2303      	movs	r3, #3
 80092e4:	e087      	b.n	80093f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80092e6:	4b27      	ldr	r3, [pc, #156]	; (8009384 <HAL_RCC_OscConfig+0x470>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d1f0      	bne.n	80092d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	69da      	ldr	r2, [r3, #28]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6a1b      	ldr	r3, [r3, #32]
 80092fa:	431a      	orrs	r2, r3
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009300:	019b      	lsls	r3, r3, #6
 8009302:	431a      	orrs	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009308:	085b      	lsrs	r3, r3, #1
 800930a:	3b01      	subs	r3, #1
 800930c:	041b      	lsls	r3, r3, #16
 800930e:	431a      	orrs	r2, r3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009314:	061b      	lsls	r3, r3, #24
 8009316:	491b      	ldr	r1, [pc, #108]	; (8009384 <HAL_RCC_OscConfig+0x470>)
 8009318:	4313      	orrs	r3, r2
 800931a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800931c:	4b1b      	ldr	r3, [pc, #108]	; (800938c <HAL_RCC_OscConfig+0x478>)
 800931e:	2201      	movs	r2, #1
 8009320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009322:	f7fc fb79 	bl	8005a18 <HAL_GetTick>
 8009326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009328:	e008      	b.n	800933c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800932a:	f7fc fb75 	bl	8005a18 <HAL_GetTick>
 800932e:	4602      	mov	r2, r0
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	1ad3      	subs	r3, r2, r3
 8009334:	2b02      	cmp	r3, #2
 8009336:	d901      	bls.n	800933c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009338:	2303      	movs	r3, #3
 800933a:	e05c      	b.n	80093f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800933c:	4b11      	ldr	r3, [pc, #68]	; (8009384 <HAL_RCC_OscConfig+0x470>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009344:	2b00      	cmp	r3, #0
 8009346:	d0f0      	beq.n	800932a <HAL_RCC_OscConfig+0x416>
 8009348:	e054      	b.n	80093f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800934a:	4b10      	ldr	r3, [pc, #64]	; (800938c <HAL_RCC_OscConfig+0x478>)
 800934c:	2200      	movs	r2, #0
 800934e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009350:	f7fc fb62 	bl	8005a18 <HAL_GetTick>
 8009354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009356:	e008      	b.n	800936a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009358:	f7fc fb5e 	bl	8005a18 <HAL_GetTick>
 800935c:	4602      	mov	r2, r0
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	2b02      	cmp	r3, #2
 8009364:	d901      	bls.n	800936a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009366:	2303      	movs	r3, #3
 8009368:	e045      	b.n	80093f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800936a:	4b06      	ldr	r3, [pc, #24]	; (8009384 <HAL_RCC_OscConfig+0x470>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009372:	2b00      	cmp	r3, #0
 8009374:	d1f0      	bne.n	8009358 <HAL_RCC_OscConfig+0x444>
 8009376:	e03d      	b.n	80093f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	699b      	ldr	r3, [r3, #24]
 800937c:	2b01      	cmp	r3, #1
 800937e:	d107      	bne.n	8009390 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009380:	2301      	movs	r3, #1
 8009382:	e038      	b.n	80093f6 <HAL_RCC_OscConfig+0x4e2>
 8009384:	40023800 	.word	0x40023800
 8009388:	40007000 	.word	0x40007000
 800938c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009390:	4b1b      	ldr	r3, [pc, #108]	; (8009400 <HAL_RCC_OscConfig+0x4ec>)
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	699b      	ldr	r3, [r3, #24]
 800939a:	2b01      	cmp	r3, #1
 800939c:	d028      	beq.n	80093f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d121      	bne.n	80093f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d11a      	bne.n	80093f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80093c0:	4013      	ands	r3, r2
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80093c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d111      	bne.n	80093f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d6:	085b      	lsrs	r3, r3, #1
 80093d8:	3b01      	subs	r3, #1
 80093da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80093dc:	429a      	cmp	r2, r3
 80093de:	d107      	bne.n	80093f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d001      	beq.n	80093f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	e000      	b.n	80093f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3718      	adds	r7, #24
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	40023800 	.word	0x40023800

08009404 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d101      	bne.n	8009418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009414:	2301      	movs	r3, #1
 8009416:	e0cc      	b.n	80095b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009418:	4b68      	ldr	r3, [pc, #416]	; (80095bc <HAL_RCC_ClockConfig+0x1b8>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f003 0307 	and.w	r3, r3, #7
 8009420:	683a      	ldr	r2, [r7, #0]
 8009422:	429a      	cmp	r2, r3
 8009424:	d90c      	bls.n	8009440 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009426:	4b65      	ldr	r3, [pc, #404]	; (80095bc <HAL_RCC_ClockConfig+0x1b8>)
 8009428:	683a      	ldr	r2, [r7, #0]
 800942a:	b2d2      	uxtb	r2, r2
 800942c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800942e:	4b63      	ldr	r3, [pc, #396]	; (80095bc <HAL_RCC_ClockConfig+0x1b8>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f003 0307 	and.w	r3, r3, #7
 8009436:	683a      	ldr	r2, [r7, #0]
 8009438:	429a      	cmp	r2, r3
 800943a:	d001      	beq.n	8009440 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	e0b8      	b.n	80095b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 0302 	and.w	r3, r3, #2
 8009448:	2b00      	cmp	r3, #0
 800944a:	d020      	beq.n	800948e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f003 0304 	and.w	r3, r3, #4
 8009454:	2b00      	cmp	r3, #0
 8009456:	d005      	beq.n	8009464 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009458:	4b59      	ldr	r3, [pc, #356]	; (80095c0 <HAL_RCC_ClockConfig+0x1bc>)
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	4a58      	ldr	r2, [pc, #352]	; (80095c0 <HAL_RCC_ClockConfig+0x1bc>)
 800945e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009462:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f003 0308 	and.w	r3, r3, #8
 800946c:	2b00      	cmp	r3, #0
 800946e:	d005      	beq.n	800947c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009470:	4b53      	ldr	r3, [pc, #332]	; (80095c0 <HAL_RCC_ClockConfig+0x1bc>)
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	4a52      	ldr	r2, [pc, #328]	; (80095c0 <HAL_RCC_ClockConfig+0x1bc>)
 8009476:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800947a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800947c:	4b50      	ldr	r3, [pc, #320]	; (80095c0 <HAL_RCC_ClockConfig+0x1bc>)
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	494d      	ldr	r1, [pc, #308]	; (80095c0 <HAL_RCC_ClockConfig+0x1bc>)
 800948a:	4313      	orrs	r3, r2
 800948c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f003 0301 	and.w	r3, r3, #1
 8009496:	2b00      	cmp	r3, #0
 8009498:	d044      	beq.n	8009524 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d107      	bne.n	80094b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094a2:	4b47      	ldr	r3, [pc, #284]	; (80095c0 <HAL_RCC_ClockConfig+0x1bc>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d119      	bne.n	80094e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80094ae:	2301      	movs	r3, #1
 80094b0:	e07f      	b.n	80095b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	2b02      	cmp	r3, #2
 80094b8:	d003      	beq.n	80094c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80094be:	2b03      	cmp	r3, #3
 80094c0:	d107      	bne.n	80094d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80094c2:	4b3f      	ldr	r3, [pc, #252]	; (80095c0 <HAL_RCC_ClockConfig+0x1bc>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d109      	bne.n	80094e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	e06f      	b.n	80095b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094d2:	4b3b      	ldr	r3, [pc, #236]	; (80095c0 <HAL_RCC_ClockConfig+0x1bc>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f003 0302 	and.w	r3, r3, #2
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d101      	bne.n	80094e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	e067      	b.n	80095b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80094e2:	4b37      	ldr	r3, [pc, #220]	; (80095c0 <HAL_RCC_ClockConfig+0x1bc>)
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	f023 0203 	bic.w	r2, r3, #3
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	4934      	ldr	r1, [pc, #208]	; (80095c0 <HAL_RCC_ClockConfig+0x1bc>)
 80094f0:	4313      	orrs	r3, r2
 80094f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80094f4:	f7fc fa90 	bl	8005a18 <HAL_GetTick>
 80094f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094fa:	e00a      	b.n	8009512 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094fc:	f7fc fa8c 	bl	8005a18 <HAL_GetTick>
 8009500:	4602      	mov	r2, r0
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	1ad3      	subs	r3, r2, r3
 8009506:	f241 3288 	movw	r2, #5000	; 0x1388
 800950a:	4293      	cmp	r3, r2
 800950c:	d901      	bls.n	8009512 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800950e:	2303      	movs	r3, #3
 8009510:	e04f      	b.n	80095b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009512:	4b2b      	ldr	r3, [pc, #172]	; (80095c0 <HAL_RCC_ClockConfig+0x1bc>)
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	f003 020c 	and.w	r2, r3, #12
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	429a      	cmp	r2, r3
 8009522:	d1eb      	bne.n	80094fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009524:	4b25      	ldr	r3, [pc, #148]	; (80095bc <HAL_RCC_ClockConfig+0x1b8>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f003 0307 	and.w	r3, r3, #7
 800952c:	683a      	ldr	r2, [r7, #0]
 800952e:	429a      	cmp	r2, r3
 8009530:	d20c      	bcs.n	800954c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009532:	4b22      	ldr	r3, [pc, #136]	; (80095bc <HAL_RCC_ClockConfig+0x1b8>)
 8009534:	683a      	ldr	r2, [r7, #0]
 8009536:	b2d2      	uxtb	r2, r2
 8009538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800953a:	4b20      	ldr	r3, [pc, #128]	; (80095bc <HAL_RCC_ClockConfig+0x1b8>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f003 0307 	and.w	r3, r3, #7
 8009542:	683a      	ldr	r2, [r7, #0]
 8009544:	429a      	cmp	r2, r3
 8009546:	d001      	beq.n	800954c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009548:	2301      	movs	r3, #1
 800954a:	e032      	b.n	80095b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f003 0304 	and.w	r3, r3, #4
 8009554:	2b00      	cmp	r3, #0
 8009556:	d008      	beq.n	800956a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009558:	4b19      	ldr	r3, [pc, #100]	; (80095c0 <HAL_RCC_ClockConfig+0x1bc>)
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	4916      	ldr	r1, [pc, #88]	; (80095c0 <HAL_RCC_ClockConfig+0x1bc>)
 8009566:	4313      	orrs	r3, r2
 8009568:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f003 0308 	and.w	r3, r3, #8
 8009572:	2b00      	cmp	r3, #0
 8009574:	d009      	beq.n	800958a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009576:	4b12      	ldr	r3, [pc, #72]	; (80095c0 <HAL_RCC_ClockConfig+0x1bc>)
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	691b      	ldr	r3, [r3, #16]
 8009582:	00db      	lsls	r3, r3, #3
 8009584:	490e      	ldr	r1, [pc, #56]	; (80095c0 <HAL_RCC_ClockConfig+0x1bc>)
 8009586:	4313      	orrs	r3, r2
 8009588:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800958a:	f000 f821 	bl	80095d0 <HAL_RCC_GetSysClockFreq>
 800958e:	4602      	mov	r2, r0
 8009590:	4b0b      	ldr	r3, [pc, #44]	; (80095c0 <HAL_RCC_ClockConfig+0x1bc>)
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	091b      	lsrs	r3, r3, #4
 8009596:	f003 030f 	and.w	r3, r3, #15
 800959a:	490a      	ldr	r1, [pc, #40]	; (80095c4 <HAL_RCC_ClockConfig+0x1c0>)
 800959c:	5ccb      	ldrb	r3, [r1, r3]
 800959e:	fa22 f303 	lsr.w	r3, r2, r3
 80095a2:	4a09      	ldr	r2, [pc, #36]	; (80095c8 <HAL_RCC_ClockConfig+0x1c4>)
 80095a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80095a6:	4b09      	ldr	r3, [pc, #36]	; (80095cc <HAL_RCC_ClockConfig+0x1c8>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7fc f9f0 	bl	8005990 <HAL_InitTick>

  return HAL_OK;
 80095b0:	2300      	movs	r3, #0
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3710      	adds	r7, #16
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	40023c00 	.word	0x40023c00
 80095c0:	40023800 	.word	0x40023800
 80095c4:	0800ee7c 	.word	0x0800ee7c
 80095c8:	20000234 	.word	0x20000234
 80095cc:	20000238 	.word	0x20000238

080095d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80095d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095d4:	b094      	sub	sp, #80	; 0x50
 80095d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80095d8:	2300      	movs	r3, #0
 80095da:	647b      	str	r3, [r7, #68]	; 0x44
 80095dc:	2300      	movs	r3, #0
 80095de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095e0:	2300      	movs	r3, #0
 80095e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80095e4:	2300      	movs	r3, #0
 80095e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80095e8:	4b79      	ldr	r3, [pc, #484]	; (80097d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	f003 030c 	and.w	r3, r3, #12
 80095f0:	2b08      	cmp	r3, #8
 80095f2:	d00d      	beq.n	8009610 <HAL_RCC_GetSysClockFreq+0x40>
 80095f4:	2b08      	cmp	r3, #8
 80095f6:	f200 80e1 	bhi.w	80097bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d002      	beq.n	8009604 <HAL_RCC_GetSysClockFreq+0x34>
 80095fe:	2b04      	cmp	r3, #4
 8009600:	d003      	beq.n	800960a <HAL_RCC_GetSysClockFreq+0x3a>
 8009602:	e0db      	b.n	80097bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009604:	4b73      	ldr	r3, [pc, #460]	; (80097d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8009606:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009608:	e0db      	b.n	80097c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800960a:	4b73      	ldr	r3, [pc, #460]	; (80097d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800960c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800960e:	e0d8      	b.n	80097c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009610:	4b6f      	ldr	r3, [pc, #444]	; (80097d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009618:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800961a:	4b6d      	ldr	r3, [pc, #436]	; (80097d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009622:	2b00      	cmp	r3, #0
 8009624:	d063      	beq.n	80096ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009626:	4b6a      	ldr	r3, [pc, #424]	; (80097d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	099b      	lsrs	r3, r3, #6
 800962c:	2200      	movs	r2, #0
 800962e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009630:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009638:	633b      	str	r3, [r7, #48]	; 0x30
 800963a:	2300      	movs	r3, #0
 800963c:	637b      	str	r3, [r7, #52]	; 0x34
 800963e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009642:	4622      	mov	r2, r4
 8009644:	462b      	mov	r3, r5
 8009646:	f04f 0000 	mov.w	r0, #0
 800964a:	f04f 0100 	mov.w	r1, #0
 800964e:	0159      	lsls	r1, r3, #5
 8009650:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009654:	0150      	lsls	r0, r2, #5
 8009656:	4602      	mov	r2, r0
 8009658:	460b      	mov	r3, r1
 800965a:	4621      	mov	r1, r4
 800965c:	1a51      	subs	r1, r2, r1
 800965e:	6139      	str	r1, [r7, #16]
 8009660:	4629      	mov	r1, r5
 8009662:	eb63 0301 	sbc.w	r3, r3, r1
 8009666:	617b      	str	r3, [r7, #20]
 8009668:	f04f 0200 	mov.w	r2, #0
 800966c:	f04f 0300 	mov.w	r3, #0
 8009670:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009674:	4659      	mov	r1, fp
 8009676:	018b      	lsls	r3, r1, #6
 8009678:	4651      	mov	r1, sl
 800967a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800967e:	4651      	mov	r1, sl
 8009680:	018a      	lsls	r2, r1, #6
 8009682:	4651      	mov	r1, sl
 8009684:	ebb2 0801 	subs.w	r8, r2, r1
 8009688:	4659      	mov	r1, fp
 800968a:	eb63 0901 	sbc.w	r9, r3, r1
 800968e:	f04f 0200 	mov.w	r2, #0
 8009692:	f04f 0300 	mov.w	r3, #0
 8009696:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800969a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800969e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80096a2:	4690      	mov	r8, r2
 80096a4:	4699      	mov	r9, r3
 80096a6:	4623      	mov	r3, r4
 80096a8:	eb18 0303 	adds.w	r3, r8, r3
 80096ac:	60bb      	str	r3, [r7, #8]
 80096ae:	462b      	mov	r3, r5
 80096b0:	eb49 0303 	adc.w	r3, r9, r3
 80096b4:	60fb      	str	r3, [r7, #12]
 80096b6:	f04f 0200 	mov.w	r2, #0
 80096ba:	f04f 0300 	mov.w	r3, #0
 80096be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80096c2:	4629      	mov	r1, r5
 80096c4:	024b      	lsls	r3, r1, #9
 80096c6:	4621      	mov	r1, r4
 80096c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80096cc:	4621      	mov	r1, r4
 80096ce:	024a      	lsls	r2, r1, #9
 80096d0:	4610      	mov	r0, r2
 80096d2:	4619      	mov	r1, r3
 80096d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096d6:	2200      	movs	r2, #0
 80096d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80096da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80096dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80096e0:	f7f7 fa7e 	bl	8000be0 <__aeabi_uldivmod>
 80096e4:	4602      	mov	r2, r0
 80096e6:	460b      	mov	r3, r1
 80096e8:	4613      	mov	r3, r2
 80096ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096ec:	e058      	b.n	80097a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80096ee:	4b38      	ldr	r3, [pc, #224]	; (80097d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	099b      	lsrs	r3, r3, #6
 80096f4:	2200      	movs	r2, #0
 80096f6:	4618      	mov	r0, r3
 80096f8:	4611      	mov	r1, r2
 80096fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80096fe:	623b      	str	r3, [r7, #32]
 8009700:	2300      	movs	r3, #0
 8009702:	627b      	str	r3, [r7, #36]	; 0x24
 8009704:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009708:	4642      	mov	r2, r8
 800970a:	464b      	mov	r3, r9
 800970c:	f04f 0000 	mov.w	r0, #0
 8009710:	f04f 0100 	mov.w	r1, #0
 8009714:	0159      	lsls	r1, r3, #5
 8009716:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800971a:	0150      	lsls	r0, r2, #5
 800971c:	4602      	mov	r2, r0
 800971e:	460b      	mov	r3, r1
 8009720:	4641      	mov	r1, r8
 8009722:	ebb2 0a01 	subs.w	sl, r2, r1
 8009726:	4649      	mov	r1, r9
 8009728:	eb63 0b01 	sbc.w	fp, r3, r1
 800972c:	f04f 0200 	mov.w	r2, #0
 8009730:	f04f 0300 	mov.w	r3, #0
 8009734:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009738:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800973c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009740:	ebb2 040a 	subs.w	r4, r2, sl
 8009744:	eb63 050b 	sbc.w	r5, r3, fp
 8009748:	f04f 0200 	mov.w	r2, #0
 800974c:	f04f 0300 	mov.w	r3, #0
 8009750:	00eb      	lsls	r3, r5, #3
 8009752:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009756:	00e2      	lsls	r2, r4, #3
 8009758:	4614      	mov	r4, r2
 800975a:	461d      	mov	r5, r3
 800975c:	4643      	mov	r3, r8
 800975e:	18e3      	adds	r3, r4, r3
 8009760:	603b      	str	r3, [r7, #0]
 8009762:	464b      	mov	r3, r9
 8009764:	eb45 0303 	adc.w	r3, r5, r3
 8009768:	607b      	str	r3, [r7, #4]
 800976a:	f04f 0200 	mov.w	r2, #0
 800976e:	f04f 0300 	mov.w	r3, #0
 8009772:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009776:	4629      	mov	r1, r5
 8009778:	028b      	lsls	r3, r1, #10
 800977a:	4621      	mov	r1, r4
 800977c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009780:	4621      	mov	r1, r4
 8009782:	028a      	lsls	r2, r1, #10
 8009784:	4610      	mov	r0, r2
 8009786:	4619      	mov	r1, r3
 8009788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800978a:	2200      	movs	r2, #0
 800978c:	61bb      	str	r3, [r7, #24]
 800978e:	61fa      	str	r2, [r7, #28]
 8009790:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009794:	f7f7 fa24 	bl	8000be0 <__aeabi_uldivmod>
 8009798:	4602      	mov	r2, r0
 800979a:	460b      	mov	r3, r1
 800979c:	4613      	mov	r3, r2
 800979e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80097a0:	4b0b      	ldr	r3, [pc, #44]	; (80097d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	0c1b      	lsrs	r3, r3, #16
 80097a6:	f003 0303 	and.w	r3, r3, #3
 80097aa:	3301      	adds	r3, #1
 80097ac:	005b      	lsls	r3, r3, #1
 80097ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80097b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80097b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80097b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80097ba:	e002      	b.n	80097c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80097bc:	4b05      	ldr	r3, [pc, #20]	; (80097d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80097be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80097c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80097c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3750      	adds	r7, #80	; 0x50
 80097c8:	46bd      	mov	sp, r7
 80097ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097ce:	bf00      	nop
 80097d0:	40023800 	.word	0x40023800
 80097d4:	00f42400 	.word	0x00f42400
 80097d8:	007a1200 	.word	0x007a1200

080097dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80097dc:	b480      	push	{r7}
 80097de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80097e0:	4b03      	ldr	r3, [pc, #12]	; (80097f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80097e2:	681b      	ldr	r3, [r3, #0]
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	20000234 	.word	0x20000234

080097f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80097f8:	f7ff fff0 	bl	80097dc <HAL_RCC_GetHCLKFreq>
 80097fc:	4602      	mov	r2, r0
 80097fe:	4b05      	ldr	r3, [pc, #20]	; (8009814 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	0a9b      	lsrs	r3, r3, #10
 8009804:	f003 0307 	and.w	r3, r3, #7
 8009808:	4903      	ldr	r1, [pc, #12]	; (8009818 <HAL_RCC_GetPCLK1Freq+0x24>)
 800980a:	5ccb      	ldrb	r3, [r1, r3]
 800980c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009810:	4618      	mov	r0, r3
 8009812:	bd80      	pop	{r7, pc}
 8009814:	40023800 	.word	0x40023800
 8009818:	0800ee8c 	.word	0x0800ee8c

0800981c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009820:	f7ff ffdc 	bl	80097dc <HAL_RCC_GetHCLKFreq>
 8009824:	4602      	mov	r2, r0
 8009826:	4b05      	ldr	r3, [pc, #20]	; (800983c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	0b5b      	lsrs	r3, r3, #13
 800982c:	f003 0307 	and.w	r3, r3, #7
 8009830:	4903      	ldr	r1, [pc, #12]	; (8009840 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009832:	5ccb      	ldrb	r3, [r1, r3]
 8009834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009838:	4618      	mov	r0, r3
 800983a:	bd80      	pop	{r7, pc}
 800983c:	40023800 	.word	0x40023800
 8009840:	0800ee8c 	.word	0x0800ee8c

08009844 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d101      	bne.n	8009856 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009852:	2301      	movs	r3, #1
 8009854:	e04c      	b.n	80098f0 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800985c:	b2db      	uxtb	r3, r3
 800985e:	2b00      	cmp	r3, #0
 8009860:	d111      	bne.n	8009886 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2200      	movs	r2, #0
 8009866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f001 fbb2 	bl	800afd4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009874:	2b00      	cmp	r3, #0
 8009876:	d102      	bne.n	800987e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	4a1f      	ldr	r2, [pc, #124]	; (80098f8 <HAL_TIM_Base_Init+0xb4>)
 800987c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2202      	movs	r2, #2
 800988a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	3304      	adds	r3, #4
 8009896:	4619      	mov	r1, r3
 8009898:	4610      	mov	r0, r2
 800989a:	f001 f8cf 	bl	800aa3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2201      	movs	r2, #1
 80098a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2201      	movs	r2, #1
 80098aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2201      	movs	r2, #1
 80098b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2201      	movs	r2, #1
 80098c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2201      	movs	r2, #1
 80098ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2201      	movs	r2, #1
 80098d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2201      	movs	r2, #1
 80098da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2201      	movs	r2, #1
 80098e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2201      	movs	r2, #1
 80098ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098ee:	2300      	movs	r3, #0
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}
 80098f8:	080047fd 	.word	0x080047fd

080098fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b085      	sub	sp, #20
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800990a:	b2db      	uxtb	r3, r3
 800990c:	2b01      	cmp	r3, #1
 800990e:	d001      	beq.n	8009914 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009910:	2301      	movs	r3, #1
 8009912:	e044      	b.n	800999e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2202      	movs	r2, #2
 8009918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	68da      	ldr	r2, [r3, #12]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f042 0201 	orr.w	r2, r2, #1
 800992a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a1e      	ldr	r2, [pc, #120]	; (80099ac <HAL_TIM_Base_Start_IT+0xb0>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d018      	beq.n	8009968 <HAL_TIM_Base_Start_IT+0x6c>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800993e:	d013      	beq.n	8009968 <HAL_TIM_Base_Start_IT+0x6c>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a1a      	ldr	r2, [pc, #104]	; (80099b0 <HAL_TIM_Base_Start_IT+0xb4>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d00e      	beq.n	8009968 <HAL_TIM_Base_Start_IT+0x6c>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a19      	ldr	r2, [pc, #100]	; (80099b4 <HAL_TIM_Base_Start_IT+0xb8>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d009      	beq.n	8009968 <HAL_TIM_Base_Start_IT+0x6c>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a17      	ldr	r2, [pc, #92]	; (80099b8 <HAL_TIM_Base_Start_IT+0xbc>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d004      	beq.n	8009968 <HAL_TIM_Base_Start_IT+0x6c>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a16      	ldr	r2, [pc, #88]	; (80099bc <HAL_TIM_Base_Start_IT+0xc0>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d111      	bne.n	800998c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	f003 0307 	and.w	r3, r3, #7
 8009972:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2b06      	cmp	r3, #6
 8009978:	d010      	beq.n	800999c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f042 0201 	orr.w	r2, r2, #1
 8009988:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800998a:	e007      	b.n	800999c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f042 0201 	orr.w	r2, r2, #1
 800999a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800999c:	2300      	movs	r3, #0
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3714      	adds	r7, #20
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr
 80099aa:	bf00      	nop
 80099ac:	40010000 	.word	0x40010000
 80099b0:	40000400 	.word	0x40000400
 80099b4:	40000800 	.word	0x40000800
 80099b8:	40000c00 	.word	0x40000c00
 80099bc:	40014000 	.word	0x40014000

080099c0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d101      	bne.n	80099d2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80099ce:	2301      	movs	r3, #1
 80099d0:	e04c      	b.n	8009a6c <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d111      	bne.n	8009a02 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2200      	movs	r2, #0
 80099e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f001 faf4 	bl	800afd4 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d102      	bne.n	80099fa <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	4a1f      	ldr	r2, [pc, #124]	; (8009a74 <HAL_TIM_OC_Init+0xb4>)
 80099f8:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2202      	movs	r2, #2
 8009a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	3304      	adds	r3, #4
 8009a12:	4619      	mov	r1, r3
 8009a14:	4610      	mov	r0, r2
 8009a16:	f001 f811 	bl	800aa3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2201      	movs	r2, #1
 8009a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2201      	movs	r2, #1
 8009a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2201      	movs	r2, #1
 8009a46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2201      	movs	r2, #1
 8009a56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2201      	movs	r2, #1
 8009a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a6a:	2300      	movs	r3, #0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3708      	adds	r7, #8
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	08009a79 	.word	0x08009a79

08009a78 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009a80:	bf00      	nop
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d101      	bne.n	8009a9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	e04c      	b.n	8009b38 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d111      	bne.n	8009ace <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f001 fa8e 	bl	800afd4 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d102      	bne.n	8009ac6 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	4a1f      	ldr	r2, [pc, #124]	; (8009b40 <HAL_TIM_PWM_Init+0xb4>)
 8009ac4:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2202      	movs	r2, #2
 8009ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	3304      	adds	r3, #4
 8009ade:	4619      	mov	r1, r3
 8009ae0:	4610      	mov	r0, r2
 8009ae2:	f000 ffab 	bl	800aa3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2201      	movs	r2, #1
 8009af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2201      	movs	r2, #1
 8009afa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2201      	movs	r2, #1
 8009b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2201      	movs	r2, #1
 8009b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2201      	movs	r2, #1
 8009b12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2201      	movs	r2, #1
 8009b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2201      	movs	r2, #1
 8009b2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2201      	movs	r2, #1
 8009b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3708      	adds	r7, #8
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}
 8009b40:	08009b45 	.word	0x08009b45

08009b44 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009b4c:	bf00      	nop
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d109      	bne.n	8009b7c <HAL_TIM_PWM_Start+0x24>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	bf14      	ite	ne
 8009b74:	2301      	movne	r3, #1
 8009b76:	2300      	moveq	r3, #0
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	e022      	b.n	8009bc2 <HAL_TIM_PWM_Start+0x6a>
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	2b04      	cmp	r3, #4
 8009b80:	d109      	bne.n	8009b96 <HAL_TIM_PWM_Start+0x3e>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	bf14      	ite	ne
 8009b8e:	2301      	movne	r3, #1
 8009b90:	2300      	moveq	r3, #0
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	e015      	b.n	8009bc2 <HAL_TIM_PWM_Start+0x6a>
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	2b08      	cmp	r3, #8
 8009b9a:	d109      	bne.n	8009bb0 <HAL_TIM_PWM_Start+0x58>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	bf14      	ite	ne
 8009ba8:	2301      	movne	r3, #1
 8009baa:	2300      	moveq	r3, #0
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	e008      	b.n	8009bc2 <HAL_TIM_PWM_Start+0x6a>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	bf14      	ite	ne
 8009bbc:	2301      	movne	r3, #1
 8009bbe:	2300      	moveq	r3, #0
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d001      	beq.n	8009bca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e068      	b.n	8009c9c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d104      	bne.n	8009bda <HAL_TIM_PWM_Start+0x82>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2202      	movs	r2, #2
 8009bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009bd8:	e013      	b.n	8009c02 <HAL_TIM_PWM_Start+0xaa>
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	2b04      	cmp	r3, #4
 8009bde:	d104      	bne.n	8009bea <HAL_TIM_PWM_Start+0x92>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2202      	movs	r2, #2
 8009be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009be8:	e00b      	b.n	8009c02 <HAL_TIM_PWM_Start+0xaa>
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	2b08      	cmp	r3, #8
 8009bee:	d104      	bne.n	8009bfa <HAL_TIM_PWM_Start+0xa2>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2202      	movs	r2, #2
 8009bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009bf8:	e003      	b.n	8009c02 <HAL_TIM_PWM_Start+0xaa>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2202      	movs	r2, #2
 8009bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2201      	movs	r2, #1
 8009c08:	6839      	ldr	r1, [r7, #0]
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f001 f9bc 	bl	800af88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a23      	ldr	r2, [pc, #140]	; (8009ca4 <HAL_TIM_PWM_Start+0x14c>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d107      	bne.n	8009c2a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a1d      	ldr	r2, [pc, #116]	; (8009ca4 <HAL_TIM_PWM_Start+0x14c>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d018      	beq.n	8009c66 <HAL_TIM_PWM_Start+0x10e>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c3c:	d013      	beq.n	8009c66 <HAL_TIM_PWM_Start+0x10e>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a19      	ldr	r2, [pc, #100]	; (8009ca8 <HAL_TIM_PWM_Start+0x150>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d00e      	beq.n	8009c66 <HAL_TIM_PWM_Start+0x10e>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4a17      	ldr	r2, [pc, #92]	; (8009cac <HAL_TIM_PWM_Start+0x154>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d009      	beq.n	8009c66 <HAL_TIM_PWM_Start+0x10e>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a16      	ldr	r2, [pc, #88]	; (8009cb0 <HAL_TIM_PWM_Start+0x158>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d004      	beq.n	8009c66 <HAL_TIM_PWM_Start+0x10e>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a14      	ldr	r2, [pc, #80]	; (8009cb4 <HAL_TIM_PWM_Start+0x15c>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d111      	bne.n	8009c8a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	f003 0307 	and.w	r3, r3, #7
 8009c70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2b06      	cmp	r3, #6
 8009c76:	d010      	beq.n	8009c9a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f042 0201 	orr.w	r2, r2, #1
 8009c86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c88:	e007      	b.n	8009c9a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f042 0201 	orr.w	r2, r2, #1
 8009c98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009c9a:	2300      	movs	r3, #0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3710      	adds	r7, #16
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	40010000 	.word	0x40010000
 8009ca8:	40000400 	.word	0x40000400
 8009cac:	40000800 	.word	0x40000800
 8009cb0:	40000c00 	.word	0x40000c00
 8009cb4:	40014000 	.word	0x40014000

08009cb8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d101      	bne.n	8009ccc <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	e04c      	b.n	8009d66 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d111      	bne.n	8009cfc <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f001 f977 	bl	800afd4 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d102      	bne.n	8009cf4 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4a1f      	ldr	r2, [pc, #124]	; (8009d70 <HAL_TIM_OnePulse_Init+0xb8>)
 8009cf2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2202      	movs	r2, #2
 8009d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681a      	ldr	r2, [r3, #0]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	3304      	adds	r3, #4
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	4610      	mov	r0, r2
 8009d10:	f000 fe94 	bl	800aa3c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f022 0208 	bic.w	r2, r2, #8
 8009d22:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	6819      	ldr	r1, [r3, #0]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	683a      	ldr	r2, [r7, #0]
 8009d30:	430a      	orrs	r2, r1
 8009d32:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2201      	movs	r2, #1
 8009d38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3708      	adds	r7, #8
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	08009d75 	.word	0x08009d75

08009d74 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8009d7c:	bf00      	nop
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d98:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009da0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009da8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009db0:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009db2:	7bfb      	ldrb	r3, [r7, #15]
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d108      	bne.n	8009dca <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009db8:	7bbb      	ldrb	r3, [r7, #14]
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d105      	bne.n	8009dca <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009dbe:	7b7b      	ldrb	r3, [r7, #13]
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d102      	bne.n	8009dca <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009dc4:	7b3b      	ldrb	r3, [r7, #12]
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d001      	beq.n	8009dce <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	e03b      	b.n	8009e46 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2202      	movs	r2, #2
 8009dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2202      	movs	r2, #2
 8009dda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2202      	movs	r2, #2
 8009de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2202      	movs	r2, #2
 8009dea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	68da      	ldr	r2, [r3, #12]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f042 0202 	orr.w	r2, r2, #2
 8009dfc:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68da      	ldr	r2, [r3, #12]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f042 0204 	orr.w	r2, r2, #4
 8009e0c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2201      	movs	r2, #1
 8009e14:	2100      	movs	r1, #0
 8009e16:	4618      	mov	r0, r3
 8009e18:	f001 f8b6 	bl	800af88 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2201      	movs	r2, #1
 8009e22:	2104      	movs	r1, #4
 8009e24:	4618      	mov	r0, r3
 8009e26:	f001 f8af 	bl	800af88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a08      	ldr	r2, [pc, #32]	; (8009e50 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d107      	bne.n	8009e44 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e42:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8009e44:	2300      	movs	r3, #0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3710      	adds	r7, #16
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	40010000 	.word	0x40010000

08009e54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b086      	sub	sp, #24
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d101      	bne.n	8009e68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009e64:	2301      	movs	r3, #1
 8009e66:	e0a2      	b.n	8009fae <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d111      	bne.n	8009e98 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f001 f8a9 	bl	800afd4 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d102      	bne.n	8009e90 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	4a4a      	ldr	r2, [pc, #296]	; (8009fb8 <HAL_TIM_Encoder_Init+0x164>)
 8009e8e:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2202      	movs	r2, #2
 8009e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	6812      	ldr	r2, [r2, #0]
 8009eaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009eae:	f023 0307 	bic.w	r3, r3, #7
 8009eb2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	3304      	adds	r3, #4
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	4610      	mov	r0, r2
 8009ec0:	f000 fdbc 	bl	800aa3c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	689b      	ldr	r3, [r3, #8]
 8009eca:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	699b      	ldr	r3, [r3, #24]
 8009ed2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	6a1b      	ldr	r3, [r3, #32]
 8009eda:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	697a      	ldr	r2, [r7, #20]
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009eec:	f023 0303 	bic.w	r3, r3, #3
 8009ef0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	689a      	ldr	r2, [r3, #8]
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	699b      	ldr	r3, [r3, #24]
 8009efa:	021b      	lsls	r3, r3, #8
 8009efc:	4313      	orrs	r3, r2
 8009efe:	693a      	ldr	r2, [r7, #16]
 8009f00:	4313      	orrs	r3, r2
 8009f02:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009f0a:	f023 030c 	bic.w	r3, r3, #12
 8009f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	68da      	ldr	r2, [r3, #12]
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	69db      	ldr	r3, [r3, #28]
 8009f24:	021b      	lsls	r3, r3, #8
 8009f26:	4313      	orrs	r3, r2
 8009f28:	693a      	ldr	r2, [r7, #16]
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	691b      	ldr	r3, [r3, #16]
 8009f32:	011a      	lsls	r2, r3, #4
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	6a1b      	ldr	r3, [r3, #32]
 8009f38:	031b      	lsls	r3, r3, #12
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	693a      	ldr	r2, [r7, #16]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009f48:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009f50:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	685a      	ldr	r2, [r3, #4]
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	695b      	ldr	r3, [r3, #20]
 8009f5a:	011b      	lsls	r3, r3, #4
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	68fa      	ldr	r2, [r7, #12]
 8009f60:	4313      	orrs	r3, r2
 8009f62:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	697a      	ldr	r2, [r7, #20]
 8009f6a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	693a      	ldr	r2, [r7, #16]
 8009f72:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	68fa      	ldr	r2, [r7, #12]
 8009f7a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2201      	movs	r2, #1
 8009f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2201      	movs	r2, #1
 8009f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009fac:	2300      	movs	r3, #0
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3718      	adds	r7, #24
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	08004761 	.word	0x08004761

08009fbc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009fcc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009fd4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009fdc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009fe4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d110      	bne.n	800a00e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009fec:	7bfb      	ldrb	r3, [r7, #15]
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d102      	bne.n	8009ff8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009ff2:	7b7b      	ldrb	r3, [r7, #13]
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d001      	beq.n	8009ffc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	e069      	b.n	800a0d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2202      	movs	r2, #2
 800a000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2202      	movs	r2, #2
 800a008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a00c:	e031      	b.n	800a072 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	2b04      	cmp	r3, #4
 800a012:	d110      	bne.n	800a036 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a014:	7bbb      	ldrb	r3, [r7, #14]
 800a016:	2b01      	cmp	r3, #1
 800a018:	d102      	bne.n	800a020 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a01a:	7b3b      	ldrb	r3, [r7, #12]
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d001      	beq.n	800a024 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	e055      	b.n	800a0d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2202      	movs	r2, #2
 800a028:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2202      	movs	r2, #2
 800a030:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a034:	e01d      	b.n	800a072 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a036:	7bfb      	ldrb	r3, [r7, #15]
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d108      	bne.n	800a04e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a03c:	7bbb      	ldrb	r3, [r7, #14]
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d105      	bne.n	800a04e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a042:	7b7b      	ldrb	r3, [r7, #13]
 800a044:	2b01      	cmp	r3, #1
 800a046:	d102      	bne.n	800a04e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a048:	7b3b      	ldrb	r3, [r7, #12]
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d001      	beq.n	800a052 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	e03e      	b.n	800a0d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2202      	movs	r2, #2
 800a056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2202      	movs	r2, #2
 800a05e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2202      	movs	r2, #2
 800a066:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2202      	movs	r2, #2
 800a06e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d003      	beq.n	800a080 <HAL_TIM_Encoder_Start+0xc4>
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	2b04      	cmp	r3, #4
 800a07c:	d008      	beq.n	800a090 <HAL_TIM_Encoder_Start+0xd4>
 800a07e:	e00f      	b.n	800a0a0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2201      	movs	r2, #1
 800a086:	2100      	movs	r1, #0
 800a088:	4618      	mov	r0, r3
 800a08a:	f000 ff7d 	bl	800af88 <TIM_CCxChannelCmd>
      break;
 800a08e:	e016      	b.n	800a0be <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	2201      	movs	r2, #1
 800a096:	2104      	movs	r1, #4
 800a098:	4618      	mov	r0, r3
 800a09a:	f000 ff75 	bl	800af88 <TIM_CCxChannelCmd>
      break;
 800a09e:	e00e      	b.n	800a0be <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	2100      	movs	r1, #0
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f000 ff6d 	bl	800af88 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	2104      	movs	r1, #4
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f000 ff66 	bl	800af88 <TIM_CCxChannelCmd>
      break;
 800a0bc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f042 0201 	orr.w	r2, r2, #1
 800a0cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a0ce:	2300      	movs	r3, #0
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	691b      	ldr	r3, [r3, #16]
 800a0e6:	f003 0302 	and.w	r3, r3, #2
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d128      	bne.n	800a140 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	f003 0302 	and.w	r3, r3, #2
 800a0f8:	2b02      	cmp	r3, #2
 800a0fa:	d121      	bne.n	800a140 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f06f 0202 	mvn.w	r2, #2
 800a104:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2201      	movs	r2, #1
 800a10a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	699b      	ldr	r3, [r3, #24]
 800a112:	f003 0303 	and.w	r3, r3, #3
 800a116:	2b00      	cmp	r3, #0
 800a118:	d005      	beq.n	800a126 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	4798      	blx	r3
 800a124:	e009      	b.n	800a13a <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2200      	movs	r2, #0
 800a13e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	691b      	ldr	r3, [r3, #16]
 800a146:	f003 0304 	and.w	r3, r3, #4
 800a14a:	2b04      	cmp	r3, #4
 800a14c:	d128      	bne.n	800a1a0 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	68db      	ldr	r3, [r3, #12]
 800a154:	f003 0304 	and.w	r3, r3, #4
 800a158:	2b04      	cmp	r3, #4
 800a15a:	d121      	bne.n	800a1a0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f06f 0204 	mvn.w	r2, #4
 800a164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2202      	movs	r2, #2
 800a16a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	699b      	ldr	r3, [r3, #24]
 800a172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a176:	2b00      	cmp	r3, #0
 800a178:	d005      	beq.n	800a186 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	4798      	blx	r3
 800a184:	e009      	b.n	800a19a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	691b      	ldr	r3, [r3, #16]
 800a1a6:	f003 0308 	and.w	r3, r3, #8
 800a1aa:	2b08      	cmp	r3, #8
 800a1ac:	d128      	bne.n	800a200 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	f003 0308 	and.w	r3, r3, #8
 800a1b8:	2b08      	cmp	r3, #8
 800a1ba:	d121      	bne.n	800a200 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f06f 0208 	mvn.w	r2, #8
 800a1c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2204      	movs	r2, #4
 800a1ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	69db      	ldr	r3, [r3, #28]
 800a1d2:	f003 0303 	and.w	r3, r3, #3
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d005      	beq.n	800a1e6 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	4798      	blx	r3
 800a1e4:	e009      	b.n	800a1fa <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	691b      	ldr	r3, [r3, #16]
 800a206:	f003 0310 	and.w	r3, r3, #16
 800a20a:	2b10      	cmp	r3, #16
 800a20c:	d128      	bne.n	800a260 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	f003 0310 	and.w	r3, r3, #16
 800a218:	2b10      	cmp	r3, #16
 800a21a:	d121      	bne.n	800a260 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f06f 0210 	mvn.w	r2, #16
 800a224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2208      	movs	r2, #8
 800a22a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	69db      	ldr	r3, [r3, #28]
 800a232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a236:	2b00      	cmp	r3, #0
 800a238:	d005      	beq.n	800a246 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	4798      	blx	r3
 800a244:	e009      	b.n	800a25a <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2200      	movs	r2, #0
 800a25e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	691b      	ldr	r3, [r3, #16]
 800a266:	f003 0301 	and.w	r3, r3, #1
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d110      	bne.n	800a290 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	f003 0301 	and.w	r3, r3, #1
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d109      	bne.n	800a290 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f06f 0201 	mvn.w	r2, #1
 800a284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	691b      	ldr	r3, [r3, #16]
 800a296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a29a:	2b80      	cmp	r3, #128	; 0x80
 800a29c:	d110      	bne.n	800a2c0 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	68db      	ldr	r3, [r3, #12]
 800a2a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2a8:	2b80      	cmp	r3, #128	; 0x80
 800a2aa:	d109      	bne.n	800a2c0 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a2b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	691b      	ldr	r3, [r3, #16]
 800a2c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ca:	2b40      	cmp	r3, #64	; 0x40
 800a2cc:	d110      	bne.n	800a2f0 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	68db      	ldr	r3, [r3, #12]
 800a2d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2d8:	2b40      	cmp	r3, #64	; 0x40
 800a2da:	d109      	bne.n	800a2f0 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a2e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	691b      	ldr	r3, [r3, #16]
 800a2f6:	f003 0320 	and.w	r3, r3, #32
 800a2fa:	2b20      	cmp	r3, #32
 800a2fc:	d110      	bne.n	800a320 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	f003 0320 	and.w	r3, r3, #32
 800a308:	2b20      	cmp	r3, #32
 800a30a:	d109      	bne.n	800a320 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f06f 0220 	mvn.w	r2, #32
 800a314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a320:	bf00      	nop
 800a322:	3708      	adds	r7, #8
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b086      	sub	sp, #24
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	60f8      	str	r0, [r7, #12]
 800a330:	60b9      	str	r1, [r7, #8]
 800a332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a334:	2300      	movs	r3, #0
 800a336:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d101      	bne.n	800a346 <HAL_TIM_OC_ConfigChannel+0x1e>
 800a342:	2302      	movs	r3, #2
 800a344:	e048      	b.n	800a3d8 <HAL_TIM_OC_ConfigChannel+0xb0>
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2201      	movs	r2, #1
 800a34a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2b0c      	cmp	r3, #12
 800a352:	d839      	bhi.n	800a3c8 <HAL_TIM_OC_ConfigChannel+0xa0>
 800a354:	a201      	add	r2, pc, #4	; (adr r2, 800a35c <HAL_TIM_OC_ConfigChannel+0x34>)
 800a356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a35a:	bf00      	nop
 800a35c:	0800a391 	.word	0x0800a391
 800a360:	0800a3c9 	.word	0x0800a3c9
 800a364:	0800a3c9 	.word	0x0800a3c9
 800a368:	0800a3c9 	.word	0x0800a3c9
 800a36c:	0800a39f 	.word	0x0800a39f
 800a370:	0800a3c9 	.word	0x0800a3c9
 800a374:	0800a3c9 	.word	0x0800a3c9
 800a378:	0800a3c9 	.word	0x0800a3c9
 800a37c:	0800a3ad 	.word	0x0800a3ad
 800a380:	0800a3c9 	.word	0x0800a3c9
 800a384:	0800a3c9 	.word	0x0800a3c9
 800a388:	0800a3c9 	.word	0x0800a3c9
 800a38c:	0800a3bb 	.word	0x0800a3bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	68b9      	ldr	r1, [r7, #8]
 800a396:	4618      	mov	r0, r3
 800a398:	f000 fbd0 	bl	800ab3c <TIM_OC1_SetConfig>
      break;
 800a39c:	e017      	b.n	800a3ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	68b9      	ldr	r1, [r7, #8]
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f000 fc2f 	bl	800ac08 <TIM_OC2_SetConfig>
      break;
 800a3aa:	e010      	b.n	800a3ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	68b9      	ldr	r1, [r7, #8]
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f000 fc94 	bl	800ace0 <TIM_OC3_SetConfig>
      break;
 800a3b8:	e009      	b.n	800a3ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	68b9      	ldr	r1, [r7, #8]
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f000 fcf7 	bl	800adb4 <TIM_OC4_SetConfig>
      break;
 800a3c6:	e002      	b.n	800a3ce <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	75fb      	strb	r3, [r7, #23]
      break;
 800a3cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a3d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3718      	adds	r7, #24
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b086      	sub	sp, #24
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d101      	bne.n	800a3fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a3fa:	2302      	movs	r3, #2
 800a3fc:	e0ae      	b.n	800a55c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2201      	movs	r2, #1
 800a402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2b0c      	cmp	r3, #12
 800a40a:	f200 809f 	bhi.w	800a54c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a40e:	a201      	add	r2, pc, #4	; (adr r2, 800a414 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a414:	0800a449 	.word	0x0800a449
 800a418:	0800a54d 	.word	0x0800a54d
 800a41c:	0800a54d 	.word	0x0800a54d
 800a420:	0800a54d 	.word	0x0800a54d
 800a424:	0800a489 	.word	0x0800a489
 800a428:	0800a54d 	.word	0x0800a54d
 800a42c:	0800a54d 	.word	0x0800a54d
 800a430:	0800a54d 	.word	0x0800a54d
 800a434:	0800a4cb 	.word	0x0800a4cb
 800a438:	0800a54d 	.word	0x0800a54d
 800a43c:	0800a54d 	.word	0x0800a54d
 800a440:	0800a54d 	.word	0x0800a54d
 800a444:	0800a50b 	.word	0x0800a50b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	68b9      	ldr	r1, [r7, #8]
 800a44e:	4618      	mov	r0, r3
 800a450:	f000 fb74 	bl	800ab3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	699a      	ldr	r2, [r3, #24]
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f042 0208 	orr.w	r2, r2, #8
 800a462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	699a      	ldr	r2, [r3, #24]
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f022 0204 	bic.w	r2, r2, #4
 800a472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	6999      	ldr	r1, [r3, #24]
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	691a      	ldr	r2, [r3, #16]
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	430a      	orrs	r2, r1
 800a484:	619a      	str	r2, [r3, #24]
      break;
 800a486:	e064      	b.n	800a552 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	68b9      	ldr	r1, [r7, #8]
 800a48e:	4618      	mov	r0, r3
 800a490:	f000 fbba 	bl	800ac08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	699a      	ldr	r2, [r3, #24]
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	699a      	ldr	r2, [r3, #24]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	6999      	ldr	r1, [r3, #24]
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	691b      	ldr	r3, [r3, #16]
 800a4be:	021a      	lsls	r2, r3, #8
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	430a      	orrs	r2, r1
 800a4c6:	619a      	str	r2, [r3, #24]
      break;
 800a4c8:	e043      	b.n	800a552 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	68b9      	ldr	r1, [r7, #8]
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f000 fc05 	bl	800ace0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	69da      	ldr	r2, [r3, #28]
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f042 0208 	orr.w	r2, r2, #8
 800a4e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	69da      	ldr	r2, [r3, #28]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f022 0204 	bic.w	r2, r2, #4
 800a4f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	69d9      	ldr	r1, [r3, #28]
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	691a      	ldr	r2, [r3, #16]
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	430a      	orrs	r2, r1
 800a506:	61da      	str	r2, [r3, #28]
      break;
 800a508:	e023      	b.n	800a552 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	68b9      	ldr	r1, [r7, #8]
 800a510:	4618      	mov	r0, r3
 800a512:	f000 fc4f 	bl	800adb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	69da      	ldr	r2, [r3, #28]
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a524:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	69da      	ldr	r2, [r3, #28]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a534:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	69d9      	ldr	r1, [r3, #28]
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	691b      	ldr	r3, [r3, #16]
 800a540:	021a      	lsls	r2, r3, #8
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	430a      	orrs	r2, r1
 800a548:	61da      	str	r2, [r3, #28]
      break;
 800a54a:	e002      	b.n	800a552 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a54c:	2301      	movs	r3, #1
 800a54e:	75fb      	strb	r3, [r7, #23]
      break;
 800a550:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2200      	movs	r2, #0
 800a556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a55a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3718      	adds	r7, #24
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a56e:	2300      	movs	r3, #0
 800a570:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d101      	bne.n	800a580 <HAL_TIM_ConfigClockSource+0x1c>
 800a57c:	2302      	movs	r3, #2
 800a57e:	e0b4      	b.n	800a6ea <HAL_TIM_ConfigClockSource+0x186>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2201      	movs	r2, #1
 800a584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2202      	movs	r2, #2
 800a58c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	689b      	ldr	r3, [r3, #8]
 800a596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a59e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	68ba      	ldr	r2, [r7, #8]
 800a5ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5b8:	d03e      	beq.n	800a638 <HAL_TIM_ConfigClockSource+0xd4>
 800a5ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5be:	f200 8087 	bhi.w	800a6d0 <HAL_TIM_ConfigClockSource+0x16c>
 800a5c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5c6:	f000 8086 	beq.w	800a6d6 <HAL_TIM_ConfigClockSource+0x172>
 800a5ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5ce:	d87f      	bhi.n	800a6d0 <HAL_TIM_ConfigClockSource+0x16c>
 800a5d0:	2b70      	cmp	r3, #112	; 0x70
 800a5d2:	d01a      	beq.n	800a60a <HAL_TIM_ConfigClockSource+0xa6>
 800a5d4:	2b70      	cmp	r3, #112	; 0x70
 800a5d6:	d87b      	bhi.n	800a6d0 <HAL_TIM_ConfigClockSource+0x16c>
 800a5d8:	2b60      	cmp	r3, #96	; 0x60
 800a5da:	d050      	beq.n	800a67e <HAL_TIM_ConfigClockSource+0x11a>
 800a5dc:	2b60      	cmp	r3, #96	; 0x60
 800a5de:	d877      	bhi.n	800a6d0 <HAL_TIM_ConfigClockSource+0x16c>
 800a5e0:	2b50      	cmp	r3, #80	; 0x50
 800a5e2:	d03c      	beq.n	800a65e <HAL_TIM_ConfigClockSource+0xfa>
 800a5e4:	2b50      	cmp	r3, #80	; 0x50
 800a5e6:	d873      	bhi.n	800a6d0 <HAL_TIM_ConfigClockSource+0x16c>
 800a5e8:	2b40      	cmp	r3, #64	; 0x40
 800a5ea:	d058      	beq.n	800a69e <HAL_TIM_ConfigClockSource+0x13a>
 800a5ec:	2b40      	cmp	r3, #64	; 0x40
 800a5ee:	d86f      	bhi.n	800a6d0 <HAL_TIM_ConfigClockSource+0x16c>
 800a5f0:	2b30      	cmp	r3, #48	; 0x30
 800a5f2:	d064      	beq.n	800a6be <HAL_TIM_ConfigClockSource+0x15a>
 800a5f4:	2b30      	cmp	r3, #48	; 0x30
 800a5f6:	d86b      	bhi.n	800a6d0 <HAL_TIM_ConfigClockSource+0x16c>
 800a5f8:	2b20      	cmp	r3, #32
 800a5fa:	d060      	beq.n	800a6be <HAL_TIM_ConfigClockSource+0x15a>
 800a5fc:	2b20      	cmp	r3, #32
 800a5fe:	d867      	bhi.n	800a6d0 <HAL_TIM_ConfigClockSource+0x16c>
 800a600:	2b00      	cmp	r3, #0
 800a602:	d05c      	beq.n	800a6be <HAL_TIM_ConfigClockSource+0x15a>
 800a604:	2b10      	cmp	r3, #16
 800a606:	d05a      	beq.n	800a6be <HAL_TIM_ConfigClockSource+0x15a>
 800a608:	e062      	b.n	800a6d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6818      	ldr	r0, [r3, #0]
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	6899      	ldr	r1, [r3, #8]
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	685a      	ldr	r2, [r3, #4]
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	f000 fc95 	bl	800af48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a62c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	68ba      	ldr	r2, [r7, #8]
 800a634:	609a      	str	r2, [r3, #8]
      break;
 800a636:	e04f      	b.n	800a6d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6818      	ldr	r0, [r3, #0]
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	6899      	ldr	r1, [r3, #8]
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	685a      	ldr	r2, [r3, #4]
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	68db      	ldr	r3, [r3, #12]
 800a648:	f000 fc7e 	bl	800af48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	689a      	ldr	r2, [r3, #8]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a65a:	609a      	str	r2, [r3, #8]
      break;
 800a65c:	e03c      	b.n	800a6d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6818      	ldr	r0, [r3, #0]
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	6859      	ldr	r1, [r3, #4]
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	461a      	mov	r2, r3
 800a66c:	f000 fbf2 	bl	800ae54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	2150      	movs	r1, #80	; 0x50
 800a676:	4618      	mov	r0, r3
 800a678:	f000 fc4b 	bl	800af12 <TIM_ITRx_SetConfig>
      break;
 800a67c:	e02c      	b.n	800a6d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6818      	ldr	r0, [r3, #0]
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	6859      	ldr	r1, [r3, #4]
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	461a      	mov	r2, r3
 800a68c:	f000 fc11 	bl	800aeb2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	2160      	movs	r1, #96	; 0x60
 800a696:	4618      	mov	r0, r3
 800a698:	f000 fc3b 	bl	800af12 <TIM_ITRx_SetConfig>
      break;
 800a69c:	e01c      	b.n	800a6d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6818      	ldr	r0, [r3, #0]
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	6859      	ldr	r1, [r3, #4]
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	f000 fbd2 	bl	800ae54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	2140      	movs	r1, #64	; 0x40
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f000 fc2b 	bl	800af12 <TIM_ITRx_SetConfig>
      break;
 800a6bc:	e00c      	b.n	800a6d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681a      	ldr	r2, [r3, #0]
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	4610      	mov	r0, r2
 800a6ca:	f000 fc22 	bl	800af12 <TIM_ITRx_SetConfig>
      break;
 800a6ce:	e003      	b.n	800a6d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	73fb      	strb	r3, [r7, #15]
      break;
 800a6d4:	e000      	b.n	800a6d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a6d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2201      	movs	r2, #1
 800a6dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a6e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3710      	adds	r7, #16
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}

0800a6f2 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a6f2:	b480      	push	{r7}
 800a6f4:	b083      	sub	sp, #12
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800a6fa:	bf00      	nop
 800a6fc:	370c      	adds	r7, #12
 800a6fe:	46bd      	mov	sp, r7
 800a700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a704:	4770      	bx	lr

0800a706 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a706:	b480      	push	{r7}
 800a708:	b083      	sub	sp, #12
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a70e:	bf00      	nop
 800a710:	370c      	adds	r7, #12
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr

0800a71a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a71a:	b480      	push	{r7}
 800a71c:	b083      	sub	sp, #12
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a722:	bf00      	nop
 800a724:	370c      	adds	r7, #12
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr

0800a72e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a72e:	b480      	push	{r7}
 800a730:	b083      	sub	sp, #12
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800a736:	bf00      	nop
 800a738:	370c      	adds	r7, #12
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr

0800a742 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a742:	b480      	push	{r7}
 800a744:	b083      	sub	sp, #12
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a74a:	bf00      	nop
 800a74c:	370c      	adds	r7, #12
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr

0800a756 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a756:	b480      	push	{r7}
 800a758:	b083      	sub	sp, #12
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a75e:	bf00      	nop
 800a760:	370c      	adds	r7, #12
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr

0800a76a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a76a:	b480      	push	{r7}
 800a76c:	b083      	sub	sp, #12
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a772:	bf00      	nop
 800a774:	370c      	adds	r7, #12
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr

0800a77e <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a77e:	b480      	push	{r7}
 800a780:	b083      	sub	sp, #12
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800a786:	bf00      	nop
 800a788:	370c      	adds	r7, #12
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr

0800a792 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a792:	b480      	push	{r7}
 800a794:	b083      	sub	sp, #12
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a79a:	bf00      	nop
 800a79c:	370c      	adds	r7, #12
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr
	...

0800a7a8 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b087      	sub	sp, #28
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	607a      	str	r2, [r7, #4]
 800a7b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d101      	bne.n	800a7c4 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	e135      	b.n	800aa30 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7ca:	2b01      	cmp	r3, #1
 800a7cc:	d101      	bne.n	800a7d2 <HAL_TIM_RegisterCallback+0x2a>
 800a7ce:	2302      	movs	r3, #2
 800a7d0:	e12e      	b.n	800aa30 <HAL_TIM_RegisterCallback+0x288>
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	f040 80ba 	bne.w	800a95c <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 800a7e8:	7afb      	ldrb	r3, [r7, #11]
 800a7ea:	2b1a      	cmp	r3, #26
 800a7ec:	f200 80b3 	bhi.w	800a956 <HAL_TIM_RegisterCallback+0x1ae>
 800a7f0:	a201      	add	r2, pc, #4	; (adr r2, 800a7f8 <HAL_TIM_RegisterCallback+0x50>)
 800a7f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f6:	bf00      	nop
 800a7f8:	0800a865 	.word	0x0800a865
 800a7fc:	0800a86d 	.word	0x0800a86d
 800a800:	0800a875 	.word	0x0800a875
 800a804:	0800a87d 	.word	0x0800a87d
 800a808:	0800a885 	.word	0x0800a885
 800a80c:	0800a88d 	.word	0x0800a88d
 800a810:	0800a895 	.word	0x0800a895
 800a814:	0800a89d 	.word	0x0800a89d
 800a818:	0800a8a5 	.word	0x0800a8a5
 800a81c:	0800a8ad 	.word	0x0800a8ad
 800a820:	0800a8b5 	.word	0x0800a8b5
 800a824:	0800a8bd 	.word	0x0800a8bd
 800a828:	0800a8c5 	.word	0x0800a8c5
 800a82c:	0800a8cd 	.word	0x0800a8cd
 800a830:	0800a8d5 	.word	0x0800a8d5
 800a834:	0800a8df 	.word	0x0800a8df
 800a838:	0800a8e9 	.word	0x0800a8e9
 800a83c:	0800a8f3 	.word	0x0800a8f3
 800a840:	0800a8fd 	.word	0x0800a8fd
 800a844:	0800a907 	.word	0x0800a907
 800a848:	0800a911 	.word	0x0800a911
 800a84c:	0800a91b 	.word	0x0800a91b
 800a850:	0800a925 	.word	0x0800a925
 800a854:	0800a92f 	.word	0x0800a92f
 800a858:	0800a939 	.word	0x0800a939
 800a85c:	0800a943 	.word	0x0800a943
 800a860:	0800a94d 	.word	0x0800a94d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800a86a:	e0dc      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a872:	e0d8      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a87a:	e0d4      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a882:	e0d0      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a88a:	e0cc      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	687a      	ldr	r2, [r7, #4]
 800a890:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a892:	e0c8      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a89a:	e0c4      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	687a      	ldr	r2, [r7, #4]
 800a8a0:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800a8a2:	e0c0      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800a8aa:	e0bc      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a8b2:	e0b8      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a8ba:	e0b4      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800a8c2:	e0b0      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800a8ca:	e0ac      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	687a      	ldr	r2, [r7, #4]
 800a8d0:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800a8d2:	e0a8      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	687a      	ldr	r2, [r7, #4]
 800a8d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800a8dc:	e0a3      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800a8e6:	e09e      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	687a      	ldr	r2, [r7, #4]
 800a8ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800a8f0:	e099      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800a8fa:	e094      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 800a904:	e08f      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800a90e:	e08a      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 800a918:	e085      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800a922:	e080      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 800a92c:	e07b      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 800a936:	e076      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 800a940:	e071      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800a94a:	e06c      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 800a954:	e067      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a956:	2301      	movs	r3, #1
 800a958:	75fb      	strb	r3, [r7, #23]
        break;
 800a95a:	e064      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a962:	b2db      	uxtb	r3, r3
 800a964:	2b00      	cmp	r3, #0
 800a966:	d15c      	bne.n	800aa22 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 800a968:	7afb      	ldrb	r3, [r7, #11]
 800a96a:	2b0d      	cmp	r3, #13
 800a96c:	d856      	bhi.n	800aa1c <HAL_TIM_RegisterCallback+0x274>
 800a96e:	a201      	add	r2, pc, #4	; (adr r2, 800a974 <HAL_TIM_RegisterCallback+0x1cc>)
 800a970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a974:	0800a9ad 	.word	0x0800a9ad
 800a978:	0800a9b5 	.word	0x0800a9b5
 800a97c:	0800a9bd 	.word	0x0800a9bd
 800a980:	0800a9c5 	.word	0x0800a9c5
 800a984:	0800a9cd 	.word	0x0800a9cd
 800a988:	0800a9d5 	.word	0x0800a9d5
 800a98c:	0800a9dd 	.word	0x0800a9dd
 800a990:	0800a9e5 	.word	0x0800a9e5
 800a994:	0800a9ed 	.word	0x0800a9ed
 800a998:	0800a9f5 	.word	0x0800a9f5
 800a99c:	0800a9fd 	.word	0x0800a9fd
 800a9a0:	0800aa05 	.word	0x0800aa05
 800a9a4:	0800aa0d 	.word	0x0800aa0d
 800a9a8:	0800aa15 	.word	0x0800aa15
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800a9b2:	e038      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a9ba:	e034      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	687a      	ldr	r2, [r7, #4]
 800a9c0:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a9c2:	e030      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a9ca:	e02c      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a9d2:	e028      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a9da:	e024      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	687a      	ldr	r2, [r7, #4]
 800a9e0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a9e2:	e020      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800a9ea:	e01c      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800a9f2:	e018      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a9fa:	e014      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800aa02:	e010      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800aa0a:	e00c      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800aa12:	e008      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800aa1a:	e004      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	75fb      	strb	r3, [r7, #23]
        break;
 800aa20:	e001      	b.n	800aa26 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800aa22:	2301      	movs	r3, #1
 800aa24:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aa2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	371c      	adds	r7, #28
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr

0800aa3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b085      	sub	sp, #20
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	4a34      	ldr	r2, [pc, #208]	; (800ab20 <TIM_Base_SetConfig+0xe4>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d00f      	beq.n	800aa74 <TIM_Base_SetConfig+0x38>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa5a:	d00b      	beq.n	800aa74 <TIM_Base_SetConfig+0x38>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	4a31      	ldr	r2, [pc, #196]	; (800ab24 <TIM_Base_SetConfig+0xe8>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d007      	beq.n	800aa74 <TIM_Base_SetConfig+0x38>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	4a30      	ldr	r2, [pc, #192]	; (800ab28 <TIM_Base_SetConfig+0xec>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d003      	beq.n	800aa74 <TIM_Base_SetConfig+0x38>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	4a2f      	ldr	r2, [pc, #188]	; (800ab2c <TIM_Base_SetConfig+0xf0>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d108      	bne.n	800aa86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	4313      	orrs	r3, r2
 800aa84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	4a25      	ldr	r2, [pc, #148]	; (800ab20 <TIM_Base_SetConfig+0xe4>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d01b      	beq.n	800aac6 <TIM_Base_SetConfig+0x8a>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa94:	d017      	beq.n	800aac6 <TIM_Base_SetConfig+0x8a>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	4a22      	ldr	r2, [pc, #136]	; (800ab24 <TIM_Base_SetConfig+0xe8>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d013      	beq.n	800aac6 <TIM_Base_SetConfig+0x8a>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	4a21      	ldr	r2, [pc, #132]	; (800ab28 <TIM_Base_SetConfig+0xec>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d00f      	beq.n	800aac6 <TIM_Base_SetConfig+0x8a>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4a20      	ldr	r2, [pc, #128]	; (800ab2c <TIM_Base_SetConfig+0xf0>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d00b      	beq.n	800aac6 <TIM_Base_SetConfig+0x8a>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	4a1f      	ldr	r2, [pc, #124]	; (800ab30 <TIM_Base_SetConfig+0xf4>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d007      	beq.n	800aac6 <TIM_Base_SetConfig+0x8a>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	4a1e      	ldr	r2, [pc, #120]	; (800ab34 <TIM_Base_SetConfig+0xf8>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d003      	beq.n	800aac6 <TIM_Base_SetConfig+0x8a>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	4a1d      	ldr	r2, [pc, #116]	; (800ab38 <TIM_Base_SetConfig+0xfc>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d108      	bne.n	800aad8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aacc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	68db      	ldr	r3, [r3, #12]
 800aad2:	68fa      	ldr	r2, [r7, #12]
 800aad4:	4313      	orrs	r3, r2
 800aad6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	695b      	ldr	r3, [r3, #20]
 800aae2:	4313      	orrs	r3, r2
 800aae4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	68fa      	ldr	r2, [r7, #12]
 800aaea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	689a      	ldr	r2, [r3, #8]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	4a08      	ldr	r2, [pc, #32]	; (800ab20 <TIM_Base_SetConfig+0xe4>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d103      	bne.n	800ab0c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	691a      	ldr	r2, [r3, #16]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2201      	movs	r2, #1
 800ab10:	615a      	str	r2, [r3, #20]
}
 800ab12:	bf00      	nop
 800ab14:	3714      	adds	r7, #20
 800ab16:	46bd      	mov	sp, r7
 800ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1c:	4770      	bx	lr
 800ab1e:	bf00      	nop
 800ab20:	40010000 	.word	0x40010000
 800ab24:	40000400 	.word	0x40000400
 800ab28:	40000800 	.word	0x40000800
 800ab2c:	40000c00 	.word	0x40000c00
 800ab30:	40014000 	.word	0x40014000
 800ab34:	40014400 	.word	0x40014400
 800ab38:	40014800 	.word	0x40014800

0800ab3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b087      	sub	sp, #28
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6a1b      	ldr	r3, [r3, #32]
 800ab4a:	f023 0201 	bic.w	r2, r3, #1
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6a1b      	ldr	r3, [r3, #32]
 800ab56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	699b      	ldr	r3, [r3, #24]
 800ab62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f023 0303 	bic.w	r3, r3, #3
 800ab72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	f023 0302 	bic.w	r3, r3, #2
 800ab84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	689b      	ldr	r3, [r3, #8]
 800ab8a:	697a      	ldr	r2, [r7, #20]
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	4a1c      	ldr	r2, [pc, #112]	; (800ac04 <TIM_OC1_SetConfig+0xc8>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d10c      	bne.n	800abb2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	f023 0308 	bic.w	r3, r3, #8
 800ab9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	68db      	ldr	r3, [r3, #12]
 800aba4:	697a      	ldr	r2, [r7, #20]
 800aba6:	4313      	orrs	r3, r2
 800aba8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	f023 0304 	bic.w	r3, r3, #4
 800abb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	4a13      	ldr	r2, [pc, #76]	; (800ac04 <TIM_OC1_SetConfig+0xc8>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d111      	bne.n	800abde <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800abc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	695b      	ldr	r3, [r3, #20]
 800abce:	693a      	ldr	r2, [r7, #16]
 800abd0:	4313      	orrs	r3, r2
 800abd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	699b      	ldr	r3, [r3, #24]
 800abd8:	693a      	ldr	r2, [r7, #16]
 800abda:	4313      	orrs	r3, r2
 800abdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	693a      	ldr	r2, [r7, #16]
 800abe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	685a      	ldr	r2, [r3, #4]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	697a      	ldr	r2, [r7, #20]
 800abf6:	621a      	str	r2, [r3, #32]
}
 800abf8:	bf00      	nop
 800abfa:	371c      	adds	r7, #28
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr
 800ac04:	40010000 	.word	0x40010000

0800ac08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b087      	sub	sp, #28
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6a1b      	ldr	r3, [r3, #32]
 800ac16:	f023 0210 	bic.w	r2, r3, #16
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6a1b      	ldr	r3, [r3, #32]
 800ac22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	699b      	ldr	r3, [r3, #24]
 800ac2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	021b      	lsls	r3, r3, #8
 800ac46:	68fa      	ldr	r2, [r7, #12]
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	f023 0320 	bic.w	r3, r3, #32
 800ac52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	689b      	ldr	r3, [r3, #8]
 800ac58:	011b      	lsls	r3, r3, #4
 800ac5a:	697a      	ldr	r2, [r7, #20]
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	4a1e      	ldr	r2, [pc, #120]	; (800acdc <TIM_OC2_SetConfig+0xd4>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d10d      	bne.n	800ac84 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	68db      	ldr	r3, [r3, #12]
 800ac74:	011b      	lsls	r3, r3, #4
 800ac76:	697a      	ldr	r2, [r7, #20]
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	4a15      	ldr	r2, [pc, #84]	; (800acdc <TIM_OC2_SetConfig+0xd4>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d113      	bne.n	800acb4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ac92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ac9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	695b      	ldr	r3, [r3, #20]
 800aca0:	009b      	lsls	r3, r3, #2
 800aca2:	693a      	ldr	r2, [r7, #16]
 800aca4:	4313      	orrs	r3, r2
 800aca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	699b      	ldr	r3, [r3, #24]
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	693a      	ldr	r2, [r7, #16]
 800acb0:	4313      	orrs	r3, r2
 800acb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	693a      	ldr	r2, [r7, #16]
 800acb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	68fa      	ldr	r2, [r7, #12]
 800acbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	685a      	ldr	r2, [r3, #4]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	697a      	ldr	r2, [r7, #20]
 800accc:	621a      	str	r2, [r3, #32]
}
 800acce:	bf00      	nop
 800acd0:	371c      	adds	r7, #28
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr
 800acda:	bf00      	nop
 800acdc:	40010000 	.word	0x40010000

0800ace0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b087      	sub	sp, #28
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6a1b      	ldr	r3, [r3, #32]
 800acee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6a1b      	ldr	r3, [r3, #32]
 800acfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	69db      	ldr	r3, [r3, #28]
 800ad06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f023 0303 	bic.w	r3, r3, #3
 800ad16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	68fa      	ldr	r2, [r7, #12]
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ad28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	021b      	lsls	r3, r3, #8
 800ad30:	697a      	ldr	r2, [r7, #20]
 800ad32:	4313      	orrs	r3, r2
 800ad34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	4a1d      	ldr	r2, [pc, #116]	; (800adb0 <TIM_OC3_SetConfig+0xd0>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d10d      	bne.n	800ad5a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ad44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	68db      	ldr	r3, [r3, #12]
 800ad4a:	021b      	lsls	r3, r3, #8
 800ad4c:	697a      	ldr	r2, [r7, #20]
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ad58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	4a14      	ldr	r2, [pc, #80]	; (800adb0 <TIM_OC3_SetConfig+0xd0>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d113      	bne.n	800ad8a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ad70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	695b      	ldr	r3, [r3, #20]
 800ad76:	011b      	lsls	r3, r3, #4
 800ad78:	693a      	ldr	r2, [r7, #16]
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	699b      	ldr	r3, [r3, #24]
 800ad82:	011b      	lsls	r3, r3, #4
 800ad84:	693a      	ldr	r2, [r7, #16]
 800ad86:	4313      	orrs	r3, r2
 800ad88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	693a      	ldr	r2, [r7, #16]
 800ad8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	68fa      	ldr	r2, [r7, #12]
 800ad94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	685a      	ldr	r2, [r3, #4]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	697a      	ldr	r2, [r7, #20]
 800ada2:	621a      	str	r2, [r3, #32]
}
 800ada4:	bf00      	nop
 800ada6:	371c      	adds	r7, #28
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr
 800adb0:	40010000 	.word	0x40010000

0800adb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b087      	sub	sp, #28
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6a1b      	ldr	r3, [r3, #32]
 800adc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6a1b      	ldr	r3, [r3, #32]
 800adce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	69db      	ldr	r3, [r3, #28]
 800adda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ade2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800adea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	021b      	lsls	r3, r3, #8
 800adf2:	68fa      	ldr	r2, [r7, #12]
 800adf4:	4313      	orrs	r3, r2
 800adf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800adfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	689b      	ldr	r3, [r3, #8]
 800ae04:	031b      	lsls	r3, r3, #12
 800ae06:	693a      	ldr	r2, [r7, #16]
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	4a10      	ldr	r2, [pc, #64]	; (800ae50 <TIM_OC4_SetConfig+0x9c>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d109      	bne.n	800ae28 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	695b      	ldr	r3, [r3, #20]
 800ae20:	019b      	lsls	r3, r3, #6
 800ae22:	697a      	ldr	r2, [r7, #20]
 800ae24:	4313      	orrs	r3, r2
 800ae26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	697a      	ldr	r2, [r7, #20]
 800ae2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	68fa      	ldr	r2, [r7, #12]
 800ae32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	685a      	ldr	r2, [r3, #4]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	693a      	ldr	r2, [r7, #16]
 800ae40:	621a      	str	r2, [r3, #32]
}
 800ae42:	bf00      	nop
 800ae44:	371c      	adds	r7, #28
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop
 800ae50:	40010000 	.word	0x40010000

0800ae54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b087      	sub	sp, #28
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	60b9      	str	r1, [r7, #8]
 800ae5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	6a1b      	ldr	r3, [r3, #32]
 800ae64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	6a1b      	ldr	r3, [r3, #32]
 800ae6a:	f023 0201 	bic.w	r2, r3, #1
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	699b      	ldr	r3, [r3, #24]
 800ae76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	011b      	lsls	r3, r3, #4
 800ae84:	693a      	ldr	r2, [r7, #16]
 800ae86:	4313      	orrs	r3, r2
 800ae88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	f023 030a 	bic.w	r3, r3, #10
 800ae90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ae92:	697a      	ldr	r2, [r7, #20]
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	4313      	orrs	r3, r2
 800ae98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	693a      	ldr	r2, [r7, #16]
 800ae9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	697a      	ldr	r2, [r7, #20]
 800aea4:	621a      	str	r2, [r3, #32]
}
 800aea6:	bf00      	nop
 800aea8:	371c      	adds	r7, #28
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb0:	4770      	bx	lr

0800aeb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aeb2:	b480      	push	{r7}
 800aeb4:	b087      	sub	sp, #28
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	60f8      	str	r0, [r7, #12]
 800aeba:	60b9      	str	r1, [r7, #8]
 800aebc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	6a1b      	ldr	r3, [r3, #32]
 800aec2:	f023 0210 	bic.w	r2, r3, #16
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	699b      	ldr	r3, [r3, #24]
 800aece:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	6a1b      	ldr	r3, [r3, #32]
 800aed4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aedc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	031b      	lsls	r3, r3, #12
 800aee2:	697a      	ldr	r2, [r7, #20]
 800aee4:	4313      	orrs	r3, r2
 800aee6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aeee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	011b      	lsls	r3, r3, #4
 800aef4:	693a      	ldr	r2, [r7, #16]
 800aef6:	4313      	orrs	r3, r2
 800aef8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	697a      	ldr	r2, [r7, #20]
 800aefe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	693a      	ldr	r2, [r7, #16]
 800af04:	621a      	str	r2, [r3, #32]
}
 800af06:	bf00      	nop
 800af08:	371c      	adds	r7, #28
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr

0800af12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af12:	b480      	push	{r7}
 800af14:	b085      	sub	sp, #20
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
 800af1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af2a:	683a      	ldr	r2, [r7, #0]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	4313      	orrs	r3, r2
 800af30:	f043 0307 	orr.w	r3, r3, #7
 800af34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	68fa      	ldr	r2, [r7, #12]
 800af3a:	609a      	str	r2, [r3, #8]
}
 800af3c:	bf00      	nop
 800af3e:	3714      	adds	r7, #20
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr

0800af48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af48:	b480      	push	{r7}
 800af4a:	b087      	sub	sp, #28
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	607a      	str	r2, [r7, #4]
 800af54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	689b      	ldr	r3, [r3, #8]
 800af5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	021a      	lsls	r2, r3, #8
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	431a      	orrs	r2, r3
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	4313      	orrs	r3, r2
 800af70:	697a      	ldr	r2, [r7, #20]
 800af72:	4313      	orrs	r3, r2
 800af74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	697a      	ldr	r2, [r7, #20]
 800af7a:	609a      	str	r2, [r3, #8]
}
 800af7c:	bf00      	nop
 800af7e:	371c      	adds	r7, #28
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr

0800af88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800af88:	b480      	push	{r7}
 800af8a:	b087      	sub	sp, #28
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	f003 031f 	and.w	r3, r3, #31
 800af9a:	2201      	movs	r2, #1
 800af9c:	fa02 f303 	lsl.w	r3, r2, r3
 800afa0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	6a1a      	ldr	r2, [r3, #32]
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	43db      	mvns	r3, r3
 800afaa:	401a      	ands	r2, r3
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	6a1a      	ldr	r2, [r3, #32]
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	f003 031f 	and.w	r3, r3, #31
 800afba:	6879      	ldr	r1, [r7, #4]
 800afbc:	fa01 f303 	lsl.w	r3, r1, r3
 800afc0:	431a      	orrs	r2, r3
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	621a      	str	r2, [r3, #32]
}
 800afc6:	bf00      	nop
 800afc8:	371c      	adds	r7, #28
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr
	...

0800afd4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	4a1c      	ldr	r2, [pc, #112]	; (800b050 <TIM_ResetCallback+0x7c>)
 800afe0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	4a1b      	ldr	r2, [pc, #108]	; (800b054 <TIM_ResetCallback+0x80>)
 800afe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	4a1a      	ldr	r2, [pc, #104]	; (800b058 <TIM_ResetCallback+0x84>)
 800aff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	4a19      	ldr	r2, [pc, #100]	; (800b05c <TIM_ResetCallback+0x88>)
 800aff8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	4a18      	ldr	r2, [pc, #96]	; (800b060 <TIM_ResetCallback+0x8c>)
 800b000:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	4a17      	ldr	r2, [pc, #92]	; (800b064 <TIM_ResetCallback+0x90>)
 800b008:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	4a16      	ldr	r2, [pc, #88]	; (800b068 <TIM_ResetCallback+0x94>)
 800b010:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	4a15      	ldr	r2, [pc, #84]	; (800b06c <TIM_ResetCallback+0x98>)
 800b018:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	4a14      	ldr	r2, [pc, #80]	; (800b070 <TIM_ResetCallback+0x9c>)
 800b020:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	4a13      	ldr	r2, [pc, #76]	; (800b074 <TIM_ResetCallback+0xa0>)
 800b028:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	4a12      	ldr	r2, [pc, #72]	; (800b078 <TIM_ResetCallback+0xa4>)
 800b030:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	4a11      	ldr	r2, [pc, #68]	; (800b07c <TIM_ResetCallback+0xa8>)
 800b038:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	4a10      	ldr	r2, [pc, #64]	; (800b080 <TIM_ResetCallback+0xac>)
 800b040:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800b044:	bf00      	nop
 800b046:	370c      	adds	r7, #12
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr
 800b050:	08003f49 	.word	0x08003f49
 800b054:	0800a6f3 	.word	0x0800a6f3
 800b058:	0800a76b 	.word	0x0800a76b
 800b05c:	0800a77f 	.word	0x0800a77f
 800b060:	0800a71b 	.word	0x0800a71b
 800b064:	0800a72f 	.word	0x0800a72f
 800b068:	0800a707 	.word	0x0800a707
 800b06c:	0800a743 	.word	0x0800a743
 800b070:	0800a757 	.word	0x0800a757
 800b074:	0800a793 	.word	0x0800a793
 800b078:	0800b161 	.word	0x0800b161
 800b07c:	0800b175 	.word	0x0800b175
 800b080:	0800b189 	.word	0x0800b189

0800b084 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b084:	b480      	push	{r7}
 800b086:	b085      	sub	sp, #20
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b094:	2b01      	cmp	r3, #1
 800b096:	d101      	bne.n	800b09c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b098:	2302      	movs	r3, #2
 800b09a:	e050      	b.n	800b13e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2201      	movs	r2, #1
 800b0a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2202      	movs	r2, #2
 800b0a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	689b      	ldr	r3, [r3, #8]
 800b0ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	68fa      	ldr	r2, [r7, #12]
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	68fa      	ldr	r2, [r7, #12]
 800b0d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	4a1c      	ldr	r2, [pc, #112]	; (800b14c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	d018      	beq.n	800b112 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0e8:	d013      	beq.n	800b112 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4a18      	ldr	r2, [pc, #96]	; (800b150 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d00e      	beq.n	800b112 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	4a16      	ldr	r2, [pc, #88]	; (800b154 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d009      	beq.n	800b112 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4a15      	ldr	r2, [pc, #84]	; (800b158 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d004      	beq.n	800b112 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4a13      	ldr	r2, [pc, #76]	; (800b15c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d10c      	bne.n	800b12c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b118:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	68ba      	ldr	r2, [r7, #8]
 800b120:	4313      	orrs	r3, r2
 800b122:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	68ba      	ldr	r2, [r7, #8]
 800b12a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2201      	movs	r2, #1
 800b130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2200      	movs	r2, #0
 800b138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b13c:	2300      	movs	r3, #0
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3714      	adds	r7, #20
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr
 800b14a:	bf00      	nop
 800b14c:	40010000 	.word	0x40010000
 800b150:	40000400 	.word	0x40000400
 800b154:	40000800 	.word	0x40000800
 800b158:	40000c00 	.word	0x40000c00
 800b15c:	40014000 	.word	0x40014000

0800b160 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b160:	b480      	push	{r7}
 800b162:	b083      	sub	sp, #12
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b168:	bf00      	nop
 800b16a:	370c      	adds	r7, #12
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr

0800b174 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b174:	b480      	push	{r7}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800b17c:	bf00      	nop
 800b17e:	370c      	adds	r7, #12
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b188:	b480      	push	{r7}
 800b18a:	b083      	sub	sp, #12
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b190:	bf00      	nop
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b082      	sub	sp, #8
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d101      	bne.n	800b1ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	e04a      	b.n	800b244 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1b4:	b2db      	uxtb	r3, r3
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d111      	bne.n	800b1de <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f000 fd2c 	bl	800bc20 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d102      	bne.n	800b1d6 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	4a1e      	ldr	r2, [pc, #120]	; (800b24c <HAL_UART_Init+0xb0>)
 800b1d4:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2224      	movs	r2, #36	; 0x24
 800b1e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	68da      	ldr	r2, [r3, #12]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b1f4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 fff6 	bl	800c1e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	691a      	ldr	r2, [r3, #16]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b20a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	695a      	ldr	r2, [r3, #20]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b21a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	68da      	ldr	r2, [r3, #12]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b22a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2220      	movs	r2, #32
 800b236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2220      	movs	r2, #32
 800b23e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b242:	2300      	movs	r3, #0
}
 800b244:	4618      	mov	r0, r3
 800b246:	3708      	adds	r7, #8
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}
 800b24c:	080049bd 	.word	0x080049bd

0800b250 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800b250:	b480      	push	{r7}
 800b252:	b087      	sub	sp, #28
 800b254:	af00      	add	r7, sp, #0
 800b256:	60f8      	str	r0, [r7, #12]
 800b258:	460b      	mov	r3, r1
 800b25a:	607a      	str	r2, [r7, #4]
 800b25c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b25e:	2300      	movs	r3, #0
 800b260:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d107      	bne.n	800b278 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b26c:	f043 0220 	orr.w	r2, r3, #32
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b274:	2301      	movs	r3, #1
 800b276:	e08c      	b.n	800b392 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d101      	bne.n	800b286 <HAL_UART_RegisterCallback+0x36>
 800b282:	2302      	movs	r3, #2
 800b284:	e085      	b.n	800b392 <HAL_UART_RegisterCallback+0x142>
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2201      	movs	r2, #1
 800b28a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b294:	b2db      	uxtb	r3, r3
 800b296:	2b20      	cmp	r3, #32
 800b298:	d151      	bne.n	800b33e <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800b29a:	7afb      	ldrb	r3, [r7, #11]
 800b29c:	2b0c      	cmp	r3, #12
 800b29e:	d845      	bhi.n	800b32c <HAL_UART_RegisterCallback+0xdc>
 800b2a0:	a201      	add	r2, pc, #4	; (adr r2, 800b2a8 <HAL_UART_RegisterCallback+0x58>)
 800b2a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2a6:	bf00      	nop
 800b2a8:	0800b2dd 	.word	0x0800b2dd
 800b2ac:	0800b2e5 	.word	0x0800b2e5
 800b2b0:	0800b2ed 	.word	0x0800b2ed
 800b2b4:	0800b2f5 	.word	0x0800b2f5
 800b2b8:	0800b2fd 	.word	0x0800b2fd
 800b2bc:	0800b305 	.word	0x0800b305
 800b2c0:	0800b30d 	.word	0x0800b30d
 800b2c4:	0800b315 	.word	0x0800b315
 800b2c8:	0800b32d 	.word	0x0800b32d
 800b2cc:	0800b32d 	.word	0x0800b32d
 800b2d0:	0800b32d 	.word	0x0800b32d
 800b2d4:	0800b31d 	.word	0x0800b31d
 800b2d8:	0800b325 	.word	0x0800b325
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	687a      	ldr	r2, [r7, #4]
 800b2e0:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800b2e2:	e051      	b.n	800b388 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800b2ea:	e04d      	b.n	800b388 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800b2f2:	e049      	b.n	800b388 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	687a      	ldr	r2, [r7, #4]
 800b2f8:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800b2fa:	e045      	b.n	800b388 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	687a      	ldr	r2, [r7, #4]
 800b300:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800b302:	e041      	b.n	800b388 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800b30a:	e03d      	b.n	800b388 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800b312:	e039      	b.n	800b388 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800b31a:	e035      	b.n	800b388 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	687a      	ldr	r2, [r7, #4]
 800b320:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800b322:	e031      	b.n	800b388 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800b32a:	e02d      	b.n	800b388 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b330:	f043 0220 	orr.w	r2, r3, #32
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800b338:	2301      	movs	r3, #1
 800b33a:	75fb      	strb	r3, [r7, #23]
        break;
 800b33c:	e024      	b.n	800b388 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b344:	b2db      	uxtb	r3, r3
 800b346:	2b00      	cmp	r3, #0
 800b348:	d116      	bne.n	800b378 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800b34a:	7afb      	ldrb	r3, [r7, #11]
 800b34c:	2b0b      	cmp	r3, #11
 800b34e:	d002      	beq.n	800b356 <HAL_UART_RegisterCallback+0x106>
 800b350:	2b0c      	cmp	r3, #12
 800b352:	d004      	beq.n	800b35e <HAL_UART_RegisterCallback+0x10e>
 800b354:	e007      	b.n	800b366 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800b35c:	e014      	b.n	800b388 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800b364:	e010      	b.n	800b388 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b36a:	f043 0220 	orr.w	r2, r3, #32
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800b372:	2301      	movs	r3, #1
 800b374:	75fb      	strb	r3, [r7, #23]
        break;
 800b376:	e007      	b.n	800b388 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b37c:	f043 0220 	orr.w	r2, r3, #32
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800b384:	2301      	movs	r3, #1
 800b386:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2200      	movs	r2, #0
 800b38c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b390:	7dfb      	ldrb	r3, [r7, #23]
}
 800b392:	4618      	mov	r0, r3
 800b394:	371c      	adds	r7, #28
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr
 800b39e:	bf00      	nop

0800b3a0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b084      	sub	sp, #16
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	60b9      	str	r1, [r7, #8]
 800b3aa:	4613      	mov	r3, r2
 800b3ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b3b4:	b2db      	uxtb	r3, r3
 800b3b6:	2b20      	cmp	r3, #32
 800b3b8:	d11d      	bne.n	800b3f6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d002      	beq.n	800b3c6 <HAL_UART_Receive_IT+0x26>
 800b3c0:	88fb      	ldrh	r3, [r7, #6]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d101      	bne.n	800b3ca <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	e016      	b.n	800b3f8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	d101      	bne.n	800b3d8 <HAL_UART_Receive_IT+0x38>
 800b3d4:	2302      	movs	r3, #2
 800b3d6:	e00f      	b.n	800b3f8 <HAL_UART_Receive_IT+0x58>
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2201      	movs	r2, #1
 800b3dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b3e6:	88fb      	ldrh	r3, [r7, #6]
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	68b9      	ldr	r1, [r7, #8]
 800b3ec:	68f8      	ldr	r0, [r7, #12]
 800b3ee:	f000 fcf7 	bl	800bde0 <UART_Start_Receive_IT>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	e000      	b.n	800b3f8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b3f6:	2302      	movs	r3, #2
  }
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3710      	adds	r7, #16
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b08c      	sub	sp, #48	; 0x30
 800b404:	af00      	add	r7, sp, #0
 800b406:	60f8      	str	r0, [r7, #12]
 800b408:	60b9      	str	r1, [r7, #8]
 800b40a:	4613      	mov	r3, r2
 800b40c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b414:	b2db      	uxtb	r3, r3
 800b416:	2b20      	cmp	r3, #32
 800b418:	d165      	bne.n	800b4e6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d002      	beq.n	800b426 <HAL_UART_Transmit_DMA+0x26>
 800b420:	88fb      	ldrh	r3, [r7, #6]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d101      	bne.n	800b42a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b426:	2301      	movs	r3, #1
 800b428:	e05e      	b.n	800b4e8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b430:	2b01      	cmp	r3, #1
 800b432:	d101      	bne.n	800b438 <HAL_UART_Transmit_DMA+0x38>
 800b434:	2302      	movs	r3, #2
 800b436:	e057      	b.n	800b4e8 <HAL_UART_Transmit_DMA+0xe8>
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2201      	movs	r2, #1
 800b43c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800b440:	68ba      	ldr	r2, [r7, #8]
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	88fa      	ldrh	r2, [r7, #6]
 800b44a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	88fa      	ldrh	r2, [r7, #6]
 800b450:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2200      	movs	r2, #0
 800b456:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2221      	movs	r2, #33	; 0x21
 800b45c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b464:	4a22      	ldr	r2, [pc, #136]	; (800b4f0 <HAL_UART_Transmit_DMA+0xf0>)
 800b466:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b46c:	4a21      	ldr	r2, [pc, #132]	; (800b4f4 <HAL_UART_Transmit_DMA+0xf4>)
 800b46e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b474:	4a20      	ldr	r2, [pc, #128]	; (800b4f8 <HAL_UART_Transmit_DMA+0xf8>)
 800b476:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b47c:	2200      	movs	r2, #0
 800b47e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800b480:	f107 0308 	add.w	r3, r7, #8
 800b484:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b48c:	6819      	ldr	r1, [r3, #0]
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	3304      	adds	r3, #4
 800b494:	461a      	mov	r2, r3
 800b496:	88fb      	ldrh	r3, [r7, #6]
 800b498:	f7fb f88c 	bl	80065b4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b4a4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	3314      	adds	r3, #20
 800b4b4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b6:	69bb      	ldr	r3, [r7, #24]
 800b4b8:	e853 3f00 	ldrex	r3, [r3]
 800b4bc:	617b      	str	r3, [r7, #20]
   return(result);
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	3314      	adds	r3, #20
 800b4cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4ce:	627a      	str	r2, [r7, #36]	; 0x24
 800b4d0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d2:	6a39      	ldr	r1, [r7, #32]
 800b4d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4d6:	e841 2300 	strex	r3, r2, [r1]
 800b4da:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4dc:	69fb      	ldr	r3, [r7, #28]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d1e5      	bne.n	800b4ae <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	e000      	b.n	800b4e8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800b4e6:	2302      	movs	r3, #2
  }
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3730      	adds	r7, #48	; 0x30
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}
 800b4f0:	0800bc91 	.word	0x0800bc91
 800b4f4:	0800bd2d 	.word	0x0800bd2d
 800b4f8:	0800bd4b 	.word	0x0800bd4b

0800b4fc <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b09a      	sub	sp, #104	; 0x68
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	330c      	adds	r3, #12
 800b50a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b50c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b50e:	e853 3f00 	ldrex	r3, [r3]
 800b512:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b516:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b51a:	667b      	str	r3, [r7, #100]	; 0x64
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	330c      	adds	r3, #12
 800b522:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b524:	657a      	str	r2, [r7, #84]	; 0x54
 800b526:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b528:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b52a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b52c:	e841 2300 	strex	r3, r2, [r1]
 800b530:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b534:	2b00      	cmp	r3, #0
 800b536:	d1e5      	bne.n	800b504 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	3314      	adds	r3, #20
 800b53e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b542:	e853 3f00 	ldrex	r3, [r3]
 800b546:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b54a:	f023 0301 	bic.w	r3, r3, #1
 800b54e:	663b      	str	r3, [r7, #96]	; 0x60
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	3314      	adds	r3, #20
 800b556:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b558:	643a      	str	r2, [r7, #64]	; 0x40
 800b55a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b55c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b55e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b560:	e841 2300 	strex	r3, r2, [r1]
 800b564:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d1e5      	bne.n	800b538 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b570:	2b01      	cmp	r3, #1
 800b572:	d119      	bne.n	800b5a8 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	330c      	adds	r3, #12
 800b57a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b57c:	6a3b      	ldr	r3, [r7, #32]
 800b57e:	e853 3f00 	ldrex	r3, [r3]
 800b582:	61fb      	str	r3, [r7, #28]
   return(result);
 800b584:	69fb      	ldr	r3, [r7, #28]
 800b586:	f023 0310 	bic.w	r3, r3, #16
 800b58a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	330c      	adds	r3, #12
 800b592:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b594:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b596:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b598:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b59a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b59c:	e841 2300 	strex	r3, r2, [r1]
 800b5a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d1e5      	bne.n	800b574 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	695b      	ldr	r3, [r3, #20]
 800b5ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5b2:	2b40      	cmp	r3, #64	; 0x40
 800b5b4:	d136      	bne.n	800b624 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	3314      	adds	r3, #20
 800b5bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	e853 3f00 	ldrex	r3, [r3]
 800b5c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5cc:	65bb      	str	r3, [r7, #88]	; 0x58
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	3314      	adds	r3, #20
 800b5d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b5d6:	61ba      	str	r2, [r7, #24]
 800b5d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5da:	6979      	ldr	r1, [r7, #20]
 800b5dc:	69ba      	ldr	r2, [r7, #24]
 800b5de:	e841 2300 	strex	r3, r2, [r1]
 800b5e2:	613b      	str	r3, [r7, #16]
   return(result);
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d1e5      	bne.n	800b5b6 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d018      	beq.n	800b624 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7fb f830 	bl	8006664 <HAL_DMA_Abort>
 800b604:	4603      	mov	r3, r0
 800b606:	2b00      	cmp	r3, #0
 800b608:	d00c      	beq.n	800b624 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b60e:	4618      	mov	r0, r3
 800b610:	f7fb fa52 	bl	8006ab8 <HAL_DMA_GetError>
 800b614:	4603      	mov	r3, r0
 800b616:	2b20      	cmp	r3, #32
 800b618:	d104      	bne.n	800b624 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2210      	movs	r2, #16
 800b61e:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800b620:	2303      	movs	r3, #3
 800b622:	e00a      	b.n	800b63a <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2220      	movs	r2, #32
 800b62e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2200      	movs	r2, #0
 800b636:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800b638:	2300      	movs	r3, #0
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3768      	adds	r7, #104	; 0x68
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
	...

0800b644 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b0ba      	sub	sp, #232	; 0xe8
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	68db      	ldr	r3, [r3, #12]
 800b65c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	695b      	ldr	r3, [r3, #20]
 800b666:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b66a:	2300      	movs	r3, #0
 800b66c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b670:	2300      	movs	r3, #0
 800b672:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b67a:	f003 030f 	and.w	r3, r3, #15
 800b67e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b682:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b686:	2b00      	cmp	r3, #0
 800b688:	d10f      	bne.n	800b6aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b68a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b68e:	f003 0320 	and.w	r3, r3, #32
 800b692:	2b00      	cmp	r3, #0
 800b694:	d009      	beq.n	800b6aa <HAL_UART_IRQHandler+0x66>
 800b696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b69a:	f003 0320 	and.w	r3, r3, #32
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d003      	beq.n	800b6aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f000 fce3 	bl	800c06e <UART_Receive_IT>
      return;
 800b6a8:	e25b      	b.n	800bb62 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b6aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	f000 80e1 	beq.w	800b876 <HAL_UART_IRQHandler+0x232>
 800b6b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6b8:	f003 0301 	and.w	r3, r3, #1
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d106      	bne.n	800b6ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b6c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	f000 80d4 	beq.w	800b876 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b6ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6d2:	f003 0301 	and.w	r3, r3, #1
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d00b      	beq.n	800b6f2 <HAL_UART_IRQHandler+0xae>
 800b6da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d005      	beq.n	800b6f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ea:	f043 0201 	orr.w	r2, r3, #1
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b6f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6f6:	f003 0304 	and.w	r3, r3, #4
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d00b      	beq.n	800b716 <HAL_UART_IRQHandler+0xd2>
 800b6fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b702:	f003 0301 	and.w	r3, r3, #1
 800b706:	2b00      	cmp	r3, #0
 800b708:	d005      	beq.n	800b716 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b70e:	f043 0202 	orr.w	r2, r3, #2
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b71a:	f003 0302 	and.w	r3, r3, #2
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d00b      	beq.n	800b73a <HAL_UART_IRQHandler+0xf6>
 800b722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b726:	f003 0301 	and.w	r3, r3, #1
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d005      	beq.n	800b73a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b732:	f043 0204 	orr.w	r2, r3, #4
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b73a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b73e:	f003 0308 	and.w	r3, r3, #8
 800b742:	2b00      	cmp	r3, #0
 800b744:	d011      	beq.n	800b76a <HAL_UART_IRQHandler+0x126>
 800b746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b74a:	f003 0320 	and.w	r3, r3, #32
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d105      	bne.n	800b75e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b752:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b756:	f003 0301 	and.w	r3, r3, #1
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d005      	beq.n	800b76a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b762:	f043 0208 	orr.w	r2, r3, #8
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b76e:	2b00      	cmp	r3, #0
 800b770:	f000 81f2 	beq.w	800bb58 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b778:	f003 0320 	and.w	r3, r3, #32
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d008      	beq.n	800b792 <HAL_UART_IRQHandler+0x14e>
 800b780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b784:	f003 0320 	and.w	r3, r3, #32
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d002      	beq.n	800b792 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 fc6e 	bl	800c06e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	695b      	ldr	r3, [r3, #20]
 800b798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b79c:	2b40      	cmp	r3, #64	; 0x40
 800b79e:	bf0c      	ite	eq
 800b7a0:	2301      	moveq	r3, #1
 800b7a2:	2300      	movne	r3, #0
 800b7a4:	b2db      	uxtb	r3, r3
 800b7a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ae:	f003 0308 	and.w	r3, r3, #8
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d103      	bne.n	800b7be <HAL_UART_IRQHandler+0x17a>
 800b7b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d051      	beq.n	800b862 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 fb74 	bl	800beac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	695b      	ldr	r3, [r3, #20]
 800b7ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7ce:	2b40      	cmp	r3, #64	; 0x40
 800b7d0:	d142      	bne.n	800b858 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	3314      	adds	r3, #20
 800b7d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b7e0:	e853 3f00 	ldrex	r3, [r3]
 800b7e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b7e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b7ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	3314      	adds	r3, #20
 800b7fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b7fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b802:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b806:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b80a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b80e:	e841 2300 	strex	r3, r2, [r1]
 800b812:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b816:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d1d9      	bne.n	800b7d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b822:	2b00      	cmp	r3, #0
 800b824:	d013      	beq.n	800b84e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b82a:	4a7f      	ldr	r2, [pc, #508]	; (800ba28 <HAL_UART_IRQHandler+0x3e4>)
 800b82c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b832:	4618      	mov	r0, r3
 800b834:	f7fa ff86 	bl	8006744 <HAL_DMA_Abort_IT>
 800b838:	4603      	mov	r3, r0
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d019      	beq.n	800b872 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b848:	4610      	mov	r0, r2
 800b84a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b84c:	e011      	b.n	800b872 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b856:	e00c      	b.n	800b872 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b860:	e007      	b.n	800b872 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2200      	movs	r2, #0
 800b86e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b870:	e172      	b.n	800bb58 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b872:	bf00      	nop
    return;
 800b874:	e170      	b.n	800bb58 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b87a:	2b01      	cmp	r3, #1
 800b87c:	f040 814c 	bne.w	800bb18 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b884:	f003 0310 	and.w	r3, r3, #16
 800b888:	2b00      	cmp	r3, #0
 800b88a:	f000 8145 	beq.w	800bb18 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b88e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b892:	f003 0310 	and.w	r3, r3, #16
 800b896:	2b00      	cmp	r3, #0
 800b898:	f000 813e 	beq.w	800bb18 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b89c:	2300      	movs	r3, #0
 800b89e:	60bb      	str	r3, [r7, #8]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	60bb      	str	r3, [r7, #8]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	60bb      	str	r3, [r7, #8]
 800b8b0:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	695b      	ldr	r3, [r3, #20]
 800b8b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8bc:	2b40      	cmp	r3, #64	; 0x40
 800b8be:	f040 80b5 	bne.w	800ba2c <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	685b      	ldr	r3, [r3, #4]
 800b8ca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b8ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	f000 8142 	beq.w	800bb5c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b8dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	f080 813b 	bcs.w	800bb5c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b8ec:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8f2:	69db      	ldr	r3, [r3, #28]
 800b8f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8f8:	f000 8088 	beq.w	800ba0c <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	330c      	adds	r3, #12
 800b902:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b906:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b90a:	e853 3f00 	ldrex	r3, [r3]
 800b90e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b912:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b916:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b91a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	330c      	adds	r3, #12
 800b924:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b928:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b92c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b930:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b934:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b938:	e841 2300 	strex	r3, r2, [r1]
 800b93c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b940:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b944:	2b00      	cmp	r3, #0
 800b946:	d1d9      	bne.n	800b8fc <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	3314      	adds	r3, #20
 800b94e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b950:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b952:	e853 3f00 	ldrex	r3, [r3]
 800b956:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b958:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b95a:	f023 0301 	bic.w	r3, r3, #1
 800b95e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	3314      	adds	r3, #20
 800b968:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b96c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b970:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b972:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b974:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b978:	e841 2300 	strex	r3, r2, [r1]
 800b97c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b97e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b980:	2b00      	cmp	r3, #0
 800b982:	d1e1      	bne.n	800b948 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	3314      	adds	r3, #20
 800b98a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b98c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b98e:	e853 3f00 	ldrex	r3, [r3]
 800b992:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b99a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	3314      	adds	r3, #20
 800b9a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b9a8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b9aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b9ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b9b0:	e841 2300 	strex	r3, r2, [r1]
 800b9b4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b9b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d1e3      	bne.n	800b984 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2220      	movs	r2, #32
 800b9c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	330c      	adds	r3, #12
 800b9d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9d4:	e853 3f00 	ldrex	r3, [r3]
 800b9d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b9da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9dc:	f023 0310 	bic.w	r3, r3, #16
 800b9e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	330c      	adds	r3, #12
 800b9ea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b9ee:	65ba      	str	r2, [r7, #88]	; 0x58
 800b9f0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b9f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b9f6:	e841 2300 	strex	r3, r2, [r1]
 800b9fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b9fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d1e3      	bne.n	800b9ca <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7fa fe2c 	bl	8006664 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800ba14:	687a      	ldr	r2, [r7, #4]
 800ba16:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800ba18:	b292      	uxth	r2, r2
 800ba1a:	1a8a      	subs	r2, r1, r2
 800ba1c:	b292      	uxth	r2, r2
 800ba1e:	4611      	mov	r1, r2
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ba24:	e09a      	b.n	800bb5c <HAL_UART_IRQHandler+0x518>
 800ba26:	bf00      	nop
 800ba28:	0800bf73 	.word	0x0800bf73
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba34:	b29b      	uxth	r3, r3
 800ba36:	1ad3      	subs	r3, r2, r3
 800ba38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	f000 808c 	beq.w	800bb60 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800ba48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	f000 8087 	beq.w	800bb60 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	330c      	adds	r3, #12
 800ba58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba5c:	e853 3f00 	ldrex	r3, [r3]
 800ba60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ba62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ba68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	330c      	adds	r3, #12
 800ba72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ba76:	647a      	str	r2, [r7, #68]	; 0x44
 800ba78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ba7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba7e:	e841 2300 	strex	r3, r2, [r1]
 800ba82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ba84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d1e3      	bne.n	800ba52 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	3314      	adds	r3, #20
 800ba90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba94:	e853 3f00 	ldrex	r3, [r3]
 800ba98:	623b      	str	r3, [r7, #32]
   return(result);
 800ba9a:	6a3b      	ldr	r3, [r7, #32]
 800ba9c:	f023 0301 	bic.w	r3, r3, #1
 800baa0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	3314      	adds	r3, #20
 800baaa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800baae:	633a      	str	r2, [r7, #48]	; 0x30
 800bab0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bab2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bab6:	e841 2300 	strex	r3, r2, [r1]
 800baba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800babc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d1e3      	bne.n	800ba8a <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2220      	movs	r2, #32
 800bac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2200      	movs	r2, #0
 800bace:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	330c      	adds	r3, #12
 800bad6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	e853 3f00 	ldrex	r3, [r3]
 800bade:	60fb      	str	r3, [r7, #12]
   return(result);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f023 0310 	bic.w	r3, r3, #16
 800bae6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	330c      	adds	r3, #12
 800baf0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800baf4:	61fa      	str	r2, [r7, #28]
 800baf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf8:	69b9      	ldr	r1, [r7, #24]
 800bafa:	69fa      	ldr	r2, [r7, #28]
 800bafc:	e841 2300 	strex	r3, r2, [r1]
 800bb00:	617b      	str	r3, [r7, #20]
   return(result);
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d1e3      	bne.n	800bad0 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb0c:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800bb10:	4611      	mov	r1, r2
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bb16:	e023      	b.n	800bb60 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bb18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d009      	beq.n	800bb38 <HAL_UART_IRQHandler+0x4f4>
 800bb24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d003      	beq.n	800bb38 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f000 fa33 	bl	800bf9c <UART_Transmit_IT>
    return;
 800bb36:	e014      	b.n	800bb62 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bb38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d00e      	beq.n	800bb62 <HAL_UART_IRQHandler+0x51e>
 800bb44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d008      	beq.n	800bb62 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 fa73 	bl	800c03c <UART_EndTransmit_IT>
    return;
 800bb56:	e004      	b.n	800bb62 <HAL_UART_IRQHandler+0x51e>
    return;
 800bb58:	bf00      	nop
 800bb5a:	e002      	b.n	800bb62 <HAL_UART_IRQHandler+0x51e>
      return;
 800bb5c:	bf00      	nop
 800bb5e:	e000      	b.n	800bb62 <HAL_UART_IRQHandler+0x51e>
      return;
 800bb60:	bf00      	nop
  }
}
 800bb62:	37e8      	adds	r7, #232	; 0xe8
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b083      	sub	sp, #12
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bb70:	bf00      	nop
 800bb72:	370c      	adds	r7, #12
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr

0800bb7c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b083      	sub	sp, #12
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800bb84:	bf00      	nop
 800bb86:	370c      	adds	r7, #12
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr

0800bb90 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b083      	sub	sp, #12
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bb98:	bf00      	nop
 800bb9a:	370c      	adds	r7, #12
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba2:	4770      	bx	lr

0800bba4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b083      	sub	sp, #12
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800bbac:	bf00      	nop
 800bbae:	370c      	adds	r7, #12
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr

0800bbb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b083      	sub	sp, #12
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bbc0:	bf00      	nop
 800bbc2:	370c      	adds	r7, #12
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr

0800bbcc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b083      	sub	sp, #12
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800bbd4:	bf00      	nop
 800bbd6:	370c      	adds	r7, #12
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr

0800bbe0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b083      	sub	sp, #12
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800bbe8:	bf00      	nop
 800bbea:	370c      	adds	r7, #12
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr

0800bbf4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b083      	sub	sp, #12
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800bbfc:	bf00      	nop
 800bbfe:	370c      	adds	r7, #12
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr

0800bc08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b083      	sub	sp, #12
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	460b      	mov	r3, r1
 800bc12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bc14:	bf00      	nop
 800bc16:	370c      	adds	r7, #12
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr

0800bc20 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800bc20:	b480      	push	{r7}
 800bc22:	b083      	sub	sp, #12
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	4a10      	ldr	r2, [pc, #64]	; (800bc6c <UART_InitCallbacksToDefault+0x4c>)
 800bc2c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	4a0f      	ldr	r2, [pc, #60]	; (800bc70 <UART_InitCallbacksToDefault+0x50>)
 800bc32:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	4a0f      	ldr	r2, [pc, #60]	; (800bc74 <UART_InitCallbacksToDefault+0x54>)
 800bc38:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	4a0e      	ldr	r2, [pc, #56]	; (800bc78 <UART_InitCallbacksToDefault+0x58>)
 800bc3e:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	4a0e      	ldr	r2, [pc, #56]	; (800bc7c <UART_InitCallbacksToDefault+0x5c>)
 800bc44:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	4a0d      	ldr	r2, [pc, #52]	; (800bc80 <UART_InitCallbacksToDefault+0x60>)
 800bc4a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	4a0d      	ldr	r2, [pc, #52]	; (800bc84 <UART_InitCallbacksToDefault+0x64>)
 800bc50:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	4a0c      	ldr	r2, [pc, #48]	; (800bc88 <UART_InitCallbacksToDefault+0x68>)
 800bc56:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	4a0c      	ldr	r2, [pc, #48]	; (800bc8c <UART_InitCallbacksToDefault+0x6c>)
 800bc5c:	669a      	str	r2, [r3, #104]	; 0x68

}
 800bc5e:	bf00      	nop
 800bc60:	370c      	adds	r7, #12
 800bc62:	46bd      	mov	sp, r7
 800bc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc68:	4770      	bx	lr
 800bc6a:	bf00      	nop
 800bc6c:	0800bb7d 	.word	0x0800bb7d
 800bc70:	0800bb69 	.word	0x0800bb69
 800bc74:	0800bba5 	.word	0x0800bba5
 800bc78:	0800bb91 	.word	0x0800bb91
 800bc7c:	0800bbb9 	.word	0x0800bbb9
 800bc80:	0800bbcd 	.word	0x0800bbcd
 800bc84:	0800bbe1 	.word	0x0800bbe1
 800bc88:	0800bbf5 	.word	0x0800bbf5
 800bc8c:	0800bc09 	.word	0x0800bc09

0800bc90 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b090      	sub	sp, #64	; 0x40
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d137      	bne.n	800bd1c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800bcac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcae:	2200      	movs	r2, #0
 800bcb0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bcb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	3314      	adds	r3, #20
 800bcb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcbc:	e853 3f00 	ldrex	r3, [r3]
 800bcc0:	623b      	str	r3, [r7, #32]
   return(result);
 800bcc2:	6a3b      	ldr	r3, [r7, #32]
 800bcc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bcc8:	63bb      	str	r3, [r7, #56]	; 0x38
 800bcca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	3314      	adds	r3, #20
 800bcd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bcd2:	633a      	str	r2, [r7, #48]	; 0x30
 800bcd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bcd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcda:	e841 2300 	strex	r3, r2, [r1]
 800bcde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d1e5      	bne.n	800bcb2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	330c      	adds	r3, #12
 800bcec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	e853 3f00 	ldrex	r3, [r3]
 800bcf4:	60fb      	str	r3, [r7, #12]
   return(result);
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcfc:	637b      	str	r3, [r7, #52]	; 0x34
 800bcfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	330c      	adds	r3, #12
 800bd04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd06:	61fa      	str	r2, [r7, #28]
 800bd08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd0a:	69b9      	ldr	r1, [r7, #24]
 800bd0c:	69fa      	ldr	r2, [r7, #28]
 800bd0e:	e841 2300 	strex	r3, r2, [r1]
 800bd12:	617b      	str	r3, [r7, #20]
   return(result);
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d1e5      	bne.n	800bce6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bd1a:	e003      	b.n	800bd24 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800bd1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd20:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bd22:	4798      	blx	r3
}
 800bd24:	bf00      	nop
 800bd26:	3740      	adds	r7, #64	; 0x40
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b084      	sub	sp, #16
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd38:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd3e:	68f8      	ldr	r0, [r7, #12]
 800bd40:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd42:	bf00      	nop
 800bd44:	3710      	adds	r7, #16
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}

0800bd4a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bd4a:	b580      	push	{r7, lr}
 800bd4c:	b084      	sub	sp, #16
 800bd4e:	af00      	add	r7, sp, #0
 800bd50:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800bd52:	2300      	movs	r3, #0
 800bd54:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd5a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	695b      	ldr	r3, [r3, #20]
 800bd62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd66:	2b80      	cmp	r3, #128	; 0x80
 800bd68:	bf0c      	ite	eq
 800bd6a:	2301      	moveq	r3, #1
 800bd6c:	2300      	movne	r3, #0
 800bd6e:	b2db      	uxtb	r3, r3
 800bd70:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd78:	b2db      	uxtb	r3, r3
 800bd7a:	2b21      	cmp	r3, #33	; 0x21
 800bd7c:	d108      	bne.n	800bd90 <UART_DMAError+0x46>
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d005      	beq.n	800bd90 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	2200      	movs	r2, #0
 800bd88:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800bd8a:	68b8      	ldr	r0, [r7, #8]
 800bd8c:	f000 f866 	bl	800be5c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	695b      	ldr	r3, [r3, #20]
 800bd96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd9a:	2b40      	cmp	r3, #64	; 0x40
 800bd9c:	bf0c      	ite	eq
 800bd9e:	2301      	moveq	r3, #1
 800bda0:	2300      	movne	r3, #0
 800bda2:	b2db      	uxtb	r3, r3
 800bda4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	2b22      	cmp	r3, #34	; 0x22
 800bdb0:	d108      	bne.n	800bdc4 <UART_DMAError+0x7a>
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d005      	beq.n	800bdc4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800bdbe:	68b8      	ldr	r0, [r7, #8]
 800bdc0:	f000 f874 	bl	800beac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdc8:	f043 0210 	orr.w	r2, r3, #16
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdd4:	68b8      	ldr	r0, [r7, #8]
 800bdd6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bdd8:	bf00      	nop
 800bdda:	3710      	adds	r7, #16
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b085      	sub	sp, #20
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	60f8      	str	r0, [r7, #12]
 800bde8:	60b9      	str	r1, [r7, #8]
 800bdea:	4613      	mov	r3, r2
 800bdec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	68ba      	ldr	r2, [r7, #8]
 800bdf2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	88fa      	ldrh	r2, [r7, #6]
 800bdf8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	88fa      	ldrh	r2, [r7, #6]
 800bdfe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2200      	movs	r2, #0
 800be04:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	2222      	movs	r2, #34	; 0x22
 800be0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2200      	movs	r2, #0
 800be12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	691b      	ldr	r3, [r3, #16]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d007      	beq.n	800be2e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	68da      	ldr	r2, [r3, #12]
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be2c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	695a      	ldr	r2, [r3, #20]
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f042 0201 	orr.w	r2, r2, #1
 800be3c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	68da      	ldr	r2, [r3, #12]
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f042 0220 	orr.w	r2, r2, #32
 800be4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800be4e:	2300      	movs	r3, #0
}
 800be50:	4618      	mov	r0, r3
 800be52:	3714      	adds	r7, #20
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr

0800be5c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b089      	sub	sp, #36	; 0x24
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	330c      	adds	r3, #12
 800be6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	e853 3f00 	ldrex	r3, [r3]
 800be72:	60bb      	str	r3, [r7, #8]
   return(result);
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800be7a:	61fb      	str	r3, [r7, #28]
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	330c      	adds	r3, #12
 800be82:	69fa      	ldr	r2, [r7, #28]
 800be84:	61ba      	str	r2, [r7, #24]
 800be86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be88:	6979      	ldr	r1, [r7, #20]
 800be8a:	69ba      	ldr	r2, [r7, #24]
 800be8c:	e841 2300 	strex	r3, r2, [r1]
 800be90:	613b      	str	r3, [r7, #16]
   return(result);
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d1e5      	bne.n	800be64 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2220      	movs	r2, #32
 800be9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800bea0:	bf00      	nop
 800bea2:	3724      	adds	r7, #36	; 0x24
 800bea4:	46bd      	mov	sp, r7
 800bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beaa:	4770      	bx	lr

0800beac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800beac:	b480      	push	{r7}
 800beae:	b095      	sub	sp, #84	; 0x54
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	330c      	adds	r3, #12
 800beba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bebe:	e853 3f00 	ldrex	r3, [r3]
 800bec2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800beca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	330c      	adds	r3, #12
 800bed2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bed4:	643a      	str	r2, [r7, #64]	; 0x40
 800bed6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bed8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800beda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bedc:	e841 2300 	strex	r3, r2, [r1]
 800bee0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d1e5      	bne.n	800beb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	3314      	adds	r3, #20
 800beee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bef0:	6a3b      	ldr	r3, [r7, #32]
 800bef2:	e853 3f00 	ldrex	r3, [r3]
 800bef6:	61fb      	str	r3, [r7, #28]
   return(result);
 800bef8:	69fb      	ldr	r3, [r7, #28]
 800befa:	f023 0301 	bic.w	r3, r3, #1
 800befe:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	3314      	adds	r3, #20
 800bf06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf08:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bf0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf10:	e841 2300 	strex	r3, r2, [r1]
 800bf14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d1e5      	bne.n	800bee8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d119      	bne.n	800bf58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	330c      	adds	r3, #12
 800bf2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	e853 3f00 	ldrex	r3, [r3]
 800bf32:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	f023 0310 	bic.w	r3, r3, #16
 800bf3a:	647b      	str	r3, [r7, #68]	; 0x44
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	330c      	adds	r3, #12
 800bf42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf44:	61ba      	str	r2, [r7, #24]
 800bf46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf48:	6979      	ldr	r1, [r7, #20]
 800bf4a:	69ba      	ldr	r2, [r7, #24]
 800bf4c:	e841 2300 	strex	r3, r2, [r1]
 800bf50:	613b      	str	r3, [r7, #16]
   return(result);
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d1e5      	bne.n	800bf24 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2220      	movs	r2, #32
 800bf5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2200      	movs	r2, #0
 800bf64:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bf66:	bf00      	nop
 800bf68:	3754      	adds	r7, #84	; 0x54
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf70:	4770      	bx	lr

0800bf72 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b084      	sub	sp, #16
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	2200      	movs	r2, #0
 800bf84:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf90:	68f8      	ldr	r0, [r7, #12]
 800bf92:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf94:	bf00      	nop
 800bf96:	3710      	adds	r7, #16
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}

0800bf9c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b085      	sub	sp, #20
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfaa:	b2db      	uxtb	r3, r3
 800bfac:	2b21      	cmp	r3, #33	; 0x21
 800bfae:	d13e      	bne.n	800c02e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	689b      	ldr	r3, [r3, #8]
 800bfb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfb8:	d114      	bne.n	800bfe4 <UART_Transmit_IT+0x48>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	691b      	ldr	r3, [r3, #16]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d110      	bne.n	800bfe4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6a1b      	ldr	r3, [r3, #32]
 800bfc6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	881b      	ldrh	r3, [r3, #0]
 800bfcc:	461a      	mov	r2, r3
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bfd6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6a1b      	ldr	r3, [r3, #32]
 800bfdc:	1c9a      	adds	r2, r3, #2
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	621a      	str	r2, [r3, #32]
 800bfe2:	e008      	b.n	800bff6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6a1b      	ldr	r3, [r3, #32]
 800bfe8:	1c59      	adds	r1, r3, #1
 800bfea:	687a      	ldr	r2, [r7, #4]
 800bfec:	6211      	str	r1, [r2, #32]
 800bfee:	781a      	ldrb	r2, [r3, #0]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bffa:	b29b      	uxth	r3, r3
 800bffc:	3b01      	subs	r3, #1
 800bffe:	b29b      	uxth	r3, r3
 800c000:	687a      	ldr	r2, [r7, #4]
 800c002:	4619      	mov	r1, r3
 800c004:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c006:	2b00      	cmp	r3, #0
 800c008:	d10f      	bne.n	800c02a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	68da      	ldr	r2, [r3, #12]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c018:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	68da      	ldr	r2, [r3, #12]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c028:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c02a:	2300      	movs	r3, #0
 800c02c:	e000      	b.n	800c030 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c02e:	2302      	movs	r3, #2
  }
}
 800c030:	4618      	mov	r0, r3
 800c032:	3714      	adds	r7, #20
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr

0800c03c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b082      	sub	sp, #8
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	68da      	ldr	r2, [r3, #12]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c052:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2220      	movs	r2, #32
 800c058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c064:	2300      	movs	r3, #0
}
 800c066:	4618      	mov	r0, r3
 800c068:	3708      	adds	r7, #8
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}

0800c06e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c06e:	b580      	push	{r7, lr}
 800c070:	b08c      	sub	sp, #48	; 0x30
 800c072:	af00      	add	r7, sp, #0
 800c074:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	2b22      	cmp	r3, #34	; 0x22
 800c080:	f040 80ad 	bne.w	800c1de <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	689b      	ldr	r3, [r3, #8]
 800c088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c08c:	d117      	bne.n	800c0be <UART_Receive_IT+0x50>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	691b      	ldr	r3, [r3, #16]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d113      	bne.n	800c0be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c096:	2300      	movs	r3, #0
 800c098:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c09e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	b29b      	uxth	r3, r3
 800c0a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0ac:	b29a      	uxth	r2, r3
 800c0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0b6:	1c9a      	adds	r2, r3, #2
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	629a      	str	r2, [r3, #40]	; 0x28
 800c0bc:	e026      	b.n	800c10c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	689b      	ldr	r3, [r3, #8]
 800c0cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0d0:	d007      	beq.n	800c0e2 <UART_Receive_IT+0x74>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d10a      	bne.n	800c0f0 <UART_Receive_IT+0x82>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	691b      	ldr	r3, [r3, #16]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d106      	bne.n	800c0f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	b2da      	uxtb	r2, r3
 800c0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ec:	701a      	strb	r2, [r3, #0]
 800c0ee:	e008      	b.n	800c102 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	685b      	ldr	r3, [r3, #4]
 800c0f6:	b2db      	uxtb	r3, r3
 800c0f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0fc:	b2da      	uxtb	r2, r3
 800c0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c100:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c106:	1c5a      	adds	r2, r3, #1
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c110:	b29b      	uxth	r3, r3
 800c112:	3b01      	subs	r3, #1
 800c114:	b29b      	uxth	r3, r3
 800c116:	687a      	ldr	r2, [r7, #4]
 800c118:	4619      	mov	r1, r3
 800c11a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d15c      	bne.n	800c1da <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	68da      	ldr	r2, [r3, #12]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f022 0220 	bic.w	r2, r2, #32
 800c12e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	68da      	ldr	r2, [r3, #12]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c13e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	695a      	ldr	r2, [r3, #20]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f022 0201 	bic.w	r2, r2, #1
 800c14e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2220      	movs	r2, #32
 800c154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	d136      	bne.n	800c1ce <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2200      	movs	r2, #0
 800c164:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	330c      	adds	r3, #12
 800c16c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	e853 3f00 	ldrex	r3, [r3]
 800c174:	613b      	str	r3, [r7, #16]
   return(result);
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	f023 0310 	bic.w	r3, r3, #16
 800c17c:	627b      	str	r3, [r7, #36]	; 0x24
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	330c      	adds	r3, #12
 800c184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c186:	623a      	str	r2, [r7, #32]
 800c188:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c18a:	69f9      	ldr	r1, [r7, #28]
 800c18c:	6a3a      	ldr	r2, [r7, #32]
 800c18e:	e841 2300 	strex	r3, r2, [r1]
 800c192:	61bb      	str	r3, [r7, #24]
   return(result);
 800c194:	69bb      	ldr	r3, [r7, #24]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d1e5      	bne.n	800c166 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f003 0310 	and.w	r3, r3, #16
 800c1a4:	2b10      	cmp	r3, #16
 800c1a6:	d10a      	bne.n	800c1be <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	60fb      	str	r3, [r7, #12]
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	60fb      	str	r3, [r7, #12]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	685b      	ldr	r3, [r3, #4]
 800c1ba:	60fb      	str	r3, [r7, #12]
 800c1bc:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c1c2:	687a      	ldr	r2, [r7, #4]
 800c1c4:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800c1c6:	4611      	mov	r1, r2
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	4798      	blx	r3
 800c1cc:	e003      	b.n	800c1d6 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	e002      	b.n	800c1e0 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	e000      	b.n	800c1e0 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800c1de:	2302      	movs	r3, #2
  }
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3730      	adds	r7, #48	; 0x30
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c1e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c1ec:	b0c0      	sub	sp, #256	; 0x100
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c1f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	691b      	ldr	r3, [r3, #16]
 800c1fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c204:	68d9      	ldr	r1, [r3, #12]
 800c206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c20a:	681a      	ldr	r2, [r3, #0]
 800c20c:	ea40 0301 	orr.w	r3, r0, r1
 800c210:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c216:	689a      	ldr	r2, [r3, #8]
 800c218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c21c:	691b      	ldr	r3, [r3, #16]
 800c21e:	431a      	orrs	r2, r3
 800c220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c224:	695b      	ldr	r3, [r3, #20]
 800c226:	431a      	orrs	r2, r3
 800c228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c22c:	69db      	ldr	r3, [r3, #28]
 800c22e:	4313      	orrs	r3, r2
 800c230:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	68db      	ldr	r3, [r3, #12]
 800c23c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c240:	f021 010c 	bic.w	r1, r1, #12
 800c244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c248:	681a      	ldr	r2, [r3, #0]
 800c24a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c24e:	430b      	orrs	r3, r1
 800c250:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	695b      	ldr	r3, [r3, #20]
 800c25a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c25e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c262:	6999      	ldr	r1, [r3, #24]
 800c264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c268:	681a      	ldr	r2, [r3, #0]
 800c26a:	ea40 0301 	orr.w	r3, r0, r1
 800c26e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c274:	681a      	ldr	r2, [r3, #0]
 800c276:	4b8f      	ldr	r3, [pc, #572]	; (800c4b4 <UART_SetConfig+0x2cc>)
 800c278:	429a      	cmp	r2, r3
 800c27a:	d005      	beq.n	800c288 <UART_SetConfig+0xa0>
 800c27c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c280:	681a      	ldr	r2, [r3, #0]
 800c282:	4b8d      	ldr	r3, [pc, #564]	; (800c4b8 <UART_SetConfig+0x2d0>)
 800c284:	429a      	cmp	r2, r3
 800c286:	d104      	bne.n	800c292 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c288:	f7fd fac8 	bl	800981c <HAL_RCC_GetPCLK2Freq>
 800c28c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c290:	e003      	b.n	800c29a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c292:	f7fd faaf 	bl	80097f4 <HAL_RCC_GetPCLK1Freq>
 800c296:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c29a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c29e:	69db      	ldr	r3, [r3, #28]
 800c2a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c2a4:	f040 810c 	bne.w	800c4c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c2a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c2b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c2b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c2ba:	4622      	mov	r2, r4
 800c2bc:	462b      	mov	r3, r5
 800c2be:	1891      	adds	r1, r2, r2
 800c2c0:	65b9      	str	r1, [r7, #88]	; 0x58
 800c2c2:	415b      	adcs	r3, r3
 800c2c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c2ca:	4621      	mov	r1, r4
 800c2cc:	eb12 0801 	adds.w	r8, r2, r1
 800c2d0:	4629      	mov	r1, r5
 800c2d2:	eb43 0901 	adc.w	r9, r3, r1
 800c2d6:	f04f 0200 	mov.w	r2, #0
 800c2da:	f04f 0300 	mov.w	r3, #0
 800c2de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c2e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c2e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c2ea:	4690      	mov	r8, r2
 800c2ec:	4699      	mov	r9, r3
 800c2ee:	4623      	mov	r3, r4
 800c2f0:	eb18 0303 	adds.w	r3, r8, r3
 800c2f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c2f8:	462b      	mov	r3, r5
 800c2fa:	eb49 0303 	adc.w	r3, r9, r3
 800c2fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c306:	685b      	ldr	r3, [r3, #4]
 800c308:	2200      	movs	r2, #0
 800c30a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c30e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c312:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c316:	460b      	mov	r3, r1
 800c318:	18db      	adds	r3, r3, r3
 800c31a:	653b      	str	r3, [r7, #80]	; 0x50
 800c31c:	4613      	mov	r3, r2
 800c31e:	eb42 0303 	adc.w	r3, r2, r3
 800c322:	657b      	str	r3, [r7, #84]	; 0x54
 800c324:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c328:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c32c:	f7f4 fc58 	bl	8000be0 <__aeabi_uldivmod>
 800c330:	4602      	mov	r2, r0
 800c332:	460b      	mov	r3, r1
 800c334:	4b61      	ldr	r3, [pc, #388]	; (800c4bc <UART_SetConfig+0x2d4>)
 800c336:	fba3 2302 	umull	r2, r3, r3, r2
 800c33a:	095b      	lsrs	r3, r3, #5
 800c33c:	011c      	lsls	r4, r3, #4
 800c33e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c342:	2200      	movs	r2, #0
 800c344:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c348:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c34c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c350:	4642      	mov	r2, r8
 800c352:	464b      	mov	r3, r9
 800c354:	1891      	adds	r1, r2, r2
 800c356:	64b9      	str	r1, [r7, #72]	; 0x48
 800c358:	415b      	adcs	r3, r3
 800c35a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c35c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c360:	4641      	mov	r1, r8
 800c362:	eb12 0a01 	adds.w	sl, r2, r1
 800c366:	4649      	mov	r1, r9
 800c368:	eb43 0b01 	adc.w	fp, r3, r1
 800c36c:	f04f 0200 	mov.w	r2, #0
 800c370:	f04f 0300 	mov.w	r3, #0
 800c374:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c378:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c37c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c380:	4692      	mov	sl, r2
 800c382:	469b      	mov	fp, r3
 800c384:	4643      	mov	r3, r8
 800c386:	eb1a 0303 	adds.w	r3, sl, r3
 800c38a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c38e:	464b      	mov	r3, r9
 800c390:	eb4b 0303 	adc.w	r3, fp, r3
 800c394:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c3a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c3a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c3ac:	460b      	mov	r3, r1
 800c3ae:	18db      	adds	r3, r3, r3
 800c3b0:	643b      	str	r3, [r7, #64]	; 0x40
 800c3b2:	4613      	mov	r3, r2
 800c3b4:	eb42 0303 	adc.w	r3, r2, r3
 800c3b8:	647b      	str	r3, [r7, #68]	; 0x44
 800c3ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c3be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c3c2:	f7f4 fc0d 	bl	8000be0 <__aeabi_uldivmod>
 800c3c6:	4602      	mov	r2, r0
 800c3c8:	460b      	mov	r3, r1
 800c3ca:	4611      	mov	r1, r2
 800c3cc:	4b3b      	ldr	r3, [pc, #236]	; (800c4bc <UART_SetConfig+0x2d4>)
 800c3ce:	fba3 2301 	umull	r2, r3, r3, r1
 800c3d2:	095b      	lsrs	r3, r3, #5
 800c3d4:	2264      	movs	r2, #100	; 0x64
 800c3d6:	fb02 f303 	mul.w	r3, r2, r3
 800c3da:	1acb      	subs	r3, r1, r3
 800c3dc:	00db      	lsls	r3, r3, #3
 800c3de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c3e2:	4b36      	ldr	r3, [pc, #216]	; (800c4bc <UART_SetConfig+0x2d4>)
 800c3e4:	fba3 2302 	umull	r2, r3, r3, r2
 800c3e8:	095b      	lsrs	r3, r3, #5
 800c3ea:	005b      	lsls	r3, r3, #1
 800c3ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c3f0:	441c      	add	r4, r3
 800c3f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c3fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c400:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c404:	4642      	mov	r2, r8
 800c406:	464b      	mov	r3, r9
 800c408:	1891      	adds	r1, r2, r2
 800c40a:	63b9      	str	r1, [r7, #56]	; 0x38
 800c40c:	415b      	adcs	r3, r3
 800c40e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c410:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c414:	4641      	mov	r1, r8
 800c416:	1851      	adds	r1, r2, r1
 800c418:	6339      	str	r1, [r7, #48]	; 0x30
 800c41a:	4649      	mov	r1, r9
 800c41c:	414b      	adcs	r3, r1
 800c41e:	637b      	str	r3, [r7, #52]	; 0x34
 800c420:	f04f 0200 	mov.w	r2, #0
 800c424:	f04f 0300 	mov.w	r3, #0
 800c428:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c42c:	4659      	mov	r1, fp
 800c42e:	00cb      	lsls	r3, r1, #3
 800c430:	4651      	mov	r1, sl
 800c432:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c436:	4651      	mov	r1, sl
 800c438:	00ca      	lsls	r2, r1, #3
 800c43a:	4610      	mov	r0, r2
 800c43c:	4619      	mov	r1, r3
 800c43e:	4603      	mov	r3, r0
 800c440:	4642      	mov	r2, r8
 800c442:	189b      	adds	r3, r3, r2
 800c444:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c448:	464b      	mov	r3, r9
 800c44a:	460a      	mov	r2, r1
 800c44c:	eb42 0303 	adc.w	r3, r2, r3
 800c450:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c458:	685b      	ldr	r3, [r3, #4]
 800c45a:	2200      	movs	r2, #0
 800c45c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c460:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c464:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c468:	460b      	mov	r3, r1
 800c46a:	18db      	adds	r3, r3, r3
 800c46c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c46e:	4613      	mov	r3, r2
 800c470:	eb42 0303 	adc.w	r3, r2, r3
 800c474:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c476:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c47a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c47e:	f7f4 fbaf 	bl	8000be0 <__aeabi_uldivmod>
 800c482:	4602      	mov	r2, r0
 800c484:	460b      	mov	r3, r1
 800c486:	4b0d      	ldr	r3, [pc, #52]	; (800c4bc <UART_SetConfig+0x2d4>)
 800c488:	fba3 1302 	umull	r1, r3, r3, r2
 800c48c:	095b      	lsrs	r3, r3, #5
 800c48e:	2164      	movs	r1, #100	; 0x64
 800c490:	fb01 f303 	mul.w	r3, r1, r3
 800c494:	1ad3      	subs	r3, r2, r3
 800c496:	00db      	lsls	r3, r3, #3
 800c498:	3332      	adds	r3, #50	; 0x32
 800c49a:	4a08      	ldr	r2, [pc, #32]	; (800c4bc <UART_SetConfig+0x2d4>)
 800c49c:	fba2 2303 	umull	r2, r3, r2, r3
 800c4a0:	095b      	lsrs	r3, r3, #5
 800c4a2:	f003 0207 	and.w	r2, r3, #7
 800c4a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	4422      	add	r2, r4
 800c4ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c4b0:	e105      	b.n	800c6be <UART_SetConfig+0x4d6>
 800c4b2:	bf00      	nop
 800c4b4:	40011000 	.word	0x40011000
 800c4b8:	40011400 	.word	0x40011400
 800c4bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c4c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c4ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c4ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c4d2:	4642      	mov	r2, r8
 800c4d4:	464b      	mov	r3, r9
 800c4d6:	1891      	adds	r1, r2, r2
 800c4d8:	6239      	str	r1, [r7, #32]
 800c4da:	415b      	adcs	r3, r3
 800c4dc:	627b      	str	r3, [r7, #36]	; 0x24
 800c4de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c4e2:	4641      	mov	r1, r8
 800c4e4:	1854      	adds	r4, r2, r1
 800c4e6:	4649      	mov	r1, r9
 800c4e8:	eb43 0501 	adc.w	r5, r3, r1
 800c4ec:	f04f 0200 	mov.w	r2, #0
 800c4f0:	f04f 0300 	mov.w	r3, #0
 800c4f4:	00eb      	lsls	r3, r5, #3
 800c4f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c4fa:	00e2      	lsls	r2, r4, #3
 800c4fc:	4614      	mov	r4, r2
 800c4fe:	461d      	mov	r5, r3
 800c500:	4643      	mov	r3, r8
 800c502:	18e3      	adds	r3, r4, r3
 800c504:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c508:	464b      	mov	r3, r9
 800c50a:	eb45 0303 	adc.w	r3, r5, r3
 800c50e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c516:	685b      	ldr	r3, [r3, #4]
 800c518:	2200      	movs	r2, #0
 800c51a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c51e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c522:	f04f 0200 	mov.w	r2, #0
 800c526:	f04f 0300 	mov.w	r3, #0
 800c52a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c52e:	4629      	mov	r1, r5
 800c530:	008b      	lsls	r3, r1, #2
 800c532:	4621      	mov	r1, r4
 800c534:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c538:	4621      	mov	r1, r4
 800c53a:	008a      	lsls	r2, r1, #2
 800c53c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c540:	f7f4 fb4e 	bl	8000be0 <__aeabi_uldivmod>
 800c544:	4602      	mov	r2, r0
 800c546:	460b      	mov	r3, r1
 800c548:	4b60      	ldr	r3, [pc, #384]	; (800c6cc <UART_SetConfig+0x4e4>)
 800c54a:	fba3 2302 	umull	r2, r3, r3, r2
 800c54e:	095b      	lsrs	r3, r3, #5
 800c550:	011c      	lsls	r4, r3, #4
 800c552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c556:	2200      	movs	r2, #0
 800c558:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c55c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c560:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c564:	4642      	mov	r2, r8
 800c566:	464b      	mov	r3, r9
 800c568:	1891      	adds	r1, r2, r2
 800c56a:	61b9      	str	r1, [r7, #24]
 800c56c:	415b      	adcs	r3, r3
 800c56e:	61fb      	str	r3, [r7, #28]
 800c570:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c574:	4641      	mov	r1, r8
 800c576:	1851      	adds	r1, r2, r1
 800c578:	6139      	str	r1, [r7, #16]
 800c57a:	4649      	mov	r1, r9
 800c57c:	414b      	adcs	r3, r1
 800c57e:	617b      	str	r3, [r7, #20]
 800c580:	f04f 0200 	mov.w	r2, #0
 800c584:	f04f 0300 	mov.w	r3, #0
 800c588:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c58c:	4659      	mov	r1, fp
 800c58e:	00cb      	lsls	r3, r1, #3
 800c590:	4651      	mov	r1, sl
 800c592:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c596:	4651      	mov	r1, sl
 800c598:	00ca      	lsls	r2, r1, #3
 800c59a:	4610      	mov	r0, r2
 800c59c:	4619      	mov	r1, r3
 800c59e:	4603      	mov	r3, r0
 800c5a0:	4642      	mov	r2, r8
 800c5a2:	189b      	adds	r3, r3, r2
 800c5a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c5a8:	464b      	mov	r3, r9
 800c5aa:	460a      	mov	r2, r1
 800c5ac:	eb42 0303 	adc.w	r3, r2, r3
 800c5b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c5b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5b8:	685b      	ldr	r3, [r3, #4]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	67bb      	str	r3, [r7, #120]	; 0x78
 800c5be:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c5c0:	f04f 0200 	mov.w	r2, #0
 800c5c4:	f04f 0300 	mov.w	r3, #0
 800c5c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c5cc:	4649      	mov	r1, r9
 800c5ce:	008b      	lsls	r3, r1, #2
 800c5d0:	4641      	mov	r1, r8
 800c5d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c5d6:	4641      	mov	r1, r8
 800c5d8:	008a      	lsls	r2, r1, #2
 800c5da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c5de:	f7f4 faff 	bl	8000be0 <__aeabi_uldivmod>
 800c5e2:	4602      	mov	r2, r0
 800c5e4:	460b      	mov	r3, r1
 800c5e6:	4b39      	ldr	r3, [pc, #228]	; (800c6cc <UART_SetConfig+0x4e4>)
 800c5e8:	fba3 1302 	umull	r1, r3, r3, r2
 800c5ec:	095b      	lsrs	r3, r3, #5
 800c5ee:	2164      	movs	r1, #100	; 0x64
 800c5f0:	fb01 f303 	mul.w	r3, r1, r3
 800c5f4:	1ad3      	subs	r3, r2, r3
 800c5f6:	011b      	lsls	r3, r3, #4
 800c5f8:	3332      	adds	r3, #50	; 0x32
 800c5fa:	4a34      	ldr	r2, [pc, #208]	; (800c6cc <UART_SetConfig+0x4e4>)
 800c5fc:	fba2 2303 	umull	r2, r3, r2, r3
 800c600:	095b      	lsrs	r3, r3, #5
 800c602:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c606:	441c      	add	r4, r3
 800c608:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c60c:	2200      	movs	r2, #0
 800c60e:	673b      	str	r3, [r7, #112]	; 0x70
 800c610:	677a      	str	r2, [r7, #116]	; 0x74
 800c612:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c616:	4642      	mov	r2, r8
 800c618:	464b      	mov	r3, r9
 800c61a:	1891      	adds	r1, r2, r2
 800c61c:	60b9      	str	r1, [r7, #8]
 800c61e:	415b      	adcs	r3, r3
 800c620:	60fb      	str	r3, [r7, #12]
 800c622:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c626:	4641      	mov	r1, r8
 800c628:	1851      	adds	r1, r2, r1
 800c62a:	6039      	str	r1, [r7, #0]
 800c62c:	4649      	mov	r1, r9
 800c62e:	414b      	adcs	r3, r1
 800c630:	607b      	str	r3, [r7, #4]
 800c632:	f04f 0200 	mov.w	r2, #0
 800c636:	f04f 0300 	mov.w	r3, #0
 800c63a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c63e:	4659      	mov	r1, fp
 800c640:	00cb      	lsls	r3, r1, #3
 800c642:	4651      	mov	r1, sl
 800c644:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c648:	4651      	mov	r1, sl
 800c64a:	00ca      	lsls	r2, r1, #3
 800c64c:	4610      	mov	r0, r2
 800c64e:	4619      	mov	r1, r3
 800c650:	4603      	mov	r3, r0
 800c652:	4642      	mov	r2, r8
 800c654:	189b      	adds	r3, r3, r2
 800c656:	66bb      	str	r3, [r7, #104]	; 0x68
 800c658:	464b      	mov	r3, r9
 800c65a:	460a      	mov	r2, r1
 800c65c:	eb42 0303 	adc.w	r3, r2, r3
 800c660:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c666:	685b      	ldr	r3, [r3, #4]
 800c668:	2200      	movs	r2, #0
 800c66a:	663b      	str	r3, [r7, #96]	; 0x60
 800c66c:	667a      	str	r2, [r7, #100]	; 0x64
 800c66e:	f04f 0200 	mov.w	r2, #0
 800c672:	f04f 0300 	mov.w	r3, #0
 800c676:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c67a:	4649      	mov	r1, r9
 800c67c:	008b      	lsls	r3, r1, #2
 800c67e:	4641      	mov	r1, r8
 800c680:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c684:	4641      	mov	r1, r8
 800c686:	008a      	lsls	r2, r1, #2
 800c688:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c68c:	f7f4 faa8 	bl	8000be0 <__aeabi_uldivmod>
 800c690:	4602      	mov	r2, r0
 800c692:	460b      	mov	r3, r1
 800c694:	4b0d      	ldr	r3, [pc, #52]	; (800c6cc <UART_SetConfig+0x4e4>)
 800c696:	fba3 1302 	umull	r1, r3, r3, r2
 800c69a:	095b      	lsrs	r3, r3, #5
 800c69c:	2164      	movs	r1, #100	; 0x64
 800c69e:	fb01 f303 	mul.w	r3, r1, r3
 800c6a2:	1ad3      	subs	r3, r2, r3
 800c6a4:	011b      	lsls	r3, r3, #4
 800c6a6:	3332      	adds	r3, #50	; 0x32
 800c6a8:	4a08      	ldr	r2, [pc, #32]	; (800c6cc <UART_SetConfig+0x4e4>)
 800c6aa:	fba2 2303 	umull	r2, r3, r2, r3
 800c6ae:	095b      	lsrs	r3, r3, #5
 800c6b0:	f003 020f 	and.w	r2, r3, #15
 800c6b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	4422      	add	r2, r4
 800c6bc:	609a      	str	r2, [r3, #8]
}
 800c6be:	bf00      	nop
 800c6c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c6ca:	bf00      	nop
 800c6cc:	51eb851f 	.word	0x51eb851f

0800c6d0 <__errno>:
 800c6d0:	4b01      	ldr	r3, [pc, #4]	; (800c6d8 <__errno+0x8>)
 800c6d2:	6818      	ldr	r0, [r3, #0]
 800c6d4:	4770      	bx	lr
 800c6d6:	bf00      	nop
 800c6d8:	20000240 	.word	0x20000240

0800c6dc <__libc_init_array>:
 800c6dc:	b570      	push	{r4, r5, r6, lr}
 800c6de:	4d0d      	ldr	r5, [pc, #52]	; (800c714 <__libc_init_array+0x38>)
 800c6e0:	4c0d      	ldr	r4, [pc, #52]	; (800c718 <__libc_init_array+0x3c>)
 800c6e2:	1b64      	subs	r4, r4, r5
 800c6e4:	10a4      	asrs	r4, r4, #2
 800c6e6:	2600      	movs	r6, #0
 800c6e8:	42a6      	cmp	r6, r4
 800c6ea:	d109      	bne.n	800c700 <__libc_init_array+0x24>
 800c6ec:	4d0b      	ldr	r5, [pc, #44]	; (800c71c <__libc_init_array+0x40>)
 800c6ee:	4c0c      	ldr	r4, [pc, #48]	; (800c720 <__libc_init_array+0x44>)
 800c6f0:	f002 fb76 	bl	800ede0 <_init>
 800c6f4:	1b64      	subs	r4, r4, r5
 800c6f6:	10a4      	asrs	r4, r4, #2
 800c6f8:	2600      	movs	r6, #0
 800c6fa:	42a6      	cmp	r6, r4
 800c6fc:	d105      	bne.n	800c70a <__libc_init_array+0x2e>
 800c6fe:	bd70      	pop	{r4, r5, r6, pc}
 800c700:	f855 3b04 	ldr.w	r3, [r5], #4
 800c704:	4798      	blx	r3
 800c706:	3601      	adds	r6, #1
 800c708:	e7ee      	b.n	800c6e8 <__libc_init_array+0xc>
 800c70a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c70e:	4798      	blx	r3
 800c710:	3601      	adds	r6, #1
 800c712:	e7f2      	b.n	800c6fa <__libc_init_array+0x1e>
 800c714:	0800f0f0 	.word	0x0800f0f0
 800c718:	0800f0f0 	.word	0x0800f0f0
 800c71c:	0800f0f0 	.word	0x0800f0f0
 800c720:	0800f0f4 	.word	0x0800f0f4

0800c724 <memcpy>:
 800c724:	440a      	add	r2, r1
 800c726:	4291      	cmp	r1, r2
 800c728:	f100 33ff 	add.w	r3, r0, #4294967295
 800c72c:	d100      	bne.n	800c730 <memcpy+0xc>
 800c72e:	4770      	bx	lr
 800c730:	b510      	push	{r4, lr}
 800c732:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c736:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c73a:	4291      	cmp	r1, r2
 800c73c:	d1f9      	bne.n	800c732 <memcpy+0xe>
 800c73e:	bd10      	pop	{r4, pc}

0800c740 <memset>:
 800c740:	4402      	add	r2, r0
 800c742:	4603      	mov	r3, r0
 800c744:	4293      	cmp	r3, r2
 800c746:	d100      	bne.n	800c74a <memset+0xa>
 800c748:	4770      	bx	lr
 800c74a:	f803 1b01 	strb.w	r1, [r3], #1
 800c74e:	e7f9      	b.n	800c744 <memset+0x4>

0800c750 <cos>:
 800c750:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c752:	ec53 2b10 	vmov	r2, r3, d0
 800c756:	4826      	ldr	r0, [pc, #152]	; (800c7f0 <cos+0xa0>)
 800c758:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c75c:	4281      	cmp	r1, r0
 800c75e:	dc06      	bgt.n	800c76e <cos+0x1e>
 800c760:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800c7e8 <cos+0x98>
 800c764:	b005      	add	sp, #20
 800c766:	f85d eb04 	ldr.w	lr, [sp], #4
 800c76a:	f001 bc71 	b.w	800e050 <__kernel_cos>
 800c76e:	4821      	ldr	r0, [pc, #132]	; (800c7f4 <cos+0xa4>)
 800c770:	4281      	cmp	r1, r0
 800c772:	dd09      	ble.n	800c788 <cos+0x38>
 800c774:	ee10 0a10 	vmov	r0, s0
 800c778:	4619      	mov	r1, r3
 800c77a:	f7f3 fd31 	bl	80001e0 <__aeabi_dsub>
 800c77e:	ec41 0b10 	vmov	d0, r0, r1
 800c782:	b005      	add	sp, #20
 800c784:	f85d fb04 	ldr.w	pc, [sp], #4
 800c788:	4668      	mov	r0, sp
 800c78a:	f000 fed1 	bl	800d530 <__ieee754_rem_pio2>
 800c78e:	f000 0003 	and.w	r0, r0, #3
 800c792:	2801      	cmp	r0, #1
 800c794:	d00b      	beq.n	800c7ae <cos+0x5e>
 800c796:	2802      	cmp	r0, #2
 800c798:	d016      	beq.n	800c7c8 <cos+0x78>
 800c79a:	b9e0      	cbnz	r0, 800c7d6 <cos+0x86>
 800c79c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c7a0:	ed9d 0b00 	vldr	d0, [sp]
 800c7a4:	f001 fc54 	bl	800e050 <__kernel_cos>
 800c7a8:	ec51 0b10 	vmov	r0, r1, d0
 800c7ac:	e7e7      	b.n	800c77e <cos+0x2e>
 800c7ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c7b2:	ed9d 0b00 	vldr	d0, [sp]
 800c7b6:	f002 f863 	bl	800e880 <__kernel_sin>
 800c7ba:	ec53 2b10 	vmov	r2, r3, d0
 800c7be:	ee10 0a10 	vmov	r0, s0
 800c7c2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c7c6:	e7da      	b.n	800c77e <cos+0x2e>
 800c7c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c7cc:	ed9d 0b00 	vldr	d0, [sp]
 800c7d0:	f001 fc3e 	bl	800e050 <__kernel_cos>
 800c7d4:	e7f1      	b.n	800c7ba <cos+0x6a>
 800c7d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c7da:	ed9d 0b00 	vldr	d0, [sp]
 800c7de:	2001      	movs	r0, #1
 800c7e0:	f002 f84e 	bl	800e880 <__kernel_sin>
 800c7e4:	e7e0      	b.n	800c7a8 <cos+0x58>
 800c7e6:	bf00      	nop
	...
 800c7f0:	3fe921fb 	.word	0x3fe921fb
 800c7f4:	7fefffff 	.word	0x7fefffff

0800c7f8 <sin>:
 800c7f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c7fa:	ec53 2b10 	vmov	r2, r3, d0
 800c7fe:	4828      	ldr	r0, [pc, #160]	; (800c8a0 <sin+0xa8>)
 800c800:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c804:	4281      	cmp	r1, r0
 800c806:	dc07      	bgt.n	800c818 <sin+0x20>
 800c808:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800c898 <sin+0xa0>
 800c80c:	2000      	movs	r0, #0
 800c80e:	b005      	add	sp, #20
 800c810:	f85d eb04 	ldr.w	lr, [sp], #4
 800c814:	f002 b834 	b.w	800e880 <__kernel_sin>
 800c818:	4822      	ldr	r0, [pc, #136]	; (800c8a4 <sin+0xac>)
 800c81a:	4281      	cmp	r1, r0
 800c81c:	dd09      	ble.n	800c832 <sin+0x3a>
 800c81e:	ee10 0a10 	vmov	r0, s0
 800c822:	4619      	mov	r1, r3
 800c824:	f7f3 fcdc 	bl	80001e0 <__aeabi_dsub>
 800c828:	ec41 0b10 	vmov	d0, r0, r1
 800c82c:	b005      	add	sp, #20
 800c82e:	f85d fb04 	ldr.w	pc, [sp], #4
 800c832:	4668      	mov	r0, sp
 800c834:	f000 fe7c 	bl	800d530 <__ieee754_rem_pio2>
 800c838:	f000 0003 	and.w	r0, r0, #3
 800c83c:	2801      	cmp	r0, #1
 800c83e:	d00c      	beq.n	800c85a <sin+0x62>
 800c840:	2802      	cmp	r0, #2
 800c842:	d011      	beq.n	800c868 <sin+0x70>
 800c844:	b9f0      	cbnz	r0, 800c884 <sin+0x8c>
 800c846:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c84a:	ed9d 0b00 	vldr	d0, [sp]
 800c84e:	2001      	movs	r0, #1
 800c850:	f002 f816 	bl	800e880 <__kernel_sin>
 800c854:	ec51 0b10 	vmov	r0, r1, d0
 800c858:	e7e6      	b.n	800c828 <sin+0x30>
 800c85a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c85e:	ed9d 0b00 	vldr	d0, [sp]
 800c862:	f001 fbf5 	bl	800e050 <__kernel_cos>
 800c866:	e7f5      	b.n	800c854 <sin+0x5c>
 800c868:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c86c:	ed9d 0b00 	vldr	d0, [sp]
 800c870:	2001      	movs	r0, #1
 800c872:	f002 f805 	bl	800e880 <__kernel_sin>
 800c876:	ec53 2b10 	vmov	r2, r3, d0
 800c87a:	ee10 0a10 	vmov	r0, s0
 800c87e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c882:	e7d1      	b.n	800c828 <sin+0x30>
 800c884:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c888:	ed9d 0b00 	vldr	d0, [sp]
 800c88c:	f001 fbe0 	bl	800e050 <__kernel_cos>
 800c890:	e7f1      	b.n	800c876 <sin+0x7e>
 800c892:	bf00      	nop
 800c894:	f3af 8000 	nop.w
	...
 800c8a0:	3fe921fb 	.word	0x3fe921fb
 800c8a4:	7fefffff 	.word	0x7fefffff

0800c8a8 <pow>:
 800c8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8aa:	ed2d 8b02 	vpush	{d8}
 800c8ae:	eeb0 8a40 	vmov.f32	s16, s0
 800c8b2:	eef0 8a60 	vmov.f32	s17, s1
 800c8b6:	ec55 4b11 	vmov	r4, r5, d1
 800c8ba:	f000 f909 	bl	800cad0 <__ieee754_pow>
 800c8be:	4622      	mov	r2, r4
 800c8c0:	462b      	mov	r3, r5
 800c8c2:	4620      	mov	r0, r4
 800c8c4:	4629      	mov	r1, r5
 800c8c6:	ec57 6b10 	vmov	r6, r7, d0
 800c8ca:	f7f4 f8db 	bl	8000a84 <__aeabi_dcmpun>
 800c8ce:	2800      	cmp	r0, #0
 800c8d0:	d13b      	bne.n	800c94a <pow+0xa2>
 800c8d2:	ec51 0b18 	vmov	r0, r1, d8
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	2300      	movs	r3, #0
 800c8da:	f7f4 f8a1 	bl	8000a20 <__aeabi_dcmpeq>
 800c8de:	b1b8      	cbz	r0, 800c910 <pow+0x68>
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	4629      	mov	r1, r5
 800c8e8:	f7f4 f89a 	bl	8000a20 <__aeabi_dcmpeq>
 800c8ec:	2800      	cmp	r0, #0
 800c8ee:	d146      	bne.n	800c97e <pow+0xd6>
 800c8f0:	ec45 4b10 	vmov	d0, r4, r5
 800c8f4:	f002 f8dd 	bl	800eab2 <finite>
 800c8f8:	b338      	cbz	r0, 800c94a <pow+0xa2>
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	4620      	mov	r0, r4
 800c900:	4629      	mov	r1, r5
 800c902:	f7f4 f897 	bl	8000a34 <__aeabi_dcmplt>
 800c906:	b300      	cbz	r0, 800c94a <pow+0xa2>
 800c908:	f7ff fee2 	bl	800c6d0 <__errno>
 800c90c:	2322      	movs	r3, #34	; 0x22
 800c90e:	e01b      	b.n	800c948 <pow+0xa0>
 800c910:	ec47 6b10 	vmov	d0, r6, r7
 800c914:	f002 f8cd 	bl	800eab2 <finite>
 800c918:	b9e0      	cbnz	r0, 800c954 <pow+0xac>
 800c91a:	eeb0 0a48 	vmov.f32	s0, s16
 800c91e:	eef0 0a68 	vmov.f32	s1, s17
 800c922:	f002 f8c6 	bl	800eab2 <finite>
 800c926:	b1a8      	cbz	r0, 800c954 <pow+0xac>
 800c928:	ec45 4b10 	vmov	d0, r4, r5
 800c92c:	f002 f8c1 	bl	800eab2 <finite>
 800c930:	b180      	cbz	r0, 800c954 <pow+0xac>
 800c932:	4632      	mov	r2, r6
 800c934:	463b      	mov	r3, r7
 800c936:	4630      	mov	r0, r6
 800c938:	4639      	mov	r1, r7
 800c93a:	f7f4 f8a3 	bl	8000a84 <__aeabi_dcmpun>
 800c93e:	2800      	cmp	r0, #0
 800c940:	d0e2      	beq.n	800c908 <pow+0x60>
 800c942:	f7ff fec5 	bl	800c6d0 <__errno>
 800c946:	2321      	movs	r3, #33	; 0x21
 800c948:	6003      	str	r3, [r0, #0]
 800c94a:	ecbd 8b02 	vpop	{d8}
 800c94e:	ec47 6b10 	vmov	d0, r6, r7
 800c952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c954:	2200      	movs	r2, #0
 800c956:	2300      	movs	r3, #0
 800c958:	4630      	mov	r0, r6
 800c95a:	4639      	mov	r1, r7
 800c95c:	f7f4 f860 	bl	8000a20 <__aeabi_dcmpeq>
 800c960:	2800      	cmp	r0, #0
 800c962:	d0f2      	beq.n	800c94a <pow+0xa2>
 800c964:	eeb0 0a48 	vmov.f32	s0, s16
 800c968:	eef0 0a68 	vmov.f32	s1, s17
 800c96c:	f002 f8a1 	bl	800eab2 <finite>
 800c970:	2800      	cmp	r0, #0
 800c972:	d0ea      	beq.n	800c94a <pow+0xa2>
 800c974:	ec45 4b10 	vmov	d0, r4, r5
 800c978:	f002 f89b 	bl	800eab2 <finite>
 800c97c:	e7c3      	b.n	800c906 <pow+0x5e>
 800c97e:	4f01      	ldr	r7, [pc, #4]	; (800c984 <pow+0xdc>)
 800c980:	2600      	movs	r6, #0
 800c982:	e7e2      	b.n	800c94a <pow+0xa2>
 800c984:	3ff00000 	.word	0x3ff00000

0800c988 <sqrt>:
 800c988:	b538      	push	{r3, r4, r5, lr}
 800c98a:	ed2d 8b02 	vpush	{d8}
 800c98e:	ec55 4b10 	vmov	r4, r5, d0
 800c992:	f000 ffd9 	bl	800d948 <__ieee754_sqrt>
 800c996:	4622      	mov	r2, r4
 800c998:	462b      	mov	r3, r5
 800c99a:	4620      	mov	r0, r4
 800c99c:	4629      	mov	r1, r5
 800c99e:	eeb0 8a40 	vmov.f32	s16, s0
 800c9a2:	eef0 8a60 	vmov.f32	s17, s1
 800c9a6:	f7f4 f86d 	bl	8000a84 <__aeabi_dcmpun>
 800c9aa:	b990      	cbnz	r0, 800c9d2 <sqrt+0x4a>
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	4620      	mov	r0, r4
 800c9b2:	4629      	mov	r1, r5
 800c9b4:	f7f4 f83e 	bl	8000a34 <__aeabi_dcmplt>
 800c9b8:	b158      	cbz	r0, 800c9d2 <sqrt+0x4a>
 800c9ba:	f7ff fe89 	bl	800c6d0 <__errno>
 800c9be:	2321      	movs	r3, #33	; 0x21
 800c9c0:	6003      	str	r3, [r0, #0]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	4610      	mov	r0, r2
 800c9c8:	4619      	mov	r1, r3
 800c9ca:	f7f3 feeb 	bl	80007a4 <__aeabi_ddiv>
 800c9ce:	ec41 0b18 	vmov	d8, r0, r1
 800c9d2:	eeb0 0a48 	vmov.f32	s0, s16
 800c9d6:	eef0 0a68 	vmov.f32	s1, s17
 800c9da:	ecbd 8b02 	vpop	{d8}
 800c9de:	bd38      	pop	{r3, r4, r5, pc}

0800c9e0 <powf>:
 800c9e0:	b508      	push	{r3, lr}
 800c9e2:	ed2d 8b04 	vpush	{d8-d9}
 800c9e6:	eeb0 8a60 	vmov.f32	s16, s1
 800c9ea:	eeb0 9a40 	vmov.f32	s18, s0
 800c9ee:	f001 f85d 	bl	800daac <__ieee754_powf>
 800c9f2:	eeb4 8a48 	vcmp.f32	s16, s16
 800c9f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9fa:	eef0 8a40 	vmov.f32	s17, s0
 800c9fe:	d63e      	bvs.n	800ca7e <powf+0x9e>
 800ca00:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800ca04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca08:	d112      	bne.n	800ca30 <powf+0x50>
 800ca0a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ca0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca12:	d039      	beq.n	800ca88 <powf+0xa8>
 800ca14:	eeb0 0a48 	vmov.f32	s0, s16
 800ca18:	f002 f963 	bl	800ece2 <finitef>
 800ca1c:	b378      	cbz	r0, 800ca7e <powf+0x9e>
 800ca1e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ca22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca26:	d52a      	bpl.n	800ca7e <powf+0x9e>
 800ca28:	f7ff fe52 	bl	800c6d0 <__errno>
 800ca2c:	2322      	movs	r3, #34	; 0x22
 800ca2e:	e014      	b.n	800ca5a <powf+0x7a>
 800ca30:	f002 f957 	bl	800ece2 <finitef>
 800ca34:	b998      	cbnz	r0, 800ca5e <powf+0x7e>
 800ca36:	eeb0 0a49 	vmov.f32	s0, s18
 800ca3a:	f002 f952 	bl	800ece2 <finitef>
 800ca3e:	b170      	cbz	r0, 800ca5e <powf+0x7e>
 800ca40:	eeb0 0a48 	vmov.f32	s0, s16
 800ca44:	f002 f94d 	bl	800ece2 <finitef>
 800ca48:	b148      	cbz	r0, 800ca5e <powf+0x7e>
 800ca4a:	eef4 8a68 	vcmp.f32	s17, s17
 800ca4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca52:	d7e9      	bvc.n	800ca28 <powf+0x48>
 800ca54:	f7ff fe3c 	bl	800c6d0 <__errno>
 800ca58:	2321      	movs	r3, #33	; 0x21
 800ca5a:	6003      	str	r3, [r0, #0]
 800ca5c:	e00f      	b.n	800ca7e <powf+0x9e>
 800ca5e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800ca62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca66:	d10a      	bne.n	800ca7e <powf+0x9e>
 800ca68:	eeb0 0a49 	vmov.f32	s0, s18
 800ca6c:	f002 f939 	bl	800ece2 <finitef>
 800ca70:	b128      	cbz	r0, 800ca7e <powf+0x9e>
 800ca72:	eeb0 0a48 	vmov.f32	s0, s16
 800ca76:	f002 f934 	bl	800ece2 <finitef>
 800ca7a:	2800      	cmp	r0, #0
 800ca7c:	d1d4      	bne.n	800ca28 <powf+0x48>
 800ca7e:	eeb0 0a68 	vmov.f32	s0, s17
 800ca82:	ecbd 8b04 	vpop	{d8-d9}
 800ca86:	bd08      	pop	{r3, pc}
 800ca88:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800ca8c:	e7f7      	b.n	800ca7e <powf+0x9e>
	...

0800ca90 <sqrtf>:
 800ca90:	b508      	push	{r3, lr}
 800ca92:	ed2d 8b02 	vpush	{d8}
 800ca96:	eeb0 8a40 	vmov.f32	s16, s0
 800ca9a:	f001 fad5 	bl	800e048 <__ieee754_sqrtf>
 800ca9e:	eeb4 8a48 	vcmp.f32	s16, s16
 800caa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caa6:	d60c      	bvs.n	800cac2 <sqrtf+0x32>
 800caa8:	eddf 8a07 	vldr	s17, [pc, #28]	; 800cac8 <sqrtf+0x38>
 800caac:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800cab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cab4:	d505      	bpl.n	800cac2 <sqrtf+0x32>
 800cab6:	f7ff fe0b 	bl	800c6d0 <__errno>
 800caba:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800cabe:	2321      	movs	r3, #33	; 0x21
 800cac0:	6003      	str	r3, [r0, #0]
 800cac2:	ecbd 8b02 	vpop	{d8}
 800cac6:	bd08      	pop	{r3, pc}
	...

0800cad0 <__ieee754_pow>:
 800cad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cad4:	ed2d 8b06 	vpush	{d8-d10}
 800cad8:	b089      	sub	sp, #36	; 0x24
 800cada:	ed8d 1b00 	vstr	d1, [sp]
 800cade:	e9dd 2900 	ldrd	r2, r9, [sp]
 800cae2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800cae6:	ea58 0102 	orrs.w	r1, r8, r2
 800caea:	ec57 6b10 	vmov	r6, r7, d0
 800caee:	d115      	bne.n	800cb1c <__ieee754_pow+0x4c>
 800caf0:	19b3      	adds	r3, r6, r6
 800caf2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800caf6:	4152      	adcs	r2, r2
 800caf8:	4299      	cmp	r1, r3
 800cafa:	4b89      	ldr	r3, [pc, #548]	; (800cd20 <__ieee754_pow+0x250>)
 800cafc:	4193      	sbcs	r3, r2
 800cafe:	f080 84d2 	bcs.w	800d4a6 <__ieee754_pow+0x9d6>
 800cb02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb06:	4630      	mov	r0, r6
 800cb08:	4639      	mov	r1, r7
 800cb0a:	f7f3 fb6b 	bl	80001e4 <__adddf3>
 800cb0e:	ec41 0b10 	vmov	d0, r0, r1
 800cb12:	b009      	add	sp, #36	; 0x24
 800cb14:	ecbd 8b06 	vpop	{d8-d10}
 800cb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb1c:	4b81      	ldr	r3, [pc, #516]	; (800cd24 <__ieee754_pow+0x254>)
 800cb1e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800cb22:	429c      	cmp	r4, r3
 800cb24:	ee10 aa10 	vmov	sl, s0
 800cb28:	463d      	mov	r5, r7
 800cb2a:	dc06      	bgt.n	800cb3a <__ieee754_pow+0x6a>
 800cb2c:	d101      	bne.n	800cb32 <__ieee754_pow+0x62>
 800cb2e:	2e00      	cmp	r6, #0
 800cb30:	d1e7      	bne.n	800cb02 <__ieee754_pow+0x32>
 800cb32:	4598      	cmp	r8, r3
 800cb34:	dc01      	bgt.n	800cb3a <__ieee754_pow+0x6a>
 800cb36:	d10f      	bne.n	800cb58 <__ieee754_pow+0x88>
 800cb38:	b172      	cbz	r2, 800cb58 <__ieee754_pow+0x88>
 800cb3a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800cb3e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800cb42:	ea55 050a 	orrs.w	r5, r5, sl
 800cb46:	d1dc      	bne.n	800cb02 <__ieee754_pow+0x32>
 800cb48:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cb4c:	18db      	adds	r3, r3, r3
 800cb4e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800cb52:	4152      	adcs	r2, r2
 800cb54:	429d      	cmp	r5, r3
 800cb56:	e7d0      	b.n	800cafa <__ieee754_pow+0x2a>
 800cb58:	2d00      	cmp	r5, #0
 800cb5a:	da3b      	bge.n	800cbd4 <__ieee754_pow+0x104>
 800cb5c:	4b72      	ldr	r3, [pc, #456]	; (800cd28 <__ieee754_pow+0x258>)
 800cb5e:	4598      	cmp	r8, r3
 800cb60:	dc51      	bgt.n	800cc06 <__ieee754_pow+0x136>
 800cb62:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800cb66:	4598      	cmp	r8, r3
 800cb68:	f340 84ac 	ble.w	800d4c4 <__ieee754_pow+0x9f4>
 800cb6c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cb70:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cb74:	2b14      	cmp	r3, #20
 800cb76:	dd0f      	ble.n	800cb98 <__ieee754_pow+0xc8>
 800cb78:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cb7c:	fa22 f103 	lsr.w	r1, r2, r3
 800cb80:	fa01 f303 	lsl.w	r3, r1, r3
 800cb84:	4293      	cmp	r3, r2
 800cb86:	f040 849d 	bne.w	800d4c4 <__ieee754_pow+0x9f4>
 800cb8a:	f001 0101 	and.w	r1, r1, #1
 800cb8e:	f1c1 0302 	rsb	r3, r1, #2
 800cb92:	9304      	str	r3, [sp, #16]
 800cb94:	b182      	cbz	r2, 800cbb8 <__ieee754_pow+0xe8>
 800cb96:	e05f      	b.n	800cc58 <__ieee754_pow+0x188>
 800cb98:	2a00      	cmp	r2, #0
 800cb9a:	d15b      	bne.n	800cc54 <__ieee754_pow+0x184>
 800cb9c:	f1c3 0314 	rsb	r3, r3, #20
 800cba0:	fa48 f103 	asr.w	r1, r8, r3
 800cba4:	fa01 f303 	lsl.w	r3, r1, r3
 800cba8:	4543      	cmp	r3, r8
 800cbaa:	f040 8488 	bne.w	800d4be <__ieee754_pow+0x9ee>
 800cbae:	f001 0101 	and.w	r1, r1, #1
 800cbb2:	f1c1 0302 	rsb	r3, r1, #2
 800cbb6:	9304      	str	r3, [sp, #16]
 800cbb8:	4b5c      	ldr	r3, [pc, #368]	; (800cd2c <__ieee754_pow+0x25c>)
 800cbba:	4598      	cmp	r8, r3
 800cbbc:	d132      	bne.n	800cc24 <__ieee754_pow+0x154>
 800cbbe:	f1b9 0f00 	cmp.w	r9, #0
 800cbc2:	f280 8478 	bge.w	800d4b6 <__ieee754_pow+0x9e6>
 800cbc6:	4959      	ldr	r1, [pc, #356]	; (800cd2c <__ieee754_pow+0x25c>)
 800cbc8:	4632      	mov	r2, r6
 800cbca:	463b      	mov	r3, r7
 800cbcc:	2000      	movs	r0, #0
 800cbce:	f7f3 fde9 	bl	80007a4 <__aeabi_ddiv>
 800cbd2:	e79c      	b.n	800cb0e <__ieee754_pow+0x3e>
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	9304      	str	r3, [sp, #16]
 800cbd8:	2a00      	cmp	r2, #0
 800cbda:	d13d      	bne.n	800cc58 <__ieee754_pow+0x188>
 800cbdc:	4b51      	ldr	r3, [pc, #324]	; (800cd24 <__ieee754_pow+0x254>)
 800cbde:	4598      	cmp	r8, r3
 800cbe0:	d1ea      	bne.n	800cbb8 <__ieee754_pow+0xe8>
 800cbe2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800cbe6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800cbea:	ea53 030a 	orrs.w	r3, r3, sl
 800cbee:	f000 845a 	beq.w	800d4a6 <__ieee754_pow+0x9d6>
 800cbf2:	4b4f      	ldr	r3, [pc, #316]	; (800cd30 <__ieee754_pow+0x260>)
 800cbf4:	429c      	cmp	r4, r3
 800cbf6:	dd08      	ble.n	800cc0a <__ieee754_pow+0x13a>
 800cbf8:	f1b9 0f00 	cmp.w	r9, #0
 800cbfc:	f2c0 8457 	blt.w	800d4ae <__ieee754_pow+0x9de>
 800cc00:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc04:	e783      	b.n	800cb0e <__ieee754_pow+0x3e>
 800cc06:	2302      	movs	r3, #2
 800cc08:	e7e5      	b.n	800cbd6 <__ieee754_pow+0x106>
 800cc0a:	f1b9 0f00 	cmp.w	r9, #0
 800cc0e:	f04f 0000 	mov.w	r0, #0
 800cc12:	f04f 0100 	mov.w	r1, #0
 800cc16:	f6bf af7a 	bge.w	800cb0e <__ieee754_pow+0x3e>
 800cc1a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800cc1e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cc22:	e774      	b.n	800cb0e <__ieee754_pow+0x3e>
 800cc24:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800cc28:	d106      	bne.n	800cc38 <__ieee754_pow+0x168>
 800cc2a:	4632      	mov	r2, r6
 800cc2c:	463b      	mov	r3, r7
 800cc2e:	4630      	mov	r0, r6
 800cc30:	4639      	mov	r1, r7
 800cc32:	f7f3 fc8d 	bl	8000550 <__aeabi_dmul>
 800cc36:	e76a      	b.n	800cb0e <__ieee754_pow+0x3e>
 800cc38:	4b3e      	ldr	r3, [pc, #248]	; (800cd34 <__ieee754_pow+0x264>)
 800cc3a:	4599      	cmp	r9, r3
 800cc3c:	d10c      	bne.n	800cc58 <__ieee754_pow+0x188>
 800cc3e:	2d00      	cmp	r5, #0
 800cc40:	db0a      	blt.n	800cc58 <__ieee754_pow+0x188>
 800cc42:	ec47 6b10 	vmov	d0, r6, r7
 800cc46:	b009      	add	sp, #36	; 0x24
 800cc48:	ecbd 8b06 	vpop	{d8-d10}
 800cc4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc50:	f000 be7a 	b.w	800d948 <__ieee754_sqrt>
 800cc54:	2300      	movs	r3, #0
 800cc56:	9304      	str	r3, [sp, #16]
 800cc58:	ec47 6b10 	vmov	d0, r6, r7
 800cc5c:	f001 ff20 	bl	800eaa0 <fabs>
 800cc60:	ec51 0b10 	vmov	r0, r1, d0
 800cc64:	f1ba 0f00 	cmp.w	sl, #0
 800cc68:	d129      	bne.n	800ccbe <__ieee754_pow+0x1ee>
 800cc6a:	b124      	cbz	r4, 800cc76 <__ieee754_pow+0x1a6>
 800cc6c:	4b2f      	ldr	r3, [pc, #188]	; (800cd2c <__ieee754_pow+0x25c>)
 800cc6e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d123      	bne.n	800ccbe <__ieee754_pow+0x1ee>
 800cc76:	f1b9 0f00 	cmp.w	r9, #0
 800cc7a:	da05      	bge.n	800cc88 <__ieee754_pow+0x1b8>
 800cc7c:	4602      	mov	r2, r0
 800cc7e:	460b      	mov	r3, r1
 800cc80:	2000      	movs	r0, #0
 800cc82:	492a      	ldr	r1, [pc, #168]	; (800cd2c <__ieee754_pow+0x25c>)
 800cc84:	f7f3 fd8e 	bl	80007a4 <__aeabi_ddiv>
 800cc88:	2d00      	cmp	r5, #0
 800cc8a:	f6bf af40 	bge.w	800cb0e <__ieee754_pow+0x3e>
 800cc8e:	9b04      	ldr	r3, [sp, #16]
 800cc90:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800cc94:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cc98:	4323      	orrs	r3, r4
 800cc9a:	d108      	bne.n	800ccae <__ieee754_pow+0x1de>
 800cc9c:	4602      	mov	r2, r0
 800cc9e:	460b      	mov	r3, r1
 800cca0:	4610      	mov	r0, r2
 800cca2:	4619      	mov	r1, r3
 800cca4:	f7f3 fa9c 	bl	80001e0 <__aeabi_dsub>
 800cca8:	4602      	mov	r2, r0
 800ccaa:	460b      	mov	r3, r1
 800ccac:	e78f      	b.n	800cbce <__ieee754_pow+0xfe>
 800ccae:	9b04      	ldr	r3, [sp, #16]
 800ccb0:	2b01      	cmp	r3, #1
 800ccb2:	f47f af2c 	bne.w	800cb0e <__ieee754_pow+0x3e>
 800ccb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ccba:	4619      	mov	r1, r3
 800ccbc:	e727      	b.n	800cb0e <__ieee754_pow+0x3e>
 800ccbe:	0feb      	lsrs	r3, r5, #31
 800ccc0:	3b01      	subs	r3, #1
 800ccc2:	9306      	str	r3, [sp, #24]
 800ccc4:	9a06      	ldr	r2, [sp, #24]
 800ccc6:	9b04      	ldr	r3, [sp, #16]
 800ccc8:	4313      	orrs	r3, r2
 800ccca:	d102      	bne.n	800ccd2 <__ieee754_pow+0x202>
 800cccc:	4632      	mov	r2, r6
 800ccce:	463b      	mov	r3, r7
 800ccd0:	e7e6      	b.n	800cca0 <__ieee754_pow+0x1d0>
 800ccd2:	4b19      	ldr	r3, [pc, #100]	; (800cd38 <__ieee754_pow+0x268>)
 800ccd4:	4598      	cmp	r8, r3
 800ccd6:	f340 80fb 	ble.w	800ced0 <__ieee754_pow+0x400>
 800ccda:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ccde:	4598      	cmp	r8, r3
 800cce0:	4b13      	ldr	r3, [pc, #76]	; (800cd30 <__ieee754_pow+0x260>)
 800cce2:	dd0c      	ble.n	800ccfe <__ieee754_pow+0x22e>
 800cce4:	429c      	cmp	r4, r3
 800cce6:	dc0f      	bgt.n	800cd08 <__ieee754_pow+0x238>
 800cce8:	f1b9 0f00 	cmp.w	r9, #0
 800ccec:	da0f      	bge.n	800cd0e <__ieee754_pow+0x23e>
 800ccee:	2000      	movs	r0, #0
 800ccf0:	b009      	add	sp, #36	; 0x24
 800ccf2:	ecbd 8b06 	vpop	{d8-d10}
 800ccf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccfa:	f001 bea6 	b.w	800ea4a <__math_oflow>
 800ccfe:	429c      	cmp	r4, r3
 800cd00:	dbf2      	blt.n	800cce8 <__ieee754_pow+0x218>
 800cd02:	4b0a      	ldr	r3, [pc, #40]	; (800cd2c <__ieee754_pow+0x25c>)
 800cd04:	429c      	cmp	r4, r3
 800cd06:	dd19      	ble.n	800cd3c <__ieee754_pow+0x26c>
 800cd08:	f1b9 0f00 	cmp.w	r9, #0
 800cd0c:	dcef      	bgt.n	800ccee <__ieee754_pow+0x21e>
 800cd0e:	2000      	movs	r0, #0
 800cd10:	b009      	add	sp, #36	; 0x24
 800cd12:	ecbd 8b06 	vpop	{d8-d10}
 800cd16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd1a:	f001 be8d 	b.w	800ea38 <__math_uflow>
 800cd1e:	bf00      	nop
 800cd20:	fff00000 	.word	0xfff00000
 800cd24:	7ff00000 	.word	0x7ff00000
 800cd28:	433fffff 	.word	0x433fffff
 800cd2c:	3ff00000 	.word	0x3ff00000
 800cd30:	3fefffff 	.word	0x3fefffff
 800cd34:	3fe00000 	.word	0x3fe00000
 800cd38:	41e00000 	.word	0x41e00000
 800cd3c:	4b60      	ldr	r3, [pc, #384]	; (800cec0 <__ieee754_pow+0x3f0>)
 800cd3e:	2200      	movs	r2, #0
 800cd40:	f7f3 fa4e 	bl	80001e0 <__aeabi_dsub>
 800cd44:	a354      	add	r3, pc, #336	; (adr r3, 800ce98 <__ieee754_pow+0x3c8>)
 800cd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd4a:	4604      	mov	r4, r0
 800cd4c:	460d      	mov	r5, r1
 800cd4e:	f7f3 fbff 	bl	8000550 <__aeabi_dmul>
 800cd52:	a353      	add	r3, pc, #332	; (adr r3, 800cea0 <__ieee754_pow+0x3d0>)
 800cd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd58:	4606      	mov	r6, r0
 800cd5a:	460f      	mov	r7, r1
 800cd5c:	4620      	mov	r0, r4
 800cd5e:	4629      	mov	r1, r5
 800cd60:	f7f3 fbf6 	bl	8000550 <__aeabi_dmul>
 800cd64:	4b57      	ldr	r3, [pc, #348]	; (800cec4 <__ieee754_pow+0x3f4>)
 800cd66:	4682      	mov	sl, r0
 800cd68:	468b      	mov	fp, r1
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	4629      	mov	r1, r5
 800cd70:	f7f3 fbee 	bl	8000550 <__aeabi_dmul>
 800cd74:	4602      	mov	r2, r0
 800cd76:	460b      	mov	r3, r1
 800cd78:	a14b      	add	r1, pc, #300	; (adr r1, 800cea8 <__ieee754_pow+0x3d8>)
 800cd7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd7e:	f7f3 fa2f 	bl	80001e0 <__aeabi_dsub>
 800cd82:	4622      	mov	r2, r4
 800cd84:	462b      	mov	r3, r5
 800cd86:	f7f3 fbe3 	bl	8000550 <__aeabi_dmul>
 800cd8a:	4602      	mov	r2, r0
 800cd8c:	460b      	mov	r3, r1
 800cd8e:	2000      	movs	r0, #0
 800cd90:	494d      	ldr	r1, [pc, #308]	; (800cec8 <__ieee754_pow+0x3f8>)
 800cd92:	f7f3 fa25 	bl	80001e0 <__aeabi_dsub>
 800cd96:	4622      	mov	r2, r4
 800cd98:	4680      	mov	r8, r0
 800cd9a:	4689      	mov	r9, r1
 800cd9c:	462b      	mov	r3, r5
 800cd9e:	4620      	mov	r0, r4
 800cda0:	4629      	mov	r1, r5
 800cda2:	f7f3 fbd5 	bl	8000550 <__aeabi_dmul>
 800cda6:	4602      	mov	r2, r0
 800cda8:	460b      	mov	r3, r1
 800cdaa:	4640      	mov	r0, r8
 800cdac:	4649      	mov	r1, r9
 800cdae:	f7f3 fbcf 	bl	8000550 <__aeabi_dmul>
 800cdb2:	a33f      	add	r3, pc, #252	; (adr r3, 800ceb0 <__ieee754_pow+0x3e0>)
 800cdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb8:	f7f3 fbca 	bl	8000550 <__aeabi_dmul>
 800cdbc:	4602      	mov	r2, r0
 800cdbe:	460b      	mov	r3, r1
 800cdc0:	4650      	mov	r0, sl
 800cdc2:	4659      	mov	r1, fp
 800cdc4:	f7f3 fa0c 	bl	80001e0 <__aeabi_dsub>
 800cdc8:	4602      	mov	r2, r0
 800cdca:	460b      	mov	r3, r1
 800cdcc:	4680      	mov	r8, r0
 800cdce:	4689      	mov	r9, r1
 800cdd0:	4630      	mov	r0, r6
 800cdd2:	4639      	mov	r1, r7
 800cdd4:	f7f3 fa06 	bl	80001e4 <__adddf3>
 800cdd8:	2000      	movs	r0, #0
 800cdda:	4632      	mov	r2, r6
 800cddc:	463b      	mov	r3, r7
 800cdde:	4604      	mov	r4, r0
 800cde0:	460d      	mov	r5, r1
 800cde2:	f7f3 f9fd 	bl	80001e0 <__aeabi_dsub>
 800cde6:	4602      	mov	r2, r0
 800cde8:	460b      	mov	r3, r1
 800cdea:	4640      	mov	r0, r8
 800cdec:	4649      	mov	r1, r9
 800cdee:	f7f3 f9f7 	bl	80001e0 <__aeabi_dsub>
 800cdf2:	9b04      	ldr	r3, [sp, #16]
 800cdf4:	9a06      	ldr	r2, [sp, #24]
 800cdf6:	3b01      	subs	r3, #1
 800cdf8:	4313      	orrs	r3, r2
 800cdfa:	4682      	mov	sl, r0
 800cdfc:	468b      	mov	fp, r1
 800cdfe:	f040 81e7 	bne.w	800d1d0 <__ieee754_pow+0x700>
 800ce02:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ceb8 <__ieee754_pow+0x3e8>
 800ce06:	eeb0 8a47 	vmov.f32	s16, s14
 800ce0a:	eef0 8a67 	vmov.f32	s17, s15
 800ce0e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ce12:	2600      	movs	r6, #0
 800ce14:	4632      	mov	r2, r6
 800ce16:	463b      	mov	r3, r7
 800ce18:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce1c:	f7f3 f9e0 	bl	80001e0 <__aeabi_dsub>
 800ce20:	4622      	mov	r2, r4
 800ce22:	462b      	mov	r3, r5
 800ce24:	f7f3 fb94 	bl	8000550 <__aeabi_dmul>
 800ce28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce2c:	4680      	mov	r8, r0
 800ce2e:	4689      	mov	r9, r1
 800ce30:	4650      	mov	r0, sl
 800ce32:	4659      	mov	r1, fp
 800ce34:	f7f3 fb8c 	bl	8000550 <__aeabi_dmul>
 800ce38:	4602      	mov	r2, r0
 800ce3a:	460b      	mov	r3, r1
 800ce3c:	4640      	mov	r0, r8
 800ce3e:	4649      	mov	r1, r9
 800ce40:	f7f3 f9d0 	bl	80001e4 <__adddf3>
 800ce44:	4632      	mov	r2, r6
 800ce46:	463b      	mov	r3, r7
 800ce48:	4680      	mov	r8, r0
 800ce4a:	4689      	mov	r9, r1
 800ce4c:	4620      	mov	r0, r4
 800ce4e:	4629      	mov	r1, r5
 800ce50:	f7f3 fb7e 	bl	8000550 <__aeabi_dmul>
 800ce54:	460b      	mov	r3, r1
 800ce56:	4604      	mov	r4, r0
 800ce58:	460d      	mov	r5, r1
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	4649      	mov	r1, r9
 800ce5e:	4640      	mov	r0, r8
 800ce60:	f7f3 f9c0 	bl	80001e4 <__adddf3>
 800ce64:	4b19      	ldr	r3, [pc, #100]	; (800cecc <__ieee754_pow+0x3fc>)
 800ce66:	4299      	cmp	r1, r3
 800ce68:	ec45 4b19 	vmov	d9, r4, r5
 800ce6c:	4606      	mov	r6, r0
 800ce6e:	460f      	mov	r7, r1
 800ce70:	468b      	mov	fp, r1
 800ce72:	f340 82f1 	ble.w	800d458 <__ieee754_pow+0x988>
 800ce76:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ce7a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ce7e:	4303      	orrs	r3, r0
 800ce80:	f000 81e4 	beq.w	800d24c <__ieee754_pow+0x77c>
 800ce84:	ec51 0b18 	vmov	r0, r1, d8
 800ce88:	2200      	movs	r2, #0
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	f7f3 fdd2 	bl	8000a34 <__aeabi_dcmplt>
 800ce90:	3800      	subs	r0, #0
 800ce92:	bf18      	it	ne
 800ce94:	2001      	movne	r0, #1
 800ce96:	e72b      	b.n	800ccf0 <__ieee754_pow+0x220>
 800ce98:	60000000 	.word	0x60000000
 800ce9c:	3ff71547 	.word	0x3ff71547
 800cea0:	f85ddf44 	.word	0xf85ddf44
 800cea4:	3e54ae0b 	.word	0x3e54ae0b
 800cea8:	55555555 	.word	0x55555555
 800ceac:	3fd55555 	.word	0x3fd55555
 800ceb0:	652b82fe 	.word	0x652b82fe
 800ceb4:	3ff71547 	.word	0x3ff71547
 800ceb8:	00000000 	.word	0x00000000
 800cebc:	bff00000 	.word	0xbff00000
 800cec0:	3ff00000 	.word	0x3ff00000
 800cec4:	3fd00000 	.word	0x3fd00000
 800cec8:	3fe00000 	.word	0x3fe00000
 800cecc:	408fffff 	.word	0x408fffff
 800ced0:	4bd5      	ldr	r3, [pc, #852]	; (800d228 <__ieee754_pow+0x758>)
 800ced2:	402b      	ands	r3, r5
 800ced4:	2200      	movs	r2, #0
 800ced6:	b92b      	cbnz	r3, 800cee4 <__ieee754_pow+0x414>
 800ced8:	4bd4      	ldr	r3, [pc, #848]	; (800d22c <__ieee754_pow+0x75c>)
 800ceda:	f7f3 fb39 	bl	8000550 <__aeabi_dmul>
 800cede:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800cee2:	460c      	mov	r4, r1
 800cee4:	1523      	asrs	r3, r4, #20
 800cee6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ceea:	4413      	add	r3, r2
 800ceec:	9305      	str	r3, [sp, #20]
 800ceee:	4bd0      	ldr	r3, [pc, #832]	; (800d230 <__ieee754_pow+0x760>)
 800cef0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800cef4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800cef8:	429c      	cmp	r4, r3
 800cefa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cefe:	dd08      	ble.n	800cf12 <__ieee754_pow+0x442>
 800cf00:	4bcc      	ldr	r3, [pc, #816]	; (800d234 <__ieee754_pow+0x764>)
 800cf02:	429c      	cmp	r4, r3
 800cf04:	f340 8162 	ble.w	800d1cc <__ieee754_pow+0x6fc>
 800cf08:	9b05      	ldr	r3, [sp, #20]
 800cf0a:	3301      	adds	r3, #1
 800cf0c:	9305      	str	r3, [sp, #20]
 800cf0e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800cf12:	2400      	movs	r4, #0
 800cf14:	00e3      	lsls	r3, r4, #3
 800cf16:	9307      	str	r3, [sp, #28]
 800cf18:	4bc7      	ldr	r3, [pc, #796]	; (800d238 <__ieee754_pow+0x768>)
 800cf1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cf1e:	ed93 7b00 	vldr	d7, [r3]
 800cf22:	4629      	mov	r1, r5
 800cf24:	ec53 2b17 	vmov	r2, r3, d7
 800cf28:	eeb0 9a47 	vmov.f32	s18, s14
 800cf2c:	eef0 9a67 	vmov.f32	s19, s15
 800cf30:	4682      	mov	sl, r0
 800cf32:	f7f3 f955 	bl	80001e0 <__aeabi_dsub>
 800cf36:	4652      	mov	r2, sl
 800cf38:	4606      	mov	r6, r0
 800cf3a:	460f      	mov	r7, r1
 800cf3c:	462b      	mov	r3, r5
 800cf3e:	ec51 0b19 	vmov	r0, r1, d9
 800cf42:	f7f3 f94f 	bl	80001e4 <__adddf3>
 800cf46:	4602      	mov	r2, r0
 800cf48:	460b      	mov	r3, r1
 800cf4a:	2000      	movs	r0, #0
 800cf4c:	49bb      	ldr	r1, [pc, #748]	; (800d23c <__ieee754_pow+0x76c>)
 800cf4e:	f7f3 fc29 	bl	80007a4 <__aeabi_ddiv>
 800cf52:	ec41 0b1a 	vmov	d10, r0, r1
 800cf56:	4602      	mov	r2, r0
 800cf58:	460b      	mov	r3, r1
 800cf5a:	4630      	mov	r0, r6
 800cf5c:	4639      	mov	r1, r7
 800cf5e:	f7f3 faf7 	bl	8000550 <__aeabi_dmul>
 800cf62:	2300      	movs	r3, #0
 800cf64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf68:	9302      	str	r3, [sp, #8]
 800cf6a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cf6e:	46ab      	mov	fp, r5
 800cf70:	106d      	asrs	r5, r5, #1
 800cf72:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800cf76:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800cf7a:	ec41 0b18 	vmov	d8, r0, r1
 800cf7e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800cf82:	2200      	movs	r2, #0
 800cf84:	4640      	mov	r0, r8
 800cf86:	4649      	mov	r1, r9
 800cf88:	4614      	mov	r4, r2
 800cf8a:	461d      	mov	r5, r3
 800cf8c:	f7f3 fae0 	bl	8000550 <__aeabi_dmul>
 800cf90:	4602      	mov	r2, r0
 800cf92:	460b      	mov	r3, r1
 800cf94:	4630      	mov	r0, r6
 800cf96:	4639      	mov	r1, r7
 800cf98:	f7f3 f922 	bl	80001e0 <__aeabi_dsub>
 800cf9c:	ec53 2b19 	vmov	r2, r3, d9
 800cfa0:	4606      	mov	r6, r0
 800cfa2:	460f      	mov	r7, r1
 800cfa4:	4620      	mov	r0, r4
 800cfa6:	4629      	mov	r1, r5
 800cfa8:	f7f3 f91a 	bl	80001e0 <__aeabi_dsub>
 800cfac:	4602      	mov	r2, r0
 800cfae:	460b      	mov	r3, r1
 800cfb0:	4650      	mov	r0, sl
 800cfb2:	4659      	mov	r1, fp
 800cfb4:	f7f3 f914 	bl	80001e0 <__aeabi_dsub>
 800cfb8:	4642      	mov	r2, r8
 800cfba:	464b      	mov	r3, r9
 800cfbc:	f7f3 fac8 	bl	8000550 <__aeabi_dmul>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	460b      	mov	r3, r1
 800cfc4:	4630      	mov	r0, r6
 800cfc6:	4639      	mov	r1, r7
 800cfc8:	f7f3 f90a 	bl	80001e0 <__aeabi_dsub>
 800cfcc:	ec53 2b1a 	vmov	r2, r3, d10
 800cfd0:	f7f3 fabe 	bl	8000550 <__aeabi_dmul>
 800cfd4:	ec53 2b18 	vmov	r2, r3, d8
 800cfd8:	ec41 0b19 	vmov	d9, r0, r1
 800cfdc:	ec51 0b18 	vmov	r0, r1, d8
 800cfe0:	f7f3 fab6 	bl	8000550 <__aeabi_dmul>
 800cfe4:	a37c      	add	r3, pc, #496	; (adr r3, 800d1d8 <__ieee754_pow+0x708>)
 800cfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfea:	4604      	mov	r4, r0
 800cfec:	460d      	mov	r5, r1
 800cfee:	f7f3 faaf 	bl	8000550 <__aeabi_dmul>
 800cff2:	a37b      	add	r3, pc, #492	; (adr r3, 800d1e0 <__ieee754_pow+0x710>)
 800cff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff8:	f7f3 f8f4 	bl	80001e4 <__adddf3>
 800cffc:	4622      	mov	r2, r4
 800cffe:	462b      	mov	r3, r5
 800d000:	f7f3 faa6 	bl	8000550 <__aeabi_dmul>
 800d004:	a378      	add	r3, pc, #480	; (adr r3, 800d1e8 <__ieee754_pow+0x718>)
 800d006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d00a:	f7f3 f8eb 	bl	80001e4 <__adddf3>
 800d00e:	4622      	mov	r2, r4
 800d010:	462b      	mov	r3, r5
 800d012:	f7f3 fa9d 	bl	8000550 <__aeabi_dmul>
 800d016:	a376      	add	r3, pc, #472	; (adr r3, 800d1f0 <__ieee754_pow+0x720>)
 800d018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d01c:	f7f3 f8e2 	bl	80001e4 <__adddf3>
 800d020:	4622      	mov	r2, r4
 800d022:	462b      	mov	r3, r5
 800d024:	f7f3 fa94 	bl	8000550 <__aeabi_dmul>
 800d028:	a373      	add	r3, pc, #460	; (adr r3, 800d1f8 <__ieee754_pow+0x728>)
 800d02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d02e:	f7f3 f8d9 	bl	80001e4 <__adddf3>
 800d032:	4622      	mov	r2, r4
 800d034:	462b      	mov	r3, r5
 800d036:	f7f3 fa8b 	bl	8000550 <__aeabi_dmul>
 800d03a:	a371      	add	r3, pc, #452	; (adr r3, 800d200 <__ieee754_pow+0x730>)
 800d03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d040:	f7f3 f8d0 	bl	80001e4 <__adddf3>
 800d044:	4622      	mov	r2, r4
 800d046:	4606      	mov	r6, r0
 800d048:	460f      	mov	r7, r1
 800d04a:	462b      	mov	r3, r5
 800d04c:	4620      	mov	r0, r4
 800d04e:	4629      	mov	r1, r5
 800d050:	f7f3 fa7e 	bl	8000550 <__aeabi_dmul>
 800d054:	4602      	mov	r2, r0
 800d056:	460b      	mov	r3, r1
 800d058:	4630      	mov	r0, r6
 800d05a:	4639      	mov	r1, r7
 800d05c:	f7f3 fa78 	bl	8000550 <__aeabi_dmul>
 800d060:	4642      	mov	r2, r8
 800d062:	4604      	mov	r4, r0
 800d064:	460d      	mov	r5, r1
 800d066:	464b      	mov	r3, r9
 800d068:	ec51 0b18 	vmov	r0, r1, d8
 800d06c:	f7f3 f8ba 	bl	80001e4 <__adddf3>
 800d070:	ec53 2b19 	vmov	r2, r3, d9
 800d074:	f7f3 fa6c 	bl	8000550 <__aeabi_dmul>
 800d078:	4622      	mov	r2, r4
 800d07a:	462b      	mov	r3, r5
 800d07c:	f7f3 f8b2 	bl	80001e4 <__adddf3>
 800d080:	4642      	mov	r2, r8
 800d082:	4682      	mov	sl, r0
 800d084:	468b      	mov	fp, r1
 800d086:	464b      	mov	r3, r9
 800d088:	4640      	mov	r0, r8
 800d08a:	4649      	mov	r1, r9
 800d08c:	f7f3 fa60 	bl	8000550 <__aeabi_dmul>
 800d090:	4b6b      	ldr	r3, [pc, #428]	; (800d240 <__ieee754_pow+0x770>)
 800d092:	2200      	movs	r2, #0
 800d094:	4606      	mov	r6, r0
 800d096:	460f      	mov	r7, r1
 800d098:	f7f3 f8a4 	bl	80001e4 <__adddf3>
 800d09c:	4652      	mov	r2, sl
 800d09e:	465b      	mov	r3, fp
 800d0a0:	f7f3 f8a0 	bl	80001e4 <__adddf3>
 800d0a4:	2000      	movs	r0, #0
 800d0a6:	4604      	mov	r4, r0
 800d0a8:	460d      	mov	r5, r1
 800d0aa:	4602      	mov	r2, r0
 800d0ac:	460b      	mov	r3, r1
 800d0ae:	4640      	mov	r0, r8
 800d0b0:	4649      	mov	r1, r9
 800d0b2:	f7f3 fa4d 	bl	8000550 <__aeabi_dmul>
 800d0b6:	4b62      	ldr	r3, [pc, #392]	; (800d240 <__ieee754_pow+0x770>)
 800d0b8:	4680      	mov	r8, r0
 800d0ba:	4689      	mov	r9, r1
 800d0bc:	2200      	movs	r2, #0
 800d0be:	4620      	mov	r0, r4
 800d0c0:	4629      	mov	r1, r5
 800d0c2:	f7f3 f88d 	bl	80001e0 <__aeabi_dsub>
 800d0c6:	4632      	mov	r2, r6
 800d0c8:	463b      	mov	r3, r7
 800d0ca:	f7f3 f889 	bl	80001e0 <__aeabi_dsub>
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	460b      	mov	r3, r1
 800d0d2:	4650      	mov	r0, sl
 800d0d4:	4659      	mov	r1, fp
 800d0d6:	f7f3 f883 	bl	80001e0 <__aeabi_dsub>
 800d0da:	ec53 2b18 	vmov	r2, r3, d8
 800d0de:	f7f3 fa37 	bl	8000550 <__aeabi_dmul>
 800d0e2:	4622      	mov	r2, r4
 800d0e4:	4606      	mov	r6, r0
 800d0e6:	460f      	mov	r7, r1
 800d0e8:	462b      	mov	r3, r5
 800d0ea:	ec51 0b19 	vmov	r0, r1, d9
 800d0ee:	f7f3 fa2f 	bl	8000550 <__aeabi_dmul>
 800d0f2:	4602      	mov	r2, r0
 800d0f4:	460b      	mov	r3, r1
 800d0f6:	4630      	mov	r0, r6
 800d0f8:	4639      	mov	r1, r7
 800d0fa:	f7f3 f873 	bl	80001e4 <__adddf3>
 800d0fe:	4606      	mov	r6, r0
 800d100:	460f      	mov	r7, r1
 800d102:	4602      	mov	r2, r0
 800d104:	460b      	mov	r3, r1
 800d106:	4640      	mov	r0, r8
 800d108:	4649      	mov	r1, r9
 800d10a:	f7f3 f86b 	bl	80001e4 <__adddf3>
 800d10e:	a33e      	add	r3, pc, #248	; (adr r3, 800d208 <__ieee754_pow+0x738>)
 800d110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d114:	2000      	movs	r0, #0
 800d116:	4604      	mov	r4, r0
 800d118:	460d      	mov	r5, r1
 800d11a:	f7f3 fa19 	bl	8000550 <__aeabi_dmul>
 800d11e:	4642      	mov	r2, r8
 800d120:	ec41 0b18 	vmov	d8, r0, r1
 800d124:	464b      	mov	r3, r9
 800d126:	4620      	mov	r0, r4
 800d128:	4629      	mov	r1, r5
 800d12a:	f7f3 f859 	bl	80001e0 <__aeabi_dsub>
 800d12e:	4602      	mov	r2, r0
 800d130:	460b      	mov	r3, r1
 800d132:	4630      	mov	r0, r6
 800d134:	4639      	mov	r1, r7
 800d136:	f7f3 f853 	bl	80001e0 <__aeabi_dsub>
 800d13a:	a335      	add	r3, pc, #212	; (adr r3, 800d210 <__ieee754_pow+0x740>)
 800d13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d140:	f7f3 fa06 	bl	8000550 <__aeabi_dmul>
 800d144:	a334      	add	r3, pc, #208	; (adr r3, 800d218 <__ieee754_pow+0x748>)
 800d146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d14a:	4606      	mov	r6, r0
 800d14c:	460f      	mov	r7, r1
 800d14e:	4620      	mov	r0, r4
 800d150:	4629      	mov	r1, r5
 800d152:	f7f3 f9fd 	bl	8000550 <__aeabi_dmul>
 800d156:	4602      	mov	r2, r0
 800d158:	460b      	mov	r3, r1
 800d15a:	4630      	mov	r0, r6
 800d15c:	4639      	mov	r1, r7
 800d15e:	f7f3 f841 	bl	80001e4 <__adddf3>
 800d162:	9a07      	ldr	r2, [sp, #28]
 800d164:	4b37      	ldr	r3, [pc, #220]	; (800d244 <__ieee754_pow+0x774>)
 800d166:	4413      	add	r3, r2
 800d168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d16c:	f7f3 f83a 	bl	80001e4 <__adddf3>
 800d170:	4682      	mov	sl, r0
 800d172:	9805      	ldr	r0, [sp, #20]
 800d174:	468b      	mov	fp, r1
 800d176:	f7f3 f981 	bl	800047c <__aeabi_i2d>
 800d17a:	9a07      	ldr	r2, [sp, #28]
 800d17c:	4b32      	ldr	r3, [pc, #200]	; (800d248 <__ieee754_pow+0x778>)
 800d17e:	4413      	add	r3, r2
 800d180:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d184:	4606      	mov	r6, r0
 800d186:	460f      	mov	r7, r1
 800d188:	4652      	mov	r2, sl
 800d18a:	465b      	mov	r3, fp
 800d18c:	ec51 0b18 	vmov	r0, r1, d8
 800d190:	f7f3 f828 	bl	80001e4 <__adddf3>
 800d194:	4642      	mov	r2, r8
 800d196:	464b      	mov	r3, r9
 800d198:	f7f3 f824 	bl	80001e4 <__adddf3>
 800d19c:	4632      	mov	r2, r6
 800d19e:	463b      	mov	r3, r7
 800d1a0:	f7f3 f820 	bl	80001e4 <__adddf3>
 800d1a4:	2000      	movs	r0, #0
 800d1a6:	4632      	mov	r2, r6
 800d1a8:	463b      	mov	r3, r7
 800d1aa:	4604      	mov	r4, r0
 800d1ac:	460d      	mov	r5, r1
 800d1ae:	f7f3 f817 	bl	80001e0 <__aeabi_dsub>
 800d1b2:	4642      	mov	r2, r8
 800d1b4:	464b      	mov	r3, r9
 800d1b6:	f7f3 f813 	bl	80001e0 <__aeabi_dsub>
 800d1ba:	ec53 2b18 	vmov	r2, r3, d8
 800d1be:	f7f3 f80f 	bl	80001e0 <__aeabi_dsub>
 800d1c2:	4602      	mov	r2, r0
 800d1c4:	460b      	mov	r3, r1
 800d1c6:	4650      	mov	r0, sl
 800d1c8:	4659      	mov	r1, fp
 800d1ca:	e610      	b.n	800cdee <__ieee754_pow+0x31e>
 800d1cc:	2401      	movs	r4, #1
 800d1ce:	e6a1      	b.n	800cf14 <__ieee754_pow+0x444>
 800d1d0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800d220 <__ieee754_pow+0x750>
 800d1d4:	e617      	b.n	800ce06 <__ieee754_pow+0x336>
 800d1d6:	bf00      	nop
 800d1d8:	4a454eef 	.word	0x4a454eef
 800d1dc:	3fca7e28 	.word	0x3fca7e28
 800d1e0:	93c9db65 	.word	0x93c9db65
 800d1e4:	3fcd864a 	.word	0x3fcd864a
 800d1e8:	a91d4101 	.word	0xa91d4101
 800d1ec:	3fd17460 	.word	0x3fd17460
 800d1f0:	518f264d 	.word	0x518f264d
 800d1f4:	3fd55555 	.word	0x3fd55555
 800d1f8:	db6fabff 	.word	0xdb6fabff
 800d1fc:	3fdb6db6 	.word	0x3fdb6db6
 800d200:	33333303 	.word	0x33333303
 800d204:	3fe33333 	.word	0x3fe33333
 800d208:	e0000000 	.word	0xe0000000
 800d20c:	3feec709 	.word	0x3feec709
 800d210:	dc3a03fd 	.word	0xdc3a03fd
 800d214:	3feec709 	.word	0x3feec709
 800d218:	145b01f5 	.word	0x145b01f5
 800d21c:	be3e2fe0 	.word	0xbe3e2fe0
 800d220:	00000000 	.word	0x00000000
 800d224:	3ff00000 	.word	0x3ff00000
 800d228:	7ff00000 	.word	0x7ff00000
 800d22c:	43400000 	.word	0x43400000
 800d230:	0003988e 	.word	0x0003988e
 800d234:	000bb679 	.word	0x000bb679
 800d238:	0800eec8 	.word	0x0800eec8
 800d23c:	3ff00000 	.word	0x3ff00000
 800d240:	40080000 	.word	0x40080000
 800d244:	0800eee8 	.word	0x0800eee8
 800d248:	0800eed8 	.word	0x0800eed8
 800d24c:	a3b5      	add	r3, pc, #724	; (adr r3, 800d524 <__ieee754_pow+0xa54>)
 800d24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d252:	4640      	mov	r0, r8
 800d254:	4649      	mov	r1, r9
 800d256:	f7f2 ffc5 	bl	80001e4 <__adddf3>
 800d25a:	4622      	mov	r2, r4
 800d25c:	ec41 0b1a 	vmov	d10, r0, r1
 800d260:	462b      	mov	r3, r5
 800d262:	4630      	mov	r0, r6
 800d264:	4639      	mov	r1, r7
 800d266:	f7f2 ffbb 	bl	80001e0 <__aeabi_dsub>
 800d26a:	4602      	mov	r2, r0
 800d26c:	460b      	mov	r3, r1
 800d26e:	ec51 0b1a 	vmov	r0, r1, d10
 800d272:	f7f3 fbfd 	bl	8000a70 <__aeabi_dcmpgt>
 800d276:	2800      	cmp	r0, #0
 800d278:	f47f ae04 	bne.w	800ce84 <__ieee754_pow+0x3b4>
 800d27c:	4aa4      	ldr	r2, [pc, #656]	; (800d510 <__ieee754_pow+0xa40>)
 800d27e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d282:	4293      	cmp	r3, r2
 800d284:	f340 8108 	ble.w	800d498 <__ieee754_pow+0x9c8>
 800d288:	151b      	asrs	r3, r3, #20
 800d28a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d28e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d292:	fa4a f303 	asr.w	r3, sl, r3
 800d296:	445b      	add	r3, fp
 800d298:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d29c:	4e9d      	ldr	r6, [pc, #628]	; (800d514 <__ieee754_pow+0xa44>)
 800d29e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d2a2:	4116      	asrs	r6, r2
 800d2a4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800d2a8:	2000      	movs	r0, #0
 800d2aa:	ea23 0106 	bic.w	r1, r3, r6
 800d2ae:	f1c2 0214 	rsb	r2, r2, #20
 800d2b2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d2b6:	fa4a fa02 	asr.w	sl, sl, r2
 800d2ba:	f1bb 0f00 	cmp.w	fp, #0
 800d2be:	4602      	mov	r2, r0
 800d2c0:	460b      	mov	r3, r1
 800d2c2:	4620      	mov	r0, r4
 800d2c4:	4629      	mov	r1, r5
 800d2c6:	bfb8      	it	lt
 800d2c8:	f1ca 0a00 	rsblt	sl, sl, #0
 800d2cc:	f7f2 ff88 	bl	80001e0 <__aeabi_dsub>
 800d2d0:	ec41 0b19 	vmov	d9, r0, r1
 800d2d4:	4642      	mov	r2, r8
 800d2d6:	464b      	mov	r3, r9
 800d2d8:	ec51 0b19 	vmov	r0, r1, d9
 800d2dc:	f7f2 ff82 	bl	80001e4 <__adddf3>
 800d2e0:	a37b      	add	r3, pc, #492	; (adr r3, 800d4d0 <__ieee754_pow+0xa00>)
 800d2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2e6:	2000      	movs	r0, #0
 800d2e8:	4604      	mov	r4, r0
 800d2ea:	460d      	mov	r5, r1
 800d2ec:	f7f3 f930 	bl	8000550 <__aeabi_dmul>
 800d2f0:	ec53 2b19 	vmov	r2, r3, d9
 800d2f4:	4606      	mov	r6, r0
 800d2f6:	460f      	mov	r7, r1
 800d2f8:	4620      	mov	r0, r4
 800d2fa:	4629      	mov	r1, r5
 800d2fc:	f7f2 ff70 	bl	80001e0 <__aeabi_dsub>
 800d300:	4602      	mov	r2, r0
 800d302:	460b      	mov	r3, r1
 800d304:	4640      	mov	r0, r8
 800d306:	4649      	mov	r1, r9
 800d308:	f7f2 ff6a 	bl	80001e0 <__aeabi_dsub>
 800d30c:	a372      	add	r3, pc, #456	; (adr r3, 800d4d8 <__ieee754_pow+0xa08>)
 800d30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d312:	f7f3 f91d 	bl	8000550 <__aeabi_dmul>
 800d316:	a372      	add	r3, pc, #456	; (adr r3, 800d4e0 <__ieee754_pow+0xa10>)
 800d318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d31c:	4680      	mov	r8, r0
 800d31e:	4689      	mov	r9, r1
 800d320:	4620      	mov	r0, r4
 800d322:	4629      	mov	r1, r5
 800d324:	f7f3 f914 	bl	8000550 <__aeabi_dmul>
 800d328:	4602      	mov	r2, r0
 800d32a:	460b      	mov	r3, r1
 800d32c:	4640      	mov	r0, r8
 800d32e:	4649      	mov	r1, r9
 800d330:	f7f2 ff58 	bl	80001e4 <__adddf3>
 800d334:	4604      	mov	r4, r0
 800d336:	460d      	mov	r5, r1
 800d338:	4602      	mov	r2, r0
 800d33a:	460b      	mov	r3, r1
 800d33c:	4630      	mov	r0, r6
 800d33e:	4639      	mov	r1, r7
 800d340:	f7f2 ff50 	bl	80001e4 <__adddf3>
 800d344:	4632      	mov	r2, r6
 800d346:	463b      	mov	r3, r7
 800d348:	4680      	mov	r8, r0
 800d34a:	4689      	mov	r9, r1
 800d34c:	f7f2 ff48 	bl	80001e0 <__aeabi_dsub>
 800d350:	4602      	mov	r2, r0
 800d352:	460b      	mov	r3, r1
 800d354:	4620      	mov	r0, r4
 800d356:	4629      	mov	r1, r5
 800d358:	f7f2 ff42 	bl	80001e0 <__aeabi_dsub>
 800d35c:	4642      	mov	r2, r8
 800d35e:	4606      	mov	r6, r0
 800d360:	460f      	mov	r7, r1
 800d362:	464b      	mov	r3, r9
 800d364:	4640      	mov	r0, r8
 800d366:	4649      	mov	r1, r9
 800d368:	f7f3 f8f2 	bl	8000550 <__aeabi_dmul>
 800d36c:	a35e      	add	r3, pc, #376	; (adr r3, 800d4e8 <__ieee754_pow+0xa18>)
 800d36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d372:	4604      	mov	r4, r0
 800d374:	460d      	mov	r5, r1
 800d376:	f7f3 f8eb 	bl	8000550 <__aeabi_dmul>
 800d37a:	a35d      	add	r3, pc, #372	; (adr r3, 800d4f0 <__ieee754_pow+0xa20>)
 800d37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d380:	f7f2 ff2e 	bl	80001e0 <__aeabi_dsub>
 800d384:	4622      	mov	r2, r4
 800d386:	462b      	mov	r3, r5
 800d388:	f7f3 f8e2 	bl	8000550 <__aeabi_dmul>
 800d38c:	a35a      	add	r3, pc, #360	; (adr r3, 800d4f8 <__ieee754_pow+0xa28>)
 800d38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d392:	f7f2 ff27 	bl	80001e4 <__adddf3>
 800d396:	4622      	mov	r2, r4
 800d398:	462b      	mov	r3, r5
 800d39a:	f7f3 f8d9 	bl	8000550 <__aeabi_dmul>
 800d39e:	a358      	add	r3, pc, #352	; (adr r3, 800d500 <__ieee754_pow+0xa30>)
 800d3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3a4:	f7f2 ff1c 	bl	80001e0 <__aeabi_dsub>
 800d3a8:	4622      	mov	r2, r4
 800d3aa:	462b      	mov	r3, r5
 800d3ac:	f7f3 f8d0 	bl	8000550 <__aeabi_dmul>
 800d3b0:	a355      	add	r3, pc, #340	; (adr r3, 800d508 <__ieee754_pow+0xa38>)
 800d3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b6:	f7f2 ff15 	bl	80001e4 <__adddf3>
 800d3ba:	4622      	mov	r2, r4
 800d3bc:	462b      	mov	r3, r5
 800d3be:	f7f3 f8c7 	bl	8000550 <__aeabi_dmul>
 800d3c2:	4602      	mov	r2, r0
 800d3c4:	460b      	mov	r3, r1
 800d3c6:	4640      	mov	r0, r8
 800d3c8:	4649      	mov	r1, r9
 800d3ca:	f7f2 ff09 	bl	80001e0 <__aeabi_dsub>
 800d3ce:	4604      	mov	r4, r0
 800d3d0:	460d      	mov	r5, r1
 800d3d2:	4602      	mov	r2, r0
 800d3d4:	460b      	mov	r3, r1
 800d3d6:	4640      	mov	r0, r8
 800d3d8:	4649      	mov	r1, r9
 800d3da:	f7f3 f8b9 	bl	8000550 <__aeabi_dmul>
 800d3de:	2200      	movs	r2, #0
 800d3e0:	ec41 0b19 	vmov	d9, r0, r1
 800d3e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	4629      	mov	r1, r5
 800d3ec:	f7f2 fef8 	bl	80001e0 <__aeabi_dsub>
 800d3f0:	4602      	mov	r2, r0
 800d3f2:	460b      	mov	r3, r1
 800d3f4:	ec51 0b19 	vmov	r0, r1, d9
 800d3f8:	f7f3 f9d4 	bl	80007a4 <__aeabi_ddiv>
 800d3fc:	4632      	mov	r2, r6
 800d3fe:	4604      	mov	r4, r0
 800d400:	460d      	mov	r5, r1
 800d402:	463b      	mov	r3, r7
 800d404:	4640      	mov	r0, r8
 800d406:	4649      	mov	r1, r9
 800d408:	f7f3 f8a2 	bl	8000550 <__aeabi_dmul>
 800d40c:	4632      	mov	r2, r6
 800d40e:	463b      	mov	r3, r7
 800d410:	f7f2 fee8 	bl	80001e4 <__adddf3>
 800d414:	4602      	mov	r2, r0
 800d416:	460b      	mov	r3, r1
 800d418:	4620      	mov	r0, r4
 800d41a:	4629      	mov	r1, r5
 800d41c:	f7f2 fee0 	bl	80001e0 <__aeabi_dsub>
 800d420:	4642      	mov	r2, r8
 800d422:	464b      	mov	r3, r9
 800d424:	f7f2 fedc 	bl	80001e0 <__aeabi_dsub>
 800d428:	460b      	mov	r3, r1
 800d42a:	4602      	mov	r2, r0
 800d42c:	493a      	ldr	r1, [pc, #232]	; (800d518 <__ieee754_pow+0xa48>)
 800d42e:	2000      	movs	r0, #0
 800d430:	f7f2 fed6 	bl	80001e0 <__aeabi_dsub>
 800d434:	ec41 0b10 	vmov	d0, r0, r1
 800d438:	ee10 3a90 	vmov	r3, s1
 800d43c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800d440:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d444:	da2b      	bge.n	800d49e <__ieee754_pow+0x9ce>
 800d446:	4650      	mov	r0, sl
 800d448:	f001 fbbe 	bl	800ebc8 <scalbn>
 800d44c:	ec51 0b10 	vmov	r0, r1, d0
 800d450:	ec53 2b18 	vmov	r2, r3, d8
 800d454:	f7ff bbed 	b.w	800cc32 <__ieee754_pow+0x162>
 800d458:	4b30      	ldr	r3, [pc, #192]	; (800d51c <__ieee754_pow+0xa4c>)
 800d45a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d45e:	429e      	cmp	r6, r3
 800d460:	f77f af0c 	ble.w	800d27c <__ieee754_pow+0x7ac>
 800d464:	4b2e      	ldr	r3, [pc, #184]	; (800d520 <__ieee754_pow+0xa50>)
 800d466:	440b      	add	r3, r1
 800d468:	4303      	orrs	r3, r0
 800d46a:	d009      	beq.n	800d480 <__ieee754_pow+0x9b0>
 800d46c:	ec51 0b18 	vmov	r0, r1, d8
 800d470:	2200      	movs	r2, #0
 800d472:	2300      	movs	r3, #0
 800d474:	f7f3 fade 	bl	8000a34 <__aeabi_dcmplt>
 800d478:	3800      	subs	r0, #0
 800d47a:	bf18      	it	ne
 800d47c:	2001      	movne	r0, #1
 800d47e:	e447      	b.n	800cd10 <__ieee754_pow+0x240>
 800d480:	4622      	mov	r2, r4
 800d482:	462b      	mov	r3, r5
 800d484:	f7f2 feac 	bl	80001e0 <__aeabi_dsub>
 800d488:	4642      	mov	r2, r8
 800d48a:	464b      	mov	r3, r9
 800d48c:	f7f3 fae6 	bl	8000a5c <__aeabi_dcmpge>
 800d490:	2800      	cmp	r0, #0
 800d492:	f43f aef3 	beq.w	800d27c <__ieee754_pow+0x7ac>
 800d496:	e7e9      	b.n	800d46c <__ieee754_pow+0x99c>
 800d498:	f04f 0a00 	mov.w	sl, #0
 800d49c:	e71a      	b.n	800d2d4 <__ieee754_pow+0x804>
 800d49e:	ec51 0b10 	vmov	r0, r1, d0
 800d4a2:	4619      	mov	r1, r3
 800d4a4:	e7d4      	b.n	800d450 <__ieee754_pow+0x980>
 800d4a6:	491c      	ldr	r1, [pc, #112]	; (800d518 <__ieee754_pow+0xa48>)
 800d4a8:	2000      	movs	r0, #0
 800d4aa:	f7ff bb30 	b.w	800cb0e <__ieee754_pow+0x3e>
 800d4ae:	2000      	movs	r0, #0
 800d4b0:	2100      	movs	r1, #0
 800d4b2:	f7ff bb2c 	b.w	800cb0e <__ieee754_pow+0x3e>
 800d4b6:	4630      	mov	r0, r6
 800d4b8:	4639      	mov	r1, r7
 800d4ba:	f7ff bb28 	b.w	800cb0e <__ieee754_pow+0x3e>
 800d4be:	9204      	str	r2, [sp, #16]
 800d4c0:	f7ff bb7a 	b.w	800cbb8 <__ieee754_pow+0xe8>
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	f7ff bb64 	b.w	800cb92 <__ieee754_pow+0xc2>
 800d4ca:	bf00      	nop
 800d4cc:	f3af 8000 	nop.w
 800d4d0:	00000000 	.word	0x00000000
 800d4d4:	3fe62e43 	.word	0x3fe62e43
 800d4d8:	fefa39ef 	.word	0xfefa39ef
 800d4dc:	3fe62e42 	.word	0x3fe62e42
 800d4e0:	0ca86c39 	.word	0x0ca86c39
 800d4e4:	be205c61 	.word	0xbe205c61
 800d4e8:	72bea4d0 	.word	0x72bea4d0
 800d4ec:	3e663769 	.word	0x3e663769
 800d4f0:	c5d26bf1 	.word	0xc5d26bf1
 800d4f4:	3ebbbd41 	.word	0x3ebbbd41
 800d4f8:	af25de2c 	.word	0xaf25de2c
 800d4fc:	3f11566a 	.word	0x3f11566a
 800d500:	16bebd93 	.word	0x16bebd93
 800d504:	3f66c16c 	.word	0x3f66c16c
 800d508:	5555553e 	.word	0x5555553e
 800d50c:	3fc55555 	.word	0x3fc55555
 800d510:	3fe00000 	.word	0x3fe00000
 800d514:	000fffff 	.word	0x000fffff
 800d518:	3ff00000 	.word	0x3ff00000
 800d51c:	4090cbff 	.word	0x4090cbff
 800d520:	3f6f3400 	.word	0x3f6f3400
 800d524:	652b82fe 	.word	0x652b82fe
 800d528:	3c971547 	.word	0x3c971547
 800d52c:	00000000 	.word	0x00000000

0800d530 <__ieee754_rem_pio2>:
 800d530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d534:	ed2d 8b02 	vpush	{d8}
 800d538:	ec55 4b10 	vmov	r4, r5, d0
 800d53c:	4bca      	ldr	r3, [pc, #808]	; (800d868 <__ieee754_rem_pio2+0x338>)
 800d53e:	b08b      	sub	sp, #44	; 0x2c
 800d540:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800d544:	4598      	cmp	r8, r3
 800d546:	4682      	mov	sl, r0
 800d548:	9502      	str	r5, [sp, #8]
 800d54a:	dc08      	bgt.n	800d55e <__ieee754_rem_pio2+0x2e>
 800d54c:	2200      	movs	r2, #0
 800d54e:	2300      	movs	r3, #0
 800d550:	ed80 0b00 	vstr	d0, [r0]
 800d554:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d558:	f04f 0b00 	mov.w	fp, #0
 800d55c:	e028      	b.n	800d5b0 <__ieee754_rem_pio2+0x80>
 800d55e:	4bc3      	ldr	r3, [pc, #780]	; (800d86c <__ieee754_rem_pio2+0x33c>)
 800d560:	4598      	cmp	r8, r3
 800d562:	dc78      	bgt.n	800d656 <__ieee754_rem_pio2+0x126>
 800d564:	9b02      	ldr	r3, [sp, #8]
 800d566:	4ec2      	ldr	r6, [pc, #776]	; (800d870 <__ieee754_rem_pio2+0x340>)
 800d568:	2b00      	cmp	r3, #0
 800d56a:	ee10 0a10 	vmov	r0, s0
 800d56e:	a3b0      	add	r3, pc, #704	; (adr r3, 800d830 <__ieee754_rem_pio2+0x300>)
 800d570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d574:	4629      	mov	r1, r5
 800d576:	dd39      	ble.n	800d5ec <__ieee754_rem_pio2+0xbc>
 800d578:	f7f2 fe32 	bl	80001e0 <__aeabi_dsub>
 800d57c:	45b0      	cmp	r8, r6
 800d57e:	4604      	mov	r4, r0
 800d580:	460d      	mov	r5, r1
 800d582:	d01b      	beq.n	800d5bc <__ieee754_rem_pio2+0x8c>
 800d584:	a3ac      	add	r3, pc, #688	; (adr r3, 800d838 <__ieee754_rem_pio2+0x308>)
 800d586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d58a:	f7f2 fe29 	bl	80001e0 <__aeabi_dsub>
 800d58e:	4602      	mov	r2, r0
 800d590:	460b      	mov	r3, r1
 800d592:	e9ca 2300 	strd	r2, r3, [sl]
 800d596:	4620      	mov	r0, r4
 800d598:	4629      	mov	r1, r5
 800d59a:	f7f2 fe21 	bl	80001e0 <__aeabi_dsub>
 800d59e:	a3a6      	add	r3, pc, #664	; (adr r3, 800d838 <__ieee754_rem_pio2+0x308>)
 800d5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a4:	f7f2 fe1c 	bl	80001e0 <__aeabi_dsub>
 800d5a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d5ac:	f04f 0b01 	mov.w	fp, #1
 800d5b0:	4658      	mov	r0, fp
 800d5b2:	b00b      	add	sp, #44	; 0x2c
 800d5b4:	ecbd 8b02 	vpop	{d8}
 800d5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5bc:	a3a0      	add	r3, pc, #640	; (adr r3, 800d840 <__ieee754_rem_pio2+0x310>)
 800d5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c2:	f7f2 fe0d 	bl	80001e0 <__aeabi_dsub>
 800d5c6:	a3a0      	add	r3, pc, #640	; (adr r3, 800d848 <__ieee754_rem_pio2+0x318>)
 800d5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5cc:	4604      	mov	r4, r0
 800d5ce:	460d      	mov	r5, r1
 800d5d0:	f7f2 fe06 	bl	80001e0 <__aeabi_dsub>
 800d5d4:	4602      	mov	r2, r0
 800d5d6:	460b      	mov	r3, r1
 800d5d8:	e9ca 2300 	strd	r2, r3, [sl]
 800d5dc:	4620      	mov	r0, r4
 800d5de:	4629      	mov	r1, r5
 800d5e0:	f7f2 fdfe 	bl	80001e0 <__aeabi_dsub>
 800d5e4:	a398      	add	r3, pc, #608	; (adr r3, 800d848 <__ieee754_rem_pio2+0x318>)
 800d5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ea:	e7db      	b.n	800d5a4 <__ieee754_rem_pio2+0x74>
 800d5ec:	f7f2 fdfa 	bl	80001e4 <__adddf3>
 800d5f0:	45b0      	cmp	r8, r6
 800d5f2:	4604      	mov	r4, r0
 800d5f4:	460d      	mov	r5, r1
 800d5f6:	d016      	beq.n	800d626 <__ieee754_rem_pio2+0xf6>
 800d5f8:	a38f      	add	r3, pc, #572	; (adr r3, 800d838 <__ieee754_rem_pio2+0x308>)
 800d5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fe:	f7f2 fdf1 	bl	80001e4 <__adddf3>
 800d602:	4602      	mov	r2, r0
 800d604:	460b      	mov	r3, r1
 800d606:	e9ca 2300 	strd	r2, r3, [sl]
 800d60a:	4620      	mov	r0, r4
 800d60c:	4629      	mov	r1, r5
 800d60e:	f7f2 fde7 	bl	80001e0 <__aeabi_dsub>
 800d612:	a389      	add	r3, pc, #548	; (adr r3, 800d838 <__ieee754_rem_pio2+0x308>)
 800d614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d618:	f7f2 fde4 	bl	80001e4 <__adddf3>
 800d61c:	f04f 3bff 	mov.w	fp, #4294967295
 800d620:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d624:	e7c4      	b.n	800d5b0 <__ieee754_rem_pio2+0x80>
 800d626:	a386      	add	r3, pc, #536	; (adr r3, 800d840 <__ieee754_rem_pio2+0x310>)
 800d628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d62c:	f7f2 fdda 	bl	80001e4 <__adddf3>
 800d630:	a385      	add	r3, pc, #532	; (adr r3, 800d848 <__ieee754_rem_pio2+0x318>)
 800d632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d636:	4604      	mov	r4, r0
 800d638:	460d      	mov	r5, r1
 800d63a:	f7f2 fdd3 	bl	80001e4 <__adddf3>
 800d63e:	4602      	mov	r2, r0
 800d640:	460b      	mov	r3, r1
 800d642:	e9ca 2300 	strd	r2, r3, [sl]
 800d646:	4620      	mov	r0, r4
 800d648:	4629      	mov	r1, r5
 800d64a:	f7f2 fdc9 	bl	80001e0 <__aeabi_dsub>
 800d64e:	a37e      	add	r3, pc, #504	; (adr r3, 800d848 <__ieee754_rem_pio2+0x318>)
 800d650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d654:	e7e0      	b.n	800d618 <__ieee754_rem_pio2+0xe8>
 800d656:	4b87      	ldr	r3, [pc, #540]	; (800d874 <__ieee754_rem_pio2+0x344>)
 800d658:	4598      	cmp	r8, r3
 800d65a:	f300 80d9 	bgt.w	800d810 <__ieee754_rem_pio2+0x2e0>
 800d65e:	f001 fa1f 	bl	800eaa0 <fabs>
 800d662:	ec55 4b10 	vmov	r4, r5, d0
 800d666:	ee10 0a10 	vmov	r0, s0
 800d66a:	a379      	add	r3, pc, #484	; (adr r3, 800d850 <__ieee754_rem_pio2+0x320>)
 800d66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d670:	4629      	mov	r1, r5
 800d672:	f7f2 ff6d 	bl	8000550 <__aeabi_dmul>
 800d676:	4b80      	ldr	r3, [pc, #512]	; (800d878 <__ieee754_rem_pio2+0x348>)
 800d678:	2200      	movs	r2, #0
 800d67a:	f7f2 fdb3 	bl	80001e4 <__adddf3>
 800d67e:	f7f3 fa17 	bl	8000ab0 <__aeabi_d2iz>
 800d682:	4683      	mov	fp, r0
 800d684:	f7f2 fefa 	bl	800047c <__aeabi_i2d>
 800d688:	4602      	mov	r2, r0
 800d68a:	460b      	mov	r3, r1
 800d68c:	ec43 2b18 	vmov	d8, r2, r3
 800d690:	a367      	add	r3, pc, #412	; (adr r3, 800d830 <__ieee754_rem_pio2+0x300>)
 800d692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d696:	f7f2 ff5b 	bl	8000550 <__aeabi_dmul>
 800d69a:	4602      	mov	r2, r0
 800d69c:	460b      	mov	r3, r1
 800d69e:	4620      	mov	r0, r4
 800d6a0:	4629      	mov	r1, r5
 800d6a2:	f7f2 fd9d 	bl	80001e0 <__aeabi_dsub>
 800d6a6:	a364      	add	r3, pc, #400	; (adr r3, 800d838 <__ieee754_rem_pio2+0x308>)
 800d6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ac:	4606      	mov	r6, r0
 800d6ae:	460f      	mov	r7, r1
 800d6b0:	ec51 0b18 	vmov	r0, r1, d8
 800d6b4:	f7f2 ff4c 	bl	8000550 <__aeabi_dmul>
 800d6b8:	f1bb 0f1f 	cmp.w	fp, #31
 800d6bc:	4604      	mov	r4, r0
 800d6be:	460d      	mov	r5, r1
 800d6c0:	dc0d      	bgt.n	800d6de <__ieee754_rem_pio2+0x1ae>
 800d6c2:	4b6e      	ldr	r3, [pc, #440]	; (800d87c <__ieee754_rem_pio2+0x34c>)
 800d6c4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800d6c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6cc:	4543      	cmp	r3, r8
 800d6ce:	d006      	beq.n	800d6de <__ieee754_rem_pio2+0x1ae>
 800d6d0:	4622      	mov	r2, r4
 800d6d2:	462b      	mov	r3, r5
 800d6d4:	4630      	mov	r0, r6
 800d6d6:	4639      	mov	r1, r7
 800d6d8:	f7f2 fd82 	bl	80001e0 <__aeabi_dsub>
 800d6dc:	e00f      	b.n	800d6fe <__ieee754_rem_pio2+0x1ce>
 800d6de:	462b      	mov	r3, r5
 800d6e0:	4622      	mov	r2, r4
 800d6e2:	4630      	mov	r0, r6
 800d6e4:	4639      	mov	r1, r7
 800d6e6:	f7f2 fd7b 	bl	80001e0 <__aeabi_dsub>
 800d6ea:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d6ee:	9303      	str	r3, [sp, #12]
 800d6f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d6f4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800d6f8:	f1b8 0f10 	cmp.w	r8, #16
 800d6fc:	dc02      	bgt.n	800d704 <__ieee754_rem_pio2+0x1d4>
 800d6fe:	e9ca 0100 	strd	r0, r1, [sl]
 800d702:	e039      	b.n	800d778 <__ieee754_rem_pio2+0x248>
 800d704:	a34e      	add	r3, pc, #312	; (adr r3, 800d840 <__ieee754_rem_pio2+0x310>)
 800d706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d70a:	ec51 0b18 	vmov	r0, r1, d8
 800d70e:	f7f2 ff1f 	bl	8000550 <__aeabi_dmul>
 800d712:	4604      	mov	r4, r0
 800d714:	460d      	mov	r5, r1
 800d716:	4602      	mov	r2, r0
 800d718:	460b      	mov	r3, r1
 800d71a:	4630      	mov	r0, r6
 800d71c:	4639      	mov	r1, r7
 800d71e:	f7f2 fd5f 	bl	80001e0 <__aeabi_dsub>
 800d722:	4602      	mov	r2, r0
 800d724:	460b      	mov	r3, r1
 800d726:	4680      	mov	r8, r0
 800d728:	4689      	mov	r9, r1
 800d72a:	4630      	mov	r0, r6
 800d72c:	4639      	mov	r1, r7
 800d72e:	f7f2 fd57 	bl	80001e0 <__aeabi_dsub>
 800d732:	4622      	mov	r2, r4
 800d734:	462b      	mov	r3, r5
 800d736:	f7f2 fd53 	bl	80001e0 <__aeabi_dsub>
 800d73a:	a343      	add	r3, pc, #268	; (adr r3, 800d848 <__ieee754_rem_pio2+0x318>)
 800d73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d740:	4604      	mov	r4, r0
 800d742:	460d      	mov	r5, r1
 800d744:	ec51 0b18 	vmov	r0, r1, d8
 800d748:	f7f2 ff02 	bl	8000550 <__aeabi_dmul>
 800d74c:	4622      	mov	r2, r4
 800d74e:	462b      	mov	r3, r5
 800d750:	f7f2 fd46 	bl	80001e0 <__aeabi_dsub>
 800d754:	4602      	mov	r2, r0
 800d756:	460b      	mov	r3, r1
 800d758:	4604      	mov	r4, r0
 800d75a:	460d      	mov	r5, r1
 800d75c:	4640      	mov	r0, r8
 800d75e:	4649      	mov	r1, r9
 800d760:	f7f2 fd3e 	bl	80001e0 <__aeabi_dsub>
 800d764:	9a03      	ldr	r2, [sp, #12]
 800d766:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d76a:	1ad3      	subs	r3, r2, r3
 800d76c:	2b31      	cmp	r3, #49	; 0x31
 800d76e:	dc24      	bgt.n	800d7ba <__ieee754_rem_pio2+0x28a>
 800d770:	e9ca 0100 	strd	r0, r1, [sl]
 800d774:	4646      	mov	r6, r8
 800d776:	464f      	mov	r7, r9
 800d778:	e9da 8900 	ldrd	r8, r9, [sl]
 800d77c:	4630      	mov	r0, r6
 800d77e:	4642      	mov	r2, r8
 800d780:	464b      	mov	r3, r9
 800d782:	4639      	mov	r1, r7
 800d784:	f7f2 fd2c 	bl	80001e0 <__aeabi_dsub>
 800d788:	462b      	mov	r3, r5
 800d78a:	4622      	mov	r2, r4
 800d78c:	f7f2 fd28 	bl	80001e0 <__aeabi_dsub>
 800d790:	9b02      	ldr	r3, [sp, #8]
 800d792:	2b00      	cmp	r3, #0
 800d794:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d798:	f6bf af0a 	bge.w	800d5b0 <__ieee754_rem_pio2+0x80>
 800d79c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d7a0:	f8ca 3004 	str.w	r3, [sl, #4]
 800d7a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d7a8:	f8ca 8000 	str.w	r8, [sl]
 800d7ac:	f8ca 0008 	str.w	r0, [sl, #8]
 800d7b0:	f8ca 300c 	str.w	r3, [sl, #12]
 800d7b4:	f1cb 0b00 	rsb	fp, fp, #0
 800d7b8:	e6fa      	b.n	800d5b0 <__ieee754_rem_pio2+0x80>
 800d7ba:	a327      	add	r3, pc, #156	; (adr r3, 800d858 <__ieee754_rem_pio2+0x328>)
 800d7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c0:	ec51 0b18 	vmov	r0, r1, d8
 800d7c4:	f7f2 fec4 	bl	8000550 <__aeabi_dmul>
 800d7c8:	4604      	mov	r4, r0
 800d7ca:	460d      	mov	r5, r1
 800d7cc:	4602      	mov	r2, r0
 800d7ce:	460b      	mov	r3, r1
 800d7d0:	4640      	mov	r0, r8
 800d7d2:	4649      	mov	r1, r9
 800d7d4:	f7f2 fd04 	bl	80001e0 <__aeabi_dsub>
 800d7d8:	4602      	mov	r2, r0
 800d7da:	460b      	mov	r3, r1
 800d7dc:	4606      	mov	r6, r0
 800d7de:	460f      	mov	r7, r1
 800d7e0:	4640      	mov	r0, r8
 800d7e2:	4649      	mov	r1, r9
 800d7e4:	f7f2 fcfc 	bl	80001e0 <__aeabi_dsub>
 800d7e8:	4622      	mov	r2, r4
 800d7ea:	462b      	mov	r3, r5
 800d7ec:	f7f2 fcf8 	bl	80001e0 <__aeabi_dsub>
 800d7f0:	a31b      	add	r3, pc, #108	; (adr r3, 800d860 <__ieee754_rem_pio2+0x330>)
 800d7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f6:	4604      	mov	r4, r0
 800d7f8:	460d      	mov	r5, r1
 800d7fa:	ec51 0b18 	vmov	r0, r1, d8
 800d7fe:	f7f2 fea7 	bl	8000550 <__aeabi_dmul>
 800d802:	4622      	mov	r2, r4
 800d804:	462b      	mov	r3, r5
 800d806:	f7f2 fceb 	bl	80001e0 <__aeabi_dsub>
 800d80a:	4604      	mov	r4, r0
 800d80c:	460d      	mov	r5, r1
 800d80e:	e75f      	b.n	800d6d0 <__ieee754_rem_pio2+0x1a0>
 800d810:	4b1b      	ldr	r3, [pc, #108]	; (800d880 <__ieee754_rem_pio2+0x350>)
 800d812:	4598      	cmp	r8, r3
 800d814:	dd36      	ble.n	800d884 <__ieee754_rem_pio2+0x354>
 800d816:	ee10 2a10 	vmov	r2, s0
 800d81a:	462b      	mov	r3, r5
 800d81c:	4620      	mov	r0, r4
 800d81e:	4629      	mov	r1, r5
 800d820:	f7f2 fcde 	bl	80001e0 <__aeabi_dsub>
 800d824:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d828:	e9ca 0100 	strd	r0, r1, [sl]
 800d82c:	e694      	b.n	800d558 <__ieee754_rem_pio2+0x28>
 800d82e:	bf00      	nop
 800d830:	54400000 	.word	0x54400000
 800d834:	3ff921fb 	.word	0x3ff921fb
 800d838:	1a626331 	.word	0x1a626331
 800d83c:	3dd0b461 	.word	0x3dd0b461
 800d840:	1a600000 	.word	0x1a600000
 800d844:	3dd0b461 	.word	0x3dd0b461
 800d848:	2e037073 	.word	0x2e037073
 800d84c:	3ba3198a 	.word	0x3ba3198a
 800d850:	6dc9c883 	.word	0x6dc9c883
 800d854:	3fe45f30 	.word	0x3fe45f30
 800d858:	2e000000 	.word	0x2e000000
 800d85c:	3ba3198a 	.word	0x3ba3198a
 800d860:	252049c1 	.word	0x252049c1
 800d864:	397b839a 	.word	0x397b839a
 800d868:	3fe921fb 	.word	0x3fe921fb
 800d86c:	4002d97b 	.word	0x4002d97b
 800d870:	3ff921fb 	.word	0x3ff921fb
 800d874:	413921fb 	.word	0x413921fb
 800d878:	3fe00000 	.word	0x3fe00000
 800d87c:	0800eef8 	.word	0x0800eef8
 800d880:	7fefffff 	.word	0x7fefffff
 800d884:	ea4f 5428 	mov.w	r4, r8, asr #20
 800d888:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800d88c:	ee10 0a10 	vmov	r0, s0
 800d890:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800d894:	ee10 6a10 	vmov	r6, s0
 800d898:	460f      	mov	r7, r1
 800d89a:	f7f3 f909 	bl	8000ab0 <__aeabi_d2iz>
 800d89e:	f7f2 fded 	bl	800047c <__aeabi_i2d>
 800d8a2:	4602      	mov	r2, r0
 800d8a4:	460b      	mov	r3, r1
 800d8a6:	4630      	mov	r0, r6
 800d8a8:	4639      	mov	r1, r7
 800d8aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d8ae:	f7f2 fc97 	bl	80001e0 <__aeabi_dsub>
 800d8b2:	4b23      	ldr	r3, [pc, #140]	; (800d940 <__ieee754_rem_pio2+0x410>)
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	f7f2 fe4b 	bl	8000550 <__aeabi_dmul>
 800d8ba:	460f      	mov	r7, r1
 800d8bc:	4606      	mov	r6, r0
 800d8be:	f7f3 f8f7 	bl	8000ab0 <__aeabi_d2iz>
 800d8c2:	f7f2 fddb 	bl	800047c <__aeabi_i2d>
 800d8c6:	4602      	mov	r2, r0
 800d8c8:	460b      	mov	r3, r1
 800d8ca:	4630      	mov	r0, r6
 800d8cc:	4639      	mov	r1, r7
 800d8ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d8d2:	f7f2 fc85 	bl	80001e0 <__aeabi_dsub>
 800d8d6:	4b1a      	ldr	r3, [pc, #104]	; (800d940 <__ieee754_rem_pio2+0x410>)
 800d8d8:	2200      	movs	r2, #0
 800d8da:	f7f2 fe39 	bl	8000550 <__aeabi_dmul>
 800d8de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d8e2:	ad04      	add	r5, sp, #16
 800d8e4:	f04f 0803 	mov.w	r8, #3
 800d8e8:	46a9      	mov	r9, r5
 800d8ea:	2600      	movs	r6, #0
 800d8ec:	2700      	movs	r7, #0
 800d8ee:	4632      	mov	r2, r6
 800d8f0:	463b      	mov	r3, r7
 800d8f2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800d8f6:	46c3      	mov	fp, r8
 800d8f8:	3d08      	subs	r5, #8
 800d8fa:	f108 38ff 	add.w	r8, r8, #4294967295
 800d8fe:	f7f3 f88f 	bl	8000a20 <__aeabi_dcmpeq>
 800d902:	2800      	cmp	r0, #0
 800d904:	d1f3      	bne.n	800d8ee <__ieee754_rem_pio2+0x3be>
 800d906:	4b0f      	ldr	r3, [pc, #60]	; (800d944 <__ieee754_rem_pio2+0x414>)
 800d908:	9301      	str	r3, [sp, #4]
 800d90a:	2302      	movs	r3, #2
 800d90c:	9300      	str	r3, [sp, #0]
 800d90e:	4622      	mov	r2, r4
 800d910:	465b      	mov	r3, fp
 800d912:	4651      	mov	r1, sl
 800d914:	4648      	mov	r0, r9
 800d916:	f000 fc63 	bl	800e1e0 <__kernel_rem_pio2>
 800d91a:	9b02      	ldr	r3, [sp, #8]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	4683      	mov	fp, r0
 800d920:	f6bf ae46 	bge.w	800d5b0 <__ieee754_rem_pio2+0x80>
 800d924:	e9da 2100 	ldrd	r2, r1, [sl]
 800d928:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d92c:	e9ca 2300 	strd	r2, r3, [sl]
 800d930:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800d934:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d938:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800d93c:	e73a      	b.n	800d7b4 <__ieee754_rem_pio2+0x284>
 800d93e:	bf00      	nop
 800d940:	41700000 	.word	0x41700000
 800d944:	0800ef78 	.word	0x0800ef78

0800d948 <__ieee754_sqrt>:
 800d948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d94c:	ec55 4b10 	vmov	r4, r5, d0
 800d950:	4e55      	ldr	r6, [pc, #340]	; (800daa8 <__ieee754_sqrt+0x160>)
 800d952:	43ae      	bics	r6, r5
 800d954:	ee10 0a10 	vmov	r0, s0
 800d958:	ee10 3a10 	vmov	r3, s0
 800d95c:	462a      	mov	r2, r5
 800d95e:	4629      	mov	r1, r5
 800d960:	d110      	bne.n	800d984 <__ieee754_sqrt+0x3c>
 800d962:	ee10 2a10 	vmov	r2, s0
 800d966:	462b      	mov	r3, r5
 800d968:	f7f2 fdf2 	bl	8000550 <__aeabi_dmul>
 800d96c:	4602      	mov	r2, r0
 800d96e:	460b      	mov	r3, r1
 800d970:	4620      	mov	r0, r4
 800d972:	4629      	mov	r1, r5
 800d974:	f7f2 fc36 	bl	80001e4 <__adddf3>
 800d978:	4604      	mov	r4, r0
 800d97a:	460d      	mov	r5, r1
 800d97c:	ec45 4b10 	vmov	d0, r4, r5
 800d980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d984:	2d00      	cmp	r5, #0
 800d986:	dc10      	bgt.n	800d9aa <__ieee754_sqrt+0x62>
 800d988:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d98c:	4330      	orrs	r0, r6
 800d98e:	d0f5      	beq.n	800d97c <__ieee754_sqrt+0x34>
 800d990:	b15d      	cbz	r5, 800d9aa <__ieee754_sqrt+0x62>
 800d992:	ee10 2a10 	vmov	r2, s0
 800d996:	462b      	mov	r3, r5
 800d998:	ee10 0a10 	vmov	r0, s0
 800d99c:	f7f2 fc20 	bl	80001e0 <__aeabi_dsub>
 800d9a0:	4602      	mov	r2, r0
 800d9a2:	460b      	mov	r3, r1
 800d9a4:	f7f2 fefe 	bl	80007a4 <__aeabi_ddiv>
 800d9a8:	e7e6      	b.n	800d978 <__ieee754_sqrt+0x30>
 800d9aa:	1512      	asrs	r2, r2, #20
 800d9ac:	d074      	beq.n	800da98 <__ieee754_sqrt+0x150>
 800d9ae:	07d4      	lsls	r4, r2, #31
 800d9b0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d9b4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800d9b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d9bc:	bf5e      	ittt	pl
 800d9be:	0fda      	lsrpl	r2, r3, #31
 800d9c0:	005b      	lslpl	r3, r3, #1
 800d9c2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800d9c6:	2400      	movs	r4, #0
 800d9c8:	0fda      	lsrs	r2, r3, #31
 800d9ca:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d9ce:	107f      	asrs	r7, r7, #1
 800d9d0:	005b      	lsls	r3, r3, #1
 800d9d2:	2516      	movs	r5, #22
 800d9d4:	4620      	mov	r0, r4
 800d9d6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d9da:	1886      	adds	r6, r0, r2
 800d9dc:	428e      	cmp	r6, r1
 800d9de:	bfde      	ittt	le
 800d9e0:	1b89      	suble	r1, r1, r6
 800d9e2:	18b0      	addle	r0, r6, r2
 800d9e4:	18a4      	addle	r4, r4, r2
 800d9e6:	0049      	lsls	r1, r1, #1
 800d9e8:	3d01      	subs	r5, #1
 800d9ea:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800d9ee:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d9f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d9f6:	d1f0      	bne.n	800d9da <__ieee754_sqrt+0x92>
 800d9f8:	462a      	mov	r2, r5
 800d9fa:	f04f 0e20 	mov.w	lr, #32
 800d9fe:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800da02:	4281      	cmp	r1, r0
 800da04:	eb06 0c05 	add.w	ip, r6, r5
 800da08:	dc02      	bgt.n	800da10 <__ieee754_sqrt+0xc8>
 800da0a:	d113      	bne.n	800da34 <__ieee754_sqrt+0xec>
 800da0c:	459c      	cmp	ip, r3
 800da0e:	d811      	bhi.n	800da34 <__ieee754_sqrt+0xec>
 800da10:	f1bc 0f00 	cmp.w	ip, #0
 800da14:	eb0c 0506 	add.w	r5, ip, r6
 800da18:	da43      	bge.n	800daa2 <__ieee754_sqrt+0x15a>
 800da1a:	2d00      	cmp	r5, #0
 800da1c:	db41      	blt.n	800daa2 <__ieee754_sqrt+0x15a>
 800da1e:	f100 0801 	add.w	r8, r0, #1
 800da22:	1a09      	subs	r1, r1, r0
 800da24:	459c      	cmp	ip, r3
 800da26:	bf88      	it	hi
 800da28:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800da2c:	eba3 030c 	sub.w	r3, r3, ip
 800da30:	4432      	add	r2, r6
 800da32:	4640      	mov	r0, r8
 800da34:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800da38:	f1be 0e01 	subs.w	lr, lr, #1
 800da3c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800da40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800da44:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800da48:	d1db      	bne.n	800da02 <__ieee754_sqrt+0xba>
 800da4a:	430b      	orrs	r3, r1
 800da4c:	d006      	beq.n	800da5c <__ieee754_sqrt+0x114>
 800da4e:	1c50      	adds	r0, r2, #1
 800da50:	bf13      	iteet	ne
 800da52:	3201      	addne	r2, #1
 800da54:	3401      	addeq	r4, #1
 800da56:	4672      	moveq	r2, lr
 800da58:	f022 0201 	bicne.w	r2, r2, #1
 800da5c:	1063      	asrs	r3, r4, #1
 800da5e:	0852      	lsrs	r2, r2, #1
 800da60:	07e1      	lsls	r1, r4, #31
 800da62:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800da66:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800da6a:	bf48      	it	mi
 800da6c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800da70:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800da74:	4614      	mov	r4, r2
 800da76:	e781      	b.n	800d97c <__ieee754_sqrt+0x34>
 800da78:	0ad9      	lsrs	r1, r3, #11
 800da7a:	3815      	subs	r0, #21
 800da7c:	055b      	lsls	r3, r3, #21
 800da7e:	2900      	cmp	r1, #0
 800da80:	d0fa      	beq.n	800da78 <__ieee754_sqrt+0x130>
 800da82:	02cd      	lsls	r5, r1, #11
 800da84:	d50a      	bpl.n	800da9c <__ieee754_sqrt+0x154>
 800da86:	f1c2 0420 	rsb	r4, r2, #32
 800da8a:	fa23 f404 	lsr.w	r4, r3, r4
 800da8e:	1e55      	subs	r5, r2, #1
 800da90:	4093      	lsls	r3, r2
 800da92:	4321      	orrs	r1, r4
 800da94:	1b42      	subs	r2, r0, r5
 800da96:	e78a      	b.n	800d9ae <__ieee754_sqrt+0x66>
 800da98:	4610      	mov	r0, r2
 800da9a:	e7f0      	b.n	800da7e <__ieee754_sqrt+0x136>
 800da9c:	0049      	lsls	r1, r1, #1
 800da9e:	3201      	adds	r2, #1
 800daa0:	e7ef      	b.n	800da82 <__ieee754_sqrt+0x13a>
 800daa2:	4680      	mov	r8, r0
 800daa4:	e7bd      	b.n	800da22 <__ieee754_sqrt+0xda>
 800daa6:	bf00      	nop
 800daa8:	7ff00000 	.word	0x7ff00000

0800daac <__ieee754_powf>:
 800daac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dab0:	ee10 4a90 	vmov	r4, s1
 800dab4:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800dab8:	ed2d 8b02 	vpush	{d8}
 800dabc:	ee10 6a10 	vmov	r6, s0
 800dac0:	eeb0 8a40 	vmov.f32	s16, s0
 800dac4:	eef0 8a60 	vmov.f32	s17, s1
 800dac8:	d10c      	bne.n	800dae4 <__ieee754_powf+0x38>
 800daca:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800dace:	0076      	lsls	r6, r6, #1
 800dad0:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800dad4:	f240 8296 	bls.w	800e004 <__ieee754_powf+0x558>
 800dad8:	ee38 0a28 	vadd.f32	s0, s16, s17
 800dadc:	ecbd 8b02 	vpop	{d8}
 800dae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dae4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800dae8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800daec:	dcf4      	bgt.n	800dad8 <__ieee754_powf+0x2c>
 800daee:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800daf2:	dd08      	ble.n	800db06 <__ieee754_powf+0x5a>
 800daf4:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800daf8:	d1ee      	bne.n	800dad8 <__ieee754_powf+0x2c>
 800dafa:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800dafe:	0064      	lsls	r4, r4, #1
 800db00:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800db04:	e7e6      	b.n	800dad4 <__ieee754_powf+0x28>
 800db06:	2e00      	cmp	r6, #0
 800db08:	da20      	bge.n	800db4c <__ieee754_powf+0xa0>
 800db0a:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800db0e:	da2d      	bge.n	800db6c <__ieee754_powf+0xc0>
 800db10:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800db14:	f2c0 827f 	blt.w	800e016 <__ieee754_powf+0x56a>
 800db18:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800db1c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800db20:	fa48 f703 	asr.w	r7, r8, r3
 800db24:	fa07 f303 	lsl.w	r3, r7, r3
 800db28:	4543      	cmp	r3, r8
 800db2a:	f040 8274 	bne.w	800e016 <__ieee754_powf+0x56a>
 800db2e:	f007 0701 	and.w	r7, r7, #1
 800db32:	f1c7 0702 	rsb	r7, r7, #2
 800db36:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800db3a:	d11f      	bne.n	800db7c <__ieee754_powf+0xd0>
 800db3c:	2c00      	cmp	r4, #0
 800db3e:	f280 8267 	bge.w	800e010 <__ieee754_powf+0x564>
 800db42:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800db46:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800db4a:	e7c7      	b.n	800dadc <__ieee754_powf+0x30>
 800db4c:	2700      	movs	r7, #0
 800db4e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800db52:	d1f0      	bne.n	800db36 <__ieee754_powf+0x8a>
 800db54:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800db58:	f000 8254 	beq.w	800e004 <__ieee754_powf+0x558>
 800db5c:	dd08      	ble.n	800db70 <__ieee754_powf+0xc4>
 800db5e:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800de68 <__ieee754_powf+0x3bc>
 800db62:	2c00      	cmp	r4, #0
 800db64:	bfa8      	it	ge
 800db66:	eeb0 0a68 	vmovge.f32	s0, s17
 800db6a:	e7b7      	b.n	800dadc <__ieee754_powf+0x30>
 800db6c:	2702      	movs	r7, #2
 800db6e:	e7ee      	b.n	800db4e <__ieee754_powf+0xa2>
 800db70:	2c00      	cmp	r4, #0
 800db72:	f280 824a 	bge.w	800e00a <__ieee754_powf+0x55e>
 800db76:	eeb1 0a68 	vneg.f32	s0, s17
 800db7a:	e7af      	b.n	800dadc <__ieee754_powf+0x30>
 800db7c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800db80:	d102      	bne.n	800db88 <__ieee754_powf+0xdc>
 800db82:	ee28 0a08 	vmul.f32	s0, s16, s16
 800db86:	e7a9      	b.n	800dadc <__ieee754_powf+0x30>
 800db88:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800db8c:	eeb0 0a48 	vmov.f32	s0, s16
 800db90:	d107      	bne.n	800dba2 <__ieee754_powf+0xf6>
 800db92:	2e00      	cmp	r6, #0
 800db94:	db05      	blt.n	800dba2 <__ieee754_powf+0xf6>
 800db96:	ecbd 8b02 	vpop	{d8}
 800db9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db9e:	f000 ba53 	b.w	800e048 <__ieee754_sqrtf>
 800dba2:	f001 f897 	bl	800ecd4 <fabsf>
 800dba6:	b125      	cbz	r5, 800dbb2 <__ieee754_powf+0x106>
 800dba8:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800dbac:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800dbb0:	d116      	bne.n	800dbe0 <__ieee754_powf+0x134>
 800dbb2:	2c00      	cmp	r4, #0
 800dbb4:	bfbc      	itt	lt
 800dbb6:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800dbba:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800dbbe:	2e00      	cmp	r6, #0
 800dbc0:	da8c      	bge.n	800dadc <__ieee754_powf+0x30>
 800dbc2:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800dbc6:	ea55 0307 	orrs.w	r3, r5, r7
 800dbca:	d104      	bne.n	800dbd6 <__ieee754_powf+0x12a>
 800dbcc:	ee70 7a40 	vsub.f32	s15, s0, s0
 800dbd0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800dbd4:	e782      	b.n	800dadc <__ieee754_powf+0x30>
 800dbd6:	2f01      	cmp	r7, #1
 800dbd8:	d180      	bne.n	800dadc <__ieee754_powf+0x30>
 800dbda:	eeb1 0a40 	vneg.f32	s0, s0
 800dbde:	e77d      	b.n	800dadc <__ieee754_powf+0x30>
 800dbe0:	0ff0      	lsrs	r0, r6, #31
 800dbe2:	3801      	subs	r0, #1
 800dbe4:	ea57 0300 	orrs.w	r3, r7, r0
 800dbe8:	d104      	bne.n	800dbf4 <__ieee754_powf+0x148>
 800dbea:	ee38 8a48 	vsub.f32	s16, s16, s16
 800dbee:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800dbf2:	e773      	b.n	800dadc <__ieee754_powf+0x30>
 800dbf4:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800dbf8:	dd74      	ble.n	800dce4 <__ieee754_powf+0x238>
 800dbfa:	4b9c      	ldr	r3, [pc, #624]	; (800de6c <__ieee754_powf+0x3c0>)
 800dbfc:	429d      	cmp	r5, r3
 800dbfe:	dc08      	bgt.n	800dc12 <__ieee754_powf+0x166>
 800dc00:	2c00      	cmp	r4, #0
 800dc02:	da0b      	bge.n	800dc1c <__ieee754_powf+0x170>
 800dc04:	2000      	movs	r0, #0
 800dc06:	ecbd 8b02 	vpop	{d8}
 800dc0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc0e:	f000 bf41 	b.w	800ea94 <__math_oflowf>
 800dc12:	4b97      	ldr	r3, [pc, #604]	; (800de70 <__ieee754_powf+0x3c4>)
 800dc14:	429d      	cmp	r5, r3
 800dc16:	dd08      	ble.n	800dc2a <__ieee754_powf+0x17e>
 800dc18:	2c00      	cmp	r4, #0
 800dc1a:	dcf3      	bgt.n	800dc04 <__ieee754_powf+0x158>
 800dc1c:	2000      	movs	r0, #0
 800dc1e:	ecbd 8b02 	vpop	{d8}
 800dc22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc26:	f000 bf2f 	b.w	800ea88 <__math_uflowf>
 800dc2a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dc2e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800dc32:	eddf 6a90 	vldr	s13, [pc, #576]	; 800de74 <__ieee754_powf+0x3c8>
 800dc36:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800dc3a:	eee0 6a67 	vfms.f32	s13, s0, s15
 800dc3e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800dc42:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800dc46:	ee20 7a00 	vmul.f32	s14, s0, s0
 800dc4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc4e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800de78 <__ieee754_powf+0x3cc>
 800dc52:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800dc56:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800de7c <__ieee754_powf+0x3d0>
 800dc5a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800dc5e:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800de80 <__ieee754_powf+0x3d4>
 800dc62:	eef0 6a67 	vmov.f32	s13, s15
 800dc66:	eee0 6a07 	vfma.f32	s13, s0, s14
 800dc6a:	ee16 3a90 	vmov	r3, s13
 800dc6e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800dc72:	f023 030f 	bic.w	r3, r3, #15
 800dc76:	ee00 3a90 	vmov	s1, r3
 800dc7a:	eee0 0a47 	vfms.f32	s1, s0, s14
 800dc7e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800dc82:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800dc86:	f024 040f 	bic.w	r4, r4, #15
 800dc8a:	ee07 4a10 	vmov	s14, r4
 800dc8e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800dc92:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800dc96:	ee07 3a90 	vmov	s15, r3
 800dc9a:	eee7 0a27 	vfma.f32	s1, s14, s15
 800dc9e:	3f01      	subs	r7, #1
 800dca0:	ea57 0200 	orrs.w	r2, r7, r0
 800dca4:	ee07 4a10 	vmov	s14, r4
 800dca8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dcac:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800dcb0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800dcb4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800dcb8:	ee17 4a10 	vmov	r4, s14
 800dcbc:	bf08      	it	eq
 800dcbe:	eeb0 8a40 	vmoveq.f32	s16, s0
 800dcc2:	2c00      	cmp	r4, #0
 800dcc4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800dcc8:	f340 817e 	ble.w	800dfc8 <__ieee754_powf+0x51c>
 800dccc:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800dcd0:	f340 80f8 	ble.w	800dec4 <__ieee754_powf+0x418>
 800dcd4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800dcd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcdc:	bf4c      	ite	mi
 800dcde:	2001      	movmi	r0, #1
 800dce0:	2000      	movpl	r0, #0
 800dce2:	e790      	b.n	800dc06 <__ieee754_powf+0x15a>
 800dce4:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800dce8:	bf01      	itttt	eq
 800dcea:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800de84 <__ieee754_powf+0x3d8>
 800dcee:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800dcf2:	f06f 0217 	mvneq.w	r2, #23
 800dcf6:	ee17 5a90 	vmoveq	r5, s15
 800dcfa:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800dcfe:	bf18      	it	ne
 800dd00:	2200      	movne	r2, #0
 800dd02:	3b7f      	subs	r3, #127	; 0x7f
 800dd04:	4413      	add	r3, r2
 800dd06:	4a60      	ldr	r2, [pc, #384]	; (800de88 <__ieee754_powf+0x3dc>)
 800dd08:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800dd0c:	4295      	cmp	r5, r2
 800dd0e:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800dd12:	dd06      	ble.n	800dd22 <__ieee754_powf+0x276>
 800dd14:	4a5d      	ldr	r2, [pc, #372]	; (800de8c <__ieee754_powf+0x3e0>)
 800dd16:	4295      	cmp	r5, r2
 800dd18:	f340 80a4 	ble.w	800de64 <__ieee754_powf+0x3b8>
 800dd1c:	3301      	adds	r3, #1
 800dd1e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800dd22:	2500      	movs	r5, #0
 800dd24:	4a5a      	ldr	r2, [pc, #360]	; (800de90 <__ieee754_powf+0x3e4>)
 800dd26:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800dd2a:	ee07 1a90 	vmov	s15, r1
 800dd2e:	ed92 7a00 	vldr	s14, [r2]
 800dd32:	4a58      	ldr	r2, [pc, #352]	; (800de94 <__ieee754_powf+0x3e8>)
 800dd34:	ee37 6a27 	vadd.f32	s12, s14, s15
 800dd38:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800dd3c:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800dd40:	1049      	asrs	r1, r1, #1
 800dd42:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800dd46:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800dd4a:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800dd4e:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800dd52:	ee06 1a10 	vmov	s12, r1
 800dd56:	ee65 4a26 	vmul.f32	s9, s10, s13
 800dd5a:	ee36 7a47 	vsub.f32	s14, s12, s14
 800dd5e:	ee14 6a90 	vmov	r6, s9
 800dd62:	4016      	ands	r6, r2
 800dd64:	ee05 6a90 	vmov	s11, r6
 800dd68:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800dd6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dd70:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800de98 <__ieee754_powf+0x3ec>
 800dd74:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800dd78:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800dd7c:	ee25 6a26 	vmul.f32	s12, s10, s13
 800dd80:	eddf 6a46 	vldr	s13, [pc, #280]	; 800de9c <__ieee754_powf+0x3f0>
 800dd84:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800dd88:	eddf 6a45 	vldr	s13, [pc, #276]	; 800dea0 <__ieee754_powf+0x3f4>
 800dd8c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800dd90:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800de74 <__ieee754_powf+0x3c8>
 800dd94:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dd98:	eddf 6a42 	vldr	s13, [pc, #264]	; 800dea4 <__ieee754_powf+0x3f8>
 800dd9c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800dda0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800dea8 <__ieee754_powf+0x3fc>
 800dda4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dda8:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800ddac:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800ddb0:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ddb4:	eee5 6a07 	vfma.f32	s13, s10, s14
 800ddb8:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800ddbc:	eef0 7a45 	vmov.f32	s15, s10
 800ddc0:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800ddc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ddc8:	ee17 1a90 	vmov	r1, s15
 800ddcc:	4011      	ands	r1, r2
 800ddce:	ee07 1a90 	vmov	s15, r1
 800ddd2:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800ddd6:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800ddda:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ddde:	ee27 7a24 	vmul.f32	s14, s14, s9
 800dde2:	eea6 7a27 	vfma.f32	s14, s12, s15
 800dde6:	eeb0 6a47 	vmov.f32	s12, s14
 800ddea:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800ddee:	ee16 1a10 	vmov	r1, s12
 800ddf2:	4011      	ands	r1, r2
 800ddf4:	ee06 1a90 	vmov	s13, r1
 800ddf8:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800ddfc:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800deac <__ieee754_powf+0x400>
 800de00:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800deb0 <__ieee754_powf+0x404>
 800de04:	ee37 7a66 	vsub.f32	s14, s14, s13
 800de08:	ee06 1a10 	vmov	s12, r1
 800de0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800de10:	eddf 7a28 	vldr	s15, [pc, #160]	; 800deb4 <__ieee754_powf+0x408>
 800de14:	4928      	ldr	r1, [pc, #160]	; (800deb8 <__ieee754_powf+0x40c>)
 800de16:	eea6 7a27 	vfma.f32	s14, s12, s15
 800de1a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800de1e:	edd1 7a00 	vldr	s15, [r1]
 800de22:	ee37 7a27 	vadd.f32	s14, s14, s15
 800de26:	ee07 3a90 	vmov	s15, r3
 800de2a:	4b24      	ldr	r3, [pc, #144]	; (800debc <__ieee754_powf+0x410>)
 800de2c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800de30:	eef0 7a47 	vmov.f32	s15, s14
 800de34:	eee6 7a25 	vfma.f32	s15, s12, s11
 800de38:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800de3c:	edd5 0a00 	vldr	s1, [r5]
 800de40:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800de44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800de48:	ee17 3a90 	vmov	r3, s15
 800de4c:	4013      	ands	r3, r2
 800de4e:	ee07 3a90 	vmov	s15, r3
 800de52:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800de56:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800de5a:	eee6 6a65 	vfms.f32	s13, s12, s11
 800de5e:	ee77 7a66 	vsub.f32	s15, s14, s13
 800de62:	e70e      	b.n	800dc82 <__ieee754_powf+0x1d6>
 800de64:	2501      	movs	r5, #1
 800de66:	e75d      	b.n	800dd24 <__ieee754_powf+0x278>
 800de68:	00000000 	.word	0x00000000
 800de6c:	3f7ffff3 	.word	0x3f7ffff3
 800de70:	3f800007 	.word	0x3f800007
 800de74:	3eaaaaab 	.word	0x3eaaaaab
 800de78:	3fb8aa3b 	.word	0x3fb8aa3b
 800de7c:	36eca570 	.word	0x36eca570
 800de80:	3fb8aa00 	.word	0x3fb8aa00
 800de84:	4b800000 	.word	0x4b800000
 800de88:	001cc471 	.word	0x001cc471
 800de8c:	005db3d6 	.word	0x005db3d6
 800de90:	0800f080 	.word	0x0800f080
 800de94:	fffff000 	.word	0xfffff000
 800de98:	3e6c3255 	.word	0x3e6c3255
 800de9c:	3e53f142 	.word	0x3e53f142
 800dea0:	3e8ba305 	.word	0x3e8ba305
 800dea4:	3edb6db7 	.word	0x3edb6db7
 800dea8:	3f19999a 	.word	0x3f19999a
 800deac:	3f76384f 	.word	0x3f76384f
 800deb0:	3f763800 	.word	0x3f763800
 800deb4:	369dc3a0 	.word	0x369dc3a0
 800deb8:	0800f090 	.word	0x0800f090
 800debc:	0800f088 	.word	0x0800f088
 800dec0:	3338aa3c 	.word	0x3338aa3c
 800dec4:	f040 8095 	bne.w	800dff2 <__ieee754_powf+0x546>
 800dec8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800dec0 <__ieee754_powf+0x414>
 800decc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ded0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800ded4:	eef4 6ac7 	vcmpe.f32	s13, s14
 800ded8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dedc:	f73f aefa 	bgt.w	800dcd4 <__ieee754_powf+0x228>
 800dee0:	15db      	asrs	r3, r3, #23
 800dee2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800dee6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800deea:	4103      	asrs	r3, r0
 800deec:	4423      	add	r3, r4
 800deee:	494b      	ldr	r1, [pc, #300]	; (800e01c <__ieee754_powf+0x570>)
 800def0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800def4:	3a7f      	subs	r2, #127	; 0x7f
 800def6:	4111      	asrs	r1, r2
 800def8:	ea23 0101 	bic.w	r1, r3, r1
 800defc:	ee07 1a10 	vmov	s14, r1
 800df00:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800df04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800df08:	f1c2 0217 	rsb	r2, r2, #23
 800df0c:	4110      	asrs	r0, r2
 800df0e:	2c00      	cmp	r4, #0
 800df10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800df14:	bfb8      	it	lt
 800df16:	4240      	neglt	r0, r0
 800df18:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800df1c:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800e020 <__ieee754_powf+0x574>
 800df20:	eddf 6a40 	vldr	s13, [pc, #256]	; 800e024 <__ieee754_powf+0x578>
 800df24:	ee17 3a10 	vmov	r3, s14
 800df28:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800df2c:	f023 030f 	bic.w	r3, r3, #15
 800df30:	ee07 3a10 	vmov	s14, r3
 800df34:	ee77 7a67 	vsub.f32	s15, s14, s15
 800df38:	ee27 0a00 	vmul.f32	s0, s14, s0
 800df3c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800df40:	eddf 7a39 	vldr	s15, [pc, #228]	; 800e028 <__ieee754_powf+0x57c>
 800df44:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800df48:	eef0 7a40 	vmov.f32	s15, s0
 800df4c:	eee7 7a26 	vfma.f32	s15, s14, s13
 800df50:	eeb0 6a67 	vmov.f32	s12, s15
 800df54:	eea7 6a66 	vfms.f32	s12, s14, s13
 800df58:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800df5c:	ee30 0a46 	vsub.f32	s0, s0, s12
 800df60:	eddf 6a32 	vldr	s13, [pc, #200]	; 800e02c <__ieee754_powf+0x580>
 800df64:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800e030 <__ieee754_powf+0x584>
 800df68:	eee7 6a06 	vfma.f32	s13, s14, s12
 800df6c:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800e034 <__ieee754_powf+0x588>
 800df70:	eea6 6a87 	vfma.f32	s12, s13, s14
 800df74:	eddf 6a30 	vldr	s13, [pc, #192]	; 800e038 <__ieee754_powf+0x58c>
 800df78:	eee6 6a07 	vfma.f32	s13, s12, s14
 800df7c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800e03c <__ieee754_powf+0x590>
 800df80:	eea6 6a87 	vfma.f32	s12, s13, s14
 800df84:	eef0 6a67 	vmov.f32	s13, s15
 800df88:	eee6 6a47 	vfms.f32	s13, s12, s14
 800df8c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800df90:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800df94:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800df98:	eea7 0a80 	vfma.f32	s0, s15, s0
 800df9c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800dfa0:	ee37 0a40 	vsub.f32	s0, s14, s0
 800dfa4:	ee70 7a67 	vsub.f32	s15, s0, s15
 800dfa8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800dfac:	ee30 0a67 	vsub.f32	s0, s0, s15
 800dfb0:	ee10 3a10 	vmov	r3, s0
 800dfb4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800dfb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dfbc:	da1f      	bge.n	800dffe <__ieee754_powf+0x552>
 800dfbe:	f000 fe9d 	bl	800ecfc <scalbnf>
 800dfc2:	ee20 0a08 	vmul.f32	s0, s0, s16
 800dfc6:	e589      	b.n	800dadc <__ieee754_powf+0x30>
 800dfc8:	4a1d      	ldr	r2, [pc, #116]	; (800e040 <__ieee754_powf+0x594>)
 800dfca:	4293      	cmp	r3, r2
 800dfcc:	dd07      	ble.n	800dfde <__ieee754_powf+0x532>
 800dfce:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800dfd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfd6:	bf4c      	ite	mi
 800dfd8:	2001      	movmi	r0, #1
 800dfda:	2000      	movpl	r0, #0
 800dfdc:	e61f      	b.n	800dc1e <__ieee754_powf+0x172>
 800dfde:	d108      	bne.n	800dff2 <__ieee754_powf+0x546>
 800dfe0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dfe4:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800dfe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfec:	f6ff af78 	blt.w	800dee0 <__ieee754_powf+0x434>
 800dff0:	e7ed      	b.n	800dfce <__ieee754_powf+0x522>
 800dff2:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800dff6:	f73f af73 	bgt.w	800dee0 <__ieee754_powf+0x434>
 800dffa:	2000      	movs	r0, #0
 800dffc:	e78c      	b.n	800df18 <__ieee754_powf+0x46c>
 800dffe:	ee00 3a10 	vmov	s0, r3
 800e002:	e7de      	b.n	800dfc2 <__ieee754_powf+0x516>
 800e004:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e008:	e568      	b.n	800dadc <__ieee754_powf+0x30>
 800e00a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800e044 <__ieee754_powf+0x598>
 800e00e:	e565      	b.n	800dadc <__ieee754_powf+0x30>
 800e010:	eeb0 0a48 	vmov.f32	s0, s16
 800e014:	e562      	b.n	800dadc <__ieee754_powf+0x30>
 800e016:	2700      	movs	r7, #0
 800e018:	e58d      	b.n	800db36 <__ieee754_powf+0x8a>
 800e01a:	bf00      	nop
 800e01c:	007fffff 	.word	0x007fffff
 800e020:	35bfbe8c 	.word	0x35bfbe8c
 800e024:	3f317200 	.word	0x3f317200
 800e028:	3f317218 	.word	0x3f317218
 800e02c:	b5ddea0e 	.word	0xb5ddea0e
 800e030:	3331bb4c 	.word	0x3331bb4c
 800e034:	388ab355 	.word	0x388ab355
 800e038:	bb360b61 	.word	0xbb360b61
 800e03c:	3e2aaaab 	.word	0x3e2aaaab
 800e040:	43160000 	.word	0x43160000
 800e044:	00000000 	.word	0x00000000

0800e048 <__ieee754_sqrtf>:
 800e048:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e04c:	4770      	bx	lr
	...

0800e050 <__kernel_cos>:
 800e050:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e054:	ec57 6b10 	vmov	r6, r7, d0
 800e058:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e05c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e060:	ed8d 1b00 	vstr	d1, [sp]
 800e064:	da07      	bge.n	800e076 <__kernel_cos+0x26>
 800e066:	ee10 0a10 	vmov	r0, s0
 800e06a:	4639      	mov	r1, r7
 800e06c:	f7f2 fd20 	bl	8000ab0 <__aeabi_d2iz>
 800e070:	2800      	cmp	r0, #0
 800e072:	f000 8088 	beq.w	800e186 <__kernel_cos+0x136>
 800e076:	4632      	mov	r2, r6
 800e078:	463b      	mov	r3, r7
 800e07a:	4630      	mov	r0, r6
 800e07c:	4639      	mov	r1, r7
 800e07e:	f7f2 fa67 	bl	8000550 <__aeabi_dmul>
 800e082:	4b51      	ldr	r3, [pc, #324]	; (800e1c8 <__kernel_cos+0x178>)
 800e084:	2200      	movs	r2, #0
 800e086:	4604      	mov	r4, r0
 800e088:	460d      	mov	r5, r1
 800e08a:	f7f2 fa61 	bl	8000550 <__aeabi_dmul>
 800e08e:	a340      	add	r3, pc, #256	; (adr r3, 800e190 <__kernel_cos+0x140>)
 800e090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e094:	4682      	mov	sl, r0
 800e096:	468b      	mov	fp, r1
 800e098:	4620      	mov	r0, r4
 800e09a:	4629      	mov	r1, r5
 800e09c:	f7f2 fa58 	bl	8000550 <__aeabi_dmul>
 800e0a0:	a33d      	add	r3, pc, #244	; (adr r3, 800e198 <__kernel_cos+0x148>)
 800e0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0a6:	f7f2 f89d 	bl	80001e4 <__adddf3>
 800e0aa:	4622      	mov	r2, r4
 800e0ac:	462b      	mov	r3, r5
 800e0ae:	f7f2 fa4f 	bl	8000550 <__aeabi_dmul>
 800e0b2:	a33b      	add	r3, pc, #236	; (adr r3, 800e1a0 <__kernel_cos+0x150>)
 800e0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b8:	f7f2 f892 	bl	80001e0 <__aeabi_dsub>
 800e0bc:	4622      	mov	r2, r4
 800e0be:	462b      	mov	r3, r5
 800e0c0:	f7f2 fa46 	bl	8000550 <__aeabi_dmul>
 800e0c4:	a338      	add	r3, pc, #224	; (adr r3, 800e1a8 <__kernel_cos+0x158>)
 800e0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ca:	f7f2 f88b 	bl	80001e4 <__adddf3>
 800e0ce:	4622      	mov	r2, r4
 800e0d0:	462b      	mov	r3, r5
 800e0d2:	f7f2 fa3d 	bl	8000550 <__aeabi_dmul>
 800e0d6:	a336      	add	r3, pc, #216	; (adr r3, 800e1b0 <__kernel_cos+0x160>)
 800e0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0dc:	f7f2 f880 	bl	80001e0 <__aeabi_dsub>
 800e0e0:	4622      	mov	r2, r4
 800e0e2:	462b      	mov	r3, r5
 800e0e4:	f7f2 fa34 	bl	8000550 <__aeabi_dmul>
 800e0e8:	a333      	add	r3, pc, #204	; (adr r3, 800e1b8 <__kernel_cos+0x168>)
 800e0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ee:	f7f2 f879 	bl	80001e4 <__adddf3>
 800e0f2:	4622      	mov	r2, r4
 800e0f4:	462b      	mov	r3, r5
 800e0f6:	f7f2 fa2b 	bl	8000550 <__aeabi_dmul>
 800e0fa:	4622      	mov	r2, r4
 800e0fc:	462b      	mov	r3, r5
 800e0fe:	f7f2 fa27 	bl	8000550 <__aeabi_dmul>
 800e102:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e106:	4604      	mov	r4, r0
 800e108:	460d      	mov	r5, r1
 800e10a:	4630      	mov	r0, r6
 800e10c:	4639      	mov	r1, r7
 800e10e:	f7f2 fa1f 	bl	8000550 <__aeabi_dmul>
 800e112:	460b      	mov	r3, r1
 800e114:	4602      	mov	r2, r0
 800e116:	4629      	mov	r1, r5
 800e118:	4620      	mov	r0, r4
 800e11a:	f7f2 f861 	bl	80001e0 <__aeabi_dsub>
 800e11e:	4b2b      	ldr	r3, [pc, #172]	; (800e1cc <__kernel_cos+0x17c>)
 800e120:	4598      	cmp	r8, r3
 800e122:	4606      	mov	r6, r0
 800e124:	460f      	mov	r7, r1
 800e126:	dc10      	bgt.n	800e14a <__kernel_cos+0xfa>
 800e128:	4602      	mov	r2, r0
 800e12a:	460b      	mov	r3, r1
 800e12c:	4650      	mov	r0, sl
 800e12e:	4659      	mov	r1, fp
 800e130:	f7f2 f856 	bl	80001e0 <__aeabi_dsub>
 800e134:	460b      	mov	r3, r1
 800e136:	4926      	ldr	r1, [pc, #152]	; (800e1d0 <__kernel_cos+0x180>)
 800e138:	4602      	mov	r2, r0
 800e13a:	2000      	movs	r0, #0
 800e13c:	f7f2 f850 	bl	80001e0 <__aeabi_dsub>
 800e140:	ec41 0b10 	vmov	d0, r0, r1
 800e144:	b003      	add	sp, #12
 800e146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e14a:	4b22      	ldr	r3, [pc, #136]	; (800e1d4 <__kernel_cos+0x184>)
 800e14c:	4920      	ldr	r1, [pc, #128]	; (800e1d0 <__kernel_cos+0x180>)
 800e14e:	4598      	cmp	r8, r3
 800e150:	bfcc      	ite	gt
 800e152:	4d21      	ldrgt	r5, [pc, #132]	; (800e1d8 <__kernel_cos+0x188>)
 800e154:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800e158:	2400      	movs	r4, #0
 800e15a:	4622      	mov	r2, r4
 800e15c:	462b      	mov	r3, r5
 800e15e:	2000      	movs	r0, #0
 800e160:	f7f2 f83e 	bl	80001e0 <__aeabi_dsub>
 800e164:	4622      	mov	r2, r4
 800e166:	4680      	mov	r8, r0
 800e168:	4689      	mov	r9, r1
 800e16a:	462b      	mov	r3, r5
 800e16c:	4650      	mov	r0, sl
 800e16e:	4659      	mov	r1, fp
 800e170:	f7f2 f836 	bl	80001e0 <__aeabi_dsub>
 800e174:	4632      	mov	r2, r6
 800e176:	463b      	mov	r3, r7
 800e178:	f7f2 f832 	bl	80001e0 <__aeabi_dsub>
 800e17c:	4602      	mov	r2, r0
 800e17e:	460b      	mov	r3, r1
 800e180:	4640      	mov	r0, r8
 800e182:	4649      	mov	r1, r9
 800e184:	e7da      	b.n	800e13c <__kernel_cos+0xec>
 800e186:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e1c0 <__kernel_cos+0x170>
 800e18a:	e7db      	b.n	800e144 <__kernel_cos+0xf4>
 800e18c:	f3af 8000 	nop.w
 800e190:	be8838d4 	.word	0xbe8838d4
 800e194:	bda8fae9 	.word	0xbda8fae9
 800e198:	bdb4b1c4 	.word	0xbdb4b1c4
 800e19c:	3e21ee9e 	.word	0x3e21ee9e
 800e1a0:	809c52ad 	.word	0x809c52ad
 800e1a4:	3e927e4f 	.word	0x3e927e4f
 800e1a8:	19cb1590 	.word	0x19cb1590
 800e1ac:	3efa01a0 	.word	0x3efa01a0
 800e1b0:	16c15177 	.word	0x16c15177
 800e1b4:	3f56c16c 	.word	0x3f56c16c
 800e1b8:	5555554c 	.word	0x5555554c
 800e1bc:	3fa55555 	.word	0x3fa55555
 800e1c0:	00000000 	.word	0x00000000
 800e1c4:	3ff00000 	.word	0x3ff00000
 800e1c8:	3fe00000 	.word	0x3fe00000
 800e1cc:	3fd33332 	.word	0x3fd33332
 800e1d0:	3ff00000 	.word	0x3ff00000
 800e1d4:	3fe90000 	.word	0x3fe90000
 800e1d8:	3fd20000 	.word	0x3fd20000
 800e1dc:	00000000 	.word	0x00000000

0800e1e0 <__kernel_rem_pio2>:
 800e1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1e4:	ed2d 8b02 	vpush	{d8}
 800e1e8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800e1ec:	f112 0f14 	cmn.w	r2, #20
 800e1f0:	9308      	str	r3, [sp, #32]
 800e1f2:	9101      	str	r1, [sp, #4]
 800e1f4:	4bc4      	ldr	r3, [pc, #784]	; (800e508 <__kernel_rem_pio2+0x328>)
 800e1f6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800e1f8:	900b      	str	r0, [sp, #44]	; 0x2c
 800e1fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e1fe:	9302      	str	r3, [sp, #8]
 800e200:	9b08      	ldr	r3, [sp, #32]
 800e202:	f103 33ff 	add.w	r3, r3, #4294967295
 800e206:	bfa8      	it	ge
 800e208:	1ed4      	subge	r4, r2, #3
 800e20a:	9306      	str	r3, [sp, #24]
 800e20c:	bfb2      	itee	lt
 800e20e:	2400      	movlt	r4, #0
 800e210:	2318      	movge	r3, #24
 800e212:	fb94 f4f3 	sdivge	r4, r4, r3
 800e216:	f06f 0317 	mvn.w	r3, #23
 800e21a:	fb04 3303 	mla	r3, r4, r3, r3
 800e21e:	eb03 0a02 	add.w	sl, r3, r2
 800e222:	9b02      	ldr	r3, [sp, #8]
 800e224:	9a06      	ldr	r2, [sp, #24]
 800e226:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800e4f8 <__kernel_rem_pio2+0x318>
 800e22a:	eb03 0802 	add.w	r8, r3, r2
 800e22e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e230:	1aa7      	subs	r7, r4, r2
 800e232:	ae22      	add	r6, sp, #136	; 0x88
 800e234:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e238:	2500      	movs	r5, #0
 800e23a:	4545      	cmp	r5, r8
 800e23c:	dd13      	ble.n	800e266 <__kernel_rem_pio2+0x86>
 800e23e:	9b08      	ldr	r3, [sp, #32]
 800e240:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800e4f8 <__kernel_rem_pio2+0x318>
 800e244:	aa22      	add	r2, sp, #136	; 0x88
 800e246:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e24a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800e24e:	f04f 0800 	mov.w	r8, #0
 800e252:	9b02      	ldr	r3, [sp, #8]
 800e254:	4598      	cmp	r8, r3
 800e256:	dc2f      	bgt.n	800e2b8 <__kernel_rem_pio2+0xd8>
 800e258:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e25c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800e260:	462f      	mov	r7, r5
 800e262:	2600      	movs	r6, #0
 800e264:	e01b      	b.n	800e29e <__kernel_rem_pio2+0xbe>
 800e266:	42ef      	cmn	r7, r5
 800e268:	d407      	bmi.n	800e27a <__kernel_rem_pio2+0x9a>
 800e26a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e26e:	f7f2 f905 	bl	800047c <__aeabi_i2d>
 800e272:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e276:	3501      	adds	r5, #1
 800e278:	e7df      	b.n	800e23a <__kernel_rem_pio2+0x5a>
 800e27a:	ec51 0b18 	vmov	r0, r1, d8
 800e27e:	e7f8      	b.n	800e272 <__kernel_rem_pio2+0x92>
 800e280:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e284:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e288:	f7f2 f962 	bl	8000550 <__aeabi_dmul>
 800e28c:	4602      	mov	r2, r0
 800e28e:	460b      	mov	r3, r1
 800e290:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e294:	f7f1 ffa6 	bl	80001e4 <__adddf3>
 800e298:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e29c:	3601      	adds	r6, #1
 800e29e:	9b06      	ldr	r3, [sp, #24]
 800e2a0:	429e      	cmp	r6, r3
 800e2a2:	f1a7 0708 	sub.w	r7, r7, #8
 800e2a6:	ddeb      	ble.n	800e280 <__kernel_rem_pio2+0xa0>
 800e2a8:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e2ac:	f108 0801 	add.w	r8, r8, #1
 800e2b0:	ecab 7b02 	vstmia	fp!, {d7}
 800e2b4:	3508      	adds	r5, #8
 800e2b6:	e7cc      	b.n	800e252 <__kernel_rem_pio2+0x72>
 800e2b8:	9b02      	ldr	r3, [sp, #8]
 800e2ba:	aa0e      	add	r2, sp, #56	; 0x38
 800e2bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e2c0:	930d      	str	r3, [sp, #52]	; 0x34
 800e2c2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e2c4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e2c8:	9c02      	ldr	r4, [sp, #8]
 800e2ca:	930c      	str	r3, [sp, #48]	; 0x30
 800e2cc:	00e3      	lsls	r3, r4, #3
 800e2ce:	930a      	str	r3, [sp, #40]	; 0x28
 800e2d0:	ab9a      	add	r3, sp, #616	; 0x268
 800e2d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e2d6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e2da:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800e2de:	ab72      	add	r3, sp, #456	; 0x1c8
 800e2e0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e2e4:	46c3      	mov	fp, r8
 800e2e6:	46a1      	mov	r9, r4
 800e2e8:	f1b9 0f00 	cmp.w	r9, #0
 800e2ec:	f1a5 0508 	sub.w	r5, r5, #8
 800e2f0:	dc77      	bgt.n	800e3e2 <__kernel_rem_pio2+0x202>
 800e2f2:	ec47 6b10 	vmov	d0, r6, r7
 800e2f6:	4650      	mov	r0, sl
 800e2f8:	f000 fc66 	bl	800ebc8 <scalbn>
 800e2fc:	ec57 6b10 	vmov	r6, r7, d0
 800e300:	2200      	movs	r2, #0
 800e302:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e306:	ee10 0a10 	vmov	r0, s0
 800e30a:	4639      	mov	r1, r7
 800e30c:	f7f2 f920 	bl	8000550 <__aeabi_dmul>
 800e310:	ec41 0b10 	vmov	d0, r0, r1
 800e314:	f000 fbd8 	bl	800eac8 <floor>
 800e318:	4b7c      	ldr	r3, [pc, #496]	; (800e50c <__kernel_rem_pio2+0x32c>)
 800e31a:	ec51 0b10 	vmov	r0, r1, d0
 800e31e:	2200      	movs	r2, #0
 800e320:	f7f2 f916 	bl	8000550 <__aeabi_dmul>
 800e324:	4602      	mov	r2, r0
 800e326:	460b      	mov	r3, r1
 800e328:	4630      	mov	r0, r6
 800e32a:	4639      	mov	r1, r7
 800e32c:	f7f1 ff58 	bl	80001e0 <__aeabi_dsub>
 800e330:	460f      	mov	r7, r1
 800e332:	4606      	mov	r6, r0
 800e334:	f7f2 fbbc 	bl	8000ab0 <__aeabi_d2iz>
 800e338:	9004      	str	r0, [sp, #16]
 800e33a:	f7f2 f89f 	bl	800047c <__aeabi_i2d>
 800e33e:	4602      	mov	r2, r0
 800e340:	460b      	mov	r3, r1
 800e342:	4630      	mov	r0, r6
 800e344:	4639      	mov	r1, r7
 800e346:	f7f1 ff4b 	bl	80001e0 <__aeabi_dsub>
 800e34a:	f1ba 0f00 	cmp.w	sl, #0
 800e34e:	4606      	mov	r6, r0
 800e350:	460f      	mov	r7, r1
 800e352:	dd6d      	ble.n	800e430 <__kernel_rem_pio2+0x250>
 800e354:	1e62      	subs	r2, r4, #1
 800e356:	ab0e      	add	r3, sp, #56	; 0x38
 800e358:	9d04      	ldr	r5, [sp, #16]
 800e35a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e35e:	f1ca 0118 	rsb	r1, sl, #24
 800e362:	fa40 f301 	asr.w	r3, r0, r1
 800e366:	441d      	add	r5, r3
 800e368:	408b      	lsls	r3, r1
 800e36a:	1ac0      	subs	r0, r0, r3
 800e36c:	ab0e      	add	r3, sp, #56	; 0x38
 800e36e:	9504      	str	r5, [sp, #16]
 800e370:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e374:	f1ca 0317 	rsb	r3, sl, #23
 800e378:	fa40 fb03 	asr.w	fp, r0, r3
 800e37c:	f1bb 0f00 	cmp.w	fp, #0
 800e380:	dd65      	ble.n	800e44e <__kernel_rem_pio2+0x26e>
 800e382:	9b04      	ldr	r3, [sp, #16]
 800e384:	2200      	movs	r2, #0
 800e386:	3301      	adds	r3, #1
 800e388:	9304      	str	r3, [sp, #16]
 800e38a:	4615      	mov	r5, r2
 800e38c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e390:	4294      	cmp	r4, r2
 800e392:	f300 809c 	bgt.w	800e4ce <__kernel_rem_pio2+0x2ee>
 800e396:	f1ba 0f00 	cmp.w	sl, #0
 800e39a:	dd07      	ble.n	800e3ac <__kernel_rem_pio2+0x1cc>
 800e39c:	f1ba 0f01 	cmp.w	sl, #1
 800e3a0:	f000 80c0 	beq.w	800e524 <__kernel_rem_pio2+0x344>
 800e3a4:	f1ba 0f02 	cmp.w	sl, #2
 800e3a8:	f000 80c6 	beq.w	800e538 <__kernel_rem_pio2+0x358>
 800e3ac:	f1bb 0f02 	cmp.w	fp, #2
 800e3b0:	d14d      	bne.n	800e44e <__kernel_rem_pio2+0x26e>
 800e3b2:	4632      	mov	r2, r6
 800e3b4:	463b      	mov	r3, r7
 800e3b6:	4956      	ldr	r1, [pc, #344]	; (800e510 <__kernel_rem_pio2+0x330>)
 800e3b8:	2000      	movs	r0, #0
 800e3ba:	f7f1 ff11 	bl	80001e0 <__aeabi_dsub>
 800e3be:	4606      	mov	r6, r0
 800e3c0:	460f      	mov	r7, r1
 800e3c2:	2d00      	cmp	r5, #0
 800e3c4:	d043      	beq.n	800e44e <__kernel_rem_pio2+0x26e>
 800e3c6:	4650      	mov	r0, sl
 800e3c8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800e500 <__kernel_rem_pio2+0x320>
 800e3cc:	f000 fbfc 	bl	800ebc8 <scalbn>
 800e3d0:	4630      	mov	r0, r6
 800e3d2:	4639      	mov	r1, r7
 800e3d4:	ec53 2b10 	vmov	r2, r3, d0
 800e3d8:	f7f1 ff02 	bl	80001e0 <__aeabi_dsub>
 800e3dc:	4606      	mov	r6, r0
 800e3de:	460f      	mov	r7, r1
 800e3e0:	e035      	b.n	800e44e <__kernel_rem_pio2+0x26e>
 800e3e2:	4b4c      	ldr	r3, [pc, #304]	; (800e514 <__kernel_rem_pio2+0x334>)
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	4630      	mov	r0, r6
 800e3e8:	4639      	mov	r1, r7
 800e3ea:	f7f2 f8b1 	bl	8000550 <__aeabi_dmul>
 800e3ee:	f7f2 fb5f 	bl	8000ab0 <__aeabi_d2iz>
 800e3f2:	f7f2 f843 	bl	800047c <__aeabi_i2d>
 800e3f6:	4602      	mov	r2, r0
 800e3f8:	460b      	mov	r3, r1
 800e3fa:	ec43 2b18 	vmov	d8, r2, r3
 800e3fe:	4b46      	ldr	r3, [pc, #280]	; (800e518 <__kernel_rem_pio2+0x338>)
 800e400:	2200      	movs	r2, #0
 800e402:	f7f2 f8a5 	bl	8000550 <__aeabi_dmul>
 800e406:	4602      	mov	r2, r0
 800e408:	460b      	mov	r3, r1
 800e40a:	4630      	mov	r0, r6
 800e40c:	4639      	mov	r1, r7
 800e40e:	f7f1 fee7 	bl	80001e0 <__aeabi_dsub>
 800e412:	f7f2 fb4d 	bl	8000ab0 <__aeabi_d2iz>
 800e416:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e41a:	f84b 0b04 	str.w	r0, [fp], #4
 800e41e:	ec51 0b18 	vmov	r0, r1, d8
 800e422:	f7f1 fedf 	bl	80001e4 <__adddf3>
 800e426:	f109 39ff 	add.w	r9, r9, #4294967295
 800e42a:	4606      	mov	r6, r0
 800e42c:	460f      	mov	r7, r1
 800e42e:	e75b      	b.n	800e2e8 <__kernel_rem_pio2+0x108>
 800e430:	d106      	bne.n	800e440 <__kernel_rem_pio2+0x260>
 800e432:	1e63      	subs	r3, r4, #1
 800e434:	aa0e      	add	r2, sp, #56	; 0x38
 800e436:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e43a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800e43e:	e79d      	b.n	800e37c <__kernel_rem_pio2+0x19c>
 800e440:	4b36      	ldr	r3, [pc, #216]	; (800e51c <__kernel_rem_pio2+0x33c>)
 800e442:	2200      	movs	r2, #0
 800e444:	f7f2 fb0a 	bl	8000a5c <__aeabi_dcmpge>
 800e448:	2800      	cmp	r0, #0
 800e44a:	d13d      	bne.n	800e4c8 <__kernel_rem_pio2+0x2e8>
 800e44c:	4683      	mov	fp, r0
 800e44e:	2200      	movs	r2, #0
 800e450:	2300      	movs	r3, #0
 800e452:	4630      	mov	r0, r6
 800e454:	4639      	mov	r1, r7
 800e456:	f7f2 fae3 	bl	8000a20 <__aeabi_dcmpeq>
 800e45a:	2800      	cmp	r0, #0
 800e45c:	f000 80c0 	beq.w	800e5e0 <__kernel_rem_pio2+0x400>
 800e460:	1e65      	subs	r5, r4, #1
 800e462:	462b      	mov	r3, r5
 800e464:	2200      	movs	r2, #0
 800e466:	9902      	ldr	r1, [sp, #8]
 800e468:	428b      	cmp	r3, r1
 800e46a:	da6c      	bge.n	800e546 <__kernel_rem_pio2+0x366>
 800e46c:	2a00      	cmp	r2, #0
 800e46e:	f000 8089 	beq.w	800e584 <__kernel_rem_pio2+0x3a4>
 800e472:	ab0e      	add	r3, sp, #56	; 0x38
 800e474:	f1aa 0a18 	sub.w	sl, sl, #24
 800e478:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	f000 80ad 	beq.w	800e5dc <__kernel_rem_pio2+0x3fc>
 800e482:	4650      	mov	r0, sl
 800e484:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800e500 <__kernel_rem_pio2+0x320>
 800e488:	f000 fb9e 	bl	800ebc8 <scalbn>
 800e48c:	ab9a      	add	r3, sp, #616	; 0x268
 800e48e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e492:	ec57 6b10 	vmov	r6, r7, d0
 800e496:	00ec      	lsls	r4, r5, #3
 800e498:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800e49c:	46aa      	mov	sl, r5
 800e49e:	f1ba 0f00 	cmp.w	sl, #0
 800e4a2:	f280 80d6 	bge.w	800e652 <__kernel_rem_pio2+0x472>
 800e4a6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800e4f8 <__kernel_rem_pio2+0x318>
 800e4aa:	462e      	mov	r6, r5
 800e4ac:	2e00      	cmp	r6, #0
 800e4ae:	f2c0 8104 	blt.w	800e6ba <__kernel_rem_pio2+0x4da>
 800e4b2:	ab72      	add	r3, sp, #456	; 0x1c8
 800e4b4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e4b8:	f8df a064 	ldr.w	sl, [pc, #100]	; 800e520 <__kernel_rem_pio2+0x340>
 800e4bc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800e4c0:	f04f 0800 	mov.w	r8, #0
 800e4c4:	1baf      	subs	r7, r5, r6
 800e4c6:	e0ea      	b.n	800e69e <__kernel_rem_pio2+0x4be>
 800e4c8:	f04f 0b02 	mov.w	fp, #2
 800e4cc:	e759      	b.n	800e382 <__kernel_rem_pio2+0x1a2>
 800e4ce:	f8d8 3000 	ldr.w	r3, [r8]
 800e4d2:	b955      	cbnz	r5, 800e4ea <__kernel_rem_pio2+0x30a>
 800e4d4:	b123      	cbz	r3, 800e4e0 <__kernel_rem_pio2+0x300>
 800e4d6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e4da:	f8c8 3000 	str.w	r3, [r8]
 800e4de:	2301      	movs	r3, #1
 800e4e0:	3201      	adds	r2, #1
 800e4e2:	f108 0804 	add.w	r8, r8, #4
 800e4e6:	461d      	mov	r5, r3
 800e4e8:	e752      	b.n	800e390 <__kernel_rem_pio2+0x1b0>
 800e4ea:	1acb      	subs	r3, r1, r3
 800e4ec:	f8c8 3000 	str.w	r3, [r8]
 800e4f0:	462b      	mov	r3, r5
 800e4f2:	e7f5      	b.n	800e4e0 <__kernel_rem_pio2+0x300>
 800e4f4:	f3af 8000 	nop.w
	...
 800e504:	3ff00000 	.word	0x3ff00000
 800e508:	0800f0d8 	.word	0x0800f0d8
 800e50c:	40200000 	.word	0x40200000
 800e510:	3ff00000 	.word	0x3ff00000
 800e514:	3e700000 	.word	0x3e700000
 800e518:	41700000 	.word	0x41700000
 800e51c:	3fe00000 	.word	0x3fe00000
 800e520:	0800f098 	.word	0x0800f098
 800e524:	1e62      	subs	r2, r4, #1
 800e526:	ab0e      	add	r3, sp, #56	; 0x38
 800e528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e52c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e530:	a90e      	add	r1, sp, #56	; 0x38
 800e532:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e536:	e739      	b.n	800e3ac <__kernel_rem_pio2+0x1cc>
 800e538:	1e62      	subs	r2, r4, #1
 800e53a:	ab0e      	add	r3, sp, #56	; 0x38
 800e53c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e540:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e544:	e7f4      	b.n	800e530 <__kernel_rem_pio2+0x350>
 800e546:	a90e      	add	r1, sp, #56	; 0x38
 800e548:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e54c:	3b01      	subs	r3, #1
 800e54e:	430a      	orrs	r2, r1
 800e550:	e789      	b.n	800e466 <__kernel_rem_pio2+0x286>
 800e552:	3301      	adds	r3, #1
 800e554:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e558:	2900      	cmp	r1, #0
 800e55a:	d0fa      	beq.n	800e552 <__kernel_rem_pio2+0x372>
 800e55c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e55e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800e562:	446a      	add	r2, sp
 800e564:	3a98      	subs	r2, #152	; 0x98
 800e566:	920a      	str	r2, [sp, #40]	; 0x28
 800e568:	9a08      	ldr	r2, [sp, #32]
 800e56a:	18e3      	adds	r3, r4, r3
 800e56c:	18a5      	adds	r5, r4, r2
 800e56e:	aa22      	add	r2, sp, #136	; 0x88
 800e570:	f104 0801 	add.w	r8, r4, #1
 800e574:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800e578:	9304      	str	r3, [sp, #16]
 800e57a:	9b04      	ldr	r3, [sp, #16]
 800e57c:	4543      	cmp	r3, r8
 800e57e:	da04      	bge.n	800e58a <__kernel_rem_pio2+0x3aa>
 800e580:	461c      	mov	r4, r3
 800e582:	e6a3      	b.n	800e2cc <__kernel_rem_pio2+0xec>
 800e584:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e586:	2301      	movs	r3, #1
 800e588:	e7e4      	b.n	800e554 <__kernel_rem_pio2+0x374>
 800e58a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e58c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e590:	f7f1 ff74 	bl	800047c <__aeabi_i2d>
 800e594:	e8e5 0102 	strd	r0, r1, [r5], #8
 800e598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e59a:	46ab      	mov	fp, r5
 800e59c:	461c      	mov	r4, r3
 800e59e:	f04f 0900 	mov.w	r9, #0
 800e5a2:	2600      	movs	r6, #0
 800e5a4:	2700      	movs	r7, #0
 800e5a6:	9b06      	ldr	r3, [sp, #24]
 800e5a8:	4599      	cmp	r9, r3
 800e5aa:	dd06      	ble.n	800e5ba <__kernel_rem_pio2+0x3da>
 800e5ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5ae:	e8e3 6702 	strd	r6, r7, [r3], #8
 800e5b2:	f108 0801 	add.w	r8, r8, #1
 800e5b6:	930a      	str	r3, [sp, #40]	; 0x28
 800e5b8:	e7df      	b.n	800e57a <__kernel_rem_pio2+0x39a>
 800e5ba:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e5be:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e5c2:	f7f1 ffc5 	bl	8000550 <__aeabi_dmul>
 800e5c6:	4602      	mov	r2, r0
 800e5c8:	460b      	mov	r3, r1
 800e5ca:	4630      	mov	r0, r6
 800e5cc:	4639      	mov	r1, r7
 800e5ce:	f7f1 fe09 	bl	80001e4 <__adddf3>
 800e5d2:	f109 0901 	add.w	r9, r9, #1
 800e5d6:	4606      	mov	r6, r0
 800e5d8:	460f      	mov	r7, r1
 800e5da:	e7e4      	b.n	800e5a6 <__kernel_rem_pio2+0x3c6>
 800e5dc:	3d01      	subs	r5, #1
 800e5de:	e748      	b.n	800e472 <__kernel_rem_pio2+0x292>
 800e5e0:	ec47 6b10 	vmov	d0, r6, r7
 800e5e4:	f1ca 0000 	rsb	r0, sl, #0
 800e5e8:	f000 faee 	bl	800ebc8 <scalbn>
 800e5ec:	ec57 6b10 	vmov	r6, r7, d0
 800e5f0:	4ba0      	ldr	r3, [pc, #640]	; (800e874 <__kernel_rem_pio2+0x694>)
 800e5f2:	ee10 0a10 	vmov	r0, s0
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	4639      	mov	r1, r7
 800e5fa:	f7f2 fa2f 	bl	8000a5c <__aeabi_dcmpge>
 800e5fe:	b1f8      	cbz	r0, 800e640 <__kernel_rem_pio2+0x460>
 800e600:	4b9d      	ldr	r3, [pc, #628]	; (800e878 <__kernel_rem_pio2+0x698>)
 800e602:	2200      	movs	r2, #0
 800e604:	4630      	mov	r0, r6
 800e606:	4639      	mov	r1, r7
 800e608:	f7f1 ffa2 	bl	8000550 <__aeabi_dmul>
 800e60c:	f7f2 fa50 	bl	8000ab0 <__aeabi_d2iz>
 800e610:	4680      	mov	r8, r0
 800e612:	f7f1 ff33 	bl	800047c <__aeabi_i2d>
 800e616:	4b97      	ldr	r3, [pc, #604]	; (800e874 <__kernel_rem_pio2+0x694>)
 800e618:	2200      	movs	r2, #0
 800e61a:	f7f1 ff99 	bl	8000550 <__aeabi_dmul>
 800e61e:	460b      	mov	r3, r1
 800e620:	4602      	mov	r2, r0
 800e622:	4639      	mov	r1, r7
 800e624:	4630      	mov	r0, r6
 800e626:	f7f1 fddb 	bl	80001e0 <__aeabi_dsub>
 800e62a:	f7f2 fa41 	bl	8000ab0 <__aeabi_d2iz>
 800e62e:	1c65      	adds	r5, r4, #1
 800e630:	ab0e      	add	r3, sp, #56	; 0x38
 800e632:	f10a 0a18 	add.w	sl, sl, #24
 800e636:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e63a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800e63e:	e720      	b.n	800e482 <__kernel_rem_pio2+0x2a2>
 800e640:	4630      	mov	r0, r6
 800e642:	4639      	mov	r1, r7
 800e644:	f7f2 fa34 	bl	8000ab0 <__aeabi_d2iz>
 800e648:	ab0e      	add	r3, sp, #56	; 0x38
 800e64a:	4625      	mov	r5, r4
 800e64c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e650:	e717      	b.n	800e482 <__kernel_rem_pio2+0x2a2>
 800e652:	ab0e      	add	r3, sp, #56	; 0x38
 800e654:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800e658:	f7f1 ff10 	bl	800047c <__aeabi_i2d>
 800e65c:	4632      	mov	r2, r6
 800e65e:	463b      	mov	r3, r7
 800e660:	f7f1 ff76 	bl	8000550 <__aeabi_dmul>
 800e664:	4b84      	ldr	r3, [pc, #528]	; (800e878 <__kernel_rem_pio2+0x698>)
 800e666:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800e66a:	2200      	movs	r2, #0
 800e66c:	4630      	mov	r0, r6
 800e66e:	4639      	mov	r1, r7
 800e670:	f7f1 ff6e 	bl	8000550 <__aeabi_dmul>
 800e674:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e678:	4606      	mov	r6, r0
 800e67a:	460f      	mov	r7, r1
 800e67c:	e70f      	b.n	800e49e <__kernel_rem_pio2+0x2be>
 800e67e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800e682:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800e686:	f7f1 ff63 	bl	8000550 <__aeabi_dmul>
 800e68a:	4602      	mov	r2, r0
 800e68c:	460b      	mov	r3, r1
 800e68e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e692:	f7f1 fda7 	bl	80001e4 <__adddf3>
 800e696:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e69a:	f108 0801 	add.w	r8, r8, #1
 800e69e:	9b02      	ldr	r3, [sp, #8]
 800e6a0:	4598      	cmp	r8, r3
 800e6a2:	dc01      	bgt.n	800e6a8 <__kernel_rem_pio2+0x4c8>
 800e6a4:	45b8      	cmp	r8, r7
 800e6a6:	ddea      	ble.n	800e67e <__kernel_rem_pio2+0x49e>
 800e6a8:	ed9d 7b06 	vldr	d7, [sp, #24]
 800e6ac:	ab4a      	add	r3, sp, #296	; 0x128
 800e6ae:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e6b2:	ed87 7b00 	vstr	d7, [r7]
 800e6b6:	3e01      	subs	r6, #1
 800e6b8:	e6f8      	b.n	800e4ac <__kernel_rem_pio2+0x2cc>
 800e6ba:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e6bc:	2b02      	cmp	r3, #2
 800e6be:	dc0b      	bgt.n	800e6d8 <__kernel_rem_pio2+0x4f8>
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	dc35      	bgt.n	800e730 <__kernel_rem_pio2+0x550>
 800e6c4:	d059      	beq.n	800e77a <__kernel_rem_pio2+0x59a>
 800e6c6:	9b04      	ldr	r3, [sp, #16]
 800e6c8:	f003 0007 	and.w	r0, r3, #7
 800e6cc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800e6d0:	ecbd 8b02 	vpop	{d8}
 800e6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6d8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e6da:	2b03      	cmp	r3, #3
 800e6dc:	d1f3      	bne.n	800e6c6 <__kernel_rem_pio2+0x4e6>
 800e6de:	ab4a      	add	r3, sp, #296	; 0x128
 800e6e0:	4423      	add	r3, r4
 800e6e2:	9306      	str	r3, [sp, #24]
 800e6e4:	461c      	mov	r4, r3
 800e6e6:	469a      	mov	sl, r3
 800e6e8:	9502      	str	r5, [sp, #8]
 800e6ea:	9b02      	ldr	r3, [sp, #8]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	f1aa 0a08 	sub.w	sl, sl, #8
 800e6f2:	dc6b      	bgt.n	800e7cc <__kernel_rem_pio2+0x5ec>
 800e6f4:	46aa      	mov	sl, r5
 800e6f6:	f1ba 0f01 	cmp.w	sl, #1
 800e6fa:	f1a4 0408 	sub.w	r4, r4, #8
 800e6fe:	f300 8085 	bgt.w	800e80c <__kernel_rem_pio2+0x62c>
 800e702:	9c06      	ldr	r4, [sp, #24]
 800e704:	2000      	movs	r0, #0
 800e706:	3408      	adds	r4, #8
 800e708:	2100      	movs	r1, #0
 800e70a:	2d01      	cmp	r5, #1
 800e70c:	f300 809d 	bgt.w	800e84a <__kernel_rem_pio2+0x66a>
 800e710:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800e714:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800e718:	f1bb 0f00 	cmp.w	fp, #0
 800e71c:	f040 809b 	bne.w	800e856 <__kernel_rem_pio2+0x676>
 800e720:	9b01      	ldr	r3, [sp, #4]
 800e722:	e9c3 5600 	strd	r5, r6, [r3]
 800e726:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800e72a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e72e:	e7ca      	b.n	800e6c6 <__kernel_rem_pio2+0x4e6>
 800e730:	3408      	adds	r4, #8
 800e732:	ab4a      	add	r3, sp, #296	; 0x128
 800e734:	441c      	add	r4, r3
 800e736:	462e      	mov	r6, r5
 800e738:	2000      	movs	r0, #0
 800e73a:	2100      	movs	r1, #0
 800e73c:	2e00      	cmp	r6, #0
 800e73e:	da36      	bge.n	800e7ae <__kernel_rem_pio2+0x5ce>
 800e740:	f1bb 0f00 	cmp.w	fp, #0
 800e744:	d039      	beq.n	800e7ba <__kernel_rem_pio2+0x5da>
 800e746:	4602      	mov	r2, r0
 800e748:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e74c:	9c01      	ldr	r4, [sp, #4]
 800e74e:	e9c4 2300 	strd	r2, r3, [r4]
 800e752:	4602      	mov	r2, r0
 800e754:	460b      	mov	r3, r1
 800e756:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800e75a:	f7f1 fd41 	bl	80001e0 <__aeabi_dsub>
 800e75e:	ae4c      	add	r6, sp, #304	; 0x130
 800e760:	2401      	movs	r4, #1
 800e762:	42a5      	cmp	r5, r4
 800e764:	da2c      	bge.n	800e7c0 <__kernel_rem_pio2+0x5e0>
 800e766:	f1bb 0f00 	cmp.w	fp, #0
 800e76a:	d002      	beq.n	800e772 <__kernel_rem_pio2+0x592>
 800e76c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e770:	4619      	mov	r1, r3
 800e772:	9b01      	ldr	r3, [sp, #4]
 800e774:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e778:	e7a5      	b.n	800e6c6 <__kernel_rem_pio2+0x4e6>
 800e77a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800e77e:	eb0d 0403 	add.w	r4, sp, r3
 800e782:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800e786:	2000      	movs	r0, #0
 800e788:	2100      	movs	r1, #0
 800e78a:	2d00      	cmp	r5, #0
 800e78c:	da09      	bge.n	800e7a2 <__kernel_rem_pio2+0x5c2>
 800e78e:	f1bb 0f00 	cmp.w	fp, #0
 800e792:	d002      	beq.n	800e79a <__kernel_rem_pio2+0x5ba>
 800e794:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e798:	4619      	mov	r1, r3
 800e79a:	9b01      	ldr	r3, [sp, #4]
 800e79c:	e9c3 0100 	strd	r0, r1, [r3]
 800e7a0:	e791      	b.n	800e6c6 <__kernel_rem_pio2+0x4e6>
 800e7a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e7a6:	f7f1 fd1d 	bl	80001e4 <__adddf3>
 800e7aa:	3d01      	subs	r5, #1
 800e7ac:	e7ed      	b.n	800e78a <__kernel_rem_pio2+0x5aa>
 800e7ae:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e7b2:	f7f1 fd17 	bl	80001e4 <__adddf3>
 800e7b6:	3e01      	subs	r6, #1
 800e7b8:	e7c0      	b.n	800e73c <__kernel_rem_pio2+0x55c>
 800e7ba:	4602      	mov	r2, r0
 800e7bc:	460b      	mov	r3, r1
 800e7be:	e7c5      	b.n	800e74c <__kernel_rem_pio2+0x56c>
 800e7c0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e7c4:	f7f1 fd0e 	bl	80001e4 <__adddf3>
 800e7c8:	3401      	adds	r4, #1
 800e7ca:	e7ca      	b.n	800e762 <__kernel_rem_pio2+0x582>
 800e7cc:	e9da 8900 	ldrd	r8, r9, [sl]
 800e7d0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e7d4:	9b02      	ldr	r3, [sp, #8]
 800e7d6:	3b01      	subs	r3, #1
 800e7d8:	9302      	str	r3, [sp, #8]
 800e7da:	4632      	mov	r2, r6
 800e7dc:	463b      	mov	r3, r7
 800e7de:	4640      	mov	r0, r8
 800e7e0:	4649      	mov	r1, r9
 800e7e2:	f7f1 fcff 	bl	80001e4 <__adddf3>
 800e7e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e7ea:	4602      	mov	r2, r0
 800e7ec:	460b      	mov	r3, r1
 800e7ee:	4640      	mov	r0, r8
 800e7f0:	4649      	mov	r1, r9
 800e7f2:	f7f1 fcf5 	bl	80001e0 <__aeabi_dsub>
 800e7f6:	4632      	mov	r2, r6
 800e7f8:	463b      	mov	r3, r7
 800e7fa:	f7f1 fcf3 	bl	80001e4 <__adddf3>
 800e7fe:	ed9d 7b08 	vldr	d7, [sp, #32]
 800e802:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e806:	ed8a 7b00 	vstr	d7, [sl]
 800e80a:	e76e      	b.n	800e6ea <__kernel_rem_pio2+0x50a>
 800e80c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e810:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800e814:	4640      	mov	r0, r8
 800e816:	4632      	mov	r2, r6
 800e818:	463b      	mov	r3, r7
 800e81a:	4649      	mov	r1, r9
 800e81c:	f7f1 fce2 	bl	80001e4 <__adddf3>
 800e820:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e824:	4602      	mov	r2, r0
 800e826:	460b      	mov	r3, r1
 800e828:	4640      	mov	r0, r8
 800e82a:	4649      	mov	r1, r9
 800e82c:	f7f1 fcd8 	bl	80001e0 <__aeabi_dsub>
 800e830:	4632      	mov	r2, r6
 800e832:	463b      	mov	r3, r7
 800e834:	f7f1 fcd6 	bl	80001e4 <__adddf3>
 800e838:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e83c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e840:	ed84 7b00 	vstr	d7, [r4]
 800e844:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e848:	e755      	b.n	800e6f6 <__kernel_rem_pio2+0x516>
 800e84a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e84e:	f7f1 fcc9 	bl	80001e4 <__adddf3>
 800e852:	3d01      	subs	r5, #1
 800e854:	e759      	b.n	800e70a <__kernel_rem_pio2+0x52a>
 800e856:	9b01      	ldr	r3, [sp, #4]
 800e858:	9a01      	ldr	r2, [sp, #4]
 800e85a:	601d      	str	r5, [r3, #0]
 800e85c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800e860:	605c      	str	r4, [r3, #4]
 800e862:	609f      	str	r7, [r3, #8]
 800e864:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800e868:	60d3      	str	r3, [r2, #12]
 800e86a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e86e:	6110      	str	r0, [r2, #16]
 800e870:	6153      	str	r3, [r2, #20]
 800e872:	e728      	b.n	800e6c6 <__kernel_rem_pio2+0x4e6>
 800e874:	41700000 	.word	0x41700000
 800e878:	3e700000 	.word	0x3e700000
 800e87c:	00000000 	.word	0x00000000

0800e880 <__kernel_sin>:
 800e880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e884:	ed2d 8b04 	vpush	{d8-d9}
 800e888:	eeb0 8a41 	vmov.f32	s16, s2
 800e88c:	eef0 8a61 	vmov.f32	s17, s3
 800e890:	ec55 4b10 	vmov	r4, r5, d0
 800e894:	b083      	sub	sp, #12
 800e896:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e89a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e89e:	9001      	str	r0, [sp, #4]
 800e8a0:	da06      	bge.n	800e8b0 <__kernel_sin+0x30>
 800e8a2:	ee10 0a10 	vmov	r0, s0
 800e8a6:	4629      	mov	r1, r5
 800e8a8:	f7f2 f902 	bl	8000ab0 <__aeabi_d2iz>
 800e8ac:	2800      	cmp	r0, #0
 800e8ae:	d051      	beq.n	800e954 <__kernel_sin+0xd4>
 800e8b0:	4622      	mov	r2, r4
 800e8b2:	462b      	mov	r3, r5
 800e8b4:	4620      	mov	r0, r4
 800e8b6:	4629      	mov	r1, r5
 800e8b8:	f7f1 fe4a 	bl	8000550 <__aeabi_dmul>
 800e8bc:	4682      	mov	sl, r0
 800e8be:	468b      	mov	fp, r1
 800e8c0:	4602      	mov	r2, r0
 800e8c2:	460b      	mov	r3, r1
 800e8c4:	4620      	mov	r0, r4
 800e8c6:	4629      	mov	r1, r5
 800e8c8:	f7f1 fe42 	bl	8000550 <__aeabi_dmul>
 800e8cc:	a341      	add	r3, pc, #260	; (adr r3, 800e9d4 <__kernel_sin+0x154>)
 800e8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8d2:	4680      	mov	r8, r0
 800e8d4:	4689      	mov	r9, r1
 800e8d6:	4650      	mov	r0, sl
 800e8d8:	4659      	mov	r1, fp
 800e8da:	f7f1 fe39 	bl	8000550 <__aeabi_dmul>
 800e8de:	a33f      	add	r3, pc, #252	; (adr r3, 800e9dc <__kernel_sin+0x15c>)
 800e8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8e4:	f7f1 fc7c 	bl	80001e0 <__aeabi_dsub>
 800e8e8:	4652      	mov	r2, sl
 800e8ea:	465b      	mov	r3, fp
 800e8ec:	f7f1 fe30 	bl	8000550 <__aeabi_dmul>
 800e8f0:	a33c      	add	r3, pc, #240	; (adr r3, 800e9e4 <__kernel_sin+0x164>)
 800e8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8f6:	f7f1 fc75 	bl	80001e4 <__adddf3>
 800e8fa:	4652      	mov	r2, sl
 800e8fc:	465b      	mov	r3, fp
 800e8fe:	f7f1 fe27 	bl	8000550 <__aeabi_dmul>
 800e902:	a33a      	add	r3, pc, #232	; (adr r3, 800e9ec <__kernel_sin+0x16c>)
 800e904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e908:	f7f1 fc6a 	bl	80001e0 <__aeabi_dsub>
 800e90c:	4652      	mov	r2, sl
 800e90e:	465b      	mov	r3, fp
 800e910:	f7f1 fe1e 	bl	8000550 <__aeabi_dmul>
 800e914:	a337      	add	r3, pc, #220	; (adr r3, 800e9f4 <__kernel_sin+0x174>)
 800e916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e91a:	f7f1 fc63 	bl	80001e4 <__adddf3>
 800e91e:	9b01      	ldr	r3, [sp, #4]
 800e920:	4606      	mov	r6, r0
 800e922:	460f      	mov	r7, r1
 800e924:	b9eb      	cbnz	r3, 800e962 <__kernel_sin+0xe2>
 800e926:	4602      	mov	r2, r0
 800e928:	460b      	mov	r3, r1
 800e92a:	4650      	mov	r0, sl
 800e92c:	4659      	mov	r1, fp
 800e92e:	f7f1 fe0f 	bl	8000550 <__aeabi_dmul>
 800e932:	a325      	add	r3, pc, #148	; (adr r3, 800e9c8 <__kernel_sin+0x148>)
 800e934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e938:	f7f1 fc52 	bl	80001e0 <__aeabi_dsub>
 800e93c:	4642      	mov	r2, r8
 800e93e:	464b      	mov	r3, r9
 800e940:	f7f1 fe06 	bl	8000550 <__aeabi_dmul>
 800e944:	4602      	mov	r2, r0
 800e946:	460b      	mov	r3, r1
 800e948:	4620      	mov	r0, r4
 800e94a:	4629      	mov	r1, r5
 800e94c:	f7f1 fc4a 	bl	80001e4 <__adddf3>
 800e950:	4604      	mov	r4, r0
 800e952:	460d      	mov	r5, r1
 800e954:	ec45 4b10 	vmov	d0, r4, r5
 800e958:	b003      	add	sp, #12
 800e95a:	ecbd 8b04 	vpop	{d8-d9}
 800e95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e962:	4b1b      	ldr	r3, [pc, #108]	; (800e9d0 <__kernel_sin+0x150>)
 800e964:	ec51 0b18 	vmov	r0, r1, d8
 800e968:	2200      	movs	r2, #0
 800e96a:	f7f1 fdf1 	bl	8000550 <__aeabi_dmul>
 800e96e:	4632      	mov	r2, r6
 800e970:	ec41 0b19 	vmov	d9, r0, r1
 800e974:	463b      	mov	r3, r7
 800e976:	4640      	mov	r0, r8
 800e978:	4649      	mov	r1, r9
 800e97a:	f7f1 fde9 	bl	8000550 <__aeabi_dmul>
 800e97e:	4602      	mov	r2, r0
 800e980:	460b      	mov	r3, r1
 800e982:	ec51 0b19 	vmov	r0, r1, d9
 800e986:	f7f1 fc2b 	bl	80001e0 <__aeabi_dsub>
 800e98a:	4652      	mov	r2, sl
 800e98c:	465b      	mov	r3, fp
 800e98e:	f7f1 fddf 	bl	8000550 <__aeabi_dmul>
 800e992:	ec53 2b18 	vmov	r2, r3, d8
 800e996:	f7f1 fc23 	bl	80001e0 <__aeabi_dsub>
 800e99a:	a30b      	add	r3, pc, #44	; (adr r3, 800e9c8 <__kernel_sin+0x148>)
 800e99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a0:	4606      	mov	r6, r0
 800e9a2:	460f      	mov	r7, r1
 800e9a4:	4640      	mov	r0, r8
 800e9a6:	4649      	mov	r1, r9
 800e9a8:	f7f1 fdd2 	bl	8000550 <__aeabi_dmul>
 800e9ac:	4602      	mov	r2, r0
 800e9ae:	460b      	mov	r3, r1
 800e9b0:	4630      	mov	r0, r6
 800e9b2:	4639      	mov	r1, r7
 800e9b4:	f7f1 fc16 	bl	80001e4 <__adddf3>
 800e9b8:	4602      	mov	r2, r0
 800e9ba:	460b      	mov	r3, r1
 800e9bc:	4620      	mov	r0, r4
 800e9be:	4629      	mov	r1, r5
 800e9c0:	f7f1 fc0e 	bl	80001e0 <__aeabi_dsub>
 800e9c4:	e7c4      	b.n	800e950 <__kernel_sin+0xd0>
 800e9c6:	bf00      	nop
 800e9c8:	55555549 	.word	0x55555549
 800e9cc:	3fc55555 	.word	0x3fc55555
 800e9d0:	3fe00000 	.word	0x3fe00000
 800e9d4:	5acfd57c 	.word	0x5acfd57c
 800e9d8:	3de5d93a 	.word	0x3de5d93a
 800e9dc:	8a2b9ceb 	.word	0x8a2b9ceb
 800e9e0:	3e5ae5e6 	.word	0x3e5ae5e6
 800e9e4:	57b1fe7d 	.word	0x57b1fe7d
 800e9e8:	3ec71de3 	.word	0x3ec71de3
 800e9ec:	19c161d5 	.word	0x19c161d5
 800e9f0:	3f2a01a0 	.word	0x3f2a01a0
 800e9f4:	1110f8a6 	.word	0x1110f8a6
 800e9f8:	3f811111 	.word	0x3f811111

0800e9fc <with_errno>:
 800e9fc:	b570      	push	{r4, r5, r6, lr}
 800e9fe:	4604      	mov	r4, r0
 800ea00:	460d      	mov	r5, r1
 800ea02:	4616      	mov	r6, r2
 800ea04:	f7fd fe64 	bl	800c6d0 <__errno>
 800ea08:	4629      	mov	r1, r5
 800ea0a:	6006      	str	r6, [r0, #0]
 800ea0c:	4620      	mov	r0, r4
 800ea0e:	bd70      	pop	{r4, r5, r6, pc}

0800ea10 <xflow>:
 800ea10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea12:	4614      	mov	r4, r2
 800ea14:	461d      	mov	r5, r3
 800ea16:	b108      	cbz	r0, 800ea1c <xflow+0xc>
 800ea18:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ea1c:	e9cd 2300 	strd	r2, r3, [sp]
 800ea20:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea24:	4620      	mov	r0, r4
 800ea26:	4629      	mov	r1, r5
 800ea28:	f7f1 fd92 	bl	8000550 <__aeabi_dmul>
 800ea2c:	2222      	movs	r2, #34	; 0x22
 800ea2e:	b003      	add	sp, #12
 800ea30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea34:	f7ff bfe2 	b.w	800e9fc <with_errno>

0800ea38 <__math_uflow>:
 800ea38:	b508      	push	{r3, lr}
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ea40:	f7ff ffe6 	bl	800ea10 <xflow>
 800ea44:	ec41 0b10 	vmov	d0, r0, r1
 800ea48:	bd08      	pop	{r3, pc}

0800ea4a <__math_oflow>:
 800ea4a:	b508      	push	{r3, lr}
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ea52:	f7ff ffdd 	bl	800ea10 <xflow>
 800ea56:	ec41 0b10 	vmov	d0, r0, r1
 800ea5a:	bd08      	pop	{r3, pc}

0800ea5c <with_errnof>:
 800ea5c:	b513      	push	{r0, r1, r4, lr}
 800ea5e:	4604      	mov	r4, r0
 800ea60:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ea64:	f7fd fe34 	bl	800c6d0 <__errno>
 800ea68:	ed9d 0a01 	vldr	s0, [sp, #4]
 800ea6c:	6004      	str	r4, [r0, #0]
 800ea6e:	b002      	add	sp, #8
 800ea70:	bd10      	pop	{r4, pc}

0800ea72 <xflowf>:
 800ea72:	b130      	cbz	r0, 800ea82 <xflowf+0x10>
 800ea74:	eef1 7a40 	vneg.f32	s15, s0
 800ea78:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ea7c:	2022      	movs	r0, #34	; 0x22
 800ea7e:	f7ff bfed 	b.w	800ea5c <with_errnof>
 800ea82:	eef0 7a40 	vmov.f32	s15, s0
 800ea86:	e7f7      	b.n	800ea78 <xflowf+0x6>

0800ea88 <__math_uflowf>:
 800ea88:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ea90 <__math_uflowf+0x8>
 800ea8c:	f7ff bff1 	b.w	800ea72 <xflowf>
 800ea90:	10000000 	.word	0x10000000

0800ea94 <__math_oflowf>:
 800ea94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ea9c <__math_oflowf+0x8>
 800ea98:	f7ff bfeb 	b.w	800ea72 <xflowf>
 800ea9c:	70000000 	.word	0x70000000

0800eaa0 <fabs>:
 800eaa0:	ec51 0b10 	vmov	r0, r1, d0
 800eaa4:	ee10 2a10 	vmov	r2, s0
 800eaa8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800eaac:	ec43 2b10 	vmov	d0, r2, r3
 800eab0:	4770      	bx	lr

0800eab2 <finite>:
 800eab2:	b082      	sub	sp, #8
 800eab4:	ed8d 0b00 	vstr	d0, [sp]
 800eab8:	9801      	ldr	r0, [sp, #4]
 800eaba:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800eabe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800eac2:	0fc0      	lsrs	r0, r0, #31
 800eac4:	b002      	add	sp, #8
 800eac6:	4770      	bx	lr

0800eac8 <floor>:
 800eac8:	ec51 0b10 	vmov	r0, r1, d0
 800eacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ead0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ead4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ead8:	2e13      	cmp	r6, #19
 800eada:	ee10 5a10 	vmov	r5, s0
 800eade:	ee10 8a10 	vmov	r8, s0
 800eae2:	460c      	mov	r4, r1
 800eae4:	dc32      	bgt.n	800eb4c <floor+0x84>
 800eae6:	2e00      	cmp	r6, #0
 800eae8:	da14      	bge.n	800eb14 <floor+0x4c>
 800eaea:	a333      	add	r3, pc, #204	; (adr r3, 800ebb8 <floor+0xf0>)
 800eaec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf0:	f7f1 fb78 	bl	80001e4 <__adddf3>
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	f7f1 ffba 	bl	8000a70 <__aeabi_dcmpgt>
 800eafc:	b138      	cbz	r0, 800eb0e <floor+0x46>
 800eafe:	2c00      	cmp	r4, #0
 800eb00:	da57      	bge.n	800ebb2 <floor+0xea>
 800eb02:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800eb06:	431d      	orrs	r5, r3
 800eb08:	d001      	beq.n	800eb0e <floor+0x46>
 800eb0a:	4c2d      	ldr	r4, [pc, #180]	; (800ebc0 <floor+0xf8>)
 800eb0c:	2500      	movs	r5, #0
 800eb0e:	4621      	mov	r1, r4
 800eb10:	4628      	mov	r0, r5
 800eb12:	e025      	b.n	800eb60 <floor+0x98>
 800eb14:	4f2b      	ldr	r7, [pc, #172]	; (800ebc4 <floor+0xfc>)
 800eb16:	4137      	asrs	r7, r6
 800eb18:	ea01 0307 	and.w	r3, r1, r7
 800eb1c:	4303      	orrs	r3, r0
 800eb1e:	d01f      	beq.n	800eb60 <floor+0x98>
 800eb20:	a325      	add	r3, pc, #148	; (adr r3, 800ebb8 <floor+0xf0>)
 800eb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb26:	f7f1 fb5d 	bl	80001e4 <__adddf3>
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	f7f1 ff9f 	bl	8000a70 <__aeabi_dcmpgt>
 800eb32:	2800      	cmp	r0, #0
 800eb34:	d0eb      	beq.n	800eb0e <floor+0x46>
 800eb36:	2c00      	cmp	r4, #0
 800eb38:	bfbe      	ittt	lt
 800eb3a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800eb3e:	fa43 f606 	asrlt.w	r6, r3, r6
 800eb42:	19a4      	addlt	r4, r4, r6
 800eb44:	ea24 0407 	bic.w	r4, r4, r7
 800eb48:	2500      	movs	r5, #0
 800eb4a:	e7e0      	b.n	800eb0e <floor+0x46>
 800eb4c:	2e33      	cmp	r6, #51	; 0x33
 800eb4e:	dd0b      	ble.n	800eb68 <floor+0xa0>
 800eb50:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800eb54:	d104      	bne.n	800eb60 <floor+0x98>
 800eb56:	ee10 2a10 	vmov	r2, s0
 800eb5a:	460b      	mov	r3, r1
 800eb5c:	f7f1 fb42 	bl	80001e4 <__adddf3>
 800eb60:	ec41 0b10 	vmov	d0, r0, r1
 800eb64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb68:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800eb6c:	f04f 33ff 	mov.w	r3, #4294967295
 800eb70:	fa23 f707 	lsr.w	r7, r3, r7
 800eb74:	4207      	tst	r7, r0
 800eb76:	d0f3      	beq.n	800eb60 <floor+0x98>
 800eb78:	a30f      	add	r3, pc, #60	; (adr r3, 800ebb8 <floor+0xf0>)
 800eb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb7e:	f7f1 fb31 	bl	80001e4 <__adddf3>
 800eb82:	2200      	movs	r2, #0
 800eb84:	2300      	movs	r3, #0
 800eb86:	f7f1 ff73 	bl	8000a70 <__aeabi_dcmpgt>
 800eb8a:	2800      	cmp	r0, #0
 800eb8c:	d0bf      	beq.n	800eb0e <floor+0x46>
 800eb8e:	2c00      	cmp	r4, #0
 800eb90:	da02      	bge.n	800eb98 <floor+0xd0>
 800eb92:	2e14      	cmp	r6, #20
 800eb94:	d103      	bne.n	800eb9e <floor+0xd6>
 800eb96:	3401      	adds	r4, #1
 800eb98:	ea25 0507 	bic.w	r5, r5, r7
 800eb9c:	e7b7      	b.n	800eb0e <floor+0x46>
 800eb9e:	2301      	movs	r3, #1
 800eba0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800eba4:	fa03 f606 	lsl.w	r6, r3, r6
 800eba8:	4435      	add	r5, r6
 800ebaa:	4545      	cmp	r5, r8
 800ebac:	bf38      	it	cc
 800ebae:	18e4      	addcc	r4, r4, r3
 800ebb0:	e7f2      	b.n	800eb98 <floor+0xd0>
 800ebb2:	2500      	movs	r5, #0
 800ebb4:	462c      	mov	r4, r5
 800ebb6:	e7aa      	b.n	800eb0e <floor+0x46>
 800ebb8:	8800759c 	.word	0x8800759c
 800ebbc:	7e37e43c 	.word	0x7e37e43c
 800ebc0:	bff00000 	.word	0xbff00000
 800ebc4:	000fffff 	.word	0x000fffff

0800ebc8 <scalbn>:
 800ebc8:	b570      	push	{r4, r5, r6, lr}
 800ebca:	ec55 4b10 	vmov	r4, r5, d0
 800ebce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ebd2:	4606      	mov	r6, r0
 800ebd4:	462b      	mov	r3, r5
 800ebd6:	b99a      	cbnz	r2, 800ec00 <scalbn+0x38>
 800ebd8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ebdc:	4323      	orrs	r3, r4
 800ebde:	d036      	beq.n	800ec4e <scalbn+0x86>
 800ebe0:	4b39      	ldr	r3, [pc, #228]	; (800ecc8 <scalbn+0x100>)
 800ebe2:	4629      	mov	r1, r5
 800ebe4:	ee10 0a10 	vmov	r0, s0
 800ebe8:	2200      	movs	r2, #0
 800ebea:	f7f1 fcb1 	bl	8000550 <__aeabi_dmul>
 800ebee:	4b37      	ldr	r3, [pc, #220]	; (800eccc <scalbn+0x104>)
 800ebf0:	429e      	cmp	r6, r3
 800ebf2:	4604      	mov	r4, r0
 800ebf4:	460d      	mov	r5, r1
 800ebf6:	da10      	bge.n	800ec1a <scalbn+0x52>
 800ebf8:	a32b      	add	r3, pc, #172	; (adr r3, 800eca8 <scalbn+0xe0>)
 800ebfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebfe:	e03a      	b.n	800ec76 <scalbn+0xae>
 800ec00:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ec04:	428a      	cmp	r2, r1
 800ec06:	d10c      	bne.n	800ec22 <scalbn+0x5a>
 800ec08:	ee10 2a10 	vmov	r2, s0
 800ec0c:	4620      	mov	r0, r4
 800ec0e:	4629      	mov	r1, r5
 800ec10:	f7f1 fae8 	bl	80001e4 <__adddf3>
 800ec14:	4604      	mov	r4, r0
 800ec16:	460d      	mov	r5, r1
 800ec18:	e019      	b.n	800ec4e <scalbn+0x86>
 800ec1a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ec1e:	460b      	mov	r3, r1
 800ec20:	3a36      	subs	r2, #54	; 0x36
 800ec22:	4432      	add	r2, r6
 800ec24:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ec28:	428a      	cmp	r2, r1
 800ec2a:	dd08      	ble.n	800ec3e <scalbn+0x76>
 800ec2c:	2d00      	cmp	r5, #0
 800ec2e:	a120      	add	r1, pc, #128	; (adr r1, 800ecb0 <scalbn+0xe8>)
 800ec30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec34:	da1c      	bge.n	800ec70 <scalbn+0xa8>
 800ec36:	a120      	add	r1, pc, #128	; (adr r1, 800ecb8 <scalbn+0xf0>)
 800ec38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec3c:	e018      	b.n	800ec70 <scalbn+0xa8>
 800ec3e:	2a00      	cmp	r2, #0
 800ec40:	dd08      	ble.n	800ec54 <scalbn+0x8c>
 800ec42:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ec46:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ec4a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ec4e:	ec45 4b10 	vmov	d0, r4, r5
 800ec52:	bd70      	pop	{r4, r5, r6, pc}
 800ec54:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ec58:	da19      	bge.n	800ec8e <scalbn+0xc6>
 800ec5a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ec5e:	429e      	cmp	r6, r3
 800ec60:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ec64:	dd0a      	ble.n	800ec7c <scalbn+0xb4>
 800ec66:	a112      	add	r1, pc, #72	; (adr r1, 800ecb0 <scalbn+0xe8>)
 800ec68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d1e2      	bne.n	800ec36 <scalbn+0x6e>
 800ec70:	a30f      	add	r3, pc, #60	; (adr r3, 800ecb0 <scalbn+0xe8>)
 800ec72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec76:	f7f1 fc6b 	bl	8000550 <__aeabi_dmul>
 800ec7a:	e7cb      	b.n	800ec14 <scalbn+0x4c>
 800ec7c:	a10a      	add	r1, pc, #40	; (adr r1, 800eca8 <scalbn+0xe0>)
 800ec7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d0b8      	beq.n	800ebf8 <scalbn+0x30>
 800ec86:	a10e      	add	r1, pc, #56	; (adr r1, 800ecc0 <scalbn+0xf8>)
 800ec88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec8c:	e7b4      	b.n	800ebf8 <scalbn+0x30>
 800ec8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ec92:	3236      	adds	r2, #54	; 0x36
 800ec94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ec98:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ec9c:	4620      	mov	r0, r4
 800ec9e:	4b0c      	ldr	r3, [pc, #48]	; (800ecd0 <scalbn+0x108>)
 800eca0:	2200      	movs	r2, #0
 800eca2:	e7e8      	b.n	800ec76 <scalbn+0xae>
 800eca4:	f3af 8000 	nop.w
 800eca8:	c2f8f359 	.word	0xc2f8f359
 800ecac:	01a56e1f 	.word	0x01a56e1f
 800ecb0:	8800759c 	.word	0x8800759c
 800ecb4:	7e37e43c 	.word	0x7e37e43c
 800ecb8:	8800759c 	.word	0x8800759c
 800ecbc:	fe37e43c 	.word	0xfe37e43c
 800ecc0:	c2f8f359 	.word	0xc2f8f359
 800ecc4:	81a56e1f 	.word	0x81a56e1f
 800ecc8:	43500000 	.word	0x43500000
 800eccc:	ffff3cb0 	.word	0xffff3cb0
 800ecd0:	3c900000 	.word	0x3c900000

0800ecd4 <fabsf>:
 800ecd4:	ee10 3a10 	vmov	r3, s0
 800ecd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ecdc:	ee00 3a10 	vmov	s0, r3
 800ece0:	4770      	bx	lr

0800ece2 <finitef>:
 800ece2:	b082      	sub	sp, #8
 800ece4:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ece8:	9801      	ldr	r0, [sp, #4]
 800ecea:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ecee:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800ecf2:	bfac      	ite	ge
 800ecf4:	2000      	movge	r0, #0
 800ecf6:	2001      	movlt	r0, #1
 800ecf8:	b002      	add	sp, #8
 800ecfa:	4770      	bx	lr

0800ecfc <scalbnf>:
 800ecfc:	ee10 3a10 	vmov	r3, s0
 800ed00:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800ed04:	d025      	beq.n	800ed52 <scalbnf+0x56>
 800ed06:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ed0a:	d302      	bcc.n	800ed12 <scalbnf+0x16>
 800ed0c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ed10:	4770      	bx	lr
 800ed12:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800ed16:	d122      	bne.n	800ed5e <scalbnf+0x62>
 800ed18:	4b2a      	ldr	r3, [pc, #168]	; (800edc4 <scalbnf+0xc8>)
 800ed1a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800edc8 <scalbnf+0xcc>
 800ed1e:	4298      	cmp	r0, r3
 800ed20:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ed24:	db16      	blt.n	800ed54 <scalbnf+0x58>
 800ed26:	ee10 3a10 	vmov	r3, s0
 800ed2a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ed2e:	3a19      	subs	r2, #25
 800ed30:	4402      	add	r2, r0
 800ed32:	2afe      	cmp	r2, #254	; 0xfe
 800ed34:	dd15      	ble.n	800ed62 <scalbnf+0x66>
 800ed36:	ee10 3a10 	vmov	r3, s0
 800ed3a:	eddf 7a24 	vldr	s15, [pc, #144]	; 800edcc <scalbnf+0xd0>
 800ed3e:	eddf 6a24 	vldr	s13, [pc, #144]	; 800edd0 <scalbnf+0xd4>
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	eeb0 7a67 	vmov.f32	s14, s15
 800ed48:	bfb8      	it	lt
 800ed4a:	eef0 7a66 	vmovlt.f32	s15, s13
 800ed4e:	ee27 0a27 	vmul.f32	s0, s14, s15
 800ed52:	4770      	bx	lr
 800ed54:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800edd4 <scalbnf+0xd8>
 800ed58:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ed5c:	4770      	bx	lr
 800ed5e:	0dd2      	lsrs	r2, r2, #23
 800ed60:	e7e6      	b.n	800ed30 <scalbnf+0x34>
 800ed62:	2a00      	cmp	r2, #0
 800ed64:	dd06      	ble.n	800ed74 <scalbnf+0x78>
 800ed66:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ed6a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ed6e:	ee00 3a10 	vmov	s0, r3
 800ed72:	4770      	bx	lr
 800ed74:	f112 0f16 	cmn.w	r2, #22
 800ed78:	da1a      	bge.n	800edb0 <scalbnf+0xb4>
 800ed7a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ed7e:	4298      	cmp	r0, r3
 800ed80:	ee10 3a10 	vmov	r3, s0
 800ed84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ed88:	dd0a      	ble.n	800eda0 <scalbnf+0xa4>
 800ed8a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800edcc <scalbnf+0xd0>
 800ed8e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800edd0 <scalbnf+0xd4>
 800ed92:	eef0 7a40 	vmov.f32	s15, s0
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	bf18      	it	ne
 800ed9a:	eeb0 0a47 	vmovne.f32	s0, s14
 800ed9e:	e7db      	b.n	800ed58 <scalbnf+0x5c>
 800eda0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800edd4 <scalbnf+0xd8>
 800eda4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800edd8 <scalbnf+0xdc>
 800eda8:	eef0 7a40 	vmov.f32	s15, s0
 800edac:	2b00      	cmp	r3, #0
 800edae:	e7f3      	b.n	800ed98 <scalbnf+0x9c>
 800edb0:	3219      	adds	r2, #25
 800edb2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800edb6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800edba:	eddf 7a08 	vldr	s15, [pc, #32]	; 800eddc <scalbnf+0xe0>
 800edbe:	ee07 3a10 	vmov	s14, r3
 800edc2:	e7c4      	b.n	800ed4e <scalbnf+0x52>
 800edc4:	ffff3cb0 	.word	0xffff3cb0
 800edc8:	4c000000 	.word	0x4c000000
 800edcc:	7149f2ca 	.word	0x7149f2ca
 800edd0:	f149f2ca 	.word	0xf149f2ca
 800edd4:	0da24260 	.word	0x0da24260
 800edd8:	8da24260 	.word	0x8da24260
 800eddc:	33000000 	.word	0x33000000

0800ede0 <_init>:
 800ede0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ede2:	bf00      	nop
 800ede4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ede6:	bc08      	pop	{r3}
 800ede8:	469e      	mov	lr, r3
 800edea:	4770      	bx	lr

0800edec <_fini>:
 800edec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edee:	bf00      	nop
 800edf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edf2:	bc08      	pop	{r3}
 800edf4:	469e      	mov	lr, r3
 800edf6:	4770      	bx	lr
