
ProjectModuleV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000478c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004924  08004924  00014924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004990  08004990  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004990  08004990  00014990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004998  08004998  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004998  08004998  00014998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800499c  0800499c  0001499c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080049a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  20000010  080049ac  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  080049ac  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e83e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000227b  00000000  00000000  0002e87a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  00030af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc0  00000000  00000000  000317d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a1f  00000000  00000000  00032390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011761  00000000  00000000  00049daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fcf6  00000000  00000000  0005b510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb206  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003548  00000000  00000000  000eb258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800490c 	.word	0x0800490c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	0800490c 	.word	0x0800490c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_frsub>:
 8000a14:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a18:	e002      	b.n	8000a20 <__addsf3>
 8000a1a:	bf00      	nop

08000a1c <__aeabi_fsub>:
 8000a1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a20 <__addsf3>:
 8000a20:	0042      	lsls	r2, r0, #1
 8000a22:	bf1f      	itttt	ne
 8000a24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a28:	ea92 0f03 	teqne	r2, r3
 8000a2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a34:	d06a      	beq.n	8000b0c <__addsf3+0xec>
 8000a36:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a3e:	bfc1      	itttt	gt
 8000a40:	18d2      	addgt	r2, r2, r3
 8000a42:	4041      	eorgt	r1, r0
 8000a44:	4048      	eorgt	r0, r1
 8000a46:	4041      	eorgt	r1, r0
 8000a48:	bfb8      	it	lt
 8000a4a:	425b      	neglt	r3, r3
 8000a4c:	2b19      	cmp	r3, #25
 8000a4e:	bf88      	it	hi
 8000a50:	4770      	bxhi	lr
 8000a52:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a66:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a6a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a6e:	bf18      	it	ne
 8000a70:	4249      	negne	r1, r1
 8000a72:	ea92 0f03 	teq	r2, r3
 8000a76:	d03f      	beq.n	8000af8 <__addsf3+0xd8>
 8000a78:	f1a2 0201 	sub.w	r2, r2, #1
 8000a7c:	fa41 fc03 	asr.w	ip, r1, r3
 8000a80:	eb10 000c 	adds.w	r0, r0, ip
 8000a84:	f1c3 0320 	rsb	r3, r3, #32
 8000a88:	fa01 f103 	lsl.w	r1, r1, r3
 8000a8c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a90:	d502      	bpl.n	8000a98 <__addsf3+0x78>
 8000a92:	4249      	negs	r1, r1
 8000a94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a98:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a9c:	d313      	bcc.n	8000ac6 <__addsf3+0xa6>
 8000a9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aa2:	d306      	bcc.n	8000ab2 <__addsf3+0x92>
 8000aa4:	0840      	lsrs	r0, r0, #1
 8000aa6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aaa:	f102 0201 	add.w	r2, r2, #1
 8000aae:	2afe      	cmp	r2, #254	; 0xfe
 8000ab0:	d251      	bcs.n	8000b56 <__addsf3+0x136>
 8000ab2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ab6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aba:	bf08      	it	eq
 8000abc:	f020 0001 	biceq.w	r0, r0, #1
 8000ac0:	ea40 0003 	orr.w	r0, r0, r3
 8000ac4:	4770      	bx	lr
 8000ac6:	0049      	lsls	r1, r1, #1
 8000ac8:	eb40 0000 	adc.w	r0, r0, r0
 8000acc:	3a01      	subs	r2, #1
 8000ace:	bf28      	it	cs
 8000ad0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ad4:	d2ed      	bcs.n	8000ab2 <__addsf3+0x92>
 8000ad6:	fab0 fc80 	clz	ip, r0
 8000ada:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ade:	ebb2 020c 	subs.w	r2, r2, ip
 8000ae2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ae6:	bfaa      	itet	ge
 8000ae8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aec:	4252      	neglt	r2, r2
 8000aee:	4318      	orrge	r0, r3
 8000af0:	bfbc      	itt	lt
 8000af2:	40d0      	lsrlt	r0, r2
 8000af4:	4318      	orrlt	r0, r3
 8000af6:	4770      	bx	lr
 8000af8:	f092 0f00 	teq	r2, #0
 8000afc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b00:	bf06      	itte	eq
 8000b02:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b06:	3201      	addeq	r2, #1
 8000b08:	3b01      	subne	r3, #1
 8000b0a:	e7b5      	b.n	8000a78 <__addsf3+0x58>
 8000b0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b14:	bf18      	it	ne
 8000b16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b1a:	d021      	beq.n	8000b60 <__addsf3+0x140>
 8000b1c:	ea92 0f03 	teq	r2, r3
 8000b20:	d004      	beq.n	8000b2c <__addsf3+0x10c>
 8000b22:	f092 0f00 	teq	r2, #0
 8000b26:	bf08      	it	eq
 8000b28:	4608      	moveq	r0, r1
 8000b2a:	4770      	bx	lr
 8000b2c:	ea90 0f01 	teq	r0, r1
 8000b30:	bf1c      	itt	ne
 8000b32:	2000      	movne	r0, #0
 8000b34:	4770      	bxne	lr
 8000b36:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b3a:	d104      	bne.n	8000b46 <__addsf3+0x126>
 8000b3c:	0040      	lsls	r0, r0, #1
 8000b3e:	bf28      	it	cs
 8000b40:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b44:	4770      	bx	lr
 8000b46:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b4a:	bf3c      	itt	cc
 8000b4c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b50:	4770      	bxcc	lr
 8000b52:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b56:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	4770      	bx	lr
 8000b60:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b64:	bf16      	itet	ne
 8000b66:	4608      	movne	r0, r1
 8000b68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b6c:	4601      	movne	r1, r0
 8000b6e:	0242      	lsls	r2, r0, #9
 8000b70:	bf06      	itte	eq
 8000b72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b76:	ea90 0f01 	teqeq	r0, r1
 8000b7a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_ui2f>:
 8000b80:	f04f 0300 	mov.w	r3, #0
 8000b84:	e004      	b.n	8000b90 <__aeabi_i2f+0x8>
 8000b86:	bf00      	nop

08000b88 <__aeabi_i2f>:
 8000b88:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b8c:	bf48      	it	mi
 8000b8e:	4240      	negmi	r0, r0
 8000b90:	ea5f 0c00 	movs.w	ip, r0
 8000b94:	bf08      	it	eq
 8000b96:	4770      	bxeq	lr
 8000b98:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b9c:	4601      	mov	r1, r0
 8000b9e:	f04f 0000 	mov.w	r0, #0
 8000ba2:	e01c      	b.n	8000bde <__aeabi_l2f+0x2a>

08000ba4 <__aeabi_ul2f>:
 8000ba4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ba8:	bf08      	it	eq
 8000baa:	4770      	bxeq	lr
 8000bac:	f04f 0300 	mov.w	r3, #0
 8000bb0:	e00a      	b.n	8000bc8 <__aeabi_l2f+0x14>
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_l2f>:
 8000bb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bb8:	bf08      	it	eq
 8000bba:	4770      	bxeq	lr
 8000bbc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bc0:	d502      	bpl.n	8000bc8 <__aeabi_l2f+0x14>
 8000bc2:	4240      	negs	r0, r0
 8000bc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc8:	ea5f 0c01 	movs.w	ip, r1
 8000bcc:	bf02      	ittt	eq
 8000bce:	4684      	moveq	ip, r0
 8000bd0:	4601      	moveq	r1, r0
 8000bd2:	2000      	moveq	r0, #0
 8000bd4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bd8:	bf08      	it	eq
 8000bda:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bde:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000be2:	fabc f28c 	clz	r2, ip
 8000be6:	3a08      	subs	r2, #8
 8000be8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bec:	db10      	blt.n	8000c10 <__aeabi_l2f+0x5c>
 8000bee:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bf2:	4463      	add	r3, ip
 8000bf4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bf8:	f1c2 0220 	rsb	r2, r2, #32
 8000bfc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c00:	fa20 f202 	lsr.w	r2, r0, r2
 8000c04:	eb43 0002 	adc.w	r0, r3, r2
 8000c08:	bf08      	it	eq
 8000c0a:	f020 0001 	biceq.w	r0, r0, #1
 8000c0e:	4770      	bx	lr
 8000c10:	f102 0220 	add.w	r2, r2, #32
 8000c14:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c18:	f1c2 0220 	rsb	r2, r2, #32
 8000c1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c20:	fa21 f202 	lsr.w	r2, r1, r2
 8000c24:	eb43 0002 	adc.w	r0, r3, r2
 8000c28:	bf08      	it	eq
 8000c2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_uldivmod>:
 8000c30:	b953      	cbnz	r3, 8000c48 <__aeabi_uldivmod+0x18>
 8000c32:	b94a      	cbnz	r2, 8000c48 <__aeabi_uldivmod+0x18>
 8000c34:	2900      	cmp	r1, #0
 8000c36:	bf08      	it	eq
 8000c38:	2800      	cmpeq	r0, #0
 8000c3a:	bf1c      	itt	ne
 8000c3c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c40:	f04f 30ff 	movne.w	r0, #4294967295
 8000c44:	f000 b974 	b.w	8000f30 <__aeabi_idiv0>
 8000c48:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c50:	f000 f806 	bl	8000c60 <__udivmoddi4>
 8000c54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5c:	b004      	add	sp, #16
 8000c5e:	4770      	bx	lr

08000c60 <__udivmoddi4>:
 8000c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c64:	9d08      	ldr	r5, [sp, #32]
 8000c66:	4604      	mov	r4, r0
 8000c68:	468e      	mov	lr, r1
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d14d      	bne.n	8000d0a <__udivmoddi4+0xaa>
 8000c6e:	428a      	cmp	r2, r1
 8000c70:	4694      	mov	ip, r2
 8000c72:	d969      	bls.n	8000d48 <__udivmoddi4+0xe8>
 8000c74:	fab2 f282 	clz	r2, r2
 8000c78:	b152      	cbz	r2, 8000c90 <__udivmoddi4+0x30>
 8000c7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c7e:	f1c2 0120 	rsb	r1, r2, #32
 8000c82:	fa20 f101 	lsr.w	r1, r0, r1
 8000c86:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c8a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c8e:	4094      	lsls	r4, r2
 8000c90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c94:	0c21      	lsrs	r1, r4, #16
 8000c96:	fbbe f6f8 	udiv	r6, lr, r8
 8000c9a:	fa1f f78c 	uxth.w	r7, ip
 8000c9e:	fb08 e316 	mls	r3, r8, r6, lr
 8000ca2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ca6:	fb06 f107 	mul.w	r1, r6, r7
 8000caa:	4299      	cmp	r1, r3
 8000cac:	d90a      	bls.n	8000cc4 <__udivmoddi4+0x64>
 8000cae:	eb1c 0303 	adds.w	r3, ip, r3
 8000cb2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cb6:	f080 811f 	bcs.w	8000ef8 <__udivmoddi4+0x298>
 8000cba:	4299      	cmp	r1, r3
 8000cbc:	f240 811c 	bls.w	8000ef8 <__udivmoddi4+0x298>
 8000cc0:	3e02      	subs	r6, #2
 8000cc2:	4463      	add	r3, ip
 8000cc4:	1a5b      	subs	r3, r3, r1
 8000cc6:	b2a4      	uxth	r4, r4
 8000cc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ccc:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd4:	fb00 f707 	mul.w	r7, r0, r7
 8000cd8:	42a7      	cmp	r7, r4
 8000cda:	d90a      	bls.n	8000cf2 <__udivmoddi4+0x92>
 8000cdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce4:	f080 810a 	bcs.w	8000efc <__udivmoddi4+0x29c>
 8000ce8:	42a7      	cmp	r7, r4
 8000cea:	f240 8107 	bls.w	8000efc <__udivmoddi4+0x29c>
 8000cee:	4464      	add	r4, ip
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf6:	1be4      	subs	r4, r4, r7
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	b11d      	cbz	r5, 8000d04 <__udivmoddi4+0xa4>
 8000cfc:	40d4      	lsrs	r4, r2
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e9c5 4300 	strd	r4, r3, [r5]
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d909      	bls.n	8000d22 <__udivmoddi4+0xc2>
 8000d0e:	2d00      	cmp	r5, #0
 8000d10:	f000 80ef 	beq.w	8000ef2 <__udivmoddi4+0x292>
 8000d14:	2600      	movs	r6, #0
 8000d16:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1a:	4630      	mov	r0, r6
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	fab3 f683 	clz	r6, r3
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	d14a      	bne.n	8000dc0 <__udivmoddi4+0x160>
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d302      	bcc.n	8000d34 <__udivmoddi4+0xd4>
 8000d2e:	4282      	cmp	r2, r0
 8000d30:	f200 80f9 	bhi.w	8000f26 <__udivmoddi4+0x2c6>
 8000d34:	1a84      	subs	r4, r0, r2
 8000d36:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	469e      	mov	lr, r3
 8000d3e:	2d00      	cmp	r5, #0
 8000d40:	d0e0      	beq.n	8000d04 <__udivmoddi4+0xa4>
 8000d42:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d46:	e7dd      	b.n	8000d04 <__udivmoddi4+0xa4>
 8000d48:	b902      	cbnz	r2, 8000d4c <__udivmoddi4+0xec>
 8000d4a:	deff      	udf	#255	; 0xff
 8000d4c:	fab2 f282 	clz	r2, r2
 8000d50:	2a00      	cmp	r2, #0
 8000d52:	f040 8092 	bne.w	8000e7a <__udivmoddi4+0x21a>
 8000d56:	eba1 010c 	sub.w	r1, r1, ip
 8000d5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5e:	fa1f fe8c 	uxth.w	lr, ip
 8000d62:	2601      	movs	r6, #1
 8000d64:	0c20      	lsrs	r0, r4, #16
 8000d66:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d6a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d6e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d72:	fb0e f003 	mul.w	r0, lr, r3
 8000d76:	4288      	cmp	r0, r1
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x12c>
 8000d7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x12a>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f200 80cb 	bhi.w	8000f20 <__udivmoddi4+0x2c0>
 8000d8a:	4643      	mov	r3, r8
 8000d8c:	1a09      	subs	r1, r1, r0
 8000d8e:	b2a4      	uxth	r4, r4
 8000d90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d94:	fb07 1110 	mls	r1, r7, r0, r1
 8000d98:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d9c:	fb0e fe00 	mul.w	lr, lr, r0
 8000da0:	45a6      	cmp	lr, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x156>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dac:	d202      	bcs.n	8000db4 <__udivmoddi4+0x154>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f200 80bb 	bhi.w	8000f2a <__udivmoddi4+0x2ca>
 8000db4:	4608      	mov	r0, r1
 8000db6:	eba4 040e 	sub.w	r4, r4, lr
 8000dba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dbe:	e79c      	b.n	8000cfa <__udivmoddi4+0x9a>
 8000dc0:	f1c6 0720 	rsb	r7, r6, #32
 8000dc4:	40b3      	lsls	r3, r6
 8000dc6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dca:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dce:	fa20 f407 	lsr.w	r4, r0, r7
 8000dd2:	fa01 f306 	lsl.w	r3, r1, r6
 8000dd6:	431c      	orrs	r4, r3
 8000dd8:	40f9      	lsrs	r1, r7
 8000dda:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dde:	fa00 f306 	lsl.w	r3, r0, r6
 8000de2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000de6:	0c20      	lsrs	r0, r4, #16
 8000de8:	fa1f fe8c 	uxth.w	lr, ip
 8000dec:	fb09 1118 	mls	r1, r9, r8, r1
 8000df0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000df4:	fb08 f00e 	mul.w	r0, r8, lr
 8000df8:	4288      	cmp	r0, r1
 8000dfa:	fa02 f206 	lsl.w	r2, r2, r6
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b8>
 8000e00:	eb1c 0101 	adds.w	r1, ip, r1
 8000e04:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e08:	f080 8088 	bcs.w	8000f1c <__udivmoddi4+0x2bc>
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	f240 8085 	bls.w	8000f1c <__udivmoddi4+0x2bc>
 8000e12:	f1a8 0802 	sub.w	r8, r8, #2
 8000e16:	4461      	add	r1, ip
 8000e18:	1a09      	subs	r1, r1, r0
 8000e1a:	b2a4      	uxth	r4, r4
 8000e1c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e20:	fb09 1110 	mls	r1, r9, r0, r1
 8000e24:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e2c:	458e      	cmp	lr, r1
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1e2>
 8000e30:	eb1c 0101 	adds.w	r1, ip, r1
 8000e34:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e38:	d26c      	bcs.n	8000f14 <__udivmoddi4+0x2b4>
 8000e3a:	458e      	cmp	lr, r1
 8000e3c:	d96a      	bls.n	8000f14 <__udivmoddi4+0x2b4>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4461      	add	r1, ip
 8000e42:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e46:	fba0 9402 	umull	r9, r4, r0, r2
 8000e4a:	eba1 010e 	sub.w	r1, r1, lr
 8000e4e:	42a1      	cmp	r1, r4
 8000e50:	46c8      	mov	r8, r9
 8000e52:	46a6      	mov	lr, r4
 8000e54:	d356      	bcc.n	8000f04 <__udivmoddi4+0x2a4>
 8000e56:	d053      	beq.n	8000f00 <__udivmoddi4+0x2a0>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x212>
 8000e5a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e5e:	eb61 010e 	sbc.w	r1, r1, lr
 8000e62:	fa01 f707 	lsl.w	r7, r1, r7
 8000e66:	fa22 f306 	lsr.w	r3, r2, r6
 8000e6a:	40f1      	lsrs	r1, r6
 8000e6c:	431f      	orrs	r7, r3
 8000e6e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	f1c2 0320 	rsb	r3, r2, #32
 8000e7e:	40d8      	lsrs	r0, r3
 8000e80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e84:	fa21 f303 	lsr.w	r3, r1, r3
 8000e88:	4091      	lsls	r1, r2
 8000e8a:	4301      	orrs	r1, r0
 8000e8c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e90:	fa1f fe8c 	uxth.w	lr, ip
 8000e94:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e98:	fb07 3610 	mls	r6, r7, r0, r3
 8000e9c:	0c0b      	lsrs	r3, r1, #16
 8000e9e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ea2:	fb00 f60e 	mul.w	r6, r0, lr
 8000ea6:	429e      	cmp	r6, r3
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x260>
 8000eae:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eb6:	d22f      	bcs.n	8000f18 <__udivmoddi4+0x2b8>
 8000eb8:	429e      	cmp	r6, r3
 8000eba:	d92d      	bls.n	8000f18 <__udivmoddi4+0x2b8>
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	1b9b      	subs	r3, r3, r6
 8000ec2:	b289      	uxth	r1, r1
 8000ec4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ec8:	fb07 3316 	mls	r3, r7, r6, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb06 f30e 	mul.w	r3, r6, lr
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x28a>
 8000ed8:	eb1c 0101 	adds.w	r1, ip, r1
 8000edc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ee0:	d216      	bcs.n	8000f10 <__udivmoddi4+0x2b0>
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d914      	bls.n	8000f10 <__udivmoddi4+0x2b0>
 8000ee6:	3e02      	subs	r6, #2
 8000ee8:	4461      	add	r1, ip
 8000eea:	1ac9      	subs	r1, r1, r3
 8000eec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ef0:	e738      	b.n	8000d64 <__udivmoddi4+0x104>
 8000ef2:	462e      	mov	r6, r5
 8000ef4:	4628      	mov	r0, r5
 8000ef6:	e705      	b.n	8000d04 <__udivmoddi4+0xa4>
 8000ef8:	4606      	mov	r6, r0
 8000efa:	e6e3      	b.n	8000cc4 <__udivmoddi4+0x64>
 8000efc:	4618      	mov	r0, r3
 8000efe:	e6f8      	b.n	8000cf2 <__udivmoddi4+0x92>
 8000f00:	454b      	cmp	r3, r9
 8000f02:	d2a9      	bcs.n	8000e58 <__udivmoddi4+0x1f8>
 8000f04:	ebb9 0802 	subs.w	r8, r9, r2
 8000f08:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f0c:	3801      	subs	r0, #1
 8000f0e:	e7a3      	b.n	8000e58 <__udivmoddi4+0x1f8>
 8000f10:	4646      	mov	r6, r8
 8000f12:	e7ea      	b.n	8000eea <__udivmoddi4+0x28a>
 8000f14:	4620      	mov	r0, r4
 8000f16:	e794      	b.n	8000e42 <__udivmoddi4+0x1e2>
 8000f18:	4640      	mov	r0, r8
 8000f1a:	e7d1      	b.n	8000ec0 <__udivmoddi4+0x260>
 8000f1c:	46d0      	mov	r8, sl
 8000f1e:	e77b      	b.n	8000e18 <__udivmoddi4+0x1b8>
 8000f20:	3b02      	subs	r3, #2
 8000f22:	4461      	add	r1, ip
 8000f24:	e732      	b.n	8000d8c <__udivmoddi4+0x12c>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e709      	b.n	8000d3e <__udivmoddi4+0xde>
 8000f2a:	4464      	add	r4, ip
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	e742      	b.n	8000db6 <__udivmoddi4+0x156>

08000f30 <__aeabi_idiv0>:
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <InitKalmanStruct>:
extern arm_matrix_instance_f32 mat_P, mat_P_minus, mat_Q;
extern arm_matrix_instance_f32 mat_C, mat_R, mat_S, mat_K;
extern arm_matrix_instance_f32 mat_temp3x3A,mat_temp3x3B, mat_temp3x1,mat_temp1x3, mat_temp1x1;

void InitKalmanStruct(Kalman* KF,float32_t q,float32_t r)
{
 8000f34:	b4b0      	push	{r4, r5, r7}
 8000f36:	b0a1      	sub	sp, #132	; 0x84
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f40:	edc7 0a01 	vstr	s1, [r7, #4]
	KF->R = r;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	655a      	str	r2, [r3, #84]	; 0x54
	KF->var_Q = q;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	68ba      	ldr	r2, [r7, #8]
 8000f4e:	659a      	str	r2, [r3, #88]	; 0x58
	KF->D = 0;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f04f 0200 	mov.w	r2, #0
 8000f56:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	float32_t a[9] = {
 8000f5a:	4b40      	ldr	r3, [pc, #256]	; (800105c <InitKalmanStruct+0x128>)
 8000f5c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000f60:	461d      	mov	r5, r3
 8000f62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f6a:	682b      	ldr	r3, [r5, #0]
 8000f6c:	6023      	str	r3, [r4, #0]
			1, 0.001, 0.5 * 0.001 * 0.001,
			0, 1, 0.001,
			0, 0, 1
	};
	float iden[9] = {
 8000f6e:	4b3c      	ldr	r3, [pc, #240]	; (8001060 <InitKalmanStruct+0x12c>)
 8000f70:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000f74:	461d      	mov	r5, r3
 8000f76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7e:	682b      	ldr	r3, [r5, #0]
 8000f80:	6023      	str	r3, [r4, #0]
			1, 0, 0,
			0, 1, 0,
			0, 0, 1
	};
	int i;
	for(i=0;i<9;i++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000f86:	e01a      	b.n	8000fbe <InitKalmanStruct+0x8a>
	{
		KF->A[i] = a[i];
 8000f88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	3380      	adds	r3, #128	; 0x80
 8000f8e:	443b      	add	r3, r7
 8000f90:	3b28      	subs	r3, #40	; 0x28
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	68f9      	ldr	r1, [r7, #12]
 8000f96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f98:	3318      	adds	r3, #24
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	601a      	str	r2, [r3, #0]
		KF->I[i] = iden[i];
 8000fa0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	3380      	adds	r3, #128	; 0x80
 8000fa6:	443b      	add	r3, r7
 8000fa8:	3b4c      	subs	r3, #76	; 0x4c
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	68f9      	ldr	r1, [r7, #12]
 8000fae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fb0:	332e      	adds	r3, #46	; 0x2e
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	601a      	str	r2, [r3, #0]
	for(i=0;i<9;i++)
 8000fb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fba:	3301      	adds	r3, #1
 8000fbc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000fbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fc0:	2b08      	cmp	r3, #8
 8000fc2:	dde1      	ble.n	8000f88 <InitKalmanStruct+0x54>
	}
	float32_t b[3] = {
 8000fc4:	f04f 0300 	mov.w	r3, #0
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fca:	f04f 0300 	mov.w	r3, #0
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fd0:	f04f 0300 	mov.w	r3, #0
 8000fd4:	633b      	str	r3, [r7, #48]	; 0x30
			0, 0, 0
	};
	float32_t c[3] = {
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
 8000fdc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000fe0:	623b      	str	r3, [r7, #32]
 8000fe2:	f04f 0300 	mov.w	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
			0, 1, 0
	};
	float32_t g[3] = {
 8000fe8:	4a1e      	ldr	r2, [pc, #120]	; (8001064 <InitKalmanStruct+0x130>)
 8000fea:	f107 0310 	add.w	r3, r7, #16
 8000fee:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ff0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0.001 * 0.001 * 0.001 / 6,
			0.5 * 0.001 * 0.001,
			0.001
	};
	for(i=0;i<3;i++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000ff8:	e027      	b.n	800104a <InitKalmanStruct+0x116>
	{
		KF->B[i] = b[i];
 8000ffa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	3380      	adds	r3, #128	; 0x80
 8001000:	443b      	add	r3, r7
 8001002:	3b58      	subs	r3, #88	; 0x58
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	68f9      	ldr	r1, [r7, #12]
 8001008:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800100a:	3320      	adds	r3, #32
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	440b      	add	r3, r1
 8001010:	3304      	adds	r3, #4
 8001012:	601a      	str	r2, [r3, #0]
		KF->C[i] = c[i];
 8001014:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	3380      	adds	r3, #128	; 0x80
 800101a:	443b      	add	r3, r7
 800101c:	3b64      	subs	r3, #100	; 0x64
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	68f9      	ldr	r1, [r7, #12]
 8001022:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001024:	3324      	adds	r3, #36	; 0x24
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	440b      	add	r3, r1
 800102a:	601a      	str	r2, [r3, #0]
		KF->G[i] = g[i];
 800102c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	3380      	adds	r3, #128	; 0x80
 8001032:	443b      	add	r3, r7
 8001034:	3b70      	subs	r3, #112	; 0x70
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	68f9      	ldr	r1, [r7, #12]
 800103a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800103c:	3328      	adds	r3, #40	; 0x28
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	601a      	str	r2, [r3, #0]
	for(i=0;i<3;i++)
 8001044:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001046:	3301      	adds	r3, #1
 8001048:	67fb      	str	r3, [r7, #124]	; 0x7c
 800104a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800104c:	2b02      	cmp	r3, #2
 800104e:	ddd4      	ble.n	8000ffa <InitKalmanStruct+0xc6>
	}

}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	3784      	adds	r7, #132	; 0x84
 8001056:	46bd      	mov	sp, r7
 8001058:	bcb0      	pop	{r4, r5, r7}
 800105a:	4770      	bx	lr
 800105c:	08004924 	.word	0x08004924
 8001060:	08004948 	.word	0x08004948
 8001064:	0800496c 	.word	0x0800496c

08001068 <kalman_filter>:

void kalman_filter()
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
    //Process model: x_hat_minus = mat_A*x_hat
    arm_mat_mult_f32(&mat_A, &mat_x_hat, &mat_x_hat_minus);			//A*X
 800106c:	4a39      	ldr	r2, [pc, #228]	; (8001154 <kalman_filter+0xec>)
 800106e:	493a      	ldr	r1, [pc, #232]	; (8001158 <kalman_filter+0xf0>)
 8001070:	483a      	ldr	r0, [pc, #232]	; (800115c <kalman_filter+0xf4>)
 8001072:	f001 fa6e 	bl	8002552 <arm_mat_mult_f32>
    // If an input control vector is used:
    // arm_mat_mult_f32(&mat_B, &mat_u, &mat_temp3x3A);
    // arm_mat_add_f32(&mat_x_hat_minus, &mat_temp3x3A, &mat_x_hat_minus);

    // Predict covariance matrix: P_minus = A * P * A^T + Q
    arm_mat_trans_f32(&mat_A, &mat_temp3x3A);					    //AT
 8001076:	493a      	ldr	r1, [pc, #232]	; (8001160 <kalman_filter+0xf8>)
 8001078:	4838      	ldr	r0, [pc, #224]	; (800115c <kalman_filter+0xf4>)
 800107a:	f001 fb55 	bl	8002728 <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_A, &mat_P, &mat_temp3x3B);			    //A*P
 800107e:	4a39      	ldr	r2, [pc, #228]	; (8001164 <kalman_filter+0xfc>)
 8001080:	4939      	ldr	r1, [pc, #228]	; (8001168 <kalman_filter+0x100>)
 8001082:	4836      	ldr	r0, [pc, #216]	; (800115c <kalman_filter+0xf4>)
 8001084:	f001 fa65 	bl	8002552 <arm_mat_mult_f32>
    arm_mat_mult_f32(&mat_temp3x3B, &mat_temp3x3A, &mat_P_minus);	//A*P*AT
 8001088:	4a38      	ldr	r2, [pc, #224]	; (800116c <kalman_filter+0x104>)
 800108a:	4935      	ldr	r1, [pc, #212]	; (8001160 <kalman_filter+0xf8>)
 800108c:	4835      	ldr	r0, [pc, #212]	; (8001164 <kalman_filter+0xfc>)
 800108e:	f001 fa60 	bl	8002552 <arm_mat_mult_f32>
    arm_mat_trans_f32(&mat_G, &mat_GT);								//GT
 8001092:	4937      	ldr	r1, [pc, #220]	; (8001170 <kalman_filter+0x108>)
 8001094:	4837      	ldr	r0, [pc, #220]	; (8001174 <kalman_filter+0x10c>)
 8001096:	f001 fb47 	bl	8002728 <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_G, &mat_GT, &mat_Q);						//G*GT
 800109a:	4a37      	ldr	r2, [pc, #220]	; (8001178 <kalman_filter+0x110>)
 800109c:	4934      	ldr	r1, [pc, #208]	; (8001170 <kalman_filter+0x108>)
 800109e:	4835      	ldr	r0, [pc, #212]	; (8001174 <kalman_filter+0x10c>)
 80010a0:	f001 fa57 	bl	8002552 <arm_mat_mult_f32>
    arm_mat_scale_f32(&mat_Q,KF.var_Q, &mat_Q);						//G*GT*var_q
 80010a4:	4b35      	ldr	r3, [pc, #212]	; (800117c <kalman_filter+0x114>)
 80010a6:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80010aa:	4933      	ldr	r1, [pc, #204]	; (8001178 <kalman_filter+0x110>)
 80010ac:	eeb0 0a67 	vmov.f32	s0, s15
 80010b0:	4831      	ldr	r0, [pc, #196]	; (8001178 <kalman_filter+0x110>)
 80010b2:	f001 fac8 	bl	8002646 <arm_mat_scale_f32>
    arm_mat_add_f32(&mat_P_minus, &mat_Q, &mat_P_minus);			//A * P * A^T + Q
 80010b6:	4a2d      	ldr	r2, [pc, #180]	; (800116c <kalman_filter+0x104>)
 80010b8:	492f      	ldr	r1, [pc, #188]	; (8001178 <kalman_filter+0x110>)
 80010ba:	482c      	ldr	r0, [pc, #176]	; (800116c <kalman_filter+0x104>)
 80010bc:	f000 fe7f 	bl	8001dbe <arm_mat_add_f32>

    // Calculate innovation covariance: S = C * P_minus * C^T + R
    arm_mat_mult_f32(&mat_C, &mat_P_minus, &mat_temp1x3);			//C*P
 80010c0:	4a2f      	ldr	r2, [pc, #188]	; (8001180 <kalman_filter+0x118>)
 80010c2:	492a      	ldr	r1, [pc, #168]	; (800116c <kalman_filter+0x104>)
 80010c4:	482f      	ldr	r0, [pc, #188]	; (8001184 <kalman_filter+0x11c>)
 80010c6:	f001 fa44 	bl	8002552 <arm_mat_mult_f32>
    arm_mat_trans_f32(&mat_C, &mat_temp3x1);						//CT
 80010ca:	492f      	ldr	r1, [pc, #188]	; (8001188 <kalman_filter+0x120>)
 80010cc:	482d      	ldr	r0, [pc, #180]	; (8001184 <kalman_filter+0x11c>)
 80010ce:	f001 fb2b 	bl	8002728 <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_temp1x3, &mat_temp3x1, &mat_temp1x1);		//C*P*C^T
 80010d2:	4a2e      	ldr	r2, [pc, #184]	; (800118c <kalman_filter+0x124>)
 80010d4:	492c      	ldr	r1, [pc, #176]	; (8001188 <kalman_filter+0x120>)
 80010d6:	482a      	ldr	r0, [pc, #168]	; (8001180 <kalman_filter+0x118>)
 80010d8:	f001 fa3b 	bl	8002552 <arm_mat_mult_f32>
    arm_mat_add_f32(&mat_temp1x1, &mat_R, &mat_S);					//C*P*C^T + R
 80010dc:	4a2c      	ldr	r2, [pc, #176]	; (8001190 <kalman_filter+0x128>)
 80010de:	492d      	ldr	r1, [pc, #180]	; (8001194 <kalman_filter+0x12c>)
 80010e0:	482a      	ldr	r0, [pc, #168]	; (800118c <kalman_filter+0x124>)
 80010e2:	f000 fe6c 	bl	8001dbe <arm_mat_add_f32>

    // Calculate Kalman gain: K = P_minus * C^T * S^(-1)
    arm_mat_inverse_f32(&mat_S, &mat_temp1x1);						//inv(S)
 80010e6:	4929      	ldr	r1, [pc, #164]	; (800118c <kalman_filter+0x124>)
 80010e8:	4829      	ldr	r0, [pc, #164]	; (8001190 <kalman_filter+0x128>)
 80010ea:	f000 febb 	bl	8001e64 <arm_mat_inverse_f32>
    arm_mat_mult_f32(&mat_P_minus, &mat_temp3x1, &mat_temp3x3A);	//P*CT
 80010ee:	4a1c      	ldr	r2, [pc, #112]	; (8001160 <kalman_filter+0xf8>)
 80010f0:	4925      	ldr	r1, [pc, #148]	; (8001188 <kalman_filter+0x120>)
 80010f2:	481e      	ldr	r0, [pc, #120]	; (800116c <kalman_filter+0x104>)
 80010f4:	f001 fa2d 	bl	8002552 <arm_mat_mult_f32>
    arm_mat_mult_f32(&mat_temp3x3A, &mat_temp1x1, &mat_K);			//P*CT*inv(S)
 80010f8:	4a27      	ldr	r2, [pc, #156]	; (8001198 <kalman_filter+0x130>)
 80010fa:	4924      	ldr	r1, [pc, #144]	; (800118c <kalman_filter+0x124>)
 80010fc:	4818      	ldr	r0, [pc, #96]	; (8001160 <kalman_filter+0xf8>)
 80010fe:	f001 fa28 	bl	8002552 <arm_mat_mult_f32>

    // Update state estimate: x_hat = x_hat_minus + K * (z - C * x_hat_minus)
    arm_mat_mult_f32(&mat_C, &mat_x_hat_minus, &mat_temp1x1);		//C*X
 8001102:	4a22      	ldr	r2, [pc, #136]	; (800118c <kalman_filter+0x124>)
 8001104:	4913      	ldr	r1, [pc, #76]	; (8001154 <kalman_filter+0xec>)
 8001106:	481f      	ldr	r0, [pc, #124]	; (8001184 <kalman_filter+0x11c>)
 8001108:	f001 fa23 	bl	8002552 <arm_mat_mult_f32>
    //float32_t innovation = z - temp1x1;								//Z-C*X
    arm_mat_scale_f32(&mat_K, KF.z - KF.temp1x1, &mat_temp3x1);			//K*(Z-C*X)
 800110c:	4b1b      	ldr	r3, [pc, #108]	; (800117c <kalman_filter+0x114>)
 800110e:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8001112:	4b1a      	ldr	r3, [pc, #104]	; (800117c <kalman_filter+0x114>)
 8001114:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
 8001118:	ee77 7a67 	vsub.f32	s15, s14, s15
 800111c:	491a      	ldr	r1, [pc, #104]	; (8001188 <kalman_filter+0x120>)
 800111e:	eeb0 0a67 	vmov.f32	s0, s15
 8001122:	481d      	ldr	r0, [pc, #116]	; (8001198 <kalman_filter+0x130>)
 8001124:	f001 fa8f 	bl	8002646 <arm_mat_scale_f32>
    arm_mat_add_f32(&mat_x_hat_minus, &mat_temp3x1, &mat_x_hat);	//X - K*(Z-C*X) ========> X estimate
 8001128:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <kalman_filter+0xf0>)
 800112a:	4917      	ldr	r1, [pc, #92]	; (8001188 <kalman_filter+0x120>)
 800112c:	4809      	ldr	r0, [pc, #36]	; (8001154 <kalman_filter+0xec>)
 800112e:	f000 fe46 	bl	8001dbe <arm_mat_add_f32>

    // Update covariance matrix: P = (I - K * C) * P_minus
    arm_mat_mult_f32(&mat_K, &mat_C, &mat_temp3x3B);				//K*C
 8001132:	4a0c      	ldr	r2, [pc, #48]	; (8001164 <kalman_filter+0xfc>)
 8001134:	4913      	ldr	r1, [pc, #76]	; (8001184 <kalman_filter+0x11c>)
 8001136:	4818      	ldr	r0, [pc, #96]	; (8001198 <kalman_filter+0x130>)
 8001138:	f001 fa0b 	bl	8002552 <arm_mat_mult_f32>
    arm_mat_sub_f32(&eye, &mat_P_minus, &mat_temp3x3A);				//I - K*C
 800113c:	4a08      	ldr	r2, [pc, #32]	; (8001160 <kalman_filter+0xf8>)
 800113e:	490b      	ldr	r1, [pc, #44]	; (800116c <kalman_filter+0x104>)
 8001140:	4816      	ldr	r0, [pc, #88]	; (800119c <kalman_filter+0x134>)
 8001142:	f001 fab6 	bl	80026b2 <arm_mat_sub_f32>
    arm_mat_mult_f32(&mat_temp3x3A, &mat_P_minus, &mat_P);			//(I - K*C)*P ===========> P estimate
 8001146:	4a08      	ldr	r2, [pc, #32]	; (8001168 <kalman_filter+0x100>)
 8001148:	4908      	ldr	r1, [pc, #32]	; (800116c <kalman_filter+0x104>)
 800114a:	4805      	ldr	r0, [pc, #20]	; (8001160 <kalman_filter+0xf8>)
 800114c:	f001 fa01 	bl	8002552 <arm_mat_mult_f32>
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000320 	.word	0x20000320
 8001158:	20000318 	.word	0x20000318
 800115c:	20000310 	.word	0x20000310
 8001160:	20000380 	.word	0x20000380
 8001164:	20000388 	.word	0x20000388
 8001168:	20000348 	.word	0x20000348
 800116c:	20000350 	.word	0x20000350
 8001170:	20000330 	.word	0x20000330
 8001174:	20000338 	.word	0x20000338
 8001178:	20000358 	.word	0x20000358
 800117c:	20000190 	.word	0x20000190
 8001180:	20000398 	.word	0x20000398
 8001184:	20000360 	.word	0x20000360
 8001188:	20000390 	.word	0x20000390
 800118c:	200003a0 	.word	0x200003a0
 8001190:	20000370 	.word	0x20000370
 8001194:	20000368 	.word	0x20000368
 8001198:	20000378 	.word	0x20000378
 800119c:	20000340 	.word	0x20000340

080011a0 <micros>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ //get time period
	if(htim == & htim5){
		ReadEncoderParam._micros += UINT32_MAX;
	}
}
uint64_t micros(){ //get time in micros
 80011a0:	b4b0      	push	{r4, r5, r7}
 80011a2:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+ ReadEncoderParam._micros;
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <micros+0x2c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011aa:	2200      	movs	r2, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	4611      	mov	r1, r2
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <micros+0x30>)
 80011b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b6:	1884      	adds	r4, r0, r2
 80011b8:	eb41 0503 	adc.w	r5, r1, r3
 80011bc:	4622      	mov	r2, r4
 80011be:	462b      	mov	r3, r5
}
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bcb0      	pop	{r4, r5, r7}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	20000104 	.word	0x20000104
 80011d0:	200003a8 	.word	0x200003a8

080011d4 <InitReadEncoder>:

void InitReadEncoder(ReadEncoder* Read, uint32_t samplingtime)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
	Read->_micros = 0;
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	f04f 0300 	mov.w	r3, #0
 80011e8:	e9c1 2300 	strd	r2, r3, [r1]
	Read->PPR = 8192;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011f2:	811a      	strh	r2, [r3, #8]
	Read->samplingTime = samplingtime;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	60da      	str	r2, [r3, #12]
	Read->MotorSetDuty = 0;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	741a      	strb	r2, [r3, #16]
	Read->Pulse_Compare = 0;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	745a      	strb	r2, [r3, #17]
	Read->DIR = 0;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	749a      	strb	r2, [r3, #18]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <QEIEncoderPositionVelocity_Update>:

void QEIEncoderPositionVelocity_Update(){
 8001218:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800121c:	b084      	sub	sp, #16
 800121e:	af00      	add	r7, sp, #0
	//collect data
	QEIData.timestamp[0] = micros();
 8001220:	f7ff ffbe 	bl	80011a0 <micros>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4937      	ldr	r1, [pc, #220]	; (8001308 <QEIEncoderPositionVelocity_Update+0xf0>)
 800122a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uint32_t couterPosition = __HAL_TIM_GET_COUNTER(&htim2);
 800122e:	4b37      	ldr	r3, [pc, #220]	; (800130c <QEIEncoderPositionVelocity_Update+0xf4>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001234:	60fb      	str	r3, [r7, #12]
	QEIData.data[0] = couterPosition;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2200      	movs	r2, #0
 800123a:	4698      	mov	r8, r3
 800123c:	4691      	mov	r9, r2
 800123e:	4b32      	ldr	r3, [pc, #200]	; (8001308 <QEIEncoderPositionVelocity_Update+0xf0>)
 8001240:	e9c3 8900 	strd	r8, r9, [r3]

	//calculation
	QEIData.QEIPosition = couterPosition % ReadEncoderParam.PPR;
 8001244:	4b32      	ldr	r3, [pc, #200]	; (8001310 <QEIEncoderPositionVelocity_Update+0xf8>)
 8001246:	891b      	ldrh	r3, [r3, #8]
 8001248:	461a      	mov	r2, r3
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001250:	fb01 f202 	mul.w	r2, r1, r2
 8001254:	1a9b      	subs	r3, r3, r2
 8001256:	ee07 3a90 	vmov	s15, r3
 800125a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800125e:	4b2a      	ldr	r3, [pc, #168]	; (8001308 <QEIEncoderPositionVelocity_Update+0xf0>)
 8001260:	edc3 7a08 	vstr	s15, [r3, #32]

	int32_t diffPosition = QEIData.data[0] - QEIData.data[1];
 8001264:	4b28      	ldr	r3, [pc, #160]	; (8001308 <QEIEncoderPositionVelocity_Update+0xf0>)
 8001266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126a:	4611      	mov	r1, r2
 800126c:	4b26      	ldr	r3, [pc, #152]	; (8001308 <QEIEncoderPositionVelocity_Update+0xf0>)
 800126e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001272:	4613      	mov	r3, r2
 8001274:	1acb      	subs	r3, r1, r3
 8001276:	60bb      	str	r3, [r7, #8]
	float difftime = (QEIData.timestamp[0] - QEIData.timestamp[1]);
 8001278:	4b23      	ldr	r3, [pc, #140]	; (8001308 <QEIEncoderPositionVelocity_Update+0xf0>)
 800127a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800127e:	4b22      	ldr	r3, [pc, #136]	; (8001308 <QEIEncoderPositionVelocity_Update+0xf0>)
 8001280:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001284:	1a84      	subs	r4, r0, r2
 8001286:	eb61 0503 	sbc.w	r5, r1, r3
 800128a:	4620      	mov	r0, r4
 800128c:	4629      	mov	r1, r5
 800128e:	f7ff fc89 	bl	8000ba4 <__aeabi_ul2f>
 8001292:	4603      	mov	r3, r0
 8001294:	607b      	str	r3, [r7, #4]


	//calculate
	QEIData.QEIVelocity = (diffPosition * 1000000*60.0)/(difftime*8192.0);
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	4a1e      	ldr	r2, [pc, #120]	; (8001314 <QEIEncoderPositionVelocity_Update+0xfc>)
 800129a:	fb02 f303 	mul.w	r3, r2, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff f8ec 	bl	800047c <__aeabi_i2d>
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <QEIEncoderPositionVelocity_Update+0x100>)
 80012aa:	f7ff f951 	bl	8000550 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4614      	mov	r4, r2
 80012b4:	461d      	mov	r5, r3
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff f8f2 	bl	80004a0 <__aeabi_f2d>
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	4b16      	ldr	r3, [pc, #88]	; (800131c <QEIEncoderPositionVelocity_Update+0x104>)
 80012c2:	f7ff f945 	bl	8000550 <__aeabi_dmul>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4620      	mov	r0, r4
 80012cc:	4629      	mov	r1, r5
 80012ce:	f7ff fa69 	bl	80007a4 <__aeabi_ddiv>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4610      	mov	r0, r2
 80012d8:	4619      	mov	r1, r3
 80012da:	f7ff fb4b 	bl	8000974 <__aeabi_d2f>
 80012de:	4603      	mov	r3, r0
 80012e0:	4a09      	ldr	r2, [pc, #36]	; (8001308 <QEIEncoderPositionVelocity_Update+0xf0>)
 80012e2:	6253      	str	r3, [r2, #36]	; 0x24

	//Delay
	QEIData.data[1] = QEIData.data[0];
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <QEIEncoderPositionVelocity_Update+0xf0>)
 80012e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ea:	4907      	ldr	r1, [pc, #28]	; (8001308 <QEIEncoderPositionVelocity_Update+0xf0>)
 80012ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
	QEIData.timestamp[1] = QEIData.timestamp[0];
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <QEIEncoderPositionVelocity_Update+0xf0>)
 80012f2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80012f6:	4904      	ldr	r1, [pc, #16]	; (8001308 <QEIEncoderPositionVelocity_Update+0xf0>)
 80012f8:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80012fc:	bf00      	nop
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001306:	bf00      	nop
 8001308:	200003c0 	.word	0x200003c0
 800130c:	20000074 	.word	0x20000074
 8001310:	200003a8 	.word	0x200003a8
 8001314:	000f4240 	.word	0x000f4240
 8001318:	404e0000 	.word	0x404e0000
 800131c:	40c00000 	.word	0x40c00000

08001320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001320:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001328:	f001 fa40 	bl	80027ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800132c:	f000 f91c 	bl	8001568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001330:	f000 fb22 	bl	8001978 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001334:	f000 faf6 	bl	8001924 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001338:	f000 f980 	bl	800163c <MX_TIM1_Init>
  MX_TIM2_Init();
 800133c:	f000 fa02 	bl	8001744 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001340:	f000 faa2 	bl	8001888 <MX_TIM5_Init>
  MX_TIM3_Init();
 8001344:	f000 fa52 	bl	80017ec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  InitKalmanStruct(&KF,0.001,0.1);
 8001348:	eddf 0a5d 	vldr	s1, [pc, #372]	; 80014c0 <main+0x1a0>
 800134c:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 80014c4 <main+0x1a4>
 8001350:	485d      	ldr	r0, [pc, #372]	; (80014c8 <main+0x1a8>)
 8001352:	f7ff fdef 	bl	8000f34 <InitKalmanStruct>
  InitReadEncoder(&ReadEncoderParam, 1000);
 8001356:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800135a:	485c      	ldr	r0, [pc, #368]	; (80014cc <main+0x1ac>)
 800135c:	f7ff ff3a 	bl	80011d4 <InitReadEncoder>

  arm_mat_init_f32(&mat_A, 3, 3,KF.A);//3x3
 8001360:	4b5b      	ldr	r3, [pc, #364]	; (80014d0 <main+0x1b0>)
 8001362:	2203      	movs	r2, #3
 8001364:	2103      	movs	r1, #3
 8001366:	485b      	ldr	r0, [pc, #364]	; (80014d4 <main+0x1b4>)
 8001368:	f000 fd64 	bl	8001e34 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_x_hat, 3, 1, KF.x_hat);
 800136c:	4b56      	ldr	r3, [pc, #344]	; (80014c8 <main+0x1a8>)
 800136e:	2201      	movs	r2, #1
 8001370:	2103      	movs	r1, #3
 8001372:	4859      	ldr	r0, [pc, #356]	; (80014d8 <main+0x1b8>)
 8001374:	f000 fd5e 	bl	8001e34 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_x_hat_minus, 3, 1, KF.x_hat_minus);
 8001378:	4b58      	ldr	r3, [pc, #352]	; (80014dc <main+0x1bc>)
 800137a:	2201      	movs	r2, #1
 800137c:	2103      	movs	r1, #3
 800137e:	4858      	ldr	r0, [pc, #352]	; (80014e0 <main+0x1c0>)
 8001380:	f000 fd58 	bl	8001e34 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_B, 3, 1, KF.B);
 8001384:	4b57      	ldr	r3, [pc, #348]	; (80014e4 <main+0x1c4>)
 8001386:	2201      	movs	r2, #1
 8001388:	2103      	movs	r1, #3
 800138a:	4857      	ldr	r0, [pc, #348]	; (80014e8 <main+0x1c8>)
 800138c:	f000 fd52 	bl	8001e34 <arm_mat_init_f32>
  //arm_mat_init_f32(&mat_u, 1, 1, NULL);  // Set the input control vector if needed
  arm_mat_init_f32(&mat_P, 3, 3, KF.P);//3x3
 8001390:	4b56      	ldr	r3, [pc, #344]	; (80014ec <main+0x1cc>)
 8001392:	2203      	movs	r2, #3
 8001394:	2103      	movs	r1, #3
 8001396:	4856      	ldr	r0, [pc, #344]	; (80014f0 <main+0x1d0>)
 8001398:	f000 fd4c 	bl	8001e34 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_P_minus, 3, 3, KF.P_minus);//3x3
 800139c:	4b55      	ldr	r3, [pc, #340]	; (80014f4 <main+0x1d4>)
 800139e:	2203      	movs	r2, #3
 80013a0:	2103      	movs	r1, #3
 80013a2:	4855      	ldr	r0, [pc, #340]	; (80014f8 <main+0x1d8>)
 80013a4:	f000 fd46 	bl	8001e34 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_Q, 3, 3,KF.Q);//3x3
 80013a8:	4b54      	ldr	r3, [pc, #336]	; (80014fc <main+0x1dc>)
 80013aa:	2203      	movs	r2, #3
 80013ac:	2103      	movs	r1, #3
 80013ae:	4854      	ldr	r0, [pc, #336]	; (8001500 <main+0x1e0>)
 80013b0:	f000 fd40 	bl	8001e34 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_C, 1, 3, KF.C);//1x3
 80013b4:	4b53      	ldr	r3, [pc, #332]	; (8001504 <main+0x1e4>)
 80013b6:	2203      	movs	r2, #3
 80013b8:	2101      	movs	r1, #1
 80013ba:	4853      	ldr	r0, [pc, #332]	; (8001508 <main+0x1e8>)
 80013bc:	f000 fd3a 	bl	8001e34 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_R, 1, 1, &KF.R);//1x1
 80013c0:	4b52      	ldr	r3, [pc, #328]	; (800150c <main+0x1ec>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	2101      	movs	r1, #1
 80013c6:	4852      	ldr	r0, [pc, #328]	; (8001510 <main+0x1f0>)
 80013c8:	f000 fd34 	bl	8001e34 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_S, 1, 1, KF.S);//1x1
 80013cc:	4b51      	ldr	r3, [pc, #324]	; (8001514 <main+0x1f4>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	2101      	movs	r1, #1
 80013d2:	4851      	ldr	r0, [pc, #324]	; (8001518 <main+0x1f8>)
 80013d4:	f000 fd2e 	bl	8001e34 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_K, 3, 1, KF.K);//3x1
 80013d8:	4b50      	ldr	r3, [pc, #320]	; (800151c <main+0x1fc>)
 80013da:	2201      	movs	r2, #1
 80013dc:	2103      	movs	r1, #3
 80013de:	4850      	ldr	r0, [pc, #320]	; (8001520 <main+0x200>)
 80013e0:	f000 fd28 	bl	8001e34 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_temp3x3A, 3, 3, KF.A);//3x3
 80013e4:	4b3a      	ldr	r3, [pc, #232]	; (80014d0 <main+0x1b0>)
 80013e6:	2203      	movs	r2, #3
 80013e8:	2103      	movs	r1, #3
 80013ea:	484e      	ldr	r0, [pc, #312]	; (8001524 <main+0x204>)
 80013ec:	f000 fd22 	bl	8001e34 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_temp3x3B, 3, 3, KF.B);//3x3
 80013f0:	4b3c      	ldr	r3, [pc, #240]	; (80014e4 <main+0x1c4>)
 80013f2:	2203      	movs	r2, #3
 80013f4:	2103      	movs	r1, #3
 80013f6:	484c      	ldr	r0, [pc, #304]	; (8001528 <main+0x208>)
 80013f8:	f000 fd1c 	bl	8001e34 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_temp3x1, 3, 1, KF.temp3x1);//3x1
 80013fc:	4b4b      	ldr	r3, [pc, #300]	; (800152c <main+0x20c>)
 80013fe:	2201      	movs	r2, #1
 8001400:	2103      	movs	r1, #3
 8001402:	484b      	ldr	r0, [pc, #300]	; (8001530 <main+0x210>)
 8001404:	f000 fd16 	bl	8001e34 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_temp1x3, 1, 3, KF.temp3x1);//1x3
 8001408:	4b48      	ldr	r3, [pc, #288]	; (800152c <main+0x20c>)
 800140a:	2203      	movs	r2, #3
 800140c:	2101      	movs	r1, #1
 800140e:	4849      	ldr	r0, [pc, #292]	; (8001534 <main+0x214>)
 8001410:	f000 fd10 	bl	8001e34 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_temp1x1, 1, 1, &KF.temp1x1);//1x1
 8001414:	4b48      	ldr	r3, [pc, #288]	; (8001538 <main+0x218>)
 8001416:	2201      	movs	r2, #1
 8001418:	2101      	movs	r1, #1
 800141a:	4848      	ldr	r0, [pc, #288]	; (800153c <main+0x21c>)
 800141c:	f000 fd0a 	bl	8001e34 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_G, 3, 1, KF.G);//3x1
 8001420:	4b47      	ldr	r3, [pc, #284]	; (8001540 <main+0x220>)
 8001422:	2201      	movs	r2, #1
 8001424:	2103      	movs	r1, #3
 8001426:	4847      	ldr	r0, [pc, #284]	; (8001544 <main+0x224>)
 8001428:	f000 fd04 	bl	8001e34 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_GT, 1, 3, KF.GT);//1x3
 800142c:	4b46      	ldr	r3, [pc, #280]	; (8001548 <main+0x228>)
 800142e:	2203      	movs	r2, #3
 8001430:	2101      	movs	r1, #1
 8001432:	4846      	ldr	r0, [pc, #280]	; (800154c <main+0x22c>)
 8001434:	f000 fcfe 	bl	8001e34 <arm_mat_init_f32>
  arm_mat_init_f32(&eye, 3, 3, KF.I);//1x3
 8001438:	4b45      	ldr	r3, [pc, #276]	; (8001550 <main+0x230>)
 800143a:	2203      	movs	r2, #3
 800143c:	2103      	movs	r1, #3
 800143e:	4845      	ldr	r0, [pc, #276]	; (8001554 <main+0x234>)
 8001440:	f000 fcf8 	bl	8001e34 <arm_mat_init_f32>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint64_t timestamp = 0;
	  int64_t currentTime = micros();
 8001444:	f7ff feac 	bl	80011a0 <micros>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	e9c7 2300 	strd	r2, r3, [r7]
	  if(currentTime > timestamp)
 8001450:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001454:	4940      	ldr	r1, [pc, #256]	; (8001558 <main+0x238>)
 8001456:	e9d1 0100 	ldrd	r0, r1, [r1]
 800145a:	4290      	cmp	r0, r2
 800145c:	eb71 0303 	sbcs.w	r3, r1, r3
 8001460:	d217      	bcs.n	8001492 <main+0x172>
	  {
		  timestamp = currentTime + ReadEncoderParam.samplingTime;
 8001462:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <main+0x1ac>)
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	2200      	movs	r2, #0
 8001468:	461c      	mov	r4, r3
 800146a:	4615      	mov	r5, r2
 800146c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001470:	eb14 0802 	adds.w	r8, r4, r2
 8001474:	eb45 0903 	adc.w	r9, r5, r3
 8001478:	4642      	mov	r2, r8
 800147a:	464b      	mov	r3, r9
 800147c:	4936      	ldr	r1, [pc, #216]	; (8001558 <main+0x238>)
 800147e:	e9c1 2300 	strd	r2, r3, [r1]
		  QEIEncoderPositionVelocity_Update();
 8001482:	f7ff fec9 	bl	8001218 <QEIEncoderPositionVelocity_Update>
		  KF.z = QEIData.QEIVelocity;
 8001486:	4b35      	ldr	r3, [pc, #212]	; (800155c <main+0x23c>)
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148a:	4a0f      	ldr	r2, [pc, #60]	; (80014c8 <main+0x1a8>)
 800148c:	65d3      	str	r3, [r2, #92]	; 0x5c
		  kalman_filter();
 800148e:	f7ff fdeb 	bl	8001068 <kalman_filter>
	  }
	  //--------------------------------------------------------------------PWM
	  ReadEncoderParam.Pulse_Compare = ReadEncoderParam.MotorSetDuty * 10;
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <main+0x1ac>)
 8001494:	7c1b      	ldrb	r3, [r3, #16]
 8001496:	461a      	mov	r2, r3
 8001498:	0092      	lsls	r2, r2, #2
 800149a:	4413      	add	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <main+0x1ac>)
 80014a2:	745a      	strb	r2, [r3, #17]
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,ReadEncoderParam.Pulse_Compare);
 80014a4:	4b09      	ldr	r3, [pc, #36]	; (80014cc <main+0x1ac>)
 80014a6:	7c5a      	ldrb	r2, [r3, #17]
 80014a8:	4b2d      	ldr	r3, [pc, #180]	; (8001560 <main+0x240>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, ReadEncoderParam.DIR);
 80014ae:	4b07      	ldr	r3, [pc, #28]	; (80014cc <main+0x1ac>)
 80014b0:	7c9b      	ldrb	r3, [r3, #18]
 80014b2:	461a      	mov	r2, r3
 80014b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014b8:	482a      	ldr	r0, [pc, #168]	; (8001564 <main+0x244>)
 80014ba:	f001 fc53 	bl	8002d64 <HAL_GPIO_WritePin>
  {
 80014be:	e7c1      	b.n	8001444 <main+0x124>
 80014c0:	3dcccccd 	.word	0x3dcccccd
 80014c4:	3a83126f 	.word	0x3a83126f
 80014c8:	20000190 	.word	0x20000190
 80014cc:	200003a8 	.word	0x200003a8
 80014d0:	200001f0 	.word	0x200001f0
 80014d4:	20000310 	.word	0x20000310
 80014d8:	20000318 	.word	0x20000318
 80014dc:	2000026c 	.word	0x2000026c
 80014e0:	20000320 	.word	0x20000320
 80014e4:	20000214 	.word	0x20000214
 80014e8:	20000328 	.word	0x20000328
 80014ec:	2000019c 	.word	0x2000019c
 80014f0:	20000348 	.word	0x20000348
 80014f4:	20000278 	.word	0x20000278
 80014f8:	20000350 	.word	0x20000350
 80014fc:	200001c0 	.word	0x200001c0
 8001500:	20000358 	.word	0x20000358
 8001504:	20000220 	.word	0x20000220
 8001508:	20000360 	.word	0x20000360
 800150c:	200001e4 	.word	0x200001e4
 8001510:	20000368 	.word	0x20000368
 8001514:	2000029c 	.word	0x2000029c
 8001518:	20000370 	.word	0x20000370
 800151c:	200002a0 	.word	0x200002a0
 8001520:	20000378 	.word	0x20000378
 8001524:	20000380 	.word	0x20000380
 8001528:	20000388 	.word	0x20000388
 800152c:	200002f4 	.word	0x200002f4
 8001530:	20000390 	.word	0x20000390
 8001534:	20000398 	.word	0x20000398
 8001538:	2000030c 	.word	0x2000030c
 800153c:	200003a0 	.word	0x200003a0
 8001540:	20000230 	.word	0x20000230
 8001544:	20000338 	.word	0x20000338
 8001548:	2000023c 	.word	0x2000023c
 800154c:	20000330 	.word	0x20000330
 8001550:	20000248 	.word	0x20000248
 8001554:	20000340 	.word	0x20000340
 8001558:	200003e8 	.word	0x200003e8
 800155c:	200003c0 	.word	0x200003c0
 8001560:	2000002c 	.word	0x2000002c
 8001564:	40020400 	.word	0x40020400

08001568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b094      	sub	sp, #80	; 0x50
 800156c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156e:	f107 0320 	add.w	r3, r7, #32
 8001572:	2230      	movs	r2, #48	; 0x30
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f003 f9c0 	bl	80048fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800158c:	2300      	movs	r3, #0
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	4b28      	ldr	r3, [pc, #160]	; (8001634 <SystemClock_Config+0xcc>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	4a27      	ldr	r2, [pc, #156]	; (8001634 <SystemClock_Config+0xcc>)
 8001596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800159a:	6413      	str	r3, [r2, #64]	; 0x40
 800159c:	4b25      	ldr	r3, [pc, #148]	; (8001634 <SystemClock_Config+0xcc>)
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015a8:	2300      	movs	r3, #0
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	4b22      	ldr	r3, [pc, #136]	; (8001638 <SystemClock_Config+0xd0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a21      	ldr	r2, [pc, #132]	; (8001638 <SystemClock_Config+0xd0>)
 80015b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	4b1f      	ldr	r3, [pc, #124]	; (8001638 <SystemClock_Config+0xd0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015c4:	2302      	movs	r3, #2
 80015c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015c8:	2301      	movs	r3, #1
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015cc:	2310      	movs	r3, #16
 80015ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d0:	2302      	movs	r3, #2
 80015d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015d4:	2300      	movs	r3, #0
 80015d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80015d8:	2310      	movs	r3, #16
 80015da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015e2:	2304      	movs	r3, #4
 80015e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015e6:	2304      	movs	r3, #4
 80015e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ea:	f107 0320 	add.w	r3, r7, #32
 80015ee:	4618      	mov	r0, r3
 80015f0:	f001 fbd2 	bl	8002d98 <HAL_RCC_OscConfig>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80015fa:	f000 fa2b 	bl	8001a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015fe:	230f      	movs	r3, #15
 8001600:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001602:	2302      	movs	r3, #2
 8001604:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800160a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800160e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	2102      	movs	r1, #2
 800161a:	4618      	mov	r0, r3
 800161c:	f001 fe34 	bl	8003288 <HAL_RCC_ClockConfig>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001626:	f000 fa15 	bl	8001a54 <Error_Handler>
  }
}
 800162a:	bf00      	nop
 800162c:	3750      	adds	r7, #80	; 0x50
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800
 8001638:	40007000 	.word	0x40007000

0800163c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b092      	sub	sp, #72	; 0x48
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001642:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800164c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
 800165c:	615a      	str	r2, [r3, #20]
 800165e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	2220      	movs	r2, #32
 8001664:	2100      	movs	r1, #0
 8001666:	4618      	mov	r0, r3
 8001668:	f003 f948 	bl	80048fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800166c:	4b33      	ldr	r3, [pc, #204]	; (800173c <MX_TIM1_Init+0x100>)
 800166e:	4a34      	ldr	r2, [pc, #208]	; (8001740 <MX_TIM1_Init+0x104>)
 8001670:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8001672:	4b32      	ldr	r3, [pc, #200]	; (800173c <MX_TIM1_Init+0x100>)
 8001674:	2253      	movs	r2, #83	; 0x53
 8001676:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001678:	4b30      	ldr	r3, [pc, #192]	; (800173c <MX_TIM1_Init+0x100>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800167e:	4b2f      	ldr	r3, [pc, #188]	; (800173c <MX_TIM1_Init+0x100>)
 8001680:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001684:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001686:	4b2d      	ldr	r3, [pc, #180]	; (800173c <MX_TIM1_Init+0x100>)
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800168c:	4b2b      	ldr	r3, [pc, #172]	; (800173c <MX_TIM1_Init+0x100>)
 800168e:	2200      	movs	r2, #0
 8001690:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001692:	4b2a      	ldr	r3, [pc, #168]	; (800173c <MX_TIM1_Init+0x100>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001698:	4828      	ldr	r0, [pc, #160]	; (800173c <MX_TIM1_Init+0x100>)
 800169a:	f002 f864 	bl	8003766 <HAL_TIM_PWM_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80016a4:	f000 f9d6 	bl	8001a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a8:	2300      	movs	r3, #0
 80016aa:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016b4:	4619      	mov	r1, r3
 80016b6:	4821      	ldr	r0, [pc, #132]	; (800173c <MX_TIM1_Init+0x100>)
 80016b8:	f002 fd7a 	bl	80041b0 <HAL_TIMEx_MasterConfigSynchronization>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80016c2:	f000 f9c7 	bl	8001a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016c6:	2360      	movs	r3, #96	; 0x60
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 80016ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016d4:	2300      	movs	r3, #0
 80016d6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016dc:	2300      	movs	r3, #0
 80016de:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016e0:	2300      	movs	r3, #0
 80016e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e8:	2200      	movs	r2, #0
 80016ea:	4619      	mov	r1, r3
 80016ec:	4813      	ldr	r0, [pc, #76]	; (800173c <MX_TIM1_Init+0x100>)
 80016ee:	f002 f92f 	bl	8003950 <HAL_TIM_PWM_ConfigChannel>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80016f8:	f000 f9ac 	bl	8001a54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001710:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001714:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001716:	2300      	movs	r3, #0
 8001718:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	4619      	mov	r1, r3
 800171e:	4807      	ldr	r0, [pc, #28]	; (800173c <MX_TIM1_Init+0x100>)
 8001720:	f002 fdb4 	bl	800428c <HAL_TIMEx_ConfigBreakDeadTime>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 800172a:	f000 f993 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800172e:	4803      	ldr	r0, [pc, #12]	; (800173c <MX_TIM1_Init+0x100>)
 8001730:	f000 fa5e 	bl	8001bf0 <HAL_TIM_MspPostInit>

}
 8001734:	bf00      	nop
 8001736:	3748      	adds	r7, #72	; 0x48
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	2000002c 	.word	0x2000002c
 8001740:	40010000 	.word	0x40010000

08001744 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08c      	sub	sp, #48	; 0x30
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800174a:	f107 030c 	add.w	r3, r7, #12
 800174e:	2224      	movs	r2, #36	; 0x24
 8001750:	2100      	movs	r1, #0
 8001752:	4618      	mov	r0, r3
 8001754:	f003 f8d2 	bl	80048fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001760:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <MX_TIM2_Init+0xa4>)
 8001762:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001766:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001768:	4b1f      	ldr	r3, [pc, #124]	; (80017e8 <MX_TIM2_Init+0xa4>)
 800176a:	2200      	movs	r2, #0
 800176c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176e:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <MX_TIM2_Init+0xa4>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001774:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <MX_TIM2_Init+0xa4>)
 8001776:	f04f 32ff 	mov.w	r2, #4294967295
 800177a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <MX_TIM2_Init+0xa4>)
 800177e:	2200      	movs	r2, #0
 8001780:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001782:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <MX_TIM2_Init+0xa4>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001788:	2303      	movs	r3, #3
 800178a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800178c:	2300      	movs	r3, #0
 800178e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001790:	2301      	movs	r3, #1
 8001792:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001794:	2300      	movs	r3, #0
 8001796:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800179c:	2300      	movs	r3, #0
 800179e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017a0:	2301      	movs	r3, #1
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	4619      	mov	r1, r3
 80017b2:	480d      	ldr	r0, [pc, #52]	; (80017e8 <MX_TIM2_Init+0xa4>)
 80017b4:	f002 f826 	bl	8003804 <HAL_TIM_Encoder_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80017be:	f000 f949 	bl	8001a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	4619      	mov	r1, r3
 80017ce:	4806      	ldr	r0, [pc, #24]	; (80017e8 <MX_TIM2_Init+0xa4>)
 80017d0:	f002 fcee 	bl	80041b0 <HAL_TIMEx_MasterConfigSynchronization>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80017da:	f000 f93b 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017de:	bf00      	nop
 80017e0:	3730      	adds	r7, #48	; 0x30
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000074 	.word	0x20000074

080017ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017f2:	f107 0308 	add.w	r3, r7, #8
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001800:	463b      	mov	r3, r7
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001808:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <MX_TIM3_Init+0x94>)
 800180a:	4a1e      	ldr	r2, [pc, #120]	; (8001884 <MX_TIM3_Init+0x98>)
 800180c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 800180e:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <MX_TIM3_Init+0x94>)
 8001810:	2253      	movs	r2, #83	; 0x53
 8001812:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001814:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <MX_TIM3_Init+0x94>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800181a:	4b19      	ldr	r3, [pc, #100]	; (8001880 <MX_TIM3_Init+0x94>)
 800181c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001820:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001822:	4b17      	ldr	r3, [pc, #92]	; (8001880 <MX_TIM3_Init+0x94>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001828:	4b15      	ldr	r3, [pc, #84]	; (8001880 <MX_TIM3_Init+0x94>)
 800182a:	2200      	movs	r2, #0
 800182c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800182e:	4814      	ldr	r0, [pc, #80]	; (8001880 <MX_TIM3_Init+0x94>)
 8001830:	f001 ff4a 	bl	80036c8 <HAL_TIM_Base_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800183a:	f000 f90b 	bl	8001a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800183e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001842:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001844:	f107 0308 	add.w	r3, r7, #8
 8001848:	4619      	mov	r1, r3
 800184a:	480d      	ldr	r0, [pc, #52]	; (8001880 <MX_TIM3_Init+0x94>)
 800184c:	f002 f942 	bl	8003ad4 <HAL_TIM_ConfigClockSource>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001856:	f000 f8fd 	bl	8001a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800185a:	2300      	movs	r3, #0
 800185c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001862:	463b      	mov	r3, r7
 8001864:	4619      	mov	r1, r3
 8001866:	4806      	ldr	r0, [pc, #24]	; (8001880 <MX_TIM3_Init+0x94>)
 8001868:	f002 fca2 	bl	80041b0 <HAL_TIMEx_MasterConfigSynchronization>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001872:	f000 f8ef 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001876:	bf00      	nop
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	200000bc 	.word	0x200000bc
 8001884:	40000400 	.word	0x40000400

08001888 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800188e:	f107 0308 	add.w	r3, r7, #8
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]
 800189a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800189c:	463b      	mov	r3, r7
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80018a4:	4b1d      	ldr	r3, [pc, #116]	; (800191c <MX_TIM5_Init+0x94>)
 80018a6:	4a1e      	ldr	r2, [pc, #120]	; (8001920 <MX_TIM5_Init+0x98>)
 80018a8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 80018aa:	4b1c      	ldr	r3, [pc, #112]	; (800191c <MX_TIM5_Init+0x94>)
 80018ac:	2253      	movs	r2, #83	; 0x53
 80018ae:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b0:	4b1a      	ldr	r3, [pc, #104]	; (800191c <MX_TIM5_Init+0x94>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80018b6:	4b19      	ldr	r3, [pc, #100]	; (800191c <MX_TIM5_Init+0x94>)
 80018b8:	f04f 32ff 	mov.w	r2, #4294967295
 80018bc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018be:	4b17      	ldr	r3, [pc, #92]	; (800191c <MX_TIM5_Init+0x94>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c4:	4b15      	ldr	r3, [pc, #84]	; (800191c <MX_TIM5_Init+0x94>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80018ca:	4814      	ldr	r0, [pc, #80]	; (800191c <MX_TIM5_Init+0x94>)
 80018cc:	f001 fefc 	bl	80036c8 <HAL_TIM_Base_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80018d6:	f000 f8bd 	bl	8001a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80018e0:	f107 0308 	add.w	r3, r7, #8
 80018e4:	4619      	mov	r1, r3
 80018e6:	480d      	ldr	r0, [pc, #52]	; (800191c <MX_TIM5_Init+0x94>)
 80018e8:	f002 f8f4 	bl	8003ad4 <HAL_TIM_ConfigClockSource>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80018f2:	f000 f8af 	bl	8001a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f6:	2300      	movs	r3, #0
 80018f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80018fe:	463b      	mov	r3, r7
 8001900:	4619      	mov	r1, r3
 8001902:	4806      	ldr	r0, [pc, #24]	; (800191c <MX_TIM5_Init+0x94>)
 8001904:	f002 fc54 	bl	80041b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800190e:	f000 f8a1 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001912:	bf00      	nop
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000104 	.word	0x20000104
 8001920:	40000c00 	.word	0x40000c00

08001924 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001928:	4b11      	ldr	r3, [pc, #68]	; (8001970 <MX_USART2_UART_Init+0x4c>)
 800192a:	4a12      	ldr	r2, [pc, #72]	; (8001974 <MX_USART2_UART_Init+0x50>)
 800192c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800192e:	4b10      	ldr	r3, [pc, #64]	; (8001970 <MX_USART2_UART_Init+0x4c>)
 8001930:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001934:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001936:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <MX_USART2_UART_Init+0x4c>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <MX_USART2_UART_Init+0x4c>)
 800193e:	2200      	movs	r2, #0
 8001940:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001942:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <MX_USART2_UART_Init+0x4c>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001948:	4b09      	ldr	r3, [pc, #36]	; (8001970 <MX_USART2_UART_Init+0x4c>)
 800194a:	220c      	movs	r2, #12
 800194c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800194e:	4b08      	ldr	r3, [pc, #32]	; (8001970 <MX_USART2_UART_Init+0x4c>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <MX_USART2_UART_Init+0x4c>)
 8001956:	2200      	movs	r2, #0
 8001958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800195a:	4805      	ldr	r0, [pc, #20]	; (8001970 <MX_USART2_UART_Init+0x4c>)
 800195c:	f002 fce8 	bl	8004330 <HAL_UART_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001966:	f000 f875 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	2000014c 	.word	0x2000014c
 8001974:	40004400 	.word	0x40004400

08001978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08a      	sub	sp, #40	; 0x28
 800197c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	60da      	str	r2, [r3, #12]
 800198c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	4b2d      	ldr	r3, [pc, #180]	; (8001a48 <MX_GPIO_Init+0xd0>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a2c      	ldr	r2, [pc, #176]	; (8001a48 <MX_GPIO_Init+0xd0>)
 8001998:	f043 0304 	orr.w	r3, r3, #4
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b2a      	ldr	r3, [pc, #168]	; (8001a48 <MX_GPIO_Init+0xd0>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	4b26      	ldr	r3, [pc, #152]	; (8001a48 <MX_GPIO_Init+0xd0>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a25      	ldr	r2, [pc, #148]	; (8001a48 <MX_GPIO_Init+0xd0>)
 80019b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b23      	ldr	r3, [pc, #140]	; (8001a48 <MX_GPIO_Init+0xd0>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	4b1f      	ldr	r3, [pc, #124]	; (8001a48 <MX_GPIO_Init+0xd0>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a1e      	ldr	r2, [pc, #120]	; (8001a48 <MX_GPIO_Init+0xd0>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <MX_GPIO_Init+0xd0>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	607b      	str	r3, [r7, #4]
 80019e6:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <MX_GPIO_Init+0xd0>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a17      	ldr	r2, [pc, #92]	; (8001a48 <MX_GPIO_Init+0xd0>)
 80019ec:	f043 0302 	orr.w	r3, r3, #2
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <MX_GPIO_Init+0xd0>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2120      	movs	r1, #32
 8001a02:	4812      	ldr	r0, [pc, #72]	; (8001a4c <MX_GPIO_Init+0xd4>)
 8001a04:	f001 f9ae 	bl	8002d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a0e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	480c      	ldr	r0, [pc, #48]	; (8001a50 <MX_GPIO_Init+0xd8>)
 8001a20:	f001 f81c 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a24:	2320      	movs	r3, #32
 8001a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a30:	2300      	movs	r3, #0
 8001a32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4804      	ldr	r0, [pc, #16]	; (8001a4c <MX_GPIO_Init+0xd4>)
 8001a3c:	f001 f80e 	bl	8002a5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a40:	bf00      	nop
 8001a42:	3728      	adds	r7, #40	; 0x28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40020000 	.word	0x40020000
 8001a50:	40020800 	.word	0x40020800

08001a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a58:	b672      	cpsid	i
}
 8001a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <Error_Handler+0x8>
	...

08001a60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <HAL_MspInit+0x4c>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	4a0f      	ldr	r2, [pc, #60]	; (8001aac <HAL_MspInit+0x4c>)
 8001a70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a74:	6453      	str	r3, [r2, #68]	; 0x44
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <HAL_MspInit+0x4c>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	603b      	str	r3, [r7, #0]
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <HAL_MspInit+0x4c>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	4a08      	ldr	r2, [pc, #32]	; (8001aac <HAL_MspInit+0x4c>)
 8001a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a90:	6413      	str	r3, [r2, #64]	; 0x40
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_MspInit+0x4c>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	603b      	str	r3, [r7, #0]
 8001a9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a9e:	2007      	movs	r0, #7
 8001aa0:	f000 ffa8 	bl	80029f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40023800 	.word	0x40023800

08001ab0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0b      	ldr	r2, [pc, #44]	; (8001aec <HAL_TIM_PWM_MspInit+0x3c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d10d      	bne.n	8001ade <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <HAL_TIM_PWM_MspInit+0x40>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	4a09      	ldr	r2, [pc, #36]	; (8001af0 <HAL_TIM_PWM_MspInit+0x40>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad2:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <HAL_TIM_PWM_MspInit+0x40>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ade:	bf00      	nop
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40010000 	.word	0x40010000
 8001af0:	40023800 	.word	0x40023800

08001af4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	; 0x28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b14:	d12b      	bne.n	8001b6e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	4a16      	ldr	r2, [pc, #88]	; (8001b78 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	6413      	str	r3, [r2, #64]	; 0x40
 8001b26:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a0f      	ldr	r2, [pc, #60]	; (8001b78 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	2302      	movs	r3, #2
 8001b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b62:	f107 0314 	add.w	r3, r7, #20
 8001b66:	4619      	mov	r1, r3
 8001b68:	4804      	ldr	r0, [pc, #16]	; (8001b7c <HAL_TIM_Encoder_MspInit+0x88>)
 8001b6a:	f000 ff77 	bl	8002a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b6e:	bf00      	nop
 8001b70:	3728      	adds	r7, #40	; 0x28
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40020000 	.word	0x40020000

08001b80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a15      	ldr	r2, [pc, #84]	; (8001be4 <HAL_TIM_Base_MspInit+0x64>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d10e      	bne.n	8001bb0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <HAL_TIM_Base_MspInit+0x68>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	4a13      	ldr	r2, [pc, #76]	; (8001be8 <HAL_TIM_Base_MspInit+0x68>)
 8001b9c:	f043 0302 	orr.w	r3, r3, #2
 8001ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba2:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <HAL_TIM_Base_MspInit+0x68>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001bae:	e012      	b.n	8001bd6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM5)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0d      	ldr	r2, [pc, #52]	; (8001bec <HAL_TIM_Base_MspInit+0x6c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d10d      	bne.n	8001bd6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <HAL_TIM_Base_MspInit+0x68>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	4a09      	ldr	r2, [pc, #36]	; (8001be8 <HAL_TIM_Base_MspInit+0x68>)
 8001bc4:	f043 0308 	orr.w	r3, r3, #8
 8001bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bca:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <HAL_TIM_Base_MspInit+0x68>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
}
 8001bd6:	bf00      	nop
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40000400 	.word	0x40000400
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40000c00 	.word	0x40000c00

08001bf0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 030c 	add.w	r3, r7, #12
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <HAL_TIM_MspPostInit+0x68>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d11e      	bne.n	8001c50 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <HAL_TIM_MspPostInit+0x6c>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4a10      	ldr	r2, [pc, #64]	; (8001c5c <HAL_TIM_MspPostInit+0x6c>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6313      	str	r3, [r2, #48]	; 0x30
 8001c22:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <HAL_TIM_MspPostInit+0x6c>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c32:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c34:	2302      	movs	r3, #2
 8001c36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c40:	2301      	movs	r3, #1
 8001c42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c44:	f107 030c 	add.w	r3, r7, #12
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4805      	ldr	r0, [pc, #20]	; (8001c60 <HAL_TIM_MspPostInit+0x70>)
 8001c4c:	f000 ff06 	bl	8002a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c50:	bf00      	nop
 8001c52:	3720      	adds	r7, #32
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40010000 	.word	0x40010000
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40020000 	.word	0x40020000

08001c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	; 0x28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a19      	ldr	r2, [pc, #100]	; (8001ce8 <HAL_UART_MspInit+0x84>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d12b      	bne.n	8001cde <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	4b18      	ldr	r3, [pc, #96]	; (8001cec <HAL_UART_MspInit+0x88>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	4a17      	ldr	r2, [pc, #92]	; (8001cec <HAL_UART_MspInit+0x88>)
 8001c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c94:	6413      	str	r3, [r2, #64]	; 0x40
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <HAL_UART_MspInit+0x88>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <HAL_UART_MspInit+0x88>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a10      	ldr	r2, [pc, #64]	; (8001cec <HAL_UART_MspInit+0x88>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <HAL_UART_MspInit+0x88>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001cbe:	230c      	movs	r3, #12
 8001cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cce:	2307      	movs	r3, #7
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <HAL_UART_MspInit+0x8c>)
 8001cda:	f000 febf 	bl	8002a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cde:	bf00      	nop
 8001ce0:	3728      	adds	r7, #40	; 0x28
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40004400 	.word	0x40004400
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40020000 	.word	0x40020000

08001cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <NMI_Handler+0x4>

08001cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cfe:	e7fe      	b.n	8001cfe <HardFault_Handler+0x4>

08001d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <MemManage_Handler+0x4>

08001d06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d0a:	e7fe      	b.n	8001d0a <BusFault_Handler+0x4>

08001d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d10:	e7fe      	b.n	8001d10 <UsageFault_Handler+0x4>

08001d12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d40:	f000 fd86 	bl	8002850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d44:	bf00      	nop
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <SystemInit+0x20>)
 8001d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d52:	4a05      	ldr	r2, [pc, #20]	; (8001d68 <SystemInit+0x20>)
 8001d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001da4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d70:	480d      	ldr	r0, [pc, #52]	; (8001da8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d72:	490e      	ldr	r1, [pc, #56]	; (8001dac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d74:	4a0e      	ldr	r2, [pc, #56]	; (8001db0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d78:	e002      	b.n	8001d80 <LoopCopyDataInit>

08001d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d7e:	3304      	adds	r3, #4

08001d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d84:	d3f9      	bcc.n	8001d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d86:	4a0b      	ldr	r2, [pc, #44]	; (8001db4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d88:	4c0b      	ldr	r4, [pc, #44]	; (8001db8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d8c:	e001      	b.n	8001d92 <LoopFillZerobss>

08001d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d90:	3204      	adds	r2, #4

08001d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d94:	d3fb      	bcc.n	8001d8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d96:	f7ff ffd7 	bl	8001d48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d9a:	f002 fd8b 	bl	80048b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d9e:	f7ff fabf 	bl	8001320 <main>
  bx  lr    
 8001da2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001da4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001db0:	080049a0 	.word	0x080049a0
  ldr r2, =_sbss
 8001db4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001db8:	200003f4 	.word	0x200003f4

08001dbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dbc:	e7fe      	b.n	8001dbc <ADC_IRQHandler>

08001dbe <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b08b      	sub	sp, #44	; 0x2c
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	60f8      	str	r0, [r7, #12]
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	461a      	mov	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	885b      	ldrh	r3, [r3, #2]
 8001de6:	fb02 f303 	mul.w	r3, r2, r3
 8001dea:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8001df0:	e013      	b.n	8001e1a <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	1d1a      	adds	r2, r3, #4
 8001df6:	627a      	str	r2, [r7, #36]	; 0x24
 8001df8:	ed93 7a00 	vldr	s14, [r3]
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	1d1a      	adds	r2, r3, #4
 8001e00:	623a      	str	r2, [r7, #32]
 8001e02:	edd3 7a00 	vldr	s15, [r3]
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	1d1a      	adds	r2, r3, #4
 8001e0a:	61fa      	str	r2, [r7, #28]
 8001e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e10:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1e8      	bne.n	8001df2 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8001e20:	2300      	movs	r3, #0
 8001e22:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8001e24:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	372c      	adds	r7, #44	; 0x2c
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	817b      	strh	r3, [r7, #10]
 8001e42:	4613      	mov	r3, r2
 8001e44:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	897a      	ldrh	r2, [r7, #10]
 8001e4a:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	893a      	ldrh	r2, [r7, #8]
 8001e50:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	605a      	str	r2, [r3, #4]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b0bb      	sub	sp, #236	; 0xec
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	667b      	str	r3, [r7, #100]	; 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	663b      	str	r3, [r7, #96]	; 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	885b      	ldrh	r3, [r3, #2]
 8001e84:	65bb      	str	r3, [r7, #88]	; 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 8001e86:	f04f 0300 	mov.w	r3, #0
 8001e8a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001e8e:	f04f 0300 	mov.w	r3, #0
 8001e92:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 8001e94:	2300      	movs	r3, #0
 8001e96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 8001e9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 8001ea0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ea2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8001ea6:	e03b      	b.n	8001f20 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 8001ea8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001eaa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 8001eb4:	e00c      	b.n	8001ed0 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 8001eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001eba:	1d1a      	adds	r2, r3, #4
 8001ebc:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
        j--;
 8001ec6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 8001ed0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1ee      	bne.n	8001eb6 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 8001ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001edc:	1d1a      	adds	r2, r3, #4
 8001ede:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001ee2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ee6:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 8001ee8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001eec:	3b01      	subs	r3, #1
 8001eee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 8001ef2:	e00c      	b.n	8001f0e <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 8001ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ef8:	1d1a      	adds	r2, r3, #4
 8001efa:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
        j--;
 8001f04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 8001f0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1ee      	bne.n	8001ef4 <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 8001f16:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    while (rowCnt > 0U)
 8001f20:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1bf      	bne.n	8001ea8 <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001f2e:	e2c7      	b.n	80024c0 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 8001f30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f34:	653b      	str	r3, [r7, #80]	; 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	885b      	ldrh	r3, [r3, #2]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001f44:	fb01 f303 	mul.w	r3, r1, r3
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      pivot = *pTmp;
 8001f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      selectedRow = column;
 8001f5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8001f62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f66:	3301      	adds	r3, #1
 8001f68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001f6c:	e02c      	b.n	8001fc8 <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	885b      	ldrh	r3, [r3, #2]
 8001f76:	4619      	mov	r1, r3
 8001f78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001f7c:	fb03 f101 	mul.w	r1, r3, r1
 8001f80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f84:	440b      	add	r3, r1
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
          newPivot = *pTmp;
 8001f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	657b      	str	r3, [r7, #84]	; 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 8001f96:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001f9a:	eeb0 7ae7 	vabs.f32	s14, s15
 8001f9e:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8001fa2:	eef0 7ae7 	vabs.f32	s15, s15
 8001fa6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fae:	dd06      	ble.n	8001fbe <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 8001fb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001fb4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            pivot = newPivot;
 8001fb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8001fbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001fc8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001fcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d3cd      	bcc.n	8001f6e <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 8001fd2:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8001fd6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fde:	f000 809b 	beq.w	8002118 <arm_mat_inverse_f32+0x2b4>
 8001fe2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001fe6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fea:	429a      	cmp	r2, r3
 8001fec:	f000 8094 	beq.w	8002118 <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	885b      	ldrh	r3, [r3, #2]
 8002004:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002006:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002008:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002012:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002014:	fb03 f202 	mul.w	r2, r3, r2
 8002018:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800201c:	4413      	add	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002024:	4413      	add	r3, r2
 8002026:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800202a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800202c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002030:	fb03 f202 	mul.w	r2, r3, r2
 8002034:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002038:	4413      	add	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002040:	4413      	add	r3, r2
 8002042:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002046:	2300      	movs	r3, #0
 8002048:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800204c:	e018      	b.n	8002080 <arm_mat_inverse_f32+0x21c>
 800204e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	63bb      	str	r3, [r7, #56]	; 0x38
 8002056:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800205a:	1d1a      	adds	r2, r3, #4
 800205c:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8002060:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002064:	6812      	ldr	r2, [r2, #0]
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800206c:	1d1a      	adds	r2, r3, #4
 800206e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002072:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800207a:	3301      	adds	r3, #1
 800207c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002080:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002084:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002086:	429a      	cmp	r2, r3
 8002088:	dbe1      	blt.n	800204e <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	885b      	ldrh	r3, [r3, #2]
 800209e:	647b      	str	r3, [r7, #68]	; 0x44
 80020a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020a2:	643b      	str	r3, [r7, #64]	; 0x40
 80020a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80020a8:	fb02 f303 	mul.w	r3, r2, r3
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80020b2:	4413      	add	r3, r2
 80020b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80020b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80020be:	fb02 f303 	mul.w	r3, r2, r3
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80020c8:	4413      	add	r3, r2
 80020ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80020ce:	2300      	movs	r3, #0
 80020d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80020d4:	e018      	b.n	8002108 <arm_mat_inverse_f32+0x2a4>
 80020d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020e2:	1d1a      	adds	r2, r3, #4
 80020e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80020e8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020f4:	1d1a      	adds	r2, r3, #4
 80020f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80020fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002102:	3301      	adds	r3, #1
 8002104:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002108:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800210c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800210e:	429a      	cmp	r2, r3
 8002110:	dbe1      	blt.n	80020d6 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8002112:	2301      	movs	r3, #1
 8002114:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 8002118:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800211c:	2b01      	cmp	r3, #1
 800211e:	d009      	beq.n	8002134 <arm_mat_inverse_f32+0x2d0>
 8002120:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002124:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800212c:	d102      	bne.n	8002134 <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800212e:	f06f 0304 	mvn.w	r3, #4
 8002132:	e208      	b.n	8002546 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 8002134:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002138:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 800213c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002140:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	885b      	ldrh	r3, [r3, #2]
 8002150:	637b      	str	r3, [r7, #52]	; 0x34
 8002152:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002154:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	633b      	str	r3, [r7, #48]	; 0x30
 800215c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800215e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002160:	fb03 f202 	mul.w	r2, r3, r2
 8002164:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002168:	4413      	add	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002170:	4413      	add	r3, r2
 8002172:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002176:	2300      	movs	r3, #0
 8002178:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800217c:	e011      	b.n	80021a2 <arm_mat_inverse_f32+0x33e>
 800217e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002182:	1d1a      	adds	r2, r3, #4
 8002184:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8002188:	ed93 7a00 	vldr	s14, [r3]
 800218c:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002194:	edc3 7a00 	vstr	s15, [r3]
 8002198:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800219c:	3301      	adds	r3, #1
 800219e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80021a2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80021a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a8:	429a      	cmp	r2, r3
 80021aa:	dbe8      	blt.n	800217e <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	885b      	ldrh	r3, [r3, #2]
 80021b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80021be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80021c2:	fb02 f303 	mul.w	r3, r2, r3
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80021cc:	4413      	add	r3, r2
 80021ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80021d2:	2300      	movs	r3, #0
 80021d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80021d8:	e011      	b.n	80021fe <arm_mat_inverse_f32+0x39a>
 80021da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021de:	1d1a      	adds	r2, r3, #4
 80021e0:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80021e4:	ed93 7a00 	vldr	s14, [r3]
 80021e8:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80021ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021f0:	edc3 7a00 	vstr	s15, [r3]
 80021f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021f8:	3301      	adds	r3, #1
 80021fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80021fe:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002204:	429a      	cmp	r2, r3
 8002206:	dbe8      	blt.n	80021da <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800220e:	e0ae      	b.n	800236e <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	885b      	ldrh	r3, [r3, #2]
 8002218:	4619      	mov	r1, r3
 800221a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800221e:	fb03 f101 	mul.w	r1, r3, r1
 8002222:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002226:	440b      	add	r3, r1
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           pivot = *pTmp;
 8002230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	885b      	ldrh	r3, [r3, #2]
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002260:	fb03 f202 	mul.w	r2, r3, r2
 8002264:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002268:	4413      	add	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002270:	4413      	add	r3, r2
 8002272:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800227a:	fb03 f202 	mul.w	r2, r3, r2
 800227e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002282:	4413      	add	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800228a:	4413      	add	r3, r2
 800228c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002290:	2300      	movs	r3, #0
 8002292:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002296:	e01a      	b.n	80022ce <arm_mat_inverse_f32+0x46a>
 8002298:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800229c:	1d1a      	adds	r2, r3, #4
 800229e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80022a2:	ed93 7a00 	vldr	s14, [r3]
 80022a6:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80022aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022b2:	1d1a      	adds	r2, r3, #4
 80022b4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80022b8:	ed93 7a00 	vldr	s14, [r3]
 80022bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022c0:	edc3 7a00 	vstr	s15, [r3]
 80022c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022c8:	3301      	adds	r3, #1
 80022ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80022ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	dbdf      	blt.n	8002298 <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	885b      	ldrh	r3, [r3, #2]
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80022f8:	fb02 f303 	mul.w	r3, r2, r3
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002302:	4413      	add	r3, r2
 8002304:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800230c:	fb02 f303 	mul.w	r3, r2, r3
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002316:	4413      	add	r3, r2
 8002318:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800231c:	2300      	movs	r3, #0
 800231e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002322:	e01a      	b.n	800235a <arm_mat_inverse_f32+0x4f6>
 8002324:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002328:	1d1a      	adds	r2, r3, #4
 800232a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800232e:	ed93 7a00 	vldr	s14, [r3]
 8002332:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800233a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800233e:	1d1a      	adds	r2, r3, #4
 8002340:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002344:	ed93 7a00 	vldr	s14, [r3]
 8002348:	ee77 7a67 	vsub.f32	s15, s14, s15
 800234c:	edc3 7a00 	vstr	s15, [r3]
 8002350:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002354:	3301      	adds	r3, #1
 8002356:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800235a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	429a      	cmp	r2, r3
 8002362:	dbdf      	blt.n	8002324 <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 8002364:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002368:	3301      	adds	r3, #1
 800236a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800236e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002374:	429a      	cmp	r2, r3
 8002376:	f4ff af4b 	bcc.w	8002210 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800237a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800237c:	3301      	adds	r3, #1
 800237e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002382:	e092      	b.n	80024aa <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	885b      	ldrh	r3, [r3, #2]
 800238c:	4619      	mov	r1, r3
 800238e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002392:	fb03 f101 	mul.w	r1, r3, r1
 8002396:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800239a:	440b      	add	r3, r1
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           pivot = *pTmp;
 80023a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	677b      	str	r3, [r7, #116]	; 0x74
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	885b      	ldrh	r3, [r3, #2]
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
 80023c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	623b      	str	r3, [r7, #32]
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80023d0:	fb03 f202 	mul.w	r2, r3, r2
 80023d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023d8:	4413      	add	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80023de:	4413      	add	r3, r2
 80023e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80023e6:	fb03 f202 	mul.w	r2, r3, r2
 80023ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023ee:	4413      	add	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80023f4:	4413      	add	r3, r2
 80023f6:	677b      	str	r3, [r7, #116]	; 0x74
 80023f8:	2300      	movs	r3, #0
 80023fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80023fc:	e014      	b.n	8002428 <arm_mat_inverse_f32+0x5c4>
 80023fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002400:	1d1a      	adds	r2, r3, #4
 8002402:	677a      	str	r2, [r7, #116]	; 0x74
 8002404:	ed93 7a00 	vldr	s14, [r3]
 8002408:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800240c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002410:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002412:	1d1a      	adds	r2, r3, #4
 8002414:	67ba      	str	r2, [r7, #120]	; 0x78
 8002416:	ed93 7a00 	vldr	s14, [r3]
 800241a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800241e:	edc3 7a00 	vstr	s15, [r3]
 8002422:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002424:	3301      	adds	r3, #1
 8002426:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002428:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800242a:	6a3b      	ldr	r3, [r7, #32]
 800242c:	429a      	cmp	r2, r3
 800242e:	dbe6      	blt.n	80023fe <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	66bb      	str	r3, [r7, #104]	; 0x68
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	885b      	ldrh	r3, [r3, #2]
 8002440:	61fb      	str	r3, [r7, #28]
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	61bb      	str	r3, [r7, #24]
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800244c:	fb02 f303 	mul.w	r3, r2, r3
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002454:	4413      	add	r3, r2
 8002456:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800245c:	fb02 f303 	mul.w	r3, r2, r3
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002464:	4413      	add	r3, r2
 8002466:	66bb      	str	r3, [r7, #104]	; 0x68
 8002468:	2300      	movs	r3, #0
 800246a:	673b      	str	r3, [r7, #112]	; 0x70
 800246c:	e014      	b.n	8002498 <arm_mat_inverse_f32+0x634>
 800246e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002470:	1d1a      	adds	r2, r3, #4
 8002472:	66ba      	str	r2, [r7, #104]	; 0x68
 8002474:	ed93 7a00 	vldr	s14, [r3]
 8002478:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800247c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002482:	1d1a      	adds	r2, r3, #4
 8002484:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002486:	ed93 7a00 	vldr	s14, [r3]
 800248a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800248e:	edc3 7a00 	vstr	s15, [r3]
 8002492:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002494:	3301      	adds	r3, #1
 8002496:	673b      	str	r3, [r7, #112]	; 0x70
 8002498:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	429a      	cmp	r2, r3
 800249e:	dbe6      	blt.n	800246e <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 80024a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80024a4:	3301      	adds	r3, #1
 80024a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80024aa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80024ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024b0:	429a      	cmp	r2, r3
 80024b2:	f4ff af67 	bcc.w	8002384 <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 80024b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024ba:	3301      	adds	r3, #1
 80024bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80024c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80024c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024c6:	429a      	cmp	r2, r3
 80024c8:	f4ff ad32 	bcc.w	8001f30 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80024cc:	2300      	movs	r3, #0
 80024ce:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 80024d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d033      	beq.n	8002542 <arm_mat_inverse_f32+0x6de>
 80024da:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80024de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80024e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e6:	d12c      	bne.n	8002542 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	667b      	str	r3, [r7, #100]	; 0x64
      for (i = 0; i < numRows * numCols; i++)
 80024ee:	2300      	movs	r3, #0
 80024f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80024f4:	e010      	b.n	8002518 <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 80024f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80024fe:	4413      	add	r3, r2
 8002500:	edd3 7a00 	vldr	s15, [r3]
 8002504:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250c:	d10d      	bne.n	800252a <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 800250e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002512:	3301      	adds	r3, #1
 8002514:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002518:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800251a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800251c:	fb02 f303 	mul.w	r3, r2, r3
 8002520:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8002524:	429a      	cmp	r2, r3
 8002526:	d3e6      	bcc.n	80024f6 <arm_mat_inverse_f32+0x692>
 8002528:	e000      	b.n	800252c <arm_mat_inverse_f32+0x6c8>
            break;
 800252a:	bf00      	nop
      }

      if (i == numRows * numCols)
 800252c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800252e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002530:	fb02 f303 	mul.w	r3, r2, r3
 8002534:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8002538:	429a      	cmp	r2, r3
 800253a:	d102      	bne.n	8002542 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 800253c:	23fb      	movs	r3, #251	; 0xfb
 800253e:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
    }
  }

  /* Return to application */
  return (status);
 8002542:	f997 30c3 	ldrsb.w	r3, [r7, #195]	; 0xc3
}
 8002546:	4618      	mov	r0, r3
 8002548:	37ec      	adds	r7, #236	; 0xec
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8002552:	b480      	push	{r7}
 8002554:	b093      	sub	sp, #76	; 0x4c
 8002556:	af00      	add	r7, sp, #0
 8002558:	60f8      	str	r0, [r7, #12]
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	643b      	str	r3, [r7, #64]	; 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	885b      	ldrh	r3, [r3, #2]
 8002586:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	885b      	ldrh	r3, [r3, #2]
 800258c:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800258e:	2300      	movs	r3, #0
 8002590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002592:	8b7b      	ldrh	r3, [r7, #26]
 8002594:	62bb      	str	r3, [r7, #40]	; 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 8002596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	69fa      	ldr	r2, [r7, #28]
 800259c:	4413      	add	r3, r2
 800259e:	63bb      	str	r3, [r7, #56]	; 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 80025a0:	8b3b      	ldrh	r3, [r7, #24]
 80025a2:	633b      	str	r3, [r7, #48]	; 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	643b      	str	r3, [r7, #64]	; 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	637b      	str	r3, [r7, #52]	; 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 80025b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025b2:	647b      	str	r3, [r7, #68]	; 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 80025b4:	8afb      	ldrh	r3, [r7, #22]
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 80025b8:	e017      	b.n	80025ea <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 80025ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025bc:	1d1a      	adds	r2, r3, #4
 80025be:	647a      	str	r2, [r7, #68]	; 0x44
 80025c0:	ed93 7a00 	vldr	s14, [r3]
 80025c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025c6:	edd3 7a00 	vldr	s15, [r3]
 80025ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ce:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80025d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025d6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
          pIn2 += numColsB;
 80025da:	8b3b      	ldrh	r3, [r7, #24]
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80025e0:	4413      	add	r3, r2
 80025e2:	643b      	str	r3, [r7, #64]	; 0x40

          /* Decrement loop counter */
          colCnt--;
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	3b01      	subs	r3, #1
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
        while (colCnt > 0U)
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1e4      	bne.n	80025ba <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 80025f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f2:	1d1a      	adds	r2, r3, #4
 80025f4:	63ba      	str	r2, [r7, #56]	; 0x38
 80025f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025f8:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 80025fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fc:	3b01      	subs	r3, #1
 80025fe:	633b      	str	r3, [r7, #48]	; 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 8002600:	8b3a      	ldrh	r2, [r7, #24]
 8002602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	6a3a      	ldr	r2, [r7, #32]
 800260a:	4413      	add	r3, r2
 800260c:	643b      	str	r3, [r7, #64]	; 0x40

      } while (col > 0U);
 800260e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1ca      	bne.n	80025aa <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 8002614:	8b3b      	ldrh	r3, [r7, #24]
 8002616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002618:	4413      	add	r3, r2
 800261a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pInA = pInA + numColsA;
 800261c:	8afb      	ldrh	r3, [r7, #22]
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002622:	4413      	add	r3, r2
 8002624:	63fb      	str	r3, [r7, #60]	; 0x3c

      /* Decrement row loop counter */
      row--;
 8002626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002628:	3b01      	subs	r3, #1
 800262a:	62bb      	str	r3, [r7, #40]	; 0x28

    } while (row > 0U);
 800262c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1b1      	bne.n	8002596 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8002632:	2300      	movs	r3, #0
 8002634:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 8002636:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800263a:	4618      	mov	r0, r3
 800263c:	374c      	adds	r7, #76	; 0x4c
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 8002646:	b480      	push	{r7}
 8002648:	b08b      	sub	sp, #44	; 0x2c
 800264a:	af00      	add	r7, sp, #0
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	ed87 0a02 	vstr	s0, [r7, #8]
 8002652:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	461a      	mov	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	885b      	ldrh	r3, [r3, #2]
 800266a:	fb02 f303 	mul.w	r3, r2, r3
 800266e:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8002674:	e010      	b.n	8002698 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	1d1a      	adds	r2, r3, #4
 800267a:	627a      	str	r2, [r7, #36]	; 0x24
 800267c:	ed93 7a00 	vldr	s14, [r3]
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	1d1a      	adds	r2, r3, #4
 8002684:	623a      	str	r2, [r7, #32]
 8002686:	edd7 7a02 	vldr	s15, [r7, #8]
 800268a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800268e:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3b01      	subs	r3, #1
 8002696:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1eb      	bne.n	8002676 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800269e:	2300      	movs	r3, #0
 80026a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 80026a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	372c      	adds	r7, #44	; 0x2c
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b08b      	sub	sp, #44	; 0x2c
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	60f8      	str	r0, [r7, #12]
 80026ba:	60b9      	str	r1, [r7, #8]
 80026bc:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	461a      	mov	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	885b      	ldrh	r3, [r3, #2]
 80026da:	fb02 f303 	mul.w	r3, r2, r3
 80026de:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 80026e4:	e013      	b.n	800270e <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	1d1a      	adds	r2, r3, #4
 80026ea:	627a      	str	r2, [r7, #36]	; 0x24
 80026ec:	ed93 7a00 	vldr	s14, [r3]
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	1d1a      	adds	r2, r3, #4
 80026f4:	623a      	str	r2, [r7, #32]
 80026f6:	edd3 7a00 	vldr	s15, [r3]
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	1d1a      	adds	r2, r3, #4
 80026fe:	61fa      	str	r2, [r7, #28]
 8002700:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002704:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	3b01      	subs	r3, #1
 800270c:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1e8      	bne.n	80026e6 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8002714:	2300      	movs	r3, #0
 8002716:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8002718:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800271c:	4618      	mov	r0, r3
 800271e:	372c      	adds	r7, #44	; 0x2c
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8002728:	b480      	push	{r7}
 800272a:	b08b      	sub	sp, #44	; 0x2c
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	885b      	ldrh	r3, [r3, #2]
 8002748:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800274a:	89fb      	ldrh	r3, [r7, #14]
 800274c:	61bb      	str	r3, [r7, #24]
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	4413      	add	r3, r2
 800275a:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800275c:	89bb      	ldrh	r3, [r7, #12]
 800275e:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8002760:	e00d      	b.n	800277e <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	1d1a      	adds	r2, r3, #4
 8002766:	627a      	str	r2, [r7, #36]	; 0x24
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800276e:	89fb      	ldrh	r3, [r7, #14]
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	6a3a      	ldr	r2, [r7, #32]
 8002774:	4413      	add	r3, r2
 8002776:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	3b01      	subs	r3, #1
 800277c:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1ee      	bne.n	8002762 <arm_mat_trans_f32+0x3a>
      }

      i++;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	3301      	adds	r3, #1
 8002788:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	3b01      	subs	r3, #1
 800278e:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1dd      	bne.n	8002752 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8002796:	2300      	movs	r3, #0
 8002798:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800279a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	372c      	adds	r7, #44	; 0x2c
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
	...

080027ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027b0:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <HAL_Init+0x40>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a0d      	ldr	r2, [pc, #52]	; (80027ec <HAL_Init+0x40>)
 80027b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_Init+0x40>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a0a      	ldr	r2, [pc, #40]	; (80027ec <HAL_Init+0x40>)
 80027c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027c8:	4b08      	ldr	r3, [pc, #32]	; (80027ec <HAL_Init+0x40>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a07      	ldr	r2, [pc, #28]	; (80027ec <HAL_Init+0x40>)
 80027ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027d4:	2003      	movs	r0, #3
 80027d6:	f000 f90d 	bl	80029f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027da:	2000      	movs	r0, #0
 80027dc:	f000 f808 	bl	80027f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027e0:	f7ff f93e 	bl	8001a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40023c00 	.word	0x40023c00

080027f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027f8:	4b12      	ldr	r3, [pc, #72]	; (8002844 <HAL_InitTick+0x54>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b12      	ldr	r3, [pc, #72]	; (8002848 <HAL_InitTick+0x58>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	4619      	mov	r1, r3
 8002802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002806:	fbb3 f3f1 	udiv	r3, r3, r1
 800280a:	fbb2 f3f3 	udiv	r3, r2, r3
 800280e:	4618      	mov	r0, r3
 8002810:	f000 f917 	bl	8002a42 <HAL_SYSTICK_Config>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e00e      	b.n	800283c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b0f      	cmp	r3, #15
 8002822:	d80a      	bhi.n	800283a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002824:	2200      	movs	r2, #0
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	f04f 30ff 	mov.w	r0, #4294967295
 800282c:	f000 f8ed 	bl	8002a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002830:	4a06      	ldr	r2, [pc, #24]	; (800284c <HAL_InitTick+0x5c>)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	e000      	b.n	800283c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
}
 800283c:	4618      	mov	r0, r3
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20000000 	.word	0x20000000
 8002848:	20000008 	.word	0x20000008
 800284c:	20000004 	.word	0x20000004

08002850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_IncTick+0x20>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	4b06      	ldr	r3, [pc, #24]	; (8002874 <HAL_IncTick+0x24>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4413      	add	r3, r2
 8002860:	4a04      	ldr	r2, [pc, #16]	; (8002874 <HAL_IncTick+0x24>)
 8002862:	6013      	str	r3, [r2, #0]
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	20000008 	.word	0x20000008
 8002874:	200003f0 	.word	0x200003f0

08002878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return uwTick;
 800287c:	4b03      	ldr	r3, [pc, #12]	; (800288c <HAL_GetTick+0x14>)
 800287e:	681b      	ldr	r3, [r3, #0]
}
 8002880:	4618      	mov	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	200003f0 	.word	0x200003f0

08002890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a0:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <__NVIC_SetPriorityGrouping+0x44>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028ac:	4013      	ands	r3, r2
 80028ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028c2:	4a04      	ldr	r2, [pc, #16]	; (80028d4 <__NVIC_SetPriorityGrouping+0x44>)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	60d3      	str	r3, [r2, #12]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028dc:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <__NVIC_GetPriorityGrouping+0x18>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	0a1b      	lsrs	r3, r3, #8
 80028e2:	f003 0307 	and.w	r3, r3, #7
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	6039      	str	r1, [r7, #0]
 80028fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002904:	2b00      	cmp	r3, #0
 8002906:	db0a      	blt.n	800291e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	b2da      	uxtb	r2, r3
 800290c:	490c      	ldr	r1, [pc, #48]	; (8002940 <__NVIC_SetPriority+0x4c>)
 800290e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002912:	0112      	lsls	r2, r2, #4
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	440b      	add	r3, r1
 8002918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800291c:	e00a      	b.n	8002934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	b2da      	uxtb	r2, r3
 8002922:	4908      	ldr	r1, [pc, #32]	; (8002944 <__NVIC_SetPriority+0x50>)
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	3b04      	subs	r3, #4
 800292c:	0112      	lsls	r2, r2, #4
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	440b      	add	r3, r1
 8002932:	761a      	strb	r2, [r3, #24]
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	e000e100 	.word	0xe000e100
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002948:	b480      	push	{r7}
 800294a:	b089      	sub	sp, #36	; 0x24
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f1c3 0307 	rsb	r3, r3, #7
 8002962:	2b04      	cmp	r3, #4
 8002964:	bf28      	it	cs
 8002966:	2304      	movcs	r3, #4
 8002968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3304      	adds	r3, #4
 800296e:	2b06      	cmp	r3, #6
 8002970:	d902      	bls.n	8002978 <NVIC_EncodePriority+0x30>
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	3b03      	subs	r3, #3
 8002976:	e000      	b.n	800297a <NVIC_EncodePriority+0x32>
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800297c:	f04f 32ff 	mov.w	r2, #4294967295
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43da      	mvns	r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	401a      	ands	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002990:	f04f 31ff 	mov.w	r1, #4294967295
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	fa01 f303 	lsl.w	r3, r1, r3
 800299a:	43d9      	mvns	r1, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a0:	4313      	orrs	r3, r2
         );
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3724      	adds	r7, #36	; 0x24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
	...

080029b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029c0:	d301      	bcc.n	80029c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029c2:	2301      	movs	r3, #1
 80029c4:	e00f      	b.n	80029e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029c6:	4a0a      	ldr	r2, [pc, #40]	; (80029f0 <SysTick_Config+0x40>)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ce:	210f      	movs	r1, #15
 80029d0:	f04f 30ff 	mov.w	r0, #4294967295
 80029d4:	f7ff ff8e 	bl	80028f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029d8:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <SysTick_Config+0x40>)
 80029da:	2200      	movs	r2, #0
 80029dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029de:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <SysTick_Config+0x40>)
 80029e0:	2207      	movs	r2, #7
 80029e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	e000e010 	.word	0xe000e010

080029f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7ff ff47 	bl	8002890 <__NVIC_SetPriorityGrouping>
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b086      	sub	sp, #24
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	4603      	mov	r3, r0
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
 8002a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a1c:	f7ff ff5c 	bl	80028d8 <__NVIC_GetPriorityGrouping>
 8002a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	68b9      	ldr	r1, [r7, #8]
 8002a26:	6978      	ldr	r0, [r7, #20]
 8002a28:	f7ff ff8e 	bl	8002948 <NVIC_EncodePriority>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a32:	4611      	mov	r1, r2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff ff5d 	bl	80028f4 <__NVIC_SetPriority>
}
 8002a3a:	bf00      	nop
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7ff ffb0 	bl	80029b0 <SysTick_Config>
 8002a50:	4603      	mov	r3, r0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b089      	sub	sp, #36	; 0x24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a72:	2300      	movs	r3, #0
 8002a74:	61fb      	str	r3, [r7, #28]
 8002a76:	e159      	b.n	8002d2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a78:	2201      	movs	r2, #1
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	f040 8148 	bne.w	8002d26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d005      	beq.n	8002aae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d130      	bne.n	8002b10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	2203      	movs	r2, #3
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	68da      	ldr	r2, [r3, #12]
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	091b      	lsrs	r3, r3, #4
 8002afa:	f003 0201 	and.w	r2, r3, #1
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d017      	beq.n	8002b4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	2203      	movs	r2, #3
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4013      	ands	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d123      	bne.n	8002ba0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	08da      	lsrs	r2, r3, #3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3208      	adds	r2, #8
 8002b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	220f      	movs	r2, #15
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	691a      	ldr	r2, [r3, #16]
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	08da      	lsrs	r2, r3, #3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3208      	adds	r2, #8
 8002b9a:	69b9      	ldr	r1, [r7, #24]
 8002b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	2203      	movs	r2, #3
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 0203 	and.w	r2, r3, #3
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 80a2 	beq.w	8002d26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	4b57      	ldr	r3, [pc, #348]	; (8002d44 <HAL_GPIO_Init+0x2e8>)
 8002be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bea:	4a56      	ldr	r2, [pc, #344]	; (8002d44 <HAL_GPIO_Init+0x2e8>)
 8002bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bf2:	4b54      	ldr	r3, [pc, #336]	; (8002d44 <HAL_GPIO_Init+0x2e8>)
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bfe:	4a52      	ldr	r2, [pc, #328]	; (8002d48 <HAL_GPIO_Init+0x2ec>)
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	089b      	lsrs	r3, r3, #2
 8002c04:	3302      	adds	r3, #2
 8002c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	220f      	movs	r2, #15
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a49      	ldr	r2, [pc, #292]	; (8002d4c <HAL_GPIO_Init+0x2f0>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d019      	beq.n	8002c5e <HAL_GPIO_Init+0x202>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a48      	ldr	r2, [pc, #288]	; (8002d50 <HAL_GPIO_Init+0x2f4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d013      	beq.n	8002c5a <HAL_GPIO_Init+0x1fe>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a47      	ldr	r2, [pc, #284]	; (8002d54 <HAL_GPIO_Init+0x2f8>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d00d      	beq.n	8002c56 <HAL_GPIO_Init+0x1fa>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a46      	ldr	r2, [pc, #280]	; (8002d58 <HAL_GPIO_Init+0x2fc>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d007      	beq.n	8002c52 <HAL_GPIO_Init+0x1f6>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a45      	ldr	r2, [pc, #276]	; (8002d5c <HAL_GPIO_Init+0x300>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d101      	bne.n	8002c4e <HAL_GPIO_Init+0x1f2>
 8002c4a:	2304      	movs	r3, #4
 8002c4c:	e008      	b.n	8002c60 <HAL_GPIO_Init+0x204>
 8002c4e:	2307      	movs	r3, #7
 8002c50:	e006      	b.n	8002c60 <HAL_GPIO_Init+0x204>
 8002c52:	2303      	movs	r3, #3
 8002c54:	e004      	b.n	8002c60 <HAL_GPIO_Init+0x204>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e002      	b.n	8002c60 <HAL_GPIO_Init+0x204>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <HAL_GPIO_Init+0x204>
 8002c5e:	2300      	movs	r3, #0
 8002c60:	69fa      	ldr	r2, [r7, #28]
 8002c62:	f002 0203 	and.w	r2, r2, #3
 8002c66:	0092      	lsls	r2, r2, #2
 8002c68:	4093      	lsls	r3, r2
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c70:	4935      	ldr	r1, [pc, #212]	; (8002d48 <HAL_GPIO_Init+0x2ec>)
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	089b      	lsrs	r3, r3, #2
 8002c76:	3302      	adds	r3, #2
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c7e:	4b38      	ldr	r3, [pc, #224]	; (8002d60 <HAL_GPIO_Init+0x304>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	43db      	mvns	r3, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ca2:	4a2f      	ldr	r2, [pc, #188]	; (8002d60 <HAL_GPIO_Init+0x304>)
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ca8:	4b2d      	ldr	r3, [pc, #180]	; (8002d60 <HAL_GPIO_Init+0x304>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ccc:	4a24      	ldr	r2, [pc, #144]	; (8002d60 <HAL_GPIO_Init+0x304>)
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cd2:	4b23      	ldr	r3, [pc, #140]	; (8002d60 <HAL_GPIO_Init+0x304>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cf6:	4a1a      	ldr	r2, [pc, #104]	; (8002d60 <HAL_GPIO_Init+0x304>)
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cfc:	4b18      	ldr	r3, [pc, #96]	; (8002d60 <HAL_GPIO_Init+0x304>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	43db      	mvns	r3, r3
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d20:	4a0f      	ldr	r2, [pc, #60]	; (8002d60 <HAL_GPIO_Init+0x304>)
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	61fb      	str	r3, [r7, #28]
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	2b0f      	cmp	r3, #15
 8002d30:	f67f aea2 	bls.w	8002a78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d34:	bf00      	nop
 8002d36:	bf00      	nop
 8002d38:	3724      	adds	r7, #36	; 0x24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40013800 	.word	0x40013800
 8002d4c:	40020000 	.word	0x40020000
 8002d50:	40020400 	.word	0x40020400
 8002d54:	40020800 	.word	0x40020800
 8002d58:	40020c00 	.word	0x40020c00
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	40013c00 	.word	0x40013c00

08002d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	807b      	strh	r3, [r7, #2]
 8002d70:	4613      	mov	r3, r2
 8002d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d74:	787b      	ldrb	r3, [r7, #1]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d7a:	887a      	ldrh	r2, [r7, #2]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d80:	e003      	b.n	8002d8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d82:	887b      	ldrh	r3, [r7, #2]
 8002d84:	041a      	lsls	r2, r3, #16
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	619a      	str	r2, [r3, #24]
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
	...

08002d98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e267      	b.n	800327a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d075      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002db6:	4b88      	ldr	r3, [pc, #544]	; (8002fd8 <HAL_RCC_OscConfig+0x240>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 030c 	and.w	r3, r3, #12
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d00c      	beq.n	8002ddc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dc2:	4b85      	ldr	r3, [pc, #532]	; (8002fd8 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d112      	bne.n	8002df4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dce:	4b82      	ldr	r3, [pc, #520]	; (8002fd8 <HAL_RCC_OscConfig+0x240>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dda:	d10b      	bne.n	8002df4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ddc:	4b7e      	ldr	r3, [pc, #504]	; (8002fd8 <HAL_RCC_OscConfig+0x240>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d05b      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x108>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d157      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e242      	b.n	800327a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dfc:	d106      	bne.n	8002e0c <HAL_RCC_OscConfig+0x74>
 8002dfe:	4b76      	ldr	r3, [pc, #472]	; (8002fd8 <HAL_RCC_OscConfig+0x240>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a75      	ldr	r2, [pc, #468]	; (8002fd8 <HAL_RCC_OscConfig+0x240>)
 8002e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	e01d      	b.n	8002e48 <HAL_RCC_OscConfig+0xb0>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e14:	d10c      	bne.n	8002e30 <HAL_RCC_OscConfig+0x98>
 8002e16:	4b70      	ldr	r3, [pc, #448]	; (8002fd8 <HAL_RCC_OscConfig+0x240>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a6f      	ldr	r2, [pc, #444]	; (8002fd8 <HAL_RCC_OscConfig+0x240>)
 8002e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	4b6d      	ldr	r3, [pc, #436]	; (8002fd8 <HAL_RCC_OscConfig+0x240>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a6c      	ldr	r2, [pc, #432]	; (8002fd8 <HAL_RCC_OscConfig+0x240>)
 8002e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	e00b      	b.n	8002e48 <HAL_RCC_OscConfig+0xb0>
 8002e30:	4b69      	ldr	r3, [pc, #420]	; (8002fd8 <HAL_RCC_OscConfig+0x240>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a68      	ldr	r2, [pc, #416]	; (8002fd8 <HAL_RCC_OscConfig+0x240>)
 8002e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	4b66      	ldr	r3, [pc, #408]	; (8002fd8 <HAL_RCC_OscConfig+0x240>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a65      	ldr	r2, [pc, #404]	; (8002fd8 <HAL_RCC_OscConfig+0x240>)
 8002e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d013      	beq.n	8002e78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e50:	f7ff fd12 	bl	8002878 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e58:	f7ff fd0e 	bl	8002878 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b64      	cmp	r3, #100	; 0x64
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e207      	b.n	800327a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6a:	4b5b      	ldr	r3, [pc, #364]	; (8002fd8 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f0      	beq.n	8002e58 <HAL_RCC_OscConfig+0xc0>
 8002e76:	e014      	b.n	8002ea2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e78:	f7ff fcfe 	bl	8002878 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e80:	f7ff fcfa 	bl	8002878 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b64      	cmp	r3, #100	; 0x64
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e1f3      	b.n	800327a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e92:	4b51      	ldr	r3, [pc, #324]	; (8002fd8 <HAL_RCC_OscConfig+0x240>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f0      	bne.n	8002e80 <HAL_RCC_OscConfig+0xe8>
 8002e9e:	e000      	b.n	8002ea2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d063      	beq.n	8002f76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eae:	4b4a      	ldr	r3, [pc, #296]	; (8002fd8 <HAL_RCC_OscConfig+0x240>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 030c 	and.w	r3, r3, #12
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00b      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eba:	4b47      	ldr	r3, [pc, #284]	; (8002fd8 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ec2:	2b08      	cmp	r3, #8
 8002ec4:	d11c      	bne.n	8002f00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ec6:	4b44      	ldr	r3, [pc, #272]	; (8002fd8 <HAL_RCC_OscConfig+0x240>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d116      	bne.n	8002f00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ed2:	4b41      	ldr	r3, [pc, #260]	; (8002fd8 <HAL_RCC_OscConfig+0x240>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d005      	beq.n	8002eea <HAL_RCC_OscConfig+0x152>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d001      	beq.n	8002eea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e1c7      	b.n	800327a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eea:	4b3b      	ldr	r3, [pc, #236]	; (8002fd8 <HAL_RCC_OscConfig+0x240>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	4937      	ldr	r1, [pc, #220]	; (8002fd8 <HAL_RCC_OscConfig+0x240>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002efe:	e03a      	b.n	8002f76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d020      	beq.n	8002f4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f08:	4b34      	ldr	r3, [pc, #208]	; (8002fdc <HAL_RCC_OscConfig+0x244>)
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0e:	f7ff fcb3 	bl	8002878 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f16:	f7ff fcaf 	bl	8002878 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e1a8      	b.n	800327a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f28:	4b2b      	ldr	r3, [pc, #172]	; (8002fd8 <HAL_RCC_OscConfig+0x240>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0f0      	beq.n	8002f16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f34:	4b28      	ldr	r3, [pc, #160]	; (8002fd8 <HAL_RCC_OscConfig+0x240>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	4925      	ldr	r1, [pc, #148]	; (8002fd8 <HAL_RCC_OscConfig+0x240>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	600b      	str	r3, [r1, #0]
 8002f48:	e015      	b.n	8002f76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f4a:	4b24      	ldr	r3, [pc, #144]	; (8002fdc <HAL_RCC_OscConfig+0x244>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f50:	f7ff fc92 	bl	8002878 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f58:	f7ff fc8e 	bl	8002878 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e187      	b.n	800327a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f6a:	4b1b      	ldr	r3, [pc, #108]	; (8002fd8 <HAL_RCC_OscConfig+0x240>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0308 	and.w	r3, r3, #8
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d036      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d016      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f8a:	4b15      	ldr	r3, [pc, #84]	; (8002fe0 <HAL_RCC_OscConfig+0x248>)
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f90:	f7ff fc72 	bl	8002878 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f98:	f7ff fc6e 	bl	8002878 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e167      	b.n	800327a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002faa:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <HAL_RCC_OscConfig+0x240>)
 8002fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0f0      	beq.n	8002f98 <HAL_RCC_OscConfig+0x200>
 8002fb6:	e01b      	b.n	8002ff0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fb8:	4b09      	ldr	r3, [pc, #36]	; (8002fe0 <HAL_RCC_OscConfig+0x248>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fbe:	f7ff fc5b 	bl	8002878 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc4:	e00e      	b.n	8002fe4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fc6:	f7ff fc57 	bl	8002878 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d907      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e150      	b.n	800327a <HAL_RCC_OscConfig+0x4e2>
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	42470000 	.word	0x42470000
 8002fe0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fe4:	4b88      	ldr	r3, [pc, #544]	; (8003208 <HAL_RCC_OscConfig+0x470>)
 8002fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1ea      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 8097 	beq.w	800312c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ffe:	2300      	movs	r3, #0
 8003000:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003002:	4b81      	ldr	r3, [pc, #516]	; (8003208 <HAL_RCC_OscConfig+0x470>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10f      	bne.n	800302e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	60bb      	str	r3, [r7, #8]
 8003012:	4b7d      	ldr	r3, [pc, #500]	; (8003208 <HAL_RCC_OscConfig+0x470>)
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	4a7c      	ldr	r2, [pc, #496]	; (8003208 <HAL_RCC_OscConfig+0x470>)
 8003018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800301c:	6413      	str	r3, [r2, #64]	; 0x40
 800301e:	4b7a      	ldr	r3, [pc, #488]	; (8003208 <HAL_RCC_OscConfig+0x470>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003026:	60bb      	str	r3, [r7, #8]
 8003028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800302a:	2301      	movs	r3, #1
 800302c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302e:	4b77      	ldr	r3, [pc, #476]	; (800320c <HAL_RCC_OscConfig+0x474>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003036:	2b00      	cmp	r3, #0
 8003038:	d118      	bne.n	800306c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800303a:	4b74      	ldr	r3, [pc, #464]	; (800320c <HAL_RCC_OscConfig+0x474>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a73      	ldr	r2, [pc, #460]	; (800320c <HAL_RCC_OscConfig+0x474>)
 8003040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003046:	f7ff fc17 	bl	8002878 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800304e:	f7ff fc13 	bl	8002878 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e10c      	b.n	800327a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003060:	4b6a      	ldr	r3, [pc, #424]	; (800320c <HAL_RCC_OscConfig+0x474>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0f0      	beq.n	800304e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d106      	bne.n	8003082 <HAL_RCC_OscConfig+0x2ea>
 8003074:	4b64      	ldr	r3, [pc, #400]	; (8003208 <HAL_RCC_OscConfig+0x470>)
 8003076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003078:	4a63      	ldr	r2, [pc, #396]	; (8003208 <HAL_RCC_OscConfig+0x470>)
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	6713      	str	r3, [r2, #112]	; 0x70
 8003080:	e01c      	b.n	80030bc <HAL_RCC_OscConfig+0x324>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	2b05      	cmp	r3, #5
 8003088:	d10c      	bne.n	80030a4 <HAL_RCC_OscConfig+0x30c>
 800308a:	4b5f      	ldr	r3, [pc, #380]	; (8003208 <HAL_RCC_OscConfig+0x470>)
 800308c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308e:	4a5e      	ldr	r2, [pc, #376]	; (8003208 <HAL_RCC_OscConfig+0x470>)
 8003090:	f043 0304 	orr.w	r3, r3, #4
 8003094:	6713      	str	r3, [r2, #112]	; 0x70
 8003096:	4b5c      	ldr	r3, [pc, #368]	; (8003208 <HAL_RCC_OscConfig+0x470>)
 8003098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309a:	4a5b      	ldr	r2, [pc, #364]	; (8003208 <HAL_RCC_OscConfig+0x470>)
 800309c:	f043 0301 	orr.w	r3, r3, #1
 80030a0:	6713      	str	r3, [r2, #112]	; 0x70
 80030a2:	e00b      	b.n	80030bc <HAL_RCC_OscConfig+0x324>
 80030a4:	4b58      	ldr	r3, [pc, #352]	; (8003208 <HAL_RCC_OscConfig+0x470>)
 80030a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a8:	4a57      	ldr	r2, [pc, #348]	; (8003208 <HAL_RCC_OscConfig+0x470>)
 80030aa:	f023 0301 	bic.w	r3, r3, #1
 80030ae:	6713      	str	r3, [r2, #112]	; 0x70
 80030b0:	4b55      	ldr	r3, [pc, #340]	; (8003208 <HAL_RCC_OscConfig+0x470>)
 80030b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b4:	4a54      	ldr	r2, [pc, #336]	; (8003208 <HAL_RCC_OscConfig+0x470>)
 80030b6:	f023 0304 	bic.w	r3, r3, #4
 80030ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d015      	beq.n	80030f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c4:	f7ff fbd8 	bl	8002878 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ca:	e00a      	b.n	80030e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030cc:	f7ff fbd4 	bl	8002878 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030da:	4293      	cmp	r3, r2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e0cb      	b.n	800327a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e2:	4b49      	ldr	r3, [pc, #292]	; (8003208 <HAL_RCC_OscConfig+0x470>)
 80030e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0ee      	beq.n	80030cc <HAL_RCC_OscConfig+0x334>
 80030ee:	e014      	b.n	800311a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f0:	f7ff fbc2 	bl	8002878 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f6:	e00a      	b.n	800310e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030f8:	f7ff fbbe 	bl	8002878 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	f241 3288 	movw	r2, #5000	; 0x1388
 8003106:	4293      	cmp	r3, r2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e0b5      	b.n	800327a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800310e:	4b3e      	ldr	r3, [pc, #248]	; (8003208 <HAL_RCC_OscConfig+0x470>)
 8003110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1ee      	bne.n	80030f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800311a:	7dfb      	ldrb	r3, [r7, #23]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d105      	bne.n	800312c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003120:	4b39      	ldr	r3, [pc, #228]	; (8003208 <HAL_RCC_OscConfig+0x470>)
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	4a38      	ldr	r2, [pc, #224]	; (8003208 <HAL_RCC_OscConfig+0x470>)
 8003126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800312a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 80a1 	beq.w	8003278 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003136:	4b34      	ldr	r3, [pc, #208]	; (8003208 <HAL_RCC_OscConfig+0x470>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 030c 	and.w	r3, r3, #12
 800313e:	2b08      	cmp	r3, #8
 8003140:	d05c      	beq.n	80031fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d141      	bne.n	80031ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800314a:	4b31      	ldr	r3, [pc, #196]	; (8003210 <HAL_RCC_OscConfig+0x478>)
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003150:	f7ff fb92 	bl	8002878 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003158:	f7ff fb8e 	bl	8002878 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e087      	b.n	800327a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800316a:	4b27      	ldr	r3, [pc, #156]	; (8003208 <HAL_RCC_OscConfig+0x470>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1f0      	bne.n	8003158 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69da      	ldr	r2, [r3, #28]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	019b      	lsls	r3, r3, #6
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318c:	085b      	lsrs	r3, r3, #1
 800318e:	3b01      	subs	r3, #1
 8003190:	041b      	lsls	r3, r3, #16
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003198:	061b      	lsls	r3, r3, #24
 800319a:	491b      	ldr	r1, [pc, #108]	; (8003208 <HAL_RCC_OscConfig+0x470>)
 800319c:	4313      	orrs	r3, r2
 800319e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031a0:	4b1b      	ldr	r3, [pc, #108]	; (8003210 <HAL_RCC_OscConfig+0x478>)
 80031a2:	2201      	movs	r2, #1
 80031a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a6:	f7ff fb67 	bl	8002878 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ae:	f7ff fb63 	bl	8002878 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e05c      	b.n	800327a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c0:	4b11      	ldr	r3, [pc, #68]	; (8003208 <HAL_RCC_OscConfig+0x470>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0f0      	beq.n	80031ae <HAL_RCC_OscConfig+0x416>
 80031cc:	e054      	b.n	8003278 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ce:	4b10      	ldr	r3, [pc, #64]	; (8003210 <HAL_RCC_OscConfig+0x478>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d4:	f7ff fb50 	bl	8002878 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031dc:	f7ff fb4c 	bl	8002878 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e045      	b.n	800327a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ee:	4b06      	ldr	r3, [pc, #24]	; (8003208 <HAL_RCC_OscConfig+0x470>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0x444>
 80031fa:	e03d      	b.n	8003278 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d107      	bne.n	8003214 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e038      	b.n	800327a <HAL_RCC_OscConfig+0x4e2>
 8003208:	40023800 	.word	0x40023800
 800320c:	40007000 	.word	0x40007000
 8003210:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003214:	4b1b      	ldr	r3, [pc, #108]	; (8003284 <HAL_RCC_OscConfig+0x4ec>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d028      	beq.n	8003274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800322c:	429a      	cmp	r2, r3
 800322e:	d121      	bne.n	8003274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800323a:	429a      	cmp	r2, r3
 800323c:	d11a      	bne.n	8003274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003244:	4013      	ands	r3, r2
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800324a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800324c:	4293      	cmp	r3, r2
 800324e:	d111      	bne.n	8003274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325a:	085b      	lsrs	r3, r3, #1
 800325c:	3b01      	subs	r3, #1
 800325e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003260:	429a      	cmp	r2, r3
 8003262:	d107      	bne.n	8003274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003270:	429a      	cmp	r2, r3
 8003272:	d001      	beq.n	8003278 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e000      	b.n	800327a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40023800 	.word	0x40023800

08003288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e0cc      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800329c:	4b68      	ldr	r3, [pc, #416]	; (8003440 <HAL_RCC_ClockConfig+0x1b8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d90c      	bls.n	80032c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032aa:	4b65      	ldr	r3, [pc, #404]	; (8003440 <HAL_RCC_ClockConfig+0x1b8>)
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b2:	4b63      	ldr	r3, [pc, #396]	; (8003440 <HAL_RCC_ClockConfig+0x1b8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d001      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e0b8      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d020      	beq.n	8003312 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032dc:	4b59      	ldr	r3, [pc, #356]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	4a58      	ldr	r2, [pc, #352]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d005      	beq.n	8003300 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032f4:	4b53      	ldr	r3, [pc, #332]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	4a52      	ldr	r2, [pc, #328]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80032fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003300:	4b50      	ldr	r3, [pc, #320]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	494d      	ldr	r1, [pc, #308]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	4313      	orrs	r3, r2
 8003310:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d044      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d107      	bne.n	8003336 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003326:	4b47      	ldr	r3, [pc, #284]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d119      	bne.n	8003366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e07f      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d003      	beq.n	8003346 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003342:	2b03      	cmp	r3, #3
 8003344:	d107      	bne.n	8003356 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003346:	4b3f      	ldr	r3, [pc, #252]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d109      	bne.n	8003366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e06f      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003356:	4b3b      	ldr	r3, [pc, #236]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e067      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003366:	4b37      	ldr	r3, [pc, #220]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f023 0203 	bic.w	r2, r3, #3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	4934      	ldr	r1, [pc, #208]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003374:	4313      	orrs	r3, r2
 8003376:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003378:	f7ff fa7e 	bl	8002878 <HAL_GetTick>
 800337c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800337e:	e00a      	b.n	8003396 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003380:	f7ff fa7a 	bl	8002878 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	f241 3288 	movw	r2, #5000	; 0x1388
 800338e:	4293      	cmp	r3, r2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e04f      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003396:	4b2b      	ldr	r3, [pc, #172]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 020c 	and.w	r2, r3, #12
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d1eb      	bne.n	8003380 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033a8:	4b25      	ldr	r3, [pc, #148]	; (8003440 <HAL_RCC_ClockConfig+0x1b8>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d20c      	bcs.n	80033d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b6:	4b22      	ldr	r3, [pc, #136]	; (8003440 <HAL_RCC_ClockConfig+0x1b8>)
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033be:	4b20      	ldr	r3, [pc, #128]	; (8003440 <HAL_RCC_ClockConfig+0x1b8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d001      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e032      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033dc:	4b19      	ldr	r3, [pc, #100]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	4916      	ldr	r1, [pc, #88]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d009      	beq.n	800340e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033fa:	4b12      	ldr	r3, [pc, #72]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	490e      	ldr	r1, [pc, #56]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	4313      	orrs	r3, r2
 800340c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800340e:	f000 f821 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 8003412:	4602      	mov	r2, r0
 8003414:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	490a      	ldr	r1, [pc, #40]	; (8003448 <HAL_RCC_ClockConfig+0x1c0>)
 8003420:	5ccb      	ldrb	r3, [r1, r3]
 8003422:	fa22 f303 	lsr.w	r3, r2, r3
 8003426:	4a09      	ldr	r2, [pc, #36]	; (800344c <HAL_RCC_ClockConfig+0x1c4>)
 8003428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800342a:	4b09      	ldr	r3, [pc, #36]	; (8003450 <HAL_RCC_ClockConfig+0x1c8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff f9de 	bl	80027f0 <HAL_InitTick>

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40023c00 	.word	0x40023c00
 8003444:	40023800 	.word	0x40023800
 8003448:	08004978 	.word	0x08004978
 800344c:	20000000 	.word	0x20000000
 8003450:	20000004 	.word	0x20000004

08003454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003458:	b094      	sub	sp, #80	; 0x50
 800345a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	647b      	str	r3, [r7, #68]	; 0x44
 8003460:	2300      	movs	r3, #0
 8003462:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003464:	2300      	movs	r3, #0
 8003466:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800346c:	4b79      	ldr	r3, [pc, #484]	; (8003654 <HAL_RCC_GetSysClockFreq+0x200>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 030c 	and.w	r3, r3, #12
 8003474:	2b08      	cmp	r3, #8
 8003476:	d00d      	beq.n	8003494 <HAL_RCC_GetSysClockFreq+0x40>
 8003478:	2b08      	cmp	r3, #8
 800347a:	f200 80e1 	bhi.w	8003640 <HAL_RCC_GetSysClockFreq+0x1ec>
 800347e:	2b00      	cmp	r3, #0
 8003480:	d002      	beq.n	8003488 <HAL_RCC_GetSysClockFreq+0x34>
 8003482:	2b04      	cmp	r3, #4
 8003484:	d003      	beq.n	800348e <HAL_RCC_GetSysClockFreq+0x3a>
 8003486:	e0db      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003488:	4b73      	ldr	r3, [pc, #460]	; (8003658 <HAL_RCC_GetSysClockFreq+0x204>)
 800348a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800348c:	e0db      	b.n	8003646 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800348e:	4b73      	ldr	r3, [pc, #460]	; (800365c <HAL_RCC_GetSysClockFreq+0x208>)
 8003490:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003492:	e0d8      	b.n	8003646 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003494:	4b6f      	ldr	r3, [pc, #444]	; (8003654 <HAL_RCC_GetSysClockFreq+0x200>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800349c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800349e:	4b6d      	ldr	r3, [pc, #436]	; (8003654 <HAL_RCC_GetSysClockFreq+0x200>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d063      	beq.n	8003572 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034aa:	4b6a      	ldr	r3, [pc, #424]	; (8003654 <HAL_RCC_GetSysClockFreq+0x200>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	099b      	lsrs	r3, r3, #6
 80034b0:	2200      	movs	r2, #0
 80034b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80034b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034bc:	633b      	str	r3, [r7, #48]	; 0x30
 80034be:	2300      	movs	r3, #0
 80034c0:	637b      	str	r3, [r7, #52]	; 0x34
 80034c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034c6:	4622      	mov	r2, r4
 80034c8:	462b      	mov	r3, r5
 80034ca:	f04f 0000 	mov.w	r0, #0
 80034ce:	f04f 0100 	mov.w	r1, #0
 80034d2:	0159      	lsls	r1, r3, #5
 80034d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034d8:	0150      	lsls	r0, r2, #5
 80034da:	4602      	mov	r2, r0
 80034dc:	460b      	mov	r3, r1
 80034de:	4621      	mov	r1, r4
 80034e0:	1a51      	subs	r1, r2, r1
 80034e2:	6139      	str	r1, [r7, #16]
 80034e4:	4629      	mov	r1, r5
 80034e6:	eb63 0301 	sbc.w	r3, r3, r1
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	f04f 0300 	mov.w	r3, #0
 80034f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034f8:	4659      	mov	r1, fp
 80034fa:	018b      	lsls	r3, r1, #6
 80034fc:	4651      	mov	r1, sl
 80034fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003502:	4651      	mov	r1, sl
 8003504:	018a      	lsls	r2, r1, #6
 8003506:	4651      	mov	r1, sl
 8003508:	ebb2 0801 	subs.w	r8, r2, r1
 800350c:	4659      	mov	r1, fp
 800350e:	eb63 0901 	sbc.w	r9, r3, r1
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800351e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003522:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003526:	4690      	mov	r8, r2
 8003528:	4699      	mov	r9, r3
 800352a:	4623      	mov	r3, r4
 800352c:	eb18 0303 	adds.w	r3, r8, r3
 8003530:	60bb      	str	r3, [r7, #8]
 8003532:	462b      	mov	r3, r5
 8003534:	eb49 0303 	adc.w	r3, r9, r3
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003546:	4629      	mov	r1, r5
 8003548:	024b      	lsls	r3, r1, #9
 800354a:	4621      	mov	r1, r4
 800354c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003550:	4621      	mov	r1, r4
 8003552:	024a      	lsls	r2, r1, #9
 8003554:	4610      	mov	r0, r2
 8003556:	4619      	mov	r1, r3
 8003558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800355a:	2200      	movs	r2, #0
 800355c:	62bb      	str	r3, [r7, #40]	; 0x28
 800355e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003560:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003564:	f7fd fb64 	bl	8000c30 <__aeabi_uldivmod>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4613      	mov	r3, r2
 800356e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003570:	e058      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003572:	4b38      	ldr	r3, [pc, #224]	; (8003654 <HAL_RCC_GetSysClockFreq+0x200>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	099b      	lsrs	r3, r3, #6
 8003578:	2200      	movs	r2, #0
 800357a:	4618      	mov	r0, r3
 800357c:	4611      	mov	r1, r2
 800357e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003582:	623b      	str	r3, [r7, #32]
 8003584:	2300      	movs	r3, #0
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
 8003588:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800358c:	4642      	mov	r2, r8
 800358e:	464b      	mov	r3, r9
 8003590:	f04f 0000 	mov.w	r0, #0
 8003594:	f04f 0100 	mov.w	r1, #0
 8003598:	0159      	lsls	r1, r3, #5
 800359a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800359e:	0150      	lsls	r0, r2, #5
 80035a0:	4602      	mov	r2, r0
 80035a2:	460b      	mov	r3, r1
 80035a4:	4641      	mov	r1, r8
 80035a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80035aa:	4649      	mov	r1, r9
 80035ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035c4:	ebb2 040a 	subs.w	r4, r2, sl
 80035c8:	eb63 050b 	sbc.w	r5, r3, fp
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	f04f 0300 	mov.w	r3, #0
 80035d4:	00eb      	lsls	r3, r5, #3
 80035d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035da:	00e2      	lsls	r2, r4, #3
 80035dc:	4614      	mov	r4, r2
 80035de:	461d      	mov	r5, r3
 80035e0:	4643      	mov	r3, r8
 80035e2:	18e3      	adds	r3, r4, r3
 80035e4:	603b      	str	r3, [r7, #0]
 80035e6:	464b      	mov	r3, r9
 80035e8:	eb45 0303 	adc.w	r3, r5, r3
 80035ec:	607b      	str	r3, [r7, #4]
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	f04f 0300 	mov.w	r3, #0
 80035f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035fa:	4629      	mov	r1, r5
 80035fc:	028b      	lsls	r3, r1, #10
 80035fe:	4621      	mov	r1, r4
 8003600:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003604:	4621      	mov	r1, r4
 8003606:	028a      	lsls	r2, r1, #10
 8003608:	4610      	mov	r0, r2
 800360a:	4619      	mov	r1, r3
 800360c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800360e:	2200      	movs	r2, #0
 8003610:	61bb      	str	r3, [r7, #24]
 8003612:	61fa      	str	r2, [r7, #28]
 8003614:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003618:	f7fd fb0a 	bl	8000c30 <__aeabi_uldivmod>
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	4613      	mov	r3, r2
 8003622:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003624:	4b0b      	ldr	r3, [pc, #44]	; (8003654 <HAL_RCC_GetSysClockFreq+0x200>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	0c1b      	lsrs	r3, r3, #16
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	3301      	adds	r3, #1
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003634:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003638:	fbb2 f3f3 	udiv	r3, r2, r3
 800363c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800363e:	e002      	b.n	8003646 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003640:	4b05      	ldr	r3, [pc, #20]	; (8003658 <HAL_RCC_GetSysClockFreq+0x204>)
 8003642:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003644:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003648:	4618      	mov	r0, r3
 800364a:	3750      	adds	r7, #80	; 0x50
 800364c:	46bd      	mov	sp, r7
 800364e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003652:	bf00      	nop
 8003654:	40023800 	.word	0x40023800
 8003658:	00f42400 	.word	0x00f42400
 800365c:	007a1200 	.word	0x007a1200

08003660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003664:	4b03      	ldr	r3, [pc, #12]	; (8003674 <HAL_RCC_GetHCLKFreq+0x14>)
 8003666:	681b      	ldr	r3, [r3, #0]
}
 8003668:	4618      	mov	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	20000000 	.word	0x20000000

08003678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800367c:	f7ff fff0 	bl	8003660 <HAL_RCC_GetHCLKFreq>
 8003680:	4602      	mov	r2, r0
 8003682:	4b05      	ldr	r3, [pc, #20]	; (8003698 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	0a9b      	lsrs	r3, r3, #10
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	4903      	ldr	r1, [pc, #12]	; (800369c <HAL_RCC_GetPCLK1Freq+0x24>)
 800368e:	5ccb      	ldrb	r3, [r1, r3]
 8003690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003694:	4618      	mov	r0, r3
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40023800 	.word	0x40023800
 800369c:	08004988 	.word	0x08004988

080036a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036a4:	f7ff ffdc 	bl	8003660 <HAL_RCC_GetHCLKFreq>
 80036a8:	4602      	mov	r2, r0
 80036aa:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	0b5b      	lsrs	r3, r3, #13
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	4903      	ldr	r1, [pc, #12]	; (80036c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036b6:	5ccb      	ldrb	r3, [r1, r3]
 80036b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036bc:	4618      	mov	r0, r3
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40023800 	.word	0x40023800
 80036c4:	08004988 	.word	0x08004988

080036c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e041      	b.n	800375e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d106      	bne.n	80036f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7fe fa46 	bl	8001b80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3304      	adds	r3, #4
 8003704:	4619      	mov	r1, r3
 8003706:	4610      	mov	r0, r2
 8003708:	f000 faac 	bl	8003c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b082      	sub	sp, #8
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e041      	b.n	80037fc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	d106      	bne.n	8003792 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7fe f98f 	bl	8001ab0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2202      	movs	r2, #2
 8003796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	3304      	adds	r3, #4
 80037a2:	4619      	mov	r1, r3
 80037a4:	4610      	mov	r0, r2
 80037a6:	f000 fa5d 	bl	8003c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e097      	b.n	8003948 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d106      	bne.n	8003832 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f7fe f961 	bl	8001af4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2202      	movs	r2, #2
 8003836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003848:	f023 0307 	bic.w	r3, r3, #7
 800384c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3304      	adds	r3, #4
 8003856:	4619      	mov	r1, r3
 8003858:	4610      	mov	r0, r2
 800385a:	f000 fa03 	bl	8003c64 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	4313      	orrs	r3, r2
 800387e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003886:	f023 0303 	bic.w	r3, r3, #3
 800388a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	021b      	lsls	r3, r3, #8
 8003896:	4313      	orrs	r3, r2
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80038a4:	f023 030c 	bic.w	r3, r3, #12
 80038a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	021b      	lsls	r3, r3, #8
 80038c0:	4313      	orrs	r3, r2
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	011a      	lsls	r2, r3, #4
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	031b      	lsls	r3, r3, #12
 80038d4:	4313      	orrs	r3, r2
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80038e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80038ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	4313      	orrs	r3, r2
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3718      	adds	r7, #24
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800395c:	2300      	movs	r3, #0
 800395e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003966:	2b01      	cmp	r3, #1
 8003968:	d101      	bne.n	800396e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800396a:	2302      	movs	r3, #2
 800396c:	e0ae      	b.n	8003acc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b0c      	cmp	r3, #12
 800397a:	f200 809f 	bhi.w	8003abc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800397e:	a201      	add	r2, pc, #4	; (adr r2, 8003984 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003984:	080039b9 	.word	0x080039b9
 8003988:	08003abd 	.word	0x08003abd
 800398c:	08003abd 	.word	0x08003abd
 8003990:	08003abd 	.word	0x08003abd
 8003994:	080039f9 	.word	0x080039f9
 8003998:	08003abd 	.word	0x08003abd
 800399c:	08003abd 	.word	0x08003abd
 80039a0:	08003abd 	.word	0x08003abd
 80039a4:	08003a3b 	.word	0x08003a3b
 80039a8:	08003abd 	.word	0x08003abd
 80039ac:	08003abd 	.word	0x08003abd
 80039b0:	08003abd 	.word	0x08003abd
 80039b4:	08003a7b 	.word	0x08003a7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68b9      	ldr	r1, [r7, #8]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 f9d0 	bl	8003d64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699a      	ldr	r2, [r3, #24]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0208 	orr.w	r2, r2, #8
 80039d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699a      	ldr	r2, [r3, #24]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0204 	bic.w	r2, r2, #4
 80039e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6999      	ldr	r1, [r3, #24]
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	691a      	ldr	r2, [r3, #16]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	619a      	str	r2, [r3, #24]
      break;
 80039f6:	e064      	b.n	8003ac2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68b9      	ldr	r1, [r7, #8]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fa16 	bl	8003e30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699a      	ldr	r2, [r3, #24]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	699a      	ldr	r2, [r3, #24]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6999      	ldr	r1, [r3, #24]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	021a      	lsls	r2, r3, #8
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	619a      	str	r2, [r3, #24]
      break;
 8003a38:	e043      	b.n	8003ac2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68b9      	ldr	r1, [r7, #8]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 fa61 	bl	8003f08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	69da      	ldr	r2, [r3, #28]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 0208 	orr.w	r2, r2, #8
 8003a54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69da      	ldr	r2, [r3, #28]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0204 	bic.w	r2, r2, #4
 8003a64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	69d9      	ldr	r1, [r3, #28]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	61da      	str	r2, [r3, #28]
      break;
 8003a78:	e023      	b.n	8003ac2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68b9      	ldr	r1, [r7, #8]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 faab 	bl	8003fdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	69da      	ldr	r2, [r3, #28]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69da      	ldr	r2, [r3, #28]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69d9      	ldr	r1, [r3, #28]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	021a      	lsls	r2, r3, #8
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	61da      	str	r2, [r3, #28]
      break;
 8003aba:	e002      	b.n	8003ac2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	75fb      	strb	r3, [r7, #23]
      break;
 8003ac0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3718      	adds	r7, #24
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_TIM_ConfigClockSource+0x1c>
 8003aec:	2302      	movs	r3, #2
 8003aee:	e0b4      	b.n	8003c5a <HAL_TIM_ConfigClockSource+0x186>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b28:	d03e      	beq.n	8003ba8 <HAL_TIM_ConfigClockSource+0xd4>
 8003b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b2e:	f200 8087 	bhi.w	8003c40 <HAL_TIM_ConfigClockSource+0x16c>
 8003b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b36:	f000 8086 	beq.w	8003c46 <HAL_TIM_ConfigClockSource+0x172>
 8003b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b3e:	d87f      	bhi.n	8003c40 <HAL_TIM_ConfigClockSource+0x16c>
 8003b40:	2b70      	cmp	r3, #112	; 0x70
 8003b42:	d01a      	beq.n	8003b7a <HAL_TIM_ConfigClockSource+0xa6>
 8003b44:	2b70      	cmp	r3, #112	; 0x70
 8003b46:	d87b      	bhi.n	8003c40 <HAL_TIM_ConfigClockSource+0x16c>
 8003b48:	2b60      	cmp	r3, #96	; 0x60
 8003b4a:	d050      	beq.n	8003bee <HAL_TIM_ConfigClockSource+0x11a>
 8003b4c:	2b60      	cmp	r3, #96	; 0x60
 8003b4e:	d877      	bhi.n	8003c40 <HAL_TIM_ConfigClockSource+0x16c>
 8003b50:	2b50      	cmp	r3, #80	; 0x50
 8003b52:	d03c      	beq.n	8003bce <HAL_TIM_ConfigClockSource+0xfa>
 8003b54:	2b50      	cmp	r3, #80	; 0x50
 8003b56:	d873      	bhi.n	8003c40 <HAL_TIM_ConfigClockSource+0x16c>
 8003b58:	2b40      	cmp	r3, #64	; 0x40
 8003b5a:	d058      	beq.n	8003c0e <HAL_TIM_ConfigClockSource+0x13a>
 8003b5c:	2b40      	cmp	r3, #64	; 0x40
 8003b5e:	d86f      	bhi.n	8003c40 <HAL_TIM_ConfigClockSource+0x16c>
 8003b60:	2b30      	cmp	r3, #48	; 0x30
 8003b62:	d064      	beq.n	8003c2e <HAL_TIM_ConfigClockSource+0x15a>
 8003b64:	2b30      	cmp	r3, #48	; 0x30
 8003b66:	d86b      	bhi.n	8003c40 <HAL_TIM_ConfigClockSource+0x16c>
 8003b68:	2b20      	cmp	r3, #32
 8003b6a:	d060      	beq.n	8003c2e <HAL_TIM_ConfigClockSource+0x15a>
 8003b6c:	2b20      	cmp	r3, #32
 8003b6e:	d867      	bhi.n	8003c40 <HAL_TIM_ConfigClockSource+0x16c>
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d05c      	beq.n	8003c2e <HAL_TIM_ConfigClockSource+0x15a>
 8003b74:	2b10      	cmp	r3, #16
 8003b76:	d05a      	beq.n	8003c2e <HAL_TIM_ConfigClockSource+0x15a>
 8003b78:	e062      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6818      	ldr	r0, [r3, #0]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	6899      	ldr	r1, [r3, #8]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f000 faf1 	bl	8004170 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	609a      	str	r2, [r3, #8]
      break;
 8003ba6:	e04f      	b.n	8003c48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6818      	ldr	r0, [r3, #0]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	6899      	ldr	r1, [r3, #8]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f000 fada 	bl	8004170 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bca:	609a      	str	r2, [r3, #8]
      break;
 8003bcc:	e03c      	b.n	8003c48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6818      	ldr	r0, [r3, #0]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	6859      	ldr	r1, [r3, #4]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	f000 fa4e 	bl	800407c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2150      	movs	r1, #80	; 0x50
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 faa7 	bl	800413a <TIM_ITRx_SetConfig>
      break;
 8003bec:	e02c      	b.n	8003c48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6818      	ldr	r0, [r3, #0]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	6859      	ldr	r1, [r3, #4]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	f000 fa6d 	bl	80040da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2160      	movs	r1, #96	; 0x60
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fa97 	bl	800413a <TIM_ITRx_SetConfig>
      break;
 8003c0c:	e01c      	b.n	8003c48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	6859      	ldr	r1, [r3, #4]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f000 fa2e 	bl	800407c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2140      	movs	r1, #64	; 0x40
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fa87 	bl	800413a <TIM_ITRx_SetConfig>
      break;
 8003c2c:	e00c      	b.n	8003c48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4619      	mov	r1, r3
 8003c38:	4610      	mov	r0, r2
 8003c3a:	f000 fa7e 	bl	800413a <TIM_ITRx_SetConfig>
      break;
 8003c3e:	e003      	b.n	8003c48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	73fb      	strb	r3, [r7, #15]
      break;
 8003c44:	e000      	b.n	8003c48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
	...

08003c64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a34      	ldr	r2, [pc, #208]	; (8003d48 <TIM_Base_SetConfig+0xe4>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d00f      	beq.n	8003c9c <TIM_Base_SetConfig+0x38>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c82:	d00b      	beq.n	8003c9c <TIM_Base_SetConfig+0x38>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a31      	ldr	r2, [pc, #196]	; (8003d4c <TIM_Base_SetConfig+0xe8>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d007      	beq.n	8003c9c <TIM_Base_SetConfig+0x38>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a30      	ldr	r2, [pc, #192]	; (8003d50 <TIM_Base_SetConfig+0xec>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d003      	beq.n	8003c9c <TIM_Base_SetConfig+0x38>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a2f      	ldr	r2, [pc, #188]	; (8003d54 <TIM_Base_SetConfig+0xf0>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d108      	bne.n	8003cae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a25      	ldr	r2, [pc, #148]	; (8003d48 <TIM_Base_SetConfig+0xe4>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d01b      	beq.n	8003cee <TIM_Base_SetConfig+0x8a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cbc:	d017      	beq.n	8003cee <TIM_Base_SetConfig+0x8a>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a22      	ldr	r2, [pc, #136]	; (8003d4c <TIM_Base_SetConfig+0xe8>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d013      	beq.n	8003cee <TIM_Base_SetConfig+0x8a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a21      	ldr	r2, [pc, #132]	; (8003d50 <TIM_Base_SetConfig+0xec>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00f      	beq.n	8003cee <TIM_Base_SetConfig+0x8a>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a20      	ldr	r2, [pc, #128]	; (8003d54 <TIM_Base_SetConfig+0xf0>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00b      	beq.n	8003cee <TIM_Base_SetConfig+0x8a>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a1f      	ldr	r2, [pc, #124]	; (8003d58 <TIM_Base_SetConfig+0xf4>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d007      	beq.n	8003cee <TIM_Base_SetConfig+0x8a>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a1e      	ldr	r2, [pc, #120]	; (8003d5c <TIM_Base_SetConfig+0xf8>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d003      	beq.n	8003cee <TIM_Base_SetConfig+0x8a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a1d      	ldr	r2, [pc, #116]	; (8003d60 <TIM_Base_SetConfig+0xfc>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d108      	bne.n	8003d00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a08      	ldr	r2, [pc, #32]	; (8003d48 <TIM_Base_SetConfig+0xe4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d103      	bne.n	8003d34 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	691a      	ldr	r2, [r3, #16]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	615a      	str	r2, [r3, #20]
}
 8003d3a:	bf00      	nop
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40010000 	.word	0x40010000
 8003d4c:	40000400 	.word	0x40000400
 8003d50:	40000800 	.word	0x40000800
 8003d54:	40000c00 	.word	0x40000c00
 8003d58:	40014000 	.word	0x40014000
 8003d5c:	40014400 	.word	0x40014400
 8003d60:	40014800 	.word	0x40014800

08003d64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	f023 0201 	bic.w	r2, r3, #1
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f023 0303 	bic.w	r3, r3, #3
 8003d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f023 0302 	bic.w	r3, r3, #2
 8003dac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a1c      	ldr	r2, [pc, #112]	; (8003e2c <TIM_OC1_SetConfig+0xc8>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d10c      	bne.n	8003dda <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f023 0308 	bic.w	r3, r3, #8
 8003dc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f023 0304 	bic.w	r3, r3, #4
 8003dd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a13      	ldr	r2, [pc, #76]	; (8003e2c <TIM_OC1_SetConfig+0xc8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d111      	bne.n	8003e06 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003de8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003df0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	621a      	str	r2, [r3, #32]
}
 8003e20:	bf00      	nop
 8003e22:	371c      	adds	r7, #28
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	40010000 	.word	0x40010000

08003e30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	f023 0210 	bic.w	r2, r3, #16
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	021b      	lsls	r3, r3, #8
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f023 0320 	bic.w	r3, r3, #32
 8003e7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a1e      	ldr	r2, [pc, #120]	; (8003f04 <TIM_OC2_SetConfig+0xd4>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d10d      	bne.n	8003eac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eaa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a15      	ldr	r2, [pc, #84]	; (8003f04 <TIM_OC2_SetConfig+0xd4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d113      	bne.n	8003edc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003eba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ec2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	621a      	str	r2, [r3, #32]
}
 8003ef6:	bf00      	nop
 8003ef8:	371c      	adds	r7, #28
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	40010000 	.word	0x40010000

08003f08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 0303 	bic.w	r3, r3, #3
 8003f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	021b      	lsls	r3, r3, #8
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a1d      	ldr	r2, [pc, #116]	; (8003fd8 <TIM_OC3_SetConfig+0xd0>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d10d      	bne.n	8003f82 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	021b      	lsls	r3, r3, #8
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a14      	ldr	r2, [pc, #80]	; (8003fd8 <TIM_OC3_SetConfig+0xd0>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d113      	bne.n	8003fb2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	011b      	lsls	r3, r3, #4
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	621a      	str	r2, [r3, #32]
}
 8003fcc:	bf00      	nop
 8003fce:	371c      	adds	r7, #28
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	40010000 	.word	0x40010000

08003fdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800400a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	021b      	lsls	r3, r3, #8
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	4313      	orrs	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004026:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	031b      	lsls	r3, r3, #12
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	4313      	orrs	r3, r2
 8004032:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a10      	ldr	r2, [pc, #64]	; (8004078 <TIM_OC4_SetConfig+0x9c>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d109      	bne.n	8004050 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004042:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	019b      	lsls	r3, r3, #6
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	4313      	orrs	r3, r2
 800404e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	621a      	str	r2, [r3, #32]
}
 800406a:	bf00      	nop
 800406c:	371c      	adds	r7, #28
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	40010000 	.word	0x40010000

0800407c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	f023 0201 	bic.w	r2, r3, #1
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f023 030a 	bic.w	r3, r3, #10
 80040b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	4313      	orrs	r3, r2
 80040c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	621a      	str	r2, [r3, #32]
}
 80040ce:	bf00      	nop
 80040d0:	371c      	adds	r7, #28
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040da:	b480      	push	{r7}
 80040dc:	b087      	sub	sp, #28
 80040de:	af00      	add	r7, sp, #0
 80040e0:	60f8      	str	r0, [r7, #12]
 80040e2:	60b9      	str	r1, [r7, #8]
 80040e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	f023 0210 	bic.w	r2, r3, #16
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004104:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	031b      	lsls	r3, r3, #12
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	4313      	orrs	r3, r2
 800410e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004116:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	011b      	lsls	r3, r3, #4
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4313      	orrs	r3, r2
 8004120:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	621a      	str	r2, [r3, #32]
}
 800412e:	bf00      	nop
 8004130:	371c      	adds	r7, #28
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800413a:	b480      	push	{r7}
 800413c:	b085      	sub	sp, #20
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
 8004142:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004150:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4313      	orrs	r3, r2
 8004158:	f043 0307 	orr.w	r3, r3, #7
 800415c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	609a      	str	r2, [r3, #8]
}
 8004164:	bf00      	nop
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004170:	b480      	push	{r7}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
 800417c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800418a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	021a      	lsls	r2, r3, #8
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	431a      	orrs	r2, r3
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	4313      	orrs	r3, r2
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	4313      	orrs	r3, r2
 800419c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	609a      	str	r2, [r3, #8]
}
 80041a4:	bf00      	nop
 80041a6:	371c      	adds	r7, #28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d101      	bne.n	80041c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041c4:	2302      	movs	r3, #2
 80041c6:	e050      	b.n	800426a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2202      	movs	r2, #2
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a1c      	ldr	r2, [pc, #112]	; (8004278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d018      	beq.n	800423e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004214:	d013      	beq.n	800423e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a18      	ldr	r2, [pc, #96]	; (800427c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d00e      	beq.n	800423e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a16      	ldr	r2, [pc, #88]	; (8004280 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d009      	beq.n	800423e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a15      	ldr	r2, [pc, #84]	; (8004284 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d004      	beq.n	800423e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a13      	ldr	r2, [pc, #76]	; (8004288 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d10c      	bne.n	8004258 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004244:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	4313      	orrs	r3, r2
 800424e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40010000 	.word	0x40010000
 800427c:	40000400 	.word	0x40000400
 8004280:	40000800 	.word	0x40000800
 8004284:	40000c00 	.word	0x40000c00
 8004288:	40014000 	.word	0x40014000

0800428c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004296:	2300      	movs	r3, #0
 8004298:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e03d      	b.n	8004324 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	4313      	orrs	r3, r2
 8004302:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	4313      	orrs	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e03f      	b.n	80043c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d106      	bne.n	800435c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7fd fc84 	bl	8001c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2224      	movs	r2, #36	; 0x24
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68da      	ldr	r2, [r3, #12]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004372:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f829 	bl	80043cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	691a      	ldr	r2, [r3, #16]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004388:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	695a      	ldr	r2, [r3, #20]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004398:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
	...

080043cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043d0:	b0c0      	sub	sp, #256	; 0x100
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e8:	68d9      	ldr	r1, [r3, #12]
 80043ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	ea40 0301 	orr.w	r3, r0, r1
 80043f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	431a      	orrs	r2, r3
 8004404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	431a      	orrs	r2, r3
 800440c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	4313      	orrs	r3, r2
 8004414:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004424:	f021 010c 	bic.w	r1, r1, #12
 8004428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004432:	430b      	orrs	r3, r1
 8004434:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004446:	6999      	ldr	r1, [r3, #24]
 8004448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	ea40 0301 	orr.w	r3, r0, r1
 8004452:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	4b8f      	ldr	r3, [pc, #572]	; (8004698 <UART_SetConfig+0x2cc>)
 800445c:	429a      	cmp	r2, r3
 800445e:	d005      	beq.n	800446c <UART_SetConfig+0xa0>
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	4b8d      	ldr	r3, [pc, #564]	; (800469c <UART_SetConfig+0x2d0>)
 8004468:	429a      	cmp	r2, r3
 800446a:	d104      	bne.n	8004476 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800446c:	f7ff f918 	bl	80036a0 <HAL_RCC_GetPCLK2Freq>
 8004470:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004474:	e003      	b.n	800447e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004476:	f7ff f8ff 	bl	8003678 <HAL_RCC_GetPCLK1Freq>
 800447a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800447e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004482:	69db      	ldr	r3, [r3, #28]
 8004484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004488:	f040 810c 	bne.w	80046a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800448c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004490:	2200      	movs	r2, #0
 8004492:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004496:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800449a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800449e:	4622      	mov	r2, r4
 80044a0:	462b      	mov	r3, r5
 80044a2:	1891      	adds	r1, r2, r2
 80044a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80044a6:	415b      	adcs	r3, r3
 80044a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044ae:	4621      	mov	r1, r4
 80044b0:	eb12 0801 	adds.w	r8, r2, r1
 80044b4:	4629      	mov	r1, r5
 80044b6:	eb43 0901 	adc.w	r9, r3, r1
 80044ba:	f04f 0200 	mov.w	r2, #0
 80044be:	f04f 0300 	mov.w	r3, #0
 80044c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044ce:	4690      	mov	r8, r2
 80044d0:	4699      	mov	r9, r3
 80044d2:	4623      	mov	r3, r4
 80044d4:	eb18 0303 	adds.w	r3, r8, r3
 80044d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044dc:	462b      	mov	r3, r5
 80044de:	eb49 0303 	adc.w	r3, r9, r3
 80044e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80044f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80044fa:	460b      	mov	r3, r1
 80044fc:	18db      	adds	r3, r3, r3
 80044fe:	653b      	str	r3, [r7, #80]	; 0x50
 8004500:	4613      	mov	r3, r2
 8004502:	eb42 0303 	adc.w	r3, r2, r3
 8004506:	657b      	str	r3, [r7, #84]	; 0x54
 8004508:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800450c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004510:	f7fc fb8e 	bl	8000c30 <__aeabi_uldivmod>
 8004514:	4602      	mov	r2, r0
 8004516:	460b      	mov	r3, r1
 8004518:	4b61      	ldr	r3, [pc, #388]	; (80046a0 <UART_SetConfig+0x2d4>)
 800451a:	fba3 2302 	umull	r2, r3, r3, r2
 800451e:	095b      	lsrs	r3, r3, #5
 8004520:	011c      	lsls	r4, r3, #4
 8004522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004526:	2200      	movs	r2, #0
 8004528:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800452c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004530:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004534:	4642      	mov	r2, r8
 8004536:	464b      	mov	r3, r9
 8004538:	1891      	adds	r1, r2, r2
 800453a:	64b9      	str	r1, [r7, #72]	; 0x48
 800453c:	415b      	adcs	r3, r3
 800453e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004540:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004544:	4641      	mov	r1, r8
 8004546:	eb12 0a01 	adds.w	sl, r2, r1
 800454a:	4649      	mov	r1, r9
 800454c:	eb43 0b01 	adc.w	fp, r3, r1
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800455c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004560:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004564:	4692      	mov	sl, r2
 8004566:	469b      	mov	fp, r3
 8004568:	4643      	mov	r3, r8
 800456a:	eb1a 0303 	adds.w	r3, sl, r3
 800456e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004572:	464b      	mov	r3, r9
 8004574:	eb4b 0303 	adc.w	r3, fp, r3
 8004578:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800457c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004588:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800458c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004590:	460b      	mov	r3, r1
 8004592:	18db      	adds	r3, r3, r3
 8004594:	643b      	str	r3, [r7, #64]	; 0x40
 8004596:	4613      	mov	r3, r2
 8004598:	eb42 0303 	adc.w	r3, r2, r3
 800459c:	647b      	str	r3, [r7, #68]	; 0x44
 800459e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80045a6:	f7fc fb43 	bl	8000c30 <__aeabi_uldivmod>
 80045aa:	4602      	mov	r2, r0
 80045ac:	460b      	mov	r3, r1
 80045ae:	4611      	mov	r1, r2
 80045b0:	4b3b      	ldr	r3, [pc, #236]	; (80046a0 <UART_SetConfig+0x2d4>)
 80045b2:	fba3 2301 	umull	r2, r3, r3, r1
 80045b6:	095b      	lsrs	r3, r3, #5
 80045b8:	2264      	movs	r2, #100	; 0x64
 80045ba:	fb02 f303 	mul.w	r3, r2, r3
 80045be:	1acb      	subs	r3, r1, r3
 80045c0:	00db      	lsls	r3, r3, #3
 80045c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80045c6:	4b36      	ldr	r3, [pc, #216]	; (80046a0 <UART_SetConfig+0x2d4>)
 80045c8:	fba3 2302 	umull	r2, r3, r3, r2
 80045cc:	095b      	lsrs	r3, r3, #5
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045d4:	441c      	add	r4, r3
 80045d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045da:	2200      	movs	r2, #0
 80045dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80045e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80045e8:	4642      	mov	r2, r8
 80045ea:	464b      	mov	r3, r9
 80045ec:	1891      	adds	r1, r2, r2
 80045ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80045f0:	415b      	adcs	r3, r3
 80045f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045f8:	4641      	mov	r1, r8
 80045fa:	1851      	adds	r1, r2, r1
 80045fc:	6339      	str	r1, [r7, #48]	; 0x30
 80045fe:	4649      	mov	r1, r9
 8004600:	414b      	adcs	r3, r1
 8004602:	637b      	str	r3, [r7, #52]	; 0x34
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	f04f 0300 	mov.w	r3, #0
 800460c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004610:	4659      	mov	r1, fp
 8004612:	00cb      	lsls	r3, r1, #3
 8004614:	4651      	mov	r1, sl
 8004616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800461a:	4651      	mov	r1, sl
 800461c:	00ca      	lsls	r2, r1, #3
 800461e:	4610      	mov	r0, r2
 8004620:	4619      	mov	r1, r3
 8004622:	4603      	mov	r3, r0
 8004624:	4642      	mov	r2, r8
 8004626:	189b      	adds	r3, r3, r2
 8004628:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800462c:	464b      	mov	r3, r9
 800462e:	460a      	mov	r2, r1
 8004630:	eb42 0303 	adc.w	r3, r2, r3
 8004634:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004644:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004648:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800464c:	460b      	mov	r3, r1
 800464e:	18db      	adds	r3, r3, r3
 8004650:	62bb      	str	r3, [r7, #40]	; 0x28
 8004652:	4613      	mov	r3, r2
 8004654:	eb42 0303 	adc.w	r3, r2, r3
 8004658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800465a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800465e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004662:	f7fc fae5 	bl	8000c30 <__aeabi_uldivmod>
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	4b0d      	ldr	r3, [pc, #52]	; (80046a0 <UART_SetConfig+0x2d4>)
 800466c:	fba3 1302 	umull	r1, r3, r3, r2
 8004670:	095b      	lsrs	r3, r3, #5
 8004672:	2164      	movs	r1, #100	; 0x64
 8004674:	fb01 f303 	mul.w	r3, r1, r3
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	3332      	adds	r3, #50	; 0x32
 800467e:	4a08      	ldr	r2, [pc, #32]	; (80046a0 <UART_SetConfig+0x2d4>)
 8004680:	fba2 2303 	umull	r2, r3, r2, r3
 8004684:	095b      	lsrs	r3, r3, #5
 8004686:	f003 0207 	and.w	r2, r3, #7
 800468a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4422      	add	r2, r4
 8004692:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004694:	e105      	b.n	80048a2 <UART_SetConfig+0x4d6>
 8004696:	bf00      	nop
 8004698:	40011000 	.word	0x40011000
 800469c:	40011400 	.word	0x40011400
 80046a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046a8:	2200      	movs	r2, #0
 80046aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80046b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80046b6:	4642      	mov	r2, r8
 80046b8:	464b      	mov	r3, r9
 80046ba:	1891      	adds	r1, r2, r2
 80046bc:	6239      	str	r1, [r7, #32]
 80046be:	415b      	adcs	r3, r3
 80046c0:	627b      	str	r3, [r7, #36]	; 0x24
 80046c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046c6:	4641      	mov	r1, r8
 80046c8:	1854      	adds	r4, r2, r1
 80046ca:	4649      	mov	r1, r9
 80046cc:	eb43 0501 	adc.w	r5, r3, r1
 80046d0:	f04f 0200 	mov.w	r2, #0
 80046d4:	f04f 0300 	mov.w	r3, #0
 80046d8:	00eb      	lsls	r3, r5, #3
 80046da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046de:	00e2      	lsls	r2, r4, #3
 80046e0:	4614      	mov	r4, r2
 80046e2:	461d      	mov	r5, r3
 80046e4:	4643      	mov	r3, r8
 80046e6:	18e3      	adds	r3, r4, r3
 80046e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046ec:	464b      	mov	r3, r9
 80046ee:	eb45 0303 	adc.w	r3, r5, r3
 80046f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80046f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004702:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004706:	f04f 0200 	mov.w	r2, #0
 800470a:	f04f 0300 	mov.w	r3, #0
 800470e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004712:	4629      	mov	r1, r5
 8004714:	008b      	lsls	r3, r1, #2
 8004716:	4621      	mov	r1, r4
 8004718:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800471c:	4621      	mov	r1, r4
 800471e:	008a      	lsls	r2, r1, #2
 8004720:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004724:	f7fc fa84 	bl	8000c30 <__aeabi_uldivmod>
 8004728:	4602      	mov	r2, r0
 800472a:	460b      	mov	r3, r1
 800472c:	4b60      	ldr	r3, [pc, #384]	; (80048b0 <UART_SetConfig+0x4e4>)
 800472e:	fba3 2302 	umull	r2, r3, r3, r2
 8004732:	095b      	lsrs	r3, r3, #5
 8004734:	011c      	lsls	r4, r3, #4
 8004736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800473a:	2200      	movs	r2, #0
 800473c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004740:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004744:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004748:	4642      	mov	r2, r8
 800474a:	464b      	mov	r3, r9
 800474c:	1891      	adds	r1, r2, r2
 800474e:	61b9      	str	r1, [r7, #24]
 8004750:	415b      	adcs	r3, r3
 8004752:	61fb      	str	r3, [r7, #28]
 8004754:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004758:	4641      	mov	r1, r8
 800475a:	1851      	adds	r1, r2, r1
 800475c:	6139      	str	r1, [r7, #16]
 800475e:	4649      	mov	r1, r9
 8004760:	414b      	adcs	r3, r1
 8004762:	617b      	str	r3, [r7, #20]
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004770:	4659      	mov	r1, fp
 8004772:	00cb      	lsls	r3, r1, #3
 8004774:	4651      	mov	r1, sl
 8004776:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800477a:	4651      	mov	r1, sl
 800477c:	00ca      	lsls	r2, r1, #3
 800477e:	4610      	mov	r0, r2
 8004780:	4619      	mov	r1, r3
 8004782:	4603      	mov	r3, r0
 8004784:	4642      	mov	r2, r8
 8004786:	189b      	adds	r3, r3, r2
 8004788:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800478c:	464b      	mov	r3, r9
 800478e:	460a      	mov	r2, r1
 8004790:	eb42 0303 	adc.w	r3, r2, r3
 8004794:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80047a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80047a4:	f04f 0200 	mov.w	r2, #0
 80047a8:	f04f 0300 	mov.w	r3, #0
 80047ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80047b0:	4649      	mov	r1, r9
 80047b2:	008b      	lsls	r3, r1, #2
 80047b4:	4641      	mov	r1, r8
 80047b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047ba:	4641      	mov	r1, r8
 80047bc:	008a      	lsls	r2, r1, #2
 80047be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80047c2:	f7fc fa35 	bl	8000c30 <__aeabi_uldivmod>
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4b39      	ldr	r3, [pc, #228]	; (80048b0 <UART_SetConfig+0x4e4>)
 80047cc:	fba3 1302 	umull	r1, r3, r3, r2
 80047d0:	095b      	lsrs	r3, r3, #5
 80047d2:	2164      	movs	r1, #100	; 0x64
 80047d4:	fb01 f303 	mul.w	r3, r1, r3
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	3332      	adds	r3, #50	; 0x32
 80047de:	4a34      	ldr	r2, [pc, #208]	; (80048b0 <UART_SetConfig+0x4e4>)
 80047e0:	fba2 2303 	umull	r2, r3, r2, r3
 80047e4:	095b      	lsrs	r3, r3, #5
 80047e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047ea:	441c      	add	r4, r3
 80047ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047f0:	2200      	movs	r2, #0
 80047f2:	673b      	str	r3, [r7, #112]	; 0x70
 80047f4:	677a      	str	r2, [r7, #116]	; 0x74
 80047f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80047fa:	4642      	mov	r2, r8
 80047fc:	464b      	mov	r3, r9
 80047fe:	1891      	adds	r1, r2, r2
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	415b      	adcs	r3, r3
 8004804:	60fb      	str	r3, [r7, #12]
 8004806:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800480a:	4641      	mov	r1, r8
 800480c:	1851      	adds	r1, r2, r1
 800480e:	6039      	str	r1, [r7, #0]
 8004810:	4649      	mov	r1, r9
 8004812:	414b      	adcs	r3, r1
 8004814:	607b      	str	r3, [r7, #4]
 8004816:	f04f 0200 	mov.w	r2, #0
 800481a:	f04f 0300 	mov.w	r3, #0
 800481e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004822:	4659      	mov	r1, fp
 8004824:	00cb      	lsls	r3, r1, #3
 8004826:	4651      	mov	r1, sl
 8004828:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800482c:	4651      	mov	r1, sl
 800482e:	00ca      	lsls	r2, r1, #3
 8004830:	4610      	mov	r0, r2
 8004832:	4619      	mov	r1, r3
 8004834:	4603      	mov	r3, r0
 8004836:	4642      	mov	r2, r8
 8004838:	189b      	adds	r3, r3, r2
 800483a:	66bb      	str	r3, [r7, #104]	; 0x68
 800483c:	464b      	mov	r3, r9
 800483e:	460a      	mov	r2, r1
 8004840:	eb42 0303 	adc.w	r3, r2, r3
 8004844:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	663b      	str	r3, [r7, #96]	; 0x60
 8004850:	667a      	str	r2, [r7, #100]	; 0x64
 8004852:	f04f 0200 	mov.w	r2, #0
 8004856:	f04f 0300 	mov.w	r3, #0
 800485a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800485e:	4649      	mov	r1, r9
 8004860:	008b      	lsls	r3, r1, #2
 8004862:	4641      	mov	r1, r8
 8004864:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004868:	4641      	mov	r1, r8
 800486a:	008a      	lsls	r2, r1, #2
 800486c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004870:	f7fc f9de 	bl	8000c30 <__aeabi_uldivmod>
 8004874:	4602      	mov	r2, r0
 8004876:	460b      	mov	r3, r1
 8004878:	4b0d      	ldr	r3, [pc, #52]	; (80048b0 <UART_SetConfig+0x4e4>)
 800487a:	fba3 1302 	umull	r1, r3, r3, r2
 800487e:	095b      	lsrs	r3, r3, #5
 8004880:	2164      	movs	r1, #100	; 0x64
 8004882:	fb01 f303 	mul.w	r3, r1, r3
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	011b      	lsls	r3, r3, #4
 800488a:	3332      	adds	r3, #50	; 0x32
 800488c:	4a08      	ldr	r2, [pc, #32]	; (80048b0 <UART_SetConfig+0x4e4>)
 800488e:	fba2 2303 	umull	r2, r3, r2, r3
 8004892:	095b      	lsrs	r3, r3, #5
 8004894:	f003 020f 	and.w	r2, r3, #15
 8004898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4422      	add	r2, r4
 80048a0:	609a      	str	r2, [r3, #8]
}
 80048a2:	bf00      	nop
 80048a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80048a8:	46bd      	mov	sp, r7
 80048aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048ae:	bf00      	nop
 80048b0:	51eb851f 	.word	0x51eb851f

080048b4 <__libc_init_array>:
 80048b4:	b570      	push	{r4, r5, r6, lr}
 80048b6:	4d0d      	ldr	r5, [pc, #52]	; (80048ec <__libc_init_array+0x38>)
 80048b8:	4c0d      	ldr	r4, [pc, #52]	; (80048f0 <__libc_init_array+0x3c>)
 80048ba:	1b64      	subs	r4, r4, r5
 80048bc:	10a4      	asrs	r4, r4, #2
 80048be:	2600      	movs	r6, #0
 80048c0:	42a6      	cmp	r6, r4
 80048c2:	d109      	bne.n	80048d8 <__libc_init_array+0x24>
 80048c4:	4d0b      	ldr	r5, [pc, #44]	; (80048f4 <__libc_init_array+0x40>)
 80048c6:	4c0c      	ldr	r4, [pc, #48]	; (80048f8 <__libc_init_array+0x44>)
 80048c8:	f000 f820 	bl	800490c <_init>
 80048cc:	1b64      	subs	r4, r4, r5
 80048ce:	10a4      	asrs	r4, r4, #2
 80048d0:	2600      	movs	r6, #0
 80048d2:	42a6      	cmp	r6, r4
 80048d4:	d105      	bne.n	80048e2 <__libc_init_array+0x2e>
 80048d6:	bd70      	pop	{r4, r5, r6, pc}
 80048d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80048dc:	4798      	blx	r3
 80048de:	3601      	adds	r6, #1
 80048e0:	e7ee      	b.n	80048c0 <__libc_init_array+0xc>
 80048e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80048e6:	4798      	blx	r3
 80048e8:	3601      	adds	r6, #1
 80048ea:	e7f2      	b.n	80048d2 <__libc_init_array+0x1e>
 80048ec:	08004998 	.word	0x08004998
 80048f0:	08004998 	.word	0x08004998
 80048f4:	08004998 	.word	0x08004998
 80048f8:	0800499c 	.word	0x0800499c

080048fc <memset>:
 80048fc:	4402      	add	r2, r0
 80048fe:	4603      	mov	r3, r0
 8004900:	4293      	cmp	r3, r2
 8004902:	d100      	bne.n	8004906 <memset+0xa>
 8004904:	4770      	bx	lr
 8004906:	f803 1b01 	strb.w	r1, [r3], #1
 800490a:	e7f9      	b.n	8004900 <memset+0x4>

0800490c <_init>:
 800490c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800490e:	bf00      	nop
 8004910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004912:	bc08      	pop	{r3}
 8004914:	469e      	mov	lr, r3
 8004916:	4770      	bx	lr

08004918 <_fini>:
 8004918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491a:	bf00      	nop
 800491c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800491e:	bc08      	pop	{r3}
 8004920:	469e      	mov	lr, r3
 8004922:	4770      	bx	lr
