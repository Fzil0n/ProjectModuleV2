
ProjectModuleV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a898  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000910  0800aa30  0800aa30  0001aa30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b340  0800b340  00020280  2**0
                  CONTENTS
  4 .ARM          00000008  0800b340  0800b340  0001b340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b348  0800b348  00020280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b348  0800b348  0001b348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b34c  0800b34c  0001b34c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000280  20000000  0800b350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ecc  20000280  0800b5d0  00020280  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000114c  0800b5d0  0002114c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d4b  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d3c  00000000  00000000  00039ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  0003dd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c8  00000000  00000000  0003eff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005af1  00000000  00000000  000400b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f89a  00000000  00000000  00045ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094e38  00000000  00000000  00065443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fa27b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005104  00000000  00000000  000fa2cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000280 	.word	0x20000280
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800aa18 	.word	0x0800aa18

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000284 	.word	0x20000284
 80001d4:	0800aa18 	.word	0x0800aa18

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b974 	b.w	8000ea0 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	468e      	mov	lr, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d14d      	bne.n	8000c7a <__udivmoddi4+0xaa>
 8000bde:	428a      	cmp	r2, r1
 8000be0:	4694      	mov	ip, r2
 8000be2:	d969      	bls.n	8000cb8 <__udivmoddi4+0xe8>
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	b152      	cbz	r2, 8000c00 <__udivmoddi4+0x30>
 8000bea:	fa01 f302 	lsl.w	r3, r1, r2
 8000bee:	f1c2 0120 	rsb	r1, r2, #32
 8000bf2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bf6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bfe:	4094      	lsls	r4, r2
 8000c00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c04:	0c21      	lsrs	r1, r4, #16
 8000c06:	fbbe f6f8 	udiv	r6, lr, r8
 8000c0a:	fa1f f78c 	uxth.w	r7, ip
 8000c0e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c12:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c16:	fb06 f107 	mul.w	r1, r6, r7
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x64>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c26:	f080 811f 	bcs.w	8000e68 <__udivmoddi4+0x298>
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	f240 811c 	bls.w	8000e68 <__udivmoddi4+0x298>
 8000c30:	3e02      	subs	r6, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1a5b      	subs	r3, r3, r1
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c44:	fb00 f707 	mul.w	r7, r0, r7
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x92>
 8000c4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c54:	f080 810a 	bcs.w	8000e6c <__udivmoddi4+0x29c>
 8000c58:	42a7      	cmp	r7, r4
 8000c5a:	f240 8107 	bls.w	8000e6c <__udivmoddi4+0x29c>
 8000c5e:	4464      	add	r4, ip
 8000c60:	3802      	subs	r0, #2
 8000c62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c66:	1be4      	subs	r4, r4, r7
 8000c68:	2600      	movs	r6, #0
 8000c6a:	b11d      	cbz	r5, 8000c74 <__udivmoddi4+0xa4>
 8000c6c:	40d4      	lsrs	r4, r2
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e9c5 4300 	strd	r4, r3, [r5]
 8000c74:	4631      	mov	r1, r6
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d909      	bls.n	8000c92 <__udivmoddi4+0xc2>
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	f000 80ef 	beq.w	8000e62 <__udivmoddi4+0x292>
 8000c84:	2600      	movs	r6, #0
 8000c86:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	fab3 f683 	clz	r6, r3
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d14a      	bne.n	8000d30 <__udivmoddi4+0x160>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xd4>
 8000c9e:	4282      	cmp	r2, r0
 8000ca0:	f200 80f9 	bhi.w	8000e96 <__udivmoddi4+0x2c6>
 8000ca4:	1a84      	subs	r4, r0, r2
 8000ca6:	eb61 0303 	sbc.w	r3, r1, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	469e      	mov	lr, r3
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	d0e0      	beq.n	8000c74 <__udivmoddi4+0xa4>
 8000cb2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cb6:	e7dd      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000cb8:	b902      	cbnz	r2, 8000cbc <__udivmoddi4+0xec>
 8000cba:	deff      	udf	#255	; 0xff
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	2a00      	cmp	r2, #0
 8000cc2:	f040 8092 	bne.w	8000dea <__udivmoddi4+0x21a>
 8000cc6:	eba1 010c 	sub.w	r1, r1, ip
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2601      	movs	r6, #1
 8000cd4:	0c20      	lsrs	r0, r4, #16
 8000cd6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cda:	fb07 1113 	mls	r1, r7, r3, r1
 8000cde:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ce2:	fb0e f003 	mul.w	r0, lr, r3
 8000ce6:	4288      	cmp	r0, r1
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x12c>
 8000cea:	eb1c 0101 	adds.w	r1, ip, r1
 8000cee:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x12a>
 8000cf4:	4288      	cmp	r0, r1
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2c0>
 8000cfa:	4643      	mov	r3, r8
 8000cfc:	1a09      	subs	r1, r1, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d04:	fb07 1110 	mls	r1, r7, r0, r1
 8000d08:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x156>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x154>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d24:	4608      	mov	r0, r1
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d2e:	e79c      	b.n	8000c6a <__udivmoddi4+0x9a>
 8000d30:	f1c6 0720 	rsb	r7, r6, #32
 8000d34:	40b3      	lsls	r3, r6
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d42:	fa01 f306 	lsl.w	r3, r1, r6
 8000d46:	431c      	orrs	r4, r3
 8000d48:	40f9      	lsrs	r1, r7
 8000d4a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d52:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d56:	0c20      	lsrs	r0, r4, #16
 8000d58:	fa1f fe8c 	uxth.w	lr, ip
 8000d5c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d60:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d64:	fb08 f00e 	mul.w	r0, r8, lr
 8000d68:	4288      	cmp	r0, r1
 8000d6a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b8>
 8000d70:	eb1c 0101 	adds.w	r1, ip, r1
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2bc>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2bc>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4461      	add	r1, ip
 8000d88:	1a09      	subs	r1, r1, r0
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d90:	fb09 1110 	mls	r1, r9, r0, r1
 8000d94:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d9c:	458e      	cmp	lr, r1
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1e2>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2b4>
 8000daa:	458e      	cmp	lr, r1
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2b4>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4461      	add	r1, ip
 8000db2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000db6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dba:	eba1 010e 	sub.w	r1, r1, lr
 8000dbe:	42a1      	cmp	r1, r4
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46a6      	mov	lr, r4
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x2a4>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x2a0>
 8000dc8:	b15d      	cbz	r5, 8000de2 <__udivmoddi4+0x212>
 8000dca:	ebb3 0208 	subs.w	r2, r3, r8
 8000dce:	eb61 010e 	sbc.w	r1, r1, lr
 8000dd2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dd6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dda:	40f1      	lsrs	r1, r6
 8000ddc:	431f      	orrs	r7, r3
 8000dde:	e9c5 7100 	strd	r7, r1, [r5]
 8000de2:	2600      	movs	r6, #0
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	f1c2 0320 	rsb	r3, r2, #32
 8000dee:	40d8      	lsrs	r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa21 f303 	lsr.w	r3, r1, r3
 8000df8:	4091      	lsls	r1, r2
 8000dfa:	4301      	orrs	r1, r0
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e08:	fb07 3610 	mls	r6, r7, r0, r3
 8000e0c:	0c0b      	lsrs	r3, r1, #16
 8000e0e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e12:	fb00 f60e 	mul.w	r6, r0, lr
 8000e16:	429e      	cmp	r6, r3
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x260>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b8>
 8000e28:	429e      	cmp	r6, r3
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b8>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1b9b      	subs	r3, r3, r6
 8000e32:	b289      	uxth	r1, r1
 8000e34:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e38:	fb07 3316 	mls	r3, r7, r6, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb06 f30e 	mul.w	r3, r6, lr
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x28a>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2b0>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2b0>
 8000e56:	3e02      	subs	r6, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	1ac9      	subs	r1, r1, r3
 8000e5c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0x104>
 8000e62:	462e      	mov	r6, r5
 8000e64:	4628      	mov	r0, r5
 8000e66:	e705      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000e68:	4606      	mov	r6, r0
 8000e6a:	e6e3      	b.n	8000c34 <__udivmoddi4+0x64>
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	e6f8      	b.n	8000c62 <__udivmoddi4+0x92>
 8000e70:	454b      	cmp	r3, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e80:	4646      	mov	r6, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x28a>
 8000e84:	4620      	mov	r0, r4
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1e2>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x260>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b8>
 8000e90:	3b02      	subs	r3, #2
 8000e92:	4461      	add	r1, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x12c>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e709      	b.n	8000cae <__udivmoddi4+0xde>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x156>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <InitKalmanStruct>:
extern arm_matrix_instance_f32 mat_P, mat_P_minus, mat_Q;
extern arm_matrix_instance_f32 mat_C, mat_R, mat_S, mat_K;
extern arm_matrix_instance_f32 mat_temp3x3A,mat_temp3x3B, mat_temp3x1,mat_temp1x3, mat_temp1x1;

void InitKalmanStruct(Kalman* KF,float32_t q,float32_t r)
{
 8000ea4:	b5b0      	push	{r4, r5, r7, lr}
 8000ea6:	b0a0      	sub	sp, #128	; 0x80
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	ed87 0a02 	vstr	s0, [r7, #8]
 8000eb0:	edc7 0a01 	vstr	s1, [r7, #4]
	KF->R = r;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	655a      	str	r2, [r3, #84]	; 0x54
	KF->var_Q = q;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	68ba      	ldr	r2, [r7, #8]
 8000ebe:	659a      	str	r2, [r3, #88]	; 0x58
	KF->D = 0;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f04f 0200 	mov.w	r2, #0
 8000ec6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	float32_t a[9] = {
 8000eca:	4b8d      	ldr	r3, [pc, #564]	; (8001100 <InitKalmanStruct+0x25c>)
 8000ecc:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000ed0:	461d      	mov	r5, r3
 8000ed2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ed6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eda:	682b      	ldr	r3, [r5, #0]
 8000edc:	6023      	str	r3, [r4, #0]
			1.0, 0.001/2.5, 0.0000005/(2.5*2.5),
			0  , 1.0      , 0.001/2.5,
			0  , 0        , 1.0
	};
	float iden[9] = {
 8000ede:	4b89      	ldr	r3, [pc, #548]	; (8001104 <InitKalmanStruct+0x260>)
 8000ee0:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000ee4:	461d      	mov	r5, r3
 8000ee6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eee:	682b      	ldr	r3, [r5, #0]
 8000ef0:	6023      	str	r3, [r4, #0]
			1.0, 0  , 0,
			0  , 1.0, 0,
			0  , 0  , 1.0
	};
	int i;
	for(i=0;i<9;i++)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000ef6:	e023      	b.n	8000f40 <InitKalmanStruct+0x9c>
	{
		KF->A[i] = a[i];
 8000ef8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	3380      	adds	r3, #128	; 0x80
 8000efe:	443b      	add	r3, r7
 8000f00:	3b28      	subs	r3, #40	; 0x28
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	68f9      	ldr	r1, [r7, #12]
 8000f06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f08:	3318      	adds	r3, #24
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	601a      	str	r2, [r3, #0]
		KF->I[i] = iden[i];
 8000f10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	3380      	adds	r3, #128	; 0x80
 8000f16:	443b      	add	r3, r7
 8000f18:	3b4c      	subs	r3, #76	; 0x4c
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	68f9      	ldr	r1, [r7, #12]
 8000f1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f20:	332e      	adds	r3, #46	; 0x2e
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	440b      	add	r3, r1
 8000f26:	601a      	str	r2, [r3, #0]
		KF->P[i] = 0;
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	3304      	adds	r3, #4
 8000f34:	f04f 0200 	mov.w	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
	for(i=0;i<9;i++)
 8000f3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000f40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f42:	2b08      	cmp	r3, #8
 8000f44:	ddd8      	ble.n	8000ef8 <InitKalmanStruct+0x54>
	}
	float32_t b[3] = {
 8000f46:	f04f 0300 	mov.w	r3, #0
 8000f4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f4c:	f04f 0300 	mov.w	r3, #0
 8000f50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f52:	f04f 0300 	mov.w	r3, #0
 8000f56:	633b      	str	r3, [r7, #48]	; 0x30
			0, 0, 0
	};
	float32_t c[3] = {
 8000f58:	f04f 0300 	mov.w	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
 8000f5e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000f62:	623b      	str	r3, [r7, #32]
 8000f64:	f04f 0300 	mov.w	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
			0, 1, 0
	};
	float32_t g[3] = {
 8000f6a:	4a67      	ldr	r2, [pc, #412]	; (8001108 <InitKalmanStruct+0x264>)
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0.001 * 0.001 * 0.001 / (6*2.5*2.5*2.5),
			0.0000005/(2.5*2.5),
			0.001/2.5
	};

	for(i=0;i<3;i++)
 8000f76:	2300      	movs	r3, #0
 8000f78:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000f7a:	e02e      	b.n	8000fda <InitKalmanStruct+0x136>
	{
		KF->B[i] = b[i];
 8000f7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	3380      	adds	r3, #128	; 0x80
 8000f82:	443b      	add	r3, r7
 8000f84:	3b58      	subs	r3, #88	; 0x58
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	68f9      	ldr	r1, [r7, #12]
 8000f8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f8c:	3320      	adds	r3, #32
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	440b      	add	r3, r1
 8000f92:	3304      	adds	r3, #4
 8000f94:	601a      	str	r2, [r3, #0]
		KF->C[i] = c[i];
 8000f96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	3380      	adds	r3, #128	; 0x80
 8000f9c:	443b      	add	r3, r7
 8000f9e:	3b64      	subs	r3, #100	; 0x64
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	68f9      	ldr	r1, [r7, #12]
 8000fa4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fa6:	3324      	adds	r3, #36	; 0x24
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	440b      	add	r3, r1
 8000fac:	601a      	str	r2, [r3, #0]
		KF->G[i] = g[i];
 8000fae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	3380      	adds	r3, #128	; 0x80
 8000fb4:	443b      	add	r3, r7
 8000fb6:	3b70      	subs	r3, #112	; 0x70
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	68f9      	ldr	r1, [r7, #12]
 8000fbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fbe:	3328      	adds	r3, #40	; 0x28
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	601a      	str	r2, [r3, #0]
		KF->x_hat[i] = 0;
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
	for(i=0;i<3;i++)
 8000fd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000fda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	ddcd      	ble.n	8000f7c <InitKalmanStruct+0xd8>
	}

	  arm_mat_init_f32(&mat_A, 3, 3,KF->A);//3x3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	3360      	adds	r3, #96	; 0x60
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	2103      	movs	r1, #3
 8000fe8:	4848      	ldr	r0, [pc, #288]	; (800110c <InitKalmanStruct+0x268>)
 8000fea:	f003 f87a 	bl	80040e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_x_hat, 3, 1, KF->x_hat);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2103      	movs	r1, #3
 8000ff4:	4846      	ldr	r0, [pc, #280]	; (8001110 <InitKalmanStruct+0x26c>)
 8000ff6:	f003 f874 	bl	80040e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_x_hat_minus, 3, 1, KF->x_hat_minus);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	33dc      	adds	r3, #220	; 0xdc
 8000ffe:	2201      	movs	r2, #1
 8001000:	2103      	movs	r1, #3
 8001002:	4844      	ldr	r0, [pc, #272]	; (8001114 <InitKalmanStruct+0x270>)
 8001004:	f003 f86d 	bl	80040e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_B, 3, 1, KF->B);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	3384      	adds	r3, #132	; 0x84
 800100c:	2201      	movs	r2, #1
 800100e:	2103      	movs	r1, #3
 8001010:	4841      	ldr	r0, [pc, #260]	; (8001118 <InitKalmanStruct+0x274>)
 8001012:	f003 f866 	bl	80040e2 <arm_mat_init_f32>
	  //arm_mat_init_f32(&mat_u, 1, 1, NULL);  // Set the input control vector if needed
	  arm_mat_init_f32(&mat_P, 3, 3, KF->P);//3x3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	330c      	adds	r3, #12
 800101a:	2203      	movs	r2, #3
 800101c:	2103      	movs	r1, #3
 800101e:	483f      	ldr	r0, [pc, #252]	; (800111c <InitKalmanStruct+0x278>)
 8001020:	f003 f85f 	bl	80040e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_P_minus, 3, 3, KF->P_minus);//3x3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	33e8      	adds	r3, #232	; 0xe8
 8001028:	2203      	movs	r2, #3
 800102a:	2103      	movs	r1, #3
 800102c:	483c      	ldr	r0, [pc, #240]	; (8001120 <InitKalmanStruct+0x27c>)
 800102e:	f003 f858 	bl	80040e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_Q, 3, 3,KF->Q);//3x3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	3330      	adds	r3, #48	; 0x30
 8001036:	2203      	movs	r2, #3
 8001038:	2103      	movs	r1, #3
 800103a:	483a      	ldr	r0, [pc, #232]	; (8001124 <InitKalmanStruct+0x280>)
 800103c:	f003 f851 	bl	80040e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_C, 1, 3, KF->C);//1x3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	3390      	adds	r3, #144	; 0x90
 8001044:	2203      	movs	r2, #3
 8001046:	2101      	movs	r1, #1
 8001048:	4837      	ldr	r0, [pc, #220]	; (8001128 <InitKalmanStruct+0x284>)
 800104a:	f003 f84a 	bl	80040e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_R, 1, 1, &KF->R);//1x1
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	3354      	adds	r3, #84	; 0x54
 8001052:	2201      	movs	r2, #1
 8001054:	2101      	movs	r1, #1
 8001056:	4835      	ldr	r0, [pc, #212]	; (800112c <InitKalmanStruct+0x288>)
 8001058:	f003 f843 	bl	80040e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_S, 1, 1, KF->S);//1x1
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001062:	2201      	movs	r2, #1
 8001064:	2101      	movs	r1, #1
 8001066:	4832      	ldr	r0, [pc, #200]	; (8001130 <InitKalmanStruct+0x28c>)
 8001068:	f003 f83b 	bl	80040e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_K, 3, 1, KF->K);//3x1
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001072:	2201      	movs	r2, #1
 8001074:	2103      	movs	r1, #3
 8001076:	482f      	ldr	r0, [pc, #188]	; (8001134 <InitKalmanStruct+0x290>)
 8001078:	f003 f833 	bl	80040e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp3x3A, 3, 3, KF->temp3x3A);//3x3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8001082:	2203      	movs	r2, #3
 8001084:	2103      	movs	r1, #3
 8001086:	482c      	ldr	r0, [pc, #176]	; (8001138 <InitKalmanStruct+0x294>)
 8001088:	f003 f82b 	bl	80040e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp3x3B, 3, 3, KF->temp3x3B);//3x3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001092:	2203      	movs	r2, #3
 8001094:	2103      	movs	r1, #3
 8001096:	4829      	ldr	r0, [pc, #164]	; (800113c <InitKalmanStruct+0x298>)
 8001098:	f003 f823 	bl	80040e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp3x1, 3, 1, KF->temp3x1);//3x1
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80010a2:	2201      	movs	r2, #1
 80010a4:	2103      	movs	r1, #3
 80010a6:	4826      	ldr	r0, [pc, #152]	; (8001140 <InitKalmanStruct+0x29c>)
 80010a8:	f003 f81b 	bl	80040e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp1x3, 1, 3, KF->temp1x3);//1x3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 80010b2:	2203      	movs	r2, #3
 80010b4:	2101      	movs	r1, #1
 80010b6:	4823      	ldr	r0, [pc, #140]	; (8001144 <InitKalmanStruct+0x2a0>)
 80010b8:	f003 f813 	bl	80040e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp1x1, 1, 1, &KF->temp1x1);//1x1
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80010c2:	2201      	movs	r2, #1
 80010c4:	2101      	movs	r1, #1
 80010c6:	4820      	ldr	r0, [pc, #128]	; (8001148 <InitKalmanStruct+0x2a4>)
 80010c8:	f003 f80b 	bl	80040e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_G, 3, 1, KF->G);//3x1
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	33a0      	adds	r3, #160	; 0xa0
 80010d0:	2201      	movs	r2, #1
 80010d2:	2103      	movs	r1, #3
 80010d4:	481d      	ldr	r0, [pc, #116]	; (800114c <InitKalmanStruct+0x2a8>)
 80010d6:	f003 f804 	bl	80040e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_GT, 1, 3, KF->GT);//1x3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	33ac      	adds	r3, #172	; 0xac
 80010de:	2203      	movs	r2, #3
 80010e0:	2101      	movs	r1, #1
 80010e2:	481b      	ldr	r0, [pc, #108]	; (8001150 <InitKalmanStruct+0x2ac>)
 80010e4:	f002 fffd 	bl	80040e2 <arm_mat_init_f32>
	  arm_mat_init_f32(&eye, 3, 3, KF->I);//1x3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	33b8      	adds	r3, #184	; 0xb8
 80010ec:	2203      	movs	r2, #3
 80010ee:	2103      	movs	r1, #3
 80010f0:	4818      	ldr	r0, [pc, #96]	; (8001154 <InitKalmanStruct+0x2b0>)
 80010f2:	f002 fff6 	bl	80040e2 <arm_mat_init_f32>

}
 80010f6:	bf00      	nop
 80010f8:	3780      	adds	r7, #128	; 0x80
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bdb0      	pop	{r4, r5, r7, pc}
 80010fe:	bf00      	nop
 8001100:	0800aa30 	.word	0x0800aa30
 8001104:	0800aa54 	.word	0x0800aa54
 8001108:	0800aa78 	.word	0x0800aa78
 800110c:	20000550 	.word	0x20000550
 8001110:	20000558 	.word	0x20000558
 8001114:	20000560 	.word	0x20000560
 8001118:	20000568 	.word	0x20000568
 800111c:	20000578 	.word	0x20000578
 8001120:	20000580 	.word	0x20000580
 8001124:	20000588 	.word	0x20000588
 8001128:	200005a0 	.word	0x200005a0
 800112c:	200005a8 	.word	0x200005a8
 8001130:	200005b0 	.word	0x200005b0
 8001134:	200005b8 	.word	0x200005b8
 8001138:	200005c0 	.word	0x200005c0
 800113c:	200005c8 	.word	0x200005c8
 8001140:	200005d0 	.word	0x200005d0
 8001144:	200005d8 	.word	0x200005d8
 8001148:	200005e0 	.word	0x200005e0
 800114c:	20000598 	.word	0x20000598
 8001150:	20000590 	.word	0x20000590
 8001154:	20000570 	.word	0x20000570

08001158 <kalman_filter>:

void kalman_filter()
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
    //Process model: x_hat_minus = mat_A*x_hat
    arm_mat_mult_f32(&mat_A, &mat_x_hat, &mat_x_hat_minus);			//A*X
 800115c:	4a39      	ldr	r2, [pc, #228]	; (8001244 <kalman_filter+0xec>)
 800115e:	493a      	ldr	r1, [pc, #232]	; (8001248 <kalman_filter+0xf0>)
 8001160:	483a      	ldr	r0, [pc, #232]	; (800124c <kalman_filter+0xf4>)
 8001162:	f003 fb4d 	bl	8004800 <arm_mat_mult_f32>
    // If an input control vector is used:
    // arm_mat_mult_f32(&mat_B, &mat_u, &mat_temp3x3A);
    // arm_mat_add_f32(&mat_x_hat_minus, &mat_temp3x3A, &mat_x_hat_minus);

    // Predict covariance matrix: P_minus = A * P * A^T + Q
    arm_mat_trans_f32(&mat_A, &mat_temp3x3A);					    //AT
 8001166:	493a      	ldr	r1, [pc, #232]	; (8001250 <kalman_filter+0xf8>)
 8001168:	4838      	ldr	r0, [pc, #224]	; (800124c <kalman_filter+0xf4>)
 800116a:	f003 fc34 	bl	80049d6 <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_A, &mat_P, &mat_temp3x3B);			    //A*P
 800116e:	4a39      	ldr	r2, [pc, #228]	; (8001254 <kalman_filter+0xfc>)
 8001170:	4939      	ldr	r1, [pc, #228]	; (8001258 <kalman_filter+0x100>)
 8001172:	4836      	ldr	r0, [pc, #216]	; (800124c <kalman_filter+0xf4>)
 8001174:	f003 fb44 	bl	8004800 <arm_mat_mult_f32>
    arm_mat_mult_f32(&mat_temp3x3B, &mat_temp3x3A, &mat_P_minus);	//A*P*AT
 8001178:	4a38      	ldr	r2, [pc, #224]	; (800125c <kalman_filter+0x104>)
 800117a:	4935      	ldr	r1, [pc, #212]	; (8001250 <kalman_filter+0xf8>)
 800117c:	4835      	ldr	r0, [pc, #212]	; (8001254 <kalman_filter+0xfc>)
 800117e:	f003 fb3f 	bl	8004800 <arm_mat_mult_f32>
    arm_mat_trans_f32(&mat_G, &mat_GT);								//GT
 8001182:	4937      	ldr	r1, [pc, #220]	; (8001260 <kalman_filter+0x108>)
 8001184:	4837      	ldr	r0, [pc, #220]	; (8001264 <kalman_filter+0x10c>)
 8001186:	f003 fc26 	bl	80049d6 <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_G, &mat_GT, &mat_Q);						//G*GT
 800118a:	4a37      	ldr	r2, [pc, #220]	; (8001268 <kalman_filter+0x110>)
 800118c:	4934      	ldr	r1, [pc, #208]	; (8001260 <kalman_filter+0x108>)
 800118e:	4835      	ldr	r0, [pc, #212]	; (8001264 <kalman_filter+0x10c>)
 8001190:	f003 fb36 	bl	8004800 <arm_mat_mult_f32>
    arm_mat_scale_f32(&mat_Q,KF.var_Q, &mat_Q);						//G*GT*var_q
 8001194:	4b35      	ldr	r3, [pc, #212]	; (800126c <kalman_filter+0x114>)
 8001196:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800119a:	4933      	ldr	r1, [pc, #204]	; (8001268 <kalman_filter+0x110>)
 800119c:	eeb0 0a67 	vmov.f32	s0, s15
 80011a0:	4831      	ldr	r0, [pc, #196]	; (8001268 <kalman_filter+0x110>)
 80011a2:	f003 fba7 	bl	80048f4 <arm_mat_scale_f32>
    arm_mat_add_f32(&mat_P_minus, &mat_Q, &mat_P_minus);			//A * P * A^T + Q
 80011a6:	4a2d      	ldr	r2, [pc, #180]	; (800125c <kalman_filter+0x104>)
 80011a8:	492f      	ldr	r1, [pc, #188]	; (8001268 <kalman_filter+0x110>)
 80011aa:	482c      	ldr	r0, [pc, #176]	; (800125c <kalman_filter+0x104>)
 80011ac:	f002 ff5e 	bl	800406c <arm_mat_add_f32>

    // Calculate innovation covariance: S = C * P_minus * C^T + R
    arm_mat_mult_f32(&mat_C, &mat_P_minus, &mat_temp1x3);			//C*P
 80011b0:	4a2f      	ldr	r2, [pc, #188]	; (8001270 <kalman_filter+0x118>)
 80011b2:	492a      	ldr	r1, [pc, #168]	; (800125c <kalman_filter+0x104>)
 80011b4:	482f      	ldr	r0, [pc, #188]	; (8001274 <kalman_filter+0x11c>)
 80011b6:	f003 fb23 	bl	8004800 <arm_mat_mult_f32>
    arm_mat_trans_f32(&mat_C, &mat_temp3x1);						//CT
 80011ba:	492f      	ldr	r1, [pc, #188]	; (8001278 <kalman_filter+0x120>)
 80011bc:	482d      	ldr	r0, [pc, #180]	; (8001274 <kalman_filter+0x11c>)
 80011be:	f003 fc0a 	bl	80049d6 <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_temp1x3, &mat_temp3x1, &mat_temp1x1);		//C*P*C^T
 80011c2:	4a2e      	ldr	r2, [pc, #184]	; (800127c <kalman_filter+0x124>)
 80011c4:	492c      	ldr	r1, [pc, #176]	; (8001278 <kalman_filter+0x120>)
 80011c6:	482a      	ldr	r0, [pc, #168]	; (8001270 <kalman_filter+0x118>)
 80011c8:	f003 fb1a 	bl	8004800 <arm_mat_mult_f32>
    arm_mat_add_f32(&mat_temp1x1, &mat_R, &mat_S);					//C*P*C^T + R
 80011cc:	4a2c      	ldr	r2, [pc, #176]	; (8001280 <kalman_filter+0x128>)
 80011ce:	492d      	ldr	r1, [pc, #180]	; (8001284 <kalman_filter+0x12c>)
 80011d0:	482a      	ldr	r0, [pc, #168]	; (800127c <kalman_filter+0x124>)
 80011d2:	f002 ff4b 	bl	800406c <arm_mat_add_f32>

    //==> Calculate Kalman gain: K = P_minus * C^T * S^(-1)
    arm_mat_inverse_f32(&mat_S, &mat_temp1x1);						//inv(S)
 80011d6:	4929      	ldr	r1, [pc, #164]	; (800127c <kalman_filter+0x124>)
 80011d8:	4829      	ldr	r0, [pc, #164]	; (8001280 <kalman_filter+0x128>)
 80011da:	f002 ff9a 	bl	8004112 <arm_mat_inverse_f32>
    arm_mat_mult_f32(&mat_P_minus, &mat_temp3x1, &mat_temp3x3A);	//P*CT
 80011de:	4a1c      	ldr	r2, [pc, #112]	; (8001250 <kalman_filter+0xf8>)
 80011e0:	4925      	ldr	r1, [pc, #148]	; (8001278 <kalman_filter+0x120>)
 80011e2:	481e      	ldr	r0, [pc, #120]	; (800125c <kalman_filter+0x104>)
 80011e4:	f003 fb0c 	bl	8004800 <arm_mat_mult_f32>
    arm_mat_mult_f32(&mat_temp3x3A, &mat_temp1x1, &mat_K);			//P*CT*inv(S)
 80011e8:	4a27      	ldr	r2, [pc, #156]	; (8001288 <kalman_filter+0x130>)
 80011ea:	4924      	ldr	r1, [pc, #144]	; (800127c <kalman_filter+0x124>)
 80011ec:	4818      	ldr	r0, [pc, #96]	; (8001250 <kalman_filter+0xf8>)
 80011ee:	f003 fb07 	bl	8004800 <arm_mat_mult_f32>

    //==> Update state estimate: x_hat = x_hat_minus + K * (z - C * x_hat_minus)
    arm_mat_mult_f32(&mat_C, &mat_x_hat_minus, &mat_temp1x1);		//C*X
 80011f2:	4a22      	ldr	r2, [pc, #136]	; (800127c <kalman_filter+0x124>)
 80011f4:	4913      	ldr	r1, [pc, #76]	; (8001244 <kalman_filter+0xec>)
 80011f6:	481f      	ldr	r0, [pc, #124]	; (8001274 <kalman_filter+0x11c>)
 80011f8:	f003 fb02 	bl	8004800 <arm_mat_mult_f32>
    //float32_t innovation = z - temp1x1;								//Z-C*X
    arm_mat_scale_f32(&mat_K, KF.z - KF.temp1x1, &mat_temp3x1);			//K*(Z-C*X)
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <kalman_filter+0x114>)
 80011fe:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8001202:	4b1a      	ldr	r3, [pc, #104]	; (800126c <kalman_filter+0x114>)
 8001204:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
 8001208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120c:	491a      	ldr	r1, [pc, #104]	; (8001278 <kalman_filter+0x120>)
 800120e:	eeb0 0a67 	vmov.f32	s0, s15
 8001212:	481d      	ldr	r0, [pc, #116]	; (8001288 <kalman_filter+0x130>)
 8001214:	f003 fb6e 	bl	80048f4 <arm_mat_scale_f32>
    arm_mat_add_f32(&mat_x_hat_minus, &mat_temp3x1, &mat_x_hat);	//X - K*(Z-C*X) ========> X estimate
 8001218:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <kalman_filter+0xf0>)
 800121a:	4917      	ldr	r1, [pc, #92]	; (8001278 <kalman_filter+0x120>)
 800121c:	4809      	ldr	r0, [pc, #36]	; (8001244 <kalman_filter+0xec>)
 800121e:	f002 ff25 	bl	800406c <arm_mat_add_f32>

    // Update covariance matrix: P = (I - K * C) * P_minus
    arm_mat_mult_f32(&mat_K, &mat_C, &mat_temp3x3B);				//K*C
 8001222:	4a0c      	ldr	r2, [pc, #48]	; (8001254 <kalman_filter+0xfc>)
 8001224:	4913      	ldr	r1, [pc, #76]	; (8001274 <kalman_filter+0x11c>)
 8001226:	4818      	ldr	r0, [pc, #96]	; (8001288 <kalman_filter+0x130>)
 8001228:	f003 faea 	bl	8004800 <arm_mat_mult_f32>
    arm_mat_sub_f32(&eye, &mat_P_minus, &mat_temp3x3A);				//I - K*C
 800122c:	4a08      	ldr	r2, [pc, #32]	; (8001250 <kalman_filter+0xf8>)
 800122e:	490b      	ldr	r1, [pc, #44]	; (800125c <kalman_filter+0x104>)
 8001230:	4816      	ldr	r0, [pc, #88]	; (800128c <kalman_filter+0x134>)
 8001232:	f003 fb95 	bl	8004960 <arm_mat_sub_f32>
    arm_mat_mult_f32(&mat_temp3x3A, &mat_P_minus, &mat_P);			//(I - K*C)*P ===========> P estimate
 8001236:	4a08      	ldr	r2, [pc, #32]	; (8001258 <kalman_filter+0x100>)
 8001238:	4908      	ldr	r1, [pc, #32]	; (800125c <kalman_filter+0x104>)
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <kalman_filter+0xf8>)
 800123c:	f003 fae0 	bl	8004800 <arm_mat_mult_f32>
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000560 	.word	0x20000560
 8001248:	20000558 	.word	0x20000558
 800124c:	20000550 	.word	0x20000550
 8001250:	200005c0 	.word	0x200005c0
 8001254:	200005c8 	.word	0x200005c8
 8001258:	20000578 	.word	0x20000578
 800125c:	20000580 	.word	0x20000580
 8001260:	20000590 	.word	0x20000590
 8001264:	20000598 	.word	0x20000598
 8001268:	20000588 	.word	0x20000588
 800126c:	200003d0 	.word	0x200003d0
 8001270:	200005d8 	.word	0x200005d8
 8001274:	200005a0 	.word	0x200005a0
 8001278:	200005d0 	.word	0x200005d0
 800127c:	200005e0 	.word	0x200005e0
 8001280:	200005b0 	.word	0x200005b0
 8001284:	200005a8 	.word	0x200005a8
 8001288:	200005b8 	.word	0x200005b8
 800128c:	20000570 	.word	0x20000570

08001290 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <modbus_1t5_Timeout+0x1c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2201      	movs	r2, #1
 800129e:	751a      	strb	r2, [r3, #20]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	2000029c 	.word	0x2000029c

080012b0 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80012b8:	4b04      	ldr	r3, [pc, #16]	; (80012cc <modbus_3t5_Timeout+0x1c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2201      	movs	r2, #1
 80012be:	755a      	strb	r2, [r3, #21]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	2000029c 	.word	0x2000029c

080012d0 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <modbus_UART_Recived+0x60>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2201      	movs	r2, #1
 80012e0:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <modbus_UART_Recived+0x60>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 80012ea:	1c59      	adds	r1, r3, #1
 80012ec:	b289      	uxth	r1, r1
 80012ee:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 80012f2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80012f6:	d210      	bcs.n	800131a <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80012f8:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <modbus_UART_Recived+0x60>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	68d8      	ldr	r0, [r3, #12]
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <modbus_UART_Recived+0x60>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <modbus_UART_Recived+0x60>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800130a:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800130e:	4413      	add	r3, r2
 8001310:	3302      	adds	r3, #2
 8001312:	2201      	movs	r2, #1
 8001314:	4619      	mov	r1, r3
 8001316:	f006 fe71 	bl	8007ffc <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 800131a:	4b05      	ldr	r3, [pc, #20]	; (8001330 <modbus_UART_Recived+0x60>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2200      	movs	r2, #0
 8001324:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	2000029c 	.word	0x2000029c

08001334 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800133e:	4a24      	ldr	r2, [pc, #144]	; (80013d0 <Modbus_init+0x9c>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8001344:	4b22      	ldr	r3, [pc, #136]	; (80013d0 <Modbus_init+0x9c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 800134c:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <Modbus_init+0x9c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	4a20      	ldr	r2, [pc, #128]	; (80013d4 <Modbus_init+0xa0>)
 8001354:	2114      	movs	r1, #20
 8001356:	4618      	mov	r0, r3
 8001358:	f006 f854 	bl	8007404 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <Modbus_init+0x9c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	4a1d      	ldr	r2, [pc, #116]	; (80013d8 <Modbus_init+0xa4>)
 8001364:	210e      	movs	r1, #14
 8001366:	4618      	mov	r0, r3
 8001368:	f006 f84c 	bl	8007404 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 800136c:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <Modbus_init+0x9c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	4a1a      	ldr	r2, [pc, #104]	; (80013dc <Modbus_init+0xa8>)
 8001374:	2103      	movs	r1, #3
 8001376:	4618      	mov	r0, r3
 8001378:	f006 fd98 	bl	8007eac <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800137c:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <Modbus_init+0x9c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	68d8      	ldr	r0, [r3, #12]
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <Modbus_init+0x9c>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <Modbus_init+0x9c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800138e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001392:	4413      	add	r3, r2
 8001394:	3302      	adds	r3, #2
 8001396:	2201      	movs	r2, #1
 8001398:	4619      	mov	r1, r3
 800139a:	f006 fe2f 	bl	8007ffc <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <Modbus_init+0x9c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d10c      	bne.n	80013c8 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <Modbus_init+0x9c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f005 f8cf 	bl	8006558 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80013ba:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <Modbus_init+0x9c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f005 fb0e 	bl	80069e4 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	2000029c 	.word	0x2000029c
 80013d4:	08001291 	.word	0x08001291
 80013d8:	080012b1 	.word	0x080012b1
 80013dc:	080012d1 	.word	0x080012d1

080013e0 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 80013ec:	23ff      	movs	r3, #255	; 0xff
 80013ee:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 80013f0:	23ff      	movs	r3, #255	; 0xff
 80013f2:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 80013f4:	e013      	b.n	800141e <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	1c5a      	adds	r2, r3, #1
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	781a      	ldrb	r2, [r3, #0]
 80013fe:	7bbb      	ldrb	r3, [r7, #14]
 8001400:	4053      	eors	r3, r2
 8001402:	b2db      	uxtb	r3, r3
 8001404:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001406:	4a0f      	ldr	r2, [pc, #60]	; (8001444 <CRC16+0x64>)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	4413      	add	r3, r2
 800140c:	781a      	ldrb	r2, [r3, #0]
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	4053      	eors	r3, r2
 8001412:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001414:	4a0c      	ldr	r2, [pc, #48]	; (8001448 <CRC16+0x68>)
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	4413      	add	r3, r2
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800141e:	883b      	ldrh	r3, [r7, #0]
 8001420:	1e5a      	subs	r2, r3, #1
 8001422:	803a      	strh	r2, [r7, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1e6      	bne.n	80013f6 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	021b      	lsls	r3, r3, #8
 800142c:	b21a      	sxth	r2, r3
 800142e:	7bbb      	ldrb	r3, [r7, #14]
 8001430:	b21b      	sxth	r3, r3
 8001432:	4313      	orrs	r3, r2
 8001434:	b21b      	sxth	r3, r3
 8001436:	b29b      	uxth	r3, r3
}
 8001438:	4618      	mov	r0, r3
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	20000100 	.word	0x20000100
 8001448:	20000000 	.word	0x20000000

0800144c <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8001452:	4b81      	ldr	r3, [pc, #516]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	7e1b      	ldrb	r3, [r3, #24]
 8001458:	3b01      	subs	r3, #1
 800145a:	2b03      	cmp	r3, #3
 800145c:	d80a      	bhi.n	8001474 <Modbus_Protocal_Worker+0x28>
 800145e:	a201      	add	r2, pc, #4	; (adr r2, 8001464 <Modbus_Protocal_Worker+0x18>)
 8001460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001464:	0800147f 	.word	0x0800147f
 8001468:	0800161f 	.word	0x0800161f
 800146c:	0800150b 	.word	0x0800150b
 8001470:	08001531 	.word	0x08001531
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001474:	4b78      	ldr	r3, [pc, #480]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2201      	movs	r2, #1
 800147a:	761a      	strb	r2, [r3, #24]
		break;
 800147c:	e0e8      	b.n	8001650 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800147e:	4b76      	ldr	r3, [pc, #472]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001486:	2b00      	cmp	r3, #0
 8001488:	d002      	beq.n	8001490 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 800148a:	f000 f9dd 	bl	8001848 <Modbus_Emission>
 800148e:	e01c      	b.n	80014ca <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8001490:	4b71      	ldr	r3, [pc, #452]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	7d9b      	ldrb	r3, [r3, #22]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d017      	beq.n	80014ca <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 800149a:	4b6f      	ldr	r3, [pc, #444]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2200      	movs	r2, #0
 80014a0:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80014a2:	4b6d      	ldr	r3, [pc, #436]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2200      	movs	r2, #0
 80014a8:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 80014aa:	4b6b      	ldr	r3, [pc, #428]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b68      	ldr	r3, [pc, #416]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f042 0201 	orr.w	r2, r2, #1
 80014c0:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80014c2:	4b65      	ldr	r3, [pc, #404]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2203      	movs	r2, #3
 80014c8:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80014ca:	4b63      	ldr	r3, [pc, #396]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b20      	cmp	r3, #32
 80014d8:	f040 80b3 	bne.w	8001642 <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80014dc:	4b5e      	ldr	r3, [pc, #376]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80014e6:	4b5c      	ldr	r3, [pc, #368]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68d8      	ldr	r0, [r3, #12]
 80014ec:	4b5a      	ldr	r3, [pc, #360]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b59      	ldr	r3, [pc, #356]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80014f8:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80014fc:	4413      	add	r3, r2
 80014fe:	3302      	adds	r3, #2
 8001500:	2201      	movs	r2, #1
 8001502:	4619      	mov	r1, r3
 8001504:	f006 fd7a 	bl	8007ffc <HAL_UART_Receive_IT>
		}
		break;
 8001508:	e09b      	b.n	8001642 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800150a:	4b53      	ldr	r3, [pc, #332]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	7d1b      	ldrb	r3, [r3, #20]
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 8098 	beq.w	8001646 <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8001516:	4b50      	ldr	r3, [pc, #320]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2200      	movs	r2, #0
 800151c:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800151e:	4b4e      	ldr	r3, [pc, #312]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	22fe      	movs	r2, #254	; 0xfe
 8001524:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001526:	4b4c      	ldr	r3, [pc, #304]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2204      	movs	r2, #4
 800152c:	761a      	strb	r2, [r3, #24]
		}
		break;
 800152e:	e08a      	b.n	8001646 <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8001530:	4b49      	ldr	r3, [pc, #292]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	7d9b      	ldrb	r3, [r3, #22]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d009      	beq.n	800154e <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 800153a:	4b47      	ldr	r3, [pc, #284]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d103      	bne.n	800154e <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001546:	4b44      	ldr	r3, [pc, #272]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	22ff      	movs	r2, #255	; 0xff
 800154c:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800154e:	4b42      	ldr	r3, [pc, #264]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001556:	f113 0f02 	cmn.w	r3, #2
 800155a:	d150      	bne.n	80015fe <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 800155c:	4b3e      	ldr	r3, [pc, #248]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2200      	movs	r2, #0
 8001562:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001564:	4b3c      	ldr	r3, [pc, #240]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f203 2272 	addw	r2, r3, #626	; 0x272
 800156c:	4b3a      	ldr	r3, [pc, #232]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001574:	3b02      	subs	r3, #2
 8001576:	4619      	mov	r1, r3
 8001578:	4610      	mov	r0, r2
 800157a:	f7ff ff31 	bl	80013e0 <CRC16>
 800157e:	4603      	mov	r3, r0
 8001580:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001582:	793a      	ldrb	r2, [r7, #4]
 8001584:	4b34      	ldr	r3, [pc, #208]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 8001586:	6819      	ldr	r1, [r3, #0]
 8001588:	4b33      	ldr	r3, [pc, #204]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001590:	3b02      	subs	r3, #2
 8001592:	440b      	add	r3, r1
 8001594:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001598:	429a      	cmp	r2, r3
 800159a:	d10c      	bne.n	80015b6 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 800159c:	797a      	ldrb	r2, [r7, #5]
 800159e:	4b2e      	ldr	r3, [pc, #184]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80015a0:	6819      	ldr	r1, [r3, #0]
 80015a2:	4b2d      	ldr	r3, [pc, #180]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80015aa:	3b01      	subs	r3, #1
 80015ac:	440b      	add	r3, r1
 80015ae:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d004      	beq.n	80015c0 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80015b6:	4b28      	ldr	r3, [pc, #160]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	22ff      	movs	r2, #255	; 0xff
 80015bc:	75da      	strb	r2, [r3, #23]
				break;
 80015be:	e047      	b.n	8001650 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80015c0:	4b25      	ldr	r3, [pc, #148]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 80015c8:	4b23      	ldr	r3, [pc, #140]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d113      	bne.n	80015fa <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80015d2:	4b21      	ldr	r3, [pc, #132]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80015da:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 80015e2:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80015e4:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80015ec:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80015ee:	461a      	mov	r2, r3
 80015f0:	f007 fec6 	bl	8009380 <memcpy>

			//execute command
			Modbus_frame_response();
 80015f4:	f000 f910 	bl	8001818 <Modbus_frame_response>
 80015f8:	e001      	b.n	80015fe <Modbus_Protocal_Worker+0x1b2>
				break;
 80015fa:	bf00      	nop
					}
		break;


	}
}
 80015fc:	e028      	b.n	8001650 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 80015fe:	4b16      	ldr	r3, [pc, #88]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	7d5b      	ldrb	r3, [r3, #21]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d020      	beq.n	800164a <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2201      	movs	r2, #1
 800160e:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	4618      	mov	r0, r3
 8001618:	f006 fd9e 	bl	8008158 <HAL_UART_AbortReceive>
		break;
 800161c:	e015      	b.n	800164a <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800161e:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b20      	cmp	r3, #32
 800162c:	d10f      	bne.n	800164e <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 800162e:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2201      	movs	r2, #1
 800163e:	761a      	strb	r2, [r3, #24]
		break;
 8001640:	e005      	b.n	800164e <Modbus_Protocal_Worker+0x202>
		break;
 8001642:	bf00      	nop
 8001644:	e004      	b.n	8001650 <Modbus_Protocal_Worker+0x204>
		break;
 8001646:	bf00      	nop
 8001648:	e002      	b.n	8001650 <Modbus_Protocal_Worker+0x204>
		break;
 800164a:	bf00      	nop
 800164c:	e000      	b.n	8001650 <Modbus_Protocal_Worker+0x204>
		break;
 800164e:	bf00      	nop
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	2000029c 	.word	0x2000029c

0800165c <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001662:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <modbusWrite1Register+0x80>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	7e9b      	ldrb	r3, [r3, #26]
 8001668:	b29b      	uxth	r3, r3
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	b29a      	uxth	r2, r3
 800166e:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <modbusWrite1Register+0x80>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	7edb      	ldrb	r3, [r3, #27]
 8001674:	b29b      	uxth	r3, r3
 8001676:	4413      	add	r3, r2
 8001678:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800167a:	88fa      	ldrh	r2, [r7, #6]
 800167c:	4b17      	ldr	r3, [pc, #92]	; (80016dc <modbusWrite1Register+0x80>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	429a      	cmp	r2, r3
 8001684:	d903      	bls.n	800168e <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001686:	2002      	movs	r0, #2
 8001688:	f000 f8a4 	bl	80017d4 <ModbusErrorReply>
			 return;
 800168c:	e023      	b.n	80016d6 <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800168e:	4b13      	ldr	r3, [pc, #76]	; (80016dc <modbusWrite1Register+0x80>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	4b12      	ldr	r3, [pc, #72]	; (80016dc <modbusWrite1Register+0x80>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6859      	ldr	r1, [r3, #4]
 8001698:	88fb      	ldrh	r3, [r7, #6]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	440b      	add	r3, r1
 800169e:	7f12      	ldrb	r2, [r2, #28]
 80016a0:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <modbusWrite1Register+0x80>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <modbusWrite1Register+0x80>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6859      	ldr	r1, [r3, #4]
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	440b      	add	r3, r1
 80016b2:	7f52      	ldrb	r2, [r2, #29]
 80016b4:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <modbusWrite1Register+0x80>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 80016be:	4b07      	ldr	r3, [pc, #28]	; (80016dc <modbusWrite1Register+0x80>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 80016c4:	2208      	movs	r2, #8
 80016c6:	4619      	mov	r1, r3
 80016c8:	f007 fe5a 	bl	8009380 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <modbusWrite1Register+0x80>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2205      	movs	r2, #5
 80016d2:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	2000029c 	.word	0x2000029c

080016e0 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80016e0:	b590      	push	{r4, r7, lr}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80016e6:	4b3a      	ldr	r3, [pc, #232]	; (80017d0 <modbusRead1Register+0xf0>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	7f1b      	ldrb	r3, [r3, #28]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	4b37      	ldr	r3, [pc, #220]	; (80017d0 <modbusRead1Register+0xf0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	7f5b      	ldrb	r3, [r3, #29]
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	4413      	add	r3, r2
 80016fc:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 80016fe:	4b34      	ldr	r3, [pc, #208]	; (80017d0 <modbusRead1Register+0xf0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	7e9b      	ldrb	r3, [r3, #26]
 8001704:	b29b      	uxth	r3, r3
 8001706:	021b      	lsls	r3, r3, #8
 8001708:	b29a      	uxth	r2, r3
 800170a:	4b31      	ldr	r3, [pc, #196]	; (80017d0 <modbusRead1Register+0xf0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	7edb      	ldrb	r3, [r3, #27]
 8001710:	b29b      	uxth	r3, r3
 8001712:	4413      	add	r3, r2
 8001714:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d002      	beq.n	8001722 <modbusRead1Register+0x42>
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	2b7d      	cmp	r3, #125	; 0x7d
 8001720:	d903      	bls.n	800172a <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001722:	2003      	movs	r0, #3
 8001724:	f000 f856 	bl	80017d4 <ModbusErrorReply>
		 return;
 8001728:	e04e      	b.n	80017c8 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800172a:	88ba      	ldrh	r2, [r7, #4]
 800172c:	4b28      	ldr	r3, [pc, #160]	; (80017d0 <modbusRead1Register+0xf0>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	429a      	cmp	r2, r3
 8001734:	d808      	bhi.n	8001748 <modbusRead1Register+0x68>
 8001736:	88ba      	ldrh	r2, [r7, #4]
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	4413      	add	r3, r2
 800173c:	461a      	mov	r2, r3
 800173e:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <modbusRead1Register+0xf0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	429a      	cmp	r2, r3
 8001746:	d903      	bls.n	8001750 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001748:	2002      	movs	r0, #2
 800174a:	f000 f843 	bl	80017d4 <ModbusErrorReply>
		 return;
 800174e:	e03b      	b.n	80017c8 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001750:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <modbusRead1Register+0xf0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2203      	movs	r2, #3
 8001756:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	b2da      	uxtb	r2, r3
 800175e:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <modbusRead1Register+0xf0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	0052      	lsls	r2, r2, #1
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 800176a:	2400      	movs	r4, #0
 800176c:	e020      	b.n	80017b0 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 800176e:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <modbusRead1Register+0xf0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	88bb      	ldrh	r3, [r7, #4]
 8001776:	4423      	add	r3, r4
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	18d1      	adds	r1, r2, r3
 800177c:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <modbusRead1Register+0xf0>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	1c63      	adds	r3, r4, #1
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	7849      	ldrb	r1, [r1, #1]
 8001786:	4413      	add	r3, r2
 8001788:	460a      	mov	r2, r1
 800178a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <modbusRead1Register+0xf0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	88bb      	ldrh	r3, [r7, #4]
 8001796:	4423      	add	r3, r4
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	18d1      	adds	r1, r2, r3
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <modbusRead1Register+0xf0>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	0063      	lsls	r3, r4, #1
 80017a2:	3303      	adds	r3, #3
 80017a4:	7809      	ldrb	r1, [r1, #0]
 80017a6:	4413      	add	r3, r2
 80017a8:	460a      	mov	r2, r1
 80017aa:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 80017ae:	3401      	adds	r4, #1
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	429c      	cmp	r4, r3
 80017b4:	dbdb      	blt.n	800176e <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80017b6:	88fb      	ldrh	r3, [r7, #6]
 80017b8:	3301      	adds	r3, #1
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <modbusRead1Register+0xf0>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	0052      	lsls	r2, r2, #1
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd90      	pop	{r4, r7, pc}
 80017ce:	bf00      	nop
 80017d0:	2000029c 	.word	0x2000029c

080017d4 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80017de:	4b0d      	ldr	r3, [pc, #52]	; (8001814 <ModbusErrorReply+0x40>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	7e5a      	ldrb	r2, [r3, #25]
 80017e4:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <ModbusErrorReply+0x40>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <ModbusErrorReply+0x40>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	79fa      	ldrb	r2, [r7, #7]
 80017f8:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <ModbusErrorReply+0x40>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2202      	movs	r2, #2
 8001802:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	2000029c 	.word	0x2000029c

08001818 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 800181c:	4b09      	ldr	r3, [pc, #36]	; (8001844 <Modbus_frame_response+0x2c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	7e5b      	ldrb	r3, [r3, #25]
 8001822:	2b03      	cmp	r3, #3
 8001824:	d004      	beq.n	8001830 <Modbus_frame_response+0x18>
 8001826:	2b06      	cmp	r3, #6
 8001828:	d105      	bne.n	8001836 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800182a:	f7ff ff17 	bl	800165c <modbusWrite1Register>
		break;
 800182e:	e006      	b.n	800183e <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001830:	f7ff ff56 	bl	80016e0 <modbusRead1Register>
		break;
 8001834:	e003      	b.n	800183e <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001836:	2001      	movs	r0, #1
 8001838:	f7ff ffcc 	bl	80017d4 <ModbusErrorReply>
		break;
 800183c:	bf00      	nop

	}
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	2000029c 	.word	0x2000029c

08001848 <Modbus_Emission>:

void Modbus_Emission()
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800184e:	4b3d      	ldr	r3, [pc, #244]	; (8001944 <Modbus_Emission+0xfc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b20      	cmp	r3, #32
 800185c:	d15e      	bne.n	800191c <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 800185e:	4b39      	ldr	r3, [pc, #228]	; (8001944 <Modbus_Emission+0xfc>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4b38      	ldr	r3, [pc, #224]	; (8001944 <Modbus_Emission+0xfc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	7812      	ldrb	r2, [r2, #0]
 8001868:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 800186c:	4b35      	ldr	r3, [pc, #212]	; (8001944 <Modbus_Emission+0xfc>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8001874:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001876:	4b33      	ldr	r3, [pc, #204]	; (8001944 <Modbus_Emission+0xfc>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 800187e:	4b31      	ldr	r3, [pc, #196]	; (8001944 <Modbus_Emission+0xfc>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 8001886:	461a      	mov	r2, r3
 8001888:	f007 fd7a 	bl	8009380 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 800188c:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <Modbus_Emission+0xfc>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001894:	b29a      	uxth	r2, r3
 8001896:	4b2b      	ldr	r3, [pc, #172]	; (8001944 <Modbus_Emission+0xfc>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	3203      	adds	r2, #3
 800189c:	b292      	uxth	r2, r2
 800189e:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80018a2:	4b28      	ldr	r3, [pc, #160]	; (8001944 <Modbus_Emission+0xfc>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80018aa:	4b26      	ldr	r3, [pc, #152]	; (8001944 <Modbus_Emission+0xfc>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80018b2:	3b02      	subs	r3, #2
 80018b4:	4619      	mov	r1, r3
 80018b6:	4610      	mov	r0, r2
 80018b8:	f7ff fd92 	bl	80013e0 <CRC16>
 80018bc:	4603      	mov	r3, r0
 80018be:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80018c0:	4b20      	ldr	r3, [pc, #128]	; (8001944 <Modbus_Emission+0xfc>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4b1f      	ldr	r3, [pc, #124]	; (8001944 <Modbus_Emission+0xfc>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80018cc:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80018ce:	7939      	ldrb	r1, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	460a      	mov	r2, r1
 80018d4:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80018d8:	4b1a      	ldr	r3, [pc, #104]	; (8001944 <Modbus_Emission+0xfc>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <Modbus_Emission+0xfc>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80018e4:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80018e6:	7979      	ldrb	r1, [r7, #5]
 80018e8:	4413      	add	r3, r2
 80018ea:	460a      	mov	r2, r1
 80018ec:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80018f0:	4b14      	ldr	r3, [pc, #80]	; (8001944 <Modbus_Emission+0xfc>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b20      	cmp	r3, #32
 80018fe:	d10d      	bne.n	800191c <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001900:	4b10      	ldr	r3, [pc, #64]	; (8001944 <Modbus_Emission+0xfc>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <Modbus_Emission+0xfc>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800190e:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <Modbus_Emission+0xfc>)
 8001910:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001912:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001916:	461a      	mov	r2, r3
 8001918:	f006 fba0 	bl	800805c <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 800191c:	4b09      	ldr	r3, [pc, #36]	; (8001944 <Modbus_Emission+0xfc>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2200      	movs	r2, #0
 8001922:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001924:	4b07      	ldr	r3, [pc, #28]	; (8001944 <Modbus_Emission+0xfc>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2200      	movs	r2, #0
 800192a:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <Modbus_Emission+0xfc>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2200      	movs	r2, #0
 8001932:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <Modbus_Emission+0xfc>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2202      	movs	r2, #2
 800193a:	761a      	strb	r2, [r3, #24]
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	2000029c 	.word	0x2000029c

08001948 <PIDSetup>:
 */

#include "PIDController.h"

void PIDSetup(PID* temp,float32_t Kp, float32_t Ki, float32_t Kd, float32_t tolerance)
{
 8001948:	b480      	push	{r7}
 800194a:	b087      	sub	sp, #28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6178      	str	r0, [r7, #20]
 8001950:	ed87 0a04 	vstr	s0, [r7, #16]
 8001954:	edc7 0a03 	vstr	s1, [r7, #12]
 8001958:	ed87 1a02 	vstr	s2, [r7, #8]
 800195c:	edc7 1a01 	vstr	s3, [r7, #4]
	temp->Kp = Kp;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	601a      	str	r2, [r3, #0]
	temp->Ki = Ki;
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	605a      	str	r2, [r3, #4]
	temp->Kd = Kd;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	609a      	str	r2, [r3, #8]
	temp->tolerance = tolerance;
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	629a      	str	r2, [r3, #40]	; 0x28
	temp->U = 0;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]
	temp->Delta_U = 0;
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	2200      	movs	r2, #0
 8001982:	611a      	str	r2, [r3, #16]
	temp->U_minus = 0;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2200      	movs	r2, #0
 8001988:	615a      	str	r2, [r3, #20]
	temp->Error = 0;
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	619a      	str	r2, [r3, #24]
	temp->Error_minus = 0;
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
	temp->Error_minus2 = 0;
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	621a      	str	r2, [r3, #32]
}
 80019a2:	bf00      	nop
 80019a4:	371c      	adds	r7, #28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <PIDRun>:

void PIDRun(PID* temp, float32_t Feedback, float32_t Ref)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b085      	sub	sp, #20
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	60f8      	str	r0, [r7, #12]
 80019b6:	ed87 0a02 	vstr	s0, [r7, #8]
 80019ba:	edc7 0a01 	vstr	s1, [r7, #4]
	temp->Error = Ref - Feedback;
 80019be:	ed97 7a01 	vldr	s14, [r7, #4]
 80019c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80019c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	edc3 7a06 	vstr	s15, [r3, #24]
	if(temp->Error > 0)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	edd3 7a06 	vldr	s15, [r3, #24]
 80019d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019de:	dd04      	ble.n	80019ea <PIDRun+0x3c>
	{
		temp->MotorDir = 0;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80019e8:	e00b      	b.n	8001a02 <PIDRun+0x54>
	}
	else if (temp->Error < 0)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	edd3 7a06 	vldr	s15, [r3, #24]
 80019f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f8:	d503      	bpl.n	8001a02 <PIDRun+0x54>
	{
		temp->MotorDir = 1;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
	//U Update
	temp->Delta_U = (temp->Kp + temp->Ki + temp->Kd) * temp->Error
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	ed93 7a00 	vldr	s14, [r3]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a22:	ee27 7a27 	vmul.f32	s14, s14, s15
			  - (temp->Kp + 2*temp->Kd) * temp->Error_minus
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	edd3 6a00 	vldr	s13, [r3]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a32:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a36:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a44:	ee37 7a67 	vsub.f32	s14, s14, s15
			  + temp->Kd * temp->Error_minus2;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a58:	ee77 7a27 	vadd.f32	s15, s14, s15
	temp->Delta_U = (temp->Kp + temp->Ki + temp->Kd) * temp->Error
 8001a5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a60:	ee17 2a90 	vmov	r2, s15
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	611a      	str	r2, [r3, #16]
	temp->U = temp->Delta_U + temp->U_minus;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	691a      	ldr	r2, [r3, #16]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	441a      	add	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	60da      	str	r2, [r3, #12]
	temp->U_minus = temp->U;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	68da      	ldr	r2, [r3, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	615a      	str	r2, [r3, #20]
	//Error Update
	temp->Error_minus2 = temp->Error_minus;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	69da      	ldr	r2, [r3, #28]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	621a      	str	r2, [r3, #32]
	temp->Error_minus = temp->Error;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	699a      	ldr	r2, [r3, #24]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	61da      	str	r2, [r3, #28]
}
 8001a8e:	bf00      	nop
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
	...

08001a9c <CascadeLoop>:

void CascadeLoop(PID* Pos, PID* Velo, float32_t PosFeedback, float32_t VeloFeedback, QuinticTraj* TrajReference, float32_t tolerance)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	; 0x28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	61f8      	str	r0, [r7, #28]
 8001aa4:	61b9      	str	r1, [r7, #24]
 8001aa6:	ed87 0a05 	vstr	s0, [r7, #20]
 8001aaa:	edc7 0a04 	vstr	s1, [r7, #16]
 8001aae:	60fa      	str	r2, [r7, #12]
 8001ab0:	ed87 1a02 	vstr	s2, [r7, #8]
	if(fabs(TrajReference->current_pos - PosFeedback) <= 1 )
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	ee07 3a90 	vmov	s15, r3
 8001abc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ac0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ac4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ac8:	eef0 7ae7 	vabs.f32	s15, s15
 8001acc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad8:	d816      	bhi.n	8001b08 <CascadeLoop+0x6c>
	{
		Velo->U = 0;
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	2200      	movs	r2, #0
 8001ade:	60da      	str	r2, [r3, #12]
		Pos->ESS = TrajReference->current_pos - PosFeedback;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	ee07 3a90 	vmov	s15, r3
 8001ae8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aec:	edd7 7a05 	vldr	s15, [r7, #20]
 8001af0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001af4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001af8:	edc7 7a01 	vstr	s15, [r7, #4]
 8001afc:	793b      	ldrb	r3, [r7, #4]
 8001afe:	b25a      	sxtb	r2, r3
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8001b06:	e01e      	b.n	8001b46 <CascadeLoop+0xaa>
	}
	else
	{
		PIDRun(Pos, PosFeedback, TrajReference->current_pos);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	ee07 3a90 	vmov	s15, r3
 8001b10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b14:	eef0 0a67 	vmov.f32	s1, s15
 8001b18:	ed97 0a05 	vldr	s0, [r7, #20]
 8001b1c:	69f8      	ldr	r0, [r7, #28]
 8001b1e:	f7ff ff46 	bl	80019ae <PIDRun>
		float32_t veloRef = Pos->U + TrajReference->current_velo;
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	68da      	ldr	r2, [r3, #12]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	ee07 3a90 	vmov	s15, r3
 8001b30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b34:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		PIDRun(Velo, VeloFeedback, veloRef);
 8001b38:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8001b3c:	ed97 0a04 	vldr	s0, [r7, #16]
 8001b40:	69b8      	ldr	r0, [r7, #24]
 8001b42:	f7ff ff34 	bl	80019ae <PIDRun>
	}

	if(Velo->U > 40000)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	dd04      	ble.n	8001b5c <CascadeLoop+0xc0>
	{
		Velo->U = 40000;
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001b58:	60da      	str	r2, [r3, #12]
	{
		Velo->U = -40000;
	}


}
 8001b5a:	e007      	b.n	8001b6c <CascadeLoop+0xd0>
	else if (Velo->U < -40000)
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <CascadeLoop+0xd8>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	da02      	bge.n	8001b6c <CascadeLoop+0xd0>
		Velo->U = -40000;
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	4a02      	ldr	r2, [pc, #8]	; (8001b74 <CascadeLoop+0xd8>)
 8001b6a:	60da      	str	r2, [r3, #12]
}
 8001b6c:	bf00      	nop
 8001b6e:	3728      	adds	r7, #40	; 0x28
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	ffff63c0 	.word	0xffff63c0

08001b78 <QuinticSetup>:
 *      Author: tanawatp
 */
#include "QuinticTrajectory.h"

void QuinticSetup(QuinticTraj* temp, float32_t vmax, float32_t amax)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b84:	edc7 0a01 	vstr	s1, [r7, #4]
	temp->v_max = vmax;
 8001b88:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b90:	ee17 2a90 	vmov	r2, s15
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	619a      	str	r2, [r3, #24]
	temp->a_max = amax;
 8001b98:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ba0:	ee17 2a90 	vmov	r2, s15
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	61da      	str	r2, [r3, #28]
	temp->State = Ready;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	//temp->final_pos = 300;
}
 8001bb0:	bf00      	nop
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	0000      	movs	r0, r0
	...

08001bc0 <QuinticGenerator>:
void QuinticGenerator(QuinticTraj* temp,int8_t ess)
{
 8001bc0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	460b      	mov	r3, r1
 8001bcc:	70fb      	strb	r3, [r7, #3]
	//temp->final_pos = temp->final_pos * 8192/120;
	temp->displacement = temp->final_pos - (temp->start_pos+ess);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6819      	ldr	r1, [r3, #0]
 8001bd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bda:	440b      	add	r3, r1
 8001bdc:	1ad2      	subs	r2, r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	609a      	str	r2, [r3, #8]
	if(temp->displacement<0)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	da04      	bge.n	8001bf4 <QuinticGenerator+0x34>
	{
		temp->Dir = 1;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2020 	strb.w	r2, [r3, #32]
 8001bf2:	e007      	b.n	8001c04 <QuinticGenerator+0x44>
	}
	else if (temp->displacement>0)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	dd03      	ble.n	8001c04 <QuinticGenerator+0x44>
	{
		temp->Dir = 0;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2020 	strb.w	r2, [r3, #32]
	}
	temp->timeAcc = 0.5*sqrtf(23.094*fabs(temp->displacement)/temp->a_max);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe fc37 	bl	800047c <__aeabi_i2d>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	4690      	mov	r8, r2
 8001c14:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001c18:	a388      	add	r3, pc, #544	; (adr r3, 8001e3c <QuinticGenerator+0x27c>)
 8001c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1e:	4640      	mov	r0, r8
 8001c20:	4649      	mov	r1, r9
 8001c22:	f7fe fc95 	bl	8000550 <__aeabi_dmul>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4690      	mov	r8, r2
 8001c2c:	4699      	mov	r9, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fc22 	bl	800047c <__aeabi_i2d>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4640      	mov	r0, r8
 8001c3e:	4649      	mov	r1, r9
 8001c40:	f7fe fdb0 	bl	80007a4 <__aeabi_ddiv>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f7fe ff58 	bl	8000b00 <__aeabi_d2f>
 8001c50:	4603      	mov	r3, r0
 8001c52:	ee00 3a10 	vmov	s0, r3
 8001c56:	f007 fc9d 	bl	8009594 <sqrtf>
 8001c5a:	ee10 3a10 	vmov	r3, s0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fc1e 	bl	80004a0 <__aeabi_f2d>
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	4b6f      	ldr	r3, [pc, #444]	; (8001e28 <QuinticGenerator+0x268>)
 8001c6a:	f7fe fc71 	bl	8000550 <__aeabi_dmul>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4610      	mov	r0, r2
 8001c74:	4619      	mov	r1, r3
 8001c76:	f7fe ff43 	bl	8000b00 <__aeabi_d2f>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	645a      	str	r2, [r3, #68]	; 0x44
	temp->timeVelo = 1.875*fabs(temp->displacement)/temp->v_max;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe fbf9 	bl	800047c <__aeabi_i2d>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4614      	mov	r4, r2
 8001c90:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	4b64      	ldr	r3, [pc, #400]	; (8001e2c <QuinticGenerator+0x26c>)
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	4629      	mov	r1, r5
 8001c9e:	f7fe fc57 	bl	8000550 <__aeabi_dmul>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4614      	mov	r4, r2
 8001ca8:	461d      	mov	r5, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fbe4 	bl	800047c <__aeabi_i2d>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4620      	mov	r0, r4
 8001cba:	4629      	mov	r1, r5
 8001cbc:	f7fe fd72 	bl	80007a4 <__aeabi_ddiv>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f7fe ff1a 	bl	8000b00 <__aeabi_d2f>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	649a      	str	r2, [r3, #72]	; 0x48
	temp->TotalTime = MAX(temp->timeAcc,temp->timeVelo);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001cde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce6:	dd02      	ble.n	8001cee <QuinticGenerator+0x12e>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cec:	e001      	b.n	8001cf2 <QuinticGenerator+0x132>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	63d3      	str	r3, [r2, #60]	; 0x3c
	temp->coeff[0] = temp->start_pos;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	ee07 3a90 	vmov	s15, r3
 8001cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	temp->coeff[1] = 0;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	629a      	str	r2, [r3, #40]	; 0x28
	temp->coeff[2] = 0;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	62da      	str	r2, [r3, #44]	; 0x2c
	temp->coeff[3] = 10.0*temp->displacement/powf(temp->TotalTime,3);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fbad 	bl	800047c <__aeabi_i2d>
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	4b42      	ldr	r3, [pc, #264]	; (8001e30 <QuinticGenerator+0x270>)
 8001d28:	f7fe fc12 	bl	8000550 <__aeabi_dmul>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4614      	mov	r4, r2
 8001d32:	461d      	mov	r5, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001d3a:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d42:	f007 fbcf 	bl	80094e4 <powf>
 8001d46:	ee10 3a10 	vmov	r3, s0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fba8 	bl	80004a0 <__aeabi_f2d>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4620      	mov	r0, r4
 8001d56:	4629      	mov	r1, r5
 8001d58:	f7fe fd24 	bl	80007a4 <__aeabi_ddiv>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4610      	mov	r0, r2
 8001d62:	4619      	mov	r1, r3
 8001d64:	f7fe fecc 	bl	8000b00 <__aeabi_d2f>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	631a      	str	r2, [r3, #48]	; 0x30
	temp->coeff[4] = -15.0*temp->displacement/powf(temp->TotalTime,4);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fb82 	bl	800047c <__aeabi_i2d>
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	4b2d      	ldr	r3, [pc, #180]	; (8001e34 <QuinticGenerator+0x274>)
 8001d7e:	f7fe fbe7 	bl	8000550 <__aeabi_dmul>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4614      	mov	r4, r2
 8001d88:	461d      	mov	r5, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001d90:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001d94:	eeb0 0a67 	vmov.f32	s0, s15
 8001d98:	f007 fba4 	bl	80094e4 <powf>
 8001d9c:	ee10 3a10 	vmov	r3, s0
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe fb7d 	bl	80004a0 <__aeabi_f2d>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4620      	mov	r0, r4
 8001dac:	4629      	mov	r1, r5
 8001dae:	f7fe fcf9 	bl	80007a4 <__aeabi_ddiv>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	4610      	mov	r0, r2
 8001db8:	4619      	mov	r1, r3
 8001dba:	f7fe fea1 	bl	8000b00 <__aeabi_d2f>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	635a      	str	r2, [r3, #52]	; 0x34
	temp->coeff[5] = 6.0*temp->displacement/powf(temp->TotalTime,5);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fb57 	bl	800047c <__aeabi_i2d>
 8001dce:	f04f 0200 	mov.w	r2, #0
 8001dd2:	4b19      	ldr	r3, [pc, #100]	; (8001e38 <QuinticGenerator+0x278>)
 8001dd4:	f7fe fbbc 	bl	8000550 <__aeabi_dmul>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4614      	mov	r4, r2
 8001dde:	461d      	mov	r5, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001de6:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8001dea:	eeb0 0a67 	vmov.f32	s0, s15
 8001dee:	f007 fb79 	bl	80094e4 <powf>
 8001df2:	ee10 3a10 	vmov	r3, s0
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe fb52 	bl	80004a0 <__aeabi_f2d>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4620      	mov	r0, r4
 8001e02:	4629      	mov	r1, r5
 8001e04:	f7fe fcce 	bl	80007a4 <__aeabi_ddiv>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f7fe fe76 	bl	8000b00 <__aeabi_d2f>
 8001e14:	4602      	mov	r2, r0
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e24:	f3af 8000 	nop.w
 8001e28:	3fe00000 	.word	0x3fe00000
 8001e2c:	3ffe0000 	.word	0x3ffe0000
 8001e30:	40240000 	.word	0x40240000
 8001e34:	c02e0000 	.word	0xc02e0000
 8001e38:	40180000 	.word	0x40180000
 8001e3c:	624dd2f2 	.word	0x624dd2f2
 8001e40:	40371810 	.word	0x40371810

08001e44 <QuinticEvaluator>:
void QuinticEvaluator(QuinticTraj* temp)
{
 8001e44:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e48:	ed2d 8b02 	vpush	{d8}
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
	float32_t time = temp->time;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	60fb      	str	r3, [r7, #12]
	temp->current_pos = temp->coeff[0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
						+ temp->coeff[1]*time
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001e64:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e6c:	ee37 8a27 	vadd.f32	s16, s14, s15
						+ temp->coeff[2]*powf(time,2)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	edd3 8a0b 	vldr	s17, [r3, #44]	; 0x2c
 8001e76:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001e7a:	ed97 0a03 	vldr	s0, [r7, #12]
 8001e7e:	f007 fb31 	bl	80094e4 <powf>
 8001e82:	eef0 7a40 	vmov.f32	s15, s0
 8001e86:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001e8a:	ee38 8a27 	vadd.f32	s16, s16, s15
						+ temp->coeff[3]*powf(time,3)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	edd3 8a0c 	vldr	s17, [r3, #48]	; 0x30
 8001e94:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001e98:	ed97 0a03 	vldr	s0, [r7, #12]
 8001e9c:	f007 fb22 	bl	80094e4 <powf>
 8001ea0:	eef0 7a40 	vmov.f32	s15, s0
 8001ea4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001ea8:	ee38 8a27 	vadd.f32	s16, s16, s15
						+ temp->coeff[4]*powf(time,4)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	edd3 8a0d 	vldr	s17, [r3, #52]	; 0x34
 8001eb2:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001eb6:	ed97 0a03 	vldr	s0, [r7, #12]
 8001eba:	f007 fb13 	bl	80094e4 <powf>
 8001ebe:	eef0 7a40 	vmov.f32	s15, s0
 8001ec2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001ec6:	ee38 8a27 	vadd.f32	s16, s16, s15
						+ temp->coeff[5]*powf(time,5);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	edd3 8a0e 	vldr	s17, [r3, #56]	; 0x38
 8001ed0:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8001ed4:	ed97 0a03 	vldr	s0, [r7, #12]
 8001ed8:	f007 fb04 	bl	80094e4 <powf>
 8001edc:	eef0 7a40 	vmov.f32	s15, s0
 8001ee0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001ee4:	ee78 7a27 	vadd.f32	s15, s16, s15
	temp->current_pos = temp->coeff[0]
 8001ee8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eec:	ee17 2a90 	vmov	r2, s15
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	60da      	str	r2, [r3, #12]

	temp->current_velo = temp->coeff[1]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7fe fad1 	bl	80004a0 <__aeabi_f2d>
 8001efe:	4604      	mov	r4, r0
 8001f00:	460d      	mov	r5, r1
						+ 2.0*temp->coeff[2]*time
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe faca 	bl	80004a0 <__aeabi_f2d>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	f7fe f968 	bl	80001e4 <__adddf3>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4690      	mov	r8, r2
 8001f1a:	4699      	mov	r9, r3
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f7fe fabf 	bl	80004a0 <__aeabi_f2d>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4640      	mov	r0, r8
 8001f28:	4649      	mov	r1, r9
 8001f2a:	f7fe fb11 	bl	8000550 <__aeabi_dmul>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	4620      	mov	r0, r4
 8001f34:	4629      	mov	r1, r5
 8001f36:	f7fe f955 	bl	80001e4 <__adddf3>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4614      	mov	r4, r2
 8001f40:	461d      	mov	r5, r3
						+ 3.0*temp->coeff[3]*powf(time,2)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe faaa 	bl	80004a0 <__aeabi_f2d>
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	4b8e      	ldr	r3, [pc, #568]	; (800218c <QuinticEvaluator+0x348>)
 8001f52:	f7fe fafd 	bl	8000550 <__aeabi_dmul>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4690      	mov	r8, r2
 8001f5c:	4699      	mov	r9, r3
 8001f5e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001f62:	ed97 0a03 	vldr	s0, [r7, #12]
 8001f66:	f007 fabd 	bl	80094e4 <powf>
 8001f6a:	ee10 3a10 	vmov	r3, s0
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe fa96 	bl	80004a0 <__aeabi_f2d>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4640      	mov	r0, r8
 8001f7a:	4649      	mov	r1, r9
 8001f7c:	f7fe fae8 	bl	8000550 <__aeabi_dmul>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4620      	mov	r0, r4
 8001f86:	4629      	mov	r1, r5
 8001f88:	f7fe f92c 	bl	80001e4 <__adddf3>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4614      	mov	r4, r2
 8001f92:	461d      	mov	r5, r3
						+ 4.0*temp->coeff[4]*powf(time,3)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fa81 	bl	80004a0 <__aeabi_f2d>
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	4b7b      	ldr	r3, [pc, #492]	; (8002190 <QuinticEvaluator+0x34c>)
 8001fa4:	f7fe fad4 	bl	8000550 <__aeabi_dmul>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4690      	mov	r8, r2
 8001fae:	4699      	mov	r9, r3
 8001fb0:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001fb4:	ed97 0a03 	vldr	s0, [r7, #12]
 8001fb8:	f007 fa94 	bl	80094e4 <powf>
 8001fbc:	ee10 3a10 	vmov	r3, s0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe fa6d 	bl	80004a0 <__aeabi_f2d>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4640      	mov	r0, r8
 8001fcc:	4649      	mov	r1, r9
 8001fce:	f7fe fabf 	bl	8000550 <__aeabi_dmul>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	4629      	mov	r1, r5
 8001fda:	f7fe f903 	bl	80001e4 <__adddf3>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4614      	mov	r4, r2
 8001fe4:	461d      	mov	r5, r3
						+ 5.0*temp->coeff[5]*powf(time,4);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe fa58 	bl	80004a0 <__aeabi_f2d>
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	4b67      	ldr	r3, [pc, #412]	; (8002194 <QuinticEvaluator+0x350>)
 8001ff6:	f7fe faab 	bl	8000550 <__aeabi_dmul>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	4690      	mov	r8, r2
 8002000:	4699      	mov	r9, r3
 8002002:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8002006:	ed97 0a03 	vldr	s0, [r7, #12]
 800200a:	f007 fa6b 	bl	80094e4 <powf>
 800200e:	ee10 3a10 	vmov	r3, s0
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fa44 	bl	80004a0 <__aeabi_f2d>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4640      	mov	r0, r8
 800201e:	4649      	mov	r1, r9
 8002020:	f7fe fa96 	bl	8000550 <__aeabi_dmul>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4620      	mov	r0, r4
 800202a:	4629      	mov	r1, r5
 800202c:	f7fe f8da 	bl	80001e4 <__adddf3>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
	temp->current_velo = temp->coeff[1]
 8002034:	4610      	mov	r0, r2
 8002036:	4619      	mov	r1, r3
 8002038:	f7fe fd3a 	bl	8000ab0 <__aeabi_d2iz>
 800203c:	4602      	mov	r2, r0
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	611a      	str	r2, [r3, #16]

	temp->current_acc = 2.0*temp->coeff[2]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fa2a 	bl	80004a0 <__aeabi_f2d>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	f7fe f8c8 	bl	80001e4 <__adddf3>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4614      	mov	r4, r2
 800205a:	461d      	mov	r5, r3
						+ 6.0*temp->coeff[3]*time
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe fa1d 	bl	80004a0 <__aeabi_f2d>
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	4b4b      	ldr	r3, [pc, #300]	; (8002198 <QuinticEvaluator+0x354>)
 800206c:	f7fe fa70 	bl	8000550 <__aeabi_dmul>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4690      	mov	r8, r2
 8002076:	4699      	mov	r9, r3
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f7fe fa11 	bl	80004a0 <__aeabi_f2d>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	4640      	mov	r0, r8
 8002084:	4649      	mov	r1, r9
 8002086:	f7fe fa63 	bl	8000550 <__aeabi_dmul>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4620      	mov	r0, r4
 8002090:	4629      	mov	r1, r5
 8002092:	f7fe f8a7 	bl	80001e4 <__adddf3>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4614      	mov	r4, r2
 800209c:	461d      	mov	r5, r3
						+ 12.0*temp->coeff[4]*powf(time,2)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe f9fc 	bl	80004a0 <__aeabi_f2d>
 80020a8:	f04f 0200 	mov.w	r2, #0
 80020ac:	4b3b      	ldr	r3, [pc, #236]	; (800219c <QuinticEvaluator+0x358>)
 80020ae:	f7fe fa4f 	bl	8000550 <__aeabi_dmul>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4690      	mov	r8, r2
 80020b8:	4699      	mov	r9, r3
 80020ba:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80020be:	ed97 0a03 	vldr	s0, [r7, #12]
 80020c2:	f007 fa0f 	bl	80094e4 <powf>
 80020c6:	ee10 3a10 	vmov	r3, s0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe f9e8 	bl	80004a0 <__aeabi_f2d>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4640      	mov	r0, r8
 80020d6:	4649      	mov	r1, r9
 80020d8:	f7fe fa3a 	bl	8000550 <__aeabi_dmul>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	4620      	mov	r0, r4
 80020e2:	4629      	mov	r1, r5
 80020e4:	f7fe f87e 	bl	80001e4 <__adddf3>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	4614      	mov	r4, r2
 80020ee:	461d      	mov	r5, r3
						+ 20.0*temp->coeff[5]*powf(time,3);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe f9d3 	bl	80004a0 <__aeabi_f2d>
 80020fa:	f04f 0200 	mov.w	r2, #0
 80020fe:	4b28      	ldr	r3, [pc, #160]	; (80021a0 <QuinticEvaluator+0x35c>)
 8002100:	f7fe fa26 	bl	8000550 <__aeabi_dmul>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4690      	mov	r8, r2
 800210a:	4699      	mov	r9, r3
 800210c:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8002110:	ed97 0a03 	vldr	s0, [r7, #12]
 8002114:	f007 f9e6 	bl	80094e4 <powf>
 8002118:	ee10 3a10 	vmov	r3, s0
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe f9bf 	bl	80004a0 <__aeabi_f2d>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4640      	mov	r0, r8
 8002128:	4649      	mov	r1, r9
 800212a:	f7fe fa11 	bl	8000550 <__aeabi_dmul>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4620      	mov	r0, r4
 8002134:	4629      	mov	r1, r5
 8002136:	f7fe f855 	bl	80001e4 <__adddf3>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
	temp->current_acc = 2.0*temp->coeff[2]
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	f7fe fcb5 	bl	8000ab0 <__aeabi_d2iz>
 8002146:	4602      	mov	r2, r0
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	615a      	str	r2, [r3, #20]
	if(time >= temp->TotalTime)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002152:	ed97 7a03 	vldr	s14, [r7, #12]
 8002156:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800215a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215e:	da00      	bge.n	8002162 <QuinticEvaluator+0x31e>
		temp->start_pos = temp->final_pos;
		temp->current_pos = temp->start_pos;
		temp->current_velo = 0;
		temp->current_acc = 0;
	}
}
 8002160:	e00d      	b.n	800217e <QuinticEvaluator+0x33a>
		temp->start_pos = temp->final_pos;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	601a      	str	r2, [r3, #0]
		temp->current_pos = temp->start_pos;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	60da      	str	r2, [r3, #12]
		temp->current_velo = 0;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	611a      	str	r2, [r3, #16]
		temp->current_acc = 0;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	615a      	str	r2, [r3, #20]
}
 800217e:	bf00      	nop
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	ecbd 8b02 	vpop	{d8}
 8002188:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800218c:	40080000 	.word	0x40080000
 8002190:	40100000 	.word	0x40100000
 8002194:	40140000 	.word	0x40140000
 8002198:	40180000 	.word	0x40180000
 800219c:	40280000 	.word	0x40280000
 80021a0:	40340000 	.word	0x40340000

080021a4 <QuinticRun>:
void QuinticRun(QuinticTraj* temp, int8_t ess, float32_t dt)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	460b      	mov	r3, r1
 80021ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80021b2:	72fb      	strb	r3, [r7, #11]
	switch(temp->State)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d020      	beq.n	8002200 <QuinticRun+0x5c>
 80021be:	2b02      	cmp	r3, #2
 80021c0:	dc3d      	bgt.n	800223e <QuinticRun+0x9a>
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d002      	beq.n	80021cc <QuinticRun+0x28>
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d00b      	beq.n	80021e2 <QuinticRun+0x3e>
		{
			temp->State = Ready;
		}
		break;
	}
}
 80021ca:	e038      	b.n	800223e <QuinticRun+0x9a>
		if(temp->start_pos != temp->final_pos)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d031      	beq.n	800223c <QuinticRun+0x98>
			temp->State = PreCal;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 80021e0:	e02c      	b.n	800223c <QuinticRun+0x98>
		temp->time = 0;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40
		QuinticGenerator(temp,ess);
 80021ea:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80021ee:	4619      	mov	r1, r3
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f7ff fce5 	bl	8001bc0 <QuinticGenerator>
		temp->State = Run;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2202      	movs	r2, #2
 80021fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 80021fe:	e01e      	b.n	800223e <QuinticRun+0x9a>
		temp->time = temp->time + dt;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002206:	edd7 7a01 	vldr	s15, [r7, #4]
 800220a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		QuinticEvaluator(temp);
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f7ff fe15 	bl	8001e44 <QuinticEvaluator>
		if(temp->time > temp->TotalTime)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002226:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800222a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222e:	dc00      	bgt.n	8002232 <QuinticRun+0x8e>
		break;
 8002230:	e005      	b.n	800223e <QuinticRun+0x9a>
			temp->State = Ready;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 800223a:	e000      	b.n	800223e <QuinticRun+0x9a>
		break;
 800223c:	bf00      	nop
}
 800223e:	bf00      	nop
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <InitReadEncoder>:
//{ //get time in micros
//	return __HAL_TIM_GET_COUNTER(&htim5)+ ReadEncoderParam._micros;
//}

void InitReadEncoder(ReadEncoder* Read, uint32_t samplingtime)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	6039      	str	r1, [r7, #0]
	Read->MotorSetDuty = 0;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]
	Read->Pulse_Compare = 0;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	805a      	strh	r2, [r3, #2]
	Read->DIR = 0;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	711a      	strb	r2, [r3, #4]
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <QEIGetFeedback>:
//	//Delay
//	QEIData.data[1] = QEIData.data[0];
//	QEIData.timestamp[1] = QEIData.timestamp[0];
//}
void QEIGetFeedback(QEI* temp, uint16_t Hz)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	807b      	strh	r3, [r7, #2]
	temp->QEIPosition = __HAL_TIM_GET_COUNTER(&htim2);
 800227c:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <QEIGetFeedback+0x4c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002282:	461a      	mov	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	605a      	str	r2, [r3, #4]
	temp->QEIVelocity = (temp->QEIPosition - temp->QEIPosition_minus) * Hz;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	887a      	ldrh	r2, [r7, #2]
 8002294:	fb02 f303 	mul.w	r3, r2, r3
 8002298:	ee07 3a90 	vmov	s15, r3
 800229c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	edc3 7a02 	vstr	s15, [r3, #8]
	temp->QEIPosition_minus = temp->QEIPosition;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	601a      	str	r2, [r3, #0]
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	20000cf0 	.word	0x20000cf0

080022c0 <SetHome>:
 *      Author: tanawatp
 */
#include "Storage.h"

void SetHome(OperationVar* temp)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	temp->HomingKey = 1;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	719a      	strb	r2, [r3, #6]
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,30*500);
 80022ce:	4b07      	ldr	r3, [pc, #28]	; (80022ec <SetHome+0x2c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f643 2298 	movw	r2, #15000	; 0x3a98
 80022d6:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 80022d8:	2201      	movs	r2, #1
 80022da:	2140      	movs	r1, #64	; 0x40
 80022dc:	4804      	ldr	r0, [pc, #16]	; (80022f0 <SetHome+0x30>)
 80022de:	f003 fad1 	bl	8005884 <HAL_GPIO_WritePin>
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000da4 	.word	0x20000da4
 80022f0:	40020800 	.word	0x40020800

080022f4 <TraySetup>:
 */
#include "TrayLocalization.h"
#include "arm_math.h"

void TraySetup(Tray* temp, float32_t x1, uint16_t y1, float32_t x2, uint16_t y2)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8002300:	460b      	mov	r3, r1
 8002302:	edc7 0a00 	vstr	s1, [r7]
 8002306:	80fb      	strh	r3, [r7, #6]
 8002308:	4613      	mov	r3, r2
 800230a:	80bb      	strh	r3, [r7, #4]
	temp->Edge1_X = x1;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	601a      	str	r2, [r3, #0]
	temp->Edge1_Y = y1;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	88fa      	ldrh	r2, [r7, #6]
 8002316:	809a      	strh	r2, [r3, #4]
	temp->Edge2_X = x2;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	609a      	str	r2, [r3, #8]
	temp->Edge2_Y = y2;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	88ba      	ldrh	r2, [r7, #4]
 8002322:	819a      	strh	r2, [r3, #12]
}
 8002324:	bf00      	nop
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <TrayLocalization>:
void TrayLocalization(Tray* temp)
{
 8002330:	b5b0      	push	{r4, r5, r7, lr}
 8002332:	ed2d 8b02 	vpush	{d8}
 8002336:	b090      	sub	sp, #64	; 0x40
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	float32_t RefX_case1[3] = {10.0,30.0,50.0};
 800233c:	4acc      	ldr	r2, [pc, #816]	; (8002670 <TrayLocalization+0x340>)
 800233e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002342:	ca07      	ldmia	r2, {r0, r1, r2}
 8002344:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t RefY_case1[3] = {40*8192/120,25*8192/120,10*8192/120};
 8002348:	4aca      	ldr	r2, [pc, #808]	; (8002674 <TrayLocalization+0x344>)
 800234a:	f107 0320 	add.w	r3, r7, #32
 800234e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002352:	6018      	str	r0, [r3, #0]
 8002354:	3304      	adds	r3, #4
 8002356:	8019      	strh	r1, [r3, #0]

	float32_t RefX_case2[3] = {10.0,25.0,40.0};
 8002358:	4ac7      	ldr	r2, [pc, #796]	; (8002678 <TrayLocalization+0x348>)
 800235a:	f107 0314 	add.w	r3, r7, #20
 800235e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002360:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t RefY_case2[3] = {50*8192/120,30*8192/120,10*8192/120};
 8002364:	4ac5      	ldr	r2, [pc, #788]	; (800267c <TrayLocalization+0x34c>)
 8002366:	f107 030c 	add.w	r3, r7, #12
 800236a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800236e:	6018      	str	r0, [r3, #0]
 8002370:	3304      	adds	r3, #4
 8002372:	8019      	strh	r1, [r3, #0]
	int16_t deltaX = (temp->Edge2_X - temp->Edge1_X)*8192/120;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	ed93 7a02 	vldr	s14, [r3, #8]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	edd3 7a00 	vldr	s15, [r3]
 8002380:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002384:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8002680 <TrayLocalization+0x350>
 8002388:	ee27 7a87 	vmul.f32	s14, s15, s14
 800238c:	eddf 6abd 	vldr	s13, [pc, #756]	; 8002684 <TrayLocalization+0x354>
 8002390:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002394:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002398:	ee17 3a90 	vmov	r3, s15
 800239c:	877b      	strh	r3, [r7, #58]	; 0x3a
	int16_t deltaY = temp->Edge2_Y - temp->Edge1_Y;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	899a      	ldrh	r2, [r3, #12]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	889b      	ldrh	r3, [r3, #4]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	873b      	strh	r3, [r7, #56]	; 0x38
	float32_t lengh = sqrt(pow(deltaX,2) + pow(deltaY,2));
 80023ac:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7fe f863 	bl	800047c <__aeabi_i2d>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	ed9f 1bab 	vldr	d1, [pc, #684]	; 8002668 <TrayLocalization+0x338>
 80023be:	ec43 2b10 	vmov	d0, r2, r3
 80023c2:	f006 fff3 	bl	80093ac <pow>
 80023c6:	ec55 4b10 	vmov	r4, r5, d0
 80023ca:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe f854 	bl	800047c <__aeabi_i2d>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	ed9f 1ba3 	vldr	d1, [pc, #652]	; 8002668 <TrayLocalization+0x338>
 80023dc:	ec43 2b10 	vmov	d0, r2, r3
 80023e0:	f006 ffe4 	bl	80093ac <pow>
 80023e4:	ec53 2b10 	vmov	r2, r3, d0
 80023e8:	4620      	mov	r0, r4
 80023ea:	4629      	mov	r1, r5
 80023ec:	f7fd fefa 	bl	80001e4 <__adddf3>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	ec43 2b17 	vmov	d7, r2, r3
 80023f8:	eeb0 0a47 	vmov.f32	s0, s14
 80023fc:	eef0 0a67 	vmov.f32	s1, s15
 8002400:	f007 f844 	bl	800948c <sqrt>
 8002404:	ec53 2b10 	vmov	r2, r3, d0
 8002408:	4610      	mov	r0, r2
 800240a:	4619      	mov	r1, r3
 800240c:	f7fe fb78 	bl	8000b00 <__aeabi_d2f>
 8002410:	4603      	mov	r3, r0
 8002412:	637b      	str	r3, [r7, #52]	; 0x34

	if((3276 <= lengh)&&(lengh <= 3550))
 8002414:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002418:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8002688 <TrayLocalization+0x358>
 800241c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002424:	db0d      	blt.n	8002442 <TrayLocalization+0x112>
 8002426:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800242a:	ed9f 7a98 	vldr	s14, [pc, #608]	; 800268c <TrayLocalization+0x35c>
 800242e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002436:	d804      	bhi.n	8002442 <TrayLocalization+0x112>
	{
		temp->Flag = 1;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8002440:	e01a      	b.n	8002478 <TrayLocalization+0x148>
	}
	else if ((3960 <= lengh)&&(lengh <= 4233))
 8002442:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002446:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8002690 <TrayLocalization+0x360>
 800244a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800244e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002452:	db0d      	blt.n	8002470 <TrayLocalization+0x140>
 8002454:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002458:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8002694 <TrayLocalization+0x364>
 800245c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002464:	d804      	bhi.n	8002470 <TrayLocalization+0x140>
	{
		temp->Flag = 2;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2202      	movs	r2, #2
 800246a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800246e:	e003      	b.n	8002478 <TrayLocalization+0x148>
	}
	else
	{
		temp->Flag = 0;//Lenght Error!!
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	}
	float32_t theta;
	arm_atan2_f32(deltaY,deltaX,&theta);
 8002478:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800247c:	ee07 3a90 	vmov	s15, r3
 8002480:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002484:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8002488:	ee07 3a10 	vmov	s14, r3
 800248c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002490:	f107 0308 	add.w	r3, r7, #8
 8002494:	4618      	mov	r0, r3
 8002496:	eef0 0a47 	vmov.f32	s1, s14
 800249a:	eeb0 0a67 	vmov.f32	s0, s15
 800249e:	f001 fab7 	bl	8003a10 <arm_atan2_f32>
	temp->angle = theta;
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	649a      	str	r2, [r3, #72]	; 0x48
	int8_t i;
	int8_t j;
	uint8_t ind = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	switch(temp->Flag)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f993 3047 	ldrsb.w	r3, [r3, #71]	; 0x47
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	f000 80cd 	beq.w	8002654 <TrayLocalization+0x324>
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	f300 81ad 	bgt.w	800281a <TrayLocalization+0x4ea>
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 81a9 	beq.w	8002818 <TrayLocalization+0x4e8>
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	f040 81a7 	bne.w	800281a <TrayLocalization+0x4ea>
	{
	case 1:
		for(i=0;i<3;i++)
 80024cc:	2300      	movs	r3, #0
 80024ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80024d2:	e0b9      	b.n	8002648 <TrayLocalization+0x318>
		{
			for(j=0;j<3;j++)
 80024d4:	2300      	movs	r3, #0
 80024d6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80024da:	e0a9      	b.n	8002630 <TrayLocalization+0x300>
			{
				temp->Holes_X[ind] = temp->Edge1_X
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	ed93 8a00 	vldr	s16, [r3]
								+ arm_cos_f32(theta)*RefX_case1[i]
 80024e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80024e6:	eeb0 0a67 	vmov.f32	s0, s15
 80024ea:	f001 fcb7 	bl	8003e5c <arm_cos_f32>
 80024ee:	eeb0 7a40 	vmov.f32	s14, s0
 80024f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	3340      	adds	r3, #64	; 0x40
 80024fa:	443b      	add	r3, r7
 80024fc:	3b18      	subs	r3, #24
 80024fe:	edd3 7a00 	vldr	s15, [r3]
 8002502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002506:	ee78 7a27 	vadd.f32	s15, s16, s15
 800250a:	ee17 0a90 	vmov	r0, s15
 800250e:	f7fd ffc7 	bl	80004a0 <__aeabi_f2d>
 8002512:	4604      	mov	r4, r0
 8002514:	460d      	mov	r5, r1
								- arm_sin_f32(theta)*RefY_case1[j]*120.0/8192.0;
 8002516:	edd7 7a02 	vldr	s15, [r7, #8]
 800251a:	eeb0 0a67 	vmov.f32	s0, s15
 800251e:	f001 fd23 	bl	8003f68 <arm_sin_f32>
 8002522:	eeb0 7a40 	vmov.f32	s14, s0
 8002526:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	3340      	adds	r3, #64	; 0x40
 800252e:	443b      	add	r3, r7
 8002530:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002534:	ee07 3a90 	vmov	s15, r3
 8002538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800253c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002540:	ee17 0a90 	vmov	r0, s15
 8002544:	f7fd ffac 	bl	80004a0 <__aeabi_f2d>
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	4b52      	ldr	r3, [pc, #328]	; (8002698 <TrayLocalization+0x368>)
 800254e:	f7fd ffff 	bl	8000550 <__aeabi_dmul>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4610      	mov	r0, r2
 8002558:	4619      	mov	r1, r3
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	4b4f      	ldr	r3, [pc, #316]	; (800269c <TrayLocalization+0x36c>)
 8002560:	f7fe f920 	bl	80007a4 <__aeabi_ddiv>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4620      	mov	r0, r4
 800256a:	4629      	mov	r1, r5
 800256c:	f7fd fe38 	bl	80001e0 <__aeabi_dsub>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
				temp->Holes_X[ind] = temp->Edge1_X
 8002574:	f897 403d 	ldrb.w	r4, [r7, #61]	; 0x3d
								- arm_sin_f32(theta)*RefY_case1[j]*120.0/8192.0;
 8002578:	4610      	mov	r0, r2
 800257a:	4619      	mov	r1, r3
 800257c:	f7fe fac0 	bl	8000b00 <__aeabi_d2f>
 8002580:	4601      	mov	r1, r0
				temp->Holes_X[ind] = temp->Edge1_X
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	1d23      	adds	r3, r4, #4
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	6019      	str	r1, [r3, #0]
				temp->Holes_Y[ind] = temp->Edge1_Y
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	889b      	ldrh	r3, [r3, #4]
 8002590:	ee07 3a90 	vmov	s15, r3
								+ arm_cos_f32(theta)*RefY_case1[j]
 8002594:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002598:	edd7 7a02 	vldr	s15, [r7, #8]
 800259c:	eeb0 0a67 	vmov.f32	s0, s15
 80025a0:	f001 fc5c 	bl	8003e5c <arm_cos_f32>
 80025a4:	eeb0 7a40 	vmov.f32	s14, s0
 80025a8:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	3340      	adds	r3, #64	; 0x40
 80025b0:	443b      	add	r3, r7
 80025b2:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80025b6:	ee07 3a90 	vmov	s15, r3
 80025ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025c2:	ee38 8a27 	vadd.f32	s16, s16, s15
								+ arm_sin_f32(theta)*RefX_case1[i]*8192/120;
 80025c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80025ca:	eeb0 0a67 	vmov.f32	s0, s15
 80025ce:	f001 fccb 	bl	8003f68 <arm_sin_f32>
 80025d2:	eeb0 7a40 	vmov.f32	s14, s0
 80025d6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	3340      	adds	r3, #64	; 0x40
 80025de:	443b      	add	r3, r7
 80025e0:	3b18      	subs	r3, #24
 80025e2:	edd3 7a00 	vldr	s15, [r3]
 80025e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ea:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002680 <TrayLocalization+0x350>
 80025ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80025f2:	eddf 6a24 	vldr	s13, [pc, #144]	; 8002684 <TrayLocalization+0x354>
 80025f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025fa:	ee78 7a27 	vadd.f32	s15, s16, s15
				temp->Holes_Y[ind] = temp->Edge1_Y
 80025fe:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002606:	ee17 2a90 	vmov	r2, s15
 800260a:	b291      	uxth	r1, r2
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	3318      	adds	r3, #24
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4413      	add	r3, r2
 8002614:	460a      	mov	r2, r1
 8002616:	809a      	strh	r2, [r3, #4]
				ind += 1;
 8002618:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800261c:	3301      	adds	r3, #1
 800261e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			for(j=0;j<3;j++)
 8002622:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8002626:	b2db      	uxtb	r3, r3
 8002628:	3301      	adds	r3, #1
 800262a:	b2db      	uxtb	r3, r3
 800262c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002630:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8002634:	2b02      	cmp	r3, #2
 8002636:	f77f af51 	ble.w	80024dc <TrayLocalization+0x1ac>
		for(i=0;i<3;i++)
 800263a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800263e:	b2db      	uxtb	r3, r3
 8002640:	3301      	adds	r3, #1
 8002642:	b2db      	uxtb	r3, r3
 8002644:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002648:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800264c:	2b02      	cmp	r3, #2
 800264e:	f77f af41 	ble.w	80024d4 <TrayLocalization+0x1a4>
			}
		}
		break;
 8002652:	e0e2      	b.n	800281a <TrayLocalization+0x4ea>
	case 2:
		for(i=0;i<3;i++)
 8002654:	2300      	movs	r3, #0
 8002656:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800265a:	e0d7      	b.n	800280c <TrayLocalization+0x4dc>
		{
			for(j=0;j<3;j++)
 800265c:	2300      	movs	r3, #0
 800265e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002662:	e0c7      	b.n	80027f4 <TrayLocalization+0x4c4>
 8002664:	f3af 8000 	nop.w
 8002668:	00000000 	.word	0x00000000
 800266c:	40000000 	.word	0x40000000
 8002670:	0800aa84 	.word	0x0800aa84
 8002674:	0800aa90 	.word	0x0800aa90
 8002678:	0800aa98 	.word	0x0800aa98
 800267c:	0800aaa4 	.word	0x0800aaa4
 8002680:	46000000 	.word	0x46000000
 8002684:	42f00000 	.word	0x42f00000
 8002688:	454cc000 	.word	0x454cc000
 800268c:	455de000 	.word	0x455de000
 8002690:	45778000 	.word	0x45778000
 8002694:	45844800 	.word	0x45844800
 8002698:	405e0000 	.word	0x405e0000
 800269c:	40c00000 	.word	0x40c00000
			{
				temp->Holes_X[ind] = temp->Edge1_X
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	ed93 8a00 	vldr	s16, [r3]
								+ arm_cos_f32(theta)*RefX_case2[i]
 80026a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80026aa:	eeb0 0a67 	vmov.f32	s0, s15
 80026ae:	f001 fbd5 	bl	8003e5c <arm_cos_f32>
 80026b2:	eeb0 7a40 	vmov.f32	s14, s0
 80026b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	3340      	adds	r3, #64	; 0x40
 80026be:	443b      	add	r3, r7
 80026c0:	3b2c      	subs	r3, #44	; 0x2c
 80026c2:	edd3 7a00 	vldr	s15, [r3]
 80026c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ca:	ee78 7a27 	vadd.f32	s15, s16, s15
 80026ce:	ee17 0a90 	vmov	r0, s15
 80026d2:	f7fd fee5 	bl	80004a0 <__aeabi_f2d>
 80026d6:	4604      	mov	r4, r0
 80026d8:	460d      	mov	r5, r1
								- arm_sin_f32(theta)*RefY_case2[j]*120.0/8192.0;
 80026da:	edd7 7a02 	vldr	s15, [r7, #8]
 80026de:	eeb0 0a67 	vmov.f32	s0, s15
 80026e2:	f001 fc41 	bl	8003f68 <arm_sin_f32>
 80026e6:	eeb0 7a40 	vmov.f32	s14, s0
 80026ea:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	3340      	adds	r3, #64	; 0x40
 80026f2:	443b      	add	r3, r7
 80026f4:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 80026f8:	ee07 3a90 	vmov	s15, r3
 80026fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002704:	ee17 0a90 	vmov	r0, s15
 8002708:	f7fd feca 	bl	80004a0 <__aeabi_f2d>
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	4b45      	ldr	r3, [pc, #276]	; (8002828 <TrayLocalization+0x4f8>)
 8002712:	f7fd ff1d 	bl	8000550 <__aeabi_dmul>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4610      	mov	r0, r2
 800271c:	4619      	mov	r1, r3
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	4b42      	ldr	r3, [pc, #264]	; (800282c <TrayLocalization+0x4fc>)
 8002724:	f7fe f83e 	bl	80007a4 <__aeabi_ddiv>
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	4620      	mov	r0, r4
 800272e:	4629      	mov	r1, r5
 8002730:	f7fd fd56 	bl	80001e0 <__aeabi_dsub>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
				temp->Holes_X[ind] = temp->Edge1_X
 8002738:	f897 403d 	ldrb.w	r4, [r7, #61]	; 0x3d
								- arm_sin_f32(theta)*RefY_case2[j]*120.0/8192.0;
 800273c:	4610      	mov	r0, r2
 800273e:	4619      	mov	r1, r3
 8002740:	f7fe f9de 	bl	8000b00 <__aeabi_d2f>
 8002744:	4601      	mov	r1, r0
				temp->Holes_X[ind] = temp->Edge1_X
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	1d23      	adds	r3, r4, #4
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	6019      	str	r1, [r3, #0]
				temp->Holes_Y[ind] = temp->Edge1_Y
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	889b      	ldrh	r3, [r3, #4]
 8002754:	ee07 3a90 	vmov	s15, r3
								+ arm_cos_f32(theta)*RefY_case2[j]
 8002758:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800275c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002760:	eeb0 0a67 	vmov.f32	s0, s15
 8002764:	f001 fb7a 	bl	8003e5c <arm_cos_f32>
 8002768:	eeb0 7a40 	vmov.f32	s14, s0
 800276c:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	3340      	adds	r3, #64	; 0x40
 8002774:	443b      	add	r3, r7
 8002776:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 800277a:	ee07 3a90 	vmov	s15, r3
 800277e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002786:	ee38 8a27 	vadd.f32	s16, s16, s15
								+ arm_sin_f32(theta)*RefX_case2[i]*8192/120;
 800278a:	edd7 7a02 	vldr	s15, [r7, #8]
 800278e:	eeb0 0a67 	vmov.f32	s0, s15
 8002792:	f001 fbe9 	bl	8003f68 <arm_sin_f32>
 8002796:	eeb0 7a40 	vmov.f32	s14, s0
 800279a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	3340      	adds	r3, #64	; 0x40
 80027a2:	443b      	add	r3, r7
 80027a4:	3b2c      	subs	r3, #44	; 0x2c
 80027a6:	edd3 7a00 	vldr	s15, [r3]
 80027aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ae:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002830 <TrayLocalization+0x500>
 80027b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027b6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8002834 <TrayLocalization+0x504>
 80027ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027be:	ee78 7a27 	vadd.f32	s15, s16, s15
				temp->Holes_Y[ind] = temp->Edge1_Y
 80027c2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80027c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027ca:	ee17 2a90 	vmov	r2, s15
 80027ce:	b291      	uxth	r1, r2
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	3318      	adds	r3, #24
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	4413      	add	r3, r2
 80027d8:	460a      	mov	r2, r1
 80027da:	809a      	strh	r2, [r3, #4]
				ind += 1;
 80027dc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80027e0:	3301      	adds	r3, #1
 80027e2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			for(j=0;j<3;j++)
 80027e6:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	3301      	adds	r3, #1
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80027f4:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	f77f af51 	ble.w	80026a0 <TrayLocalization+0x370>
		for(i=0;i<3;i++)
 80027fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002802:	b2db      	uxtb	r3, r3
 8002804:	3301      	adds	r3, #1
 8002806:	b2db      	uxtb	r3, r3
 8002808:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800280c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002810:	2b02      	cmp	r3, #2
 8002812:	f77f af23 	ble.w	800265c <TrayLocalization+0x32c>
			}
		}
		break;
 8002816:	e000      	b.n	800281a <TrayLocalization+0x4ea>
	case 0:
		break;
 8002818:	bf00      	nop
	}
}
 800281a:	bf00      	nop
 800281c:	3740      	adds	r7, #64	; 0x40
 800281e:	46bd      	mov	sp, r7
 8002820:	ecbd 8b02 	vpop	{d8}
 8002824:	bdb0      	pop	{r4, r5, r7, pc}
 8002826:	bf00      	nop
 8002828:	405e0000 	.word	0x405e0000
 800282c:	40c00000 	.word	0x40c00000
 8002830:	46000000 	.word	0x46000000
 8002834:	42f00000 	.word	0x42f00000

08002838 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	607b      	str	r3, [r7, #4]
 8002842:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <MX_DMA_Init+0x3c>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	4a0b      	ldr	r2, [pc, #44]	; (8002874 <MX_DMA_Init+0x3c>)
 8002848:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800284c:	6313      	str	r3, [r2, #48]	; 0x30
 800284e:	4b09      	ldr	r3, [pc, #36]	; (8002874 <MX_DMA_Init+0x3c>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002856:	607b      	str	r3, [r7, #4]
 8002858:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800285a:	2200      	movs	r2, #0
 800285c:	2100      	movs	r1, #0
 800285e:	2011      	movs	r0, #17
 8002860:	f002 fa47 	bl	8004cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002864:	2011      	movs	r0, #17
 8002866:	f002 fa60 	bl	8004d2a <HAL_NVIC_EnableIRQ>

}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40023800 	.word	0x40023800

08002878 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08a      	sub	sp, #40	; 0x28
 800287c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287e:	f107 0314 	add.w	r3, r7, #20
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	605a      	str	r2, [r3, #4]
 8002888:	609a      	str	r2, [r3, #8]
 800288a:	60da      	str	r2, [r3, #12]
 800288c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	4b4c      	ldr	r3, [pc, #304]	; (80029c4 <MX_GPIO_Init+0x14c>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	4a4b      	ldr	r2, [pc, #300]	; (80029c4 <MX_GPIO_Init+0x14c>)
 8002898:	f043 0304 	orr.w	r3, r3, #4
 800289c:	6313      	str	r3, [r2, #48]	; 0x30
 800289e:	4b49      	ldr	r3, [pc, #292]	; (80029c4 <MX_GPIO_Init+0x14c>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	4b45      	ldr	r3, [pc, #276]	; (80029c4 <MX_GPIO_Init+0x14c>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	4a44      	ldr	r2, [pc, #272]	; (80029c4 <MX_GPIO_Init+0x14c>)
 80028b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028b8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ba:	4b42      	ldr	r3, [pc, #264]	; (80029c4 <MX_GPIO_Init+0x14c>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	4b3e      	ldr	r3, [pc, #248]	; (80029c4 <MX_GPIO_Init+0x14c>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	4a3d      	ldr	r2, [pc, #244]	; (80029c4 <MX_GPIO_Init+0x14c>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	6313      	str	r3, [r2, #48]	; 0x30
 80028d6:	4b3b      	ldr	r3, [pc, #236]	; (80029c4 <MX_GPIO_Init+0x14c>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	607b      	str	r3, [r7, #4]
 80028e6:	4b37      	ldr	r3, [pc, #220]	; (80029c4 <MX_GPIO_Init+0x14c>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	4a36      	ldr	r2, [pc, #216]	; (80029c4 <MX_GPIO_Init+0x14c>)
 80028ec:	f043 0302 	orr.w	r3, r3, #2
 80028f0:	6313      	str	r3, [r2, #48]	; 0x30
 80028f2:	4b34      	ldr	r3, [pc, #208]	; (80029c4 <MX_GPIO_Init+0x14c>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	607b      	str	r3, [r7, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80028fe:	2200      	movs	r2, #0
 8002900:	2120      	movs	r1, #32
 8002902:	4831      	ldr	r0, [pc, #196]	; (80029c8 <MX_GPIO_Init+0x150>)
 8002904:	f002 ffbe 	bl	8005884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8002908:	2200      	movs	r2, #0
 800290a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800290e:	482f      	ldr	r0, [pc, #188]	; (80029cc <MX_GPIO_Init+0x154>)
 8002910:	f002 ffb8 	bl	8005884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8002914:	2200      	movs	r2, #0
 8002916:	2140      	movs	r1, #64	; 0x40
 8002918:	482d      	ldr	r0, [pc, #180]	; (80029d0 <MX_GPIO_Init+0x158>)
 800291a:	f002 ffb3 	bl	8005884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800291e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002924:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800292e:	f107 0314 	add.w	r3, r7, #20
 8002932:	4619      	mov	r1, r3
 8002934:	4826      	ldr	r0, [pc, #152]	; (80029d0 <MX_GPIO_Init+0x158>)
 8002936:	f002 fe21 	bl	800557c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800293a:	2320      	movs	r3, #32
 800293c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800293e:	2301      	movs	r3, #1
 8002940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002942:	2300      	movs	r3, #0
 8002944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002946:	2300      	movs	r3, #0
 8002948:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800294a:	f107 0314 	add.w	r3, r7, #20
 800294e:	4619      	mov	r1, r3
 8002950:	481d      	ldr	r0, [pc, #116]	; (80029c8 <MX_GPIO_Init+0x150>)
 8002952:	f002 fe13 	bl	800557c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800295a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800295c:	2301      	movs	r3, #1
 800295e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002960:	2300      	movs	r3, #0
 8002962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002964:	2300      	movs	r3, #0
 8002966:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002968:	f107 0314 	add.w	r3, r7, #20
 800296c:	4619      	mov	r1, r3
 800296e:	4817      	ldr	r0, [pc, #92]	; (80029cc <MX_GPIO_Init+0x154>)
 8002970:	f002 fe04 	bl	800557c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002974:	2340      	movs	r3, #64	; 0x40
 8002976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002978:	2301      	movs	r3, #1
 800297a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297c:	2300      	movs	r3, #0
 800297e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002980:	2300      	movs	r3, #0
 8002982:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002984:	f107 0314 	add.w	r3, r7, #20
 8002988:	4619      	mov	r1, r3
 800298a:	4811      	ldr	r0, [pc, #68]	; (80029d0 <MX_GPIO_Init+0x158>)
 800298c:	f002 fdf6 	bl	800557c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002990:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002996:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800299a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299c:	2300      	movs	r3, #0
 800299e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a0:	f107 0314 	add.w	r3, r7, #20
 80029a4:	4619      	mov	r1, r3
 80029a6:	4808      	ldr	r0, [pc, #32]	; (80029c8 <MX_GPIO_Init+0x150>)
 80029a8:	f002 fde8 	bl	800557c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80029ac:	2200      	movs	r2, #0
 80029ae:	2100      	movs	r1, #0
 80029b0:	2028      	movs	r0, #40	; 0x28
 80029b2:	f002 f99e 	bl	8004cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80029b6:	2028      	movs	r0, #40	; 0x28
 80029b8:	f002 f9b7 	bl	8004d2a <HAL_NVIC_EnableIRQ>

}
 80029bc:	bf00      	nop
 80029be:	3728      	adds	r7, #40	; 0x28
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40020000 	.word	0x40020000
 80029cc:	40020400 	.word	0x40020400
 80029d0:	40020800 	.word	0x40020800

080029d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029d8:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <MX_I2C1_Init+0x50>)
 80029da:	4a13      	ldr	r2, [pc, #76]	; (8002a28 <MX_I2C1_Init+0x54>)
 80029dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80029de:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <MX_I2C1_Init+0x50>)
 80029e0:	4a12      	ldr	r2, [pc, #72]	; (8002a2c <MX_I2C1_Init+0x58>)
 80029e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029e4:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <MX_I2C1_Init+0x50>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80029ea:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <MX_I2C1_Init+0x50>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029f0:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <MX_I2C1_Init+0x50>)
 80029f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029f8:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <MX_I2C1_Init+0x50>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80029fe:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <MX_I2C1_Init+0x50>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a04:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <MX_I2C1_Init+0x50>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a0a:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <MX_I2C1_Init+0x50>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a10:	4804      	ldr	r0, [pc, #16]	; (8002a24 <MX_I2C1_Init+0x50>)
 8002a12:	f002 ff69 	bl	80058e8 <HAL_I2C_Init>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002a1c:	f000 fbae 	bl	800317c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a20:	bf00      	nop
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	200002a0 	.word	0x200002a0
 8002a28:	40005400 	.word	0x40005400
 8002a2c:	00061a80 	.word	0x00061a80

08002a30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08a      	sub	sp, #40	; 0x28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a38:	f107 0314 	add.w	r3, r7, #20
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	605a      	str	r2, [r3, #4]
 8002a42:	609a      	str	r2, [r3, #8]
 8002a44:	60da      	str	r2, [r3, #12]
 8002a46:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a19      	ldr	r2, [pc, #100]	; (8002ab4 <HAL_I2C_MspInit+0x84>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d12b      	bne.n	8002aaa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	4b18      	ldr	r3, [pc, #96]	; (8002ab8 <HAL_I2C_MspInit+0x88>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	4a17      	ldr	r2, [pc, #92]	; (8002ab8 <HAL_I2C_MspInit+0x88>)
 8002a5c:	f043 0302 	orr.w	r3, r3, #2
 8002a60:	6313      	str	r3, [r2, #48]	; 0x30
 8002a62:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <HAL_I2C_MspInit+0x88>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	613b      	str	r3, [r7, #16]
 8002a6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a6e:	23c0      	movs	r3, #192	; 0xc0
 8002a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a72:	2312      	movs	r3, #18
 8002a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a7e:	2304      	movs	r3, #4
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a82:	f107 0314 	add.w	r3, r7, #20
 8002a86:	4619      	mov	r1, r3
 8002a88:	480c      	ldr	r0, [pc, #48]	; (8002abc <HAL_I2C_MspInit+0x8c>)
 8002a8a:	f002 fd77 	bl	800557c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <HAL_I2C_MspInit+0x88>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	4a08      	ldr	r2, [pc, #32]	; (8002ab8 <HAL_I2C_MspInit+0x88>)
 8002a98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <HAL_I2C_MspInit+0x88>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002aaa:	bf00      	nop
 8002aac:	3728      	adds	r7, #40	; 0x28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40005400 	.word	0x40005400
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	40020400 	.word	0x40020400

08002ac0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ac4:	f001 ffc8 	bl	8004a58 <HAL_Init>

  /* USER CODE BEGIN Init */
  hmodbus.huart = &huart2;
 8002ac8:	4b42      	ldr	r3, [pc, #264]	; (8002bd4 <main+0x114>)
 8002aca:	4a43      	ldr	r2, [pc, #268]	; (8002bd8 <main+0x118>)
 8002acc:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim11;
 8002ace:	4b41      	ldr	r3, [pc, #260]	; (8002bd4 <main+0x114>)
 8002ad0:	4a42      	ldr	r2, [pc, #264]	; (8002bdc <main+0x11c>)
 8002ad2:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8002ad4:	4b3f      	ldr	r3, [pc, #252]	; (8002bd4 <main+0x114>)
 8002ad6:	2215      	movs	r2, #21
 8002ad8:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize = 200;
 8002ada:	4b3e      	ldr	r3, [pc, #248]	; (8002bd4 <main+0x114>)
 8002adc:	22c8      	movs	r2, #200	; 0xc8
 8002ade:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8002ae0:	493f      	ldr	r1, [pc, #252]	; (8002be0 <main+0x120>)
 8002ae2:	483c      	ldr	r0, [pc, #240]	; (8002bd4 <main+0x114>)
 8002ae4:	f7fe fc26 	bl	8001334 <Modbus_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ae8:	f000 f8aa 	bl	8002c40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002aec:	f7ff fec4 	bl	8002878 <MX_GPIO_Init>
  MX_DMA_Init();
 8002af0:	f7ff fea2 	bl	8002838 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002af4:	f000 feb4 	bl	8003860 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8002af8:	f000 fbf6 	bl	80032e8 <MX_TIM2_Init>
  MX_TIM5_Init();
 8002afc:	f000 fd0c 	bl	8003518 <MX_TIM5_Init>
  MX_TIM3_Init();
 8002b00:	f000 fc46 	bl	8003390 <MX_TIM3_Init>
  MX_I2C1_Init();
 8002b04:	f7ff ff66 	bl	80029d4 <MX_I2C1_Init>
  MX_TIM4_Init();
 8002b08:	f000 fcb8 	bl	800347c <MX_TIM4_Init>
  MX_TIM11_Init();
 8002b0c:	f000 fd52 	bl	80035b4 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  //Setup Initial vaules
  InitKalmanStruct(&KF,Var_Q,Var_R);
 8002b10:	4b34      	ldr	r3, [pc, #208]	; (8002be4 <main+0x124>)
 8002b12:	edd3 7a00 	vldr	s15, [r3]
 8002b16:	4b34      	ldr	r3, [pc, #208]	; (8002be8 <main+0x128>)
 8002b18:	ed93 7a00 	vldr	s14, [r3]
 8002b1c:	eef0 0a47 	vmov.f32	s1, s14
 8002b20:	eeb0 0a67 	vmov.f32	s0, s15
 8002b24:	4831      	ldr	r0, [pc, #196]	; (8002bec <main+0x12c>)
 8002b26:	f7fe f9bd 	bl	8000ea4 <InitKalmanStruct>

  InitReadEncoder(&ReadEncoderParam, 1000);
 8002b2a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002b2e:	4830      	ldr	r0, [pc, #192]	; (8002bf0 <main+0x130>)
 8002b30:	f7ff fb89 	bl	8002246 <InitReadEncoder>

  QuinticSetup(&QuinticVar, vmax, amax);
 8002b34:	4b2f      	ldr	r3, [pc, #188]	; (8002bf4 <main+0x134>)
 8002b36:	edd3 7a00 	vldr	s15, [r3]
 8002b3a:	4b2f      	ldr	r3, [pc, #188]	; (8002bf8 <main+0x138>)
 8002b3c:	ed93 7a00 	vldr	s14, [r3]
 8002b40:	eef0 0a47 	vmov.f32	s1, s14
 8002b44:	eeb0 0a67 	vmov.f32	s0, s15
 8002b48:	482c      	ldr	r0, [pc, #176]	; (8002bfc <main+0x13c>)
 8002b4a:	f7ff f815 	bl	8001b78 <QuinticSetup>

  PIDSetup(&PositionLoop, 15, 2, 0.00001, 10);
 8002b4e:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8002b52:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 8002c00 <main+0x140>
 8002b56:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002b5a:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8002b5e:	4829      	ldr	r0, [pc, #164]	; (8002c04 <main+0x144>)
 8002b60:	f7fe fef2 	bl	8001948 <PIDSetup>
  PIDSetup(&VelocityLoop, 5.0, 0.00000001, 0, 0.00003);
 8002b64:	eddf 1a28 	vldr	s3, [pc, #160]	; 8002c08 <main+0x148>
 8002b68:	ed9f 1a28 	vldr	s2, [pc, #160]	; 8002c0c <main+0x14c>
 8002b6c:	eddf 0a28 	vldr	s1, [pc, #160]	; 8002c10 <main+0x150>
 8002b70:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002b74:	4827      	ldr	r0, [pc, #156]	; (8002c14 <main+0x154>)
 8002b76:	f7fe fee7 	bl	8001948 <PIDSetup>

  TraySetup(&PickTray,  67.8430, 37384,  128.3505, 37384);
 8002b7a:	f249 2208 	movw	r2, #37384	; 0x9208
 8002b7e:	eddf 0a26 	vldr	s1, [pc, #152]	; 8002c18 <main+0x158>
 8002b82:	f249 2108 	movw	r1, #37384	; 0x9208
 8002b86:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8002c1c <main+0x15c>
 8002b8a:	4825      	ldr	r0, [pc, #148]	; (8002c20 <main+0x160>)
 8002b8c:	f7ff fbb2 	bl	80022f4 <TraySetup>
  TraySetup(&PlaceTray, 100.5948, 6840, 142.2284, 3922);
 8002b90:	f640 7252 	movw	r2, #3922	; 0xf52
 8002b94:	eddf 0a23 	vldr	s1, [pc, #140]	; 8002c24 <main+0x164>
 8002b98:	f641 21b8 	movw	r1, #6840	; 0x1ab8
 8002b9c:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8002c28 <main+0x168>
 8002ba0:	4822      	ldr	r0, [pc, #136]	; (8002c2c <main+0x16c>)
 8002ba2:	f7ff fba7 	bl	80022f4 <TraySetup>
  TrayLocalization(&PickTray);
 8002ba6:	481e      	ldr	r0, [pc, #120]	; (8002c20 <main+0x160>)
 8002ba8:	f7ff fbc2 	bl	8002330 <TrayLocalization>
  TrayLocalization(&PlaceTray);
 8002bac:	481f      	ldr	r0, [pc, #124]	; (8002c2c <main+0x16c>)
 8002bae:	f7ff fbbf 	bl	8002330 <TrayLocalization>
  //Timers Start
  HAL_TIM_Base_Start_IT(&htim4);
 8002bb2:	481f      	ldr	r0, [pc, #124]	; (8002c30 <main+0x170>)
 8002bb4:	f003 fcd0 	bl	8006558 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2);  //Start QEI
 8002bb8:	2104      	movs	r1, #4
 8002bba:	481e      	ldr	r0, [pc, #120]	; (8002c34 <main+0x174>)
 8002bbc:	f004 f82c 	bl	8006c18 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);//Start PWM
 8002bc0:	2108      	movs	r1, #8
 8002bc2:	481d      	ldr	r0, [pc, #116]	; (8002c38 <main+0x178>)
 8002bc4:	f003 fdf6 	bl	80067b4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8002bc8:	481c      	ldr	r0, [pc, #112]	; (8002c3c <main+0x17c>)
 8002bca:	f003 fcc5 	bl	8006558 <HAL_TIM_Base_Start_IT>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Modbus_Protocal_Worker();
 8002bce:	f7fe fc3d 	bl	800144c <Modbus_Protocal_Worker>
 8002bd2:	e7fc      	b.n	8002bce <main+0x10e>
 8002bd4:	20000684 	.word	0x20000684
 8002bd8:	20001074 	.word	0x20001074
 8002bdc:	20000fc0 	.word	0x20000fc0
 8002be0:	20000b5c 	.word	0x20000b5c
 8002be4:	20000208 	.word	0x20000208
 8002be8:	2000020c 	.word	0x2000020c
 8002bec:	200003d0 	.word	0x200003d0
 8002bf0:	2000030c 	.word	0x2000030c
 8002bf4:	20000200 	.word	0x20000200
 8002bf8:	20000204 	.word	0x20000204
 8002bfc:	20000320 	.word	0x20000320
 8002c00:	3727c5ac 	.word	0x3727c5ac
 8002c04:	20000370 	.word	0x20000370
 8002c08:	37fba882 	.word	0x37fba882
 8002c0c:	00000000 	.word	0x00000000
 8002c10:	322bcc77 	.word	0x322bcc77
 8002c14:	200003a0 	.word	0x200003a0
 8002c18:	430059ba 	.word	0x430059ba
 8002c1c:	4287af9e 	.word	0x4287af9e
 8002c20:	200005ec 	.word	0x200005ec
 8002c24:	430e3a78 	.word	0x430e3a78
 8002c28:	42c9308a 	.word	0x42c9308a
 8002c2c:	20000638 	.word	0x20000638
 8002c30:	20000e58 	.word	0x20000e58
 8002c34:	20000cf0 	.word	0x20000cf0
 8002c38:	20000da4 	.word	0x20000da4
 8002c3c:	20000f0c 	.word	0x20000f0c

08002c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b094      	sub	sp, #80	; 0x50
 8002c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c46:	f107 0320 	add.w	r3, r7, #32
 8002c4a:	2230      	movs	r2, #48	; 0x30
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f006 fba4 	bl	800939c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c54:	f107 030c 	add.w	r3, r7, #12
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	605a      	str	r2, [r3, #4]
 8002c5e:	609a      	str	r2, [r3, #8]
 8002c60:	60da      	str	r2, [r3, #12]
 8002c62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c64:	2300      	movs	r3, #0
 8002c66:	60bb      	str	r3, [r7, #8]
 8002c68:	4b27      	ldr	r3, [pc, #156]	; (8002d08 <SystemClock_Config+0xc8>)
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	4a26      	ldr	r2, [pc, #152]	; (8002d08 <SystemClock_Config+0xc8>)
 8002c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c72:	6413      	str	r3, [r2, #64]	; 0x40
 8002c74:	4b24      	ldr	r3, [pc, #144]	; (8002d08 <SystemClock_Config+0xc8>)
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c80:	2300      	movs	r3, #0
 8002c82:	607b      	str	r3, [r7, #4]
 8002c84:	4b21      	ldr	r3, [pc, #132]	; (8002d0c <SystemClock_Config+0xcc>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a20      	ldr	r2, [pc, #128]	; (8002d0c <SystemClock_Config+0xcc>)
 8002c8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	4b1e      	ldr	r3, [pc, #120]	; (8002d0c <SystemClock_Config+0xcc>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c98:	607b      	str	r3, [r7, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ca4:	2310      	movs	r3, #16
 8002ca6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002cac:	2300      	movs	r3, #0
 8002cae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002cb0:	2308      	movs	r3, #8
 8002cb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002cb4:	2364      	movs	r3, #100	; 0x64
 8002cb6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002cbc:	2304      	movs	r3, #4
 8002cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cc0:	f107 0320 	add.w	r3, r7, #32
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f002 ff53 	bl	8005b70 <HAL_RCC_OscConfig>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002cd0:	f000 fa54 	bl	800317c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cd4:	230f      	movs	r3, #15
 8002cd6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cd8:	2302      	movs	r3, #2
 8002cda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ce4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002cea:	f107 030c 	add.w	r3, r7, #12
 8002cee:	2103      	movs	r1, #3
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f003 f9b5 	bl	8006060 <HAL_RCC_ClockConfig>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002cfc:	f000 fa3e 	bl	800317c <Error_Handler>
  }
}
 8002d00:	bf00      	nop
 8002d02:	3750      	adds	r7, #80	; 0x50
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	40007000 	.word	0x40007000

08002d10 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4603      	mov	r3, r0
 8002d18:	80fb      	strh	r3, [r7, #6]
		if(GPIO_Pin == GPIO_PIN_11)
 8002d1a:	88fb      	ldrh	r3, [r7, #6]
 8002d1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d20:	d127      	bne.n	8002d72 <HAL_GPIO_EXTI_Callback+0x62>
			{
				if(OpVar.HomingKey == 1)
 8002d22:	4b25      	ldr	r3, [pc, #148]	; (8002db8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002d24:	799b      	ldrb	r3, [r3, #6]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d118      	bne.n	8002d5c <HAL_GPIO_EXTI_Callback+0x4c>
				{
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2140      	movs	r1, #64	; 0x40
 8002d2e:	4823      	ldr	r0, [pc, #140]	; (8002dbc <HAL_GPIO_EXTI_Callback+0xac>)
 8002d30:	f002 fda8 	bl	8005884 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8002d34:	4b22      	ldr	r3, [pc, #136]	; (8002dc0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	63da      	str	r2, [r3, #60]	; 0x3c
					__HAL_TIM_SET_COUNTER(&htim2,0);
 8002d3c:	4b21      	ldr	r3, [pc, #132]	; (8002dc4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2200      	movs	r2, #0
 8002d42:	625a      	str	r2, [r3, #36]	; 0x24
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,30*500);
 8002d44:	4b1e      	ldr	r3, [pc, #120]	; (8002dc0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002d4c:	63da      	str	r2, [r3, #60]	; 0x3c
					OpVar.ProxStop = 0;
 8002d4e:	4b1a      	ldr	r3, [pc, #104]	; (8002db8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	715a      	strb	r2, [r3, #5]
					OpState = WaitingHome;
 8002d54:	4b1c      	ldr	r3, [pc, #112]	; (8002dc8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8002d56:	2208      	movs	r2, #8
 8002d58:	701a      	strb	r2, [r3, #0]
 8002d5a:	e00a      	b.n	8002d72 <HAL_GPIO_EXTI_Callback+0x62>

				}
				else if(OpVar.HomingKey == 2)
 8002d5c:	4b16      	ldr	r3, [pc, #88]	; (8002db8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002d5e:	799b      	ldrb	r3, [r3, #6]
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d106      	bne.n	8002d72 <HAL_GPIO_EXTI_Callback+0x62>
				{
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8002d64:	4b16      	ldr	r3, [pc, #88]	; (8002dc0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	63da      	str	r2, [r3, #60]	; 0x3c
					OpVar.ProxStop = 1;
 8002d6c:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002d6e:	2201      	movs	r2, #1
 8002d70:	715a      	strb	r2, [r3, #5]
				}
			}
		if (GPIO_Pin == GPIO_PIN_12)
 8002d72:	88fb      	ldrh	r3, [r7, #6]
 8002d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d78:	d11a      	bne.n	8002db0 <HAL_GPIO_EXTI_Callback+0xa0>
			{
				if(OpVar.HomingKey == 1)
 8002d7a:	4b0f      	ldr	r3, [pc, #60]	; (8002db8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002d7c:	799b      	ldrb	r3, [r3, #6]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d10b      	bne.n	8002d9a <HAL_GPIO_EXTI_Callback+0x8a>
				{
					//QEIGetFeedback(&QEIData, 2500);
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 8002d82:	2201      	movs	r2, #1
 8002d84:	2140      	movs	r1, #64	; 0x40
 8002d86:	480d      	ldr	r0, [pc, #52]	; (8002dbc <HAL_GPIO_EXTI_Callback+0xac>)
 8002d88:	f002 fd7c 	bl	8005884 <HAL_GPIO_WritePin>
					OpVar.ProxStop = 0;
 8002d8c:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	715a      	strb	r2, [r3, #5]
					OpState = PreHoming;
 8002d92:	4b0d      	ldr	r3, [pc, #52]	; (8002dc8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	701a      	strb	r2, [r3, #0]
				{
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
					OpVar.ProxStop = 1;
				}
			}
}
 8002d98:	e00a      	b.n	8002db0 <HAL_GPIO_EXTI_Callback+0xa0>
				else if(OpVar.HomingKey == 2)
 8002d9a:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002d9c:	799b      	ldrb	r3, [r3, #6]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d106      	bne.n	8002db0 <HAL_GPIO_EXTI_Callback+0xa0>
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8002da2:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2200      	movs	r2, #0
 8002da8:	63da      	str	r2, [r3, #60]	; 0x3c
					OpVar.ProxStop = 1;
 8002daa:	4b03      	ldr	r3, [pc, #12]	; (8002db8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	715a      	strb	r2, [r3, #5]
}
 8002db0:	bf00      	nop
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	200002f8 	.word	0x200002f8
 8002dbc:	40020800 	.word	0x40020800
 8002dc0:	20000da4 	.word	0x20000da4
 8002dc4:	20000cf0 	.word	0x20000cf0
 8002dc8:	200002f4 	.word	0x200002f4

08002dcc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4aac      	ldr	r2, [pc, #688]	; (8003088 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	f040 81bc 	bne.w	8003156 <HAL_TIM_PeriodElapsedCallback+0x38a>
	{
		QEIGetFeedback(&QEIData, 2500);
 8002dde:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8002de2:	48aa      	ldr	r0, [pc, #680]	; (800308c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002de4:	f7ff fa44 	bl	8002270 <QEIGetFeedback>
		KF.z = QEIData.QEIVelocity;
 8002de8:	4ba8      	ldr	r3, [pc, #672]	; (800308c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	4aa8      	ldr	r2, [pc, #672]	; (8003090 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002dee:	65d3      	str	r3, [r2, #92]	; 0x5c
		kalman_filter();
 8002df0:	f7fe f9b2 	bl	8001158 <kalman_filter>
		ZEstimateVelocity = KF.x_hat[1];
 8002df4:	4ba6      	ldr	r3, [pc, #664]	; (8003090 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	4aa6      	ldr	r2, [pc, #664]	; (8003094 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002dfa:	6013      	str	r3, [r2, #0]
		static uint32_t timestamp = 0;
		if (HAL_GetTick() >= timestamp)
 8002dfc:	f001 fe92 	bl	8004b24 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	4ba5      	ldr	r3, [pc, #660]	; (8003098 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d309      	bcc.n	8002e1e <HAL_TIM_PeriodElapsedCallback+0x52>
		{
		  timestamp = HAL_GetTick() + 200;
 8002e0a:	f001 fe8b 	bl	8004b24 <HAL_GetTick>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	33c8      	adds	r3, #200	; 0xc8
 8002e12:	4aa1      	ldr	r2, [pc, #644]	; (8003098 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002e14:	6013      	str	r3, [r2, #0]
		  registerFrame[0x00].U16 = 0b0101100101100001;
 8002e16:	4ba1      	ldr	r3, [pc, #644]	; (800309c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002e18:	f645 1261 	movw	r2, #22881	; 0x5961
 8002e1c:	801a      	strh	r2, [r3, #0]
		}

		if(OpVar.ProxStop == 0)
 8002e1e:	4ba0      	ldr	r3, [pc, #640]	; (80030a0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002e20:	795b      	ldrb	r3, [r3, #5]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f040 818f 	bne.w	8003146 <HAL_TIM_PeriodElapsedCallback+0x37a>
//			CascadeLoop(&PositionLoop, &VelocityLoop, QEIData.QEIPosition, KF.x_hat[1],&QuinticVar, 3);
//			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,abs(VelocityLoop.U));
//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, VelocityLoop.MotorDir);
//			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,ReadEncoderParam.MotorSetDuty*500);
//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, ReadEncoderParam.DIR);
			switch(OpState)
 8002e28:	4b9e      	ldr	r3, [pc, #632]	; (80030a4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	f200 8192 	bhi.w	8003156 <HAL_TIM_PeriodElapsedCallback+0x38a>
 8002e32:	a201      	add	r2, pc, #4	; (adr r2, 8002e38 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e38:	08002e5d 	.word	0x08002e5d
 8002e3c:	08002e65 	.word	0x08002e65
 8002e40:	08002ee1 	.word	0x08002ee1
 8002e44:	08002f6d 	.word	0x08002f6d
 8002e48:	08003151 	.word	0x08003151
 8002e4c:	08003151 	.word	0x08003151
 8002e50:	08002fa5 	.word	0x08002fa5
 8002e54:	08002fc3 	.word	0x08002fc3
 8002e58:	08003131 	.word	0x08003131
			{
			case Init:
				SetHome(&OpVar);
 8002e5c:	4890      	ldr	r0, [pc, #576]	; (80030a0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002e5e:	f7ff fa2f 	bl	80022c0 <SetHome>
				break;
 8002e62:	e178      	b.n	8003156 <HAL_TIM_PeriodElapsedCallback+0x38a>
			case PreHoming:
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8002e64:	4b90      	ldr	r3, [pc, #576]	; (80030a8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	63da      	str	r2, [r3, #60]	; 0x3c
				if(OpVar.HomeCount < 2500)
 8002e6c:	4b8c      	ldr	r3, [pc, #560]	; (80030a0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002e6e:	891b      	ldrh	r3, [r3, #8]
 8002e70:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d806      	bhi.n	8002e86 <HAL_TIM_PeriodElapsedCallback+0xba>
				{
					OpVar.HomeCount += 1;
 8002e78:	4b89      	ldr	r3, [pc, #548]	; (80030a0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002e7a:	891b      	ldrh	r3, [r3, #8]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	4b87      	ldr	r3, [pc, #540]	; (80030a0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002e82:	811a      	strh	r2, [r3, #8]
					KF.x_hat[0] = __HAL_TIM_GET_COUNTER(&htim2);
					OpState = Homing;
					OpVar.HomeCount = 0;
				}

				break;
 8002e84:	e167      	b.n	8003156 <HAL_TIM_PeriodElapsedCallback+0x38a>
					QuinticVar.start_pos = __HAL_TIM_GET_COUNTER(&htim2);
 8002e86:	4b89      	ldr	r3, [pc, #548]	; (80030ac <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4b88      	ldr	r3, [pc, #544]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002e90:	601a      	str	r2, [r3, #0]
					QuinticVar.final_pos = QuinticVar.start_pos * 0.5;
 8002e92:	4b87      	ldr	r3, [pc, #540]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fd faf0 	bl	800047c <__aeabi_i2d>
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	4b84      	ldr	r3, [pc, #528]	; (80030b4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002ea2:	f7fd fb55 	bl	8000550 <__aeabi_dmul>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	4610      	mov	r0, r2
 8002eac:	4619      	mov	r1, r3
 8002eae:	f7fd fdff 	bl	8000ab0 <__aeabi_d2iz>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	4a7e      	ldr	r2, [pc, #504]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002eb6:	6053      	str	r3, [r2, #4]
					OpVar.HomingKey = 0;
 8002eb8:	4b79      	ldr	r3, [pc, #484]	; (80030a0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	719a      	strb	r2, [r3, #6]
					KF.x_hat[0] = __HAL_TIM_GET_COUNTER(&htim2);
 8002ebe:	4b7b      	ldr	r3, [pc, #492]	; (80030ac <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	ee07 3a90 	vmov	s15, r3
 8002ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ecc:	4b70      	ldr	r3, [pc, #448]	; (8003090 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002ece:	edc3 7a00 	vstr	s15, [r3]
					OpState = Homing;
 8002ed2:	4b74      	ldr	r3, [pc, #464]	; (80030a4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	701a      	strb	r2, [r3, #0]
					OpVar.HomeCount = 0;
 8002ed8:	4b71      	ldr	r3, [pc, #452]	; (80030a0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	811a      	strh	r2, [r3, #8]
				break;
 8002ede:	e13a      	b.n	8003156 <HAL_TIM_PeriodElapsedCallback+0x38a>
				//QEIGetFeedback(&QEIData, 2500);
				//QEIData.QEIVelocity = (QEIData.QEIPosition - QEIData.QEIPosition_minus)*2500;
//				KF.z = QEIData.QEIVelocity;
//				kalman_filter();
				//ZEstimateVelocity = KF.x_hat[1];
				QuinticRun(&QuinticVar,PositionLoop.ESS,0.0004);	//Trajectory
 8002ee0:	4b75      	ldr	r3, [pc, #468]	; (80030b8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002ee2:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 8002ee6:	ed9f 0a75 	vldr	s0, [pc, #468]	; 80030bc <HAL_TIM_PeriodElapsedCallback+0x2f0>
 8002eea:	4619      	mov	r1, r3
 8002eec:	4870      	ldr	r0, [pc, #448]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002eee:	f7ff f959 	bl	80021a4 <QuinticRun>
				CascadeLoop(&PositionLoop, &VelocityLoop, QEIData.QEIPosition, KF.x_hat[1],&QuinticVar, 3);
 8002ef2:	4b66      	ldr	r3, [pc, #408]	; (800308c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	ee07 3a90 	vmov	s15, r3
 8002efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002efe:	4b64      	ldr	r3, [pc, #400]	; (8003090 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002f00:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f04:	eeb0 1a08 	vmov.f32	s2, #8	; 0x40400000  3.0
 8002f08:	4a69      	ldr	r2, [pc, #420]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002f0a:	eef0 0a47 	vmov.f32	s1, s14
 8002f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8002f12:	496b      	ldr	r1, [pc, #428]	; (80030c0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002f14:	4868      	ldr	r0, [pc, #416]	; (80030b8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002f16:	f7fe fdc1 	bl	8001a9c <CascadeLoop>
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,abs(VelocityLoop.U));
 8002f1a:	4b69      	ldr	r3, [pc, #420]	; (80030c0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002f22:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002f26:	4b60      	ldr	r3, [pc, #384]	; (80030a8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	63da      	str	r2, [r3, #60]	; 0x3c
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, VelocityLoop.MotorDir);
 8002f2c:	4b64      	ldr	r3, [pc, #400]	; (80030c0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002f2e:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	461a      	mov	r2, r3
 8002f36:	2140      	movs	r1, #64	; 0x40
 8002f38:	4862      	ldr	r0, [pc, #392]	; (80030c4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002f3a:	f002 fca3 	bl	8005884 <HAL_GPIO_WritePin>
				if(PositionLoop.Error == 0)
 8002f3e:	4b5e      	ldr	r3, [pc, #376]	; (80030b8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002f40:	edd3 7a06 	vldr	s15, [r3, #24]
 8002f44:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f4c:	d10a      	bne.n	8002f64 <HAL_TIM_PeriodElapsedCallback+0x198>
				{
					OpState = Home_Ok;
 8002f4e:	4b55      	ldr	r3, [pc, #340]	; (80030a4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002f50:	2203      	movs	r2, #3
 8002f52:	701a      	strb	r2, [r3, #0]
					OpVar.HomingKey = 2;
 8002f54:	4b52      	ldr	r3, [pc, #328]	; (80030a0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002f56:	2202      	movs	r2, #2
 8002f58:	719a      	strb	r2, [r3, #6]
					OpVar.PosOffset = QEIData.QEIPosition;
 8002f5a:	4b4c      	ldr	r3, [pc, #304]	; (800308c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4b4f      	ldr	r3, [pc, #316]	; (80030a0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002f62:	60da      	str	r2, [r3, #12]
				}
				OpState = Homing;
 8002f64:	4b4f      	ldr	r3, [pc, #316]	; (80030a4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002f66:	2202      	movs	r2, #2
 8002f68:	701a      	strb	r2, [r3, #0]
				break;
 8002f6a:	e0f4      	b.n	8003156 <HAL_TIM_PeriodElapsedCallback+0x38a>
			case Home_Ok:
				//check if basesystem is TrayMode
				if(registerFrame[0x01].U16 == 4){
 8002f6c:	4b4b      	ldr	r3, [pc, #300]	; (800309c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002f6e:	885b      	ldrh	r3, [r3, #2]
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	f000 80ef 	beq.w	8003154 <HAL_TIM_PeriodElapsedCallback+0x388>
				}
				else if(registerFrame[0x01].U16 == 8){
 8002f76:	4b49      	ldr	r3, [pc, #292]	; (800309c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002f78:	885b      	ldrh	r3, [r3, #2]
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d106      	bne.n	8002f8c <HAL_TIM_PeriodElapsedCallback+0x1c0>
					OpState = TrayMode;
 8002f7e:	4b49      	ldr	r3, [pc, #292]	; (80030a4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002f80:	2205      	movs	r2, #5
 8002f82:	701a      	strb	r2, [r3, #0]
					OpVar.BaseMode = 0;
 8002f84:	4b46      	ldr	r3, [pc, #280]	; (80030a0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	741a      	strb	r2, [r3, #16]
				//check if basesystem is PointMode
				else if(registerFrame[0x01].U16 == 16){
					OpState = PointMode;
					OpVar.BaseMode = 1;
				}
				break;
 8002f8a:	e0e3      	b.n	8003154 <HAL_TIM_PeriodElapsedCallback+0x388>
				else if(registerFrame[0x01].U16 == 16){
 8002f8c:	4b43      	ldr	r3, [pc, #268]	; (800309c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002f8e:	885b      	ldrh	r3, [r3, #2]
 8002f90:	2b10      	cmp	r3, #16
 8002f92:	f040 80df 	bne.w	8003154 <HAL_TIM_PeriodElapsedCallback+0x388>
					OpState = PointMode;
 8002f96:	4b43      	ldr	r3, [pc, #268]	; (80030a4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002f98:	2204      	movs	r2, #4
 8002f9a:	701a      	strb	r2, [r3, #0]
					OpVar.BaseMode = 1;
 8002f9c:	4b40      	ldr	r3, [pc, #256]	; (80030a0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	741a      	strb	r2, [r3, #16]
				break;
 8002fa2:	e0d7      	b.n	8003154 <HAL_TIM_PeriodElapsedCallback+0x388>
			case PointMode:
				break;
			case TrayMode:
				break;
			case PreProcess:
				QuinticVar.final_pos = PickTray.Holes_Y[0];
 8002fa4:	4b48      	ldr	r3, [pc, #288]	; (80030c8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002fa6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4b41      	ldr	r3, [pc, #260]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002fac:	605a      	str	r2, [r3, #4]
				OpVar.task = GoPick;	//current task.
 8002fae:	4b3c      	ldr	r3, [pc, #240]	; (80030a0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	70da      	strb	r2, [r3, #3]
				OpVar.holeInd = 0;
 8002fb4:	4b3a      	ldr	r3, [pc, #232]	; (80030a0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	711a      	strb	r2, [r3, #4]
				OpState = ControlLoop;
 8002fba:	4b3a      	ldr	r3, [pc, #232]	; (80030a4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002fbc:	2207      	movs	r2, #7
 8002fbe:	701a      	strb	r2, [r3, #0]
				break;
 8002fc0:	e0c9      	b.n	8003156 <HAL_TIM_PeriodElapsedCallback+0x38a>
			case ControlLoop:
				//QEIGetFeedback(&QEIData, 2500);	//Feedback from plant
				KF.z = QEIData.QEIVelocity;
 8002fc2:	4b32      	ldr	r3, [pc, #200]	; (800308c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	4a32      	ldr	r2, [pc, #200]	; (8003090 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002fc8:	65d3      	str	r3, [r2, #92]	; 0x5c
				kalman_filter();	//Kalman Filter
 8002fca:	f7fe f8c5 	bl	8001158 <kalman_filter>
				ZEstimateVelocity = KF.x_hat[1];
 8002fce:	4b30      	ldr	r3, [pc, #192]	; (8003090 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	4a30      	ldr	r2, [pc, #192]	; (8003094 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002fd4:	6013      	str	r3, [r2, #0]
				QuinticRun(&QuinticVar,PositionLoop.ESS,0.0004);	//Trajectory
 8002fd6:	4b38      	ldr	r3, [pc, #224]	; (80030b8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002fd8:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 8002fdc:	ed9f 0a37 	vldr	s0, [pc, #220]	; 80030bc <HAL_TIM_PeriodElapsedCallback+0x2f0>
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4833      	ldr	r0, [pc, #204]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002fe4:	f7ff f8de 	bl	80021a4 <QuinticRun>
				CascadeLoop(&PositionLoop, &VelocityLoop, QEIData.QEIPosition, KF.x_hat[1],&QuinticVar, 3);	//Cascade Control
 8002fe8:	4b28      	ldr	r3, [pc, #160]	; (800308c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	ee07 3a90 	vmov	s15, r3
 8002ff0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ff4:	4b26      	ldr	r3, [pc, #152]	; (8003090 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002ff6:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ffa:	eeb0 1a08 	vmov.f32	s2, #8	; 0x40400000  3.0
 8002ffe:	4a2c      	ldr	r2, [pc, #176]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8003000:	eef0 0a47 	vmov.f32	s1, s14
 8003004:	eeb0 0a67 	vmov.f32	s0, s15
 8003008:	492d      	ldr	r1, [pc, #180]	; (80030c0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800300a:	482b      	ldr	r0, [pc, #172]	; (80030b8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800300c:	f7fe fd46 	bl	8001a9c <CascadeLoop>
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,abs(VelocityLoop.U));
 8003010:	4b2b      	ldr	r3, [pc, #172]	; (80030c0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003018:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800301c:	4b22      	ldr	r3, [pc, #136]	; (80030a8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	63da      	str	r2, [r3, #60]	; 0x3c
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, VelocityLoop.MotorDir);
 8003022:	4b27      	ldr	r3, [pc, #156]	; (80030c0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8003024:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8003028:	b2db      	uxtb	r3, r3
 800302a:	461a      	mov	r2, r3
 800302c:	2140      	movs	r1, #64	; 0x40
 800302e:	4825      	ldr	r0, [pc, #148]	; (80030c4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8003030:	f002 fc28 	bl	8005884 <HAL_GPIO_WritePin>
	//			if((PositionLoop.Error == PositionLoop.Error_minus)&&(PositionLoop.Error_minus == PositionLoop.Error_minus2))
	//			{
	//				OpState = Waiting;
	//				OpVar.waitTime = 0;
	//			}
				if(abs(PositionLoop.Error) <= 1)
 8003034:	4b20      	ldr	r3, [pc, #128]	; (80030b8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8003036:	edd3 7a06 	vldr	s15, [r3, #24]
 800303a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800303e:	ee17 3a90 	vmov	r3, s15
 8003042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003046:	db71      	blt.n	800312c <HAL_TIM_PeriodElapsedCallback+0x360>
 8003048:	4b1b      	ldr	r3, [pc, #108]	; (80030b8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800304a:	edd3 7a06 	vldr	s15, [r3, #24]
 800304e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003052:	ee17 3a90 	vmov	r3, s15
 8003056:	2b01      	cmp	r3, #1
 8003058:	dc68      	bgt.n	800312c <HAL_TIM_PeriodElapsedCallback+0x360>
				{
					OpVar.waitTime += 1;
 800305a:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800305c:	881b      	ldrh	r3, [r3, #0]
 800305e:	3301      	adds	r3, #1
 8003060:	b29a      	uxth	r2, r3
 8003062:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8003064:	801a      	strh	r2, [r3, #0]
					if(OpVar.waitTime >= 5000)
 8003066:	4b0e      	ldr	r3, [pc, #56]	; (80030a0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	f241 3287 	movw	r2, #4999	; 0x1387
 800306e:	4293      	cmp	r3, r2
 8003070:	d95c      	bls.n	800312c <HAL_TIM_PeriodElapsedCallback+0x360>
					{
						OpVar.waitTime = 0;
 8003072:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8003074:	2200      	movs	r2, #0
 8003076:	801a      	strh	r2, [r3, #0]
						switch(OpVar.task)
 8003078:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800307a:	78db      	ldrb	r3, [r3, #3]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d025      	beq.n	80030cc <HAL_TIM_PeriodElapsedCallback+0x300>
 8003080:	2b01      	cmp	r3, #1
 8003082:	d034      	beq.n	80030ee <HAL_TIM_PeriodElapsedCallback+0x322>
							}
							break;
						}
					}
				}
				break;
 8003084:	e067      	b.n	8003156 <HAL_TIM_PeriodElapsedCallback+0x38a>
 8003086:	bf00      	nop
 8003088:	20000e58 	.word	0x20000e58
 800308c:	20000314 	.word	0x20000314
 8003090:	200003d0 	.word	0x200003d0
 8003094:	200005e8 	.word	0x200005e8
 8003098:	20000cec 	.word	0x20000cec
 800309c:	20000b5c 	.word	0x20000b5c
 80030a0:	200002f8 	.word	0x200002f8
 80030a4:	200002f4 	.word	0x200002f4
 80030a8:	20000da4 	.word	0x20000da4
 80030ac:	20000cf0 	.word	0x20000cf0
 80030b0:	20000320 	.word	0x20000320
 80030b4:	3fe00000 	.word	0x3fe00000
 80030b8:	20000370 	.word	0x20000370
 80030bc:	39d1b717 	.word	0x39d1b717
 80030c0:	200003a0 	.word	0x200003a0
 80030c4:	40020800 	.word	0x40020800
 80030c8:	200005ec 	.word	0x200005ec
							QuinticVar.final_pos = PlaceTray.Holes_Y[OpVar.holeInd];
 80030cc:	4b24      	ldr	r3, [pc, #144]	; (8003160 <HAL_TIM_PeriodElapsedCallback+0x394>)
 80030ce:	791b      	ldrb	r3, [r3, #4]
 80030d0:	4a24      	ldr	r2, [pc, #144]	; (8003164 <HAL_TIM_PeriodElapsedCallback+0x398>)
 80030d2:	3318      	adds	r3, #24
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	4413      	add	r3, r2
 80030d8:	889b      	ldrh	r3, [r3, #4]
 80030da:	461a      	mov	r2, r3
 80030dc:	4b22      	ldr	r3, [pc, #136]	; (8003168 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 80030de:	605a      	str	r2, [r3, #4]
							OpVar.task = GoPlace;
 80030e0:	4b1f      	ldr	r3, [pc, #124]	; (8003160 <HAL_TIM_PeriodElapsedCallback+0x394>)
 80030e2:	2201      	movs	r2, #1
 80030e4:	70da      	strb	r2, [r3, #3]
							OpState = ControlLoop;
 80030e6:	4b21      	ldr	r3, [pc, #132]	; (800316c <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 80030e8:	2207      	movs	r2, #7
 80030ea:	701a      	strb	r2, [r3, #0]
							break;
 80030ec:	e01f      	b.n	800312e <HAL_TIM_PeriodElapsedCallback+0x362>
							if(OpVar.holeInd >= 8)
 80030ee:	4b1c      	ldr	r3, [pc, #112]	; (8003160 <HAL_TIM_PeriodElapsedCallback+0x394>)
 80030f0:	791b      	ldrb	r3, [r3, #4]
 80030f2:	2b07      	cmp	r3, #7
 80030f4:	d903      	bls.n	80030fe <HAL_TIM_PeriodElapsedCallback+0x332>
								OpState = Homing;
 80030f6:	4b1d      	ldr	r3, [pc, #116]	; (800316c <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 80030f8:	2202      	movs	r2, #2
 80030fa:	701a      	strb	r2, [r3, #0]
							break;
 80030fc:	e017      	b.n	800312e <HAL_TIM_PeriodElapsedCallback+0x362>
								OpVar.holeInd += 1;
 80030fe:	4b18      	ldr	r3, [pc, #96]	; (8003160 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8003100:	791b      	ldrb	r3, [r3, #4]
 8003102:	3301      	adds	r3, #1
 8003104:	b2da      	uxtb	r2, r3
 8003106:	4b16      	ldr	r3, [pc, #88]	; (8003160 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8003108:	711a      	strb	r2, [r3, #4]
								QuinticVar.final_pos = PickTray.Holes_Y[OpVar.holeInd];
 800310a:	4b15      	ldr	r3, [pc, #84]	; (8003160 <HAL_TIM_PeriodElapsedCallback+0x394>)
 800310c:	791b      	ldrb	r3, [r3, #4]
 800310e:	4a18      	ldr	r2, [pc, #96]	; (8003170 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8003110:	3318      	adds	r3, #24
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	4413      	add	r3, r2
 8003116:	889b      	ldrh	r3, [r3, #4]
 8003118:	461a      	mov	r2, r3
 800311a:	4b13      	ldr	r3, [pc, #76]	; (8003168 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 800311c:	605a      	str	r2, [r3, #4]
								OpVar.task = GoPick;
 800311e:	4b10      	ldr	r3, [pc, #64]	; (8003160 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8003120:	2200      	movs	r2, #0
 8003122:	70da      	strb	r2, [r3, #3]
								OpState = ControlLoop;
 8003124:	4b11      	ldr	r3, [pc, #68]	; (800316c <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8003126:	2207      	movs	r2, #7
 8003128:	701a      	strb	r2, [r3, #0]
							break;
 800312a:	e000      	b.n	800312e <HAL_TIM_PeriodElapsedCallback+0x362>
					}
 800312c:	bf00      	nop
				break;
 800312e:	e012      	b.n	8003156 <HAL_TIM_PeriodElapsedCallback+0x38a>
			case WaitingHome:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);
 8003130:	2200      	movs	r2, #0
 8003132:	2140      	movs	r1, #64	; 0x40
 8003134:	480f      	ldr	r0, [pc, #60]	; (8003174 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8003136:	f002 fba5 	bl	8005884 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,30*500);
 800313a:	4b0f      	ldr	r3, [pc, #60]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f643 2298 	movw	r2, #15000	; 0x3a98
 8003142:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8003144:	e007      	b.n	8003156 <HAL_TIM_PeriodElapsedCallback+0x38a>
			}
		}
		else
		{
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8003146:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2200      	movs	r2, #0
 800314c:	63da      	str	r2, [r3, #60]	; 0x3c
		}
	}
}
 800314e:	e002      	b.n	8003156 <HAL_TIM_PeriodElapsedCallback+0x38a>
				break;
 8003150:	bf00      	nop
 8003152:	e000      	b.n	8003156 <HAL_TIM_PeriodElapsedCallback+0x38a>
				break;
 8003154:	bf00      	nop
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	200002f8 	.word	0x200002f8
 8003164:	20000638 	.word	0x20000638
 8003168:	20000320 	.word	0x20000320
 800316c:	200002f4 	.word	0x200002f4
 8003170:	200005ec 	.word	0x200005ec
 8003174:	40020800 	.word	0x40020800
 8003178:	20000da4 	.word	0x20000da4

0800317c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003180:	b672      	cpsid	i
}
 8003182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003184:	e7fe      	b.n	8003184 <Error_Handler+0x8>
	...

08003188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	607b      	str	r3, [r7, #4]
 8003192:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <HAL_MspInit+0x4c>)
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	4a0f      	ldr	r2, [pc, #60]	; (80031d4 <HAL_MspInit+0x4c>)
 8003198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800319c:	6453      	str	r3, [r2, #68]	; 0x44
 800319e:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <HAL_MspInit+0x4c>)
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031a6:	607b      	str	r3, [r7, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031aa:	2300      	movs	r3, #0
 80031ac:	603b      	str	r3, [r7, #0]
 80031ae:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <HAL_MspInit+0x4c>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	4a08      	ldr	r2, [pc, #32]	; (80031d4 <HAL_MspInit+0x4c>)
 80031b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b8:	6413      	str	r3, [r2, #64]	; 0x40
 80031ba:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <HAL_MspInit+0x4c>)
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c2:	603b      	str	r3, [r7, #0]
 80031c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80031c6:	2007      	movs	r0, #7
 80031c8:	f001 fd88 	bl	8004cdc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031cc:	bf00      	nop
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40023800 	.word	0x40023800

080031d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031dc:	e7fe      	b.n	80031dc <NMI_Handler+0x4>

080031de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031de:	b480      	push	{r7}
 80031e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031e2:	e7fe      	b.n	80031e2 <HardFault_Handler+0x4>

080031e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031e8:	e7fe      	b.n	80031e8 <MemManage_Handler+0x4>

080031ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031ea:	b480      	push	{r7}
 80031ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031ee:	e7fe      	b.n	80031ee <BusFault_Handler+0x4>

080031f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031f4:	e7fe      	b.n	80031f4 <UsageFault_Handler+0x4>

080031f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031f6:	b480      	push	{r7}
 80031f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031fa:	bf00      	nop
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003208:	bf00      	nop
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003212:	b480      	push	{r7}
 8003214:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003216:	bf00      	nop
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003224:	f001 fc6a 	bl	8004afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003228:	bf00      	nop
 800322a:	bd80      	pop	{r7, pc}

0800322c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003230:	4802      	ldr	r0, [pc, #8]	; (800323c <DMA1_Stream6_IRQHandler+0x10>)
 8003232:	f001 ff2d 	bl	8005090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003236:	bf00      	nop
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	200010e8 	.word	0x200010e8

08003240 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8003244:	4802      	ldr	r0, [pc, #8]	; (8003250 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8003246:	f003 fd75 	bl	8006d34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800324a:	bf00      	nop
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	20000fc0 	.word	0x20000fc0

08003254 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003258:	4802      	ldr	r0, [pc, #8]	; (8003264 <TIM2_IRQHandler+0x10>)
 800325a:	f003 fd6b 	bl	8006d34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800325e:	bf00      	nop
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	20000cf0 	.word	0x20000cf0

08003268 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800326c:	4802      	ldr	r0, [pc, #8]	; (8003278 <TIM3_IRQHandler+0x10>)
 800326e:	f003 fd61 	bl	8006d34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003272:	bf00      	nop
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	20000da4 	.word	0x20000da4

0800327c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003280:	4802      	ldr	r0, [pc, #8]	; (800328c <TIM4_IRQHandler+0x10>)
 8003282:	f003 fd57 	bl	8006d34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003286:	bf00      	nop
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20000e58 	.word	0x20000e58

08003290 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003294:	4802      	ldr	r0, [pc, #8]	; (80032a0 <USART2_IRQHandler+0x10>)
 8003296:	f005 f803 	bl	80082a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800329a:	bf00      	nop
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	20001074 	.word	0x20001074

080032a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80032a8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80032ac:	f002 fb04 	bl	80058b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80032b0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80032b4:	f002 fb00 	bl	80058b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80032b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80032bc:	f002 fafc 	bl	80058b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80032c0:	bf00      	nop
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032c8:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <SystemInit+0x20>)
 80032ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ce:	4a05      	ldr	r2, [pc, #20]	; (80032e4 <SystemInit+0x20>)
 80032d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	e000ed00 	.word	0xe000ed00

080032e8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08c      	sub	sp, #48	; 0x30
 80032ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80032ee:	f107 030c 	add.w	r3, r7, #12
 80032f2:	2224      	movs	r2, #36	; 0x24
 80032f4:	2100      	movs	r1, #0
 80032f6:	4618      	mov	r0, r3
 80032f8:	f006 f850 	bl	800939c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032fc:	1d3b      	adds	r3, r7, #4
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003304:	4b21      	ldr	r3, [pc, #132]	; (800338c <MX_TIM2_Init+0xa4>)
 8003306:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800330a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800330c:	4b1f      	ldr	r3, [pc, #124]	; (800338c <MX_TIM2_Init+0xa4>)
 800330e:	2200      	movs	r2, #0
 8003310:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003312:	4b1e      	ldr	r3, [pc, #120]	; (800338c <MX_TIM2_Init+0xa4>)
 8003314:	2200      	movs	r2, #0
 8003316:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003318:	4b1c      	ldr	r3, [pc, #112]	; (800338c <MX_TIM2_Init+0xa4>)
 800331a:	f04f 32ff 	mov.w	r2, #4294967295
 800331e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003320:	4b1a      	ldr	r3, [pc, #104]	; (800338c <MX_TIM2_Init+0xa4>)
 8003322:	2200      	movs	r2, #0
 8003324:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003326:	4b19      	ldr	r3, [pc, #100]	; (800338c <MX_TIM2_Init+0xa4>)
 8003328:	2200      	movs	r2, #0
 800332a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800332c:	2303      	movs	r3, #3
 800332e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003330:	2300      	movs	r3, #0
 8003332:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003334:	2301      	movs	r3, #1
 8003336:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003338:	2300      	movs	r3, #0
 800333a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800333c:	2300      	movs	r3, #0
 800333e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003340:	2300      	movs	r3, #0
 8003342:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003344:	2301      	movs	r3, #1
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003348:	2300      	movs	r3, #0
 800334a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800334c:	2300      	movs	r3, #0
 800334e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003350:	f107 030c 	add.w	r3, r7, #12
 8003354:	4619      	mov	r1, r3
 8003356:	480d      	ldr	r0, [pc, #52]	; (800338c <MX_TIM2_Init+0xa4>)
 8003358:	f003 fbaa 	bl	8006ab0 <HAL_TIM_Encoder_Init>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003362:	f7ff ff0b 	bl	800317c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003366:	2300      	movs	r3, #0
 8003368:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800336a:	2300      	movs	r3, #0
 800336c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800336e:	1d3b      	adds	r3, r7, #4
 8003370:	4619      	mov	r1, r3
 8003372:	4806      	ldr	r0, [pc, #24]	; (800338c <MX_TIM2_Init+0xa4>)
 8003374:	f004 fcb4 	bl	8007ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800337e:	f7ff fefd 	bl	800317c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003382:	bf00      	nop
 8003384:	3730      	adds	r7, #48	; 0x30
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20000cf0 	.word	0x20000cf0

08003390 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08e      	sub	sp, #56	; 0x38
 8003394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003396:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	605a      	str	r2, [r3, #4]
 80033a0:	609a      	str	r2, [r3, #8]
 80033a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033a4:	f107 0320 	add.w	r3, r7, #32
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033ae:	1d3b      	adds	r3, r7, #4
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	605a      	str	r2, [r3, #4]
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	60da      	str	r2, [r3, #12]
 80033ba:	611a      	str	r2, [r3, #16]
 80033bc:	615a      	str	r2, [r3, #20]
 80033be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80033c0:	4b2c      	ldr	r3, [pc, #176]	; (8003474 <MX_TIM3_Init+0xe4>)
 80033c2:	4a2d      	ldr	r2, [pc, #180]	; (8003478 <MX_TIM3_Init+0xe8>)
 80033c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80033c6:	4b2b      	ldr	r3, [pc, #172]	; (8003474 <MX_TIM3_Init+0xe4>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033cc:	4b29      	ldr	r3, [pc, #164]	; (8003474 <MX_TIM3_Init+0xe4>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 80033d2:	4b28      	ldr	r3, [pc, #160]	; (8003474 <MX_TIM3_Init+0xe4>)
 80033d4:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80033d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033da:	4b26      	ldr	r3, [pc, #152]	; (8003474 <MX_TIM3_Init+0xe4>)
 80033dc:	2200      	movs	r2, #0
 80033de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033e0:	4b24      	ldr	r3, [pc, #144]	; (8003474 <MX_TIM3_Init+0xe4>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80033e6:	4823      	ldr	r0, [pc, #140]	; (8003474 <MX_TIM3_Init+0xe4>)
 80033e8:	f003 f85a 	bl	80064a0 <HAL_TIM_Base_Init>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80033f2:	f7ff fec3 	bl	800317c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80033fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003400:	4619      	mov	r1, r3
 8003402:	481c      	ldr	r0, [pc, #112]	; (8003474 <MX_TIM3_Init+0xe4>)
 8003404:	f003 fedc 	bl	80071c0 <HAL_TIM_ConfigClockSource>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800340e:	f7ff feb5 	bl	800317c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003412:	4818      	ldr	r0, [pc, #96]	; (8003474 <MX_TIM3_Init+0xe4>)
 8003414:	f003 f968 	bl	80066e8 <HAL_TIM_PWM_Init>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800341e:	f7ff fead 	bl	800317c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003422:	2300      	movs	r3, #0
 8003424:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003426:	2300      	movs	r3, #0
 8003428:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800342a:	f107 0320 	add.w	r3, r7, #32
 800342e:	4619      	mov	r1, r3
 8003430:	4810      	ldr	r0, [pc, #64]	; (8003474 <MX_TIM3_Init+0xe4>)
 8003432:	f004 fc55 	bl	8007ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800343c:	f7ff fe9e 	bl	800317c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003440:	2360      	movs	r3, #96	; 0x60
 8003442:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003444:	2300      	movs	r3, #0
 8003446:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003450:	1d3b      	adds	r3, r7, #4
 8003452:	2208      	movs	r2, #8
 8003454:	4619      	mov	r1, r3
 8003456:	4807      	ldr	r0, [pc, #28]	; (8003474 <MX_TIM3_Init+0xe4>)
 8003458:	f003 fdf0 	bl	800703c <HAL_TIM_PWM_ConfigChannel>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003462:	f7ff fe8b 	bl	800317c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003466:	4803      	ldr	r0, [pc, #12]	; (8003474 <MX_TIM3_Init+0xe4>)
 8003468:	f000 f9c0 	bl	80037ec <HAL_TIM_MspPostInit>

}
 800346c:	bf00      	nop
 800346e:	3738      	adds	r7, #56	; 0x38
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	20000da4 	.word	0x20000da4
 8003478:	40000400 	.word	0x40000400

0800347c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003482:	f107 0308 	add.w	r3, r7, #8
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	605a      	str	r2, [r3, #4]
 800348c:	609a      	str	r2, [r3, #8]
 800348e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003490:	463b      	mov	r3, r7
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003498:	4b1d      	ldr	r3, [pc, #116]	; (8003510 <MX_TIM4_Init+0x94>)
 800349a:	4a1e      	ldr	r2, [pc, #120]	; (8003514 <MX_TIM4_Init+0x98>)
 800349c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 800349e:	4b1c      	ldr	r3, [pc, #112]	; (8003510 <MX_TIM4_Init+0x94>)
 80034a0:	2263      	movs	r2, #99	; 0x63
 80034a2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034a4:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <MX_TIM4_Init+0x94>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 399;
 80034aa:	4b19      	ldr	r3, [pc, #100]	; (8003510 <MX_TIM4_Init+0x94>)
 80034ac:	f240 128f 	movw	r2, #399	; 0x18f
 80034b0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034b2:	4b17      	ldr	r3, [pc, #92]	; (8003510 <MX_TIM4_Init+0x94>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034b8:	4b15      	ldr	r3, [pc, #84]	; (8003510 <MX_TIM4_Init+0x94>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80034be:	4814      	ldr	r0, [pc, #80]	; (8003510 <MX_TIM4_Init+0x94>)
 80034c0:	f002 ffee 	bl	80064a0 <HAL_TIM_Base_Init>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80034ca:	f7ff fe57 	bl	800317c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80034d4:	f107 0308 	add.w	r3, r7, #8
 80034d8:	4619      	mov	r1, r3
 80034da:	480d      	ldr	r0, [pc, #52]	; (8003510 <MX_TIM4_Init+0x94>)
 80034dc:	f003 fe70 	bl	80071c0 <HAL_TIM_ConfigClockSource>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80034e6:	f7ff fe49 	bl	800317c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034ea:	2300      	movs	r3, #0
 80034ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034ee:	2300      	movs	r3, #0
 80034f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80034f2:	463b      	mov	r3, r7
 80034f4:	4619      	mov	r1, r3
 80034f6:	4806      	ldr	r0, [pc, #24]	; (8003510 <MX_TIM4_Init+0x94>)
 80034f8:	f004 fbf2 	bl	8007ce0 <HAL_TIMEx_MasterConfigSynchronization>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8003502:	f7ff fe3b 	bl	800317c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003506:	bf00      	nop
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20000e58 	.word	0x20000e58
 8003514:	40000800 	.word	0x40000800

08003518 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800351e:	f107 0308 	add.w	r3, r7, #8
 8003522:	2200      	movs	r2, #0
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	605a      	str	r2, [r3, #4]
 8003528:	609a      	str	r2, [r3, #8]
 800352a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800352c:	463b      	mov	r3, r7
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003534:	4b1d      	ldr	r3, [pc, #116]	; (80035ac <MX_TIM5_Init+0x94>)
 8003536:	4a1e      	ldr	r2, [pc, #120]	; (80035b0 <MX_TIM5_Init+0x98>)
 8003538:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 800353a:	4b1c      	ldr	r3, [pc, #112]	; (80035ac <MX_TIM5_Init+0x94>)
 800353c:	2253      	movs	r2, #83	; 0x53
 800353e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003540:	4b1a      	ldr	r3, [pc, #104]	; (80035ac <MX_TIM5_Init+0x94>)
 8003542:	2200      	movs	r2, #0
 8003544:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003546:	4b19      	ldr	r3, [pc, #100]	; (80035ac <MX_TIM5_Init+0x94>)
 8003548:	f04f 32ff 	mov.w	r2, #4294967295
 800354c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800354e:	4b17      	ldr	r3, [pc, #92]	; (80035ac <MX_TIM5_Init+0x94>)
 8003550:	2200      	movs	r2, #0
 8003552:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003554:	4b15      	ldr	r3, [pc, #84]	; (80035ac <MX_TIM5_Init+0x94>)
 8003556:	2200      	movs	r2, #0
 8003558:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800355a:	4814      	ldr	r0, [pc, #80]	; (80035ac <MX_TIM5_Init+0x94>)
 800355c:	f002 ffa0 	bl	80064a0 <HAL_TIM_Base_Init>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8003566:	f7ff fe09 	bl	800317c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800356a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800356e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003570:	f107 0308 	add.w	r3, r7, #8
 8003574:	4619      	mov	r1, r3
 8003576:	480d      	ldr	r0, [pc, #52]	; (80035ac <MX_TIM5_Init+0x94>)
 8003578:	f003 fe22 	bl	80071c0 <HAL_TIM_ConfigClockSource>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8003582:	f7ff fdfb 	bl	800317c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003586:	2300      	movs	r3, #0
 8003588:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800358a:	2300      	movs	r3, #0
 800358c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800358e:	463b      	mov	r3, r7
 8003590:	4619      	mov	r1, r3
 8003592:	4806      	ldr	r0, [pc, #24]	; (80035ac <MX_TIM5_Init+0x94>)
 8003594:	f004 fba4 	bl	8007ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800359e:	f7ff fded 	bl	800317c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80035a2:	bf00      	nop
 80035a4:	3718      	adds	r7, #24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20000f0c 	.word	0x20000f0c
 80035b0:	40000c00 	.word	0x40000c00

080035b4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b088      	sub	sp, #32
 80035b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80035ba:	1d3b      	adds	r3, r7, #4
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	605a      	str	r2, [r3, #4]
 80035c2:	609a      	str	r2, [r3, #8]
 80035c4:	60da      	str	r2, [r3, #12]
 80035c6:	611a      	str	r2, [r3, #16]
 80035c8:	615a      	str	r2, [r3, #20]
 80035ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80035cc:	4b21      	ldr	r3, [pc, #132]	; (8003654 <MX_TIM11_Init+0xa0>)
 80035ce:	4a22      	ldr	r2, [pc, #136]	; (8003658 <MX_TIM11_Init+0xa4>)
 80035d0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80035d2:	4b20      	ldr	r3, [pc, #128]	; (8003654 <MX_TIM11_Init+0xa0>)
 80035d4:	2263      	movs	r2, #99	; 0x63
 80035d6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035d8:	4b1e      	ldr	r3, [pc, #120]	; (8003654 <MX_TIM11_Init+0xa0>)
 80035da:	2200      	movs	r2, #0
 80035dc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 80035de:	4b1d      	ldr	r3, [pc, #116]	; (8003654 <MX_TIM11_Init+0xa0>)
 80035e0:	f240 72d5 	movw	r2, #2005	; 0x7d5
 80035e4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035e6:	4b1b      	ldr	r3, [pc, #108]	; (8003654 <MX_TIM11_Init+0xa0>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035ec:	4b19      	ldr	r3, [pc, #100]	; (8003654 <MX_TIM11_Init+0xa0>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80035f2:	4818      	ldr	r0, [pc, #96]	; (8003654 <MX_TIM11_Init+0xa0>)
 80035f4:	f002 ff54 	bl	80064a0 <HAL_TIM_Base_Init>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80035fe:	f7ff fdbd 	bl	800317c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8003602:	4814      	ldr	r0, [pc, #80]	; (8003654 <MX_TIM11_Init+0xa0>)
 8003604:	f003 f80a 	bl	800661c <HAL_TIM_OC_Init>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800360e:	f7ff fdb5 	bl	800317c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 8003612:	2108      	movs	r1, #8
 8003614:	480f      	ldr	r0, [pc, #60]	; (8003654 <MX_TIM11_Init+0xa0>)
 8003616:	f003 f97d 	bl	8006914 <HAL_TIM_OnePulse_Init>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 8003620:	f7ff fdac 	bl	800317c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003624:	2300      	movs	r3, #0
 8003626:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 8003628:	f240 5399 	movw	r3, #1433	; 0x599
 800362c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800362e:	2300      	movs	r3, #0
 8003630:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003632:	2300      	movs	r3, #0
 8003634:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003636:	1d3b      	adds	r3, r7, #4
 8003638:	2200      	movs	r2, #0
 800363a:	4619      	mov	r1, r3
 800363c:	4805      	ldr	r0, [pc, #20]	; (8003654 <MX_TIM11_Init+0xa0>)
 800363e:	f003 fca1 	bl	8006f84 <HAL_TIM_OC_ConfigChannel>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 8003648:	f7ff fd98 	bl	800317c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800364c:	bf00      	nop
 800364e:	3720      	adds	r7, #32
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	20000fc0 	.word	0x20000fc0
 8003658:	40014800 	.word	0x40014800

0800365c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08a      	sub	sp, #40	; 0x28
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003664:	f107 0314 	add.w	r3, r7, #20
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	605a      	str	r2, [r3, #4]
 800366e:	609a      	str	r2, [r3, #8]
 8003670:	60da      	str	r2, [r3, #12]
 8003672:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367c:	d133      	bne.n	80036e6 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800367e:	2300      	movs	r3, #0
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	4b1b      	ldr	r3, [pc, #108]	; (80036f0 <HAL_TIM_Encoder_MspInit+0x94>)
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	4a1a      	ldr	r2, [pc, #104]	; (80036f0 <HAL_TIM_Encoder_MspInit+0x94>)
 8003688:	f043 0301 	orr.w	r3, r3, #1
 800368c:	6413      	str	r3, [r2, #64]	; 0x40
 800368e:	4b18      	ldr	r3, [pc, #96]	; (80036f0 <HAL_TIM_Encoder_MspInit+0x94>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	613b      	str	r3, [r7, #16]
 8003698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800369a:	2300      	movs	r3, #0
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	4b14      	ldr	r3, [pc, #80]	; (80036f0 <HAL_TIM_Encoder_MspInit+0x94>)
 80036a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a2:	4a13      	ldr	r2, [pc, #76]	; (80036f0 <HAL_TIM_Encoder_MspInit+0x94>)
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	6313      	str	r3, [r2, #48]	; 0x30
 80036aa:	4b11      	ldr	r3, [pc, #68]	; (80036f0 <HAL_TIM_Encoder_MspInit+0x94>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80036b6:	2303      	movs	r3, #3
 80036b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ba:	2302      	movs	r3, #2
 80036bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c2:	2300      	movs	r3, #0
 80036c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036c6:	2301      	movs	r3, #1
 80036c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ca:	f107 0314 	add.w	r3, r7, #20
 80036ce:	4619      	mov	r1, r3
 80036d0:	4808      	ldr	r0, [pc, #32]	; (80036f4 <HAL_TIM_Encoder_MspInit+0x98>)
 80036d2:	f001 ff53 	bl	800557c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80036d6:	2200      	movs	r2, #0
 80036d8:	2100      	movs	r1, #0
 80036da:	201c      	movs	r0, #28
 80036dc:	f001 fb09 	bl	8004cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80036e0:	201c      	movs	r0, #28
 80036e2:	f001 fb22 	bl	8004d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80036e6:	bf00      	nop
 80036e8:	3728      	adds	r7, #40	; 0x28
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40023800 	.word	0x40023800
 80036f4:	40020000 	.word	0x40020000

080036f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a34      	ldr	r2, [pc, #208]	; (80037d8 <HAL_TIM_Base_MspInit+0xe0>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d116      	bne.n	8003738 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
 800370e:	4b33      	ldr	r3, [pc, #204]	; (80037dc <HAL_TIM_Base_MspInit+0xe4>)
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	4a32      	ldr	r2, [pc, #200]	; (80037dc <HAL_TIM_Base_MspInit+0xe4>)
 8003714:	f043 0302 	orr.w	r3, r3, #2
 8003718:	6413      	str	r3, [r2, #64]	; 0x40
 800371a:	4b30      	ldr	r3, [pc, #192]	; (80037dc <HAL_TIM_Base_MspInit+0xe4>)
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003726:	2200      	movs	r2, #0
 8003728:	2100      	movs	r1, #0
 800372a:	201d      	movs	r0, #29
 800372c:	f001 fae1 	bl	8004cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003730:	201d      	movs	r0, #29
 8003732:	f001 fafa 	bl	8004d2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8003736:	e04a      	b.n	80037ce <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a28      	ldr	r2, [pc, #160]	; (80037e0 <HAL_TIM_Base_MspInit+0xe8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d116      	bne.n	8003770 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	613b      	str	r3, [r7, #16]
 8003746:	4b25      	ldr	r3, [pc, #148]	; (80037dc <HAL_TIM_Base_MspInit+0xe4>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	4a24      	ldr	r2, [pc, #144]	; (80037dc <HAL_TIM_Base_MspInit+0xe4>)
 800374c:	f043 0304 	orr.w	r3, r3, #4
 8003750:	6413      	str	r3, [r2, #64]	; 0x40
 8003752:	4b22      	ldr	r3, [pc, #136]	; (80037dc <HAL_TIM_Base_MspInit+0xe4>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	f003 0304 	and.w	r3, r3, #4
 800375a:	613b      	str	r3, [r7, #16]
 800375c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 1);
 800375e:	2201      	movs	r2, #1
 8003760:	2100      	movs	r1, #0
 8003762:	201e      	movs	r0, #30
 8003764:	f001 fac5 	bl	8004cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003768:	201e      	movs	r0, #30
 800376a:	f001 fade 	bl	8004d2a <HAL_NVIC_EnableIRQ>
}
 800376e:	e02e      	b.n	80037ce <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM5)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a1b      	ldr	r2, [pc, #108]	; (80037e4 <HAL_TIM_Base_MspInit+0xec>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d10e      	bne.n	8003798 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	4b17      	ldr	r3, [pc, #92]	; (80037dc <HAL_TIM_Base_MspInit+0xe4>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	4a16      	ldr	r2, [pc, #88]	; (80037dc <HAL_TIM_Base_MspInit+0xe4>)
 8003784:	f043 0308 	orr.w	r3, r3, #8
 8003788:	6413      	str	r3, [r2, #64]	; 0x40
 800378a:	4b14      	ldr	r3, [pc, #80]	; (80037dc <HAL_TIM_Base_MspInit+0xe4>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	68fb      	ldr	r3, [r7, #12]
}
 8003796:	e01a      	b.n	80037ce <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM11)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a12      	ldr	r2, [pc, #72]	; (80037e8 <HAL_TIM_Base_MspInit+0xf0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d115      	bne.n	80037ce <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80037a2:	2300      	movs	r3, #0
 80037a4:	60bb      	str	r3, [r7, #8]
 80037a6:	4b0d      	ldr	r3, [pc, #52]	; (80037dc <HAL_TIM_Base_MspInit+0xe4>)
 80037a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037aa:	4a0c      	ldr	r2, [pc, #48]	; (80037dc <HAL_TIM_Base_MspInit+0xe4>)
 80037ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037b0:	6453      	str	r3, [r2, #68]	; 0x44
 80037b2:	4b0a      	ldr	r3, [pc, #40]	; (80037dc <HAL_TIM_Base_MspInit+0xe4>)
 80037b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037ba:	60bb      	str	r3, [r7, #8]
 80037bc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80037be:	2200      	movs	r2, #0
 80037c0:	2100      	movs	r1, #0
 80037c2:	201a      	movs	r0, #26
 80037c4:	f001 fa95 	bl	8004cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80037c8:	201a      	movs	r0, #26
 80037ca:	f001 faae 	bl	8004d2a <HAL_NVIC_EnableIRQ>
}
 80037ce:	bf00      	nop
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	40000400 	.word	0x40000400
 80037dc:	40023800 	.word	0x40023800
 80037e0:	40000800 	.word	0x40000800
 80037e4:	40000c00 	.word	0x40000c00
 80037e8:	40014800 	.word	0x40014800

080037ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f4:	f107 030c 	add.w	r3, r7, #12
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	605a      	str	r2, [r3, #4]
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	60da      	str	r2, [r3, #12]
 8003802:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a12      	ldr	r2, [pc, #72]	; (8003854 <HAL_TIM_MspPostInit+0x68>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d11e      	bne.n	800384c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800380e:	2300      	movs	r3, #0
 8003810:	60bb      	str	r3, [r7, #8]
 8003812:	4b11      	ldr	r3, [pc, #68]	; (8003858 <HAL_TIM_MspPostInit+0x6c>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	4a10      	ldr	r2, [pc, #64]	; (8003858 <HAL_TIM_MspPostInit+0x6c>)
 8003818:	f043 0304 	orr.w	r3, r3, #4
 800381c:	6313      	str	r3, [r2, #48]	; 0x30
 800381e:	4b0e      	ldr	r3, [pc, #56]	; (8003858 <HAL_TIM_MspPostInit+0x6c>)
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	60bb      	str	r3, [r7, #8]
 8003828:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800382a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800382e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003830:	2302      	movs	r3, #2
 8003832:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003834:	2300      	movs	r3, #0
 8003836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003838:	2300      	movs	r3, #0
 800383a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800383c:	2302      	movs	r3, #2
 800383e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003840:	f107 030c 	add.w	r3, r7, #12
 8003844:	4619      	mov	r1, r3
 8003846:	4805      	ldr	r0, [pc, #20]	; (800385c <HAL_TIM_MspPostInit+0x70>)
 8003848:	f001 fe98 	bl	800557c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800384c:	bf00      	nop
 800384e:	3720      	adds	r7, #32
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40000400 	.word	0x40000400
 8003858:	40023800 	.word	0x40023800
 800385c:	40020800 	.word	0x40020800

08003860 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003864:	4b12      	ldr	r3, [pc, #72]	; (80038b0 <MX_USART2_UART_Init+0x50>)
 8003866:	4a13      	ldr	r2, [pc, #76]	; (80038b4 <MX_USART2_UART_Init+0x54>)
 8003868:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800386a:	4b11      	ldr	r3, [pc, #68]	; (80038b0 <MX_USART2_UART_Init+0x50>)
 800386c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8003870:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8003872:	4b0f      	ldr	r3, [pc, #60]	; (80038b0 <MX_USART2_UART_Init+0x50>)
 8003874:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003878:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800387a:	4b0d      	ldr	r3, [pc, #52]	; (80038b0 <MX_USART2_UART_Init+0x50>)
 800387c:	2200      	movs	r2, #0
 800387e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8003880:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <MX_USART2_UART_Init+0x50>)
 8003882:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003886:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003888:	4b09      	ldr	r3, [pc, #36]	; (80038b0 <MX_USART2_UART_Init+0x50>)
 800388a:	220c      	movs	r2, #12
 800388c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800388e:	4b08      	ldr	r3, [pc, #32]	; (80038b0 <MX_USART2_UART_Init+0x50>)
 8003890:	2200      	movs	r2, #0
 8003892:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003894:	4b06      	ldr	r3, [pc, #24]	; (80038b0 <MX_USART2_UART_Init+0x50>)
 8003896:	2200      	movs	r2, #0
 8003898:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800389a:	4805      	ldr	r0, [pc, #20]	; (80038b0 <MX_USART2_UART_Init+0x50>)
 800389c:	f004 faac 	bl	8007df8 <HAL_UART_Init>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80038a6:	f7ff fc69 	bl	800317c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80038aa:	bf00      	nop
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20001074 	.word	0x20001074
 80038b4:	40004400 	.word	0x40004400

080038b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b08a      	sub	sp, #40	; 0x28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c0:	f107 0314 	add.w	r3, r7, #20
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	605a      	str	r2, [r3, #4]
 80038ca:	609a      	str	r2, [r3, #8]
 80038cc:	60da      	str	r2, [r3, #12]
 80038ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a34      	ldr	r2, [pc, #208]	; (80039a8 <HAL_UART_MspInit+0xf0>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d161      	bne.n	800399e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80038da:	2300      	movs	r3, #0
 80038dc:	613b      	str	r3, [r7, #16]
 80038de:	4b33      	ldr	r3, [pc, #204]	; (80039ac <HAL_UART_MspInit+0xf4>)
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	4a32      	ldr	r2, [pc, #200]	; (80039ac <HAL_UART_MspInit+0xf4>)
 80038e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038e8:	6413      	str	r3, [r2, #64]	; 0x40
 80038ea:	4b30      	ldr	r3, [pc, #192]	; (80039ac <HAL_UART_MspInit+0xf4>)
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f2:	613b      	str	r3, [r7, #16]
 80038f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038f6:	2300      	movs	r3, #0
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	4b2c      	ldr	r3, [pc, #176]	; (80039ac <HAL_UART_MspInit+0xf4>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	4a2b      	ldr	r2, [pc, #172]	; (80039ac <HAL_UART_MspInit+0xf4>)
 8003900:	f043 0301 	orr.w	r3, r3, #1
 8003904:	6313      	str	r3, [r2, #48]	; 0x30
 8003906:	4b29      	ldr	r3, [pc, #164]	; (80039ac <HAL_UART_MspInit+0xf4>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003912:	230c      	movs	r3, #12
 8003914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003916:	2302      	movs	r3, #2
 8003918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391a:	2300      	movs	r3, #0
 800391c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800391e:	2303      	movs	r3, #3
 8003920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003922:	2307      	movs	r3, #7
 8003924:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003926:	f107 0314 	add.w	r3, r7, #20
 800392a:	4619      	mov	r1, r3
 800392c:	4820      	ldr	r0, [pc, #128]	; (80039b0 <HAL_UART_MspInit+0xf8>)
 800392e:	f001 fe25 	bl	800557c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003932:	4b20      	ldr	r3, [pc, #128]	; (80039b4 <HAL_UART_MspInit+0xfc>)
 8003934:	4a20      	ldr	r2, [pc, #128]	; (80039b8 <HAL_UART_MspInit+0x100>)
 8003936:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003938:	4b1e      	ldr	r3, [pc, #120]	; (80039b4 <HAL_UART_MspInit+0xfc>)
 800393a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800393e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003940:	4b1c      	ldr	r3, [pc, #112]	; (80039b4 <HAL_UART_MspInit+0xfc>)
 8003942:	2240      	movs	r2, #64	; 0x40
 8003944:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003946:	4b1b      	ldr	r3, [pc, #108]	; (80039b4 <HAL_UART_MspInit+0xfc>)
 8003948:	2200      	movs	r2, #0
 800394a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800394c:	4b19      	ldr	r3, [pc, #100]	; (80039b4 <HAL_UART_MspInit+0xfc>)
 800394e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003952:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003954:	4b17      	ldr	r3, [pc, #92]	; (80039b4 <HAL_UART_MspInit+0xfc>)
 8003956:	2200      	movs	r2, #0
 8003958:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800395a:	4b16      	ldr	r3, [pc, #88]	; (80039b4 <HAL_UART_MspInit+0xfc>)
 800395c:	2200      	movs	r2, #0
 800395e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003960:	4b14      	ldr	r3, [pc, #80]	; (80039b4 <HAL_UART_MspInit+0xfc>)
 8003962:	2200      	movs	r2, #0
 8003964:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003966:	4b13      	ldr	r3, [pc, #76]	; (80039b4 <HAL_UART_MspInit+0xfc>)
 8003968:	2200      	movs	r2, #0
 800396a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800396c:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <HAL_UART_MspInit+0xfc>)
 800396e:	2200      	movs	r2, #0
 8003970:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003972:	4810      	ldr	r0, [pc, #64]	; (80039b4 <HAL_UART_MspInit+0xfc>)
 8003974:	f001 f9f4 	bl	8004d60 <HAL_DMA_Init>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800397e:	f7ff fbfd 	bl	800317c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a0b      	ldr	r2, [pc, #44]	; (80039b4 <HAL_UART_MspInit+0xfc>)
 8003986:	635a      	str	r2, [r3, #52]	; 0x34
 8003988:	4a0a      	ldr	r2, [pc, #40]	; (80039b4 <HAL_UART_MspInit+0xfc>)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800398e:	2200      	movs	r2, #0
 8003990:	2100      	movs	r1, #0
 8003992:	2026      	movs	r0, #38	; 0x26
 8003994:	f001 f9ad 	bl	8004cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003998:	2026      	movs	r0, #38	; 0x26
 800399a:	f001 f9c6 	bl	8004d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800399e:	bf00      	nop
 80039a0:	3728      	adds	r7, #40	; 0x28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40004400 	.word	0x40004400
 80039ac:	40023800 	.word	0x40023800
 80039b0:	40020000 	.word	0x40020000
 80039b4:	200010e8 	.word	0x200010e8
 80039b8:	400260a0 	.word	0x400260a0

080039bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80039bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80039c0:	480d      	ldr	r0, [pc, #52]	; (80039f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80039c2:	490e      	ldr	r1, [pc, #56]	; (80039fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80039c4:	4a0e      	ldr	r2, [pc, #56]	; (8003a00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80039c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039c8:	e002      	b.n	80039d0 <LoopCopyDataInit>

080039ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039ce:	3304      	adds	r3, #4

080039d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039d4:	d3f9      	bcc.n	80039ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039d6:	4a0b      	ldr	r2, [pc, #44]	; (8003a04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80039d8:	4c0b      	ldr	r4, [pc, #44]	; (8003a08 <LoopFillZerobss+0x26>)
  movs r3, #0
 80039da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039dc:	e001      	b.n	80039e2 <LoopFillZerobss>

080039de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039e0:	3204      	adds	r2, #4

080039e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039e4:	d3fb      	bcc.n	80039de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80039e6:	f7ff fc6d 	bl	80032c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039ea:	f005 fca5 	bl	8009338 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039ee:	f7ff f867 	bl	8002ac0 <main>
  bx  lr    
 80039f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80039f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80039f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039fc:	20000280 	.word	0x20000280
  ldr r2, =_sidata
 8003a00:	0800b350 	.word	0x0800b350
  ldr r2, =_sbss
 8003a04:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 8003a08:	2000114c 	.word	0x2000114c

08003a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a0c:	e7fe      	b.n	8003a0c <ADC_IRQHandler>
	...

08003a10 <arm_atan2_f32>:
                   and compute the right angle.
*/


arm_status arm_atan2_f32(float32_t y,float32_t x,float32_t *result)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b0a1      	sub	sp, #132	; 0x84
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	ed87 0a03 	vstr	s0, [r7, #12]
 8003a1a:	edc7 0a02 	vstr	s1, [r7, #8]
 8003a1e:	6078      	str	r0, [r7, #4]
    if (x > 0.0f)
 8003a20:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a2c:	f340 808e 	ble.w	8003b4c <arm_atan2_f32+0x13c>
    {
        *result=arm_atan_f32(y/x);
 8003a30:	edd7 6a03 	vldr	s13, [r7, #12]
 8003a34:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a3c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
   int sign=0;
 8003a40:	2300      	movs	r3, #0
 8003a42:	67bb      	str	r3, [r7, #120]	; 0x78
   float32_t res=0.0f;
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	677b      	str	r3, [r7, #116]	; 0x74
   if (x < 0.0f)
 8003a4a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003a4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a56:	d507      	bpl.n	8003a68 <arm_atan2_f32+0x58>
      sign=1;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	67bb      	str	r3, [r7, #120]	; 0x78
      x=-x;
 8003a5c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003a60:	eef1 7a67 	vneg.f32	s15, s15
 8003a64:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
   if (x > 1.0f)
 8003a68:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003a6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a78:	dd31      	ble.n	8003ade <arm_atan2_f32+0xce>
      x = 1.0f / x;
 8003a7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a7e:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8003a82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a86:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
 8003a8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a8c:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8003a8e:	4bb5      	ldr	r3, [pc, #724]	; (8003d64 <arm_atan2_f32+0x354>)
 8003a90:	66fb      	str	r3, [r7, #108]	; 0x6c
    int i=1;
 8003a92:	2301      	movs	r3, #1
 8003a94:	66bb      	str	r3, [r7, #104]	; 0x68
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8003a96:	2301      	movs	r3, #1
 8003a98:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a9a:	e014      	b.n	8003ac6 <arm_atan2_f32+0xb6>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8003a9c:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8003aa0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8003aa4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003aa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003aaa:	f1c3 0309 	rsb	r3, r3, #9
 8003aae:	4aae      	ldr	r2, [pc, #696]	; (8003d68 <arm_atan2_f32+0x358>)
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	edd3 7a00 	vldr	s15, [r3]
 8003ab8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003abc:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8003ac0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ac6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ac8:	2b09      	cmp	r3, #9
 8003aca:	dde7      	ble.n	8003a9c <arm_atan2_f32+0x8c>
    return(res);
 8003acc:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8003ad0:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8003d6c <arm_atan2_f32+0x35c>
 8003ad4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ad8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
 8003adc:	e028      	b.n	8003b30 <arm_atan2_f32+0x120>
 8003ade:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ae0:	667b      	str	r3, [r7, #100]	; 0x64
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8003ae2:	4ba0      	ldr	r3, [pc, #640]	; (8003d64 <arm_atan2_f32+0x354>)
 8003ae4:	663b      	str	r3, [r7, #96]	; 0x60
    int i=1;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8003aea:	2301      	movs	r3, #1
 8003aec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003aee:	e014      	b.n	8003b1a <arm_atan2_f32+0x10a>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8003af0:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8003af4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003af8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003afc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003afe:	f1c3 0309 	rsb	r3, r3, #9
 8003b02:	4a99      	ldr	r2, [pc, #612]	; (8003d68 <arm_atan2_f32+0x358>)
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4413      	add	r3, r2
 8003b08:	edd3 7a00 	vldr	s15, [r3]
 8003b0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b10:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8003b14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b16:	3301      	adds	r3, #1
 8003b18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b1c:	2b09      	cmp	r3, #9
 8003b1e:	dde7      	ble.n	8003af0 <arm_atan2_f32+0xe0>
    return(res);
 8003b20:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
     res += arm_atan_limited_f32(x);
 8003b24:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8003b28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b2c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
   if (sign)
 8003b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d005      	beq.n	8003b42 <arm_atan2_f32+0x132>
     res = -res;
 8003b36:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003b3a:	eef1 7a67 	vneg.f32	s15, s15
 8003b3e:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
   return(res);
 8003b42:	6f7a      	ldr	r2, [r7, #116]	; 0x74
        *result=arm_atan_f32(y/x);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	601a      	str	r2, [r3, #0]
        return(ARM_MATH_SUCCESS);
 8003b48:	2300      	movs	r3, #0
 8003b4a:	e175      	b.n	8003e38 <arm_atan2_f32+0x428>
    }
    if (x < 0.0f)
 8003b4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b58:	f140 814d 	bpl.w	8003df6 <arm_atan2_f32+0x3e6>
    {
        if (y > 0.0f)
 8003b5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b68:	f340 8093 	ble.w	8003c92 <arm_atan2_f32+0x282>
        {
           *result=arm_atan_f32(y/x) + PI;
 8003b6c:	edd7 6a03 	vldr	s13, [r7, #12]
 8003b70:	ed97 7a02 	vldr	s14, [r7, #8]
 8003b74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b78:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
   int sign=0;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	657b      	str	r3, [r7, #84]	; 0x54
   float32_t res=0.0f;
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	653b      	str	r3, [r7, #80]	; 0x50
   if (x < 0.0f)
 8003b86:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003b8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b92:	d507      	bpl.n	8003ba4 <arm_atan2_f32+0x194>
      sign=1;
 8003b94:	2301      	movs	r3, #1
 8003b96:	657b      	str	r3, [r7, #84]	; 0x54
      x=-x;
 8003b98:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003b9c:	eef1 7a67 	vneg.f32	s15, s15
 8003ba0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
   if (x > 1.0f)
 8003ba4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003ba8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb4:	dd31      	ble.n	8003c1a <arm_atan2_f32+0x20a>
      x = 1.0f / x;
 8003bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bba:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003bbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bc2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8003bc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8003bca:	4b66      	ldr	r3, [pc, #408]	; (8003d64 <arm_atan2_f32+0x354>)
 8003bcc:	64bb      	str	r3, [r7, #72]	; 0x48
    int i=1;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	647b      	str	r3, [r7, #68]	; 0x44
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	647b      	str	r3, [r7, #68]	; 0x44
 8003bd6:	e014      	b.n	8003c02 <arm_atan2_f32+0x1f2>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8003bd8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003bdc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003be0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003be6:	f1c3 0309 	rsb	r3, r3, #9
 8003bea:	4a5f      	ldr	r2, [pc, #380]	; (8003d68 <arm_atan2_f32+0x358>)
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	edd3 7a00 	vldr	s15, [r3]
 8003bf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bf8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8003bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bfe:	3301      	adds	r3, #1
 8003c00:	647b      	str	r3, [r7, #68]	; 0x44
 8003c02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c04:	2b09      	cmp	r3, #9
 8003c06:	dde7      	ble.n	8003bd8 <arm_atan2_f32+0x1c8>
    return(res);
 8003c08:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8003c0c:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8003d6c <arm_atan2_f32+0x35c>
 8003c10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c14:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8003c18:	e028      	b.n	8003c6c <arm_atan2_f32+0x25c>
 8003c1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c1c:	643b      	str	r3, [r7, #64]	; 0x40
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8003c1e:	4b51      	ldr	r3, [pc, #324]	; (8003d64 <arm_atan2_f32+0x354>)
 8003c20:	63fb      	str	r3, [r7, #60]	; 0x3c
    int i=1;
 8003c22:	2301      	movs	r3, #1
 8003c24:	63bb      	str	r3, [r7, #56]	; 0x38
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8003c26:	2301      	movs	r3, #1
 8003c28:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c2a:	e014      	b.n	8003c56 <arm_atan2_f32+0x246>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8003c2c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003c30:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003c34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c3a:	f1c3 0309 	rsb	r3, r3, #9
 8003c3e:	4a4a      	ldr	r2, [pc, #296]	; (8003d68 <arm_atan2_f32+0x358>)
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	edd3 7a00 	vldr	s15, [r3]
 8003c48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c4c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8003c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c52:	3301      	adds	r3, #1
 8003c54:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c58:	2b09      	cmp	r3, #9
 8003c5a:	dde7      	ble.n	8003c2c <arm_atan2_f32+0x21c>
    return(res);
 8003c5c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
     res += arm_atan_limited_f32(x);
 8003c60:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003c64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c68:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
   if (sign)
 8003c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d005      	beq.n	8003c7e <arm_atan2_f32+0x26e>
     res = -res;
 8003c72:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003c76:	eef1 7a67 	vneg.f32	s15, s15
 8003c7a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
   return(res);
 8003c7e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
           *result=arm_atan_f32(y/x) + PI;
 8003c82:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8003d70 <arm_atan2_f32+0x360>
 8003c86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	edc3 7a00 	vstr	s15, [r3]
 8003c90:	e0af      	b.n	8003df2 <arm_atan2_f32+0x3e2>
        }
        else if (y < 0.0f)
 8003c92:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c9e:	f140 809c 	bpl.w	8003dda <arm_atan2_f32+0x3ca>
        {
           *result=arm_atan_f32(y/x) - PI;
 8003ca2:	edd7 6a03 	vldr	s13, [r7, #12]
 8003ca6:	ed97 7a02 	vldr	s14, [r7, #8]
 8003caa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cae:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
   int sign=0;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	633b      	str	r3, [r7, #48]	; 0x30
   float32_t res=0.0f;
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	62fb      	str	r3, [r7, #44]	; 0x2c
   if (x < 0.0f)
 8003cbc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003cc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cc8:	d507      	bpl.n	8003cda <arm_atan2_f32+0x2ca>
      sign=1;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	633b      	str	r3, [r7, #48]	; 0x30
      x=-x;
 8003cce:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003cd2:	eef1 7a67 	vneg.f32	s15, s15
 8003cd6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
   if (x > 1.0f)
 8003cda:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003cde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ce2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cea:	dd31      	ble.n	8003d50 <arm_atan2_f32+0x340>
      x = 1.0f / x;
 8003cec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cf0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003cf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cf8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8003cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cfe:	62bb      	str	r3, [r7, #40]	; 0x28
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8003d00:	4b18      	ldr	r3, [pc, #96]	; (8003d64 <arm_atan2_f32+0x354>)
 8003d02:	627b      	str	r3, [r7, #36]	; 0x24
    int i=1;
 8003d04:	2301      	movs	r3, #1
 8003d06:	623b      	str	r3, [r7, #32]
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8003d08:	2301      	movs	r3, #1
 8003d0a:	623b      	str	r3, [r7, #32]
 8003d0c:	e014      	b.n	8003d38 <arm_atan2_f32+0x328>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8003d0e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003d12:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003d16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	f1c3 0309 	rsb	r3, r3, #9
 8003d20:	4a11      	ldr	r2, [pc, #68]	; (8003d68 <arm_atan2_f32+0x358>)
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	edd3 7a00 	vldr	s15, [r3]
 8003d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d2e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	3301      	adds	r3, #1
 8003d36:	623b      	str	r3, [r7, #32]
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	2b09      	cmp	r3, #9
 8003d3c:	dde7      	ble.n	8003d0e <arm_atan2_f32+0x2fe>
    return(res);
 8003d3e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8003d42:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8003d6c <arm_atan2_f32+0x35c>
 8003d46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d4a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8003d4e:	e031      	b.n	8003db4 <arm_atan2_f32+0x3a4>
 8003d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d52:	61fb      	str	r3, [r7, #28]
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8003d54:	4b03      	ldr	r3, [pc, #12]	; (8003d64 <arm_atan2_f32+0x354>)
 8003d56:	61bb      	str	r3, [r7, #24]
    int i=1;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	617b      	str	r3, [r7, #20]
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	e01d      	b.n	8003d9e <arm_atan2_f32+0x38e>
 8003d62:	bf00      	nop
 8003d64:	bd0492a5 	.word	0xbd0492a5
 8003d68:	0800b2c8 	.word	0x0800b2c8
 8003d6c:	3fc90fdb 	.word	0x3fc90fdb
 8003d70:	40490fdb 	.word	0x40490fdb
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8003d74:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d78:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f1c3 0309 	rsb	r3, r3, #9
 8003d86:	4a2f      	ldr	r2, [pc, #188]	; (8003e44 <arm_atan2_f32+0x434>)
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	edd3 7a00 	vldr	s15, [r3]
 8003d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d94:	edc7 7a06 	vstr	s15, [r7, #24]
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	2b09      	cmp	r3, #9
 8003da2:	dde7      	ble.n	8003d74 <arm_atan2_f32+0x364>
    return(res);
 8003da4:	edd7 7a06 	vldr	s15, [r7, #24]
     res += arm_atan_limited_f32(x);
 8003da8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003db0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
   if (sign)
 8003db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d005      	beq.n	8003dc6 <arm_atan2_f32+0x3b6>
     res = -res;
 8003dba:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003dbe:	eef1 7a67 	vneg.f32	s15, s15
 8003dc2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
   return(res);
 8003dc6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
           *result=arm_atan_f32(y/x) - PI;
 8003dca:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003e48 <arm_atan2_f32+0x438>
 8003dce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	edc3 7a00 	vstr	s15, [r3]
 8003dd8:	e00b      	b.n	8003df2 <arm_atan2_f32+0x3e2>
        }
        else
        {
            if (signbit(y))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <arm_atan2_f32+0x3dc>
            {
               *result= -PI;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a19      	ldr	r2, [pc, #100]	; (8003e4c <arm_atan2_f32+0x43c>)
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	e002      	b.n	8003df2 <arm_atan2_f32+0x3e2>
            }
            else
            {
               *result= PI;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a18      	ldr	r2, [pc, #96]	; (8003e50 <arm_atan2_f32+0x440>)
 8003df0:	601a      	str	r2, [r3, #0]
            }
        }
        return(ARM_MATH_SUCCESS);
 8003df2:	2300      	movs	r3, #0
 8003df4:	e020      	b.n	8003e38 <arm_atan2_f32+0x428>
    }
    if (x == 0.0f)
 8003df6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003dfa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e02:	d117      	bne.n	8003e34 <arm_atan2_f32+0x424>
    {
        if (y > 0.0f)
 8003e04:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e10:	dd04      	ble.n	8003e1c <arm_atan2_f32+0x40c>
        {
            *result=PIHALFF32;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a0f      	ldr	r2, [pc, #60]	; (8003e54 <arm_atan2_f32+0x444>)
 8003e16:	601a      	str	r2, [r3, #0]
            return(ARM_MATH_SUCCESS);
 8003e18:	2300      	movs	r3, #0
 8003e1a:	e00d      	b.n	8003e38 <arm_atan2_f32+0x428>
        }
        if (y < 0.0f)
 8003e1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e28:	d504      	bpl.n	8003e34 <arm_atan2_f32+0x424>
        {
            *result=-PIHALFF32;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a0a      	ldr	r2, [pc, #40]	; (8003e58 <arm_atan2_f32+0x448>)
 8003e2e:	601a      	str	r2, [r3, #0]
            return(ARM_MATH_SUCCESS);
 8003e30:	2300      	movs	r3, #0
 8003e32:	e001      	b.n	8003e38 <arm_atan2_f32+0x428>
        }
    }
    

    return(ARM_MATH_NANINF);
 8003e34:	f06f 0303 	mvn.w	r3, #3

}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3784      	adds	r7, #132	; 0x84
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	0800b2c8 	.word	0x0800b2c8
 8003e48:	40490fdb 	.word	0x40490fdb
 8003e4c:	c0490fdb 	.word	0xc0490fdb
 8003e50:	40490fdb 	.word	0x40490fdb
 8003e54:	3fc90fdb 	.word	0x3fc90fdb
 8003e58:	bfc90fdb 	.word	0xbfc90fdb

08003e5c <arm_cos_f32>:
  @param[in]     x  input value in radians
  @return        cos(x)
 */
float32_t arm_cos_f32(
  float32_t x)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b08b      	sub	sp, #44	; 0x2c
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 8003e66:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e6a:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003f5c <arm_cos_f32+0x100>
 8003e6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e72:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8003e76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e7a:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8003e7e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e86:	ee17 3a90 	vmov	r3, s15
 8003e8a:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8003e8c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e98:	d502      	bpl.n	8003ea0 <arm_cos_f32+0x44>
  {
    n--;
 8003e9a:	6a3b      	ldr	r3, [r7, #32]
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	ee07 3a90 	vmov	s15, r3
 8003ea6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eaa:	ed97 7a06 	vldr	s14, [r7, #24]
 8003eae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003eb2:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 8003eb6:	edd7 7a06 	vldr	s15, [r7, #24]
 8003eba:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003f60 <arm_cos_f32+0x104>
 8003ebe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ec2:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 8003ec6:	edd7 7a07 	vldr	s15, [r7, #28]
 8003eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ece:	ee17 3a90 	vmov	r3, s15
 8003ed2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 8003ed4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003ed6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eda:	d309      	bcc.n	8003ef0 <arm_cos_f32+0x94>
    index = 0;
 8003edc:	2300      	movs	r3, #0
 8003ede:	84fb      	strh	r3, [r7, #38]	; 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 8003ee0:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ee4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003f60 <arm_cos_f32+0x104>
 8003ee8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003eec:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8003ef0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003ef2:	ee07 3a90 	vmov	s15, r3
 8003ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003efa:	ed97 7a07 	vldr	s14, [r7, #28]
 8003efe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f02:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 8003f06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003f08:	4a16      	ldr	r2, [pc, #88]	; (8003f64 <arm_cos_f32+0x108>)
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8003f12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003f14:	3301      	adds	r3, #1
 8003f16:	4a13      	ldr	r2, [pc, #76]	; (8003f64 <arm_cos_f32+0x108>)
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4413      	add	r3, r2
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  cosVal = (1.0f - fract) * a + fract * b;
 8003f20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f24:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f34:	edd7 6a05 	vldr	s13, [r7, #20]
 8003f38:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f44:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (cosVal);
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	ee07 3a90 	vmov	s15, r3
}
 8003f4e:	eeb0 0a67 	vmov.f32	s0, s15
 8003f52:	372c      	adds	r7, #44	; 0x2c
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	3e22f983 	.word	0x3e22f983
 8003f60:	44000000 	.word	0x44000000
 8003f64:	0800aac4 	.word	0x0800aac4

08003f68 <arm_sin_f32>:
  @return        sin(x)
 */

float32_t arm_sin_f32(
  float32_t x)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b08b      	sub	sp, #44	; 0x2c
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 8003f72:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f76:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8004060 <arm_sin_f32+0xf8>
 8003f7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f7e:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8003f82:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f8a:	ee17 3a90 	vmov	r3, s15
 8003f8e:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8003f90:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f9c:	d502      	bpl.n	8003fa4 <arm_sin_f32+0x3c>
  {
    n--;
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	ee07 3a90 	vmov	s15, r3
 8003faa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fae:	ed97 7a06 	vldr	s14, [r7, #24]
 8003fb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fb6:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 8003fba:	edd7 7a06 	vldr	s15, [r7, #24]
 8003fbe:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8004064 <arm_sin_f32+0xfc>
 8003fc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fc6:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 8003fca:	edd7 7a07 	vldr	s15, [r7, #28]
 8003fce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fd2:	ee17 3a90 	vmov	r3, s15
 8003fd6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 8003fd8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003fda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fde:	d309      	bcc.n	8003ff4 <arm_sin_f32+0x8c>
    index = 0;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	84fb      	strh	r3, [r7, #38]	; 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 8003fe4:	edd7 7a07 	vldr	s15, [r7, #28]
 8003fe8:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004064 <arm_sin_f32+0xfc>
 8003fec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ff0:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8003ff4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003ff6:	ee07 3a90 	vmov	s15, r3
 8003ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ffe:	ed97 7a07 	vldr	s14, [r7, #28]
 8004002:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004006:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 800400a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800400c:	4a16      	ldr	r2, [pc, #88]	; (8004068 <arm_sin_f32+0x100>)
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8004016:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004018:	3301      	adds	r3, #1
 800401a:	4a13      	ldr	r2, [pc, #76]	; (8004068 <arm_sin_f32+0x100>)
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 8004024:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004028:	edd7 7a05 	vldr	s15, [r7, #20]
 800402c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004030:	edd7 7a04 	vldr	s15, [r7, #16]
 8004034:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004038:	edd7 6a05 	vldr	s13, [r7, #20]
 800403c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004040:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004044:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004048:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (sinVal);
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	ee07 3a90 	vmov	s15, r3
}
 8004052:	eeb0 0a67 	vmov.f32	s0, s15
 8004056:	372c      	adds	r7, #44	; 0x2c
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	3e22f983 	.word	0x3e22f983
 8004064:	44000000 	.word	0x44000000
 8004068:	0800aac4 	.word	0x0800aac4

0800406c <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800406c:	b480      	push	{r7}
 800406e:	b08b      	sub	sp, #44	; 0x2c
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	885b      	ldrh	r3, [r3, #2]
 8004094:	fb02 f303 	mul.w	r3, r2, r3
 8004098:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800409e:	e013      	b.n	80040c8 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	1d1a      	adds	r2, r3, #4
 80040a4:	627a      	str	r2, [r7, #36]	; 0x24
 80040a6:	ed93 7a00 	vldr	s14, [r3]
 80040aa:	6a3b      	ldr	r3, [r7, #32]
 80040ac:	1d1a      	adds	r2, r3, #4
 80040ae:	623a      	str	r2, [r7, #32]
 80040b0:	edd3 7a00 	vldr	s15, [r3]
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	1d1a      	adds	r2, r3, #4
 80040b8:	61fa      	str	r2, [r7, #28]
 80040ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040be:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	3b01      	subs	r3, #1
 80040c6:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1e8      	bne.n	80040a0 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80040ce:	2300      	movs	r3, #0
 80040d0:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 80040d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	372c      	adds	r7, #44	; 0x2c
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b085      	sub	sp, #20
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	60f8      	str	r0, [r7, #12]
 80040ea:	607b      	str	r3, [r7, #4]
 80040ec:	460b      	mov	r3, r1
 80040ee:	817b      	strh	r3, [r7, #10]
 80040f0:	4613      	mov	r3, r2
 80040f2:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	897a      	ldrh	r2, [r7, #10]
 80040f8:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	893a      	ldrh	r2, [r7, #8]
 80040fe:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	605a      	str	r2, [r3, #4]
}
 8004106:	bf00      	nop
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8004112:	b480      	push	{r7}
 8004114:	b0bb      	sub	sp, #236	; 0xec
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	667b      	str	r3, [r7, #100]	; 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	663b      	str	r3, [r7, #96]	; 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	881b      	ldrh	r3, [r3, #0]
 800412c:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	885b      	ldrh	r3, [r3, #2]
 8004132:	65bb      	str	r3, [r7, #88]	; 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 8004134:	f04f 0300 	mov.w	r3, #0
 8004138:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800413c:	f04f 0300 	mov.w	r3, #0
 8004140:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 8004142:	2300      	movs	r3, #0
 8004144:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 8004148:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800414a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800414e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004150:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8004154:	e03b      	b.n	80041ce <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 8004156:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004158:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 8004162:	e00c      	b.n	800417e <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 8004164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004168:	1d1a      	adds	r2, r3, #4
 800416a:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	601a      	str	r2, [r3, #0]
        j--;
 8004174:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004178:	3b01      	subs	r3, #1
 800417a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 800417e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1ee      	bne.n	8004164 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 8004186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800418a:	1d1a      	adds	r2, r3, #4
 800418c:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8004190:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004194:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 8004196:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800419a:	3b01      	subs	r3, #1
 800419c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 80041a0:	e00c      	b.n	80041bc <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 80041a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a6:	1d1a      	adds	r2, r3, #4
 80041a8:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	601a      	str	r2, [r3, #0]
        j--;
 80041b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80041b6:	3b01      	subs	r3, #1
 80041b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 80041bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1ee      	bne.n	80041a2 <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 80041c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80041c8:	3b01      	subs	r3, #1
 80041ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    while (rowCnt > 0U)
 80041ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1bf      	bne.n	8004156 <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 80041d6:	2300      	movs	r3, #0
 80041d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041dc:	e2c7      	b.n	800476e <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 80041de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041e2:	653b      	str	r3, [r7, #80]	; 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	885b      	ldrh	r3, [r3, #2]
 80041ec:	3301      	adds	r3, #1
 80041ee:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80041f2:	fb01 f303 	mul.w	r3, r1, r3
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      pivot = *pTmp;
 80041fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      selectedRow = column;
 8004208:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800420c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8004210:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004214:	3301      	adds	r3, #1
 8004216:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800421a:	e02c      	b.n	8004276 <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	885b      	ldrh	r3, [r3, #2]
 8004224:	4619      	mov	r1, r3
 8004226:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800422a:	fb03 f101 	mul.w	r1, r3, r1
 800422e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004232:	440b      	add	r3, r1
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
          newPivot = *pTmp;
 800423c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	657b      	str	r3, [r7, #84]	; 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 8004244:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004248:	eeb0 7ae7 	vabs.f32	s14, s15
 800424c:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8004250:	eef0 7ae7 	vabs.f32	s15, s15
 8004254:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800425c:	dd06      	ble.n	800426c <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800425e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004262:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            pivot = newPivot;
 8004266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004268:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800426c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004270:	3301      	adds	r3, #1
 8004272:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004276:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800427a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800427c:	429a      	cmp	r2, r3
 800427e:	d3cd      	bcc.n	800421c <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 8004280:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8004284:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800428c:	f000 809b 	beq.w	80043c6 <arm_mat_inverse_f32+0x2b4>
 8004290:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004294:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004298:	429a      	cmp	r2, r3
 800429a:	f000 8094 	beq.w	80043c6 <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	885b      	ldrh	r3, [r3, #2]
 80042b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80042be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80042c2:	fb03 f202 	mul.w	r2, r3, r2
 80042c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042ca:	4413      	add	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80042d2:	4413      	add	r3, r2
 80042d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80042de:	fb03 f202 	mul.w	r2, r3, r2
 80042e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042e6:	4413      	add	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042ee:	4413      	add	r3, r2
 80042f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042f4:	2300      	movs	r3, #0
 80042f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80042fa:	e018      	b.n	800432e <arm_mat_inverse_f32+0x21c>
 80042fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	63bb      	str	r3, [r7, #56]	; 0x38
 8004304:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004308:	1d1a      	adds	r2, r3, #4
 800430a:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800430e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004312:	6812      	ldr	r2, [r2, #0]
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800431a:	1d1a      	adds	r2, r3, #4
 800431c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8004320:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004328:	3301      	adds	r3, #1
 800432a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800432e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004334:	429a      	cmp	r2, r3
 8004336:	dbe1      	blt.n	80042fc <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	885b      	ldrh	r3, [r3, #2]
 800434c:	647b      	str	r3, [r7, #68]	; 0x44
 800434e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004350:	643b      	str	r3, [r7, #64]	; 0x40
 8004352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004354:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004356:	fb02 f303 	mul.w	r3, r2, r3
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004360:	4413      	add	r3, r2
 8004362:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004366:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004368:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800436c:	fb02 f303 	mul.w	r3, r2, r3
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004376:	4413      	add	r3, r2
 8004378:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800437c:	2300      	movs	r3, #0
 800437e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004382:	e018      	b.n	80043b6 <arm_mat_inverse_f32+0x2a4>
 8004384:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800438c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004390:	1d1a      	adds	r2, r3, #4
 8004392:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004396:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800439a:	6812      	ldr	r2, [r2, #0]
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043a2:	1d1a      	adds	r2, r3, #4
 80043a4:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80043b0:	3301      	adds	r3, #1
 80043b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80043ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043bc:	429a      	cmp	r2, r3
 80043be:	dbe1      	blt.n	8004384 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 80043c0:	2301      	movs	r3, #1
 80043c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 80043c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d009      	beq.n	80043e2 <arm_mat_inverse_f32+0x2d0>
 80043ce:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80043d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80043d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043da:	d102      	bne.n	80043e2 <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 80043dc:	f06f 0304 	mvn.w	r3, #4
 80043e0:	e208      	b.n	80047f4 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 80043e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043e6:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 80043ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043ee:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	885b      	ldrh	r3, [r3, #2]
 80043fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004400:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004402:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	633b      	str	r3, [r7, #48]	; 0x30
 800440a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800440c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800440e:	fb03 f202 	mul.w	r2, r3, r2
 8004412:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004416:	4413      	add	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800441e:	4413      	add	r3, r2
 8004420:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004424:	2300      	movs	r3, #0
 8004426:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800442a:	e011      	b.n	8004450 <arm_mat_inverse_f32+0x33e>
 800442c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004430:	1d1a      	adds	r2, r3, #4
 8004432:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8004436:	ed93 7a00 	vldr	s14, [r3]
 800443a:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800443e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004442:	edc3 7a00 	vstr	s15, [r3]
 8004446:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800444a:	3301      	adds	r3, #1
 800444c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004450:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004456:	429a      	cmp	r2, r3
 8004458:	dbe8      	blt.n	800442c <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	885b      	ldrh	r3, [r3, #2]
 8004466:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446a:	62bb      	str	r3, [r7, #40]	; 0x28
 800446c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004470:	fb02 f303 	mul.w	r3, r2, r3
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800447a:	4413      	add	r3, r2
 800447c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004480:	2300      	movs	r3, #0
 8004482:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004486:	e011      	b.n	80044ac <arm_mat_inverse_f32+0x39a>
 8004488:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800448c:	1d1a      	adds	r2, r3, #4
 800448e:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8004492:	ed93 7a00 	vldr	s14, [r3]
 8004496:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800449a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800449e:	edc3 7a00 	vstr	s15, [r3]
 80044a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044a6:	3301      	adds	r3, #1
 80044a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80044ac:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80044b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b2:	429a      	cmp	r2, r3
 80044b4:	dbe8      	blt.n	8004488 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 80044b6:	2300      	movs	r3, #0
 80044b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      for (;rowNb < pivotRow; rowNb++)
 80044bc:	e0ae      	b.n	800461c <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	885b      	ldrh	r3, [r3, #2]
 80044c6:	4619      	mov	r1, r3
 80044c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044cc:	fb03 f101 	mul.w	r1, r3, r1
 80044d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044d4:	440b      	add	r3, r1
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           pivot = *pTmp;
 80044de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	885b      	ldrh	r3, [r3, #2]
 80044fc:	617b      	str	r3, [r7, #20]
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	613b      	str	r3, [r7, #16]
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800450e:	fb03 f202 	mul.w	r2, r3, r2
 8004512:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004516:	4413      	add	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800451e:	4413      	add	r3, r2
 8004520:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004528:	fb03 f202 	mul.w	r2, r3, r2
 800452c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004530:	4413      	add	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004538:	4413      	add	r3, r2
 800453a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800453e:	2300      	movs	r3, #0
 8004540:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004544:	e01a      	b.n	800457c <arm_mat_inverse_f32+0x46a>
 8004546:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800454a:	1d1a      	adds	r2, r3, #4
 800454c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004550:	ed93 7a00 	vldr	s14, [r3]
 8004554:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8004558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800455c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004560:	1d1a      	adds	r2, r3, #4
 8004562:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004566:	ed93 7a00 	vldr	s14, [r3]
 800456a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800456e:	edc3 7a00 	vstr	s15, [r3]
 8004572:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004576:	3301      	adds	r3, #1
 8004578:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800457c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	429a      	cmp	r2, r3
 8004584:	dbdf      	blt.n	8004546 <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	885b      	ldrh	r3, [r3, #2]
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	60bb      	str	r3, [r7, #8]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80045a6:	fb02 f303 	mul.w	r3, r2, r3
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80045b0:	4413      	add	r3, r2
 80045b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80045ba:	fb02 f303 	mul.w	r3, r2, r3
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80045c4:	4413      	add	r3, r2
 80045c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045ca:	2300      	movs	r3, #0
 80045cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045d0:	e01a      	b.n	8004608 <arm_mat_inverse_f32+0x4f6>
 80045d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045d6:	1d1a      	adds	r2, r3, #4
 80045d8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80045dc:	ed93 7a00 	vldr	s14, [r3]
 80045e0:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80045e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045ec:	1d1a      	adds	r2, r3, #4
 80045ee:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80045f2:	ed93 7a00 	vldr	s14, [r3]
 80045f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045fa:	edc3 7a00 	vstr	s15, [r3]
 80045fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004602:	3301      	adds	r3, #1
 8004604:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004608:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	429a      	cmp	r2, r3
 8004610:	dbdf      	blt.n	80045d2 <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 8004612:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004616:	3301      	adds	r3, #1
 8004618:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800461c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8004620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004622:	429a      	cmp	r2, r3
 8004624:	f4ff af4b 	bcc.w	80044be <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8004628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800462a:	3301      	adds	r3, #1
 800462c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004630:	e092      	b.n	8004758 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	885b      	ldrh	r3, [r3, #2]
 800463a:	4619      	mov	r1, r3
 800463c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004640:	fb03 f101 	mul.w	r1, r3, r1
 8004644:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004648:	440b      	add	r3, r1
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           pivot = *pTmp;
 8004652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	67bb      	str	r3, [r7, #120]	; 0x78
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	677b      	str	r3, [r7, #116]	; 0x74
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	885b      	ldrh	r3, [r3, #2]
 800466c:	627b      	str	r3, [r7, #36]	; 0x24
 800466e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004670:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	623b      	str	r3, [r7, #32]
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800467e:	fb03 f202 	mul.w	r2, r3, r2
 8004682:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004686:	4413      	add	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800468c:	4413      	add	r3, r2
 800468e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004694:	fb03 f202 	mul.w	r2, r3, r2
 8004698:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800469c:	4413      	add	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80046a2:	4413      	add	r3, r2
 80046a4:	677b      	str	r3, [r7, #116]	; 0x74
 80046a6:	2300      	movs	r3, #0
 80046a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80046aa:	e014      	b.n	80046d6 <arm_mat_inverse_f32+0x5c4>
 80046ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046ae:	1d1a      	adds	r2, r3, #4
 80046b0:	677a      	str	r2, [r7, #116]	; 0x74
 80046b2:	ed93 7a00 	vldr	s14, [r3]
 80046b6:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80046ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046c0:	1d1a      	adds	r2, r3, #4
 80046c2:	67ba      	str	r2, [r7, #120]	; 0x78
 80046c4:	ed93 7a00 	vldr	s14, [r3]
 80046c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046cc:	edc3 7a00 	vstr	s15, [r3]
 80046d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80046d2:	3301      	adds	r3, #1
 80046d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80046d6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	429a      	cmp	r2, r3
 80046dc:	dbe6      	blt.n	80046ac <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	885b      	ldrh	r3, [r3, #2]
 80046ee:	61fb      	str	r3, [r7, #28]
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	61bb      	str	r3, [r7, #24]
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80046fa:	fb02 f303 	mul.w	r3, r2, r3
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004702:	4413      	add	r3, r2
 8004704:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800470a:	fb02 f303 	mul.w	r3, r2, r3
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004712:	4413      	add	r3, r2
 8004714:	66bb      	str	r3, [r7, #104]	; 0x68
 8004716:	2300      	movs	r3, #0
 8004718:	673b      	str	r3, [r7, #112]	; 0x70
 800471a:	e014      	b.n	8004746 <arm_mat_inverse_f32+0x634>
 800471c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800471e:	1d1a      	adds	r2, r3, #4
 8004720:	66ba      	str	r2, [r7, #104]	; 0x68
 8004722:	ed93 7a00 	vldr	s14, [r3]
 8004726:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800472a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800472e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004730:	1d1a      	adds	r2, r3, #4
 8004732:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004734:	ed93 7a00 	vldr	s14, [r3]
 8004738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800473c:	edc3 7a00 	vstr	s15, [r3]
 8004740:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004742:	3301      	adds	r3, #1
 8004744:	673b      	str	r3, [r7, #112]	; 0x70
 8004746:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	429a      	cmp	r2, r3
 800474c:	dbe6      	blt.n	800471c <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800474e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004752:	3301      	adds	r3, #1
 8004754:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004758:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800475c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800475e:	429a      	cmp	r2, r3
 8004760:	f4ff af67 	bcc.w	8004632 <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 8004764:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004768:	3301      	adds	r3, #1
 800476a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800476e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004772:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004774:	429a      	cmp	r2, r3
 8004776:	f4ff ad32 	bcc.w	80041de <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800477a:	2300      	movs	r3, #0
 800477c:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 8004780:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004784:	2b01      	cmp	r3, #1
 8004786:	d033      	beq.n	80047f0 <arm_mat_inverse_f32+0x6de>
 8004788:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800478c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004794:	d12c      	bne.n	80047f0 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	667b      	str	r3, [r7, #100]	; 0x64
      for (i = 0; i < numRows * numCols; i++)
 800479c:	2300      	movs	r3, #0
 800479e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047a2:	e010      	b.n	80047c6 <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 80047a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80047ac:	4413      	add	r3, r2
 80047ae:	edd3 7a00 	vldr	s15, [r3]
 80047b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80047b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ba:	d10d      	bne.n	80047d8 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 80047bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047c0:	3301      	adds	r3, #1
 80047c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047ca:	fb02 f303 	mul.w	r3, r2, r3
 80047ce:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d3e6      	bcc.n	80047a4 <arm_mat_inverse_f32+0x692>
 80047d6:	e000      	b.n	80047da <arm_mat_inverse_f32+0x6c8>
            break;
 80047d8:	bf00      	nop
      }

      if (i == numRows * numCols)
 80047da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047de:	fb02 f303 	mul.w	r3, r2, r3
 80047e2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d102      	bne.n	80047f0 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 80047ea:	23fb      	movs	r3, #251	; 0xfb
 80047ec:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
    }
  }

  /* Return to application */
  return (status);
 80047f0:	f997 30c3 	ldrsb.w	r3, [r7, #195]	; 0xc3
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	37ec      	adds	r7, #236	; 0xec
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8004800:	b480      	push	{r7}
 8004802:	b093      	sub	sp, #76	; 0x4c
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	643b      	str	r3, [r7, #64]	; 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	885b      	ldrh	r3, [r3, #2]
 8004834:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	885b      	ldrh	r3, [r3, #2]
 800483a:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800483c:	2300      	movs	r3, #0
 800483e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004840:	8b7b      	ldrh	r3, [r7, #26]
 8004842:	62bb      	str	r3, [r7, #40]	; 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 8004844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	69fa      	ldr	r2, [r7, #28]
 800484a:	4413      	add	r3, r2
 800484c:	63bb      	str	r3, [r7, #56]	; 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800484e:	8b3b      	ldrh	r3, [r7, #24]
 8004850:	633b      	str	r3, [r7, #48]	; 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	643b      	str	r3, [r7, #64]	; 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8004858:	f04f 0300 	mov.w	r3, #0
 800485c:	637b      	str	r3, [r7, #52]	; 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800485e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004860:	647b      	str	r3, [r7, #68]	; 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 8004862:	8afb      	ldrh	r3, [r7, #22]
 8004864:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 8004866:	e017      	b.n	8004898 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 8004868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800486a:	1d1a      	adds	r2, r3, #4
 800486c:	647a      	str	r2, [r7, #68]	; 0x44
 800486e:	ed93 7a00 	vldr	s14, [r3]
 8004872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004874:	edd3 7a00 	vldr	s15, [r3]
 8004878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800487c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004880:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004884:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
          pIn2 += numColsB;
 8004888:	8b3b      	ldrh	r3, [r7, #24]
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800488e:	4413      	add	r3, r2
 8004890:	643b      	str	r3, [r7, #64]	; 0x40

          /* Decrement loop counter */
          colCnt--;
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	3b01      	subs	r3, #1
 8004896:	627b      	str	r3, [r7, #36]	; 0x24
        while (colCnt > 0U)
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1e4      	bne.n	8004868 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800489e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a0:	1d1a      	adds	r2, r3, #4
 80048a2:	63ba      	str	r2, [r7, #56]	; 0x38
 80048a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048a6:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 80048a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048aa:	3b01      	subs	r3, #1
 80048ac:	633b      	str	r3, [r7, #48]	; 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 80048ae:	8b3a      	ldrh	r2, [r7, #24]
 80048b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	6a3a      	ldr	r2, [r7, #32]
 80048b8:	4413      	add	r3, r2
 80048ba:	643b      	str	r3, [r7, #64]	; 0x40

      } while (col > 0U);
 80048bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1ca      	bne.n	8004858 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 80048c2:	8b3b      	ldrh	r3, [r7, #24]
 80048c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048c6:	4413      	add	r3, r2
 80048c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pInA = pInA + numColsA;
 80048ca:	8afb      	ldrh	r3, [r7, #22]
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048d0:	4413      	add	r3, r2
 80048d2:	63fb      	str	r3, [r7, #60]	; 0x3c

      /* Decrement row loop counter */
      row--;
 80048d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d6:	3b01      	subs	r3, #1
 80048d8:	62bb      	str	r3, [r7, #40]	; 0x28

    } while (row > 0U);
 80048da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1b1      	bne.n	8004844 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80048e0:	2300      	movs	r3, #0
 80048e2:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 80048e4:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	374c      	adds	r7, #76	; 0x4c
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b08b      	sub	sp, #44	; 0x2c
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8004900:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	461a      	mov	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	885b      	ldrh	r3, [r3, #2]
 8004918:	fb02 f303 	mul.w	r3, r2, r3
 800491c:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8004922:	e010      	b.n	8004946 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	1d1a      	adds	r2, r3, #4
 8004928:	627a      	str	r2, [r7, #36]	; 0x24
 800492a:	ed93 7a00 	vldr	s14, [r3]
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	1d1a      	adds	r2, r3, #4
 8004932:	623a      	str	r2, [r7, #32]
 8004934:	edd7 7a02 	vldr	s15, [r7, #8]
 8004938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800493c:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	3b01      	subs	r3, #1
 8004944:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1eb      	bne.n	8004924 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800494c:	2300      	movs	r3, #0
 800494e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 8004950:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004954:	4618      	mov	r0, r3
 8004956:	372c      	adds	r7, #44	; 0x2c
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8004960:	b480      	push	{r7}
 8004962:	b08b      	sub	sp, #44	; 0x2c
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	881b      	ldrh	r3, [r3, #0]
 8004982:	461a      	mov	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	885b      	ldrh	r3, [r3, #2]
 8004988:	fb02 f303 	mul.w	r3, r2, r3
 800498c:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8004992:	e013      	b.n	80049bc <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	1d1a      	adds	r2, r3, #4
 8004998:	627a      	str	r2, [r7, #36]	; 0x24
 800499a:	ed93 7a00 	vldr	s14, [r3]
 800499e:	6a3b      	ldr	r3, [r7, #32]
 80049a0:	1d1a      	adds	r2, r3, #4
 80049a2:	623a      	str	r2, [r7, #32]
 80049a4:	edd3 7a00 	vldr	s15, [r3]
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	1d1a      	adds	r2, r3, #4
 80049ac:	61fa      	str	r2, [r7, #28]
 80049ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049b2:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	3b01      	subs	r3, #1
 80049ba:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1e8      	bne.n	8004994 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80049c2:	2300      	movs	r3, #0
 80049c4:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 80049c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	372c      	adds	r7, #44	; 0x2c
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b08b      	sub	sp, #44	; 0x2c
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	881b      	ldrh	r3, [r3, #0]
 80049f0:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	885b      	ldrh	r3, [r3, #2]
 80049f6:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 80049f8:	89fb      	ldrh	r3, [r7, #14]
 80049fa:	61bb      	str	r3, [r7, #24]
 80049fc:	2300      	movs	r3, #0
 80049fe:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	4413      	add	r3, r2
 8004a08:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8004a0a:	89bb      	ldrh	r3, [r7, #12]
 8004a0c:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8004a0e:	e00d      	b.n	8004a2c <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	1d1a      	adds	r2, r3, #4
 8004a14:	627a      	str	r2, [r7, #36]	; 0x24
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	6a3b      	ldr	r3, [r7, #32]
 8004a1a:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8004a1c:	89fb      	ldrh	r3, [r7, #14]
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	6a3a      	ldr	r2, [r7, #32]
 8004a22:	4413      	add	r3, r2
 8004a24:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1ee      	bne.n	8004a10 <arm_mat_trans_f32+0x3a>
      }

      i++;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	3301      	adds	r3, #1
 8004a36:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1dd      	bne.n	8004a00 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8004a44:	2300      	movs	r3, #0
 8004a46:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 8004a48:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	372c      	adds	r7, #44	; 0x2c
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a5c:	4b0e      	ldr	r3, [pc, #56]	; (8004a98 <HAL_Init+0x40>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a0d      	ldr	r2, [pc, #52]	; (8004a98 <HAL_Init+0x40>)
 8004a62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a68:	4b0b      	ldr	r3, [pc, #44]	; (8004a98 <HAL_Init+0x40>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a0a      	ldr	r2, [pc, #40]	; (8004a98 <HAL_Init+0x40>)
 8004a6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a74:	4b08      	ldr	r3, [pc, #32]	; (8004a98 <HAL_Init+0x40>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a07      	ldr	r2, [pc, #28]	; (8004a98 <HAL_Init+0x40>)
 8004a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a80:	2003      	movs	r0, #3
 8004a82:	f000 f92b 	bl	8004cdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a86:	2000      	movs	r0, #0
 8004a88:	f000 f808 	bl	8004a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a8c:	f7fe fb7c 	bl	8003188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	40023c00 	.word	0x40023c00

08004a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004aa4:	4b12      	ldr	r3, [pc, #72]	; (8004af0 <HAL_InitTick+0x54>)
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	4b12      	ldr	r3, [pc, #72]	; (8004af4 <HAL_InitTick+0x58>)
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	4619      	mov	r1, r3
 8004aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 f943 	bl	8004d46 <HAL_SYSTICK_Config>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e00e      	b.n	8004ae8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b0f      	cmp	r3, #15
 8004ace:	d80a      	bhi.n	8004ae6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	6879      	ldr	r1, [r7, #4]
 8004ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad8:	f000 f90b 	bl	8004cf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004adc:	4a06      	ldr	r2, [pc, #24]	; (8004af8 <HAL_InitTick+0x5c>)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	e000      	b.n	8004ae8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	20000210 	.word	0x20000210
 8004af4:	20000218 	.word	0x20000218
 8004af8:	20000214 	.word	0x20000214

08004afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b00:	4b06      	ldr	r3, [pc, #24]	; (8004b1c <HAL_IncTick+0x20>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	461a      	mov	r2, r3
 8004b06:	4b06      	ldr	r3, [pc, #24]	; (8004b20 <HAL_IncTick+0x24>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	4a04      	ldr	r2, [pc, #16]	; (8004b20 <HAL_IncTick+0x24>)
 8004b0e:	6013      	str	r3, [r2, #0]
}
 8004b10:	bf00      	nop
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	20000218 	.word	0x20000218
 8004b20:	20001148 	.word	0x20001148

08004b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
  return uwTick;
 8004b28:	4b03      	ldr	r3, [pc, #12]	; (8004b38 <HAL_GetTick+0x14>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	20001148 	.word	0x20001148

08004b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b4c:	4b0c      	ldr	r3, [pc, #48]	; (8004b80 <__NVIC_SetPriorityGrouping+0x44>)
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b58:	4013      	ands	r3, r2
 8004b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b6e:	4a04      	ldr	r2, [pc, #16]	; (8004b80 <__NVIC_SetPriorityGrouping+0x44>)
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	60d3      	str	r3, [r2, #12]
}
 8004b74:	bf00      	nop
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	e000ed00 	.word	0xe000ed00

08004b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b84:	b480      	push	{r7}
 8004b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b88:	4b04      	ldr	r3, [pc, #16]	; (8004b9c <__NVIC_GetPriorityGrouping+0x18>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	0a1b      	lsrs	r3, r3, #8
 8004b8e:	f003 0307 	and.w	r3, r3, #7
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	e000ed00 	.word	0xe000ed00

08004ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	db0b      	blt.n	8004bca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bb2:	79fb      	ldrb	r3, [r7, #7]
 8004bb4:	f003 021f 	and.w	r2, r3, #31
 8004bb8:	4907      	ldr	r1, [pc, #28]	; (8004bd8 <__NVIC_EnableIRQ+0x38>)
 8004bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bbe:	095b      	lsrs	r3, r3, #5
 8004bc0:	2001      	movs	r0, #1
 8004bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8004bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	e000e100 	.word	0xe000e100

08004bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	4603      	mov	r3, r0
 8004be4:	6039      	str	r1, [r7, #0]
 8004be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	db0a      	blt.n	8004c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	490c      	ldr	r1, [pc, #48]	; (8004c28 <__NVIC_SetPriority+0x4c>)
 8004bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bfa:	0112      	lsls	r2, r2, #4
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	440b      	add	r3, r1
 8004c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c04:	e00a      	b.n	8004c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	4908      	ldr	r1, [pc, #32]	; (8004c2c <__NVIC_SetPriority+0x50>)
 8004c0c:	79fb      	ldrb	r3, [r7, #7]
 8004c0e:	f003 030f 	and.w	r3, r3, #15
 8004c12:	3b04      	subs	r3, #4
 8004c14:	0112      	lsls	r2, r2, #4
 8004c16:	b2d2      	uxtb	r2, r2
 8004c18:	440b      	add	r3, r1
 8004c1a:	761a      	strb	r2, [r3, #24]
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	e000e100 	.word	0xe000e100
 8004c2c:	e000ed00 	.word	0xe000ed00

08004c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b089      	sub	sp, #36	; 0x24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f003 0307 	and.w	r3, r3, #7
 8004c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	f1c3 0307 	rsb	r3, r3, #7
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	bf28      	it	cs
 8004c4e:	2304      	movcs	r3, #4
 8004c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	3304      	adds	r3, #4
 8004c56:	2b06      	cmp	r3, #6
 8004c58:	d902      	bls.n	8004c60 <NVIC_EncodePriority+0x30>
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	3b03      	subs	r3, #3
 8004c5e:	e000      	b.n	8004c62 <NVIC_EncodePriority+0x32>
 8004c60:	2300      	movs	r3, #0
 8004c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c64:	f04f 32ff 	mov.w	r2, #4294967295
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6e:	43da      	mvns	r2, r3
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	401a      	ands	r2, r3
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c78:	f04f 31ff 	mov.w	r1, #4294967295
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c82:	43d9      	mvns	r1, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c88:	4313      	orrs	r3, r2
         );
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3724      	adds	r7, #36	; 0x24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
	...

08004c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ca8:	d301      	bcc.n	8004cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004caa:	2301      	movs	r3, #1
 8004cac:	e00f      	b.n	8004cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cae:	4a0a      	ldr	r2, [pc, #40]	; (8004cd8 <SysTick_Config+0x40>)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cb6:	210f      	movs	r1, #15
 8004cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cbc:	f7ff ff8e 	bl	8004bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cc0:	4b05      	ldr	r3, [pc, #20]	; (8004cd8 <SysTick_Config+0x40>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cc6:	4b04      	ldr	r3, [pc, #16]	; (8004cd8 <SysTick_Config+0x40>)
 8004cc8:	2207      	movs	r2, #7
 8004cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	e000e010 	.word	0xe000e010

08004cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7ff ff29 	bl	8004b3c <__NVIC_SetPriorityGrouping>
}
 8004cea:	bf00      	nop
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b086      	sub	sp, #24
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	60b9      	str	r1, [r7, #8]
 8004cfc:	607a      	str	r2, [r7, #4]
 8004cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d04:	f7ff ff3e 	bl	8004b84 <__NVIC_GetPriorityGrouping>
 8004d08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	68b9      	ldr	r1, [r7, #8]
 8004d0e:	6978      	ldr	r0, [r7, #20]
 8004d10:	f7ff ff8e 	bl	8004c30 <NVIC_EncodePriority>
 8004d14:	4602      	mov	r2, r0
 8004d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d1a:	4611      	mov	r1, r2
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7ff ff5d 	bl	8004bdc <__NVIC_SetPriority>
}
 8004d22:	bf00      	nop
 8004d24:	3718      	adds	r7, #24
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b082      	sub	sp, #8
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	4603      	mov	r3, r0
 8004d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7ff ff31 	bl	8004ba0 <__NVIC_EnableIRQ>
}
 8004d3e:	bf00      	nop
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b082      	sub	sp, #8
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7ff ffa2 	bl	8004c98 <SysTick_Config>
 8004d54:	4603      	mov	r3, r0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
	...

08004d60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d6c:	f7ff feda 	bl	8004b24 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e099      	b.n	8004eb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0201 	bic.w	r2, r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d9c:	e00f      	b.n	8004dbe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d9e:	f7ff fec1 	bl	8004b24 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b05      	cmp	r3, #5
 8004daa:	d908      	bls.n	8004dbe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2220      	movs	r2, #32
 8004db0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2203      	movs	r2, #3
 8004db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e078      	b.n	8004eb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1e8      	bne.n	8004d9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	4b38      	ldr	r3, [pc, #224]	; (8004eb8 <HAL_DMA_Init+0x158>)
 8004dd8:	4013      	ands	r3, r2
 8004dda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004df6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d107      	bne.n	8004e28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e20:	4313      	orrs	r3, r2
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f023 0307 	bic.w	r3, r3, #7
 8004e3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	d117      	bne.n	8004e82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00e      	beq.n	8004e82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 fb0d 	bl	8005484 <DMA_CheckFifoParam>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d008      	beq.n	8004e82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2240      	movs	r2, #64	; 0x40
 8004e74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e016      	b.n	8004eb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 fac4 	bl	8005418 <DMA_CalcBaseAndBitshift>
 8004e90:	4603      	mov	r3, r0
 8004e92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e98:	223f      	movs	r2, #63	; 0x3f
 8004e9a:	409a      	lsls	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3718      	adds	r7, #24
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	f010803f 	.word	0xf010803f

08004ebc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
 8004ec8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d101      	bne.n	8004ee2 <HAL_DMA_Start_IT+0x26>
 8004ede:	2302      	movs	r3, #2
 8004ee0:	e040      	b.n	8004f64 <HAL_DMA_Start_IT+0xa8>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d12f      	bne.n	8004f56 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2202      	movs	r2, #2
 8004efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	68b9      	ldr	r1, [r7, #8]
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f000 fa56 	bl	80053bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f14:	223f      	movs	r2, #63	; 0x3f
 8004f16:	409a      	lsls	r2, r3
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0216 	orr.w	r2, r2, #22
 8004f2a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d007      	beq.n	8004f44 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f042 0208 	orr.w	r2, r2, #8
 8004f42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0201 	orr.w	r2, r2, #1
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	e005      	b.n	8004f62 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004f5e:	2302      	movs	r3, #2
 8004f60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3718      	adds	r7, #24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f78:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004f7a:	f7ff fdd3 	bl	8004b24 <HAL_GetTick>
 8004f7e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d008      	beq.n	8004f9e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2280      	movs	r2, #128	; 0x80
 8004f90:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e052      	b.n	8005044 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0216 	bic.w	r2, r2, #22
 8004fac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	695a      	ldr	r2, [r3, #20]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fbc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d103      	bne.n	8004fce <HAL_DMA_Abort+0x62>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d007      	beq.n	8004fde <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 0208 	bic.w	r2, r2, #8
 8004fdc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 0201 	bic.w	r2, r2, #1
 8004fec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fee:	e013      	b.n	8005018 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ff0:	f7ff fd98 	bl	8004b24 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b05      	cmp	r3, #5
 8004ffc:	d90c      	bls.n	8005018 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2220      	movs	r2, #32
 8005002:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2203      	movs	r2, #3
 8005008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e015      	b.n	8005044 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1e4      	bne.n	8004ff0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800502a:	223f      	movs	r2, #63	; 0x3f
 800502c:	409a      	lsls	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d004      	beq.n	800506a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2280      	movs	r2, #128	; 0x80
 8005064:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e00c      	b.n	8005084 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2205      	movs	r2, #5
 800506e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 0201 	bic.w	r2, r2, #1
 8005080:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800509c:	4b8e      	ldr	r3, [pc, #568]	; (80052d8 <HAL_DMA_IRQHandler+0x248>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a8e      	ldr	r2, [pc, #568]	; (80052dc <HAL_DMA_IRQHandler+0x24c>)
 80050a2:	fba2 2303 	umull	r2, r3, r2, r3
 80050a6:	0a9b      	lsrs	r3, r3, #10
 80050a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ba:	2208      	movs	r2, #8
 80050bc:	409a      	lsls	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	4013      	ands	r3, r2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d01a      	beq.n	80050fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d013      	beq.n	80050fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0204 	bic.w	r2, r2, #4
 80050e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e8:	2208      	movs	r2, #8
 80050ea:	409a      	lsls	r2, r3
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f4:	f043 0201 	orr.w	r2, r3, #1
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005100:	2201      	movs	r2, #1
 8005102:	409a      	lsls	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	4013      	ands	r3, r2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d012      	beq.n	8005132 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00b      	beq.n	8005132 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800511e:	2201      	movs	r2, #1
 8005120:	409a      	lsls	r2, r3
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800512a:	f043 0202 	orr.w	r2, r3, #2
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005136:	2204      	movs	r2, #4
 8005138:	409a      	lsls	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	4013      	ands	r3, r2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d012      	beq.n	8005168 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00b      	beq.n	8005168 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005154:	2204      	movs	r2, #4
 8005156:	409a      	lsls	r2, r3
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005160:	f043 0204 	orr.w	r2, r3, #4
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800516c:	2210      	movs	r2, #16
 800516e:	409a      	lsls	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4013      	ands	r3, r2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d043      	beq.n	8005200 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0308 	and.w	r3, r3, #8
 8005182:	2b00      	cmp	r3, #0
 8005184:	d03c      	beq.n	8005200 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800518a:	2210      	movs	r2, #16
 800518c:	409a      	lsls	r2, r3
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d018      	beq.n	80051d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d108      	bne.n	80051c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d024      	beq.n	8005200 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	4798      	blx	r3
 80051be:	e01f      	b.n	8005200 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d01b      	beq.n	8005200 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	4798      	blx	r3
 80051d0:	e016      	b.n	8005200 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d107      	bne.n	80051f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 0208 	bic.w	r2, r2, #8
 80051ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005204:	2220      	movs	r2, #32
 8005206:	409a      	lsls	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	4013      	ands	r3, r2
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 808f 	beq.w	8005330 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0310 	and.w	r3, r3, #16
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 8087 	beq.w	8005330 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005226:	2220      	movs	r2, #32
 8005228:	409a      	lsls	r2, r3
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b05      	cmp	r3, #5
 8005238:	d136      	bne.n	80052a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f022 0216 	bic.w	r2, r2, #22
 8005248:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	695a      	ldr	r2, [r3, #20]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005258:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	2b00      	cmp	r3, #0
 8005260:	d103      	bne.n	800526a <HAL_DMA_IRQHandler+0x1da>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005266:	2b00      	cmp	r3, #0
 8005268:	d007      	beq.n	800527a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 0208 	bic.w	r2, r2, #8
 8005278:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800527e:	223f      	movs	r2, #63	; 0x3f
 8005280:	409a      	lsls	r2, r3
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800529a:	2b00      	cmp	r3, #0
 800529c:	d07e      	beq.n	800539c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	4798      	blx	r3
        }
        return;
 80052a6:	e079      	b.n	800539c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d01d      	beq.n	80052f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10d      	bne.n	80052e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d031      	beq.n	8005330 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	4798      	blx	r3
 80052d4:	e02c      	b.n	8005330 <HAL_DMA_IRQHandler+0x2a0>
 80052d6:	bf00      	nop
 80052d8:	20000210 	.word	0x20000210
 80052dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d023      	beq.n	8005330 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	4798      	blx	r3
 80052f0:	e01e      	b.n	8005330 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10f      	bne.n	8005320 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 0210 	bic.w	r2, r2, #16
 800530e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005324:	2b00      	cmp	r3, #0
 8005326:	d003      	beq.n	8005330 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005334:	2b00      	cmp	r3, #0
 8005336:	d032      	beq.n	800539e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b00      	cmp	r3, #0
 8005342:	d022      	beq.n	800538a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2205      	movs	r2, #5
 8005348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0201 	bic.w	r2, r2, #1
 800535a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	3301      	adds	r3, #1
 8005360:	60bb      	str	r3, [r7, #8]
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	429a      	cmp	r2, r3
 8005366:	d307      	bcc.n	8005378 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1f2      	bne.n	800535c <HAL_DMA_IRQHandler+0x2cc>
 8005376:	e000      	b.n	800537a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005378:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800538e:	2b00      	cmp	r3, #0
 8005390:	d005      	beq.n	800539e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	4798      	blx	r3
 800539a:	e000      	b.n	800539e <HAL_DMA_IRQHandler+0x30e>
        return;
 800539c:	bf00      	nop
    }
  }
}
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
 80053c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80053d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	683a      	ldr	r2, [r7, #0]
 80053e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	2b40      	cmp	r3, #64	; 0x40
 80053e8:	d108      	bne.n	80053fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80053fa:	e007      	b.n	800540c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	60da      	str	r2, [r3, #12]
}
 800540c:	bf00      	nop
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	b2db      	uxtb	r3, r3
 8005426:	3b10      	subs	r3, #16
 8005428:	4a14      	ldr	r2, [pc, #80]	; (800547c <DMA_CalcBaseAndBitshift+0x64>)
 800542a:	fba2 2303 	umull	r2, r3, r2, r3
 800542e:	091b      	lsrs	r3, r3, #4
 8005430:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005432:	4a13      	ldr	r2, [pc, #76]	; (8005480 <DMA_CalcBaseAndBitshift+0x68>)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4413      	add	r3, r2
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	461a      	mov	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2b03      	cmp	r3, #3
 8005444:	d909      	bls.n	800545a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800544e:	f023 0303 	bic.w	r3, r3, #3
 8005452:	1d1a      	adds	r2, r3, #4
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	659a      	str	r2, [r3, #88]	; 0x58
 8005458:	e007      	b.n	800546a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005462:	f023 0303 	bic.w	r3, r3, #3
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800546e:	4618      	mov	r0, r3
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	aaaaaaab 	.word	0xaaaaaaab
 8005480:	0800b2f0 	.word	0x0800b2f0

08005484 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800548c:	2300      	movs	r3, #0
 800548e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005494:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d11f      	bne.n	80054de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	2b03      	cmp	r3, #3
 80054a2:	d856      	bhi.n	8005552 <DMA_CheckFifoParam+0xce>
 80054a4:	a201      	add	r2, pc, #4	; (adr r2, 80054ac <DMA_CheckFifoParam+0x28>)
 80054a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054aa:	bf00      	nop
 80054ac:	080054bd 	.word	0x080054bd
 80054b0:	080054cf 	.word	0x080054cf
 80054b4:	080054bd 	.word	0x080054bd
 80054b8:	08005553 	.word	0x08005553
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d046      	beq.n	8005556 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054cc:	e043      	b.n	8005556 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054d6:	d140      	bne.n	800555a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054dc:	e03d      	b.n	800555a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054e6:	d121      	bne.n	800552c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2b03      	cmp	r3, #3
 80054ec:	d837      	bhi.n	800555e <DMA_CheckFifoParam+0xda>
 80054ee:	a201      	add	r2, pc, #4	; (adr r2, 80054f4 <DMA_CheckFifoParam+0x70>)
 80054f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f4:	08005505 	.word	0x08005505
 80054f8:	0800550b 	.word	0x0800550b
 80054fc:	08005505 	.word	0x08005505
 8005500:	0800551d 	.word	0x0800551d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	73fb      	strb	r3, [r7, #15]
      break;
 8005508:	e030      	b.n	800556c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d025      	beq.n	8005562 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800551a:	e022      	b.n	8005562 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005520:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005524:	d11f      	bne.n	8005566 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800552a:	e01c      	b.n	8005566 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2b02      	cmp	r3, #2
 8005530:	d903      	bls.n	800553a <DMA_CheckFifoParam+0xb6>
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	2b03      	cmp	r3, #3
 8005536:	d003      	beq.n	8005540 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005538:	e018      	b.n	800556c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	73fb      	strb	r3, [r7, #15]
      break;
 800553e:	e015      	b.n	800556c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005544:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00e      	beq.n	800556a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	73fb      	strb	r3, [r7, #15]
      break;
 8005550:	e00b      	b.n	800556a <DMA_CheckFifoParam+0xe6>
      break;
 8005552:	bf00      	nop
 8005554:	e00a      	b.n	800556c <DMA_CheckFifoParam+0xe8>
      break;
 8005556:	bf00      	nop
 8005558:	e008      	b.n	800556c <DMA_CheckFifoParam+0xe8>
      break;
 800555a:	bf00      	nop
 800555c:	e006      	b.n	800556c <DMA_CheckFifoParam+0xe8>
      break;
 800555e:	bf00      	nop
 8005560:	e004      	b.n	800556c <DMA_CheckFifoParam+0xe8>
      break;
 8005562:	bf00      	nop
 8005564:	e002      	b.n	800556c <DMA_CheckFifoParam+0xe8>
      break;   
 8005566:	bf00      	nop
 8005568:	e000      	b.n	800556c <DMA_CheckFifoParam+0xe8>
      break;
 800556a:	bf00      	nop
    }
  } 
  
  return status; 
 800556c:	7bfb      	ldrb	r3, [r7, #15]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop

0800557c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800557c:	b480      	push	{r7}
 800557e:	b089      	sub	sp, #36	; 0x24
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005586:	2300      	movs	r3, #0
 8005588:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800558a:	2300      	movs	r3, #0
 800558c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800558e:	2300      	movs	r3, #0
 8005590:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005592:	2300      	movs	r3, #0
 8005594:	61fb      	str	r3, [r7, #28]
 8005596:	e159      	b.n	800584c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005598:	2201      	movs	r2, #1
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	fa02 f303 	lsl.w	r3, r2, r3
 80055a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	4013      	ands	r3, r2
 80055aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	f040 8148 	bne.w	8005846 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f003 0303 	and.w	r3, r3, #3
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d005      	beq.n	80055ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d130      	bne.n	8005630 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	005b      	lsls	r3, r3, #1
 80055d8:	2203      	movs	r2, #3
 80055da:	fa02 f303 	lsl.w	r3, r2, r3
 80055de:	43db      	mvns	r3, r3
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	4013      	ands	r3, r2
 80055e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	005b      	lsls	r3, r3, #1
 80055ee:	fa02 f303 	lsl.w	r3, r2, r3
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005604:	2201      	movs	r2, #1
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	fa02 f303 	lsl.w	r3, r2, r3
 800560c:	43db      	mvns	r3, r3
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	4013      	ands	r3, r2
 8005612:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	091b      	lsrs	r3, r3, #4
 800561a:	f003 0201 	and.w	r2, r3, #1
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	fa02 f303 	lsl.w	r3, r2, r3
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	4313      	orrs	r3, r2
 8005628:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f003 0303 	and.w	r3, r3, #3
 8005638:	2b03      	cmp	r3, #3
 800563a:	d017      	beq.n	800566c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	2203      	movs	r2, #3
 8005648:	fa02 f303 	lsl.w	r3, r2, r3
 800564c:	43db      	mvns	r3, r3
 800564e:	69ba      	ldr	r2, [r7, #24]
 8005650:	4013      	ands	r3, r2
 8005652:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	fa02 f303 	lsl.w	r3, r2, r3
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	4313      	orrs	r3, r2
 8005664:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f003 0303 	and.w	r3, r3, #3
 8005674:	2b02      	cmp	r3, #2
 8005676:	d123      	bne.n	80056c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	08da      	lsrs	r2, r3, #3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3208      	adds	r2, #8
 8005680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005684:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	220f      	movs	r2, #15
 8005690:	fa02 f303 	lsl.w	r3, r2, r3
 8005694:	43db      	mvns	r3, r3
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	4013      	ands	r3, r2
 800569a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	691a      	ldr	r2, [r3, #16]
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	08da      	lsrs	r2, r3, #3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	3208      	adds	r2, #8
 80056ba:	69b9      	ldr	r1, [r7, #24]
 80056bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	005b      	lsls	r3, r3, #1
 80056ca:	2203      	movs	r2, #3
 80056cc:	fa02 f303 	lsl.w	r3, r2, r3
 80056d0:	43db      	mvns	r3, r3
 80056d2:	69ba      	ldr	r2, [r7, #24]
 80056d4:	4013      	ands	r3, r2
 80056d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f003 0203 	and.w	r2, r3, #3
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	005b      	lsls	r3, r3, #1
 80056e4:	fa02 f303 	lsl.w	r3, r2, r3
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 80a2 	beq.w	8005846 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005702:	2300      	movs	r3, #0
 8005704:	60fb      	str	r3, [r7, #12]
 8005706:	4b57      	ldr	r3, [pc, #348]	; (8005864 <HAL_GPIO_Init+0x2e8>)
 8005708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800570a:	4a56      	ldr	r2, [pc, #344]	; (8005864 <HAL_GPIO_Init+0x2e8>)
 800570c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005710:	6453      	str	r3, [r2, #68]	; 0x44
 8005712:	4b54      	ldr	r3, [pc, #336]	; (8005864 <HAL_GPIO_Init+0x2e8>)
 8005714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800571a:	60fb      	str	r3, [r7, #12]
 800571c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800571e:	4a52      	ldr	r2, [pc, #328]	; (8005868 <HAL_GPIO_Init+0x2ec>)
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	089b      	lsrs	r3, r3, #2
 8005724:	3302      	adds	r3, #2
 8005726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800572a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	f003 0303 	and.w	r3, r3, #3
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	220f      	movs	r2, #15
 8005736:	fa02 f303 	lsl.w	r3, r2, r3
 800573a:	43db      	mvns	r3, r3
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	4013      	ands	r3, r2
 8005740:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a49      	ldr	r2, [pc, #292]	; (800586c <HAL_GPIO_Init+0x2f0>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d019      	beq.n	800577e <HAL_GPIO_Init+0x202>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a48      	ldr	r2, [pc, #288]	; (8005870 <HAL_GPIO_Init+0x2f4>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d013      	beq.n	800577a <HAL_GPIO_Init+0x1fe>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a47      	ldr	r2, [pc, #284]	; (8005874 <HAL_GPIO_Init+0x2f8>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00d      	beq.n	8005776 <HAL_GPIO_Init+0x1fa>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a46      	ldr	r2, [pc, #280]	; (8005878 <HAL_GPIO_Init+0x2fc>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d007      	beq.n	8005772 <HAL_GPIO_Init+0x1f6>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a45      	ldr	r2, [pc, #276]	; (800587c <HAL_GPIO_Init+0x300>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d101      	bne.n	800576e <HAL_GPIO_Init+0x1f2>
 800576a:	2304      	movs	r3, #4
 800576c:	e008      	b.n	8005780 <HAL_GPIO_Init+0x204>
 800576e:	2307      	movs	r3, #7
 8005770:	e006      	b.n	8005780 <HAL_GPIO_Init+0x204>
 8005772:	2303      	movs	r3, #3
 8005774:	e004      	b.n	8005780 <HAL_GPIO_Init+0x204>
 8005776:	2302      	movs	r3, #2
 8005778:	e002      	b.n	8005780 <HAL_GPIO_Init+0x204>
 800577a:	2301      	movs	r3, #1
 800577c:	e000      	b.n	8005780 <HAL_GPIO_Init+0x204>
 800577e:	2300      	movs	r3, #0
 8005780:	69fa      	ldr	r2, [r7, #28]
 8005782:	f002 0203 	and.w	r2, r2, #3
 8005786:	0092      	lsls	r2, r2, #2
 8005788:	4093      	lsls	r3, r2
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	4313      	orrs	r3, r2
 800578e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005790:	4935      	ldr	r1, [pc, #212]	; (8005868 <HAL_GPIO_Init+0x2ec>)
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	089b      	lsrs	r3, r3, #2
 8005796:	3302      	adds	r3, #2
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800579e:	4b38      	ldr	r3, [pc, #224]	; (8005880 <HAL_GPIO_Init+0x304>)
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	43db      	mvns	r3, r3
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	4013      	ands	r3, r2
 80057ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d003      	beq.n	80057c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	4313      	orrs	r3, r2
 80057c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80057c2:	4a2f      	ldr	r2, [pc, #188]	; (8005880 <HAL_GPIO_Init+0x304>)
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80057c8:	4b2d      	ldr	r3, [pc, #180]	; (8005880 <HAL_GPIO_Init+0x304>)
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	43db      	mvns	r3, r3
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	4013      	ands	r3, r2
 80057d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d003      	beq.n	80057ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80057ec:	4a24      	ldr	r2, [pc, #144]	; (8005880 <HAL_GPIO_Init+0x304>)
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80057f2:	4b23      	ldr	r3, [pc, #140]	; (8005880 <HAL_GPIO_Init+0x304>)
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	43db      	mvns	r3, r3
 80057fc:	69ba      	ldr	r2, [r7, #24]
 80057fe:	4013      	ands	r3, r2
 8005800:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d003      	beq.n	8005816 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	4313      	orrs	r3, r2
 8005814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005816:	4a1a      	ldr	r2, [pc, #104]	; (8005880 <HAL_GPIO_Init+0x304>)
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800581c:	4b18      	ldr	r3, [pc, #96]	; (8005880 <HAL_GPIO_Init+0x304>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	43db      	mvns	r3, r3
 8005826:	69ba      	ldr	r2, [r7, #24]
 8005828:	4013      	ands	r3, r2
 800582a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d003      	beq.n	8005840 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	4313      	orrs	r3, r2
 800583e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005840:	4a0f      	ldr	r2, [pc, #60]	; (8005880 <HAL_GPIO_Init+0x304>)
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	3301      	adds	r3, #1
 800584a:	61fb      	str	r3, [r7, #28]
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	2b0f      	cmp	r3, #15
 8005850:	f67f aea2 	bls.w	8005598 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005854:	bf00      	nop
 8005856:	bf00      	nop
 8005858:	3724      	adds	r7, #36	; 0x24
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	40023800 	.word	0x40023800
 8005868:	40013800 	.word	0x40013800
 800586c:	40020000 	.word	0x40020000
 8005870:	40020400 	.word	0x40020400
 8005874:	40020800 	.word	0x40020800
 8005878:	40020c00 	.word	0x40020c00
 800587c:	40021000 	.word	0x40021000
 8005880:	40013c00 	.word	0x40013c00

08005884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	460b      	mov	r3, r1
 800588e:	807b      	strh	r3, [r7, #2]
 8005890:	4613      	mov	r3, r2
 8005892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005894:	787b      	ldrb	r3, [r7, #1]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d003      	beq.n	80058a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800589a:	887a      	ldrh	r2, [r7, #2]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80058a0:	e003      	b.n	80058aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80058a2:	887b      	ldrh	r3, [r7, #2]
 80058a4:	041a      	lsls	r2, r3, #16
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	619a      	str	r2, [r3, #24]
}
 80058aa:	bf00      	nop
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
	...

080058b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	4603      	mov	r3, r0
 80058c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80058c2:	4b08      	ldr	r3, [pc, #32]	; (80058e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058c4:	695a      	ldr	r2, [r3, #20]
 80058c6:	88fb      	ldrh	r3, [r7, #6]
 80058c8:	4013      	ands	r3, r2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d006      	beq.n	80058dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80058ce:	4a05      	ldr	r2, [pc, #20]	; (80058e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058d0:	88fb      	ldrh	r3, [r7, #6]
 80058d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80058d4:	88fb      	ldrh	r3, [r7, #6]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7fd fa1a 	bl	8002d10 <HAL_GPIO_EXTI_Callback>
  }
}
 80058dc:	bf00      	nop
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	40013c00 	.word	0x40013c00

080058e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e12b      	b.n	8005b52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d106      	bne.n	8005914 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7fd f88e 	bl	8002a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2224      	movs	r2, #36	; 0x24
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0201 	bic.w	r2, r2, #1
 800592a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800593a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800594a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800594c:	f000 fd80 	bl	8006450 <HAL_RCC_GetPCLK1Freq>
 8005950:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	4a81      	ldr	r2, [pc, #516]	; (8005b5c <HAL_I2C_Init+0x274>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d807      	bhi.n	800596c <HAL_I2C_Init+0x84>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4a80      	ldr	r2, [pc, #512]	; (8005b60 <HAL_I2C_Init+0x278>)
 8005960:	4293      	cmp	r3, r2
 8005962:	bf94      	ite	ls
 8005964:	2301      	movls	r3, #1
 8005966:	2300      	movhi	r3, #0
 8005968:	b2db      	uxtb	r3, r3
 800596a:	e006      	b.n	800597a <HAL_I2C_Init+0x92>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4a7d      	ldr	r2, [pc, #500]	; (8005b64 <HAL_I2C_Init+0x27c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	bf94      	ite	ls
 8005974:	2301      	movls	r3, #1
 8005976:	2300      	movhi	r3, #0
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d001      	beq.n	8005982 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e0e7      	b.n	8005b52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	4a78      	ldr	r2, [pc, #480]	; (8005b68 <HAL_I2C_Init+0x280>)
 8005986:	fba2 2303 	umull	r2, r3, r2, r3
 800598a:	0c9b      	lsrs	r3, r3, #18
 800598c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	430a      	orrs	r2, r1
 80059a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	4a6a      	ldr	r2, [pc, #424]	; (8005b5c <HAL_I2C_Init+0x274>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d802      	bhi.n	80059bc <HAL_I2C_Init+0xd4>
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	3301      	adds	r3, #1
 80059ba:	e009      	b.n	80059d0 <HAL_I2C_Init+0xe8>
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80059c2:	fb02 f303 	mul.w	r3, r2, r3
 80059c6:	4a69      	ldr	r2, [pc, #420]	; (8005b6c <HAL_I2C_Init+0x284>)
 80059c8:	fba2 2303 	umull	r2, r3, r2, r3
 80059cc:	099b      	lsrs	r3, r3, #6
 80059ce:	3301      	adds	r3, #1
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	6812      	ldr	r2, [r2, #0]
 80059d4:	430b      	orrs	r3, r1
 80059d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80059e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	495c      	ldr	r1, [pc, #368]	; (8005b5c <HAL_I2C_Init+0x274>)
 80059ec:	428b      	cmp	r3, r1
 80059ee:	d819      	bhi.n	8005a24 <HAL_I2C_Init+0x13c>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	1e59      	subs	r1, r3, #1
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80059fe:	1c59      	adds	r1, r3, #1
 8005a00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005a04:	400b      	ands	r3, r1
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <HAL_I2C_Init+0x138>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	1e59      	subs	r1, r3, #1
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a18:	3301      	adds	r3, #1
 8005a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a1e:	e051      	b.n	8005ac4 <HAL_I2C_Init+0x1dc>
 8005a20:	2304      	movs	r3, #4
 8005a22:	e04f      	b.n	8005ac4 <HAL_I2C_Init+0x1dc>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d111      	bne.n	8005a50 <HAL_I2C_Init+0x168>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	1e58      	subs	r0, r3, #1
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6859      	ldr	r1, [r3, #4]
 8005a34:	460b      	mov	r3, r1
 8005a36:	005b      	lsls	r3, r3, #1
 8005a38:	440b      	add	r3, r1
 8005a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a3e:	3301      	adds	r3, #1
 8005a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	bf0c      	ite	eq
 8005a48:	2301      	moveq	r3, #1
 8005a4a:	2300      	movne	r3, #0
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	e012      	b.n	8005a76 <HAL_I2C_Init+0x18e>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	1e58      	subs	r0, r3, #1
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6859      	ldr	r1, [r3, #4]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	440b      	add	r3, r1
 8005a5e:	0099      	lsls	r1, r3, #2
 8005a60:	440b      	add	r3, r1
 8005a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a66:	3301      	adds	r3, #1
 8005a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	bf0c      	ite	eq
 8005a70:	2301      	moveq	r3, #1
 8005a72:	2300      	movne	r3, #0
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <HAL_I2C_Init+0x196>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e022      	b.n	8005ac4 <HAL_I2C_Init+0x1dc>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10e      	bne.n	8005aa4 <HAL_I2C_Init+0x1bc>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	1e58      	subs	r0, r3, #1
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6859      	ldr	r1, [r3, #4]
 8005a8e:	460b      	mov	r3, r1
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	440b      	add	r3, r1
 8005a94:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a98:	3301      	adds	r3, #1
 8005a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aa2:	e00f      	b.n	8005ac4 <HAL_I2C_Init+0x1dc>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	1e58      	subs	r0, r3, #1
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6859      	ldr	r1, [r3, #4]
 8005aac:	460b      	mov	r3, r1
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	440b      	add	r3, r1
 8005ab2:	0099      	lsls	r1, r3, #2
 8005ab4:	440b      	add	r3, r1
 8005ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aba:	3301      	adds	r3, #1
 8005abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ac0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ac4:	6879      	ldr	r1, [r7, #4]
 8005ac6:	6809      	ldr	r1, [r1, #0]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	69da      	ldr	r2, [r3, #28]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005af2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	6911      	ldr	r1, [r2, #16]
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	68d2      	ldr	r2, [r2, #12]
 8005afe:	4311      	orrs	r1, r2
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	6812      	ldr	r2, [r2, #0]
 8005b04:	430b      	orrs	r3, r1
 8005b06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	695a      	ldr	r2, [r3, #20]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f042 0201 	orr.w	r2, r2, #1
 8005b32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2220      	movs	r2, #32
 8005b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	000186a0 	.word	0x000186a0
 8005b60:	001e847f 	.word	0x001e847f
 8005b64:	003d08ff 	.word	0x003d08ff
 8005b68:	431bde83 	.word	0x431bde83
 8005b6c:	10624dd3 	.word	0x10624dd3

08005b70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e267      	b.n	8006052 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d075      	beq.n	8005c7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b8e:	4b88      	ldr	r3, [pc, #544]	; (8005db0 <HAL_RCC_OscConfig+0x240>)
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f003 030c 	and.w	r3, r3, #12
 8005b96:	2b04      	cmp	r3, #4
 8005b98:	d00c      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b9a:	4b85      	ldr	r3, [pc, #532]	; (8005db0 <HAL_RCC_OscConfig+0x240>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ba2:	2b08      	cmp	r3, #8
 8005ba4:	d112      	bne.n	8005bcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ba6:	4b82      	ldr	r3, [pc, #520]	; (8005db0 <HAL_RCC_OscConfig+0x240>)
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bb2:	d10b      	bne.n	8005bcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bb4:	4b7e      	ldr	r3, [pc, #504]	; (8005db0 <HAL_RCC_OscConfig+0x240>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d05b      	beq.n	8005c78 <HAL_RCC_OscConfig+0x108>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d157      	bne.n	8005c78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e242      	b.n	8006052 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bd4:	d106      	bne.n	8005be4 <HAL_RCC_OscConfig+0x74>
 8005bd6:	4b76      	ldr	r3, [pc, #472]	; (8005db0 <HAL_RCC_OscConfig+0x240>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a75      	ldr	r2, [pc, #468]	; (8005db0 <HAL_RCC_OscConfig+0x240>)
 8005bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005be0:	6013      	str	r3, [r2, #0]
 8005be2:	e01d      	b.n	8005c20 <HAL_RCC_OscConfig+0xb0>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bec:	d10c      	bne.n	8005c08 <HAL_RCC_OscConfig+0x98>
 8005bee:	4b70      	ldr	r3, [pc, #448]	; (8005db0 <HAL_RCC_OscConfig+0x240>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a6f      	ldr	r2, [pc, #444]	; (8005db0 <HAL_RCC_OscConfig+0x240>)
 8005bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bf8:	6013      	str	r3, [r2, #0]
 8005bfa:	4b6d      	ldr	r3, [pc, #436]	; (8005db0 <HAL_RCC_OscConfig+0x240>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a6c      	ldr	r2, [pc, #432]	; (8005db0 <HAL_RCC_OscConfig+0x240>)
 8005c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c04:	6013      	str	r3, [r2, #0]
 8005c06:	e00b      	b.n	8005c20 <HAL_RCC_OscConfig+0xb0>
 8005c08:	4b69      	ldr	r3, [pc, #420]	; (8005db0 <HAL_RCC_OscConfig+0x240>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a68      	ldr	r2, [pc, #416]	; (8005db0 <HAL_RCC_OscConfig+0x240>)
 8005c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c12:	6013      	str	r3, [r2, #0]
 8005c14:	4b66      	ldr	r3, [pc, #408]	; (8005db0 <HAL_RCC_OscConfig+0x240>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a65      	ldr	r2, [pc, #404]	; (8005db0 <HAL_RCC_OscConfig+0x240>)
 8005c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d013      	beq.n	8005c50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c28:	f7fe ff7c 	bl	8004b24 <HAL_GetTick>
 8005c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c2e:	e008      	b.n	8005c42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c30:	f7fe ff78 	bl	8004b24 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	2b64      	cmp	r3, #100	; 0x64
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e207      	b.n	8006052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c42:	4b5b      	ldr	r3, [pc, #364]	; (8005db0 <HAL_RCC_OscConfig+0x240>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d0f0      	beq.n	8005c30 <HAL_RCC_OscConfig+0xc0>
 8005c4e:	e014      	b.n	8005c7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c50:	f7fe ff68 	bl	8004b24 <HAL_GetTick>
 8005c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c56:	e008      	b.n	8005c6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c58:	f7fe ff64 	bl	8004b24 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b64      	cmp	r3, #100	; 0x64
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e1f3      	b.n	8006052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c6a:	4b51      	ldr	r3, [pc, #324]	; (8005db0 <HAL_RCC_OscConfig+0x240>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1f0      	bne.n	8005c58 <HAL_RCC_OscConfig+0xe8>
 8005c76:	e000      	b.n	8005c7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d063      	beq.n	8005d4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c86:	4b4a      	ldr	r3, [pc, #296]	; (8005db0 <HAL_RCC_OscConfig+0x240>)
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f003 030c 	and.w	r3, r3, #12
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00b      	beq.n	8005caa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c92:	4b47      	ldr	r3, [pc, #284]	; (8005db0 <HAL_RCC_OscConfig+0x240>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c9a:	2b08      	cmp	r3, #8
 8005c9c:	d11c      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c9e:	4b44      	ldr	r3, [pc, #272]	; (8005db0 <HAL_RCC_OscConfig+0x240>)
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d116      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005caa:	4b41      	ldr	r3, [pc, #260]	; (8005db0 <HAL_RCC_OscConfig+0x240>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d005      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x152>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d001      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e1c7      	b.n	8006052 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cc2:	4b3b      	ldr	r3, [pc, #236]	; (8005db0 <HAL_RCC_OscConfig+0x240>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	4937      	ldr	r1, [pc, #220]	; (8005db0 <HAL_RCC_OscConfig+0x240>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cd6:	e03a      	b.n	8005d4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d020      	beq.n	8005d22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ce0:	4b34      	ldr	r3, [pc, #208]	; (8005db4 <HAL_RCC_OscConfig+0x244>)
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce6:	f7fe ff1d 	bl	8004b24 <HAL_GetTick>
 8005cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cec:	e008      	b.n	8005d00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cee:	f7fe ff19 	bl	8004b24 <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d901      	bls.n	8005d00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e1a8      	b.n	8006052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d00:	4b2b      	ldr	r3, [pc, #172]	; (8005db0 <HAL_RCC_OscConfig+0x240>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d0f0      	beq.n	8005cee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d0c:	4b28      	ldr	r3, [pc, #160]	; (8005db0 <HAL_RCC_OscConfig+0x240>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	00db      	lsls	r3, r3, #3
 8005d1a:	4925      	ldr	r1, [pc, #148]	; (8005db0 <HAL_RCC_OscConfig+0x240>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	600b      	str	r3, [r1, #0]
 8005d20:	e015      	b.n	8005d4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d22:	4b24      	ldr	r3, [pc, #144]	; (8005db4 <HAL_RCC_OscConfig+0x244>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d28:	f7fe fefc 	bl	8004b24 <HAL_GetTick>
 8005d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d2e:	e008      	b.n	8005d42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d30:	f7fe fef8 	bl	8004b24 <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e187      	b.n	8006052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d42:	4b1b      	ldr	r3, [pc, #108]	; (8005db0 <HAL_RCC_OscConfig+0x240>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1f0      	bne.n	8005d30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0308 	and.w	r3, r3, #8
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d036      	beq.n	8005dc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d016      	beq.n	8005d90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d62:	4b15      	ldr	r3, [pc, #84]	; (8005db8 <HAL_RCC_OscConfig+0x248>)
 8005d64:	2201      	movs	r2, #1
 8005d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d68:	f7fe fedc 	bl	8004b24 <HAL_GetTick>
 8005d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d6e:	e008      	b.n	8005d82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d70:	f7fe fed8 	bl	8004b24 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e167      	b.n	8006052 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d82:	4b0b      	ldr	r3, [pc, #44]	; (8005db0 <HAL_RCC_OscConfig+0x240>)
 8005d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d0f0      	beq.n	8005d70 <HAL_RCC_OscConfig+0x200>
 8005d8e:	e01b      	b.n	8005dc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d90:	4b09      	ldr	r3, [pc, #36]	; (8005db8 <HAL_RCC_OscConfig+0x248>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d96:	f7fe fec5 	bl	8004b24 <HAL_GetTick>
 8005d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d9c:	e00e      	b.n	8005dbc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d9e:	f7fe fec1 	bl	8004b24 <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d907      	bls.n	8005dbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e150      	b.n	8006052 <HAL_RCC_OscConfig+0x4e2>
 8005db0:	40023800 	.word	0x40023800
 8005db4:	42470000 	.word	0x42470000
 8005db8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dbc:	4b88      	ldr	r3, [pc, #544]	; (8005fe0 <HAL_RCC_OscConfig+0x470>)
 8005dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dc0:	f003 0302 	and.w	r3, r3, #2
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1ea      	bne.n	8005d9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0304 	and.w	r3, r3, #4
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 8097 	beq.w	8005f04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dda:	4b81      	ldr	r3, [pc, #516]	; (8005fe0 <HAL_RCC_OscConfig+0x470>)
 8005ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10f      	bne.n	8005e06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005de6:	2300      	movs	r3, #0
 8005de8:	60bb      	str	r3, [r7, #8]
 8005dea:	4b7d      	ldr	r3, [pc, #500]	; (8005fe0 <HAL_RCC_OscConfig+0x470>)
 8005dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dee:	4a7c      	ldr	r2, [pc, #496]	; (8005fe0 <HAL_RCC_OscConfig+0x470>)
 8005df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005df4:	6413      	str	r3, [r2, #64]	; 0x40
 8005df6:	4b7a      	ldr	r3, [pc, #488]	; (8005fe0 <HAL_RCC_OscConfig+0x470>)
 8005df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dfe:	60bb      	str	r3, [r7, #8]
 8005e00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e02:	2301      	movs	r3, #1
 8005e04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e06:	4b77      	ldr	r3, [pc, #476]	; (8005fe4 <HAL_RCC_OscConfig+0x474>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d118      	bne.n	8005e44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e12:	4b74      	ldr	r3, [pc, #464]	; (8005fe4 <HAL_RCC_OscConfig+0x474>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a73      	ldr	r2, [pc, #460]	; (8005fe4 <HAL_RCC_OscConfig+0x474>)
 8005e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e1e:	f7fe fe81 	bl	8004b24 <HAL_GetTick>
 8005e22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e24:	e008      	b.n	8005e38 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e26:	f7fe fe7d 	bl	8004b24 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d901      	bls.n	8005e38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e10c      	b.n	8006052 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e38:	4b6a      	ldr	r3, [pc, #424]	; (8005fe4 <HAL_RCC_OscConfig+0x474>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d0f0      	beq.n	8005e26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d106      	bne.n	8005e5a <HAL_RCC_OscConfig+0x2ea>
 8005e4c:	4b64      	ldr	r3, [pc, #400]	; (8005fe0 <HAL_RCC_OscConfig+0x470>)
 8005e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e50:	4a63      	ldr	r2, [pc, #396]	; (8005fe0 <HAL_RCC_OscConfig+0x470>)
 8005e52:	f043 0301 	orr.w	r3, r3, #1
 8005e56:	6713      	str	r3, [r2, #112]	; 0x70
 8005e58:	e01c      	b.n	8005e94 <HAL_RCC_OscConfig+0x324>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	2b05      	cmp	r3, #5
 8005e60:	d10c      	bne.n	8005e7c <HAL_RCC_OscConfig+0x30c>
 8005e62:	4b5f      	ldr	r3, [pc, #380]	; (8005fe0 <HAL_RCC_OscConfig+0x470>)
 8005e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e66:	4a5e      	ldr	r2, [pc, #376]	; (8005fe0 <HAL_RCC_OscConfig+0x470>)
 8005e68:	f043 0304 	orr.w	r3, r3, #4
 8005e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8005e6e:	4b5c      	ldr	r3, [pc, #368]	; (8005fe0 <HAL_RCC_OscConfig+0x470>)
 8005e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e72:	4a5b      	ldr	r2, [pc, #364]	; (8005fe0 <HAL_RCC_OscConfig+0x470>)
 8005e74:	f043 0301 	orr.w	r3, r3, #1
 8005e78:	6713      	str	r3, [r2, #112]	; 0x70
 8005e7a:	e00b      	b.n	8005e94 <HAL_RCC_OscConfig+0x324>
 8005e7c:	4b58      	ldr	r3, [pc, #352]	; (8005fe0 <HAL_RCC_OscConfig+0x470>)
 8005e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e80:	4a57      	ldr	r2, [pc, #348]	; (8005fe0 <HAL_RCC_OscConfig+0x470>)
 8005e82:	f023 0301 	bic.w	r3, r3, #1
 8005e86:	6713      	str	r3, [r2, #112]	; 0x70
 8005e88:	4b55      	ldr	r3, [pc, #340]	; (8005fe0 <HAL_RCC_OscConfig+0x470>)
 8005e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8c:	4a54      	ldr	r2, [pc, #336]	; (8005fe0 <HAL_RCC_OscConfig+0x470>)
 8005e8e:	f023 0304 	bic.w	r3, r3, #4
 8005e92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d015      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e9c:	f7fe fe42 	bl	8004b24 <HAL_GetTick>
 8005ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ea2:	e00a      	b.n	8005eba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ea4:	f7fe fe3e 	bl	8004b24 <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e0cb      	b.n	8006052 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eba:	4b49      	ldr	r3, [pc, #292]	; (8005fe0 <HAL_RCC_OscConfig+0x470>)
 8005ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0ee      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x334>
 8005ec6:	e014      	b.n	8005ef2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ec8:	f7fe fe2c 	bl	8004b24 <HAL_GetTick>
 8005ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ece:	e00a      	b.n	8005ee6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ed0:	f7fe fe28 	bl	8004b24 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d901      	bls.n	8005ee6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e0b5      	b.n	8006052 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ee6:	4b3e      	ldr	r3, [pc, #248]	; (8005fe0 <HAL_RCC_OscConfig+0x470>)
 8005ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1ee      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ef2:	7dfb      	ldrb	r3, [r7, #23]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d105      	bne.n	8005f04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ef8:	4b39      	ldr	r3, [pc, #228]	; (8005fe0 <HAL_RCC_OscConfig+0x470>)
 8005efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efc:	4a38      	ldr	r2, [pc, #224]	; (8005fe0 <HAL_RCC_OscConfig+0x470>)
 8005efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f000 80a1 	beq.w	8006050 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f0e:	4b34      	ldr	r3, [pc, #208]	; (8005fe0 <HAL_RCC_OscConfig+0x470>)
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f003 030c 	and.w	r3, r3, #12
 8005f16:	2b08      	cmp	r3, #8
 8005f18:	d05c      	beq.n	8005fd4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d141      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f22:	4b31      	ldr	r3, [pc, #196]	; (8005fe8 <HAL_RCC_OscConfig+0x478>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f28:	f7fe fdfc 	bl	8004b24 <HAL_GetTick>
 8005f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f2e:	e008      	b.n	8005f42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f30:	f7fe fdf8 	bl	8004b24 <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e087      	b.n	8006052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f42:	4b27      	ldr	r3, [pc, #156]	; (8005fe0 <HAL_RCC_OscConfig+0x470>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1f0      	bne.n	8005f30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	69da      	ldr	r2, [r3, #28]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	431a      	orrs	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5c:	019b      	lsls	r3, r3, #6
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f64:	085b      	lsrs	r3, r3, #1
 8005f66:	3b01      	subs	r3, #1
 8005f68:	041b      	lsls	r3, r3, #16
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f70:	061b      	lsls	r3, r3, #24
 8005f72:	491b      	ldr	r1, [pc, #108]	; (8005fe0 <HAL_RCC_OscConfig+0x470>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f78:	4b1b      	ldr	r3, [pc, #108]	; (8005fe8 <HAL_RCC_OscConfig+0x478>)
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f7e:	f7fe fdd1 	bl	8004b24 <HAL_GetTick>
 8005f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f84:	e008      	b.n	8005f98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f86:	f7fe fdcd 	bl	8004b24 <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d901      	bls.n	8005f98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e05c      	b.n	8006052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f98:	4b11      	ldr	r3, [pc, #68]	; (8005fe0 <HAL_RCC_OscConfig+0x470>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d0f0      	beq.n	8005f86 <HAL_RCC_OscConfig+0x416>
 8005fa4:	e054      	b.n	8006050 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fa6:	4b10      	ldr	r3, [pc, #64]	; (8005fe8 <HAL_RCC_OscConfig+0x478>)
 8005fa8:	2200      	movs	r2, #0
 8005faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fac:	f7fe fdba 	bl	8004b24 <HAL_GetTick>
 8005fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fb2:	e008      	b.n	8005fc6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fb4:	f7fe fdb6 	bl	8004b24 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e045      	b.n	8006052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fc6:	4b06      	ldr	r3, [pc, #24]	; (8005fe0 <HAL_RCC_OscConfig+0x470>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1f0      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x444>
 8005fd2:	e03d      	b.n	8006050 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d107      	bne.n	8005fec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e038      	b.n	8006052 <HAL_RCC_OscConfig+0x4e2>
 8005fe0:	40023800 	.word	0x40023800
 8005fe4:	40007000 	.word	0x40007000
 8005fe8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005fec:	4b1b      	ldr	r3, [pc, #108]	; (800605c <HAL_RCC_OscConfig+0x4ec>)
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d028      	beq.n	800604c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006004:	429a      	cmp	r2, r3
 8006006:	d121      	bne.n	800604c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006012:	429a      	cmp	r2, r3
 8006014:	d11a      	bne.n	800604c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800601c:	4013      	ands	r3, r2
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006022:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006024:	4293      	cmp	r3, r2
 8006026:	d111      	bne.n	800604c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006032:	085b      	lsrs	r3, r3, #1
 8006034:	3b01      	subs	r3, #1
 8006036:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006038:	429a      	cmp	r2, r3
 800603a:	d107      	bne.n	800604c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006046:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006048:	429a      	cmp	r2, r3
 800604a:	d001      	beq.n	8006050 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e000      	b.n	8006052 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3718      	adds	r7, #24
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	40023800 	.word	0x40023800

08006060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e0cc      	b.n	800620e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006074:	4b68      	ldr	r3, [pc, #416]	; (8006218 <HAL_RCC_ClockConfig+0x1b8>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0307 	and.w	r3, r3, #7
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	429a      	cmp	r2, r3
 8006080:	d90c      	bls.n	800609c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006082:	4b65      	ldr	r3, [pc, #404]	; (8006218 <HAL_RCC_ClockConfig+0x1b8>)
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	b2d2      	uxtb	r2, r2
 8006088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800608a:	4b63      	ldr	r3, [pc, #396]	; (8006218 <HAL_RCC_ClockConfig+0x1b8>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0307 	and.w	r3, r3, #7
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	429a      	cmp	r2, r3
 8006096:	d001      	beq.n	800609c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e0b8      	b.n	800620e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0302 	and.w	r3, r3, #2
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d020      	beq.n	80060ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0304 	and.w	r3, r3, #4
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d005      	beq.n	80060c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060b4:	4b59      	ldr	r3, [pc, #356]	; (800621c <HAL_RCC_ClockConfig+0x1bc>)
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	4a58      	ldr	r2, [pc, #352]	; (800621c <HAL_RCC_ClockConfig+0x1bc>)
 80060ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80060be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0308 	and.w	r3, r3, #8
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d005      	beq.n	80060d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060cc:	4b53      	ldr	r3, [pc, #332]	; (800621c <HAL_RCC_ClockConfig+0x1bc>)
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	4a52      	ldr	r2, [pc, #328]	; (800621c <HAL_RCC_ClockConfig+0x1bc>)
 80060d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80060d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060d8:	4b50      	ldr	r3, [pc, #320]	; (800621c <HAL_RCC_ClockConfig+0x1bc>)
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	494d      	ldr	r1, [pc, #308]	; (800621c <HAL_RCC_ClockConfig+0x1bc>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d044      	beq.n	8006180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d107      	bne.n	800610e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060fe:	4b47      	ldr	r3, [pc, #284]	; (800621c <HAL_RCC_ClockConfig+0x1bc>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d119      	bne.n	800613e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e07f      	b.n	800620e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	2b02      	cmp	r3, #2
 8006114:	d003      	beq.n	800611e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800611a:	2b03      	cmp	r3, #3
 800611c:	d107      	bne.n	800612e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800611e:	4b3f      	ldr	r3, [pc, #252]	; (800621c <HAL_RCC_ClockConfig+0x1bc>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d109      	bne.n	800613e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e06f      	b.n	800620e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800612e:	4b3b      	ldr	r3, [pc, #236]	; (800621c <HAL_RCC_ClockConfig+0x1bc>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0302 	and.w	r3, r3, #2
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e067      	b.n	800620e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800613e:	4b37      	ldr	r3, [pc, #220]	; (800621c <HAL_RCC_ClockConfig+0x1bc>)
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f023 0203 	bic.w	r2, r3, #3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	4934      	ldr	r1, [pc, #208]	; (800621c <HAL_RCC_ClockConfig+0x1bc>)
 800614c:	4313      	orrs	r3, r2
 800614e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006150:	f7fe fce8 	bl	8004b24 <HAL_GetTick>
 8006154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006156:	e00a      	b.n	800616e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006158:	f7fe fce4 	bl	8004b24 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	f241 3288 	movw	r2, #5000	; 0x1388
 8006166:	4293      	cmp	r3, r2
 8006168:	d901      	bls.n	800616e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e04f      	b.n	800620e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800616e:	4b2b      	ldr	r3, [pc, #172]	; (800621c <HAL_RCC_ClockConfig+0x1bc>)
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f003 020c 	and.w	r2, r3, #12
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	429a      	cmp	r2, r3
 800617e:	d1eb      	bne.n	8006158 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006180:	4b25      	ldr	r3, [pc, #148]	; (8006218 <HAL_RCC_ClockConfig+0x1b8>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0307 	and.w	r3, r3, #7
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	429a      	cmp	r2, r3
 800618c:	d20c      	bcs.n	80061a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800618e:	4b22      	ldr	r3, [pc, #136]	; (8006218 <HAL_RCC_ClockConfig+0x1b8>)
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	b2d2      	uxtb	r2, r2
 8006194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006196:	4b20      	ldr	r3, [pc, #128]	; (8006218 <HAL_RCC_ClockConfig+0x1b8>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0307 	and.w	r3, r3, #7
 800619e:	683a      	ldr	r2, [r7, #0]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d001      	beq.n	80061a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e032      	b.n	800620e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0304 	and.w	r3, r3, #4
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d008      	beq.n	80061c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061b4:	4b19      	ldr	r3, [pc, #100]	; (800621c <HAL_RCC_ClockConfig+0x1bc>)
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	4916      	ldr	r1, [pc, #88]	; (800621c <HAL_RCC_ClockConfig+0x1bc>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0308 	and.w	r3, r3, #8
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d009      	beq.n	80061e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061d2:	4b12      	ldr	r3, [pc, #72]	; (800621c <HAL_RCC_ClockConfig+0x1bc>)
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	00db      	lsls	r3, r3, #3
 80061e0:	490e      	ldr	r1, [pc, #56]	; (800621c <HAL_RCC_ClockConfig+0x1bc>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80061e6:	f000 f821 	bl	800622c <HAL_RCC_GetSysClockFreq>
 80061ea:	4602      	mov	r2, r0
 80061ec:	4b0b      	ldr	r3, [pc, #44]	; (800621c <HAL_RCC_ClockConfig+0x1bc>)
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	091b      	lsrs	r3, r3, #4
 80061f2:	f003 030f 	and.w	r3, r3, #15
 80061f6:	490a      	ldr	r1, [pc, #40]	; (8006220 <HAL_RCC_ClockConfig+0x1c0>)
 80061f8:	5ccb      	ldrb	r3, [r1, r3]
 80061fa:	fa22 f303 	lsr.w	r3, r2, r3
 80061fe:	4a09      	ldr	r2, [pc, #36]	; (8006224 <HAL_RCC_ClockConfig+0x1c4>)
 8006200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006202:	4b09      	ldr	r3, [pc, #36]	; (8006228 <HAL_RCC_ClockConfig+0x1c8>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4618      	mov	r0, r3
 8006208:	f7fe fc48 	bl	8004a9c <HAL_InitTick>

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	40023c00 	.word	0x40023c00
 800621c:	40023800 	.word	0x40023800
 8006220:	0800aaac 	.word	0x0800aaac
 8006224:	20000210 	.word	0x20000210
 8006228:	20000214 	.word	0x20000214

0800622c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800622c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006230:	b094      	sub	sp, #80	; 0x50
 8006232:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006234:	2300      	movs	r3, #0
 8006236:	647b      	str	r3, [r7, #68]	; 0x44
 8006238:	2300      	movs	r3, #0
 800623a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800623c:	2300      	movs	r3, #0
 800623e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006240:	2300      	movs	r3, #0
 8006242:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006244:	4b79      	ldr	r3, [pc, #484]	; (800642c <HAL_RCC_GetSysClockFreq+0x200>)
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f003 030c 	and.w	r3, r3, #12
 800624c:	2b08      	cmp	r3, #8
 800624e:	d00d      	beq.n	800626c <HAL_RCC_GetSysClockFreq+0x40>
 8006250:	2b08      	cmp	r3, #8
 8006252:	f200 80e1 	bhi.w	8006418 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006256:	2b00      	cmp	r3, #0
 8006258:	d002      	beq.n	8006260 <HAL_RCC_GetSysClockFreq+0x34>
 800625a:	2b04      	cmp	r3, #4
 800625c:	d003      	beq.n	8006266 <HAL_RCC_GetSysClockFreq+0x3a>
 800625e:	e0db      	b.n	8006418 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006260:	4b73      	ldr	r3, [pc, #460]	; (8006430 <HAL_RCC_GetSysClockFreq+0x204>)
 8006262:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006264:	e0db      	b.n	800641e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006266:	4b73      	ldr	r3, [pc, #460]	; (8006434 <HAL_RCC_GetSysClockFreq+0x208>)
 8006268:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800626a:	e0d8      	b.n	800641e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800626c:	4b6f      	ldr	r3, [pc, #444]	; (800642c <HAL_RCC_GetSysClockFreq+0x200>)
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006274:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006276:	4b6d      	ldr	r3, [pc, #436]	; (800642c <HAL_RCC_GetSysClockFreq+0x200>)
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d063      	beq.n	800634a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006282:	4b6a      	ldr	r3, [pc, #424]	; (800642c <HAL_RCC_GetSysClockFreq+0x200>)
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	099b      	lsrs	r3, r3, #6
 8006288:	2200      	movs	r2, #0
 800628a:	63bb      	str	r3, [r7, #56]	; 0x38
 800628c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800628e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006294:	633b      	str	r3, [r7, #48]	; 0x30
 8006296:	2300      	movs	r3, #0
 8006298:	637b      	str	r3, [r7, #52]	; 0x34
 800629a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800629e:	4622      	mov	r2, r4
 80062a0:	462b      	mov	r3, r5
 80062a2:	f04f 0000 	mov.w	r0, #0
 80062a6:	f04f 0100 	mov.w	r1, #0
 80062aa:	0159      	lsls	r1, r3, #5
 80062ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062b0:	0150      	lsls	r0, r2, #5
 80062b2:	4602      	mov	r2, r0
 80062b4:	460b      	mov	r3, r1
 80062b6:	4621      	mov	r1, r4
 80062b8:	1a51      	subs	r1, r2, r1
 80062ba:	6139      	str	r1, [r7, #16]
 80062bc:	4629      	mov	r1, r5
 80062be:	eb63 0301 	sbc.w	r3, r3, r1
 80062c2:	617b      	str	r3, [r7, #20]
 80062c4:	f04f 0200 	mov.w	r2, #0
 80062c8:	f04f 0300 	mov.w	r3, #0
 80062cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062d0:	4659      	mov	r1, fp
 80062d2:	018b      	lsls	r3, r1, #6
 80062d4:	4651      	mov	r1, sl
 80062d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062da:	4651      	mov	r1, sl
 80062dc:	018a      	lsls	r2, r1, #6
 80062de:	4651      	mov	r1, sl
 80062e0:	ebb2 0801 	subs.w	r8, r2, r1
 80062e4:	4659      	mov	r1, fp
 80062e6:	eb63 0901 	sbc.w	r9, r3, r1
 80062ea:	f04f 0200 	mov.w	r2, #0
 80062ee:	f04f 0300 	mov.w	r3, #0
 80062f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062fe:	4690      	mov	r8, r2
 8006300:	4699      	mov	r9, r3
 8006302:	4623      	mov	r3, r4
 8006304:	eb18 0303 	adds.w	r3, r8, r3
 8006308:	60bb      	str	r3, [r7, #8]
 800630a:	462b      	mov	r3, r5
 800630c:	eb49 0303 	adc.w	r3, r9, r3
 8006310:	60fb      	str	r3, [r7, #12]
 8006312:	f04f 0200 	mov.w	r2, #0
 8006316:	f04f 0300 	mov.w	r3, #0
 800631a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800631e:	4629      	mov	r1, r5
 8006320:	024b      	lsls	r3, r1, #9
 8006322:	4621      	mov	r1, r4
 8006324:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006328:	4621      	mov	r1, r4
 800632a:	024a      	lsls	r2, r1, #9
 800632c:	4610      	mov	r0, r2
 800632e:	4619      	mov	r1, r3
 8006330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006332:	2200      	movs	r2, #0
 8006334:	62bb      	str	r3, [r7, #40]	; 0x28
 8006336:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006338:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800633c:	f7fa fc30 	bl	8000ba0 <__aeabi_uldivmod>
 8006340:	4602      	mov	r2, r0
 8006342:	460b      	mov	r3, r1
 8006344:	4613      	mov	r3, r2
 8006346:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006348:	e058      	b.n	80063fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800634a:	4b38      	ldr	r3, [pc, #224]	; (800642c <HAL_RCC_GetSysClockFreq+0x200>)
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	099b      	lsrs	r3, r3, #6
 8006350:	2200      	movs	r2, #0
 8006352:	4618      	mov	r0, r3
 8006354:	4611      	mov	r1, r2
 8006356:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800635a:	623b      	str	r3, [r7, #32]
 800635c:	2300      	movs	r3, #0
 800635e:	627b      	str	r3, [r7, #36]	; 0x24
 8006360:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006364:	4642      	mov	r2, r8
 8006366:	464b      	mov	r3, r9
 8006368:	f04f 0000 	mov.w	r0, #0
 800636c:	f04f 0100 	mov.w	r1, #0
 8006370:	0159      	lsls	r1, r3, #5
 8006372:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006376:	0150      	lsls	r0, r2, #5
 8006378:	4602      	mov	r2, r0
 800637a:	460b      	mov	r3, r1
 800637c:	4641      	mov	r1, r8
 800637e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006382:	4649      	mov	r1, r9
 8006384:	eb63 0b01 	sbc.w	fp, r3, r1
 8006388:	f04f 0200 	mov.w	r2, #0
 800638c:	f04f 0300 	mov.w	r3, #0
 8006390:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006394:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006398:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800639c:	ebb2 040a 	subs.w	r4, r2, sl
 80063a0:	eb63 050b 	sbc.w	r5, r3, fp
 80063a4:	f04f 0200 	mov.w	r2, #0
 80063a8:	f04f 0300 	mov.w	r3, #0
 80063ac:	00eb      	lsls	r3, r5, #3
 80063ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063b2:	00e2      	lsls	r2, r4, #3
 80063b4:	4614      	mov	r4, r2
 80063b6:	461d      	mov	r5, r3
 80063b8:	4643      	mov	r3, r8
 80063ba:	18e3      	adds	r3, r4, r3
 80063bc:	603b      	str	r3, [r7, #0]
 80063be:	464b      	mov	r3, r9
 80063c0:	eb45 0303 	adc.w	r3, r5, r3
 80063c4:	607b      	str	r3, [r7, #4]
 80063c6:	f04f 0200 	mov.w	r2, #0
 80063ca:	f04f 0300 	mov.w	r3, #0
 80063ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80063d2:	4629      	mov	r1, r5
 80063d4:	028b      	lsls	r3, r1, #10
 80063d6:	4621      	mov	r1, r4
 80063d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80063dc:	4621      	mov	r1, r4
 80063de:	028a      	lsls	r2, r1, #10
 80063e0:	4610      	mov	r0, r2
 80063e2:	4619      	mov	r1, r3
 80063e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063e6:	2200      	movs	r2, #0
 80063e8:	61bb      	str	r3, [r7, #24]
 80063ea:	61fa      	str	r2, [r7, #28]
 80063ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063f0:	f7fa fbd6 	bl	8000ba0 <__aeabi_uldivmod>
 80063f4:	4602      	mov	r2, r0
 80063f6:	460b      	mov	r3, r1
 80063f8:	4613      	mov	r3, r2
 80063fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80063fc:	4b0b      	ldr	r3, [pc, #44]	; (800642c <HAL_RCC_GetSysClockFreq+0x200>)
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	0c1b      	lsrs	r3, r3, #16
 8006402:	f003 0303 	and.w	r3, r3, #3
 8006406:	3301      	adds	r3, #1
 8006408:	005b      	lsls	r3, r3, #1
 800640a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800640c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800640e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006410:	fbb2 f3f3 	udiv	r3, r2, r3
 8006414:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006416:	e002      	b.n	800641e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006418:	4b05      	ldr	r3, [pc, #20]	; (8006430 <HAL_RCC_GetSysClockFreq+0x204>)
 800641a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800641c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800641e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006420:	4618      	mov	r0, r3
 8006422:	3750      	adds	r7, #80	; 0x50
 8006424:	46bd      	mov	sp, r7
 8006426:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800642a:	bf00      	nop
 800642c:	40023800 	.word	0x40023800
 8006430:	00f42400 	.word	0x00f42400
 8006434:	007a1200 	.word	0x007a1200

08006438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006438:	b480      	push	{r7}
 800643a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800643c:	4b03      	ldr	r3, [pc, #12]	; (800644c <HAL_RCC_GetHCLKFreq+0x14>)
 800643e:	681b      	ldr	r3, [r3, #0]
}
 8006440:	4618      	mov	r0, r3
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	20000210 	.word	0x20000210

08006450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006454:	f7ff fff0 	bl	8006438 <HAL_RCC_GetHCLKFreq>
 8006458:	4602      	mov	r2, r0
 800645a:	4b05      	ldr	r3, [pc, #20]	; (8006470 <HAL_RCC_GetPCLK1Freq+0x20>)
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	0a9b      	lsrs	r3, r3, #10
 8006460:	f003 0307 	and.w	r3, r3, #7
 8006464:	4903      	ldr	r1, [pc, #12]	; (8006474 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006466:	5ccb      	ldrb	r3, [r1, r3]
 8006468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800646c:	4618      	mov	r0, r3
 800646e:	bd80      	pop	{r7, pc}
 8006470:	40023800 	.word	0x40023800
 8006474:	0800aabc 	.word	0x0800aabc

08006478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800647c:	f7ff ffdc 	bl	8006438 <HAL_RCC_GetHCLKFreq>
 8006480:	4602      	mov	r2, r0
 8006482:	4b05      	ldr	r3, [pc, #20]	; (8006498 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	0b5b      	lsrs	r3, r3, #13
 8006488:	f003 0307 	and.w	r3, r3, #7
 800648c:	4903      	ldr	r1, [pc, #12]	; (800649c <HAL_RCC_GetPCLK2Freq+0x24>)
 800648e:	5ccb      	ldrb	r3, [r1, r3]
 8006490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006494:	4618      	mov	r0, r3
 8006496:	bd80      	pop	{r7, pc}
 8006498:	40023800 	.word	0x40023800
 800649c:	0800aabc 	.word	0x0800aabc

080064a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d101      	bne.n	80064b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e04c      	b.n	800654c <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d111      	bne.n	80064e2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f001 fbb2 	bl	8007c30 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d102      	bne.n	80064da <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a1f      	ldr	r2, [pc, #124]	; (8006554 <HAL_TIM_Base_Init+0xb4>)
 80064d8:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2202      	movs	r2, #2
 80064e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	3304      	adds	r3, #4
 80064f2:	4619      	mov	r1, r3
 80064f4:	4610      	mov	r0, r2
 80064f6:	f001 f8cf 	bl	8007698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3708      	adds	r7, #8
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	080036f9 	.word	0x080036f9

08006558 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006566:	b2db      	uxtb	r3, r3
 8006568:	2b01      	cmp	r3, #1
 800656a:	d001      	beq.n	8006570 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e044      	b.n	80065fa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2202      	movs	r2, #2
 8006574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68da      	ldr	r2, [r3, #12]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f042 0201 	orr.w	r2, r2, #1
 8006586:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a1e      	ldr	r2, [pc, #120]	; (8006608 <HAL_TIM_Base_Start_IT+0xb0>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d018      	beq.n	80065c4 <HAL_TIM_Base_Start_IT+0x6c>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800659a:	d013      	beq.n	80065c4 <HAL_TIM_Base_Start_IT+0x6c>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a1a      	ldr	r2, [pc, #104]	; (800660c <HAL_TIM_Base_Start_IT+0xb4>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d00e      	beq.n	80065c4 <HAL_TIM_Base_Start_IT+0x6c>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a19      	ldr	r2, [pc, #100]	; (8006610 <HAL_TIM_Base_Start_IT+0xb8>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d009      	beq.n	80065c4 <HAL_TIM_Base_Start_IT+0x6c>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a17      	ldr	r2, [pc, #92]	; (8006614 <HAL_TIM_Base_Start_IT+0xbc>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d004      	beq.n	80065c4 <HAL_TIM_Base_Start_IT+0x6c>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a16      	ldr	r2, [pc, #88]	; (8006618 <HAL_TIM_Base_Start_IT+0xc0>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d111      	bne.n	80065e8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f003 0307 	and.w	r3, r3, #7
 80065ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2b06      	cmp	r3, #6
 80065d4:	d010      	beq.n	80065f8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f042 0201 	orr.w	r2, r2, #1
 80065e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065e6:	e007      	b.n	80065f8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f042 0201 	orr.w	r2, r2, #1
 80065f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	40010000 	.word	0x40010000
 800660c:	40000400 	.word	0x40000400
 8006610:	40000800 	.word	0x40000800
 8006614:	40000c00 	.word	0x40000c00
 8006618:	40014000 	.word	0x40014000

0800661c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d101      	bne.n	800662e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e04c      	b.n	80066c8 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d111      	bne.n	800665e <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f001 faf4 	bl	8007c30 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800664c:	2b00      	cmp	r3, #0
 800664e:	d102      	bne.n	8006656 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a1f      	ldr	r2, [pc, #124]	; (80066d0 <HAL_TIM_OC_Init+0xb4>)
 8006654:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2202      	movs	r2, #2
 8006662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	3304      	adds	r3, #4
 800666e:	4619      	mov	r1, r3
 8006670:	4610      	mov	r0, r2
 8006672:	f001 f811 	bl	8007698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3708      	adds	r7, #8
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	080066d5 	.word	0x080066d5

080066d4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e04c      	b.n	8006794 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b00      	cmp	r3, #0
 8006704:	d111      	bne.n	800672a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f001 fa8e 	bl	8007c30 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006718:	2b00      	cmp	r3, #0
 800671a:	d102      	bne.n	8006722 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a1f      	ldr	r2, [pc, #124]	; (800679c <HAL_TIM_PWM_Init+0xb4>)
 8006720:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2202      	movs	r2, #2
 800672e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	3304      	adds	r3, #4
 800673a:	4619      	mov	r1, r3
 800673c:	4610      	mov	r0, r2
 800673e:	f000 ffab 	bl	8007698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2201      	movs	r2, #1
 8006746:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	080067a1 	.word	0x080067a1

080067a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d109      	bne.n	80067d8 <HAL_TIM_PWM_Start+0x24>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	bf14      	ite	ne
 80067d0:	2301      	movne	r3, #1
 80067d2:	2300      	moveq	r3, #0
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	e022      	b.n	800681e <HAL_TIM_PWM_Start+0x6a>
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	2b04      	cmp	r3, #4
 80067dc:	d109      	bne.n	80067f2 <HAL_TIM_PWM_Start+0x3e>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	bf14      	ite	ne
 80067ea:	2301      	movne	r3, #1
 80067ec:	2300      	moveq	r3, #0
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	e015      	b.n	800681e <HAL_TIM_PWM_Start+0x6a>
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b08      	cmp	r3, #8
 80067f6:	d109      	bne.n	800680c <HAL_TIM_PWM_Start+0x58>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b01      	cmp	r3, #1
 8006802:	bf14      	ite	ne
 8006804:	2301      	movne	r3, #1
 8006806:	2300      	moveq	r3, #0
 8006808:	b2db      	uxtb	r3, r3
 800680a:	e008      	b.n	800681e <HAL_TIM_PWM_Start+0x6a>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b01      	cmp	r3, #1
 8006816:	bf14      	ite	ne
 8006818:	2301      	movne	r3, #1
 800681a:	2300      	moveq	r3, #0
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e068      	b.n	80068f8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d104      	bne.n	8006836 <HAL_TIM_PWM_Start+0x82>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006834:	e013      	b.n	800685e <HAL_TIM_PWM_Start+0xaa>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b04      	cmp	r3, #4
 800683a:	d104      	bne.n	8006846 <HAL_TIM_PWM_Start+0x92>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006844:	e00b      	b.n	800685e <HAL_TIM_PWM_Start+0xaa>
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2b08      	cmp	r3, #8
 800684a:	d104      	bne.n	8006856 <HAL_TIM_PWM_Start+0xa2>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2202      	movs	r2, #2
 8006850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006854:	e003      	b.n	800685e <HAL_TIM_PWM_Start+0xaa>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2202      	movs	r2, #2
 800685a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2201      	movs	r2, #1
 8006864:	6839      	ldr	r1, [r7, #0]
 8006866:	4618      	mov	r0, r3
 8006868:	f001 f9bc 	bl	8007be4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a23      	ldr	r2, [pc, #140]	; (8006900 <HAL_TIM_PWM_Start+0x14c>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d107      	bne.n	8006886 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006884:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a1d      	ldr	r2, [pc, #116]	; (8006900 <HAL_TIM_PWM_Start+0x14c>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d018      	beq.n	80068c2 <HAL_TIM_PWM_Start+0x10e>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006898:	d013      	beq.n	80068c2 <HAL_TIM_PWM_Start+0x10e>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a19      	ldr	r2, [pc, #100]	; (8006904 <HAL_TIM_PWM_Start+0x150>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d00e      	beq.n	80068c2 <HAL_TIM_PWM_Start+0x10e>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a17      	ldr	r2, [pc, #92]	; (8006908 <HAL_TIM_PWM_Start+0x154>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d009      	beq.n	80068c2 <HAL_TIM_PWM_Start+0x10e>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a16      	ldr	r2, [pc, #88]	; (800690c <HAL_TIM_PWM_Start+0x158>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d004      	beq.n	80068c2 <HAL_TIM_PWM_Start+0x10e>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a14      	ldr	r2, [pc, #80]	; (8006910 <HAL_TIM_PWM_Start+0x15c>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d111      	bne.n	80068e6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f003 0307 	and.w	r3, r3, #7
 80068cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2b06      	cmp	r3, #6
 80068d2:	d010      	beq.n	80068f6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f042 0201 	orr.w	r2, r2, #1
 80068e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068e4:	e007      	b.n	80068f6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f042 0201 	orr.w	r2, r2, #1
 80068f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	40010000 	.word	0x40010000
 8006904:	40000400 	.word	0x40000400
 8006908:	40000800 	.word	0x40000800
 800690c:	40000c00 	.word	0x40000c00
 8006910:	40014000 	.word	0x40014000

08006914 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d101      	bne.n	8006928 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e04c      	b.n	80069c2 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b00      	cmp	r3, #0
 8006932:	d111      	bne.n	8006958 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f001 f977 	bl	8007c30 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006946:	2b00      	cmp	r3, #0
 8006948:	d102      	bne.n	8006950 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a1f      	ldr	r2, [pc, #124]	; (80069cc <HAL_TIM_OnePulse_Init+0xb8>)
 800694e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2202      	movs	r2, #2
 800695c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	3304      	adds	r3, #4
 8006968:	4619      	mov	r1, r3
 800696a:	4610      	mov	r0, r2
 800696c:	f000 fe94 	bl	8007698 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f022 0208 	bic.w	r2, r2, #8
 800697e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6819      	ldr	r1, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	683a      	ldr	r2, [r7, #0]
 800698c:	430a      	orrs	r2, r1
 800698e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	080069d1 	.word	0x080069d1

080069d0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069f4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069fc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a04:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006a0c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a0e:	7bfb      	ldrb	r3, [r7, #15]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d108      	bne.n	8006a26 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a14:	7bbb      	ldrb	r3, [r7, #14]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d105      	bne.n	8006a26 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a1a:	7b7b      	ldrb	r3, [r7, #13]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d102      	bne.n	8006a26 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a20:	7b3b      	ldrb	r3, [r7, #12]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d001      	beq.n	8006a2a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e03b      	b.n	8006aa2 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2202      	movs	r2, #2
 8006a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2202      	movs	r2, #2
 8006a36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2202      	movs	r2, #2
 8006a3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2202      	movs	r2, #2
 8006a46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68da      	ldr	r2, [r3, #12]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f042 0202 	orr.w	r2, r2, #2
 8006a58:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68da      	ldr	r2, [r3, #12]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f042 0204 	orr.w	r2, r2, #4
 8006a68:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	2100      	movs	r1, #0
 8006a72:	4618      	mov	r0, r3
 8006a74:	f001 f8b6 	bl	8007be4 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	2104      	movs	r1, #4
 8006a80:	4618      	mov	r0, r3
 8006a82:	f001 f8af 	bl	8007be4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a08      	ldr	r2, [pc, #32]	; (8006aac <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d107      	bne.n	8006aa0 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a9e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	40010000 	.word	0x40010000

08006ab0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e0a2      	b.n	8006c0a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d111      	bne.n	8006af4 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f001 f8a9 	bl	8007c30 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d102      	bne.n	8006aec <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a4a      	ldr	r2, [pc, #296]	; (8006c14 <HAL_TIM_Encoder_Init+0x164>)
 8006aea:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2202      	movs	r2, #2
 8006af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	6812      	ldr	r2, [r2, #0]
 8006b06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b0a:	f023 0307 	bic.w	r3, r3, #7
 8006b0e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	3304      	adds	r3, #4
 8006b18:	4619      	mov	r1, r3
 8006b1a:	4610      	mov	r0, r2
 8006b1c:	f000 fdbc 	bl	8007698 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b48:	f023 0303 	bic.w	r3, r3, #3
 8006b4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	689a      	ldr	r2, [r3, #8]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	021b      	lsls	r3, r3, #8
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	693a      	ldr	r2, [r7, #16]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006b66:	f023 030c 	bic.w	r3, r3, #12
 8006b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	68da      	ldr	r2, [r3, #12]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	69db      	ldr	r3, [r3, #28]
 8006b80:	021b      	lsls	r3, r3, #8
 8006b82:	4313      	orrs	r3, r2
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	011a      	lsls	r2, r3, #4
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	031b      	lsls	r3, r3, #12
 8006b96:	4313      	orrs	r3, r2
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006ba4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006bac:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	685a      	ldr	r2, [r3, #4]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	011b      	lsls	r3, r3, #4
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3718      	adds	r7, #24
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	0800365d 	.word	0x0800365d

08006c18 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c28:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c30:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c38:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006c40:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d110      	bne.n	8006c6a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d102      	bne.n	8006c54 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c4e:	7b7b      	ldrb	r3, [r7, #13]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d001      	beq.n	8006c58 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e069      	b.n	8006d2c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2202      	movs	r2, #2
 8006c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c68:	e031      	b.n	8006cce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2b04      	cmp	r3, #4
 8006c6e:	d110      	bne.n	8006c92 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c70:	7bbb      	ldrb	r3, [r7, #14]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d102      	bne.n	8006c7c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c76:	7b3b      	ldrb	r3, [r7, #12]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d001      	beq.n	8006c80 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e055      	b.n	8006d2c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2202      	movs	r2, #2
 8006c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c90:	e01d      	b.n	8006cce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c92:	7bfb      	ldrb	r3, [r7, #15]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d108      	bne.n	8006caa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c98:	7bbb      	ldrb	r3, [r7, #14]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d105      	bne.n	8006caa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c9e:	7b7b      	ldrb	r3, [r7, #13]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d102      	bne.n	8006caa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ca4:	7b3b      	ldrb	r3, [r7, #12]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d001      	beq.n	8006cae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e03e      	b.n	8006d2c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2202      	movs	r2, #2
 8006cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2202      	movs	r2, #2
 8006cba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2202      	movs	r2, #2
 8006cc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2202      	movs	r2, #2
 8006cca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <HAL_TIM_Encoder_Start+0xc4>
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	2b04      	cmp	r3, #4
 8006cd8:	d008      	beq.n	8006cec <HAL_TIM_Encoder_Start+0xd4>
 8006cda:	e00f      	b.n	8006cfc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f000 ff7d 	bl	8007be4 <TIM_CCxChannelCmd>
      break;
 8006cea:	e016      	b.n	8006d1a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	2104      	movs	r1, #4
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f000 ff75 	bl	8007be4 <TIM_CCxChannelCmd>
      break;
 8006cfa:	e00e      	b.n	8006d1a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2201      	movs	r2, #1
 8006d02:	2100      	movs	r1, #0
 8006d04:	4618      	mov	r0, r3
 8006d06:	f000 ff6d 	bl	8007be4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	2104      	movs	r1, #4
 8006d12:	4618      	mov	r0, r3
 8006d14:	f000 ff66 	bl	8007be4 <TIM_CCxChannelCmd>
      break;
 8006d18:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f042 0201 	orr.w	r2, r2, #1
 8006d28:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	f003 0302 	and.w	r3, r3, #2
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d128      	bne.n	8006d9c <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	f003 0302 	and.w	r3, r3, #2
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d121      	bne.n	8006d9c <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f06f 0202 	mvn.w	r2, #2
 8006d60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2201      	movs	r2, #1
 8006d66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	f003 0303 	and.w	r3, r3, #3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d005      	beq.n	8006d82 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	4798      	blx	r3
 8006d80:	e009      	b.n	8006d96 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	f003 0304 	and.w	r3, r3, #4
 8006da6:	2b04      	cmp	r3, #4
 8006da8:	d128      	bne.n	8006dfc <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	f003 0304 	and.w	r3, r3, #4
 8006db4:	2b04      	cmp	r3, #4
 8006db6:	d121      	bne.n	8006dfc <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f06f 0204 	mvn.w	r2, #4
 8006dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2202      	movs	r2, #2
 8006dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d005      	beq.n	8006de2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	4798      	blx	r3
 8006de0:	e009      	b.n	8006df6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	f003 0308 	and.w	r3, r3, #8
 8006e06:	2b08      	cmp	r3, #8
 8006e08:	d128      	bne.n	8006e5c <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	f003 0308 	and.w	r3, r3, #8
 8006e14:	2b08      	cmp	r3, #8
 8006e16:	d121      	bne.n	8006e5c <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f06f 0208 	mvn.w	r2, #8
 8006e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2204      	movs	r2, #4
 8006e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	f003 0303 	and.w	r3, r3, #3
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d005      	beq.n	8006e42 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	4798      	blx	r3
 8006e40:	e009      	b.n	8006e56 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	f003 0310 	and.w	r3, r3, #16
 8006e66:	2b10      	cmp	r3, #16
 8006e68:	d128      	bne.n	8006ebc <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	f003 0310 	and.w	r3, r3, #16
 8006e74:	2b10      	cmp	r3, #16
 8006e76:	d121      	bne.n	8006ebc <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f06f 0210 	mvn.w	r2, #16
 8006e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2208      	movs	r2, #8
 8006e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	69db      	ldr	r3, [r3, #28]
 8006e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d005      	beq.n	8006ea2 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	4798      	blx	r3
 8006ea0:	e009      	b.n	8006eb6 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	f003 0301 	and.w	r3, r3, #1
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d110      	bne.n	8006eec <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	f003 0301 	and.w	r3, r3, #1
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d109      	bne.n	8006eec <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f06f 0201 	mvn.w	r2, #1
 8006ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef6:	2b80      	cmp	r3, #128	; 0x80
 8006ef8:	d110      	bne.n	8006f1c <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f04:	2b80      	cmp	r3, #128	; 0x80
 8006f06:	d109      	bne.n	8006f1c <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f26:	2b40      	cmp	r3, #64	; 0x40
 8006f28:	d110      	bne.n	8006f4c <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f34:	2b40      	cmp	r3, #64	; 0x40
 8006f36:	d109      	bne.n	8006f4c <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	f003 0320 	and.w	r3, r3, #32
 8006f56:	2b20      	cmp	r3, #32
 8006f58:	d110      	bne.n	8006f7c <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	f003 0320 	and.w	r3, r3, #32
 8006f64:	2b20      	cmp	r3, #32
 8006f66:	d109      	bne.n	8006f7c <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f06f 0220 	mvn.w	r2, #32
 8006f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f7c:	bf00      	nop
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f90:	2300      	movs	r3, #0
 8006f92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d101      	bne.n	8006fa2 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006f9e:	2302      	movs	r3, #2
 8006fa0:	e048      	b.n	8007034 <HAL_TIM_OC_ConfigChannel+0xb0>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2b0c      	cmp	r3, #12
 8006fae:	d839      	bhi.n	8007024 <HAL_TIM_OC_ConfigChannel+0xa0>
 8006fb0:	a201      	add	r2, pc, #4	; (adr r2, 8006fb8 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb6:	bf00      	nop
 8006fb8:	08006fed 	.word	0x08006fed
 8006fbc:	08007025 	.word	0x08007025
 8006fc0:	08007025 	.word	0x08007025
 8006fc4:	08007025 	.word	0x08007025
 8006fc8:	08006ffb 	.word	0x08006ffb
 8006fcc:	08007025 	.word	0x08007025
 8006fd0:	08007025 	.word	0x08007025
 8006fd4:	08007025 	.word	0x08007025
 8006fd8:	08007009 	.word	0x08007009
 8006fdc:	08007025 	.word	0x08007025
 8006fe0:	08007025 	.word	0x08007025
 8006fe4:	08007025 	.word	0x08007025
 8006fe8:	08007017 	.word	0x08007017
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68b9      	ldr	r1, [r7, #8]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f000 fbd0 	bl	8007798 <TIM_OC1_SetConfig>
      break;
 8006ff8:	e017      	b.n	800702a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68b9      	ldr	r1, [r7, #8]
 8007000:	4618      	mov	r0, r3
 8007002:	f000 fc2f 	bl	8007864 <TIM_OC2_SetConfig>
      break;
 8007006:	e010      	b.n	800702a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68b9      	ldr	r1, [r7, #8]
 800700e:	4618      	mov	r0, r3
 8007010:	f000 fc94 	bl	800793c <TIM_OC3_SetConfig>
      break;
 8007014:	e009      	b.n	800702a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68b9      	ldr	r1, [r7, #8]
 800701c:	4618      	mov	r0, r3
 800701e:	f000 fcf7 	bl	8007a10 <TIM_OC4_SetConfig>
      break;
 8007022:	e002      	b.n	800702a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	75fb      	strb	r3, [r7, #23]
      break;
 8007028:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007032:	7dfb      	ldrb	r3, [r7, #23]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3718      	adds	r7, #24
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b086      	sub	sp, #24
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007048:	2300      	movs	r3, #0
 800704a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007052:	2b01      	cmp	r3, #1
 8007054:	d101      	bne.n	800705a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007056:	2302      	movs	r3, #2
 8007058:	e0ae      	b.n	80071b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2b0c      	cmp	r3, #12
 8007066:	f200 809f 	bhi.w	80071a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800706a:	a201      	add	r2, pc, #4	; (adr r2, 8007070 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800706c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007070:	080070a5 	.word	0x080070a5
 8007074:	080071a9 	.word	0x080071a9
 8007078:	080071a9 	.word	0x080071a9
 800707c:	080071a9 	.word	0x080071a9
 8007080:	080070e5 	.word	0x080070e5
 8007084:	080071a9 	.word	0x080071a9
 8007088:	080071a9 	.word	0x080071a9
 800708c:	080071a9 	.word	0x080071a9
 8007090:	08007127 	.word	0x08007127
 8007094:	080071a9 	.word	0x080071a9
 8007098:	080071a9 	.word	0x080071a9
 800709c:	080071a9 	.word	0x080071a9
 80070a0:	08007167 	.word	0x08007167
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68b9      	ldr	r1, [r7, #8]
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 fb74 	bl	8007798 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	699a      	ldr	r2, [r3, #24]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f042 0208 	orr.w	r2, r2, #8
 80070be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	699a      	ldr	r2, [r3, #24]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f022 0204 	bic.w	r2, r2, #4
 80070ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6999      	ldr	r1, [r3, #24]
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	691a      	ldr	r2, [r3, #16]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	619a      	str	r2, [r3, #24]
      break;
 80070e2:	e064      	b.n	80071ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68b9      	ldr	r1, [r7, #8]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 fbba 	bl	8007864 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	699a      	ldr	r2, [r3, #24]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	699a      	ldr	r2, [r3, #24]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800710e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6999      	ldr	r1, [r3, #24]
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	021a      	lsls	r2, r3, #8
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	430a      	orrs	r2, r1
 8007122:	619a      	str	r2, [r3, #24]
      break;
 8007124:	e043      	b.n	80071ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68b9      	ldr	r1, [r7, #8]
 800712c:	4618      	mov	r0, r3
 800712e:	f000 fc05 	bl	800793c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	69da      	ldr	r2, [r3, #28]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f042 0208 	orr.w	r2, r2, #8
 8007140:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	69da      	ldr	r2, [r3, #28]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f022 0204 	bic.w	r2, r2, #4
 8007150:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	69d9      	ldr	r1, [r3, #28]
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	691a      	ldr	r2, [r3, #16]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	430a      	orrs	r2, r1
 8007162:	61da      	str	r2, [r3, #28]
      break;
 8007164:	e023      	b.n	80071ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68b9      	ldr	r1, [r7, #8]
 800716c:	4618      	mov	r0, r3
 800716e:	f000 fc4f 	bl	8007a10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	69da      	ldr	r2, [r3, #28]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007180:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	69da      	ldr	r2, [r3, #28]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	69d9      	ldr	r1, [r3, #28]
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	021a      	lsls	r2, r3, #8
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	430a      	orrs	r2, r1
 80071a4:	61da      	str	r2, [r3, #28]
      break;
 80071a6:	e002      	b.n	80071ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	75fb      	strb	r3, [r7, #23]
      break;
 80071ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3718      	adds	r7, #24
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071ca:	2300      	movs	r3, #0
 80071cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d101      	bne.n	80071dc <HAL_TIM_ConfigClockSource+0x1c>
 80071d8:	2302      	movs	r3, #2
 80071da:	e0b4      	b.n	8007346 <HAL_TIM_ConfigClockSource+0x186>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2202      	movs	r2, #2
 80071e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80071fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007202:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68ba      	ldr	r2, [r7, #8]
 800720a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007214:	d03e      	beq.n	8007294 <HAL_TIM_ConfigClockSource+0xd4>
 8007216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800721a:	f200 8087 	bhi.w	800732c <HAL_TIM_ConfigClockSource+0x16c>
 800721e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007222:	f000 8086 	beq.w	8007332 <HAL_TIM_ConfigClockSource+0x172>
 8007226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800722a:	d87f      	bhi.n	800732c <HAL_TIM_ConfigClockSource+0x16c>
 800722c:	2b70      	cmp	r3, #112	; 0x70
 800722e:	d01a      	beq.n	8007266 <HAL_TIM_ConfigClockSource+0xa6>
 8007230:	2b70      	cmp	r3, #112	; 0x70
 8007232:	d87b      	bhi.n	800732c <HAL_TIM_ConfigClockSource+0x16c>
 8007234:	2b60      	cmp	r3, #96	; 0x60
 8007236:	d050      	beq.n	80072da <HAL_TIM_ConfigClockSource+0x11a>
 8007238:	2b60      	cmp	r3, #96	; 0x60
 800723a:	d877      	bhi.n	800732c <HAL_TIM_ConfigClockSource+0x16c>
 800723c:	2b50      	cmp	r3, #80	; 0x50
 800723e:	d03c      	beq.n	80072ba <HAL_TIM_ConfigClockSource+0xfa>
 8007240:	2b50      	cmp	r3, #80	; 0x50
 8007242:	d873      	bhi.n	800732c <HAL_TIM_ConfigClockSource+0x16c>
 8007244:	2b40      	cmp	r3, #64	; 0x40
 8007246:	d058      	beq.n	80072fa <HAL_TIM_ConfigClockSource+0x13a>
 8007248:	2b40      	cmp	r3, #64	; 0x40
 800724a:	d86f      	bhi.n	800732c <HAL_TIM_ConfigClockSource+0x16c>
 800724c:	2b30      	cmp	r3, #48	; 0x30
 800724e:	d064      	beq.n	800731a <HAL_TIM_ConfigClockSource+0x15a>
 8007250:	2b30      	cmp	r3, #48	; 0x30
 8007252:	d86b      	bhi.n	800732c <HAL_TIM_ConfigClockSource+0x16c>
 8007254:	2b20      	cmp	r3, #32
 8007256:	d060      	beq.n	800731a <HAL_TIM_ConfigClockSource+0x15a>
 8007258:	2b20      	cmp	r3, #32
 800725a:	d867      	bhi.n	800732c <HAL_TIM_ConfigClockSource+0x16c>
 800725c:	2b00      	cmp	r3, #0
 800725e:	d05c      	beq.n	800731a <HAL_TIM_ConfigClockSource+0x15a>
 8007260:	2b10      	cmp	r3, #16
 8007262:	d05a      	beq.n	800731a <HAL_TIM_ConfigClockSource+0x15a>
 8007264:	e062      	b.n	800732c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6818      	ldr	r0, [r3, #0]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	6899      	ldr	r1, [r3, #8]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	685a      	ldr	r2, [r3, #4]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	f000 fc95 	bl	8007ba4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007288:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68ba      	ldr	r2, [r7, #8]
 8007290:	609a      	str	r2, [r3, #8]
      break;
 8007292:	e04f      	b.n	8007334 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6818      	ldr	r0, [r3, #0]
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	6899      	ldr	r1, [r3, #8]
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	685a      	ldr	r2, [r3, #4]
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	f000 fc7e 	bl	8007ba4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	689a      	ldr	r2, [r3, #8]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072b6:	609a      	str	r2, [r3, #8]
      break;
 80072b8:	e03c      	b.n	8007334 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6818      	ldr	r0, [r3, #0]
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	6859      	ldr	r1, [r3, #4]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	461a      	mov	r2, r3
 80072c8:	f000 fbf2 	bl	8007ab0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2150      	movs	r1, #80	; 0x50
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 fc4b 	bl	8007b6e <TIM_ITRx_SetConfig>
      break;
 80072d8:	e02c      	b.n	8007334 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6818      	ldr	r0, [r3, #0]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	6859      	ldr	r1, [r3, #4]
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	461a      	mov	r2, r3
 80072e8:	f000 fc11 	bl	8007b0e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2160      	movs	r1, #96	; 0x60
 80072f2:	4618      	mov	r0, r3
 80072f4:	f000 fc3b 	bl	8007b6e <TIM_ITRx_SetConfig>
      break;
 80072f8:	e01c      	b.n	8007334 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6818      	ldr	r0, [r3, #0]
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	6859      	ldr	r1, [r3, #4]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	461a      	mov	r2, r3
 8007308:	f000 fbd2 	bl	8007ab0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2140      	movs	r1, #64	; 0x40
 8007312:	4618      	mov	r0, r3
 8007314:	f000 fc2b 	bl	8007b6e <TIM_ITRx_SetConfig>
      break;
 8007318:	e00c      	b.n	8007334 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4619      	mov	r1, r3
 8007324:	4610      	mov	r0, r2
 8007326:	f000 fc22 	bl	8007b6e <TIM_ITRx_SetConfig>
      break;
 800732a:	e003      	b.n	8007334 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	73fb      	strb	r3, [r7, #15]
      break;
 8007330:	e000      	b.n	8007334 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007332:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007344:	7bfb      	ldrb	r3, [r7, #15]
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800734e:	b480      	push	{r7}
 8007350:	b083      	sub	sp, #12
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007356:	bf00      	nop
 8007358:	370c      	adds	r7, #12
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr

08007362 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007362:	b480      	push	{r7}
 8007364:	b083      	sub	sp, #12
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800736a:	bf00      	nop
 800736c:	370c      	adds	r7, #12
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007376:	b480      	push	{r7}
 8007378:	b083      	sub	sp, #12
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800737e:	bf00      	nop
 8007380:	370c      	adds	r7, #12
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr

0800738a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800738a:	b480      	push	{r7}
 800738c:	b083      	sub	sp, #12
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007392:	bf00      	nop
 8007394:	370c      	adds	r7, #12
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800739e:	b480      	push	{r7}
 80073a0:	b083      	sub	sp, #12
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073a6:	bf00      	nop
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80073b2:	b480      	push	{r7}
 80073b4:	b083      	sub	sp, #12
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80073ba:	bf00      	nop
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b083      	sub	sp, #12
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073ce:	bf00      	nop
 80073d0:	370c      	adds	r7, #12
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr

080073da <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80073da:	b480      	push	{r7}
 80073dc:	b083      	sub	sp, #12
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80073e2:	bf00      	nop
 80073e4:	370c      	adds	r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b083      	sub	sp, #12
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80073f6:	bf00      	nop
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
	...

08007404 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8007404:	b480      	push	{r7}
 8007406:	b087      	sub	sp, #28
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	460b      	mov	r3, r1
 800740e:	607a      	str	r2, [r7, #4]
 8007410:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007412:	2300      	movs	r3, #0
 8007414:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d101      	bne.n	8007420 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	e135      	b.n	800768c <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007426:	2b01      	cmp	r3, #1
 8007428:	d101      	bne.n	800742e <HAL_TIM_RegisterCallback+0x2a>
 800742a:	2302      	movs	r3, #2
 800742c:	e12e      	b.n	800768c <HAL_TIM_RegisterCallback+0x288>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2201      	movs	r2, #1
 8007432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800743c:	b2db      	uxtb	r3, r3
 800743e:	2b01      	cmp	r3, #1
 8007440:	f040 80ba 	bne.w	80075b8 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8007444:	7afb      	ldrb	r3, [r7, #11]
 8007446:	2b1a      	cmp	r3, #26
 8007448:	f200 80b3 	bhi.w	80075b2 <HAL_TIM_RegisterCallback+0x1ae>
 800744c:	a201      	add	r2, pc, #4	; (adr r2, 8007454 <HAL_TIM_RegisterCallback+0x50>)
 800744e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007452:	bf00      	nop
 8007454:	080074c1 	.word	0x080074c1
 8007458:	080074c9 	.word	0x080074c9
 800745c:	080074d1 	.word	0x080074d1
 8007460:	080074d9 	.word	0x080074d9
 8007464:	080074e1 	.word	0x080074e1
 8007468:	080074e9 	.word	0x080074e9
 800746c:	080074f1 	.word	0x080074f1
 8007470:	080074f9 	.word	0x080074f9
 8007474:	08007501 	.word	0x08007501
 8007478:	08007509 	.word	0x08007509
 800747c:	08007511 	.word	0x08007511
 8007480:	08007519 	.word	0x08007519
 8007484:	08007521 	.word	0x08007521
 8007488:	08007529 	.word	0x08007529
 800748c:	08007531 	.word	0x08007531
 8007490:	0800753b 	.word	0x0800753b
 8007494:	08007545 	.word	0x08007545
 8007498:	0800754f 	.word	0x0800754f
 800749c:	08007559 	.word	0x08007559
 80074a0:	08007563 	.word	0x08007563
 80074a4:	0800756d 	.word	0x0800756d
 80074a8:	08007577 	.word	0x08007577
 80074ac:	08007581 	.word	0x08007581
 80074b0:	0800758b 	.word	0x0800758b
 80074b4:	08007595 	.word	0x08007595
 80074b8:	0800759f 	.word	0x0800759f
 80074bc:	080075a9 	.word	0x080075a9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80074c6:	e0dc      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80074ce:	e0d8      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80074d6:	e0d4      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80074de:	e0d0      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80074e6:	e0cc      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80074ee:	e0c8      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80074f6:	e0c4      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80074fe:	e0c0      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8007506:	e0bc      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800750e:	e0b8      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8007516:	e0b4      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800751e:	e0b0      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8007526:	e0ac      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800752e:	e0a8      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8007538:	e0a3      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8007542:	e09e      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800754c:	e099      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8007556:	e094      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8007560:	e08f      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800756a:	e08a      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8007574:	e085      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800757e:	e080      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8007588:	e07b      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8007592:	e076      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 800759c:	e071      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 80075a6:	e06c      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 80075b0:	e067      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	75fb      	strb	r3, [r7, #23]
        break;
 80075b6:	e064      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d15c      	bne.n	800767e <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 80075c4:	7afb      	ldrb	r3, [r7, #11]
 80075c6:	2b0d      	cmp	r3, #13
 80075c8:	d856      	bhi.n	8007678 <HAL_TIM_RegisterCallback+0x274>
 80075ca:	a201      	add	r2, pc, #4	; (adr r2, 80075d0 <HAL_TIM_RegisterCallback+0x1cc>)
 80075cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d0:	08007609 	.word	0x08007609
 80075d4:	08007611 	.word	0x08007611
 80075d8:	08007619 	.word	0x08007619
 80075dc:	08007621 	.word	0x08007621
 80075e0:	08007629 	.word	0x08007629
 80075e4:	08007631 	.word	0x08007631
 80075e8:	08007639 	.word	0x08007639
 80075ec:	08007641 	.word	0x08007641
 80075f0:	08007649 	.word	0x08007649
 80075f4:	08007651 	.word	0x08007651
 80075f8:	08007659 	.word	0x08007659
 80075fc:	08007661 	.word	0x08007661
 8007600:	08007669 	.word	0x08007669
 8007604:	08007671 	.word	0x08007671
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800760e:	e038      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8007616:	e034      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800761e:	e030      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8007626:	e02c      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800762e:	e028      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8007636:	e024      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800763e:	e020      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8007646:	e01c      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800764e:	e018      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8007656:	e014      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800765e:	e010      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8007666:	e00c      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800766e:	e008      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8007676:	e004      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	75fb      	strb	r3, [r7, #23]
        break;
 800767c:	e001      	b.n	8007682 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800768a:	7dfb      	ldrb	r3, [r7, #23]
}
 800768c:	4618      	mov	r0, r3
 800768e:	371c      	adds	r7, #28
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a34      	ldr	r2, [pc, #208]	; (800777c <TIM_Base_SetConfig+0xe4>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d00f      	beq.n	80076d0 <TIM_Base_SetConfig+0x38>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076b6:	d00b      	beq.n	80076d0 <TIM_Base_SetConfig+0x38>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a31      	ldr	r2, [pc, #196]	; (8007780 <TIM_Base_SetConfig+0xe8>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d007      	beq.n	80076d0 <TIM_Base_SetConfig+0x38>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a30      	ldr	r2, [pc, #192]	; (8007784 <TIM_Base_SetConfig+0xec>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d003      	beq.n	80076d0 <TIM_Base_SetConfig+0x38>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a2f      	ldr	r2, [pc, #188]	; (8007788 <TIM_Base_SetConfig+0xf0>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d108      	bne.n	80076e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	4313      	orrs	r3, r2
 80076e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a25      	ldr	r2, [pc, #148]	; (800777c <TIM_Base_SetConfig+0xe4>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d01b      	beq.n	8007722 <TIM_Base_SetConfig+0x8a>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076f0:	d017      	beq.n	8007722 <TIM_Base_SetConfig+0x8a>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a22      	ldr	r2, [pc, #136]	; (8007780 <TIM_Base_SetConfig+0xe8>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d013      	beq.n	8007722 <TIM_Base_SetConfig+0x8a>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a21      	ldr	r2, [pc, #132]	; (8007784 <TIM_Base_SetConfig+0xec>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d00f      	beq.n	8007722 <TIM_Base_SetConfig+0x8a>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a20      	ldr	r2, [pc, #128]	; (8007788 <TIM_Base_SetConfig+0xf0>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d00b      	beq.n	8007722 <TIM_Base_SetConfig+0x8a>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a1f      	ldr	r2, [pc, #124]	; (800778c <TIM_Base_SetConfig+0xf4>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d007      	beq.n	8007722 <TIM_Base_SetConfig+0x8a>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a1e      	ldr	r2, [pc, #120]	; (8007790 <TIM_Base_SetConfig+0xf8>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d003      	beq.n	8007722 <TIM_Base_SetConfig+0x8a>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a1d      	ldr	r2, [pc, #116]	; (8007794 <TIM_Base_SetConfig+0xfc>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d108      	bne.n	8007734 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	4313      	orrs	r3, r2
 8007732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	695b      	ldr	r3, [r3, #20]
 800773e:	4313      	orrs	r3, r2
 8007740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	689a      	ldr	r2, [r3, #8]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a08      	ldr	r2, [pc, #32]	; (800777c <TIM_Base_SetConfig+0xe4>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d103      	bne.n	8007768 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	691a      	ldr	r2, [r3, #16]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	615a      	str	r2, [r3, #20]
}
 800776e:	bf00      	nop
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	40010000 	.word	0x40010000
 8007780:	40000400 	.word	0x40000400
 8007784:	40000800 	.word	0x40000800
 8007788:	40000c00 	.word	0x40000c00
 800778c:	40014000 	.word	0x40014000
 8007790:	40014400 	.word	0x40014400
 8007794:	40014800 	.word	0x40014800

08007798 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007798:	b480      	push	{r7}
 800779a:	b087      	sub	sp, #28
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	f023 0201 	bic.w	r2, r3, #1
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f023 0303 	bic.w	r3, r3, #3
 80077ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	f023 0302 	bic.w	r3, r3, #2
 80077e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	697a      	ldr	r2, [r7, #20]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a1c      	ldr	r2, [pc, #112]	; (8007860 <TIM_OC1_SetConfig+0xc8>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d10c      	bne.n	800780e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	f023 0308 	bic.w	r3, r3, #8
 80077fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	697a      	ldr	r2, [r7, #20]
 8007802:	4313      	orrs	r3, r2
 8007804:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	f023 0304 	bic.w	r3, r3, #4
 800780c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a13      	ldr	r2, [pc, #76]	; (8007860 <TIM_OC1_SetConfig+0xc8>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d111      	bne.n	800783a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800781c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007824:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	693a      	ldr	r2, [r7, #16]
 800782c:	4313      	orrs	r3, r2
 800782e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	699b      	ldr	r3, [r3, #24]
 8007834:	693a      	ldr	r2, [r7, #16]
 8007836:	4313      	orrs	r3, r2
 8007838:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	693a      	ldr	r2, [r7, #16]
 800783e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	685a      	ldr	r2, [r3, #4]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	697a      	ldr	r2, [r7, #20]
 8007852:	621a      	str	r2, [r3, #32]
}
 8007854:	bf00      	nop
 8007856:	371c      	adds	r7, #28
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr
 8007860:	40010000 	.word	0x40010000

08007864 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007864:	b480      	push	{r7}
 8007866:	b087      	sub	sp, #28
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a1b      	ldr	r3, [r3, #32]
 8007872:	f023 0210 	bic.w	r2, r3, #16
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a1b      	ldr	r3, [r3, #32]
 800787e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800789a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	021b      	lsls	r3, r3, #8
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	f023 0320 	bic.w	r3, r3, #32
 80078ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	011b      	lsls	r3, r3, #4
 80078b6:	697a      	ldr	r2, [r7, #20]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a1e      	ldr	r2, [pc, #120]	; (8007938 <TIM_OC2_SetConfig+0xd4>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d10d      	bne.n	80078e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	011b      	lsls	r3, r3, #4
 80078d2:	697a      	ldr	r2, [r7, #20]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a15      	ldr	r2, [pc, #84]	; (8007938 <TIM_OC2_SetConfig+0xd4>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d113      	bne.n	8007910 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	695b      	ldr	r3, [r3, #20]
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	4313      	orrs	r3, r2
 8007902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	693a      	ldr	r2, [r7, #16]
 800790c:	4313      	orrs	r3, r2
 800790e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	693a      	ldr	r2, [r7, #16]
 8007914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	685a      	ldr	r2, [r3, #4]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	621a      	str	r2, [r3, #32]
}
 800792a:	bf00      	nop
 800792c:	371c      	adds	r7, #28
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	40010000 	.word	0x40010000

0800793c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800793c:	b480      	push	{r7}
 800793e:	b087      	sub	sp, #28
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	69db      	ldr	r3, [r3, #28]
 8007962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800796a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f023 0303 	bic.w	r3, r3, #3
 8007972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	4313      	orrs	r3, r2
 800797c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	021b      	lsls	r3, r3, #8
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	4313      	orrs	r3, r2
 8007990:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a1d      	ldr	r2, [pc, #116]	; (8007a0c <TIM_OC3_SetConfig+0xd0>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d10d      	bne.n	80079b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	021b      	lsls	r3, r3, #8
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a14      	ldr	r2, [pc, #80]	; (8007a0c <TIM_OC3_SetConfig+0xd0>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d113      	bne.n	80079e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	695b      	ldr	r3, [r3, #20]
 80079d2:	011b      	lsls	r3, r3, #4
 80079d4:	693a      	ldr	r2, [r7, #16]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	011b      	lsls	r3, r3, #4
 80079e0:	693a      	ldr	r2, [r7, #16]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	685a      	ldr	r2, [r3, #4]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	621a      	str	r2, [r3, #32]
}
 8007a00:	bf00      	nop
 8007a02:	371c      	adds	r7, #28
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr
 8007a0c:	40010000 	.word	0x40010000

08007a10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b087      	sub	sp, #28
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a1b      	ldr	r3, [r3, #32]
 8007a1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a1b      	ldr	r3, [r3, #32]
 8007a2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	69db      	ldr	r3, [r3, #28]
 8007a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	021b      	lsls	r3, r3, #8
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	031b      	lsls	r3, r3, #12
 8007a62:	693a      	ldr	r2, [r7, #16]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a10      	ldr	r2, [pc, #64]	; (8007aac <TIM_OC4_SetConfig+0x9c>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d109      	bne.n	8007a84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	019b      	lsls	r3, r3, #6
 8007a7e:	697a      	ldr	r2, [r7, #20]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	685a      	ldr	r2, [r3, #4]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	693a      	ldr	r2, [r7, #16]
 8007a9c:	621a      	str	r2, [r3, #32]
}
 8007a9e:	bf00      	nop
 8007aa0:	371c      	adds	r7, #28
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	40010000 	.word	0x40010000

08007ab0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b087      	sub	sp, #28
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6a1b      	ldr	r3, [r3, #32]
 8007ac0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	f023 0201 	bic.w	r2, r3, #1
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	699b      	ldr	r3, [r3, #24]
 8007ad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	011b      	lsls	r3, r3, #4
 8007ae0:	693a      	ldr	r2, [r7, #16]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f023 030a 	bic.w	r3, r3, #10
 8007aec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007aee:	697a      	ldr	r2, [r7, #20]
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	697a      	ldr	r2, [r7, #20]
 8007b00:	621a      	str	r2, [r3, #32]
}
 8007b02:	bf00      	nop
 8007b04:	371c      	adds	r7, #28
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b087      	sub	sp, #28
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	60f8      	str	r0, [r7, #12]
 8007b16:	60b9      	str	r1, [r7, #8]
 8007b18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
 8007b1e:	f023 0210 	bic.w	r2, r3, #16
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6a1b      	ldr	r3, [r3, #32]
 8007b30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	031b      	lsls	r3, r3, #12
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	011b      	lsls	r3, r3, #4
 8007b50:	693a      	ldr	r2, [r7, #16]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	697a      	ldr	r2, [r7, #20]
 8007b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	693a      	ldr	r2, [r7, #16]
 8007b60:	621a      	str	r2, [r3, #32]
}
 8007b62:	bf00      	nop
 8007b64:	371c      	adds	r7, #28
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr

08007b6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b6e:	b480      	push	{r7}
 8007b70:	b085      	sub	sp, #20
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
 8007b76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	f043 0307 	orr.w	r3, r3, #7
 8007b90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	609a      	str	r2, [r3, #8]
}
 8007b98:	bf00      	nop
 8007b9a:	3714      	adds	r7, #20
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b087      	sub	sp, #28
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]
 8007bb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	021a      	lsls	r2, r3, #8
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	431a      	orrs	r2, r3
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	697a      	ldr	r2, [r7, #20]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	609a      	str	r2, [r3, #8]
}
 8007bd8:	bf00      	nop
 8007bda:	371c      	adds	r7, #28
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b087      	sub	sp, #28
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	f003 031f 	and.w	r3, r3, #31
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6a1a      	ldr	r2, [r3, #32]
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	43db      	mvns	r3, r3
 8007c06:	401a      	ands	r2, r3
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6a1a      	ldr	r2, [r3, #32]
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	f003 031f 	and.w	r3, r3, #31
 8007c16:	6879      	ldr	r1, [r7, #4]
 8007c18:	fa01 f303 	lsl.w	r3, r1, r3
 8007c1c:	431a      	orrs	r2, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	621a      	str	r2, [r3, #32]
}
 8007c22:	bf00      	nop
 8007c24:	371c      	adds	r7, #28
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
	...

08007c30 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4a1c      	ldr	r2, [pc, #112]	; (8007cac <TIM_ResetCallback+0x7c>)
 8007c3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4a1b      	ldr	r2, [pc, #108]	; (8007cb0 <TIM_ResetCallback+0x80>)
 8007c44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4a1a      	ldr	r2, [pc, #104]	; (8007cb4 <TIM_ResetCallback+0x84>)
 8007c4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a19      	ldr	r2, [pc, #100]	; (8007cb8 <TIM_ResetCallback+0x88>)
 8007c54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a18      	ldr	r2, [pc, #96]	; (8007cbc <TIM_ResetCallback+0x8c>)
 8007c5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a17      	ldr	r2, [pc, #92]	; (8007cc0 <TIM_ResetCallback+0x90>)
 8007c64:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a16      	ldr	r2, [pc, #88]	; (8007cc4 <TIM_ResetCallback+0x94>)
 8007c6c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4a15      	ldr	r2, [pc, #84]	; (8007cc8 <TIM_ResetCallback+0x98>)
 8007c74:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4a14      	ldr	r2, [pc, #80]	; (8007ccc <TIM_ResetCallback+0x9c>)
 8007c7c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4a13      	ldr	r2, [pc, #76]	; (8007cd0 <TIM_ResetCallback+0xa0>)
 8007c84:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a12      	ldr	r2, [pc, #72]	; (8007cd4 <TIM_ResetCallback+0xa4>)
 8007c8c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a11      	ldr	r2, [pc, #68]	; (8007cd8 <TIM_ResetCallback+0xa8>)
 8007c94:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a10      	ldr	r2, [pc, #64]	; (8007cdc <TIM_ResetCallback+0xac>)
 8007c9c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007ca0:	bf00      	nop
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr
 8007cac:	08002dcd 	.word	0x08002dcd
 8007cb0:	0800734f 	.word	0x0800734f
 8007cb4:	080073c7 	.word	0x080073c7
 8007cb8:	080073db 	.word	0x080073db
 8007cbc:	08007377 	.word	0x08007377
 8007cc0:	0800738b 	.word	0x0800738b
 8007cc4:	08007363 	.word	0x08007363
 8007cc8:	0800739f 	.word	0x0800739f
 8007ccc:	080073b3 	.word	0x080073b3
 8007cd0:	080073ef 	.word	0x080073ef
 8007cd4:	08007dbd 	.word	0x08007dbd
 8007cd8:	08007dd1 	.word	0x08007dd1
 8007cdc:	08007de5 	.word	0x08007de5

08007ce0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d101      	bne.n	8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	e050      	b.n	8007d9a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2202      	movs	r2, #2
 8007d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a1c      	ldr	r2, [pc, #112]	; (8007da8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d018      	beq.n	8007d6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d44:	d013      	beq.n	8007d6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a18      	ldr	r2, [pc, #96]	; (8007dac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d00e      	beq.n	8007d6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a16      	ldr	r2, [pc, #88]	; (8007db0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d009      	beq.n	8007d6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a15      	ldr	r2, [pc, #84]	; (8007db4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d004      	beq.n	8007d6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a13      	ldr	r2, [pc, #76]	; (8007db8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d10c      	bne.n	8007d88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3714      	adds	r7, #20
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	40010000 	.word	0x40010000
 8007dac:	40000400 	.word	0x40000400
 8007db0:	40000800 	.word	0x40000800
 8007db4:	40000c00 	.word	0x40000c00
 8007db8:	40014000 	.word	0x40014000

08007dbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d101      	bne.n	8007e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e04a      	b.n	8007ea0 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d111      	bne.n	8007e3a <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 fd2c 	bl	800887c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d102      	bne.n	8007e32 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a1e      	ldr	r2, [pc, #120]	; (8007ea8 <HAL_UART_Init+0xb0>)
 8007e30:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2224      	movs	r2, #36	; 0x24
 8007e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68da      	ldr	r2, [r3, #12]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e50:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 fff6 	bl	8008e44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	691a      	ldr	r2, [r3, #16]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e66:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	695a      	ldr	r2, [r3, #20]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e76:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68da      	ldr	r2, [r3, #12]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e86:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2220      	movs	r2, #32
 8007e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2220      	movs	r2, #32
 8007e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	080038b9 	.word	0x080038b9

08007eac <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b087      	sub	sp, #28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	607a      	str	r2, [r7, #4]
 8007eb8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d107      	bne.n	8007ed4 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec8:	f043 0220 	orr.w	r2, r3, #32
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e08c      	b.n	8007fee <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d101      	bne.n	8007ee2 <HAL_UART_RegisterCallback+0x36>
 8007ede:	2302      	movs	r3, #2
 8007ee0:	e085      	b.n	8007fee <HAL_UART_RegisterCallback+0x142>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b20      	cmp	r3, #32
 8007ef4:	d151      	bne.n	8007f9a <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 8007ef6:	7afb      	ldrb	r3, [r7, #11]
 8007ef8:	2b0c      	cmp	r3, #12
 8007efa:	d845      	bhi.n	8007f88 <HAL_UART_RegisterCallback+0xdc>
 8007efc:	a201      	add	r2, pc, #4	; (adr r2, 8007f04 <HAL_UART_RegisterCallback+0x58>)
 8007efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f02:	bf00      	nop
 8007f04:	08007f39 	.word	0x08007f39
 8007f08:	08007f41 	.word	0x08007f41
 8007f0c:	08007f49 	.word	0x08007f49
 8007f10:	08007f51 	.word	0x08007f51
 8007f14:	08007f59 	.word	0x08007f59
 8007f18:	08007f61 	.word	0x08007f61
 8007f1c:	08007f69 	.word	0x08007f69
 8007f20:	08007f71 	.word	0x08007f71
 8007f24:	08007f89 	.word	0x08007f89
 8007f28:	08007f89 	.word	0x08007f89
 8007f2c:	08007f89 	.word	0x08007f89
 8007f30:	08007f79 	.word	0x08007f79
 8007f34:	08007f81 	.word	0x08007f81
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8007f3e:	e051      	b.n	8007fe4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8007f46:	e04d      	b.n	8007fe4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8007f4e:	e049      	b.n	8007fe4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8007f56:	e045      	b.n	8007fe4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8007f5e:	e041      	b.n	8007fe4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8007f66:	e03d      	b.n	8007fe4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8007f6e:	e039      	b.n	8007fe4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8007f76:	e035      	b.n	8007fe4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8007f7e:	e031      	b.n	8007fe4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8007f86:	e02d      	b.n	8007fe4 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8c:	f043 0220 	orr.w	r2, r3, #32
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8007f94:	2301      	movs	r3, #1
 8007f96:	75fb      	strb	r3, [r7, #23]
        break;
 8007f98:	e024      	b.n	8007fe4 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d116      	bne.n	8007fd4 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 8007fa6:	7afb      	ldrb	r3, [r7, #11]
 8007fa8:	2b0b      	cmp	r3, #11
 8007faa:	d002      	beq.n	8007fb2 <HAL_UART_RegisterCallback+0x106>
 8007fac:	2b0c      	cmp	r3, #12
 8007fae:	d004      	beq.n	8007fba <HAL_UART_RegisterCallback+0x10e>
 8007fb0:	e007      	b.n	8007fc2 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8007fb8:	e014      	b.n	8007fe4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8007fc0:	e010      	b.n	8007fe4 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc6:	f043 0220 	orr.w	r2, r3, #32
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	75fb      	strb	r3, [r7, #23]
        break;
 8007fd2:	e007      	b.n	8007fe4 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd8:	f043 0220 	orr.w	r2, r3, #32
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	371c      	adds	r7, #28
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop

08007ffc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	4613      	mov	r3, r2
 8008008:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008010:	b2db      	uxtb	r3, r3
 8008012:	2b20      	cmp	r3, #32
 8008014:	d11d      	bne.n	8008052 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d002      	beq.n	8008022 <HAL_UART_Receive_IT+0x26>
 800801c:	88fb      	ldrh	r3, [r7, #6]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d101      	bne.n	8008026 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	e016      	b.n	8008054 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800802c:	2b01      	cmp	r3, #1
 800802e:	d101      	bne.n	8008034 <HAL_UART_Receive_IT+0x38>
 8008030:	2302      	movs	r3, #2
 8008032:	e00f      	b.n	8008054 <HAL_UART_Receive_IT+0x58>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008042:	88fb      	ldrh	r3, [r7, #6]
 8008044:	461a      	mov	r2, r3
 8008046:	68b9      	ldr	r1, [r7, #8]
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f000 fcf7 	bl	8008a3c <UART_Start_Receive_IT>
 800804e:	4603      	mov	r3, r0
 8008050:	e000      	b.n	8008054 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008052:	2302      	movs	r3, #2
  }
}
 8008054:	4618      	mov	r0, r3
 8008056:	3710      	adds	r7, #16
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b08c      	sub	sp, #48	; 0x30
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	4613      	mov	r3, r2
 8008068:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2b20      	cmp	r3, #32
 8008074:	d165      	bne.n	8008142 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d002      	beq.n	8008082 <HAL_UART_Transmit_DMA+0x26>
 800807c:	88fb      	ldrh	r3, [r7, #6]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d101      	bne.n	8008086 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	e05e      	b.n	8008144 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800808c:	2b01      	cmp	r3, #1
 800808e:	d101      	bne.n	8008094 <HAL_UART_Transmit_DMA+0x38>
 8008090:	2302      	movs	r3, #2
 8008092:	e057      	b.n	8008144 <HAL_UART_Transmit_DMA+0xe8>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	88fa      	ldrh	r2, [r7, #6]
 80080a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	88fa      	ldrh	r2, [r7, #6]
 80080ac:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2221      	movs	r2, #33	; 0x21
 80080b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c0:	4a22      	ldr	r2, [pc, #136]	; (800814c <HAL_UART_Transmit_DMA+0xf0>)
 80080c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c8:	4a21      	ldr	r2, [pc, #132]	; (8008150 <HAL_UART_Transmit_DMA+0xf4>)
 80080ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080d0:	4a20      	ldr	r2, [pc, #128]	; (8008154 <HAL_UART_Transmit_DMA+0xf8>)
 80080d2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080d8:	2200      	movs	r2, #0
 80080da:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80080dc:	f107 0308 	add.w	r3, r7, #8
 80080e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80080e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e8:	6819      	ldr	r1, [r3, #0]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	3304      	adds	r3, #4
 80080f0:	461a      	mov	r2, r3
 80080f2:	88fb      	ldrh	r3, [r7, #6]
 80080f4:	f7fc fee2 	bl	8004ebc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008100:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	3314      	adds	r3, #20
 8008110:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	e853 3f00 	ldrex	r3, [r3]
 8008118:	617b      	str	r3, [r7, #20]
   return(result);
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008120:	62bb      	str	r3, [r7, #40]	; 0x28
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	3314      	adds	r3, #20
 8008128:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800812a:	627a      	str	r2, [r7, #36]	; 0x24
 800812c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812e:	6a39      	ldr	r1, [r7, #32]
 8008130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008132:	e841 2300 	strex	r3, r2, [r1]
 8008136:	61fb      	str	r3, [r7, #28]
   return(result);
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1e5      	bne.n	800810a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800813e:	2300      	movs	r3, #0
 8008140:	e000      	b.n	8008144 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008142:	2302      	movs	r3, #2
  }
}
 8008144:	4618      	mov	r0, r3
 8008146:	3730      	adds	r7, #48	; 0x30
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	080088ed 	.word	0x080088ed
 8008150:	08008989 	.word	0x08008989
 8008154:	080089a7 	.word	0x080089a7

08008158 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b09a      	sub	sp, #104	; 0x68
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	330c      	adds	r3, #12
 8008166:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008168:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800816a:	e853 3f00 	ldrex	r3, [r3]
 800816e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008172:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008176:	667b      	str	r3, [r7, #100]	; 0x64
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	330c      	adds	r3, #12
 800817e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008180:	657a      	str	r2, [r7, #84]	; 0x54
 8008182:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008184:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008186:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008188:	e841 2300 	strex	r3, r2, [r1]
 800818c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800818e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008190:	2b00      	cmp	r3, #0
 8008192:	d1e5      	bne.n	8008160 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	3314      	adds	r3, #20
 800819a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800819e:	e853 3f00 	ldrex	r3, [r3]
 80081a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80081a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a6:	f023 0301 	bic.w	r3, r3, #1
 80081aa:	663b      	str	r3, [r7, #96]	; 0x60
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	3314      	adds	r3, #20
 80081b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081b4:	643a      	str	r2, [r7, #64]	; 0x40
 80081b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80081ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081bc:	e841 2300 	strex	r3, r2, [r1]
 80081c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1e5      	bne.n	8008194 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d119      	bne.n	8008204 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	330c      	adds	r3, #12
 80081d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d8:	6a3b      	ldr	r3, [r7, #32]
 80081da:	e853 3f00 	ldrex	r3, [r3]
 80081de:	61fb      	str	r3, [r7, #28]
   return(result);
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	f023 0310 	bic.w	r3, r3, #16
 80081e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	330c      	adds	r3, #12
 80081ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80081f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081f8:	e841 2300 	strex	r3, r2, [r1]
 80081fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008200:	2b00      	cmp	r3, #0
 8008202:	d1e5      	bne.n	80081d0 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	695b      	ldr	r3, [r3, #20]
 800820a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800820e:	2b40      	cmp	r3, #64	; 0x40
 8008210:	d136      	bne.n	8008280 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	3314      	adds	r3, #20
 8008218:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	e853 3f00 	ldrex	r3, [r3]
 8008220:	60bb      	str	r3, [r7, #8]
   return(result);
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008228:	65bb      	str	r3, [r7, #88]	; 0x58
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	3314      	adds	r3, #20
 8008230:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008232:	61ba      	str	r2, [r7, #24]
 8008234:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008236:	6979      	ldr	r1, [r7, #20]
 8008238:	69ba      	ldr	r2, [r7, #24]
 800823a:	e841 2300 	strex	r3, r2, [r1]
 800823e:	613b      	str	r3, [r7, #16]
   return(result);
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1e5      	bne.n	8008212 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824a:	2b00      	cmp	r3, #0
 800824c:	d018      	beq.n	8008280 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008252:	2200      	movs	r2, #0
 8008254:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825a:	4618      	mov	r0, r3
 800825c:	f7fc fe86 	bl	8004f6c <HAL_DMA_Abort>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00c      	beq.n	8008280 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800826a:	4618      	mov	r0, r3
 800826c:	f7fd f89a 	bl	80053a4 <HAL_DMA_GetError>
 8008270:	4603      	mov	r3, r0
 8008272:	2b20      	cmp	r3, #32
 8008274:	d104      	bne.n	8008280 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2210      	movs	r2, #16
 800827a:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800827c:	2303      	movs	r3, #3
 800827e:	e00a      	b.n	8008296 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2220      	movs	r2, #32
 800828a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3768      	adds	r7, #104	; 0x68
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
	...

080082a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b0ba      	sub	sp, #232	; 0xe8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	695b      	ldr	r3, [r3, #20]
 80082c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80082c6:	2300      	movs	r3, #0
 80082c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80082cc:	2300      	movs	r3, #0
 80082ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80082d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082d6:	f003 030f 	and.w	r3, r3, #15
 80082da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80082de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10f      	bne.n	8008306 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80082e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ea:	f003 0320 	and.w	r3, r3, #32
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d009      	beq.n	8008306 <HAL_UART_IRQHandler+0x66>
 80082f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082f6:	f003 0320 	and.w	r3, r3, #32
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d003      	beq.n	8008306 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 fce3 	bl	8008cca <UART_Receive_IT>
      return;
 8008304:	e25b      	b.n	80087be <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008306:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800830a:	2b00      	cmp	r3, #0
 800830c:	f000 80e1 	beq.w	80084d2 <HAL_UART_IRQHandler+0x232>
 8008310:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008314:	f003 0301 	and.w	r3, r3, #1
 8008318:	2b00      	cmp	r3, #0
 800831a:	d106      	bne.n	800832a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800831c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008320:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008324:	2b00      	cmp	r3, #0
 8008326:	f000 80d4 	beq.w	80084d2 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800832a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00b      	beq.n	800834e <HAL_UART_IRQHandler+0xae>
 8008336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800833a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800833e:	2b00      	cmp	r3, #0
 8008340:	d005      	beq.n	800834e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008346:	f043 0201 	orr.w	r2, r3, #1
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800834e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008352:	f003 0304 	and.w	r3, r3, #4
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00b      	beq.n	8008372 <HAL_UART_IRQHandler+0xd2>
 800835a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800835e:	f003 0301 	and.w	r3, r3, #1
 8008362:	2b00      	cmp	r3, #0
 8008364:	d005      	beq.n	8008372 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836a:	f043 0202 	orr.w	r2, r3, #2
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008376:	f003 0302 	and.w	r3, r3, #2
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00b      	beq.n	8008396 <HAL_UART_IRQHandler+0xf6>
 800837e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008382:	f003 0301 	and.w	r3, r3, #1
 8008386:	2b00      	cmp	r3, #0
 8008388:	d005      	beq.n	8008396 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838e:	f043 0204 	orr.w	r2, r3, #4
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800839a:	f003 0308 	and.w	r3, r3, #8
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d011      	beq.n	80083c6 <HAL_UART_IRQHandler+0x126>
 80083a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083a6:	f003 0320 	and.w	r3, r3, #32
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d105      	bne.n	80083ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80083ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083b2:	f003 0301 	and.w	r3, r3, #1
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d005      	beq.n	80083c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083be:	f043 0208 	orr.w	r2, r3, #8
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f000 81f2 	beq.w	80087b4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80083d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083d4:	f003 0320 	and.w	r3, r3, #32
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d008      	beq.n	80083ee <HAL_UART_IRQHandler+0x14e>
 80083dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083e0:	f003 0320 	and.w	r3, r3, #32
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d002      	beq.n	80083ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fc6e 	bl	8008cca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	695b      	ldr	r3, [r3, #20]
 80083f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f8:	2b40      	cmp	r3, #64	; 0x40
 80083fa:	bf0c      	ite	eq
 80083fc:	2301      	moveq	r3, #1
 80083fe:	2300      	movne	r3, #0
 8008400:	b2db      	uxtb	r3, r3
 8008402:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840a:	f003 0308 	and.w	r3, r3, #8
 800840e:	2b00      	cmp	r3, #0
 8008410:	d103      	bne.n	800841a <HAL_UART_IRQHandler+0x17a>
 8008412:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008416:	2b00      	cmp	r3, #0
 8008418:	d051      	beq.n	80084be <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fb74 	bl	8008b08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800842a:	2b40      	cmp	r3, #64	; 0x40
 800842c:	d142      	bne.n	80084b4 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	3314      	adds	r3, #20
 8008434:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008438:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800843c:	e853 3f00 	ldrex	r3, [r3]
 8008440:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008444:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800844c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	3314      	adds	r3, #20
 8008456:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800845a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800845e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008462:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008466:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800846a:	e841 2300 	strex	r3, r2, [r1]
 800846e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1d9      	bne.n	800842e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847e:	2b00      	cmp	r3, #0
 8008480:	d013      	beq.n	80084aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008486:	4a7f      	ldr	r2, [pc, #508]	; (8008684 <HAL_UART_IRQHandler+0x3e4>)
 8008488:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800848e:	4618      	mov	r0, r3
 8008490:	f7fc fddc 	bl	800504c <HAL_DMA_Abort_IT>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d019      	beq.n	80084ce <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800849e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80084a4:	4610      	mov	r0, r2
 80084a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084a8:	e011      	b.n	80084ce <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084b2:	e00c      	b.n	80084ce <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084bc:	e007      	b.n	80084ce <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80084cc:	e172      	b.n	80087b4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084ce:	bf00      	nop
    return;
 80084d0:	e170      	b.n	80087b4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	f040 814c 	bne.w	8008774 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80084dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084e0:	f003 0310 	and.w	r3, r3, #16
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f000 8145 	beq.w	8008774 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80084ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084ee:	f003 0310 	and.w	r3, r3, #16
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f000 813e 	beq.w	8008774 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80084f8:	2300      	movs	r3, #0
 80084fa:	60bb      	str	r3, [r7, #8]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	60bb      	str	r3, [r7, #8]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	60bb      	str	r3, [r7, #8]
 800850c:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	695b      	ldr	r3, [r3, #20]
 8008514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008518:	2b40      	cmp	r3, #64	; 0x40
 800851a:	f040 80b5 	bne.w	8008688 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800852a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800852e:	2b00      	cmp	r3, #0
 8008530:	f000 8142 	beq.w	80087b8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008538:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800853c:	429a      	cmp	r2, r3
 800853e:	f080 813b 	bcs.w	80087b8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008548:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854e:	69db      	ldr	r3, [r3, #28]
 8008550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008554:	f000 8088 	beq.w	8008668 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	330c      	adds	r3, #12
 800855e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008562:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008566:	e853 3f00 	ldrex	r3, [r3]
 800856a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800856e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008572:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008576:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	330c      	adds	r3, #12
 8008580:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008584:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008588:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008590:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008594:	e841 2300 	strex	r3, r2, [r1]
 8008598:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800859c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d1d9      	bne.n	8008558 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	3314      	adds	r3, #20
 80085aa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085ae:	e853 3f00 	ldrex	r3, [r3]
 80085b2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80085b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085b6:	f023 0301 	bic.w	r3, r3, #1
 80085ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	3314      	adds	r3, #20
 80085c4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80085c8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80085cc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ce:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80085d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80085d4:	e841 2300 	strex	r3, r2, [r1]
 80085d8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80085da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1e1      	bne.n	80085a4 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	3314      	adds	r3, #20
 80085e6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085ea:	e853 3f00 	ldrex	r3, [r3]
 80085ee:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80085f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	3314      	adds	r3, #20
 8008600:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008604:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008606:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008608:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800860a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800860c:	e841 2300 	strex	r3, r2, [r1]
 8008610:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008612:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1e3      	bne.n	80085e0 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2220      	movs	r2, #32
 800861c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	330c      	adds	r3, #12
 800862c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008630:	e853 3f00 	ldrex	r3, [r3]
 8008634:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008638:	f023 0310 	bic.w	r3, r3, #16
 800863c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	330c      	adds	r3, #12
 8008646:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800864a:	65ba      	str	r2, [r7, #88]	; 0x58
 800864c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008650:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008652:	e841 2300 	strex	r3, r2, [r1]
 8008656:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1e3      	bne.n	8008626 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008662:	4618      	mov	r0, r3
 8008664:	f7fc fc82 	bl	8004f6c <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8008674:	b292      	uxth	r2, r2
 8008676:	1a8a      	subs	r2, r1, r2
 8008678:	b292      	uxth	r2, r2
 800867a:	4611      	mov	r1, r2
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008680:	e09a      	b.n	80087b8 <HAL_UART_IRQHandler+0x518>
 8008682:	bf00      	nop
 8008684:	08008bcf 	.word	0x08008bcf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008690:	b29b      	uxth	r3, r3
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800869c:	b29b      	uxth	r3, r3
 800869e:	2b00      	cmp	r3, #0
 80086a0:	f000 808c 	beq.w	80087bc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80086a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f000 8087 	beq.w	80087bc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	330c      	adds	r3, #12
 80086b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b8:	e853 3f00 	ldrex	r3, [r3]
 80086bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80086be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	330c      	adds	r3, #12
 80086ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80086d2:	647a      	str	r2, [r7, #68]	; 0x44
 80086d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80086d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086da:	e841 2300 	strex	r3, r2, [r1]
 80086de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80086e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1e3      	bne.n	80086ae <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	3314      	adds	r3, #20
 80086ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f0:	e853 3f00 	ldrex	r3, [r3]
 80086f4:	623b      	str	r3, [r7, #32]
   return(result);
 80086f6:	6a3b      	ldr	r3, [r7, #32]
 80086f8:	f023 0301 	bic.w	r3, r3, #1
 80086fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	3314      	adds	r3, #20
 8008706:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800870a:	633a      	str	r2, [r7, #48]	; 0x30
 800870c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008712:	e841 2300 	strex	r3, r2, [r1]
 8008716:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1e3      	bne.n	80086e6 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2220      	movs	r2, #32
 8008722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	330c      	adds	r3, #12
 8008732:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	e853 3f00 	ldrex	r3, [r3]
 800873a:	60fb      	str	r3, [r7, #12]
   return(result);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f023 0310 	bic.w	r3, r3, #16
 8008742:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	330c      	adds	r3, #12
 800874c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008750:	61fa      	str	r2, [r7, #28]
 8008752:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008754:	69b9      	ldr	r1, [r7, #24]
 8008756:	69fa      	ldr	r2, [r7, #28]
 8008758:	e841 2300 	strex	r3, r2, [r1]
 800875c:	617b      	str	r3, [r7, #20]
   return(result);
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1e3      	bne.n	800872c <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008768:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800876c:	4611      	mov	r1, r2
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008772:	e023      	b.n	80087bc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800877c:	2b00      	cmp	r3, #0
 800877e:	d009      	beq.n	8008794 <HAL_UART_IRQHandler+0x4f4>
 8008780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008788:	2b00      	cmp	r3, #0
 800878a:	d003      	beq.n	8008794 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fa33 	bl	8008bf8 <UART_Transmit_IT>
    return;
 8008792:	e014      	b.n	80087be <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800879c:	2b00      	cmp	r3, #0
 800879e:	d00e      	beq.n	80087be <HAL_UART_IRQHandler+0x51e>
 80087a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d008      	beq.n	80087be <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 fa73 	bl	8008c98 <UART_EndTransmit_IT>
    return;
 80087b2:	e004      	b.n	80087be <HAL_UART_IRQHandler+0x51e>
    return;
 80087b4:	bf00      	nop
 80087b6:	e002      	b.n	80087be <HAL_UART_IRQHandler+0x51e>
      return;
 80087b8:	bf00      	nop
 80087ba:	e000      	b.n	80087be <HAL_UART_IRQHandler+0x51e>
      return;
 80087bc:	bf00      	nop
  }
}
 80087be:	37e8      	adds	r7, #232	; 0xe8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80087cc:	bf00      	nop
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80087e0:	bf00      	nop
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008808:	bf00      	nop
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008844:	bf00      	nop
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008858:	bf00      	nop
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	460b      	mov	r3, r1
 800886e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a10      	ldr	r2, [pc, #64]	; (80088c8 <UART_InitCallbacksToDefault+0x4c>)
 8008888:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a0f      	ldr	r2, [pc, #60]	; (80088cc <UART_InitCallbacksToDefault+0x50>)
 800888e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4a0f      	ldr	r2, [pc, #60]	; (80088d0 <UART_InitCallbacksToDefault+0x54>)
 8008894:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4a0e      	ldr	r2, [pc, #56]	; (80088d4 <UART_InitCallbacksToDefault+0x58>)
 800889a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4a0e      	ldr	r2, [pc, #56]	; (80088d8 <UART_InitCallbacksToDefault+0x5c>)
 80088a0:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a0d      	ldr	r2, [pc, #52]	; (80088dc <UART_InitCallbacksToDefault+0x60>)
 80088a6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a0d      	ldr	r2, [pc, #52]	; (80088e0 <UART_InitCallbacksToDefault+0x64>)
 80088ac:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4a0c      	ldr	r2, [pc, #48]	; (80088e4 <UART_InitCallbacksToDefault+0x68>)
 80088b2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4a0c      	ldr	r2, [pc, #48]	; (80088e8 <UART_InitCallbacksToDefault+0x6c>)
 80088b8:	669a      	str	r2, [r3, #104]	; 0x68

}
 80088ba:	bf00      	nop
 80088bc:	370c      	adds	r7, #12
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop
 80088c8:	080087d9 	.word	0x080087d9
 80088cc:	080087c5 	.word	0x080087c5
 80088d0:	08008801 	.word	0x08008801
 80088d4:	080087ed 	.word	0x080087ed
 80088d8:	08008815 	.word	0x08008815
 80088dc:	08008829 	.word	0x08008829
 80088e0:	0800883d 	.word	0x0800883d
 80088e4:	08008851 	.word	0x08008851
 80088e8:	08008865 	.word	0x08008865

080088ec <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b090      	sub	sp, #64	; 0x40
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008904:	2b00      	cmp	r3, #0
 8008906:	d137      	bne.n	8008978 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800890a:	2200      	movs	r2, #0
 800890c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800890e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	3314      	adds	r3, #20
 8008914:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008918:	e853 3f00 	ldrex	r3, [r3]
 800891c:	623b      	str	r3, [r7, #32]
   return(result);
 800891e:	6a3b      	ldr	r3, [r7, #32]
 8008920:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008924:	63bb      	str	r3, [r7, #56]	; 0x38
 8008926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	3314      	adds	r3, #20
 800892c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800892e:	633a      	str	r2, [r7, #48]	; 0x30
 8008930:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008936:	e841 2300 	strex	r3, r2, [r1]
 800893a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800893c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1e5      	bne.n	800890e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	330c      	adds	r3, #12
 8008948:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	e853 3f00 	ldrex	r3, [r3]
 8008950:	60fb      	str	r3, [r7, #12]
   return(result);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008958:	637b      	str	r3, [r7, #52]	; 0x34
 800895a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	330c      	adds	r3, #12
 8008960:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008962:	61fa      	str	r2, [r7, #28]
 8008964:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008966:	69b9      	ldr	r1, [r7, #24]
 8008968:	69fa      	ldr	r2, [r7, #28]
 800896a:	e841 2300 	strex	r3, r2, [r1]
 800896e:	617b      	str	r3, [r7, #20]
   return(result);
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1e5      	bne.n	8008942 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008976:	e003      	b.n	8008980 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8008978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800897a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800897c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800897e:	4798      	blx	r3
}
 8008980:	bf00      	nop
 8008982:	3740      	adds	r7, #64	; 0x40
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008994:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800899a:	68f8      	ldr	r0, [r7, #12]
 800899c:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800899e:	bf00      	nop
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b084      	sub	sp, #16
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80089ae:	2300      	movs	r3, #0
 80089b0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	695b      	ldr	r3, [r3, #20]
 80089be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089c2:	2b80      	cmp	r3, #128	; 0x80
 80089c4:	bf0c      	ite	eq
 80089c6:	2301      	moveq	r3, #1
 80089c8:	2300      	movne	r3, #0
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	2b21      	cmp	r3, #33	; 0x21
 80089d8:	d108      	bne.n	80089ec <UART_DMAError+0x46>
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d005      	beq.n	80089ec <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	2200      	movs	r2, #0
 80089e4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80089e6:	68b8      	ldr	r0, [r7, #8]
 80089e8:	f000 f866 	bl	8008ab8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089f6:	2b40      	cmp	r3, #64	; 0x40
 80089f8:	bf0c      	ite	eq
 80089fa:	2301      	moveq	r3, #1
 80089fc:	2300      	movne	r3, #0
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	2b22      	cmp	r3, #34	; 0x22
 8008a0c:	d108      	bne.n	8008a20 <UART_DMAError+0x7a>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d005      	beq.n	8008a20 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	2200      	movs	r2, #0
 8008a18:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008a1a:	68b8      	ldr	r0, [r7, #8]
 8008a1c:	f000 f874 	bl	8008b08 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a24:	f043 0210 	orr.w	r2, r3, #16
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a30:	68b8      	ldr	r0, [r7, #8]
 8008a32:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a34:	bf00      	nop
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	4613      	mov	r3, r2
 8008a48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	68ba      	ldr	r2, [r7, #8]
 8008a4e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	88fa      	ldrh	r2, [r7, #6]
 8008a54:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	88fa      	ldrh	r2, [r7, #6]
 8008a5a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2222      	movs	r2, #34	; 0x22
 8008a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d007      	beq.n	8008a8a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	68da      	ldr	r2, [r3, #12]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a88:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	695a      	ldr	r2, [r3, #20]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f042 0201 	orr.w	r2, r2, #1
 8008a98:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	68da      	ldr	r2, [r3, #12]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f042 0220 	orr.w	r2, r2, #32
 8008aa8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3714      	adds	r7, #20
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b089      	sub	sp, #36	; 0x24
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	330c      	adds	r3, #12
 8008ac6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	e853 3f00 	ldrex	r3, [r3]
 8008ace:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008ad6:	61fb      	str	r3, [r7, #28]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	330c      	adds	r3, #12
 8008ade:	69fa      	ldr	r2, [r7, #28]
 8008ae0:	61ba      	str	r2, [r7, #24]
 8008ae2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae4:	6979      	ldr	r1, [r7, #20]
 8008ae6:	69ba      	ldr	r2, [r7, #24]
 8008ae8:	e841 2300 	strex	r3, r2, [r1]
 8008aec:	613b      	str	r3, [r7, #16]
   return(result);
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d1e5      	bne.n	8008ac0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2220      	movs	r2, #32
 8008af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008afc:	bf00      	nop
 8008afe:	3724      	adds	r7, #36	; 0x24
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b095      	sub	sp, #84	; 0x54
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	330c      	adds	r3, #12
 8008b16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b1a:	e853 3f00 	ldrex	r3, [r3]
 8008b1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	330c      	adds	r3, #12
 8008b2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b30:	643a      	str	r2, [r7, #64]	; 0x40
 8008b32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b38:	e841 2300 	strex	r3, r2, [r1]
 8008b3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d1e5      	bne.n	8008b10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	3314      	adds	r3, #20
 8008b4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4c:	6a3b      	ldr	r3, [r7, #32]
 8008b4e:	e853 3f00 	ldrex	r3, [r3]
 8008b52:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	f023 0301 	bic.w	r3, r3, #1
 8008b5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	3314      	adds	r3, #20
 8008b62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b6c:	e841 2300 	strex	r3, r2, [r1]
 8008b70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d1e5      	bne.n	8008b44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d119      	bne.n	8008bb4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	330c      	adds	r3, #12
 8008b86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	e853 3f00 	ldrex	r3, [r3]
 8008b8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	f023 0310 	bic.w	r3, r3, #16
 8008b96:	647b      	str	r3, [r7, #68]	; 0x44
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	330c      	adds	r3, #12
 8008b9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ba0:	61ba      	str	r2, [r7, #24]
 8008ba2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba4:	6979      	ldr	r1, [r7, #20]
 8008ba6:	69ba      	ldr	r2, [r7, #24]
 8008ba8:	e841 2300 	strex	r3, r2, [r1]
 8008bac:	613b      	str	r3, [r7, #16]
   return(result);
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d1e5      	bne.n	8008b80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2220      	movs	r2, #32
 8008bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008bc2:	bf00      	nop
 8008bc4:	3754      	adds	r7, #84	; 0x54
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr

08008bce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b084      	sub	sp, #16
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2200      	movs	r2, #0
 8008be0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2200      	movs	r2, #0
 8008be6:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bf0:	bf00      	nop
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	2b21      	cmp	r3, #33	; 0x21
 8008c0a:	d13e      	bne.n	8008c8a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c14:	d114      	bne.n	8008c40 <UART_Transmit_IT+0x48>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d110      	bne.n	8008c40 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6a1b      	ldr	r3, [r3, #32]
 8008c22:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	881b      	ldrh	r3, [r3, #0]
 8008c28:	461a      	mov	r2, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c32:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6a1b      	ldr	r3, [r3, #32]
 8008c38:	1c9a      	adds	r2, r3, #2
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	621a      	str	r2, [r3, #32]
 8008c3e:	e008      	b.n	8008c52 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6a1b      	ldr	r3, [r3, #32]
 8008c44:	1c59      	adds	r1, r3, #1
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	6211      	str	r1, [r2, #32]
 8008c4a:	781a      	ldrb	r2, [r3, #0]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	4619      	mov	r1, r3
 8008c60:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d10f      	bne.n	8008c86 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	68da      	ldr	r2, [r3, #12]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c74:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	68da      	ldr	r2, [r3, #12]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c84:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008c86:	2300      	movs	r3, #0
 8008c88:	e000      	b.n	8008c8c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008c8a:	2302      	movs	r3, #2
  }
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3714      	adds	r7, #20
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	68da      	ldr	r2, [r3, #12]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2220      	movs	r2, #32
 8008cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3708      	adds	r7, #8
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b08c      	sub	sp, #48	; 0x30
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	2b22      	cmp	r3, #34	; 0x22
 8008cdc:	f040 80ad 	bne.w	8008e3a <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ce8:	d117      	bne.n	8008d1a <UART_Receive_IT+0x50>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d113      	bne.n	8008d1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cfa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d08:	b29a      	uxth	r2, r3
 8008d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d12:	1c9a      	adds	r2, r3, #2
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	629a      	str	r2, [r3, #40]	; 0x28
 8008d18:	e026      	b.n	8008d68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008d20:	2300      	movs	r3, #0
 8008d22:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d2c:	d007      	beq.n	8008d3e <UART_Receive_IT+0x74>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d10a      	bne.n	8008d4c <UART_Receive_IT+0x82>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	691b      	ldr	r3, [r3, #16]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d106      	bne.n	8008d4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	b2da      	uxtb	r2, r3
 8008d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d48:	701a      	strb	r2, [r3, #0]
 8008d4a:	e008      	b.n	8008d5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d58:	b2da      	uxtb	r2, r3
 8008d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d62:	1c5a      	adds	r2, r3, #1
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	3b01      	subs	r3, #1
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	4619      	mov	r1, r3
 8008d76:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d15c      	bne.n	8008e36 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68da      	ldr	r2, [r3, #12]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f022 0220 	bic.w	r2, r2, #32
 8008d8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	68da      	ldr	r2, [r3, #12]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	695a      	ldr	r2, [r3, #20]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f022 0201 	bic.w	r2, r2, #1
 8008daa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2220      	movs	r2, #32
 8008db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d136      	bne.n	8008e2a <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	330c      	adds	r3, #12
 8008dc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	e853 3f00 	ldrex	r3, [r3]
 8008dd0:	613b      	str	r3, [r7, #16]
   return(result);
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	f023 0310 	bic.w	r3, r3, #16
 8008dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	330c      	adds	r3, #12
 8008de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008de2:	623a      	str	r2, [r7, #32]
 8008de4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de6:	69f9      	ldr	r1, [r7, #28]
 8008de8:	6a3a      	ldr	r2, [r7, #32]
 8008dea:	e841 2300 	strex	r3, r2, [r1]
 8008dee:	61bb      	str	r3, [r7, #24]
   return(result);
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1e5      	bne.n	8008dc2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f003 0310 	and.w	r3, r3, #16
 8008e00:	2b10      	cmp	r3, #16
 8008e02:	d10a      	bne.n	8008e1a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e04:	2300      	movs	r3, #0
 8008e06:	60fb      	str	r3, [r7, #12]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	60fb      	str	r3, [r7, #12]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	60fb      	str	r3, [r7, #12]
 8008e18:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8008e22:	4611      	mov	r1, r2
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	4798      	blx	r3
 8008e28:	e003      	b.n	8008e32 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008e32:	2300      	movs	r3, #0
 8008e34:	e002      	b.n	8008e3c <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8008e36:	2300      	movs	r3, #0
 8008e38:	e000      	b.n	8008e3c <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8008e3a:	2302      	movs	r3, #2
  }
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3730      	adds	r7, #48	; 0x30
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e48:	b0c0      	sub	sp, #256	; 0x100
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	691b      	ldr	r3, [r3, #16]
 8008e58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e60:	68d9      	ldr	r1, [r3, #12]
 8008e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	ea40 0301 	orr.w	r3, r0, r1
 8008e6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e72:	689a      	ldr	r2, [r3, #8]
 8008e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e78:	691b      	ldr	r3, [r3, #16]
 8008e7a:	431a      	orrs	r2, r3
 8008e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e80:	695b      	ldr	r3, [r3, #20]
 8008e82:	431a      	orrs	r2, r3
 8008e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e88:	69db      	ldr	r3, [r3, #28]
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008e9c:	f021 010c 	bic.w	r1, r1, #12
 8008ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008eaa:	430b      	orrs	r3, r1
 8008eac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	695b      	ldr	r3, [r3, #20]
 8008eb6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ebe:	6999      	ldr	r1, [r3, #24]
 8008ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	ea40 0301 	orr.w	r3, r0, r1
 8008eca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	4b8f      	ldr	r3, [pc, #572]	; (8009110 <UART_SetConfig+0x2cc>)
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d005      	beq.n	8008ee4 <UART_SetConfig+0xa0>
 8008ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	4b8d      	ldr	r3, [pc, #564]	; (8009114 <UART_SetConfig+0x2d0>)
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d104      	bne.n	8008eee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ee4:	f7fd fac8 	bl	8006478 <HAL_RCC_GetPCLK2Freq>
 8008ee8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008eec:	e003      	b.n	8008ef6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008eee:	f7fd faaf 	bl	8006450 <HAL_RCC_GetPCLK1Freq>
 8008ef2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008efa:	69db      	ldr	r3, [r3, #28]
 8008efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f00:	f040 810c 	bne.w	800911c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008f04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008f0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008f12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008f16:	4622      	mov	r2, r4
 8008f18:	462b      	mov	r3, r5
 8008f1a:	1891      	adds	r1, r2, r2
 8008f1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8008f1e:	415b      	adcs	r3, r3
 8008f20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008f26:	4621      	mov	r1, r4
 8008f28:	eb12 0801 	adds.w	r8, r2, r1
 8008f2c:	4629      	mov	r1, r5
 8008f2e:	eb43 0901 	adc.w	r9, r3, r1
 8008f32:	f04f 0200 	mov.w	r2, #0
 8008f36:	f04f 0300 	mov.w	r3, #0
 8008f3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008f3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008f42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008f46:	4690      	mov	r8, r2
 8008f48:	4699      	mov	r9, r3
 8008f4a:	4623      	mov	r3, r4
 8008f4c:	eb18 0303 	adds.w	r3, r8, r3
 8008f50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008f54:	462b      	mov	r3, r5
 8008f56:	eb49 0303 	adc.w	r3, r9, r3
 8008f5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	2200      	movs	r2, #0
 8008f66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008f6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008f6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008f72:	460b      	mov	r3, r1
 8008f74:	18db      	adds	r3, r3, r3
 8008f76:	653b      	str	r3, [r7, #80]	; 0x50
 8008f78:	4613      	mov	r3, r2
 8008f7a:	eb42 0303 	adc.w	r3, r2, r3
 8008f7e:	657b      	str	r3, [r7, #84]	; 0x54
 8008f80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008f84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008f88:	f7f7 fe0a 	bl	8000ba0 <__aeabi_uldivmod>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	460b      	mov	r3, r1
 8008f90:	4b61      	ldr	r3, [pc, #388]	; (8009118 <UART_SetConfig+0x2d4>)
 8008f92:	fba3 2302 	umull	r2, r3, r3, r2
 8008f96:	095b      	lsrs	r3, r3, #5
 8008f98:	011c      	lsls	r4, r3, #4
 8008f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008fa4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008fa8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008fac:	4642      	mov	r2, r8
 8008fae:	464b      	mov	r3, r9
 8008fb0:	1891      	adds	r1, r2, r2
 8008fb2:	64b9      	str	r1, [r7, #72]	; 0x48
 8008fb4:	415b      	adcs	r3, r3
 8008fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008fbc:	4641      	mov	r1, r8
 8008fbe:	eb12 0a01 	adds.w	sl, r2, r1
 8008fc2:	4649      	mov	r1, r9
 8008fc4:	eb43 0b01 	adc.w	fp, r3, r1
 8008fc8:	f04f 0200 	mov.w	r2, #0
 8008fcc:	f04f 0300 	mov.w	r3, #0
 8008fd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008fd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008fd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008fdc:	4692      	mov	sl, r2
 8008fde:	469b      	mov	fp, r3
 8008fe0:	4643      	mov	r3, r8
 8008fe2:	eb1a 0303 	adds.w	r3, sl, r3
 8008fe6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008fea:	464b      	mov	r3, r9
 8008fec:	eb4b 0303 	adc.w	r3, fp, r3
 8008ff0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009000:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009004:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009008:	460b      	mov	r3, r1
 800900a:	18db      	adds	r3, r3, r3
 800900c:	643b      	str	r3, [r7, #64]	; 0x40
 800900e:	4613      	mov	r3, r2
 8009010:	eb42 0303 	adc.w	r3, r2, r3
 8009014:	647b      	str	r3, [r7, #68]	; 0x44
 8009016:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800901a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800901e:	f7f7 fdbf 	bl	8000ba0 <__aeabi_uldivmod>
 8009022:	4602      	mov	r2, r0
 8009024:	460b      	mov	r3, r1
 8009026:	4611      	mov	r1, r2
 8009028:	4b3b      	ldr	r3, [pc, #236]	; (8009118 <UART_SetConfig+0x2d4>)
 800902a:	fba3 2301 	umull	r2, r3, r3, r1
 800902e:	095b      	lsrs	r3, r3, #5
 8009030:	2264      	movs	r2, #100	; 0x64
 8009032:	fb02 f303 	mul.w	r3, r2, r3
 8009036:	1acb      	subs	r3, r1, r3
 8009038:	00db      	lsls	r3, r3, #3
 800903a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800903e:	4b36      	ldr	r3, [pc, #216]	; (8009118 <UART_SetConfig+0x2d4>)
 8009040:	fba3 2302 	umull	r2, r3, r3, r2
 8009044:	095b      	lsrs	r3, r3, #5
 8009046:	005b      	lsls	r3, r3, #1
 8009048:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800904c:	441c      	add	r4, r3
 800904e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009052:	2200      	movs	r2, #0
 8009054:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009058:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800905c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009060:	4642      	mov	r2, r8
 8009062:	464b      	mov	r3, r9
 8009064:	1891      	adds	r1, r2, r2
 8009066:	63b9      	str	r1, [r7, #56]	; 0x38
 8009068:	415b      	adcs	r3, r3
 800906a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800906c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009070:	4641      	mov	r1, r8
 8009072:	1851      	adds	r1, r2, r1
 8009074:	6339      	str	r1, [r7, #48]	; 0x30
 8009076:	4649      	mov	r1, r9
 8009078:	414b      	adcs	r3, r1
 800907a:	637b      	str	r3, [r7, #52]	; 0x34
 800907c:	f04f 0200 	mov.w	r2, #0
 8009080:	f04f 0300 	mov.w	r3, #0
 8009084:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009088:	4659      	mov	r1, fp
 800908a:	00cb      	lsls	r3, r1, #3
 800908c:	4651      	mov	r1, sl
 800908e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009092:	4651      	mov	r1, sl
 8009094:	00ca      	lsls	r2, r1, #3
 8009096:	4610      	mov	r0, r2
 8009098:	4619      	mov	r1, r3
 800909a:	4603      	mov	r3, r0
 800909c:	4642      	mov	r2, r8
 800909e:	189b      	adds	r3, r3, r2
 80090a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80090a4:	464b      	mov	r3, r9
 80090a6:	460a      	mov	r2, r1
 80090a8:	eb42 0303 	adc.w	r3, r2, r3
 80090ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80090b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80090bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80090c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80090c4:	460b      	mov	r3, r1
 80090c6:	18db      	adds	r3, r3, r3
 80090c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80090ca:	4613      	mov	r3, r2
 80090cc:	eb42 0303 	adc.w	r3, r2, r3
 80090d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80090d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80090da:	f7f7 fd61 	bl	8000ba0 <__aeabi_uldivmod>
 80090de:	4602      	mov	r2, r0
 80090e0:	460b      	mov	r3, r1
 80090e2:	4b0d      	ldr	r3, [pc, #52]	; (8009118 <UART_SetConfig+0x2d4>)
 80090e4:	fba3 1302 	umull	r1, r3, r3, r2
 80090e8:	095b      	lsrs	r3, r3, #5
 80090ea:	2164      	movs	r1, #100	; 0x64
 80090ec:	fb01 f303 	mul.w	r3, r1, r3
 80090f0:	1ad3      	subs	r3, r2, r3
 80090f2:	00db      	lsls	r3, r3, #3
 80090f4:	3332      	adds	r3, #50	; 0x32
 80090f6:	4a08      	ldr	r2, [pc, #32]	; (8009118 <UART_SetConfig+0x2d4>)
 80090f8:	fba2 2303 	umull	r2, r3, r2, r3
 80090fc:	095b      	lsrs	r3, r3, #5
 80090fe:	f003 0207 	and.w	r2, r3, #7
 8009102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4422      	add	r2, r4
 800910a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800910c:	e105      	b.n	800931a <UART_SetConfig+0x4d6>
 800910e:	bf00      	nop
 8009110:	40011000 	.word	0x40011000
 8009114:	40011400 	.word	0x40011400
 8009118:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800911c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009120:	2200      	movs	r2, #0
 8009122:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009126:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800912a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800912e:	4642      	mov	r2, r8
 8009130:	464b      	mov	r3, r9
 8009132:	1891      	adds	r1, r2, r2
 8009134:	6239      	str	r1, [r7, #32]
 8009136:	415b      	adcs	r3, r3
 8009138:	627b      	str	r3, [r7, #36]	; 0x24
 800913a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800913e:	4641      	mov	r1, r8
 8009140:	1854      	adds	r4, r2, r1
 8009142:	4649      	mov	r1, r9
 8009144:	eb43 0501 	adc.w	r5, r3, r1
 8009148:	f04f 0200 	mov.w	r2, #0
 800914c:	f04f 0300 	mov.w	r3, #0
 8009150:	00eb      	lsls	r3, r5, #3
 8009152:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009156:	00e2      	lsls	r2, r4, #3
 8009158:	4614      	mov	r4, r2
 800915a:	461d      	mov	r5, r3
 800915c:	4643      	mov	r3, r8
 800915e:	18e3      	adds	r3, r4, r3
 8009160:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009164:	464b      	mov	r3, r9
 8009166:	eb45 0303 	adc.w	r3, r5, r3
 800916a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800916e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800917a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800917e:	f04f 0200 	mov.w	r2, #0
 8009182:	f04f 0300 	mov.w	r3, #0
 8009186:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800918a:	4629      	mov	r1, r5
 800918c:	008b      	lsls	r3, r1, #2
 800918e:	4621      	mov	r1, r4
 8009190:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009194:	4621      	mov	r1, r4
 8009196:	008a      	lsls	r2, r1, #2
 8009198:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800919c:	f7f7 fd00 	bl	8000ba0 <__aeabi_uldivmod>
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	4b60      	ldr	r3, [pc, #384]	; (8009328 <UART_SetConfig+0x4e4>)
 80091a6:	fba3 2302 	umull	r2, r3, r3, r2
 80091aa:	095b      	lsrs	r3, r3, #5
 80091ac:	011c      	lsls	r4, r3, #4
 80091ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091b2:	2200      	movs	r2, #0
 80091b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80091b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80091bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80091c0:	4642      	mov	r2, r8
 80091c2:	464b      	mov	r3, r9
 80091c4:	1891      	adds	r1, r2, r2
 80091c6:	61b9      	str	r1, [r7, #24]
 80091c8:	415b      	adcs	r3, r3
 80091ca:	61fb      	str	r3, [r7, #28]
 80091cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80091d0:	4641      	mov	r1, r8
 80091d2:	1851      	adds	r1, r2, r1
 80091d4:	6139      	str	r1, [r7, #16]
 80091d6:	4649      	mov	r1, r9
 80091d8:	414b      	adcs	r3, r1
 80091da:	617b      	str	r3, [r7, #20]
 80091dc:	f04f 0200 	mov.w	r2, #0
 80091e0:	f04f 0300 	mov.w	r3, #0
 80091e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80091e8:	4659      	mov	r1, fp
 80091ea:	00cb      	lsls	r3, r1, #3
 80091ec:	4651      	mov	r1, sl
 80091ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091f2:	4651      	mov	r1, sl
 80091f4:	00ca      	lsls	r2, r1, #3
 80091f6:	4610      	mov	r0, r2
 80091f8:	4619      	mov	r1, r3
 80091fa:	4603      	mov	r3, r0
 80091fc:	4642      	mov	r2, r8
 80091fe:	189b      	adds	r3, r3, r2
 8009200:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009204:	464b      	mov	r3, r9
 8009206:	460a      	mov	r2, r1
 8009208:	eb42 0303 	adc.w	r3, r2, r3
 800920c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	67bb      	str	r3, [r7, #120]	; 0x78
 800921a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800921c:	f04f 0200 	mov.w	r2, #0
 8009220:	f04f 0300 	mov.w	r3, #0
 8009224:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009228:	4649      	mov	r1, r9
 800922a:	008b      	lsls	r3, r1, #2
 800922c:	4641      	mov	r1, r8
 800922e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009232:	4641      	mov	r1, r8
 8009234:	008a      	lsls	r2, r1, #2
 8009236:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800923a:	f7f7 fcb1 	bl	8000ba0 <__aeabi_uldivmod>
 800923e:	4602      	mov	r2, r0
 8009240:	460b      	mov	r3, r1
 8009242:	4b39      	ldr	r3, [pc, #228]	; (8009328 <UART_SetConfig+0x4e4>)
 8009244:	fba3 1302 	umull	r1, r3, r3, r2
 8009248:	095b      	lsrs	r3, r3, #5
 800924a:	2164      	movs	r1, #100	; 0x64
 800924c:	fb01 f303 	mul.w	r3, r1, r3
 8009250:	1ad3      	subs	r3, r2, r3
 8009252:	011b      	lsls	r3, r3, #4
 8009254:	3332      	adds	r3, #50	; 0x32
 8009256:	4a34      	ldr	r2, [pc, #208]	; (8009328 <UART_SetConfig+0x4e4>)
 8009258:	fba2 2303 	umull	r2, r3, r2, r3
 800925c:	095b      	lsrs	r3, r3, #5
 800925e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009262:	441c      	add	r4, r3
 8009264:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009268:	2200      	movs	r2, #0
 800926a:	673b      	str	r3, [r7, #112]	; 0x70
 800926c:	677a      	str	r2, [r7, #116]	; 0x74
 800926e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009272:	4642      	mov	r2, r8
 8009274:	464b      	mov	r3, r9
 8009276:	1891      	adds	r1, r2, r2
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	415b      	adcs	r3, r3
 800927c:	60fb      	str	r3, [r7, #12]
 800927e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009282:	4641      	mov	r1, r8
 8009284:	1851      	adds	r1, r2, r1
 8009286:	6039      	str	r1, [r7, #0]
 8009288:	4649      	mov	r1, r9
 800928a:	414b      	adcs	r3, r1
 800928c:	607b      	str	r3, [r7, #4]
 800928e:	f04f 0200 	mov.w	r2, #0
 8009292:	f04f 0300 	mov.w	r3, #0
 8009296:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800929a:	4659      	mov	r1, fp
 800929c:	00cb      	lsls	r3, r1, #3
 800929e:	4651      	mov	r1, sl
 80092a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092a4:	4651      	mov	r1, sl
 80092a6:	00ca      	lsls	r2, r1, #3
 80092a8:	4610      	mov	r0, r2
 80092aa:	4619      	mov	r1, r3
 80092ac:	4603      	mov	r3, r0
 80092ae:	4642      	mov	r2, r8
 80092b0:	189b      	adds	r3, r3, r2
 80092b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80092b4:	464b      	mov	r3, r9
 80092b6:	460a      	mov	r2, r1
 80092b8:	eb42 0303 	adc.w	r3, r2, r3
 80092bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80092be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	663b      	str	r3, [r7, #96]	; 0x60
 80092c8:	667a      	str	r2, [r7, #100]	; 0x64
 80092ca:	f04f 0200 	mov.w	r2, #0
 80092ce:	f04f 0300 	mov.w	r3, #0
 80092d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80092d6:	4649      	mov	r1, r9
 80092d8:	008b      	lsls	r3, r1, #2
 80092da:	4641      	mov	r1, r8
 80092dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80092e0:	4641      	mov	r1, r8
 80092e2:	008a      	lsls	r2, r1, #2
 80092e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80092e8:	f7f7 fc5a 	bl	8000ba0 <__aeabi_uldivmod>
 80092ec:	4602      	mov	r2, r0
 80092ee:	460b      	mov	r3, r1
 80092f0:	4b0d      	ldr	r3, [pc, #52]	; (8009328 <UART_SetConfig+0x4e4>)
 80092f2:	fba3 1302 	umull	r1, r3, r3, r2
 80092f6:	095b      	lsrs	r3, r3, #5
 80092f8:	2164      	movs	r1, #100	; 0x64
 80092fa:	fb01 f303 	mul.w	r3, r1, r3
 80092fe:	1ad3      	subs	r3, r2, r3
 8009300:	011b      	lsls	r3, r3, #4
 8009302:	3332      	adds	r3, #50	; 0x32
 8009304:	4a08      	ldr	r2, [pc, #32]	; (8009328 <UART_SetConfig+0x4e4>)
 8009306:	fba2 2303 	umull	r2, r3, r2, r3
 800930a:	095b      	lsrs	r3, r3, #5
 800930c:	f003 020f 	and.w	r2, r3, #15
 8009310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4422      	add	r2, r4
 8009318:	609a      	str	r2, [r3, #8]
}
 800931a:	bf00      	nop
 800931c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009320:	46bd      	mov	sp, r7
 8009322:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009326:	bf00      	nop
 8009328:	51eb851f 	.word	0x51eb851f

0800932c <__errno>:
 800932c:	4b01      	ldr	r3, [pc, #4]	; (8009334 <__errno+0x8>)
 800932e:	6818      	ldr	r0, [r3, #0]
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	2000021c 	.word	0x2000021c

08009338 <__libc_init_array>:
 8009338:	b570      	push	{r4, r5, r6, lr}
 800933a:	4d0d      	ldr	r5, [pc, #52]	; (8009370 <__libc_init_array+0x38>)
 800933c:	4c0d      	ldr	r4, [pc, #52]	; (8009374 <__libc_init_array+0x3c>)
 800933e:	1b64      	subs	r4, r4, r5
 8009340:	10a4      	asrs	r4, r4, #2
 8009342:	2600      	movs	r6, #0
 8009344:	42a6      	cmp	r6, r4
 8009346:	d109      	bne.n	800935c <__libc_init_array+0x24>
 8009348:	4d0b      	ldr	r5, [pc, #44]	; (8009378 <__libc_init_array+0x40>)
 800934a:	4c0c      	ldr	r4, [pc, #48]	; (800937c <__libc_init_array+0x44>)
 800934c:	f001 fb64 	bl	800aa18 <_init>
 8009350:	1b64      	subs	r4, r4, r5
 8009352:	10a4      	asrs	r4, r4, #2
 8009354:	2600      	movs	r6, #0
 8009356:	42a6      	cmp	r6, r4
 8009358:	d105      	bne.n	8009366 <__libc_init_array+0x2e>
 800935a:	bd70      	pop	{r4, r5, r6, pc}
 800935c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009360:	4798      	blx	r3
 8009362:	3601      	adds	r6, #1
 8009364:	e7ee      	b.n	8009344 <__libc_init_array+0xc>
 8009366:	f855 3b04 	ldr.w	r3, [r5], #4
 800936a:	4798      	blx	r3
 800936c:	3601      	adds	r6, #1
 800936e:	e7f2      	b.n	8009356 <__libc_init_array+0x1e>
 8009370:	0800b348 	.word	0x0800b348
 8009374:	0800b348 	.word	0x0800b348
 8009378:	0800b348 	.word	0x0800b348
 800937c:	0800b34c 	.word	0x0800b34c

08009380 <memcpy>:
 8009380:	440a      	add	r2, r1
 8009382:	4291      	cmp	r1, r2
 8009384:	f100 33ff 	add.w	r3, r0, #4294967295
 8009388:	d100      	bne.n	800938c <memcpy+0xc>
 800938a:	4770      	bx	lr
 800938c:	b510      	push	{r4, lr}
 800938e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009392:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009396:	4291      	cmp	r1, r2
 8009398:	d1f9      	bne.n	800938e <memcpy+0xe>
 800939a:	bd10      	pop	{r4, pc}

0800939c <memset>:
 800939c:	4402      	add	r2, r0
 800939e:	4603      	mov	r3, r0
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d100      	bne.n	80093a6 <memset+0xa>
 80093a4:	4770      	bx	lr
 80093a6:	f803 1b01 	strb.w	r1, [r3], #1
 80093aa:	e7f9      	b.n	80093a0 <memset+0x4>

080093ac <pow>:
 80093ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ae:	ed2d 8b02 	vpush	{d8}
 80093b2:	eeb0 8a40 	vmov.f32	s16, s0
 80093b6:	eef0 8a60 	vmov.f32	s17, s1
 80093ba:	ec55 4b11 	vmov	r4, r5, d1
 80093be:	f000 f907 	bl	80095d0 <__ieee754_pow>
 80093c2:	4622      	mov	r2, r4
 80093c4:	462b      	mov	r3, r5
 80093c6:	4620      	mov	r0, r4
 80093c8:	4629      	mov	r1, r5
 80093ca:	ec57 6b10 	vmov	r6, r7, d0
 80093ce:	f7f7 fb59 	bl	8000a84 <__aeabi_dcmpun>
 80093d2:	2800      	cmp	r0, #0
 80093d4:	d13b      	bne.n	800944e <pow+0xa2>
 80093d6:	ec51 0b18 	vmov	r0, r1, d8
 80093da:	2200      	movs	r2, #0
 80093dc:	2300      	movs	r3, #0
 80093de:	f7f7 fb1f 	bl	8000a20 <__aeabi_dcmpeq>
 80093e2:	b1b8      	cbz	r0, 8009414 <pow+0x68>
 80093e4:	2200      	movs	r2, #0
 80093e6:	2300      	movs	r3, #0
 80093e8:	4620      	mov	r0, r4
 80093ea:	4629      	mov	r1, r5
 80093ec:	f7f7 fb18 	bl	8000a20 <__aeabi_dcmpeq>
 80093f0:	2800      	cmp	r0, #0
 80093f2:	d146      	bne.n	8009482 <pow+0xd6>
 80093f4:	ec45 4b10 	vmov	d0, r4, r5
 80093f8:	f001 f9f7 	bl	800a7ea <finite>
 80093fc:	b338      	cbz	r0, 800944e <pow+0xa2>
 80093fe:	2200      	movs	r2, #0
 8009400:	2300      	movs	r3, #0
 8009402:	4620      	mov	r0, r4
 8009404:	4629      	mov	r1, r5
 8009406:	f7f7 fb15 	bl	8000a34 <__aeabi_dcmplt>
 800940a:	b300      	cbz	r0, 800944e <pow+0xa2>
 800940c:	f7ff ff8e 	bl	800932c <__errno>
 8009410:	2322      	movs	r3, #34	; 0x22
 8009412:	e01b      	b.n	800944c <pow+0xa0>
 8009414:	ec47 6b10 	vmov	d0, r6, r7
 8009418:	f001 f9e7 	bl	800a7ea <finite>
 800941c:	b9e0      	cbnz	r0, 8009458 <pow+0xac>
 800941e:	eeb0 0a48 	vmov.f32	s0, s16
 8009422:	eef0 0a68 	vmov.f32	s1, s17
 8009426:	f001 f9e0 	bl	800a7ea <finite>
 800942a:	b1a8      	cbz	r0, 8009458 <pow+0xac>
 800942c:	ec45 4b10 	vmov	d0, r4, r5
 8009430:	f001 f9db 	bl	800a7ea <finite>
 8009434:	b180      	cbz	r0, 8009458 <pow+0xac>
 8009436:	4632      	mov	r2, r6
 8009438:	463b      	mov	r3, r7
 800943a:	4630      	mov	r0, r6
 800943c:	4639      	mov	r1, r7
 800943e:	f7f7 fb21 	bl	8000a84 <__aeabi_dcmpun>
 8009442:	2800      	cmp	r0, #0
 8009444:	d0e2      	beq.n	800940c <pow+0x60>
 8009446:	f7ff ff71 	bl	800932c <__errno>
 800944a:	2321      	movs	r3, #33	; 0x21
 800944c:	6003      	str	r3, [r0, #0]
 800944e:	ecbd 8b02 	vpop	{d8}
 8009452:	ec47 6b10 	vmov	d0, r6, r7
 8009456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009458:	2200      	movs	r2, #0
 800945a:	2300      	movs	r3, #0
 800945c:	4630      	mov	r0, r6
 800945e:	4639      	mov	r1, r7
 8009460:	f7f7 fade 	bl	8000a20 <__aeabi_dcmpeq>
 8009464:	2800      	cmp	r0, #0
 8009466:	d0f2      	beq.n	800944e <pow+0xa2>
 8009468:	eeb0 0a48 	vmov.f32	s0, s16
 800946c:	eef0 0a68 	vmov.f32	s1, s17
 8009470:	f001 f9bb 	bl	800a7ea <finite>
 8009474:	2800      	cmp	r0, #0
 8009476:	d0ea      	beq.n	800944e <pow+0xa2>
 8009478:	ec45 4b10 	vmov	d0, r4, r5
 800947c:	f001 f9b5 	bl	800a7ea <finite>
 8009480:	e7c3      	b.n	800940a <pow+0x5e>
 8009482:	4f01      	ldr	r7, [pc, #4]	; (8009488 <pow+0xdc>)
 8009484:	2600      	movs	r6, #0
 8009486:	e7e2      	b.n	800944e <pow+0xa2>
 8009488:	3ff00000 	.word	0x3ff00000

0800948c <sqrt>:
 800948c:	b538      	push	{r3, r4, r5, lr}
 800948e:	ed2d 8b02 	vpush	{d8}
 8009492:	ec55 4b10 	vmov	r4, r5, d0
 8009496:	f000 fdc9 	bl	800a02c <__ieee754_sqrt>
 800949a:	4622      	mov	r2, r4
 800949c:	462b      	mov	r3, r5
 800949e:	4620      	mov	r0, r4
 80094a0:	4629      	mov	r1, r5
 80094a2:	eeb0 8a40 	vmov.f32	s16, s0
 80094a6:	eef0 8a60 	vmov.f32	s17, s1
 80094aa:	f7f7 faeb 	bl	8000a84 <__aeabi_dcmpun>
 80094ae:	b990      	cbnz	r0, 80094d6 <sqrt+0x4a>
 80094b0:	2200      	movs	r2, #0
 80094b2:	2300      	movs	r3, #0
 80094b4:	4620      	mov	r0, r4
 80094b6:	4629      	mov	r1, r5
 80094b8:	f7f7 fabc 	bl	8000a34 <__aeabi_dcmplt>
 80094bc:	b158      	cbz	r0, 80094d6 <sqrt+0x4a>
 80094be:	f7ff ff35 	bl	800932c <__errno>
 80094c2:	2321      	movs	r3, #33	; 0x21
 80094c4:	6003      	str	r3, [r0, #0]
 80094c6:	2200      	movs	r2, #0
 80094c8:	2300      	movs	r3, #0
 80094ca:	4610      	mov	r0, r2
 80094cc:	4619      	mov	r1, r3
 80094ce:	f7f7 f969 	bl	80007a4 <__aeabi_ddiv>
 80094d2:	ec41 0b18 	vmov	d8, r0, r1
 80094d6:	eeb0 0a48 	vmov.f32	s0, s16
 80094da:	eef0 0a68 	vmov.f32	s1, s17
 80094de:	ecbd 8b02 	vpop	{d8}
 80094e2:	bd38      	pop	{r3, r4, r5, pc}

080094e4 <powf>:
 80094e4:	b508      	push	{r3, lr}
 80094e6:	ed2d 8b04 	vpush	{d8-d9}
 80094ea:	eeb0 8a60 	vmov.f32	s16, s1
 80094ee:	eeb0 9a40 	vmov.f32	s18, s0
 80094f2:	f000 fe4d 	bl	800a190 <__ieee754_powf>
 80094f6:	eeb4 8a48 	vcmp.f32	s16, s16
 80094fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094fe:	eef0 8a40 	vmov.f32	s17, s0
 8009502:	d63e      	bvs.n	8009582 <powf+0x9e>
 8009504:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8009508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800950c:	d112      	bne.n	8009534 <powf+0x50>
 800950e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009516:	d039      	beq.n	800958c <powf+0xa8>
 8009518:	eeb0 0a48 	vmov.f32	s0, s16
 800951c:	f001 f9fd 	bl	800a91a <finitef>
 8009520:	b378      	cbz	r0, 8009582 <powf+0x9e>
 8009522:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800952a:	d52a      	bpl.n	8009582 <powf+0x9e>
 800952c:	f7ff fefe 	bl	800932c <__errno>
 8009530:	2322      	movs	r3, #34	; 0x22
 8009532:	e014      	b.n	800955e <powf+0x7a>
 8009534:	f001 f9f1 	bl	800a91a <finitef>
 8009538:	b998      	cbnz	r0, 8009562 <powf+0x7e>
 800953a:	eeb0 0a49 	vmov.f32	s0, s18
 800953e:	f001 f9ec 	bl	800a91a <finitef>
 8009542:	b170      	cbz	r0, 8009562 <powf+0x7e>
 8009544:	eeb0 0a48 	vmov.f32	s0, s16
 8009548:	f001 f9e7 	bl	800a91a <finitef>
 800954c:	b148      	cbz	r0, 8009562 <powf+0x7e>
 800954e:	eef4 8a68 	vcmp.f32	s17, s17
 8009552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009556:	d7e9      	bvc.n	800952c <powf+0x48>
 8009558:	f7ff fee8 	bl	800932c <__errno>
 800955c:	2321      	movs	r3, #33	; 0x21
 800955e:	6003      	str	r3, [r0, #0]
 8009560:	e00f      	b.n	8009582 <powf+0x9e>
 8009562:	eef5 8a40 	vcmp.f32	s17, #0.0
 8009566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800956a:	d10a      	bne.n	8009582 <powf+0x9e>
 800956c:	eeb0 0a49 	vmov.f32	s0, s18
 8009570:	f001 f9d3 	bl	800a91a <finitef>
 8009574:	b128      	cbz	r0, 8009582 <powf+0x9e>
 8009576:	eeb0 0a48 	vmov.f32	s0, s16
 800957a:	f001 f9ce 	bl	800a91a <finitef>
 800957e:	2800      	cmp	r0, #0
 8009580:	d1d4      	bne.n	800952c <powf+0x48>
 8009582:	eeb0 0a68 	vmov.f32	s0, s17
 8009586:	ecbd 8b04 	vpop	{d8-d9}
 800958a:	bd08      	pop	{r3, pc}
 800958c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8009590:	e7f7      	b.n	8009582 <powf+0x9e>
	...

08009594 <sqrtf>:
 8009594:	b508      	push	{r3, lr}
 8009596:	ed2d 8b02 	vpush	{d8}
 800959a:	eeb0 8a40 	vmov.f32	s16, s0
 800959e:	f001 f8c5 	bl	800a72c <__ieee754_sqrtf>
 80095a2:	eeb4 8a48 	vcmp.f32	s16, s16
 80095a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095aa:	d60c      	bvs.n	80095c6 <sqrtf+0x32>
 80095ac:	eddf 8a07 	vldr	s17, [pc, #28]	; 80095cc <sqrtf+0x38>
 80095b0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80095b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095b8:	d505      	bpl.n	80095c6 <sqrtf+0x32>
 80095ba:	f7ff feb7 	bl	800932c <__errno>
 80095be:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80095c2:	2321      	movs	r3, #33	; 0x21
 80095c4:	6003      	str	r3, [r0, #0]
 80095c6:	ecbd 8b02 	vpop	{d8}
 80095ca:	bd08      	pop	{r3, pc}
 80095cc:	00000000 	.word	0x00000000

080095d0 <__ieee754_pow>:
 80095d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d4:	ed2d 8b06 	vpush	{d8-d10}
 80095d8:	b089      	sub	sp, #36	; 0x24
 80095da:	ed8d 1b00 	vstr	d1, [sp]
 80095de:	e9dd 2900 	ldrd	r2, r9, [sp]
 80095e2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80095e6:	ea58 0102 	orrs.w	r1, r8, r2
 80095ea:	ec57 6b10 	vmov	r6, r7, d0
 80095ee:	d115      	bne.n	800961c <__ieee754_pow+0x4c>
 80095f0:	19b3      	adds	r3, r6, r6
 80095f2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80095f6:	4152      	adcs	r2, r2
 80095f8:	4299      	cmp	r1, r3
 80095fa:	4b89      	ldr	r3, [pc, #548]	; (8009820 <__ieee754_pow+0x250>)
 80095fc:	4193      	sbcs	r3, r2
 80095fe:	f080 84d2 	bcs.w	8009fa6 <__ieee754_pow+0x9d6>
 8009602:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009606:	4630      	mov	r0, r6
 8009608:	4639      	mov	r1, r7
 800960a:	f7f6 fdeb 	bl	80001e4 <__adddf3>
 800960e:	ec41 0b10 	vmov	d0, r0, r1
 8009612:	b009      	add	sp, #36	; 0x24
 8009614:	ecbd 8b06 	vpop	{d8-d10}
 8009618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800961c:	4b81      	ldr	r3, [pc, #516]	; (8009824 <__ieee754_pow+0x254>)
 800961e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009622:	429c      	cmp	r4, r3
 8009624:	ee10 aa10 	vmov	sl, s0
 8009628:	463d      	mov	r5, r7
 800962a:	dc06      	bgt.n	800963a <__ieee754_pow+0x6a>
 800962c:	d101      	bne.n	8009632 <__ieee754_pow+0x62>
 800962e:	2e00      	cmp	r6, #0
 8009630:	d1e7      	bne.n	8009602 <__ieee754_pow+0x32>
 8009632:	4598      	cmp	r8, r3
 8009634:	dc01      	bgt.n	800963a <__ieee754_pow+0x6a>
 8009636:	d10f      	bne.n	8009658 <__ieee754_pow+0x88>
 8009638:	b172      	cbz	r2, 8009658 <__ieee754_pow+0x88>
 800963a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800963e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009642:	ea55 050a 	orrs.w	r5, r5, sl
 8009646:	d1dc      	bne.n	8009602 <__ieee754_pow+0x32>
 8009648:	e9dd 3200 	ldrd	r3, r2, [sp]
 800964c:	18db      	adds	r3, r3, r3
 800964e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009652:	4152      	adcs	r2, r2
 8009654:	429d      	cmp	r5, r3
 8009656:	e7d0      	b.n	80095fa <__ieee754_pow+0x2a>
 8009658:	2d00      	cmp	r5, #0
 800965a:	da3b      	bge.n	80096d4 <__ieee754_pow+0x104>
 800965c:	4b72      	ldr	r3, [pc, #456]	; (8009828 <__ieee754_pow+0x258>)
 800965e:	4598      	cmp	r8, r3
 8009660:	dc51      	bgt.n	8009706 <__ieee754_pow+0x136>
 8009662:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009666:	4598      	cmp	r8, r3
 8009668:	f340 84ac 	ble.w	8009fc4 <__ieee754_pow+0x9f4>
 800966c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009670:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009674:	2b14      	cmp	r3, #20
 8009676:	dd0f      	ble.n	8009698 <__ieee754_pow+0xc8>
 8009678:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800967c:	fa22 f103 	lsr.w	r1, r2, r3
 8009680:	fa01 f303 	lsl.w	r3, r1, r3
 8009684:	4293      	cmp	r3, r2
 8009686:	f040 849d 	bne.w	8009fc4 <__ieee754_pow+0x9f4>
 800968a:	f001 0101 	and.w	r1, r1, #1
 800968e:	f1c1 0302 	rsb	r3, r1, #2
 8009692:	9304      	str	r3, [sp, #16]
 8009694:	b182      	cbz	r2, 80096b8 <__ieee754_pow+0xe8>
 8009696:	e05f      	b.n	8009758 <__ieee754_pow+0x188>
 8009698:	2a00      	cmp	r2, #0
 800969a:	d15b      	bne.n	8009754 <__ieee754_pow+0x184>
 800969c:	f1c3 0314 	rsb	r3, r3, #20
 80096a0:	fa48 f103 	asr.w	r1, r8, r3
 80096a4:	fa01 f303 	lsl.w	r3, r1, r3
 80096a8:	4543      	cmp	r3, r8
 80096aa:	f040 8488 	bne.w	8009fbe <__ieee754_pow+0x9ee>
 80096ae:	f001 0101 	and.w	r1, r1, #1
 80096b2:	f1c1 0302 	rsb	r3, r1, #2
 80096b6:	9304      	str	r3, [sp, #16]
 80096b8:	4b5c      	ldr	r3, [pc, #368]	; (800982c <__ieee754_pow+0x25c>)
 80096ba:	4598      	cmp	r8, r3
 80096bc:	d132      	bne.n	8009724 <__ieee754_pow+0x154>
 80096be:	f1b9 0f00 	cmp.w	r9, #0
 80096c2:	f280 8478 	bge.w	8009fb6 <__ieee754_pow+0x9e6>
 80096c6:	4959      	ldr	r1, [pc, #356]	; (800982c <__ieee754_pow+0x25c>)
 80096c8:	4632      	mov	r2, r6
 80096ca:	463b      	mov	r3, r7
 80096cc:	2000      	movs	r0, #0
 80096ce:	f7f7 f869 	bl	80007a4 <__aeabi_ddiv>
 80096d2:	e79c      	b.n	800960e <__ieee754_pow+0x3e>
 80096d4:	2300      	movs	r3, #0
 80096d6:	9304      	str	r3, [sp, #16]
 80096d8:	2a00      	cmp	r2, #0
 80096da:	d13d      	bne.n	8009758 <__ieee754_pow+0x188>
 80096dc:	4b51      	ldr	r3, [pc, #324]	; (8009824 <__ieee754_pow+0x254>)
 80096de:	4598      	cmp	r8, r3
 80096e0:	d1ea      	bne.n	80096b8 <__ieee754_pow+0xe8>
 80096e2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80096e6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80096ea:	ea53 030a 	orrs.w	r3, r3, sl
 80096ee:	f000 845a 	beq.w	8009fa6 <__ieee754_pow+0x9d6>
 80096f2:	4b4f      	ldr	r3, [pc, #316]	; (8009830 <__ieee754_pow+0x260>)
 80096f4:	429c      	cmp	r4, r3
 80096f6:	dd08      	ble.n	800970a <__ieee754_pow+0x13a>
 80096f8:	f1b9 0f00 	cmp.w	r9, #0
 80096fc:	f2c0 8457 	blt.w	8009fae <__ieee754_pow+0x9de>
 8009700:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009704:	e783      	b.n	800960e <__ieee754_pow+0x3e>
 8009706:	2302      	movs	r3, #2
 8009708:	e7e5      	b.n	80096d6 <__ieee754_pow+0x106>
 800970a:	f1b9 0f00 	cmp.w	r9, #0
 800970e:	f04f 0000 	mov.w	r0, #0
 8009712:	f04f 0100 	mov.w	r1, #0
 8009716:	f6bf af7a 	bge.w	800960e <__ieee754_pow+0x3e>
 800971a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800971e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009722:	e774      	b.n	800960e <__ieee754_pow+0x3e>
 8009724:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009728:	d106      	bne.n	8009738 <__ieee754_pow+0x168>
 800972a:	4632      	mov	r2, r6
 800972c:	463b      	mov	r3, r7
 800972e:	4630      	mov	r0, r6
 8009730:	4639      	mov	r1, r7
 8009732:	f7f6 ff0d 	bl	8000550 <__aeabi_dmul>
 8009736:	e76a      	b.n	800960e <__ieee754_pow+0x3e>
 8009738:	4b3e      	ldr	r3, [pc, #248]	; (8009834 <__ieee754_pow+0x264>)
 800973a:	4599      	cmp	r9, r3
 800973c:	d10c      	bne.n	8009758 <__ieee754_pow+0x188>
 800973e:	2d00      	cmp	r5, #0
 8009740:	db0a      	blt.n	8009758 <__ieee754_pow+0x188>
 8009742:	ec47 6b10 	vmov	d0, r6, r7
 8009746:	b009      	add	sp, #36	; 0x24
 8009748:	ecbd 8b06 	vpop	{d8-d10}
 800974c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009750:	f000 bc6c 	b.w	800a02c <__ieee754_sqrt>
 8009754:	2300      	movs	r3, #0
 8009756:	9304      	str	r3, [sp, #16]
 8009758:	ec47 6b10 	vmov	d0, r6, r7
 800975c:	f001 f83c 	bl	800a7d8 <fabs>
 8009760:	ec51 0b10 	vmov	r0, r1, d0
 8009764:	f1ba 0f00 	cmp.w	sl, #0
 8009768:	d129      	bne.n	80097be <__ieee754_pow+0x1ee>
 800976a:	b124      	cbz	r4, 8009776 <__ieee754_pow+0x1a6>
 800976c:	4b2f      	ldr	r3, [pc, #188]	; (800982c <__ieee754_pow+0x25c>)
 800976e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009772:	429a      	cmp	r2, r3
 8009774:	d123      	bne.n	80097be <__ieee754_pow+0x1ee>
 8009776:	f1b9 0f00 	cmp.w	r9, #0
 800977a:	da05      	bge.n	8009788 <__ieee754_pow+0x1b8>
 800977c:	4602      	mov	r2, r0
 800977e:	460b      	mov	r3, r1
 8009780:	2000      	movs	r0, #0
 8009782:	492a      	ldr	r1, [pc, #168]	; (800982c <__ieee754_pow+0x25c>)
 8009784:	f7f7 f80e 	bl	80007a4 <__aeabi_ddiv>
 8009788:	2d00      	cmp	r5, #0
 800978a:	f6bf af40 	bge.w	800960e <__ieee754_pow+0x3e>
 800978e:	9b04      	ldr	r3, [sp, #16]
 8009790:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009794:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009798:	4323      	orrs	r3, r4
 800979a:	d108      	bne.n	80097ae <__ieee754_pow+0x1de>
 800979c:	4602      	mov	r2, r0
 800979e:	460b      	mov	r3, r1
 80097a0:	4610      	mov	r0, r2
 80097a2:	4619      	mov	r1, r3
 80097a4:	f7f6 fd1c 	bl	80001e0 <__aeabi_dsub>
 80097a8:	4602      	mov	r2, r0
 80097aa:	460b      	mov	r3, r1
 80097ac:	e78f      	b.n	80096ce <__ieee754_pow+0xfe>
 80097ae:	9b04      	ldr	r3, [sp, #16]
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	f47f af2c 	bne.w	800960e <__ieee754_pow+0x3e>
 80097b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80097ba:	4619      	mov	r1, r3
 80097bc:	e727      	b.n	800960e <__ieee754_pow+0x3e>
 80097be:	0feb      	lsrs	r3, r5, #31
 80097c0:	3b01      	subs	r3, #1
 80097c2:	9306      	str	r3, [sp, #24]
 80097c4:	9a06      	ldr	r2, [sp, #24]
 80097c6:	9b04      	ldr	r3, [sp, #16]
 80097c8:	4313      	orrs	r3, r2
 80097ca:	d102      	bne.n	80097d2 <__ieee754_pow+0x202>
 80097cc:	4632      	mov	r2, r6
 80097ce:	463b      	mov	r3, r7
 80097d0:	e7e6      	b.n	80097a0 <__ieee754_pow+0x1d0>
 80097d2:	4b19      	ldr	r3, [pc, #100]	; (8009838 <__ieee754_pow+0x268>)
 80097d4:	4598      	cmp	r8, r3
 80097d6:	f340 80fb 	ble.w	80099d0 <__ieee754_pow+0x400>
 80097da:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80097de:	4598      	cmp	r8, r3
 80097e0:	4b13      	ldr	r3, [pc, #76]	; (8009830 <__ieee754_pow+0x260>)
 80097e2:	dd0c      	ble.n	80097fe <__ieee754_pow+0x22e>
 80097e4:	429c      	cmp	r4, r3
 80097e6:	dc0f      	bgt.n	8009808 <__ieee754_pow+0x238>
 80097e8:	f1b9 0f00 	cmp.w	r9, #0
 80097ec:	da0f      	bge.n	800980e <__ieee754_pow+0x23e>
 80097ee:	2000      	movs	r0, #0
 80097f0:	b009      	add	sp, #36	; 0x24
 80097f2:	ecbd 8b06 	vpop	{d8-d10}
 80097f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097fa:	f000 bfc1 	b.w	800a780 <__math_oflow>
 80097fe:	429c      	cmp	r4, r3
 8009800:	dbf2      	blt.n	80097e8 <__ieee754_pow+0x218>
 8009802:	4b0a      	ldr	r3, [pc, #40]	; (800982c <__ieee754_pow+0x25c>)
 8009804:	429c      	cmp	r4, r3
 8009806:	dd19      	ble.n	800983c <__ieee754_pow+0x26c>
 8009808:	f1b9 0f00 	cmp.w	r9, #0
 800980c:	dcef      	bgt.n	80097ee <__ieee754_pow+0x21e>
 800980e:	2000      	movs	r0, #0
 8009810:	b009      	add	sp, #36	; 0x24
 8009812:	ecbd 8b06 	vpop	{d8-d10}
 8009816:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800981a:	f000 bfa8 	b.w	800a76e <__math_uflow>
 800981e:	bf00      	nop
 8009820:	fff00000 	.word	0xfff00000
 8009824:	7ff00000 	.word	0x7ff00000
 8009828:	433fffff 	.word	0x433fffff
 800982c:	3ff00000 	.word	0x3ff00000
 8009830:	3fefffff 	.word	0x3fefffff
 8009834:	3fe00000 	.word	0x3fe00000
 8009838:	41e00000 	.word	0x41e00000
 800983c:	4b60      	ldr	r3, [pc, #384]	; (80099c0 <__ieee754_pow+0x3f0>)
 800983e:	2200      	movs	r2, #0
 8009840:	f7f6 fcce 	bl	80001e0 <__aeabi_dsub>
 8009844:	a354      	add	r3, pc, #336	; (adr r3, 8009998 <__ieee754_pow+0x3c8>)
 8009846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984a:	4604      	mov	r4, r0
 800984c:	460d      	mov	r5, r1
 800984e:	f7f6 fe7f 	bl	8000550 <__aeabi_dmul>
 8009852:	a353      	add	r3, pc, #332	; (adr r3, 80099a0 <__ieee754_pow+0x3d0>)
 8009854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009858:	4606      	mov	r6, r0
 800985a:	460f      	mov	r7, r1
 800985c:	4620      	mov	r0, r4
 800985e:	4629      	mov	r1, r5
 8009860:	f7f6 fe76 	bl	8000550 <__aeabi_dmul>
 8009864:	4b57      	ldr	r3, [pc, #348]	; (80099c4 <__ieee754_pow+0x3f4>)
 8009866:	4682      	mov	sl, r0
 8009868:	468b      	mov	fp, r1
 800986a:	2200      	movs	r2, #0
 800986c:	4620      	mov	r0, r4
 800986e:	4629      	mov	r1, r5
 8009870:	f7f6 fe6e 	bl	8000550 <__aeabi_dmul>
 8009874:	4602      	mov	r2, r0
 8009876:	460b      	mov	r3, r1
 8009878:	a14b      	add	r1, pc, #300	; (adr r1, 80099a8 <__ieee754_pow+0x3d8>)
 800987a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800987e:	f7f6 fcaf 	bl	80001e0 <__aeabi_dsub>
 8009882:	4622      	mov	r2, r4
 8009884:	462b      	mov	r3, r5
 8009886:	f7f6 fe63 	bl	8000550 <__aeabi_dmul>
 800988a:	4602      	mov	r2, r0
 800988c:	460b      	mov	r3, r1
 800988e:	2000      	movs	r0, #0
 8009890:	494d      	ldr	r1, [pc, #308]	; (80099c8 <__ieee754_pow+0x3f8>)
 8009892:	f7f6 fca5 	bl	80001e0 <__aeabi_dsub>
 8009896:	4622      	mov	r2, r4
 8009898:	4680      	mov	r8, r0
 800989a:	4689      	mov	r9, r1
 800989c:	462b      	mov	r3, r5
 800989e:	4620      	mov	r0, r4
 80098a0:	4629      	mov	r1, r5
 80098a2:	f7f6 fe55 	bl	8000550 <__aeabi_dmul>
 80098a6:	4602      	mov	r2, r0
 80098a8:	460b      	mov	r3, r1
 80098aa:	4640      	mov	r0, r8
 80098ac:	4649      	mov	r1, r9
 80098ae:	f7f6 fe4f 	bl	8000550 <__aeabi_dmul>
 80098b2:	a33f      	add	r3, pc, #252	; (adr r3, 80099b0 <__ieee754_pow+0x3e0>)
 80098b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b8:	f7f6 fe4a 	bl	8000550 <__aeabi_dmul>
 80098bc:	4602      	mov	r2, r0
 80098be:	460b      	mov	r3, r1
 80098c0:	4650      	mov	r0, sl
 80098c2:	4659      	mov	r1, fp
 80098c4:	f7f6 fc8c 	bl	80001e0 <__aeabi_dsub>
 80098c8:	4602      	mov	r2, r0
 80098ca:	460b      	mov	r3, r1
 80098cc:	4680      	mov	r8, r0
 80098ce:	4689      	mov	r9, r1
 80098d0:	4630      	mov	r0, r6
 80098d2:	4639      	mov	r1, r7
 80098d4:	f7f6 fc86 	bl	80001e4 <__adddf3>
 80098d8:	2000      	movs	r0, #0
 80098da:	4632      	mov	r2, r6
 80098dc:	463b      	mov	r3, r7
 80098de:	4604      	mov	r4, r0
 80098e0:	460d      	mov	r5, r1
 80098e2:	f7f6 fc7d 	bl	80001e0 <__aeabi_dsub>
 80098e6:	4602      	mov	r2, r0
 80098e8:	460b      	mov	r3, r1
 80098ea:	4640      	mov	r0, r8
 80098ec:	4649      	mov	r1, r9
 80098ee:	f7f6 fc77 	bl	80001e0 <__aeabi_dsub>
 80098f2:	9b04      	ldr	r3, [sp, #16]
 80098f4:	9a06      	ldr	r2, [sp, #24]
 80098f6:	3b01      	subs	r3, #1
 80098f8:	4313      	orrs	r3, r2
 80098fa:	4682      	mov	sl, r0
 80098fc:	468b      	mov	fp, r1
 80098fe:	f040 81e7 	bne.w	8009cd0 <__ieee754_pow+0x700>
 8009902:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80099b8 <__ieee754_pow+0x3e8>
 8009906:	eeb0 8a47 	vmov.f32	s16, s14
 800990a:	eef0 8a67 	vmov.f32	s17, s15
 800990e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009912:	2600      	movs	r6, #0
 8009914:	4632      	mov	r2, r6
 8009916:	463b      	mov	r3, r7
 8009918:	e9dd 0100 	ldrd	r0, r1, [sp]
 800991c:	f7f6 fc60 	bl	80001e0 <__aeabi_dsub>
 8009920:	4622      	mov	r2, r4
 8009922:	462b      	mov	r3, r5
 8009924:	f7f6 fe14 	bl	8000550 <__aeabi_dmul>
 8009928:	e9dd 2300 	ldrd	r2, r3, [sp]
 800992c:	4680      	mov	r8, r0
 800992e:	4689      	mov	r9, r1
 8009930:	4650      	mov	r0, sl
 8009932:	4659      	mov	r1, fp
 8009934:	f7f6 fe0c 	bl	8000550 <__aeabi_dmul>
 8009938:	4602      	mov	r2, r0
 800993a:	460b      	mov	r3, r1
 800993c:	4640      	mov	r0, r8
 800993e:	4649      	mov	r1, r9
 8009940:	f7f6 fc50 	bl	80001e4 <__adddf3>
 8009944:	4632      	mov	r2, r6
 8009946:	463b      	mov	r3, r7
 8009948:	4680      	mov	r8, r0
 800994a:	4689      	mov	r9, r1
 800994c:	4620      	mov	r0, r4
 800994e:	4629      	mov	r1, r5
 8009950:	f7f6 fdfe 	bl	8000550 <__aeabi_dmul>
 8009954:	460b      	mov	r3, r1
 8009956:	4604      	mov	r4, r0
 8009958:	460d      	mov	r5, r1
 800995a:	4602      	mov	r2, r0
 800995c:	4649      	mov	r1, r9
 800995e:	4640      	mov	r0, r8
 8009960:	f7f6 fc40 	bl	80001e4 <__adddf3>
 8009964:	4b19      	ldr	r3, [pc, #100]	; (80099cc <__ieee754_pow+0x3fc>)
 8009966:	4299      	cmp	r1, r3
 8009968:	ec45 4b19 	vmov	d9, r4, r5
 800996c:	4606      	mov	r6, r0
 800996e:	460f      	mov	r7, r1
 8009970:	468b      	mov	fp, r1
 8009972:	f340 82f1 	ble.w	8009f58 <__ieee754_pow+0x988>
 8009976:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800997a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800997e:	4303      	orrs	r3, r0
 8009980:	f000 81e4 	beq.w	8009d4c <__ieee754_pow+0x77c>
 8009984:	ec51 0b18 	vmov	r0, r1, d8
 8009988:	2200      	movs	r2, #0
 800998a:	2300      	movs	r3, #0
 800998c:	f7f7 f852 	bl	8000a34 <__aeabi_dcmplt>
 8009990:	3800      	subs	r0, #0
 8009992:	bf18      	it	ne
 8009994:	2001      	movne	r0, #1
 8009996:	e72b      	b.n	80097f0 <__ieee754_pow+0x220>
 8009998:	60000000 	.word	0x60000000
 800999c:	3ff71547 	.word	0x3ff71547
 80099a0:	f85ddf44 	.word	0xf85ddf44
 80099a4:	3e54ae0b 	.word	0x3e54ae0b
 80099a8:	55555555 	.word	0x55555555
 80099ac:	3fd55555 	.word	0x3fd55555
 80099b0:	652b82fe 	.word	0x652b82fe
 80099b4:	3ff71547 	.word	0x3ff71547
 80099b8:	00000000 	.word	0x00000000
 80099bc:	bff00000 	.word	0xbff00000
 80099c0:	3ff00000 	.word	0x3ff00000
 80099c4:	3fd00000 	.word	0x3fd00000
 80099c8:	3fe00000 	.word	0x3fe00000
 80099cc:	408fffff 	.word	0x408fffff
 80099d0:	4bd5      	ldr	r3, [pc, #852]	; (8009d28 <__ieee754_pow+0x758>)
 80099d2:	402b      	ands	r3, r5
 80099d4:	2200      	movs	r2, #0
 80099d6:	b92b      	cbnz	r3, 80099e4 <__ieee754_pow+0x414>
 80099d8:	4bd4      	ldr	r3, [pc, #848]	; (8009d2c <__ieee754_pow+0x75c>)
 80099da:	f7f6 fdb9 	bl	8000550 <__aeabi_dmul>
 80099de:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80099e2:	460c      	mov	r4, r1
 80099e4:	1523      	asrs	r3, r4, #20
 80099e6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80099ea:	4413      	add	r3, r2
 80099ec:	9305      	str	r3, [sp, #20]
 80099ee:	4bd0      	ldr	r3, [pc, #832]	; (8009d30 <__ieee754_pow+0x760>)
 80099f0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80099f4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80099f8:	429c      	cmp	r4, r3
 80099fa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80099fe:	dd08      	ble.n	8009a12 <__ieee754_pow+0x442>
 8009a00:	4bcc      	ldr	r3, [pc, #816]	; (8009d34 <__ieee754_pow+0x764>)
 8009a02:	429c      	cmp	r4, r3
 8009a04:	f340 8162 	ble.w	8009ccc <__ieee754_pow+0x6fc>
 8009a08:	9b05      	ldr	r3, [sp, #20]
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	9305      	str	r3, [sp, #20]
 8009a0e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009a12:	2400      	movs	r4, #0
 8009a14:	00e3      	lsls	r3, r4, #3
 8009a16:	9307      	str	r3, [sp, #28]
 8009a18:	4bc7      	ldr	r3, [pc, #796]	; (8009d38 <__ieee754_pow+0x768>)
 8009a1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009a1e:	ed93 7b00 	vldr	d7, [r3]
 8009a22:	4629      	mov	r1, r5
 8009a24:	ec53 2b17 	vmov	r2, r3, d7
 8009a28:	eeb0 9a47 	vmov.f32	s18, s14
 8009a2c:	eef0 9a67 	vmov.f32	s19, s15
 8009a30:	4682      	mov	sl, r0
 8009a32:	f7f6 fbd5 	bl	80001e0 <__aeabi_dsub>
 8009a36:	4652      	mov	r2, sl
 8009a38:	4606      	mov	r6, r0
 8009a3a:	460f      	mov	r7, r1
 8009a3c:	462b      	mov	r3, r5
 8009a3e:	ec51 0b19 	vmov	r0, r1, d9
 8009a42:	f7f6 fbcf 	bl	80001e4 <__adddf3>
 8009a46:	4602      	mov	r2, r0
 8009a48:	460b      	mov	r3, r1
 8009a4a:	2000      	movs	r0, #0
 8009a4c:	49bb      	ldr	r1, [pc, #748]	; (8009d3c <__ieee754_pow+0x76c>)
 8009a4e:	f7f6 fea9 	bl	80007a4 <__aeabi_ddiv>
 8009a52:	ec41 0b1a 	vmov	d10, r0, r1
 8009a56:	4602      	mov	r2, r0
 8009a58:	460b      	mov	r3, r1
 8009a5a:	4630      	mov	r0, r6
 8009a5c:	4639      	mov	r1, r7
 8009a5e:	f7f6 fd77 	bl	8000550 <__aeabi_dmul>
 8009a62:	2300      	movs	r3, #0
 8009a64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a68:	9302      	str	r3, [sp, #8]
 8009a6a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009a6e:	46ab      	mov	fp, r5
 8009a70:	106d      	asrs	r5, r5, #1
 8009a72:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009a76:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009a7a:	ec41 0b18 	vmov	d8, r0, r1
 8009a7e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009a82:	2200      	movs	r2, #0
 8009a84:	4640      	mov	r0, r8
 8009a86:	4649      	mov	r1, r9
 8009a88:	4614      	mov	r4, r2
 8009a8a:	461d      	mov	r5, r3
 8009a8c:	f7f6 fd60 	bl	8000550 <__aeabi_dmul>
 8009a90:	4602      	mov	r2, r0
 8009a92:	460b      	mov	r3, r1
 8009a94:	4630      	mov	r0, r6
 8009a96:	4639      	mov	r1, r7
 8009a98:	f7f6 fba2 	bl	80001e0 <__aeabi_dsub>
 8009a9c:	ec53 2b19 	vmov	r2, r3, d9
 8009aa0:	4606      	mov	r6, r0
 8009aa2:	460f      	mov	r7, r1
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	4629      	mov	r1, r5
 8009aa8:	f7f6 fb9a 	bl	80001e0 <__aeabi_dsub>
 8009aac:	4602      	mov	r2, r0
 8009aae:	460b      	mov	r3, r1
 8009ab0:	4650      	mov	r0, sl
 8009ab2:	4659      	mov	r1, fp
 8009ab4:	f7f6 fb94 	bl	80001e0 <__aeabi_dsub>
 8009ab8:	4642      	mov	r2, r8
 8009aba:	464b      	mov	r3, r9
 8009abc:	f7f6 fd48 	bl	8000550 <__aeabi_dmul>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	460b      	mov	r3, r1
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	4639      	mov	r1, r7
 8009ac8:	f7f6 fb8a 	bl	80001e0 <__aeabi_dsub>
 8009acc:	ec53 2b1a 	vmov	r2, r3, d10
 8009ad0:	f7f6 fd3e 	bl	8000550 <__aeabi_dmul>
 8009ad4:	ec53 2b18 	vmov	r2, r3, d8
 8009ad8:	ec41 0b19 	vmov	d9, r0, r1
 8009adc:	ec51 0b18 	vmov	r0, r1, d8
 8009ae0:	f7f6 fd36 	bl	8000550 <__aeabi_dmul>
 8009ae4:	a37c      	add	r3, pc, #496	; (adr r3, 8009cd8 <__ieee754_pow+0x708>)
 8009ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aea:	4604      	mov	r4, r0
 8009aec:	460d      	mov	r5, r1
 8009aee:	f7f6 fd2f 	bl	8000550 <__aeabi_dmul>
 8009af2:	a37b      	add	r3, pc, #492	; (adr r3, 8009ce0 <__ieee754_pow+0x710>)
 8009af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af8:	f7f6 fb74 	bl	80001e4 <__adddf3>
 8009afc:	4622      	mov	r2, r4
 8009afe:	462b      	mov	r3, r5
 8009b00:	f7f6 fd26 	bl	8000550 <__aeabi_dmul>
 8009b04:	a378      	add	r3, pc, #480	; (adr r3, 8009ce8 <__ieee754_pow+0x718>)
 8009b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0a:	f7f6 fb6b 	bl	80001e4 <__adddf3>
 8009b0e:	4622      	mov	r2, r4
 8009b10:	462b      	mov	r3, r5
 8009b12:	f7f6 fd1d 	bl	8000550 <__aeabi_dmul>
 8009b16:	a376      	add	r3, pc, #472	; (adr r3, 8009cf0 <__ieee754_pow+0x720>)
 8009b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1c:	f7f6 fb62 	bl	80001e4 <__adddf3>
 8009b20:	4622      	mov	r2, r4
 8009b22:	462b      	mov	r3, r5
 8009b24:	f7f6 fd14 	bl	8000550 <__aeabi_dmul>
 8009b28:	a373      	add	r3, pc, #460	; (adr r3, 8009cf8 <__ieee754_pow+0x728>)
 8009b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2e:	f7f6 fb59 	bl	80001e4 <__adddf3>
 8009b32:	4622      	mov	r2, r4
 8009b34:	462b      	mov	r3, r5
 8009b36:	f7f6 fd0b 	bl	8000550 <__aeabi_dmul>
 8009b3a:	a371      	add	r3, pc, #452	; (adr r3, 8009d00 <__ieee754_pow+0x730>)
 8009b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b40:	f7f6 fb50 	bl	80001e4 <__adddf3>
 8009b44:	4622      	mov	r2, r4
 8009b46:	4606      	mov	r6, r0
 8009b48:	460f      	mov	r7, r1
 8009b4a:	462b      	mov	r3, r5
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	4629      	mov	r1, r5
 8009b50:	f7f6 fcfe 	bl	8000550 <__aeabi_dmul>
 8009b54:	4602      	mov	r2, r0
 8009b56:	460b      	mov	r3, r1
 8009b58:	4630      	mov	r0, r6
 8009b5a:	4639      	mov	r1, r7
 8009b5c:	f7f6 fcf8 	bl	8000550 <__aeabi_dmul>
 8009b60:	4642      	mov	r2, r8
 8009b62:	4604      	mov	r4, r0
 8009b64:	460d      	mov	r5, r1
 8009b66:	464b      	mov	r3, r9
 8009b68:	ec51 0b18 	vmov	r0, r1, d8
 8009b6c:	f7f6 fb3a 	bl	80001e4 <__adddf3>
 8009b70:	ec53 2b19 	vmov	r2, r3, d9
 8009b74:	f7f6 fcec 	bl	8000550 <__aeabi_dmul>
 8009b78:	4622      	mov	r2, r4
 8009b7a:	462b      	mov	r3, r5
 8009b7c:	f7f6 fb32 	bl	80001e4 <__adddf3>
 8009b80:	4642      	mov	r2, r8
 8009b82:	4682      	mov	sl, r0
 8009b84:	468b      	mov	fp, r1
 8009b86:	464b      	mov	r3, r9
 8009b88:	4640      	mov	r0, r8
 8009b8a:	4649      	mov	r1, r9
 8009b8c:	f7f6 fce0 	bl	8000550 <__aeabi_dmul>
 8009b90:	4b6b      	ldr	r3, [pc, #428]	; (8009d40 <__ieee754_pow+0x770>)
 8009b92:	2200      	movs	r2, #0
 8009b94:	4606      	mov	r6, r0
 8009b96:	460f      	mov	r7, r1
 8009b98:	f7f6 fb24 	bl	80001e4 <__adddf3>
 8009b9c:	4652      	mov	r2, sl
 8009b9e:	465b      	mov	r3, fp
 8009ba0:	f7f6 fb20 	bl	80001e4 <__adddf3>
 8009ba4:	2000      	movs	r0, #0
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	460d      	mov	r5, r1
 8009baa:	4602      	mov	r2, r0
 8009bac:	460b      	mov	r3, r1
 8009bae:	4640      	mov	r0, r8
 8009bb0:	4649      	mov	r1, r9
 8009bb2:	f7f6 fccd 	bl	8000550 <__aeabi_dmul>
 8009bb6:	4b62      	ldr	r3, [pc, #392]	; (8009d40 <__ieee754_pow+0x770>)
 8009bb8:	4680      	mov	r8, r0
 8009bba:	4689      	mov	r9, r1
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	4620      	mov	r0, r4
 8009bc0:	4629      	mov	r1, r5
 8009bc2:	f7f6 fb0d 	bl	80001e0 <__aeabi_dsub>
 8009bc6:	4632      	mov	r2, r6
 8009bc8:	463b      	mov	r3, r7
 8009bca:	f7f6 fb09 	bl	80001e0 <__aeabi_dsub>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	4650      	mov	r0, sl
 8009bd4:	4659      	mov	r1, fp
 8009bd6:	f7f6 fb03 	bl	80001e0 <__aeabi_dsub>
 8009bda:	ec53 2b18 	vmov	r2, r3, d8
 8009bde:	f7f6 fcb7 	bl	8000550 <__aeabi_dmul>
 8009be2:	4622      	mov	r2, r4
 8009be4:	4606      	mov	r6, r0
 8009be6:	460f      	mov	r7, r1
 8009be8:	462b      	mov	r3, r5
 8009bea:	ec51 0b19 	vmov	r0, r1, d9
 8009bee:	f7f6 fcaf 	bl	8000550 <__aeabi_dmul>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	4630      	mov	r0, r6
 8009bf8:	4639      	mov	r1, r7
 8009bfa:	f7f6 faf3 	bl	80001e4 <__adddf3>
 8009bfe:	4606      	mov	r6, r0
 8009c00:	460f      	mov	r7, r1
 8009c02:	4602      	mov	r2, r0
 8009c04:	460b      	mov	r3, r1
 8009c06:	4640      	mov	r0, r8
 8009c08:	4649      	mov	r1, r9
 8009c0a:	f7f6 faeb 	bl	80001e4 <__adddf3>
 8009c0e:	a33e      	add	r3, pc, #248	; (adr r3, 8009d08 <__ieee754_pow+0x738>)
 8009c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c14:	2000      	movs	r0, #0
 8009c16:	4604      	mov	r4, r0
 8009c18:	460d      	mov	r5, r1
 8009c1a:	f7f6 fc99 	bl	8000550 <__aeabi_dmul>
 8009c1e:	4642      	mov	r2, r8
 8009c20:	ec41 0b18 	vmov	d8, r0, r1
 8009c24:	464b      	mov	r3, r9
 8009c26:	4620      	mov	r0, r4
 8009c28:	4629      	mov	r1, r5
 8009c2a:	f7f6 fad9 	bl	80001e0 <__aeabi_dsub>
 8009c2e:	4602      	mov	r2, r0
 8009c30:	460b      	mov	r3, r1
 8009c32:	4630      	mov	r0, r6
 8009c34:	4639      	mov	r1, r7
 8009c36:	f7f6 fad3 	bl	80001e0 <__aeabi_dsub>
 8009c3a:	a335      	add	r3, pc, #212	; (adr r3, 8009d10 <__ieee754_pow+0x740>)
 8009c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c40:	f7f6 fc86 	bl	8000550 <__aeabi_dmul>
 8009c44:	a334      	add	r3, pc, #208	; (adr r3, 8009d18 <__ieee754_pow+0x748>)
 8009c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4a:	4606      	mov	r6, r0
 8009c4c:	460f      	mov	r7, r1
 8009c4e:	4620      	mov	r0, r4
 8009c50:	4629      	mov	r1, r5
 8009c52:	f7f6 fc7d 	bl	8000550 <__aeabi_dmul>
 8009c56:	4602      	mov	r2, r0
 8009c58:	460b      	mov	r3, r1
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	4639      	mov	r1, r7
 8009c5e:	f7f6 fac1 	bl	80001e4 <__adddf3>
 8009c62:	9a07      	ldr	r2, [sp, #28]
 8009c64:	4b37      	ldr	r3, [pc, #220]	; (8009d44 <__ieee754_pow+0x774>)
 8009c66:	4413      	add	r3, r2
 8009c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6c:	f7f6 faba 	bl	80001e4 <__adddf3>
 8009c70:	4682      	mov	sl, r0
 8009c72:	9805      	ldr	r0, [sp, #20]
 8009c74:	468b      	mov	fp, r1
 8009c76:	f7f6 fc01 	bl	800047c <__aeabi_i2d>
 8009c7a:	9a07      	ldr	r2, [sp, #28]
 8009c7c:	4b32      	ldr	r3, [pc, #200]	; (8009d48 <__ieee754_pow+0x778>)
 8009c7e:	4413      	add	r3, r2
 8009c80:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c84:	4606      	mov	r6, r0
 8009c86:	460f      	mov	r7, r1
 8009c88:	4652      	mov	r2, sl
 8009c8a:	465b      	mov	r3, fp
 8009c8c:	ec51 0b18 	vmov	r0, r1, d8
 8009c90:	f7f6 faa8 	bl	80001e4 <__adddf3>
 8009c94:	4642      	mov	r2, r8
 8009c96:	464b      	mov	r3, r9
 8009c98:	f7f6 faa4 	bl	80001e4 <__adddf3>
 8009c9c:	4632      	mov	r2, r6
 8009c9e:	463b      	mov	r3, r7
 8009ca0:	f7f6 faa0 	bl	80001e4 <__adddf3>
 8009ca4:	2000      	movs	r0, #0
 8009ca6:	4632      	mov	r2, r6
 8009ca8:	463b      	mov	r3, r7
 8009caa:	4604      	mov	r4, r0
 8009cac:	460d      	mov	r5, r1
 8009cae:	f7f6 fa97 	bl	80001e0 <__aeabi_dsub>
 8009cb2:	4642      	mov	r2, r8
 8009cb4:	464b      	mov	r3, r9
 8009cb6:	f7f6 fa93 	bl	80001e0 <__aeabi_dsub>
 8009cba:	ec53 2b18 	vmov	r2, r3, d8
 8009cbe:	f7f6 fa8f 	bl	80001e0 <__aeabi_dsub>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	4650      	mov	r0, sl
 8009cc8:	4659      	mov	r1, fp
 8009cca:	e610      	b.n	80098ee <__ieee754_pow+0x31e>
 8009ccc:	2401      	movs	r4, #1
 8009cce:	e6a1      	b.n	8009a14 <__ieee754_pow+0x444>
 8009cd0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009d20 <__ieee754_pow+0x750>
 8009cd4:	e617      	b.n	8009906 <__ieee754_pow+0x336>
 8009cd6:	bf00      	nop
 8009cd8:	4a454eef 	.word	0x4a454eef
 8009cdc:	3fca7e28 	.word	0x3fca7e28
 8009ce0:	93c9db65 	.word	0x93c9db65
 8009ce4:	3fcd864a 	.word	0x3fcd864a
 8009ce8:	a91d4101 	.word	0xa91d4101
 8009cec:	3fd17460 	.word	0x3fd17460
 8009cf0:	518f264d 	.word	0x518f264d
 8009cf4:	3fd55555 	.word	0x3fd55555
 8009cf8:	db6fabff 	.word	0xdb6fabff
 8009cfc:	3fdb6db6 	.word	0x3fdb6db6
 8009d00:	33333303 	.word	0x33333303
 8009d04:	3fe33333 	.word	0x3fe33333
 8009d08:	e0000000 	.word	0xe0000000
 8009d0c:	3feec709 	.word	0x3feec709
 8009d10:	dc3a03fd 	.word	0xdc3a03fd
 8009d14:	3feec709 	.word	0x3feec709
 8009d18:	145b01f5 	.word	0x145b01f5
 8009d1c:	be3e2fe0 	.word	0xbe3e2fe0
 8009d20:	00000000 	.word	0x00000000
 8009d24:	3ff00000 	.word	0x3ff00000
 8009d28:	7ff00000 	.word	0x7ff00000
 8009d2c:	43400000 	.word	0x43400000
 8009d30:	0003988e 	.word	0x0003988e
 8009d34:	000bb679 	.word	0x000bb679
 8009d38:	0800b2f8 	.word	0x0800b2f8
 8009d3c:	3ff00000 	.word	0x3ff00000
 8009d40:	40080000 	.word	0x40080000
 8009d44:	0800b318 	.word	0x0800b318
 8009d48:	0800b308 	.word	0x0800b308
 8009d4c:	a3b5      	add	r3, pc, #724	; (adr r3, 800a024 <__ieee754_pow+0xa54>)
 8009d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d52:	4640      	mov	r0, r8
 8009d54:	4649      	mov	r1, r9
 8009d56:	f7f6 fa45 	bl	80001e4 <__adddf3>
 8009d5a:	4622      	mov	r2, r4
 8009d5c:	ec41 0b1a 	vmov	d10, r0, r1
 8009d60:	462b      	mov	r3, r5
 8009d62:	4630      	mov	r0, r6
 8009d64:	4639      	mov	r1, r7
 8009d66:	f7f6 fa3b 	bl	80001e0 <__aeabi_dsub>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	ec51 0b1a 	vmov	r0, r1, d10
 8009d72:	f7f6 fe7d 	bl	8000a70 <__aeabi_dcmpgt>
 8009d76:	2800      	cmp	r0, #0
 8009d78:	f47f ae04 	bne.w	8009984 <__ieee754_pow+0x3b4>
 8009d7c:	4aa4      	ldr	r2, [pc, #656]	; (800a010 <__ieee754_pow+0xa40>)
 8009d7e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d82:	4293      	cmp	r3, r2
 8009d84:	f340 8108 	ble.w	8009f98 <__ieee754_pow+0x9c8>
 8009d88:	151b      	asrs	r3, r3, #20
 8009d8a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009d8e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009d92:	fa4a f303 	asr.w	r3, sl, r3
 8009d96:	445b      	add	r3, fp
 8009d98:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009d9c:	4e9d      	ldr	r6, [pc, #628]	; (800a014 <__ieee754_pow+0xa44>)
 8009d9e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009da2:	4116      	asrs	r6, r2
 8009da4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009da8:	2000      	movs	r0, #0
 8009daa:	ea23 0106 	bic.w	r1, r3, r6
 8009dae:	f1c2 0214 	rsb	r2, r2, #20
 8009db2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009db6:	fa4a fa02 	asr.w	sl, sl, r2
 8009dba:	f1bb 0f00 	cmp.w	fp, #0
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	4629      	mov	r1, r5
 8009dc6:	bfb8      	it	lt
 8009dc8:	f1ca 0a00 	rsblt	sl, sl, #0
 8009dcc:	f7f6 fa08 	bl	80001e0 <__aeabi_dsub>
 8009dd0:	ec41 0b19 	vmov	d9, r0, r1
 8009dd4:	4642      	mov	r2, r8
 8009dd6:	464b      	mov	r3, r9
 8009dd8:	ec51 0b19 	vmov	r0, r1, d9
 8009ddc:	f7f6 fa02 	bl	80001e4 <__adddf3>
 8009de0:	a37b      	add	r3, pc, #492	; (adr r3, 8009fd0 <__ieee754_pow+0xa00>)
 8009de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de6:	2000      	movs	r0, #0
 8009de8:	4604      	mov	r4, r0
 8009dea:	460d      	mov	r5, r1
 8009dec:	f7f6 fbb0 	bl	8000550 <__aeabi_dmul>
 8009df0:	ec53 2b19 	vmov	r2, r3, d9
 8009df4:	4606      	mov	r6, r0
 8009df6:	460f      	mov	r7, r1
 8009df8:	4620      	mov	r0, r4
 8009dfa:	4629      	mov	r1, r5
 8009dfc:	f7f6 f9f0 	bl	80001e0 <__aeabi_dsub>
 8009e00:	4602      	mov	r2, r0
 8009e02:	460b      	mov	r3, r1
 8009e04:	4640      	mov	r0, r8
 8009e06:	4649      	mov	r1, r9
 8009e08:	f7f6 f9ea 	bl	80001e0 <__aeabi_dsub>
 8009e0c:	a372      	add	r3, pc, #456	; (adr r3, 8009fd8 <__ieee754_pow+0xa08>)
 8009e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e12:	f7f6 fb9d 	bl	8000550 <__aeabi_dmul>
 8009e16:	a372      	add	r3, pc, #456	; (adr r3, 8009fe0 <__ieee754_pow+0xa10>)
 8009e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1c:	4680      	mov	r8, r0
 8009e1e:	4689      	mov	r9, r1
 8009e20:	4620      	mov	r0, r4
 8009e22:	4629      	mov	r1, r5
 8009e24:	f7f6 fb94 	bl	8000550 <__aeabi_dmul>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	4640      	mov	r0, r8
 8009e2e:	4649      	mov	r1, r9
 8009e30:	f7f6 f9d8 	bl	80001e4 <__adddf3>
 8009e34:	4604      	mov	r4, r0
 8009e36:	460d      	mov	r5, r1
 8009e38:	4602      	mov	r2, r0
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	4630      	mov	r0, r6
 8009e3e:	4639      	mov	r1, r7
 8009e40:	f7f6 f9d0 	bl	80001e4 <__adddf3>
 8009e44:	4632      	mov	r2, r6
 8009e46:	463b      	mov	r3, r7
 8009e48:	4680      	mov	r8, r0
 8009e4a:	4689      	mov	r9, r1
 8009e4c:	f7f6 f9c8 	bl	80001e0 <__aeabi_dsub>
 8009e50:	4602      	mov	r2, r0
 8009e52:	460b      	mov	r3, r1
 8009e54:	4620      	mov	r0, r4
 8009e56:	4629      	mov	r1, r5
 8009e58:	f7f6 f9c2 	bl	80001e0 <__aeabi_dsub>
 8009e5c:	4642      	mov	r2, r8
 8009e5e:	4606      	mov	r6, r0
 8009e60:	460f      	mov	r7, r1
 8009e62:	464b      	mov	r3, r9
 8009e64:	4640      	mov	r0, r8
 8009e66:	4649      	mov	r1, r9
 8009e68:	f7f6 fb72 	bl	8000550 <__aeabi_dmul>
 8009e6c:	a35e      	add	r3, pc, #376	; (adr r3, 8009fe8 <__ieee754_pow+0xa18>)
 8009e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e72:	4604      	mov	r4, r0
 8009e74:	460d      	mov	r5, r1
 8009e76:	f7f6 fb6b 	bl	8000550 <__aeabi_dmul>
 8009e7a:	a35d      	add	r3, pc, #372	; (adr r3, 8009ff0 <__ieee754_pow+0xa20>)
 8009e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e80:	f7f6 f9ae 	bl	80001e0 <__aeabi_dsub>
 8009e84:	4622      	mov	r2, r4
 8009e86:	462b      	mov	r3, r5
 8009e88:	f7f6 fb62 	bl	8000550 <__aeabi_dmul>
 8009e8c:	a35a      	add	r3, pc, #360	; (adr r3, 8009ff8 <__ieee754_pow+0xa28>)
 8009e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e92:	f7f6 f9a7 	bl	80001e4 <__adddf3>
 8009e96:	4622      	mov	r2, r4
 8009e98:	462b      	mov	r3, r5
 8009e9a:	f7f6 fb59 	bl	8000550 <__aeabi_dmul>
 8009e9e:	a358      	add	r3, pc, #352	; (adr r3, 800a000 <__ieee754_pow+0xa30>)
 8009ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea4:	f7f6 f99c 	bl	80001e0 <__aeabi_dsub>
 8009ea8:	4622      	mov	r2, r4
 8009eaa:	462b      	mov	r3, r5
 8009eac:	f7f6 fb50 	bl	8000550 <__aeabi_dmul>
 8009eb0:	a355      	add	r3, pc, #340	; (adr r3, 800a008 <__ieee754_pow+0xa38>)
 8009eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb6:	f7f6 f995 	bl	80001e4 <__adddf3>
 8009eba:	4622      	mov	r2, r4
 8009ebc:	462b      	mov	r3, r5
 8009ebe:	f7f6 fb47 	bl	8000550 <__aeabi_dmul>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	4640      	mov	r0, r8
 8009ec8:	4649      	mov	r1, r9
 8009eca:	f7f6 f989 	bl	80001e0 <__aeabi_dsub>
 8009ece:	4604      	mov	r4, r0
 8009ed0:	460d      	mov	r5, r1
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	4640      	mov	r0, r8
 8009ed8:	4649      	mov	r1, r9
 8009eda:	f7f6 fb39 	bl	8000550 <__aeabi_dmul>
 8009ede:	2200      	movs	r2, #0
 8009ee0:	ec41 0b19 	vmov	d9, r0, r1
 8009ee4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009ee8:	4620      	mov	r0, r4
 8009eea:	4629      	mov	r1, r5
 8009eec:	f7f6 f978 	bl	80001e0 <__aeabi_dsub>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	ec51 0b19 	vmov	r0, r1, d9
 8009ef8:	f7f6 fc54 	bl	80007a4 <__aeabi_ddiv>
 8009efc:	4632      	mov	r2, r6
 8009efe:	4604      	mov	r4, r0
 8009f00:	460d      	mov	r5, r1
 8009f02:	463b      	mov	r3, r7
 8009f04:	4640      	mov	r0, r8
 8009f06:	4649      	mov	r1, r9
 8009f08:	f7f6 fb22 	bl	8000550 <__aeabi_dmul>
 8009f0c:	4632      	mov	r2, r6
 8009f0e:	463b      	mov	r3, r7
 8009f10:	f7f6 f968 	bl	80001e4 <__adddf3>
 8009f14:	4602      	mov	r2, r0
 8009f16:	460b      	mov	r3, r1
 8009f18:	4620      	mov	r0, r4
 8009f1a:	4629      	mov	r1, r5
 8009f1c:	f7f6 f960 	bl	80001e0 <__aeabi_dsub>
 8009f20:	4642      	mov	r2, r8
 8009f22:	464b      	mov	r3, r9
 8009f24:	f7f6 f95c 	bl	80001e0 <__aeabi_dsub>
 8009f28:	460b      	mov	r3, r1
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	493a      	ldr	r1, [pc, #232]	; (800a018 <__ieee754_pow+0xa48>)
 8009f2e:	2000      	movs	r0, #0
 8009f30:	f7f6 f956 	bl	80001e0 <__aeabi_dsub>
 8009f34:	ec41 0b10 	vmov	d0, r0, r1
 8009f38:	ee10 3a90 	vmov	r3, s1
 8009f3c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009f40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f44:	da2b      	bge.n	8009f9e <__ieee754_pow+0x9ce>
 8009f46:	4650      	mov	r0, sl
 8009f48:	f000 fc5a 	bl	800a800 <scalbn>
 8009f4c:	ec51 0b10 	vmov	r0, r1, d0
 8009f50:	ec53 2b18 	vmov	r2, r3, d8
 8009f54:	f7ff bbed 	b.w	8009732 <__ieee754_pow+0x162>
 8009f58:	4b30      	ldr	r3, [pc, #192]	; (800a01c <__ieee754_pow+0xa4c>)
 8009f5a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009f5e:	429e      	cmp	r6, r3
 8009f60:	f77f af0c 	ble.w	8009d7c <__ieee754_pow+0x7ac>
 8009f64:	4b2e      	ldr	r3, [pc, #184]	; (800a020 <__ieee754_pow+0xa50>)
 8009f66:	440b      	add	r3, r1
 8009f68:	4303      	orrs	r3, r0
 8009f6a:	d009      	beq.n	8009f80 <__ieee754_pow+0x9b0>
 8009f6c:	ec51 0b18 	vmov	r0, r1, d8
 8009f70:	2200      	movs	r2, #0
 8009f72:	2300      	movs	r3, #0
 8009f74:	f7f6 fd5e 	bl	8000a34 <__aeabi_dcmplt>
 8009f78:	3800      	subs	r0, #0
 8009f7a:	bf18      	it	ne
 8009f7c:	2001      	movne	r0, #1
 8009f7e:	e447      	b.n	8009810 <__ieee754_pow+0x240>
 8009f80:	4622      	mov	r2, r4
 8009f82:	462b      	mov	r3, r5
 8009f84:	f7f6 f92c 	bl	80001e0 <__aeabi_dsub>
 8009f88:	4642      	mov	r2, r8
 8009f8a:	464b      	mov	r3, r9
 8009f8c:	f7f6 fd66 	bl	8000a5c <__aeabi_dcmpge>
 8009f90:	2800      	cmp	r0, #0
 8009f92:	f43f aef3 	beq.w	8009d7c <__ieee754_pow+0x7ac>
 8009f96:	e7e9      	b.n	8009f6c <__ieee754_pow+0x99c>
 8009f98:	f04f 0a00 	mov.w	sl, #0
 8009f9c:	e71a      	b.n	8009dd4 <__ieee754_pow+0x804>
 8009f9e:	ec51 0b10 	vmov	r0, r1, d0
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	e7d4      	b.n	8009f50 <__ieee754_pow+0x980>
 8009fa6:	491c      	ldr	r1, [pc, #112]	; (800a018 <__ieee754_pow+0xa48>)
 8009fa8:	2000      	movs	r0, #0
 8009faa:	f7ff bb30 	b.w	800960e <__ieee754_pow+0x3e>
 8009fae:	2000      	movs	r0, #0
 8009fb0:	2100      	movs	r1, #0
 8009fb2:	f7ff bb2c 	b.w	800960e <__ieee754_pow+0x3e>
 8009fb6:	4630      	mov	r0, r6
 8009fb8:	4639      	mov	r1, r7
 8009fba:	f7ff bb28 	b.w	800960e <__ieee754_pow+0x3e>
 8009fbe:	9204      	str	r2, [sp, #16]
 8009fc0:	f7ff bb7a 	b.w	80096b8 <__ieee754_pow+0xe8>
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	f7ff bb64 	b.w	8009692 <__ieee754_pow+0xc2>
 8009fca:	bf00      	nop
 8009fcc:	f3af 8000 	nop.w
 8009fd0:	00000000 	.word	0x00000000
 8009fd4:	3fe62e43 	.word	0x3fe62e43
 8009fd8:	fefa39ef 	.word	0xfefa39ef
 8009fdc:	3fe62e42 	.word	0x3fe62e42
 8009fe0:	0ca86c39 	.word	0x0ca86c39
 8009fe4:	be205c61 	.word	0xbe205c61
 8009fe8:	72bea4d0 	.word	0x72bea4d0
 8009fec:	3e663769 	.word	0x3e663769
 8009ff0:	c5d26bf1 	.word	0xc5d26bf1
 8009ff4:	3ebbbd41 	.word	0x3ebbbd41
 8009ff8:	af25de2c 	.word	0xaf25de2c
 8009ffc:	3f11566a 	.word	0x3f11566a
 800a000:	16bebd93 	.word	0x16bebd93
 800a004:	3f66c16c 	.word	0x3f66c16c
 800a008:	5555553e 	.word	0x5555553e
 800a00c:	3fc55555 	.word	0x3fc55555
 800a010:	3fe00000 	.word	0x3fe00000
 800a014:	000fffff 	.word	0x000fffff
 800a018:	3ff00000 	.word	0x3ff00000
 800a01c:	4090cbff 	.word	0x4090cbff
 800a020:	3f6f3400 	.word	0x3f6f3400
 800a024:	652b82fe 	.word	0x652b82fe
 800a028:	3c971547 	.word	0x3c971547

0800a02c <__ieee754_sqrt>:
 800a02c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a030:	ec55 4b10 	vmov	r4, r5, d0
 800a034:	4e55      	ldr	r6, [pc, #340]	; (800a18c <__ieee754_sqrt+0x160>)
 800a036:	43ae      	bics	r6, r5
 800a038:	ee10 0a10 	vmov	r0, s0
 800a03c:	ee10 3a10 	vmov	r3, s0
 800a040:	462a      	mov	r2, r5
 800a042:	4629      	mov	r1, r5
 800a044:	d110      	bne.n	800a068 <__ieee754_sqrt+0x3c>
 800a046:	ee10 2a10 	vmov	r2, s0
 800a04a:	462b      	mov	r3, r5
 800a04c:	f7f6 fa80 	bl	8000550 <__aeabi_dmul>
 800a050:	4602      	mov	r2, r0
 800a052:	460b      	mov	r3, r1
 800a054:	4620      	mov	r0, r4
 800a056:	4629      	mov	r1, r5
 800a058:	f7f6 f8c4 	bl	80001e4 <__adddf3>
 800a05c:	4604      	mov	r4, r0
 800a05e:	460d      	mov	r5, r1
 800a060:	ec45 4b10 	vmov	d0, r4, r5
 800a064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a068:	2d00      	cmp	r5, #0
 800a06a:	dc10      	bgt.n	800a08e <__ieee754_sqrt+0x62>
 800a06c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a070:	4330      	orrs	r0, r6
 800a072:	d0f5      	beq.n	800a060 <__ieee754_sqrt+0x34>
 800a074:	b15d      	cbz	r5, 800a08e <__ieee754_sqrt+0x62>
 800a076:	ee10 2a10 	vmov	r2, s0
 800a07a:	462b      	mov	r3, r5
 800a07c:	ee10 0a10 	vmov	r0, s0
 800a080:	f7f6 f8ae 	bl	80001e0 <__aeabi_dsub>
 800a084:	4602      	mov	r2, r0
 800a086:	460b      	mov	r3, r1
 800a088:	f7f6 fb8c 	bl	80007a4 <__aeabi_ddiv>
 800a08c:	e7e6      	b.n	800a05c <__ieee754_sqrt+0x30>
 800a08e:	1512      	asrs	r2, r2, #20
 800a090:	d074      	beq.n	800a17c <__ieee754_sqrt+0x150>
 800a092:	07d4      	lsls	r4, r2, #31
 800a094:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a098:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a09c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a0a0:	bf5e      	ittt	pl
 800a0a2:	0fda      	lsrpl	r2, r3, #31
 800a0a4:	005b      	lslpl	r3, r3, #1
 800a0a6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a0aa:	2400      	movs	r4, #0
 800a0ac:	0fda      	lsrs	r2, r3, #31
 800a0ae:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a0b2:	107f      	asrs	r7, r7, #1
 800a0b4:	005b      	lsls	r3, r3, #1
 800a0b6:	2516      	movs	r5, #22
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a0be:	1886      	adds	r6, r0, r2
 800a0c0:	428e      	cmp	r6, r1
 800a0c2:	bfde      	ittt	le
 800a0c4:	1b89      	suble	r1, r1, r6
 800a0c6:	18b0      	addle	r0, r6, r2
 800a0c8:	18a4      	addle	r4, r4, r2
 800a0ca:	0049      	lsls	r1, r1, #1
 800a0cc:	3d01      	subs	r5, #1
 800a0ce:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a0d2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a0d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a0da:	d1f0      	bne.n	800a0be <__ieee754_sqrt+0x92>
 800a0dc:	462a      	mov	r2, r5
 800a0de:	f04f 0e20 	mov.w	lr, #32
 800a0e2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a0e6:	4281      	cmp	r1, r0
 800a0e8:	eb06 0c05 	add.w	ip, r6, r5
 800a0ec:	dc02      	bgt.n	800a0f4 <__ieee754_sqrt+0xc8>
 800a0ee:	d113      	bne.n	800a118 <__ieee754_sqrt+0xec>
 800a0f0:	459c      	cmp	ip, r3
 800a0f2:	d811      	bhi.n	800a118 <__ieee754_sqrt+0xec>
 800a0f4:	f1bc 0f00 	cmp.w	ip, #0
 800a0f8:	eb0c 0506 	add.w	r5, ip, r6
 800a0fc:	da43      	bge.n	800a186 <__ieee754_sqrt+0x15a>
 800a0fe:	2d00      	cmp	r5, #0
 800a100:	db41      	blt.n	800a186 <__ieee754_sqrt+0x15a>
 800a102:	f100 0801 	add.w	r8, r0, #1
 800a106:	1a09      	subs	r1, r1, r0
 800a108:	459c      	cmp	ip, r3
 800a10a:	bf88      	it	hi
 800a10c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800a110:	eba3 030c 	sub.w	r3, r3, ip
 800a114:	4432      	add	r2, r6
 800a116:	4640      	mov	r0, r8
 800a118:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a11c:	f1be 0e01 	subs.w	lr, lr, #1
 800a120:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a124:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a128:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a12c:	d1db      	bne.n	800a0e6 <__ieee754_sqrt+0xba>
 800a12e:	430b      	orrs	r3, r1
 800a130:	d006      	beq.n	800a140 <__ieee754_sqrt+0x114>
 800a132:	1c50      	adds	r0, r2, #1
 800a134:	bf13      	iteet	ne
 800a136:	3201      	addne	r2, #1
 800a138:	3401      	addeq	r4, #1
 800a13a:	4672      	moveq	r2, lr
 800a13c:	f022 0201 	bicne.w	r2, r2, #1
 800a140:	1063      	asrs	r3, r4, #1
 800a142:	0852      	lsrs	r2, r2, #1
 800a144:	07e1      	lsls	r1, r4, #31
 800a146:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a14a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a14e:	bf48      	it	mi
 800a150:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a154:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a158:	4614      	mov	r4, r2
 800a15a:	e781      	b.n	800a060 <__ieee754_sqrt+0x34>
 800a15c:	0ad9      	lsrs	r1, r3, #11
 800a15e:	3815      	subs	r0, #21
 800a160:	055b      	lsls	r3, r3, #21
 800a162:	2900      	cmp	r1, #0
 800a164:	d0fa      	beq.n	800a15c <__ieee754_sqrt+0x130>
 800a166:	02cd      	lsls	r5, r1, #11
 800a168:	d50a      	bpl.n	800a180 <__ieee754_sqrt+0x154>
 800a16a:	f1c2 0420 	rsb	r4, r2, #32
 800a16e:	fa23 f404 	lsr.w	r4, r3, r4
 800a172:	1e55      	subs	r5, r2, #1
 800a174:	4093      	lsls	r3, r2
 800a176:	4321      	orrs	r1, r4
 800a178:	1b42      	subs	r2, r0, r5
 800a17a:	e78a      	b.n	800a092 <__ieee754_sqrt+0x66>
 800a17c:	4610      	mov	r0, r2
 800a17e:	e7f0      	b.n	800a162 <__ieee754_sqrt+0x136>
 800a180:	0049      	lsls	r1, r1, #1
 800a182:	3201      	adds	r2, #1
 800a184:	e7ef      	b.n	800a166 <__ieee754_sqrt+0x13a>
 800a186:	4680      	mov	r8, r0
 800a188:	e7bd      	b.n	800a106 <__ieee754_sqrt+0xda>
 800a18a:	bf00      	nop
 800a18c:	7ff00000 	.word	0x7ff00000

0800a190 <__ieee754_powf>:
 800a190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a194:	ee10 4a90 	vmov	r4, s1
 800a198:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800a19c:	ed2d 8b02 	vpush	{d8}
 800a1a0:	ee10 6a10 	vmov	r6, s0
 800a1a4:	eeb0 8a40 	vmov.f32	s16, s0
 800a1a8:	eef0 8a60 	vmov.f32	s17, s1
 800a1ac:	d10c      	bne.n	800a1c8 <__ieee754_powf+0x38>
 800a1ae:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800a1b2:	0076      	lsls	r6, r6, #1
 800a1b4:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800a1b8:	f240 8296 	bls.w	800a6e8 <__ieee754_powf+0x558>
 800a1bc:	ee38 0a28 	vadd.f32	s0, s16, s17
 800a1c0:	ecbd 8b02 	vpop	{d8}
 800a1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1c8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a1cc:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800a1d0:	dcf4      	bgt.n	800a1bc <__ieee754_powf+0x2c>
 800a1d2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800a1d6:	dd08      	ble.n	800a1ea <__ieee754_powf+0x5a>
 800a1d8:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800a1dc:	d1ee      	bne.n	800a1bc <__ieee754_powf+0x2c>
 800a1de:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800a1e2:	0064      	lsls	r4, r4, #1
 800a1e4:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800a1e8:	e7e6      	b.n	800a1b8 <__ieee754_powf+0x28>
 800a1ea:	2e00      	cmp	r6, #0
 800a1ec:	da20      	bge.n	800a230 <__ieee754_powf+0xa0>
 800a1ee:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800a1f2:	da2d      	bge.n	800a250 <__ieee754_powf+0xc0>
 800a1f4:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800a1f8:	f2c0 827f 	blt.w	800a6fa <__ieee754_powf+0x56a>
 800a1fc:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800a200:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800a204:	fa48 f703 	asr.w	r7, r8, r3
 800a208:	fa07 f303 	lsl.w	r3, r7, r3
 800a20c:	4543      	cmp	r3, r8
 800a20e:	f040 8274 	bne.w	800a6fa <__ieee754_powf+0x56a>
 800a212:	f007 0701 	and.w	r7, r7, #1
 800a216:	f1c7 0702 	rsb	r7, r7, #2
 800a21a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800a21e:	d11f      	bne.n	800a260 <__ieee754_powf+0xd0>
 800a220:	2c00      	cmp	r4, #0
 800a222:	f280 8267 	bge.w	800a6f4 <__ieee754_powf+0x564>
 800a226:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a22a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800a22e:	e7c7      	b.n	800a1c0 <__ieee754_powf+0x30>
 800a230:	2700      	movs	r7, #0
 800a232:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800a236:	d1f0      	bne.n	800a21a <__ieee754_powf+0x8a>
 800a238:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800a23c:	f000 8254 	beq.w	800a6e8 <__ieee754_powf+0x558>
 800a240:	dd08      	ble.n	800a254 <__ieee754_powf+0xc4>
 800a242:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800a54c <__ieee754_powf+0x3bc>
 800a246:	2c00      	cmp	r4, #0
 800a248:	bfa8      	it	ge
 800a24a:	eeb0 0a68 	vmovge.f32	s0, s17
 800a24e:	e7b7      	b.n	800a1c0 <__ieee754_powf+0x30>
 800a250:	2702      	movs	r7, #2
 800a252:	e7ee      	b.n	800a232 <__ieee754_powf+0xa2>
 800a254:	2c00      	cmp	r4, #0
 800a256:	f280 824a 	bge.w	800a6ee <__ieee754_powf+0x55e>
 800a25a:	eeb1 0a68 	vneg.f32	s0, s17
 800a25e:	e7af      	b.n	800a1c0 <__ieee754_powf+0x30>
 800a260:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800a264:	d102      	bne.n	800a26c <__ieee754_powf+0xdc>
 800a266:	ee28 0a08 	vmul.f32	s0, s16, s16
 800a26a:	e7a9      	b.n	800a1c0 <__ieee754_powf+0x30>
 800a26c:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800a270:	eeb0 0a48 	vmov.f32	s0, s16
 800a274:	d107      	bne.n	800a286 <__ieee754_powf+0xf6>
 800a276:	2e00      	cmp	r6, #0
 800a278:	db05      	blt.n	800a286 <__ieee754_powf+0xf6>
 800a27a:	ecbd 8b02 	vpop	{d8}
 800a27e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a282:	f000 ba53 	b.w	800a72c <__ieee754_sqrtf>
 800a286:	f000 fb41 	bl	800a90c <fabsf>
 800a28a:	b125      	cbz	r5, 800a296 <__ieee754_powf+0x106>
 800a28c:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800a290:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800a294:	d116      	bne.n	800a2c4 <__ieee754_powf+0x134>
 800a296:	2c00      	cmp	r4, #0
 800a298:	bfbc      	itt	lt
 800a29a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800a29e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800a2a2:	2e00      	cmp	r6, #0
 800a2a4:	da8c      	bge.n	800a1c0 <__ieee754_powf+0x30>
 800a2a6:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800a2aa:	ea55 0307 	orrs.w	r3, r5, r7
 800a2ae:	d104      	bne.n	800a2ba <__ieee754_powf+0x12a>
 800a2b0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a2b4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a2b8:	e782      	b.n	800a1c0 <__ieee754_powf+0x30>
 800a2ba:	2f01      	cmp	r7, #1
 800a2bc:	d180      	bne.n	800a1c0 <__ieee754_powf+0x30>
 800a2be:	eeb1 0a40 	vneg.f32	s0, s0
 800a2c2:	e77d      	b.n	800a1c0 <__ieee754_powf+0x30>
 800a2c4:	0ff0      	lsrs	r0, r6, #31
 800a2c6:	3801      	subs	r0, #1
 800a2c8:	ea57 0300 	orrs.w	r3, r7, r0
 800a2cc:	d104      	bne.n	800a2d8 <__ieee754_powf+0x148>
 800a2ce:	ee38 8a48 	vsub.f32	s16, s16, s16
 800a2d2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800a2d6:	e773      	b.n	800a1c0 <__ieee754_powf+0x30>
 800a2d8:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800a2dc:	dd74      	ble.n	800a3c8 <__ieee754_powf+0x238>
 800a2de:	4b9c      	ldr	r3, [pc, #624]	; (800a550 <__ieee754_powf+0x3c0>)
 800a2e0:	429d      	cmp	r5, r3
 800a2e2:	dc08      	bgt.n	800a2f6 <__ieee754_powf+0x166>
 800a2e4:	2c00      	cmp	r4, #0
 800a2e6:	da0b      	bge.n	800a300 <__ieee754_powf+0x170>
 800a2e8:	2000      	movs	r0, #0
 800a2ea:	ecbd 8b02 	vpop	{d8}
 800a2ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2f2:	f000 ba6b 	b.w	800a7cc <__math_oflowf>
 800a2f6:	4b97      	ldr	r3, [pc, #604]	; (800a554 <__ieee754_powf+0x3c4>)
 800a2f8:	429d      	cmp	r5, r3
 800a2fa:	dd08      	ble.n	800a30e <__ieee754_powf+0x17e>
 800a2fc:	2c00      	cmp	r4, #0
 800a2fe:	dcf3      	bgt.n	800a2e8 <__ieee754_powf+0x158>
 800a300:	2000      	movs	r0, #0
 800a302:	ecbd 8b02 	vpop	{d8}
 800a306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a30a:	f000 ba59 	b.w	800a7c0 <__math_uflowf>
 800a30e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a312:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a316:	eddf 6a90 	vldr	s13, [pc, #576]	; 800a558 <__ieee754_powf+0x3c8>
 800a31a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800a31e:	eee0 6a67 	vfms.f32	s13, s0, s15
 800a322:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a326:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800a32a:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a32e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a332:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800a55c <__ieee754_powf+0x3cc>
 800a336:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800a33a:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800a560 <__ieee754_powf+0x3d0>
 800a33e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a342:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800a564 <__ieee754_powf+0x3d4>
 800a346:	eef0 6a67 	vmov.f32	s13, s15
 800a34a:	eee0 6a07 	vfma.f32	s13, s0, s14
 800a34e:	ee16 3a90 	vmov	r3, s13
 800a352:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a356:	f023 030f 	bic.w	r3, r3, #15
 800a35a:	ee00 3a90 	vmov	s1, r3
 800a35e:	eee0 0a47 	vfms.f32	s1, s0, s14
 800a362:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800a366:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800a36a:	f024 040f 	bic.w	r4, r4, #15
 800a36e:	ee07 4a10 	vmov	s14, r4
 800a372:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800a376:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800a37a:	ee07 3a90 	vmov	s15, r3
 800a37e:	eee7 0a27 	vfma.f32	s1, s14, s15
 800a382:	3f01      	subs	r7, #1
 800a384:	ea57 0200 	orrs.w	r2, r7, r0
 800a388:	ee07 4a10 	vmov	s14, r4
 800a38c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a390:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800a394:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800a398:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800a39c:	ee17 4a10 	vmov	r4, s14
 800a3a0:	bf08      	it	eq
 800a3a2:	eeb0 8a40 	vmoveq.f32	s16, s0
 800a3a6:	2c00      	cmp	r4, #0
 800a3a8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a3ac:	f340 817e 	ble.w	800a6ac <__ieee754_powf+0x51c>
 800a3b0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800a3b4:	f340 80f8 	ble.w	800a5a8 <__ieee754_powf+0x418>
 800a3b8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a3bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3c0:	bf4c      	ite	mi
 800a3c2:	2001      	movmi	r0, #1
 800a3c4:	2000      	movpl	r0, #0
 800a3c6:	e790      	b.n	800a2ea <__ieee754_powf+0x15a>
 800a3c8:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800a3cc:	bf01      	itttt	eq
 800a3ce:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800a568 <__ieee754_powf+0x3d8>
 800a3d2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800a3d6:	f06f 0217 	mvneq.w	r2, #23
 800a3da:	ee17 5a90 	vmoveq	r5, s15
 800a3de:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800a3e2:	bf18      	it	ne
 800a3e4:	2200      	movne	r2, #0
 800a3e6:	3b7f      	subs	r3, #127	; 0x7f
 800a3e8:	4413      	add	r3, r2
 800a3ea:	4a60      	ldr	r2, [pc, #384]	; (800a56c <__ieee754_powf+0x3dc>)
 800a3ec:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800a3f0:	4295      	cmp	r5, r2
 800a3f2:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800a3f6:	dd06      	ble.n	800a406 <__ieee754_powf+0x276>
 800a3f8:	4a5d      	ldr	r2, [pc, #372]	; (800a570 <__ieee754_powf+0x3e0>)
 800a3fa:	4295      	cmp	r5, r2
 800a3fc:	f340 80a4 	ble.w	800a548 <__ieee754_powf+0x3b8>
 800a400:	3301      	adds	r3, #1
 800a402:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800a406:	2500      	movs	r5, #0
 800a408:	4a5a      	ldr	r2, [pc, #360]	; (800a574 <__ieee754_powf+0x3e4>)
 800a40a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800a40e:	ee07 1a90 	vmov	s15, r1
 800a412:	ed92 7a00 	vldr	s14, [r2]
 800a416:	4a58      	ldr	r2, [pc, #352]	; (800a578 <__ieee754_powf+0x3e8>)
 800a418:	ee37 6a27 	vadd.f32	s12, s14, s15
 800a41c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800a420:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800a424:	1049      	asrs	r1, r1, #1
 800a426:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800a42a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800a42e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800a432:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800a436:	ee06 1a10 	vmov	s12, r1
 800a43a:	ee65 4a26 	vmul.f32	s9, s10, s13
 800a43e:	ee36 7a47 	vsub.f32	s14, s12, s14
 800a442:	ee14 6a90 	vmov	r6, s9
 800a446:	4016      	ands	r6, r2
 800a448:	ee05 6a90 	vmov	s11, r6
 800a44c:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800a450:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a454:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800a57c <__ieee754_powf+0x3ec>
 800a458:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800a45c:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800a460:	ee25 6a26 	vmul.f32	s12, s10, s13
 800a464:	eddf 6a46 	vldr	s13, [pc, #280]	; 800a580 <__ieee754_powf+0x3f0>
 800a468:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800a46c:	eddf 6a45 	vldr	s13, [pc, #276]	; 800a584 <__ieee754_powf+0x3f4>
 800a470:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a474:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800a558 <__ieee754_powf+0x3c8>
 800a478:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a47c:	eddf 6a42 	vldr	s13, [pc, #264]	; 800a588 <__ieee754_powf+0x3f8>
 800a480:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a484:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800a58c <__ieee754_powf+0x3fc>
 800a488:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a48c:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800a490:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800a494:	ee66 6a86 	vmul.f32	s13, s13, s12
 800a498:	eee5 6a07 	vfma.f32	s13, s10, s14
 800a49c:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800a4a0:	eef0 7a45 	vmov.f32	s15, s10
 800a4a4:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800a4a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4ac:	ee17 1a90 	vmov	r1, s15
 800a4b0:	4011      	ands	r1, r2
 800a4b2:	ee07 1a90 	vmov	s15, r1
 800a4b6:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800a4ba:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800a4be:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a4c2:	ee27 7a24 	vmul.f32	s14, s14, s9
 800a4c6:	eea6 7a27 	vfma.f32	s14, s12, s15
 800a4ca:	eeb0 6a47 	vmov.f32	s12, s14
 800a4ce:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800a4d2:	ee16 1a10 	vmov	r1, s12
 800a4d6:	4011      	ands	r1, r2
 800a4d8:	ee06 1a90 	vmov	s13, r1
 800a4dc:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800a4e0:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800a590 <__ieee754_powf+0x400>
 800a4e4:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800a594 <__ieee754_powf+0x404>
 800a4e8:	ee37 7a66 	vsub.f32	s14, s14, s13
 800a4ec:	ee06 1a10 	vmov	s12, r1
 800a4f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a4f4:	eddf 7a28 	vldr	s15, [pc, #160]	; 800a598 <__ieee754_powf+0x408>
 800a4f8:	4928      	ldr	r1, [pc, #160]	; (800a59c <__ieee754_powf+0x40c>)
 800a4fa:	eea6 7a27 	vfma.f32	s14, s12, s15
 800a4fe:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800a502:	edd1 7a00 	vldr	s15, [r1]
 800a506:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a50a:	ee07 3a90 	vmov	s15, r3
 800a50e:	4b24      	ldr	r3, [pc, #144]	; (800a5a0 <__ieee754_powf+0x410>)
 800a510:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a514:	eef0 7a47 	vmov.f32	s15, s14
 800a518:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a51c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a520:	edd5 0a00 	vldr	s1, [r5]
 800a524:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a528:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a52c:	ee17 3a90 	vmov	r3, s15
 800a530:	4013      	ands	r3, r2
 800a532:	ee07 3a90 	vmov	s15, r3
 800a536:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800a53a:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800a53e:	eee6 6a65 	vfms.f32	s13, s12, s11
 800a542:	ee77 7a66 	vsub.f32	s15, s14, s13
 800a546:	e70e      	b.n	800a366 <__ieee754_powf+0x1d6>
 800a548:	2501      	movs	r5, #1
 800a54a:	e75d      	b.n	800a408 <__ieee754_powf+0x278>
 800a54c:	00000000 	.word	0x00000000
 800a550:	3f7ffff3 	.word	0x3f7ffff3
 800a554:	3f800007 	.word	0x3f800007
 800a558:	3eaaaaab 	.word	0x3eaaaaab
 800a55c:	3fb8aa3b 	.word	0x3fb8aa3b
 800a560:	36eca570 	.word	0x36eca570
 800a564:	3fb8aa00 	.word	0x3fb8aa00
 800a568:	4b800000 	.word	0x4b800000
 800a56c:	001cc471 	.word	0x001cc471
 800a570:	005db3d6 	.word	0x005db3d6
 800a574:	0800b328 	.word	0x0800b328
 800a578:	fffff000 	.word	0xfffff000
 800a57c:	3e6c3255 	.word	0x3e6c3255
 800a580:	3e53f142 	.word	0x3e53f142
 800a584:	3e8ba305 	.word	0x3e8ba305
 800a588:	3edb6db7 	.word	0x3edb6db7
 800a58c:	3f19999a 	.word	0x3f19999a
 800a590:	3f76384f 	.word	0x3f76384f
 800a594:	3f763800 	.word	0x3f763800
 800a598:	369dc3a0 	.word	0x369dc3a0
 800a59c:	0800b338 	.word	0x0800b338
 800a5a0:	0800b330 	.word	0x0800b330
 800a5a4:	3338aa3c 	.word	0x3338aa3c
 800a5a8:	f040 8095 	bne.w	800a6d6 <__ieee754_powf+0x546>
 800a5ac:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800a5a4 <__ieee754_powf+0x414>
 800a5b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a5b4:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800a5b8:	eef4 6ac7 	vcmpe.f32	s13, s14
 800a5bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5c0:	f73f aefa 	bgt.w	800a3b8 <__ieee754_powf+0x228>
 800a5c4:	15db      	asrs	r3, r3, #23
 800a5c6:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800a5ca:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a5ce:	4103      	asrs	r3, r0
 800a5d0:	4423      	add	r3, r4
 800a5d2:	494b      	ldr	r1, [pc, #300]	; (800a700 <__ieee754_powf+0x570>)
 800a5d4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a5d8:	3a7f      	subs	r2, #127	; 0x7f
 800a5da:	4111      	asrs	r1, r2
 800a5dc:	ea23 0101 	bic.w	r1, r3, r1
 800a5e0:	ee07 1a10 	vmov	s14, r1
 800a5e4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800a5e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800a5ec:	f1c2 0217 	rsb	r2, r2, #23
 800a5f0:	4110      	asrs	r0, r2
 800a5f2:	2c00      	cmp	r4, #0
 800a5f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a5f8:	bfb8      	it	lt
 800a5fa:	4240      	neglt	r0, r0
 800a5fc:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800a600:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800a704 <__ieee754_powf+0x574>
 800a604:	eddf 6a40 	vldr	s13, [pc, #256]	; 800a708 <__ieee754_powf+0x578>
 800a608:	ee17 3a10 	vmov	r3, s14
 800a60c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a610:	f023 030f 	bic.w	r3, r3, #15
 800a614:	ee07 3a10 	vmov	s14, r3
 800a618:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a61c:	ee27 0a00 	vmul.f32	s0, s14, s0
 800a620:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800a624:	eddf 7a39 	vldr	s15, [pc, #228]	; 800a70c <__ieee754_powf+0x57c>
 800a628:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800a62c:	eef0 7a40 	vmov.f32	s15, s0
 800a630:	eee7 7a26 	vfma.f32	s15, s14, s13
 800a634:	eeb0 6a67 	vmov.f32	s12, s15
 800a638:	eea7 6a66 	vfms.f32	s12, s14, s13
 800a63c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800a640:	ee30 0a46 	vsub.f32	s0, s0, s12
 800a644:	eddf 6a32 	vldr	s13, [pc, #200]	; 800a710 <__ieee754_powf+0x580>
 800a648:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800a714 <__ieee754_powf+0x584>
 800a64c:	eee7 6a06 	vfma.f32	s13, s14, s12
 800a650:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800a718 <__ieee754_powf+0x588>
 800a654:	eea6 6a87 	vfma.f32	s12, s13, s14
 800a658:	eddf 6a30 	vldr	s13, [pc, #192]	; 800a71c <__ieee754_powf+0x58c>
 800a65c:	eee6 6a07 	vfma.f32	s13, s12, s14
 800a660:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800a720 <__ieee754_powf+0x590>
 800a664:	eea6 6a87 	vfma.f32	s12, s13, s14
 800a668:	eef0 6a67 	vmov.f32	s13, s15
 800a66c:	eee6 6a47 	vfms.f32	s13, s12, s14
 800a670:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a674:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800a678:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800a67c:	eea7 0a80 	vfma.f32	s0, s15, s0
 800a680:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a684:	ee37 0a40 	vsub.f32	s0, s14, s0
 800a688:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a68c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a690:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a694:	ee10 3a10 	vmov	r3, s0
 800a698:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800a69c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a6a0:	da1f      	bge.n	800a6e2 <__ieee754_powf+0x552>
 800a6a2:	f000 f947 	bl	800a934 <scalbnf>
 800a6a6:	ee20 0a08 	vmul.f32	s0, s0, s16
 800a6aa:	e589      	b.n	800a1c0 <__ieee754_powf+0x30>
 800a6ac:	4a1d      	ldr	r2, [pc, #116]	; (800a724 <__ieee754_powf+0x594>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	dd07      	ble.n	800a6c2 <__ieee754_powf+0x532>
 800a6b2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a6b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6ba:	bf4c      	ite	mi
 800a6bc:	2001      	movmi	r0, #1
 800a6be:	2000      	movpl	r0, #0
 800a6c0:	e61f      	b.n	800a302 <__ieee754_powf+0x172>
 800a6c2:	d108      	bne.n	800a6d6 <__ieee754_powf+0x546>
 800a6c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a6c8:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800a6cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6d0:	f6ff af78 	blt.w	800a5c4 <__ieee754_powf+0x434>
 800a6d4:	e7ed      	b.n	800a6b2 <__ieee754_powf+0x522>
 800a6d6:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800a6da:	f73f af73 	bgt.w	800a5c4 <__ieee754_powf+0x434>
 800a6de:	2000      	movs	r0, #0
 800a6e0:	e78c      	b.n	800a5fc <__ieee754_powf+0x46c>
 800a6e2:	ee00 3a10 	vmov	s0, r3
 800a6e6:	e7de      	b.n	800a6a6 <__ieee754_powf+0x516>
 800a6e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a6ec:	e568      	b.n	800a1c0 <__ieee754_powf+0x30>
 800a6ee:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800a728 <__ieee754_powf+0x598>
 800a6f2:	e565      	b.n	800a1c0 <__ieee754_powf+0x30>
 800a6f4:	eeb0 0a48 	vmov.f32	s0, s16
 800a6f8:	e562      	b.n	800a1c0 <__ieee754_powf+0x30>
 800a6fa:	2700      	movs	r7, #0
 800a6fc:	e58d      	b.n	800a21a <__ieee754_powf+0x8a>
 800a6fe:	bf00      	nop
 800a700:	007fffff 	.word	0x007fffff
 800a704:	35bfbe8c 	.word	0x35bfbe8c
 800a708:	3f317200 	.word	0x3f317200
 800a70c:	3f317218 	.word	0x3f317218
 800a710:	b5ddea0e 	.word	0xb5ddea0e
 800a714:	3331bb4c 	.word	0x3331bb4c
 800a718:	388ab355 	.word	0x388ab355
 800a71c:	bb360b61 	.word	0xbb360b61
 800a720:	3e2aaaab 	.word	0x3e2aaaab
 800a724:	43160000 	.word	0x43160000
 800a728:	00000000 	.word	0x00000000

0800a72c <__ieee754_sqrtf>:
 800a72c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a730:	4770      	bx	lr

0800a732 <with_errno>:
 800a732:	b570      	push	{r4, r5, r6, lr}
 800a734:	4604      	mov	r4, r0
 800a736:	460d      	mov	r5, r1
 800a738:	4616      	mov	r6, r2
 800a73a:	f7fe fdf7 	bl	800932c <__errno>
 800a73e:	4629      	mov	r1, r5
 800a740:	6006      	str	r6, [r0, #0]
 800a742:	4620      	mov	r0, r4
 800a744:	bd70      	pop	{r4, r5, r6, pc}

0800a746 <xflow>:
 800a746:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a748:	4614      	mov	r4, r2
 800a74a:	461d      	mov	r5, r3
 800a74c:	b108      	cbz	r0, 800a752 <xflow+0xc>
 800a74e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a752:	e9cd 2300 	strd	r2, r3, [sp]
 800a756:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a75a:	4620      	mov	r0, r4
 800a75c:	4629      	mov	r1, r5
 800a75e:	f7f5 fef7 	bl	8000550 <__aeabi_dmul>
 800a762:	2222      	movs	r2, #34	; 0x22
 800a764:	b003      	add	sp, #12
 800a766:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a76a:	f7ff bfe2 	b.w	800a732 <with_errno>

0800a76e <__math_uflow>:
 800a76e:	b508      	push	{r3, lr}
 800a770:	2200      	movs	r2, #0
 800a772:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a776:	f7ff ffe6 	bl	800a746 <xflow>
 800a77a:	ec41 0b10 	vmov	d0, r0, r1
 800a77e:	bd08      	pop	{r3, pc}

0800a780 <__math_oflow>:
 800a780:	b508      	push	{r3, lr}
 800a782:	2200      	movs	r2, #0
 800a784:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a788:	f7ff ffdd 	bl	800a746 <xflow>
 800a78c:	ec41 0b10 	vmov	d0, r0, r1
 800a790:	bd08      	pop	{r3, pc}

0800a792 <with_errnof>:
 800a792:	b513      	push	{r0, r1, r4, lr}
 800a794:	4604      	mov	r4, r0
 800a796:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a79a:	f7fe fdc7 	bl	800932c <__errno>
 800a79e:	ed9d 0a01 	vldr	s0, [sp, #4]
 800a7a2:	6004      	str	r4, [r0, #0]
 800a7a4:	b002      	add	sp, #8
 800a7a6:	bd10      	pop	{r4, pc}

0800a7a8 <xflowf>:
 800a7a8:	b130      	cbz	r0, 800a7b8 <xflowf+0x10>
 800a7aa:	eef1 7a40 	vneg.f32	s15, s0
 800a7ae:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a7b2:	2022      	movs	r0, #34	; 0x22
 800a7b4:	f7ff bfed 	b.w	800a792 <with_errnof>
 800a7b8:	eef0 7a40 	vmov.f32	s15, s0
 800a7bc:	e7f7      	b.n	800a7ae <xflowf+0x6>
	...

0800a7c0 <__math_uflowf>:
 800a7c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a7c8 <__math_uflowf+0x8>
 800a7c4:	f7ff bff0 	b.w	800a7a8 <xflowf>
 800a7c8:	10000000 	.word	0x10000000

0800a7cc <__math_oflowf>:
 800a7cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a7d4 <__math_oflowf+0x8>
 800a7d0:	f7ff bfea 	b.w	800a7a8 <xflowf>
 800a7d4:	70000000 	.word	0x70000000

0800a7d8 <fabs>:
 800a7d8:	ec51 0b10 	vmov	r0, r1, d0
 800a7dc:	ee10 2a10 	vmov	r2, s0
 800a7e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a7e4:	ec43 2b10 	vmov	d0, r2, r3
 800a7e8:	4770      	bx	lr

0800a7ea <finite>:
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	ed8d 0b00 	vstr	d0, [sp]
 800a7f0:	9801      	ldr	r0, [sp, #4]
 800a7f2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a7f6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a7fa:	0fc0      	lsrs	r0, r0, #31
 800a7fc:	b002      	add	sp, #8
 800a7fe:	4770      	bx	lr

0800a800 <scalbn>:
 800a800:	b570      	push	{r4, r5, r6, lr}
 800a802:	ec55 4b10 	vmov	r4, r5, d0
 800a806:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a80a:	4606      	mov	r6, r0
 800a80c:	462b      	mov	r3, r5
 800a80e:	b99a      	cbnz	r2, 800a838 <scalbn+0x38>
 800a810:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a814:	4323      	orrs	r3, r4
 800a816:	d036      	beq.n	800a886 <scalbn+0x86>
 800a818:	4b39      	ldr	r3, [pc, #228]	; (800a900 <scalbn+0x100>)
 800a81a:	4629      	mov	r1, r5
 800a81c:	ee10 0a10 	vmov	r0, s0
 800a820:	2200      	movs	r2, #0
 800a822:	f7f5 fe95 	bl	8000550 <__aeabi_dmul>
 800a826:	4b37      	ldr	r3, [pc, #220]	; (800a904 <scalbn+0x104>)
 800a828:	429e      	cmp	r6, r3
 800a82a:	4604      	mov	r4, r0
 800a82c:	460d      	mov	r5, r1
 800a82e:	da10      	bge.n	800a852 <scalbn+0x52>
 800a830:	a32b      	add	r3, pc, #172	; (adr r3, 800a8e0 <scalbn+0xe0>)
 800a832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a836:	e03a      	b.n	800a8ae <scalbn+0xae>
 800a838:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a83c:	428a      	cmp	r2, r1
 800a83e:	d10c      	bne.n	800a85a <scalbn+0x5a>
 800a840:	ee10 2a10 	vmov	r2, s0
 800a844:	4620      	mov	r0, r4
 800a846:	4629      	mov	r1, r5
 800a848:	f7f5 fccc 	bl	80001e4 <__adddf3>
 800a84c:	4604      	mov	r4, r0
 800a84e:	460d      	mov	r5, r1
 800a850:	e019      	b.n	800a886 <scalbn+0x86>
 800a852:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a856:	460b      	mov	r3, r1
 800a858:	3a36      	subs	r2, #54	; 0x36
 800a85a:	4432      	add	r2, r6
 800a85c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a860:	428a      	cmp	r2, r1
 800a862:	dd08      	ble.n	800a876 <scalbn+0x76>
 800a864:	2d00      	cmp	r5, #0
 800a866:	a120      	add	r1, pc, #128	; (adr r1, 800a8e8 <scalbn+0xe8>)
 800a868:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a86c:	da1c      	bge.n	800a8a8 <scalbn+0xa8>
 800a86e:	a120      	add	r1, pc, #128	; (adr r1, 800a8f0 <scalbn+0xf0>)
 800a870:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a874:	e018      	b.n	800a8a8 <scalbn+0xa8>
 800a876:	2a00      	cmp	r2, #0
 800a878:	dd08      	ble.n	800a88c <scalbn+0x8c>
 800a87a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a87e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a882:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a886:	ec45 4b10 	vmov	d0, r4, r5
 800a88a:	bd70      	pop	{r4, r5, r6, pc}
 800a88c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a890:	da19      	bge.n	800a8c6 <scalbn+0xc6>
 800a892:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a896:	429e      	cmp	r6, r3
 800a898:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a89c:	dd0a      	ble.n	800a8b4 <scalbn+0xb4>
 800a89e:	a112      	add	r1, pc, #72	; (adr r1, 800a8e8 <scalbn+0xe8>)
 800a8a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d1e2      	bne.n	800a86e <scalbn+0x6e>
 800a8a8:	a30f      	add	r3, pc, #60	; (adr r3, 800a8e8 <scalbn+0xe8>)
 800a8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ae:	f7f5 fe4f 	bl	8000550 <__aeabi_dmul>
 800a8b2:	e7cb      	b.n	800a84c <scalbn+0x4c>
 800a8b4:	a10a      	add	r1, pc, #40	; (adr r1, 800a8e0 <scalbn+0xe0>)
 800a8b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d0b8      	beq.n	800a830 <scalbn+0x30>
 800a8be:	a10e      	add	r1, pc, #56	; (adr r1, 800a8f8 <scalbn+0xf8>)
 800a8c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8c4:	e7b4      	b.n	800a830 <scalbn+0x30>
 800a8c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a8ca:	3236      	adds	r2, #54	; 0x36
 800a8cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a8d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	4b0c      	ldr	r3, [pc, #48]	; (800a908 <scalbn+0x108>)
 800a8d8:	2200      	movs	r2, #0
 800a8da:	e7e8      	b.n	800a8ae <scalbn+0xae>
 800a8dc:	f3af 8000 	nop.w
 800a8e0:	c2f8f359 	.word	0xc2f8f359
 800a8e4:	01a56e1f 	.word	0x01a56e1f
 800a8e8:	8800759c 	.word	0x8800759c
 800a8ec:	7e37e43c 	.word	0x7e37e43c
 800a8f0:	8800759c 	.word	0x8800759c
 800a8f4:	fe37e43c 	.word	0xfe37e43c
 800a8f8:	c2f8f359 	.word	0xc2f8f359
 800a8fc:	81a56e1f 	.word	0x81a56e1f
 800a900:	43500000 	.word	0x43500000
 800a904:	ffff3cb0 	.word	0xffff3cb0
 800a908:	3c900000 	.word	0x3c900000

0800a90c <fabsf>:
 800a90c:	ee10 3a10 	vmov	r3, s0
 800a910:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a914:	ee00 3a10 	vmov	s0, r3
 800a918:	4770      	bx	lr

0800a91a <finitef>:
 800a91a:	b082      	sub	sp, #8
 800a91c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a920:	9801      	ldr	r0, [sp, #4]
 800a922:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a926:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800a92a:	bfac      	ite	ge
 800a92c:	2000      	movge	r0, #0
 800a92e:	2001      	movlt	r0, #1
 800a930:	b002      	add	sp, #8
 800a932:	4770      	bx	lr

0800a934 <scalbnf>:
 800a934:	ee10 3a10 	vmov	r3, s0
 800a938:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800a93c:	d025      	beq.n	800a98a <scalbnf+0x56>
 800a93e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a942:	d302      	bcc.n	800a94a <scalbnf+0x16>
 800a944:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a948:	4770      	bx	lr
 800a94a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800a94e:	d122      	bne.n	800a996 <scalbnf+0x62>
 800a950:	4b2a      	ldr	r3, [pc, #168]	; (800a9fc <scalbnf+0xc8>)
 800a952:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800aa00 <scalbnf+0xcc>
 800a956:	4298      	cmp	r0, r3
 800a958:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a95c:	db16      	blt.n	800a98c <scalbnf+0x58>
 800a95e:	ee10 3a10 	vmov	r3, s0
 800a962:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a966:	3a19      	subs	r2, #25
 800a968:	4402      	add	r2, r0
 800a96a:	2afe      	cmp	r2, #254	; 0xfe
 800a96c:	dd15      	ble.n	800a99a <scalbnf+0x66>
 800a96e:	ee10 3a10 	vmov	r3, s0
 800a972:	eddf 7a24 	vldr	s15, [pc, #144]	; 800aa04 <scalbnf+0xd0>
 800a976:	eddf 6a24 	vldr	s13, [pc, #144]	; 800aa08 <scalbnf+0xd4>
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	eeb0 7a67 	vmov.f32	s14, s15
 800a980:	bfb8      	it	lt
 800a982:	eef0 7a66 	vmovlt.f32	s15, s13
 800a986:	ee27 0a27 	vmul.f32	s0, s14, s15
 800a98a:	4770      	bx	lr
 800a98c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800aa0c <scalbnf+0xd8>
 800a990:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a994:	4770      	bx	lr
 800a996:	0dd2      	lsrs	r2, r2, #23
 800a998:	e7e6      	b.n	800a968 <scalbnf+0x34>
 800a99a:	2a00      	cmp	r2, #0
 800a99c:	dd06      	ble.n	800a9ac <scalbnf+0x78>
 800a99e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a9a2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800a9a6:	ee00 3a10 	vmov	s0, r3
 800a9aa:	4770      	bx	lr
 800a9ac:	f112 0f16 	cmn.w	r2, #22
 800a9b0:	da1a      	bge.n	800a9e8 <scalbnf+0xb4>
 800a9b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a9b6:	4298      	cmp	r0, r3
 800a9b8:	ee10 3a10 	vmov	r3, s0
 800a9bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9c0:	dd0a      	ble.n	800a9d8 <scalbnf+0xa4>
 800a9c2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800aa04 <scalbnf+0xd0>
 800a9c6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800aa08 <scalbnf+0xd4>
 800a9ca:	eef0 7a40 	vmov.f32	s15, s0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	bf18      	it	ne
 800a9d2:	eeb0 0a47 	vmovne.f32	s0, s14
 800a9d6:	e7db      	b.n	800a990 <scalbnf+0x5c>
 800a9d8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800aa0c <scalbnf+0xd8>
 800a9dc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800aa10 <scalbnf+0xdc>
 800a9e0:	eef0 7a40 	vmov.f32	s15, s0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	e7f3      	b.n	800a9d0 <scalbnf+0x9c>
 800a9e8:	3219      	adds	r2, #25
 800a9ea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a9ee:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800a9f2:	eddf 7a08 	vldr	s15, [pc, #32]	; 800aa14 <scalbnf+0xe0>
 800a9f6:	ee07 3a10 	vmov	s14, r3
 800a9fa:	e7c4      	b.n	800a986 <scalbnf+0x52>
 800a9fc:	ffff3cb0 	.word	0xffff3cb0
 800aa00:	4c000000 	.word	0x4c000000
 800aa04:	7149f2ca 	.word	0x7149f2ca
 800aa08:	f149f2ca 	.word	0xf149f2ca
 800aa0c:	0da24260 	.word	0x0da24260
 800aa10:	8da24260 	.word	0x8da24260
 800aa14:	33000000 	.word	0x33000000

0800aa18 <_init>:
 800aa18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa1a:	bf00      	nop
 800aa1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa1e:	bc08      	pop	{r3}
 800aa20:	469e      	mov	lr, r3
 800aa22:	4770      	bx	lr

0800aa24 <_fini>:
 800aa24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa26:	bf00      	nop
 800aa28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa2a:	bc08      	pop	{r3}
 800aa2c:	469e      	mov	lr, r3
 800aa2e:	4770      	bx	lr
