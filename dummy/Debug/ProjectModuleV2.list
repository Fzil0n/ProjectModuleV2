
ProjectModuleV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d18  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005eb0  08005eb0  00015eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f34  08005f34  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08005f34  08005f34  00015f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f3c  08005f3c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f3c  08005f3c  00015f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f40  08005f40  00015f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005f44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000478  20000080  08005fc4  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  08005fc4  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f80b  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025e6  00000000  00000000  0002f8bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  00031ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c10  00000000  00000000  00032bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000035f0  00000000  00000000  00033800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000137b3  00000000  00000000  00036df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fef4  00000000  00000000  0004a5a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da497  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038ac  00000000  00000000  000da4e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005e98 	.word	0x08005e98

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	08005e98 	.word	0x08005e98

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_frsub>:
 8000a14:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a18:	e002      	b.n	8000a20 <__addsf3>
 8000a1a:	bf00      	nop

08000a1c <__aeabi_fsub>:
 8000a1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a20 <__addsf3>:
 8000a20:	0042      	lsls	r2, r0, #1
 8000a22:	bf1f      	itttt	ne
 8000a24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a28:	ea92 0f03 	teqne	r2, r3
 8000a2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a34:	d06a      	beq.n	8000b0c <__addsf3+0xec>
 8000a36:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a3e:	bfc1      	itttt	gt
 8000a40:	18d2      	addgt	r2, r2, r3
 8000a42:	4041      	eorgt	r1, r0
 8000a44:	4048      	eorgt	r0, r1
 8000a46:	4041      	eorgt	r1, r0
 8000a48:	bfb8      	it	lt
 8000a4a:	425b      	neglt	r3, r3
 8000a4c:	2b19      	cmp	r3, #25
 8000a4e:	bf88      	it	hi
 8000a50:	4770      	bxhi	lr
 8000a52:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a66:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a6a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a6e:	bf18      	it	ne
 8000a70:	4249      	negne	r1, r1
 8000a72:	ea92 0f03 	teq	r2, r3
 8000a76:	d03f      	beq.n	8000af8 <__addsf3+0xd8>
 8000a78:	f1a2 0201 	sub.w	r2, r2, #1
 8000a7c:	fa41 fc03 	asr.w	ip, r1, r3
 8000a80:	eb10 000c 	adds.w	r0, r0, ip
 8000a84:	f1c3 0320 	rsb	r3, r3, #32
 8000a88:	fa01 f103 	lsl.w	r1, r1, r3
 8000a8c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a90:	d502      	bpl.n	8000a98 <__addsf3+0x78>
 8000a92:	4249      	negs	r1, r1
 8000a94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a98:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a9c:	d313      	bcc.n	8000ac6 <__addsf3+0xa6>
 8000a9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aa2:	d306      	bcc.n	8000ab2 <__addsf3+0x92>
 8000aa4:	0840      	lsrs	r0, r0, #1
 8000aa6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aaa:	f102 0201 	add.w	r2, r2, #1
 8000aae:	2afe      	cmp	r2, #254	; 0xfe
 8000ab0:	d251      	bcs.n	8000b56 <__addsf3+0x136>
 8000ab2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ab6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aba:	bf08      	it	eq
 8000abc:	f020 0001 	biceq.w	r0, r0, #1
 8000ac0:	ea40 0003 	orr.w	r0, r0, r3
 8000ac4:	4770      	bx	lr
 8000ac6:	0049      	lsls	r1, r1, #1
 8000ac8:	eb40 0000 	adc.w	r0, r0, r0
 8000acc:	3a01      	subs	r2, #1
 8000ace:	bf28      	it	cs
 8000ad0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ad4:	d2ed      	bcs.n	8000ab2 <__addsf3+0x92>
 8000ad6:	fab0 fc80 	clz	ip, r0
 8000ada:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ade:	ebb2 020c 	subs.w	r2, r2, ip
 8000ae2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ae6:	bfaa      	itet	ge
 8000ae8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aec:	4252      	neglt	r2, r2
 8000aee:	4318      	orrge	r0, r3
 8000af0:	bfbc      	itt	lt
 8000af2:	40d0      	lsrlt	r0, r2
 8000af4:	4318      	orrlt	r0, r3
 8000af6:	4770      	bx	lr
 8000af8:	f092 0f00 	teq	r2, #0
 8000afc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b00:	bf06      	itte	eq
 8000b02:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b06:	3201      	addeq	r2, #1
 8000b08:	3b01      	subne	r3, #1
 8000b0a:	e7b5      	b.n	8000a78 <__addsf3+0x58>
 8000b0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b14:	bf18      	it	ne
 8000b16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b1a:	d021      	beq.n	8000b60 <__addsf3+0x140>
 8000b1c:	ea92 0f03 	teq	r2, r3
 8000b20:	d004      	beq.n	8000b2c <__addsf3+0x10c>
 8000b22:	f092 0f00 	teq	r2, #0
 8000b26:	bf08      	it	eq
 8000b28:	4608      	moveq	r0, r1
 8000b2a:	4770      	bx	lr
 8000b2c:	ea90 0f01 	teq	r0, r1
 8000b30:	bf1c      	itt	ne
 8000b32:	2000      	movne	r0, #0
 8000b34:	4770      	bxne	lr
 8000b36:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b3a:	d104      	bne.n	8000b46 <__addsf3+0x126>
 8000b3c:	0040      	lsls	r0, r0, #1
 8000b3e:	bf28      	it	cs
 8000b40:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b44:	4770      	bx	lr
 8000b46:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b4a:	bf3c      	itt	cc
 8000b4c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b50:	4770      	bxcc	lr
 8000b52:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b56:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	4770      	bx	lr
 8000b60:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b64:	bf16      	itet	ne
 8000b66:	4608      	movne	r0, r1
 8000b68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b6c:	4601      	movne	r1, r0
 8000b6e:	0242      	lsls	r2, r0, #9
 8000b70:	bf06      	itte	eq
 8000b72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b76:	ea90 0f01 	teqeq	r0, r1
 8000b7a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_ui2f>:
 8000b80:	f04f 0300 	mov.w	r3, #0
 8000b84:	e004      	b.n	8000b90 <__aeabi_i2f+0x8>
 8000b86:	bf00      	nop

08000b88 <__aeabi_i2f>:
 8000b88:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b8c:	bf48      	it	mi
 8000b8e:	4240      	negmi	r0, r0
 8000b90:	ea5f 0c00 	movs.w	ip, r0
 8000b94:	bf08      	it	eq
 8000b96:	4770      	bxeq	lr
 8000b98:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b9c:	4601      	mov	r1, r0
 8000b9e:	f04f 0000 	mov.w	r0, #0
 8000ba2:	e01c      	b.n	8000bde <__aeabi_l2f+0x2a>

08000ba4 <__aeabi_ul2f>:
 8000ba4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ba8:	bf08      	it	eq
 8000baa:	4770      	bxeq	lr
 8000bac:	f04f 0300 	mov.w	r3, #0
 8000bb0:	e00a      	b.n	8000bc8 <__aeabi_l2f+0x14>
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_l2f>:
 8000bb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bb8:	bf08      	it	eq
 8000bba:	4770      	bxeq	lr
 8000bbc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bc0:	d502      	bpl.n	8000bc8 <__aeabi_l2f+0x14>
 8000bc2:	4240      	negs	r0, r0
 8000bc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc8:	ea5f 0c01 	movs.w	ip, r1
 8000bcc:	bf02      	ittt	eq
 8000bce:	4684      	moveq	ip, r0
 8000bd0:	4601      	moveq	r1, r0
 8000bd2:	2000      	moveq	r0, #0
 8000bd4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bd8:	bf08      	it	eq
 8000bda:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bde:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000be2:	fabc f28c 	clz	r2, ip
 8000be6:	3a08      	subs	r2, #8
 8000be8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bec:	db10      	blt.n	8000c10 <__aeabi_l2f+0x5c>
 8000bee:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bf2:	4463      	add	r3, ip
 8000bf4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bf8:	f1c2 0220 	rsb	r2, r2, #32
 8000bfc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c00:	fa20 f202 	lsr.w	r2, r0, r2
 8000c04:	eb43 0002 	adc.w	r0, r3, r2
 8000c08:	bf08      	it	eq
 8000c0a:	f020 0001 	biceq.w	r0, r0, #1
 8000c0e:	4770      	bx	lr
 8000c10:	f102 0220 	add.w	r2, r2, #32
 8000c14:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c18:	f1c2 0220 	rsb	r2, r2, #32
 8000c1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c20:	fa21 f202 	lsr.w	r2, r1, r2
 8000c24:	eb43 0002 	adc.w	r0, r3, r2
 8000c28:	bf08      	it	eq
 8000c2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_uldivmod>:
 8000c30:	b953      	cbnz	r3, 8000c48 <__aeabi_uldivmod+0x18>
 8000c32:	b94a      	cbnz	r2, 8000c48 <__aeabi_uldivmod+0x18>
 8000c34:	2900      	cmp	r1, #0
 8000c36:	bf08      	it	eq
 8000c38:	2800      	cmpeq	r0, #0
 8000c3a:	bf1c      	itt	ne
 8000c3c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c40:	f04f 30ff 	movne.w	r0, #4294967295
 8000c44:	f000 b974 	b.w	8000f30 <__aeabi_idiv0>
 8000c48:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c50:	f000 f806 	bl	8000c60 <__udivmoddi4>
 8000c54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5c:	b004      	add	sp, #16
 8000c5e:	4770      	bx	lr

08000c60 <__udivmoddi4>:
 8000c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c64:	9d08      	ldr	r5, [sp, #32]
 8000c66:	4604      	mov	r4, r0
 8000c68:	468e      	mov	lr, r1
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d14d      	bne.n	8000d0a <__udivmoddi4+0xaa>
 8000c6e:	428a      	cmp	r2, r1
 8000c70:	4694      	mov	ip, r2
 8000c72:	d969      	bls.n	8000d48 <__udivmoddi4+0xe8>
 8000c74:	fab2 f282 	clz	r2, r2
 8000c78:	b152      	cbz	r2, 8000c90 <__udivmoddi4+0x30>
 8000c7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c7e:	f1c2 0120 	rsb	r1, r2, #32
 8000c82:	fa20 f101 	lsr.w	r1, r0, r1
 8000c86:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c8a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c8e:	4094      	lsls	r4, r2
 8000c90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c94:	0c21      	lsrs	r1, r4, #16
 8000c96:	fbbe f6f8 	udiv	r6, lr, r8
 8000c9a:	fa1f f78c 	uxth.w	r7, ip
 8000c9e:	fb08 e316 	mls	r3, r8, r6, lr
 8000ca2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ca6:	fb06 f107 	mul.w	r1, r6, r7
 8000caa:	4299      	cmp	r1, r3
 8000cac:	d90a      	bls.n	8000cc4 <__udivmoddi4+0x64>
 8000cae:	eb1c 0303 	adds.w	r3, ip, r3
 8000cb2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cb6:	f080 811f 	bcs.w	8000ef8 <__udivmoddi4+0x298>
 8000cba:	4299      	cmp	r1, r3
 8000cbc:	f240 811c 	bls.w	8000ef8 <__udivmoddi4+0x298>
 8000cc0:	3e02      	subs	r6, #2
 8000cc2:	4463      	add	r3, ip
 8000cc4:	1a5b      	subs	r3, r3, r1
 8000cc6:	b2a4      	uxth	r4, r4
 8000cc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ccc:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd4:	fb00 f707 	mul.w	r7, r0, r7
 8000cd8:	42a7      	cmp	r7, r4
 8000cda:	d90a      	bls.n	8000cf2 <__udivmoddi4+0x92>
 8000cdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce4:	f080 810a 	bcs.w	8000efc <__udivmoddi4+0x29c>
 8000ce8:	42a7      	cmp	r7, r4
 8000cea:	f240 8107 	bls.w	8000efc <__udivmoddi4+0x29c>
 8000cee:	4464      	add	r4, ip
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf6:	1be4      	subs	r4, r4, r7
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	b11d      	cbz	r5, 8000d04 <__udivmoddi4+0xa4>
 8000cfc:	40d4      	lsrs	r4, r2
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e9c5 4300 	strd	r4, r3, [r5]
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d909      	bls.n	8000d22 <__udivmoddi4+0xc2>
 8000d0e:	2d00      	cmp	r5, #0
 8000d10:	f000 80ef 	beq.w	8000ef2 <__udivmoddi4+0x292>
 8000d14:	2600      	movs	r6, #0
 8000d16:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1a:	4630      	mov	r0, r6
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	fab3 f683 	clz	r6, r3
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	d14a      	bne.n	8000dc0 <__udivmoddi4+0x160>
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d302      	bcc.n	8000d34 <__udivmoddi4+0xd4>
 8000d2e:	4282      	cmp	r2, r0
 8000d30:	f200 80f9 	bhi.w	8000f26 <__udivmoddi4+0x2c6>
 8000d34:	1a84      	subs	r4, r0, r2
 8000d36:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	469e      	mov	lr, r3
 8000d3e:	2d00      	cmp	r5, #0
 8000d40:	d0e0      	beq.n	8000d04 <__udivmoddi4+0xa4>
 8000d42:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d46:	e7dd      	b.n	8000d04 <__udivmoddi4+0xa4>
 8000d48:	b902      	cbnz	r2, 8000d4c <__udivmoddi4+0xec>
 8000d4a:	deff      	udf	#255	; 0xff
 8000d4c:	fab2 f282 	clz	r2, r2
 8000d50:	2a00      	cmp	r2, #0
 8000d52:	f040 8092 	bne.w	8000e7a <__udivmoddi4+0x21a>
 8000d56:	eba1 010c 	sub.w	r1, r1, ip
 8000d5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5e:	fa1f fe8c 	uxth.w	lr, ip
 8000d62:	2601      	movs	r6, #1
 8000d64:	0c20      	lsrs	r0, r4, #16
 8000d66:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d6a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d6e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d72:	fb0e f003 	mul.w	r0, lr, r3
 8000d76:	4288      	cmp	r0, r1
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x12c>
 8000d7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x12a>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f200 80cb 	bhi.w	8000f20 <__udivmoddi4+0x2c0>
 8000d8a:	4643      	mov	r3, r8
 8000d8c:	1a09      	subs	r1, r1, r0
 8000d8e:	b2a4      	uxth	r4, r4
 8000d90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d94:	fb07 1110 	mls	r1, r7, r0, r1
 8000d98:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d9c:	fb0e fe00 	mul.w	lr, lr, r0
 8000da0:	45a6      	cmp	lr, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x156>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dac:	d202      	bcs.n	8000db4 <__udivmoddi4+0x154>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f200 80bb 	bhi.w	8000f2a <__udivmoddi4+0x2ca>
 8000db4:	4608      	mov	r0, r1
 8000db6:	eba4 040e 	sub.w	r4, r4, lr
 8000dba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dbe:	e79c      	b.n	8000cfa <__udivmoddi4+0x9a>
 8000dc0:	f1c6 0720 	rsb	r7, r6, #32
 8000dc4:	40b3      	lsls	r3, r6
 8000dc6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dca:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dce:	fa20 f407 	lsr.w	r4, r0, r7
 8000dd2:	fa01 f306 	lsl.w	r3, r1, r6
 8000dd6:	431c      	orrs	r4, r3
 8000dd8:	40f9      	lsrs	r1, r7
 8000dda:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dde:	fa00 f306 	lsl.w	r3, r0, r6
 8000de2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000de6:	0c20      	lsrs	r0, r4, #16
 8000de8:	fa1f fe8c 	uxth.w	lr, ip
 8000dec:	fb09 1118 	mls	r1, r9, r8, r1
 8000df0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000df4:	fb08 f00e 	mul.w	r0, r8, lr
 8000df8:	4288      	cmp	r0, r1
 8000dfa:	fa02 f206 	lsl.w	r2, r2, r6
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b8>
 8000e00:	eb1c 0101 	adds.w	r1, ip, r1
 8000e04:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e08:	f080 8088 	bcs.w	8000f1c <__udivmoddi4+0x2bc>
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	f240 8085 	bls.w	8000f1c <__udivmoddi4+0x2bc>
 8000e12:	f1a8 0802 	sub.w	r8, r8, #2
 8000e16:	4461      	add	r1, ip
 8000e18:	1a09      	subs	r1, r1, r0
 8000e1a:	b2a4      	uxth	r4, r4
 8000e1c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e20:	fb09 1110 	mls	r1, r9, r0, r1
 8000e24:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e2c:	458e      	cmp	lr, r1
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1e2>
 8000e30:	eb1c 0101 	adds.w	r1, ip, r1
 8000e34:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e38:	d26c      	bcs.n	8000f14 <__udivmoddi4+0x2b4>
 8000e3a:	458e      	cmp	lr, r1
 8000e3c:	d96a      	bls.n	8000f14 <__udivmoddi4+0x2b4>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4461      	add	r1, ip
 8000e42:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e46:	fba0 9402 	umull	r9, r4, r0, r2
 8000e4a:	eba1 010e 	sub.w	r1, r1, lr
 8000e4e:	42a1      	cmp	r1, r4
 8000e50:	46c8      	mov	r8, r9
 8000e52:	46a6      	mov	lr, r4
 8000e54:	d356      	bcc.n	8000f04 <__udivmoddi4+0x2a4>
 8000e56:	d053      	beq.n	8000f00 <__udivmoddi4+0x2a0>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x212>
 8000e5a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e5e:	eb61 010e 	sbc.w	r1, r1, lr
 8000e62:	fa01 f707 	lsl.w	r7, r1, r7
 8000e66:	fa22 f306 	lsr.w	r3, r2, r6
 8000e6a:	40f1      	lsrs	r1, r6
 8000e6c:	431f      	orrs	r7, r3
 8000e6e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	f1c2 0320 	rsb	r3, r2, #32
 8000e7e:	40d8      	lsrs	r0, r3
 8000e80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e84:	fa21 f303 	lsr.w	r3, r1, r3
 8000e88:	4091      	lsls	r1, r2
 8000e8a:	4301      	orrs	r1, r0
 8000e8c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e90:	fa1f fe8c 	uxth.w	lr, ip
 8000e94:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e98:	fb07 3610 	mls	r6, r7, r0, r3
 8000e9c:	0c0b      	lsrs	r3, r1, #16
 8000e9e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ea2:	fb00 f60e 	mul.w	r6, r0, lr
 8000ea6:	429e      	cmp	r6, r3
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x260>
 8000eae:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eb6:	d22f      	bcs.n	8000f18 <__udivmoddi4+0x2b8>
 8000eb8:	429e      	cmp	r6, r3
 8000eba:	d92d      	bls.n	8000f18 <__udivmoddi4+0x2b8>
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	1b9b      	subs	r3, r3, r6
 8000ec2:	b289      	uxth	r1, r1
 8000ec4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ec8:	fb07 3316 	mls	r3, r7, r6, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb06 f30e 	mul.w	r3, r6, lr
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x28a>
 8000ed8:	eb1c 0101 	adds.w	r1, ip, r1
 8000edc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ee0:	d216      	bcs.n	8000f10 <__udivmoddi4+0x2b0>
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d914      	bls.n	8000f10 <__udivmoddi4+0x2b0>
 8000ee6:	3e02      	subs	r6, #2
 8000ee8:	4461      	add	r1, ip
 8000eea:	1ac9      	subs	r1, r1, r3
 8000eec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ef0:	e738      	b.n	8000d64 <__udivmoddi4+0x104>
 8000ef2:	462e      	mov	r6, r5
 8000ef4:	4628      	mov	r0, r5
 8000ef6:	e705      	b.n	8000d04 <__udivmoddi4+0xa4>
 8000ef8:	4606      	mov	r6, r0
 8000efa:	e6e3      	b.n	8000cc4 <__udivmoddi4+0x64>
 8000efc:	4618      	mov	r0, r3
 8000efe:	e6f8      	b.n	8000cf2 <__udivmoddi4+0x92>
 8000f00:	454b      	cmp	r3, r9
 8000f02:	d2a9      	bcs.n	8000e58 <__udivmoddi4+0x1f8>
 8000f04:	ebb9 0802 	subs.w	r8, r9, r2
 8000f08:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f0c:	3801      	subs	r0, #1
 8000f0e:	e7a3      	b.n	8000e58 <__udivmoddi4+0x1f8>
 8000f10:	4646      	mov	r6, r8
 8000f12:	e7ea      	b.n	8000eea <__udivmoddi4+0x28a>
 8000f14:	4620      	mov	r0, r4
 8000f16:	e794      	b.n	8000e42 <__udivmoddi4+0x1e2>
 8000f18:	4640      	mov	r0, r8
 8000f1a:	e7d1      	b.n	8000ec0 <__udivmoddi4+0x260>
 8000f1c:	46d0      	mov	r8, sl
 8000f1e:	e77b      	b.n	8000e18 <__udivmoddi4+0x1b8>
 8000f20:	3b02      	subs	r3, #2
 8000f22:	4461      	add	r1, ip
 8000f24:	e732      	b.n	8000d8c <__udivmoddi4+0x12c>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e709      	b.n	8000d3e <__udivmoddi4+0xde>
 8000f2a:	4464      	add	r4, ip
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	e742      	b.n	8000db6 <__udivmoddi4+0x156>

08000f30 <__aeabi_idiv0>:
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <InitKalmanStruct>:
extern arm_matrix_instance_f32 mat_P, mat_P_minus, mat_Q;
extern arm_matrix_instance_f32 mat_C, mat_R, mat_S, mat_K;
extern arm_matrix_instance_f32 mat_temp3x3A,mat_temp3x3B, mat_temp3x1,mat_temp1x3, mat_temp1x1;

void InitKalmanStruct(Kalman* KF,float32_t q,float32_t r)
{
 8000f34:	b5b0      	push	{r4, r5, r7, lr}
 8000f36:	b0a0      	sub	sp, #128	; 0x80
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f40:	edc7 0a01 	vstr	s1, [r7, #4]
	KF->R = r;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	655a      	str	r2, [r3, #84]	; 0x54
	KF->var_Q = q;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	68ba      	ldr	r2, [r7, #8]
 8000f4e:	659a      	str	r2, [r3, #88]	; 0x58
	KF->D = 0;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f04f 0200 	mov.w	r2, #0
 8000f56:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	float32_t a[9] = {
 8000f5a:	4b8d      	ldr	r3, [pc, #564]	; (8001190 <InitKalmanStruct+0x25c>)
 8000f5c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000f60:	461d      	mov	r5, r3
 8000f62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f6a:	682b      	ldr	r3, [r5, #0]
 8000f6c:	6023      	str	r3, [r4, #0]
			1, 0.001/5.0, 0.0000005/25.0,
			0, 1, 0.001/2.5,
			0, 0, 1
	};
	float iden[9] = {
 8000f6e:	4b89      	ldr	r3, [pc, #548]	; (8001194 <InitKalmanStruct+0x260>)
 8000f70:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000f74:	461d      	mov	r5, r3
 8000f76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7e:	682b      	ldr	r3, [r5, #0]
 8000f80:	6023      	str	r3, [r4, #0]
			1, 0, 0,
			0, 1, 0,
			0, 0, 1
	};
	int i;
	for(i=0;i<9;i++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000f86:	e023      	b.n	8000fd0 <InitKalmanStruct+0x9c>
	{
		KF->A[i] = a[i];
 8000f88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	3380      	adds	r3, #128	; 0x80
 8000f8e:	443b      	add	r3, r7
 8000f90:	3b28      	subs	r3, #40	; 0x28
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	68f9      	ldr	r1, [r7, #12]
 8000f96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f98:	3318      	adds	r3, #24
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	601a      	str	r2, [r3, #0]
		KF->I[i] = iden[i];
 8000fa0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	3380      	adds	r3, #128	; 0x80
 8000fa6:	443b      	add	r3, r7
 8000fa8:	3b4c      	subs	r3, #76	; 0x4c
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	68f9      	ldr	r1, [r7, #12]
 8000fae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fb0:	332e      	adds	r3, #46	; 0x2e
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	601a      	str	r2, [r3, #0]
		KF->P[i] = 0;
 8000fb8:	68fa      	ldr	r2, [r7, #12]
 8000fba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fbc:	3302      	adds	r3, #2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	3304      	adds	r3, #4
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
	for(i=0;i<9;i++)
 8000fca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fcc:	3301      	adds	r3, #1
 8000fce:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000fd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fd2:	2b08      	cmp	r3, #8
 8000fd4:	ddd8      	ble.n	8000f88 <InitKalmanStruct+0x54>
	}
	float32_t b[3] = {
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fdc:	f04f 0300 	mov.w	r3, #0
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fe2:	f04f 0300 	mov.w	r3, #0
 8000fe6:	633b      	str	r3, [r7, #48]	; 0x30
			0, 0, 0
	};
	float32_t c[3] = {
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
 8000fee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000ff2:	623b      	str	r3, [r7, #32]
 8000ff4:	f04f 0300 	mov.w	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
			0, 1, 0
	};
	float32_t g[3] = {
 8000ffa:	4a67      	ldr	r2, [pc, #412]	; (8001198 <InitKalmanStruct+0x264>)
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	ca07      	ldmia	r2, {r0, r1, r2}
 8001002:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0.001 * 0.001 * 0.001 / 6*15.625,
			0.0000005/2.5*2.5,
			0.001/2.5
	};

	for(i=0;i<3;i++)
 8001006:	2300      	movs	r3, #0
 8001008:	67fb      	str	r3, [r7, #124]	; 0x7c
 800100a:	e02e      	b.n	800106a <InitKalmanStruct+0x136>
	{
		KF->B[i] = b[i];
 800100c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	3380      	adds	r3, #128	; 0x80
 8001012:	443b      	add	r3, r7
 8001014:	3b58      	subs	r3, #88	; 0x58
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	68f9      	ldr	r1, [r7, #12]
 800101a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800101c:	3320      	adds	r3, #32
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	440b      	add	r3, r1
 8001022:	3304      	adds	r3, #4
 8001024:	601a      	str	r2, [r3, #0]
		KF->C[i] = c[i];
 8001026:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	3380      	adds	r3, #128	; 0x80
 800102c:	443b      	add	r3, r7
 800102e:	3b64      	subs	r3, #100	; 0x64
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	68f9      	ldr	r1, [r7, #12]
 8001034:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001036:	3324      	adds	r3, #36	; 0x24
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	440b      	add	r3, r1
 800103c:	601a      	str	r2, [r3, #0]
		KF->G[i] = g[i];
 800103e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	3380      	adds	r3, #128	; 0x80
 8001044:	443b      	add	r3, r7
 8001046:	3b70      	subs	r3, #112	; 0x70
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	68f9      	ldr	r1, [r7, #12]
 800104c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800104e:	3328      	adds	r3, #40	; 0x28
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	440b      	add	r3, r1
 8001054:	601a      	str	r2, [r3, #0]
		KF->x_hat[i] = 0;
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
	for(i=0;i<3;i++)
 8001064:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001066:	3301      	adds	r3, #1
 8001068:	67fb      	str	r3, [r7, #124]	; 0x7c
 800106a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800106c:	2b02      	cmp	r3, #2
 800106e:	ddcd      	ble.n	800100c <InitKalmanStruct+0xd8>
	}

	  arm_mat_init_f32(&mat_A, 3, 3,KF->A);//3x3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	3360      	adds	r3, #96	; 0x60
 8001074:	2203      	movs	r2, #3
 8001076:	2103      	movs	r1, #3
 8001078:	4848      	ldr	r0, [pc, #288]	; (800119c <InitKalmanStruct+0x268>)
 800107a:	f001 fa73 	bl	8002564 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_x_hat, 3, 1, KF->x_hat);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2201      	movs	r2, #1
 8001082:	2103      	movs	r1, #3
 8001084:	4846      	ldr	r0, [pc, #280]	; (80011a0 <InitKalmanStruct+0x26c>)
 8001086:	f001 fa6d 	bl	8002564 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_x_hat_minus, 3, 1, KF->x_hat_minus);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	33dc      	adds	r3, #220	; 0xdc
 800108e:	2201      	movs	r2, #1
 8001090:	2103      	movs	r1, #3
 8001092:	4844      	ldr	r0, [pc, #272]	; (80011a4 <InitKalmanStruct+0x270>)
 8001094:	f001 fa66 	bl	8002564 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_B, 3, 1, KF->B);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	3384      	adds	r3, #132	; 0x84
 800109c:	2201      	movs	r2, #1
 800109e:	2103      	movs	r1, #3
 80010a0:	4841      	ldr	r0, [pc, #260]	; (80011a8 <InitKalmanStruct+0x274>)
 80010a2:	f001 fa5f 	bl	8002564 <arm_mat_init_f32>
	  //arm_mat_init_f32(&mat_u, 1, 1, NULL);  // Set the input control vector if needed
	  arm_mat_init_f32(&mat_P, 3, 3, KF->P);//3x3
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	330c      	adds	r3, #12
 80010aa:	2203      	movs	r2, #3
 80010ac:	2103      	movs	r1, #3
 80010ae:	483f      	ldr	r0, [pc, #252]	; (80011ac <InitKalmanStruct+0x278>)
 80010b0:	f001 fa58 	bl	8002564 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_P_minus, 3, 3, KF->P_minus);//3x3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	33e8      	adds	r3, #232	; 0xe8
 80010b8:	2203      	movs	r2, #3
 80010ba:	2103      	movs	r1, #3
 80010bc:	483c      	ldr	r0, [pc, #240]	; (80011b0 <InitKalmanStruct+0x27c>)
 80010be:	f001 fa51 	bl	8002564 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_Q, 3, 3,KF->Q);//3x3
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	3330      	adds	r3, #48	; 0x30
 80010c6:	2203      	movs	r2, #3
 80010c8:	2103      	movs	r1, #3
 80010ca:	483a      	ldr	r0, [pc, #232]	; (80011b4 <InitKalmanStruct+0x280>)
 80010cc:	f001 fa4a 	bl	8002564 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_C, 1, 3, KF->C);//1x3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	3390      	adds	r3, #144	; 0x90
 80010d4:	2203      	movs	r2, #3
 80010d6:	2101      	movs	r1, #1
 80010d8:	4837      	ldr	r0, [pc, #220]	; (80011b8 <InitKalmanStruct+0x284>)
 80010da:	f001 fa43 	bl	8002564 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_R, 1, 1, &KF->R);//1x1
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	3354      	adds	r3, #84	; 0x54
 80010e2:	2201      	movs	r2, #1
 80010e4:	2101      	movs	r1, #1
 80010e6:	4835      	ldr	r0, [pc, #212]	; (80011bc <InitKalmanStruct+0x288>)
 80010e8:	f001 fa3c 	bl	8002564 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_S, 1, 1, KF->S);//1x1
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80010f2:	2201      	movs	r2, #1
 80010f4:	2101      	movs	r1, #1
 80010f6:	4832      	ldr	r0, [pc, #200]	; (80011c0 <InitKalmanStruct+0x28c>)
 80010f8:	f001 fa34 	bl	8002564 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_K, 3, 1, KF->K);//3x1
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001102:	2201      	movs	r2, #1
 8001104:	2103      	movs	r1, #3
 8001106:	482f      	ldr	r0, [pc, #188]	; (80011c4 <InitKalmanStruct+0x290>)
 8001108:	f001 fa2c 	bl	8002564 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp3x3A, 3, 3, KF->temp3x3A);//3x3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8001112:	2203      	movs	r2, #3
 8001114:	2103      	movs	r1, #3
 8001116:	482c      	ldr	r0, [pc, #176]	; (80011c8 <InitKalmanStruct+0x294>)
 8001118:	f001 fa24 	bl	8002564 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp3x3B, 3, 3, KF->temp3x3B);//3x3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001122:	2203      	movs	r2, #3
 8001124:	2103      	movs	r1, #3
 8001126:	4829      	ldr	r0, [pc, #164]	; (80011cc <InitKalmanStruct+0x298>)
 8001128:	f001 fa1c 	bl	8002564 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp3x1, 3, 1, KF->temp3x1);//3x1
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8001132:	2201      	movs	r2, #1
 8001134:	2103      	movs	r1, #3
 8001136:	4826      	ldr	r0, [pc, #152]	; (80011d0 <InitKalmanStruct+0x29c>)
 8001138:	f001 fa14 	bl	8002564 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp1x3, 1, 3, KF->temp1x3);//1x3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8001142:	2203      	movs	r2, #3
 8001144:	2101      	movs	r1, #1
 8001146:	4823      	ldr	r0, [pc, #140]	; (80011d4 <InitKalmanStruct+0x2a0>)
 8001148:	f001 fa0c 	bl	8002564 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp1x1, 1, 1, &KF->temp1x1);//1x1
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001152:	2201      	movs	r2, #1
 8001154:	2101      	movs	r1, #1
 8001156:	4820      	ldr	r0, [pc, #128]	; (80011d8 <InitKalmanStruct+0x2a4>)
 8001158:	f001 fa04 	bl	8002564 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_G, 3, 1, KF->G);//3x1
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	33a0      	adds	r3, #160	; 0xa0
 8001160:	2201      	movs	r2, #1
 8001162:	2103      	movs	r1, #3
 8001164:	481d      	ldr	r0, [pc, #116]	; (80011dc <InitKalmanStruct+0x2a8>)
 8001166:	f001 f9fd 	bl	8002564 <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_GT, 1, 3, KF->GT);//1x3
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	33ac      	adds	r3, #172	; 0xac
 800116e:	2203      	movs	r2, #3
 8001170:	2101      	movs	r1, #1
 8001172:	481b      	ldr	r0, [pc, #108]	; (80011e0 <InitKalmanStruct+0x2ac>)
 8001174:	f001 f9f6 	bl	8002564 <arm_mat_init_f32>
	  arm_mat_init_f32(&eye, 3, 3, KF->I);//1x3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	33b8      	adds	r3, #184	; 0xb8
 800117c:	2203      	movs	r2, #3
 800117e:	2103      	movs	r1, #3
 8001180:	4818      	ldr	r0, [pc, #96]	; (80011e4 <InitKalmanStruct+0x2b0>)
 8001182:	f001 f9ef 	bl	8002564 <arm_mat_init_f32>

}
 8001186:	bf00      	nop
 8001188:	3780      	adds	r7, #128	; 0x80
 800118a:	46bd      	mov	sp, r7
 800118c:	bdb0      	pop	{r4, r5, r7, pc}
 800118e:	bf00      	nop
 8001190:	08005eb0 	.word	0x08005eb0
 8001194:	08005ed4 	.word	0x08005ed4
 8001198:	08005ef8 	.word	0x08005ef8
 800119c:	20000458 	.word	0x20000458
 80011a0:	20000460 	.word	0x20000460
 80011a4:	20000468 	.word	0x20000468
 80011a8:	20000470 	.word	0x20000470
 80011ac:	20000480 	.word	0x20000480
 80011b0:	20000488 	.word	0x20000488
 80011b4:	20000490 	.word	0x20000490
 80011b8:	200004a8 	.word	0x200004a8
 80011bc:	200004b0 	.word	0x200004b0
 80011c0:	200004b8 	.word	0x200004b8
 80011c4:	200004c0 	.word	0x200004c0
 80011c8:	200004c8 	.word	0x200004c8
 80011cc:	200004d0 	.word	0x200004d0
 80011d0:	200004d8 	.word	0x200004d8
 80011d4:	200004e0 	.word	0x200004e0
 80011d8:	200004e8 	.word	0x200004e8
 80011dc:	200004a0 	.word	0x200004a0
 80011e0:	20000498 	.word	0x20000498
 80011e4:	20000478 	.word	0x20000478

080011e8 <kalman_filter>:

void kalman_filter()
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
    //Process model: x_hat_minus = mat_A*x_hat
    arm_mat_mult_f32(&mat_A, &mat_x_hat, &mat_x_hat_minus);			//A*X
 80011ec:	4a39      	ldr	r2, [pc, #228]	; (80012d4 <kalman_filter+0xec>)
 80011ee:	493a      	ldr	r1, [pc, #232]	; (80012d8 <kalman_filter+0xf0>)
 80011f0:	483a      	ldr	r0, [pc, #232]	; (80012dc <kalman_filter+0xf4>)
 80011f2:	f001 fd46 	bl	8002c82 <arm_mat_mult_f32>
    // If an input control vector is used:
    // arm_mat_mult_f32(&mat_B, &mat_u, &mat_temp3x3A);
    // arm_mat_add_f32(&mat_x_hat_minus, &mat_temp3x3A, &mat_x_hat_minus);

    // Predict covariance matrix: P_minus = A * P * A^T + Q
    arm_mat_trans_f32(&mat_A, &mat_temp3x3A);					    //AT
 80011f6:	493a      	ldr	r1, [pc, #232]	; (80012e0 <kalman_filter+0xf8>)
 80011f8:	4838      	ldr	r0, [pc, #224]	; (80012dc <kalman_filter+0xf4>)
 80011fa:	f001 fe2d 	bl	8002e58 <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_A, &mat_P, &mat_temp3x3B);			    //A*P
 80011fe:	4a39      	ldr	r2, [pc, #228]	; (80012e4 <kalman_filter+0xfc>)
 8001200:	4939      	ldr	r1, [pc, #228]	; (80012e8 <kalman_filter+0x100>)
 8001202:	4836      	ldr	r0, [pc, #216]	; (80012dc <kalman_filter+0xf4>)
 8001204:	f001 fd3d 	bl	8002c82 <arm_mat_mult_f32>
    arm_mat_mult_f32(&mat_temp3x3B, &mat_temp3x3A, &mat_P_minus);	//A*P*AT
 8001208:	4a38      	ldr	r2, [pc, #224]	; (80012ec <kalman_filter+0x104>)
 800120a:	4935      	ldr	r1, [pc, #212]	; (80012e0 <kalman_filter+0xf8>)
 800120c:	4835      	ldr	r0, [pc, #212]	; (80012e4 <kalman_filter+0xfc>)
 800120e:	f001 fd38 	bl	8002c82 <arm_mat_mult_f32>
    arm_mat_trans_f32(&mat_G, &mat_GT);								//GT
 8001212:	4937      	ldr	r1, [pc, #220]	; (80012f0 <kalman_filter+0x108>)
 8001214:	4837      	ldr	r0, [pc, #220]	; (80012f4 <kalman_filter+0x10c>)
 8001216:	f001 fe1f 	bl	8002e58 <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_G, &mat_GT, &mat_Q);						//G*GT
 800121a:	4a37      	ldr	r2, [pc, #220]	; (80012f8 <kalman_filter+0x110>)
 800121c:	4934      	ldr	r1, [pc, #208]	; (80012f0 <kalman_filter+0x108>)
 800121e:	4835      	ldr	r0, [pc, #212]	; (80012f4 <kalman_filter+0x10c>)
 8001220:	f001 fd2f 	bl	8002c82 <arm_mat_mult_f32>
    arm_mat_scale_f32(&mat_Q,KF.var_Q, &mat_Q);						//G*GT*var_q
 8001224:	4b35      	ldr	r3, [pc, #212]	; (80012fc <kalman_filter+0x114>)
 8001226:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800122a:	4933      	ldr	r1, [pc, #204]	; (80012f8 <kalman_filter+0x110>)
 800122c:	eeb0 0a67 	vmov.f32	s0, s15
 8001230:	4831      	ldr	r0, [pc, #196]	; (80012f8 <kalman_filter+0x110>)
 8001232:	f001 fda0 	bl	8002d76 <arm_mat_scale_f32>
    arm_mat_add_f32(&mat_P_minus, &mat_Q, &mat_P_minus);			//A * P * A^T + Q
 8001236:	4a2d      	ldr	r2, [pc, #180]	; (80012ec <kalman_filter+0x104>)
 8001238:	492f      	ldr	r1, [pc, #188]	; (80012f8 <kalman_filter+0x110>)
 800123a:	482c      	ldr	r0, [pc, #176]	; (80012ec <kalman_filter+0x104>)
 800123c:	f001 f957 	bl	80024ee <arm_mat_add_f32>

    // Calculate innovation covariance: S = C * P_minus * C^T + R
    arm_mat_mult_f32(&mat_C, &mat_P_minus, &mat_temp1x3);			//C*P
 8001240:	4a2f      	ldr	r2, [pc, #188]	; (8001300 <kalman_filter+0x118>)
 8001242:	492a      	ldr	r1, [pc, #168]	; (80012ec <kalman_filter+0x104>)
 8001244:	482f      	ldr	r0, [pc, #188]	; (8001304 <kalman_filter+0x11c>)
 8001246:	f001 fd1c 	bl	8002c82 <arm_mat_mult_f32>
    arm_mat_trans_f32(&mat_C, &mat_temp3x1);						//CT
 800124a:	492f      	ldr	r1, [pc, #188]	; (8001308 <kalman_filter+0x120>)
 800124c:	482d      	ldr	r0, [pc, #180]	; (8001304 <kalman_filter+0x11c>)
 800124e:	f001 fe03 	bl	8002e58 <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_temp1x3, &mat_temp3x1, &mat_temp1x1);		//C*P*C^T
 8001252:	4a2e      	ldr	r2, [pc, #184]	; (800130c <kalman_filter+0x124>)
 8001254:	492c      	ldr	r1, [pc, #176]	; (8001308 <kalman_filter+0x120>)
 8001256:	482a      	ldr	r0, [pc, #168]	; (8001300 <kalman_filter+0x118>)
 8001258:	f001 fd13 	bl	8002c82 <arm_mat_mult_f32>
    arm_mat_add_f32(&mat_temp1x1, &mat_R, &mat_S);					//C*P*C^T + R
 800125c:	4a2c      	ldr	r2, [pc, #176]	; (8001310 <kalman_filter+0x128>)
 800125e:	492d      	ldr	r1, [pc, #180]	; (8001314 <kalman_filter+0x12c>)
 8001260:	482a      	ldr	r0, [pc, #168]	; (800130c <kalman_filter+0x124>)
 8001262:	f001 f944 	bl	80024ee <arm_mat_add_f32>

    //==> Calculate Kalman gain: K = P_minus * C^T * S^(-1)
    arm_mat_inverse_f32(&mat_S, &mat_temp1x1);						//inv(S)
 8001266:	4929      	ldr	r1, [pc, #164]	; (800130c <kalman_filter+0x124>)
 8001268:	4829      	ldr	r0, [pc, #164]	; (8001310 <kalman_filter+0x128>)
 800126a:	f001 f993 	bl	8002594 <arm_mat_inverse_f32>
    arm_mat_mult_f32(&mat_P_minus, &mat_temp3x1, &mat_temp3x3A);	//P*CT
 800126e:	4a1c      	ldr	r2, [pc, #112]	; (80012e0 <kalman_filter+0xf8>)
 8001270:	4925      	ldr	r1, [pc, #148]	; (8001308 <kalman_filter+0x120>)
 8001272:	481e      	ldr	r0, [pc, #120]	; (80012ec <kalman_filter+0x104>)
 8001274:	f001 fd05 	bl	8002c82 <arm_mat_mult_f32>
    arm_mat_mult_f32(&mat_temp3x3A, &mat_temp1x1, &mat_K);			//P*CT*inv(S)
 8001278:	4a27      	ldr	r2, [pc, #156]	; (8001318 <kalman_filter+0x130>)
 800127a:	4924      	ldr	r1, [pc, #144]	; (800130c <kalman_filter+0x124>)
 800127c:	4818      	ldr	r0, [pc, #96]	; (80012e0 <kalman_filter+0xf8>)
 800127e:	f001 fd00 	bl	8002c82 <arm_mat_mult_f32>

    //==> Update state estimate: x_hat = x_hat_minus + K * (z - C * x_hat_minus)
    arm_mat_mult_f32(&mat_C, &mat_x_hat_minus, &mat_temp1x1);		//C*X
 8001282:	4a22      	ldr	r2, [pc, #136]	; (800130c <kalman_filter+0x124>)
 8001284:	4913      	ldr	r1, [pc, #76]	; (80012d4 <kalman_filter+0xec>)
 8001286:	481f      	ldr	r0, [pc, #124]	; (8001304 <kalman_filter+0x11c>)
 8001288:	f001 fcfb 	bl	8002c82 <arm_mat_mult_f32>
    //float32_t innovation = z - temp1x1;								//Z-C*X
    arm_mat_scale_f32(&mat_K, KF.z - KF.temp1x1, &mat_temp3x1);			//K*(Z-C*X)
 800128c:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <kalman_filter+0x114>)
 800128e:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8001292:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <kalman_filter+0x114>)
 8001294:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
 8001298:	ee77 7a67 	vsub.f32	s15, s14, s15
 800129c:	491a      	ldr	r1, [pc, #104]	; (8001308 <kalman_filter+0x120>)
 800129e:	eeb0 0a67 	vmov.f32	s0, s15
 80012a2:	481d      	ldr	r0, [pc, #116]	; (8001318 <kalman_filter+0x130>)
 80012a4:	f001 fd67 	bl	8002d76 <arm_mat_scale_f32>
    arm_mat_add_f32(&mat_x_hat_minus, &mat_temp3x1, &mat_x_hat);	//X - K*(Z-C*X) ========> X estimate
 80012a8:	4a0b      	ldr	r2, [pc, #44]	; (80012d8 <kalman_filter+0xf0>)
 80012aa:	4917      	ldr	r1, [pc, #92]	; (8001308 <kalman_filter+0x120>)
 80012ac:	4809      	ldr	r0, [pc, #36]	; (80012d4 <kalman_filter+0xec>)
 80012ae:	f001 f91e 	bl	80024ee <arm_mat_add_f32>

    // Update covariance matrix: P = (I - K * C) * P_minus
    arm_mat_mult_f32(&mat_K, &mat_C, &mat_temp3x3B);				//K*C
 80012b2:	4a0c      	ldr	r2, [pc, #48]	; (80012e4 <kalman_filter+0xfc>)
 80012b4:	4913      	ldr	r1, [pc, #76]	; (8001304 <kalman_filter+0x11c>)
 80012b6:	4818      	ldr	r0, [pc, #96]	; (8001318 <kalman_filter+0x130>)
 80012b8:	f001 fce3 	bl	8002c82 <arm_mat_mult_f32>
    arm_mat_sub_f32(&eye, &mat_P_minus, &mat_temp3x3A);				//I - K*C
 80012bc:	4a08      	ldr	r2, [pc, #32]	; (80012e0 <kalman_filter+0xf8>)
 80012be:	490b      	ldr	r1, [pc, #44]	; (80012ec <kalman_filter+0x104>)
 80012c0:	4816      	ldr	r0, [pc, #88]	; (800131c <kalman_filter+0x134>)
 80012c2:	f001 fd8e 	bl	8002de2 <arm_mat_sub_f32>
    arm_mat_mult_f32(&mat_temp3x3A, &mat_P_minus, &mat_P);			//(I - K*C)*P ===========> P estimate
 80012c6:	4a08      	ldr	r2, [pc, #32]	; (80012e8 <kalman_filter+0x100>)
 80012c8:	4908      	ldr	r1, [pc, #32]	; (80012ec <kalman_filter+0x104>)
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <kalman_filter+0xf8>)
 80012cc:	f001 fcd9 	bl	8002c82 <arm_mat_mult_f32>
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000468 	.word	0x20000468
 80012d8:	20000460 	.word	0x20000460
 80012dc:	20000458 	.word	0x20000458
 80012e0:	200004c8 	.word	0x200004c8
 80012e4:	200004d0 	.word	0x200004d0
 80012e8:	20000480 	.word	0x20000480
 80012ec:	20000488 	.word	0x20000488
 80012f0:	20000498 	.word	0x20000498
 80012f4:	200004a0 	.word	0x200004a0
 80012f8:	20000490 	.word	0x20000490
 80012fc:	200002d8 	.word	0x200002d8
 8001300:	200004e0 	.word	0x200004e0
 8001304:	200004a8 	.word	0x200004a8
 8001308:	200004d8 	.word	0x200004d8
 800130c:	200004e8 	.word	0x200004e8
 8001310:	200004b8 	.word	0x200004b8
 8001314:	200004b0 	.word	0x200004b0
 8001318:	200004c0 	.word	0x200004c0
 800131c:	20000478 	.word	0x20000478

08001320 <PIDSetup>:
 */

#include "PIDController.h"

void PIDSetup(PID* temp,float32_t Kp, float32_t Ki, float32_t Kd)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	ed87 0a02 	vstr	s0, [r7, #8]
 800132c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001330:	ed87 1a00 	vstr	s2, [r7]
	temp->Kp = Kp;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	601a      	str	r2, [r3, #0]
	temp->Ki = Ki;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	605a      	str	r2, [r3, #4]
	temp->Kd = Kd;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	609a      	str	r2, [r3, #8]
	temp->U = 0;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2200      	movs	r2, #0
 800134a:	60da      	str	r2, [r3, #12]
	temp->Delta_U = 0;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]
	temp->U_minus = 0;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2200      	movs	r2, #0
 8001356:	615a      	str	r2, [r3, #20]
	temp->Error = 0;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
	temp->Error_minus = 0;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	61da      	str	r2, [r3, #28]
	temp->Error_minus2 = 0;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	621a      	str	r2, [r3, #32]
}
 8001370:	bf00      	nop
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <QuinticSetup>:
 *      Author: tanawatp
 */
#include "QuinticTrajectory.h"

void QuinticSetup(QuinticTraj* temp, float32_t vmax, float32_t amax)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	ed87 0a02 	vstr	s0, [r7, #8]
 8001388:	edc7 0a01 	vstr	s1, [r7, #4]
	temp->v_max = vmax;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	619a      	str	r2, [r3, #24]
	temp->a_max = amax;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	61da      	str	r2, [r3, #28]
	temp->State = Ready;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	temp->final_pos = 300;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <QuinticSetup+0x38>)
 80013a4:	605a      	str	r2, [r3, #4]
}
 80013a6:	bf00      	nop
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	43960000 	.word	0x43960000

080013b8 <QuinticGenerator>:
void QuinticGenerator(QuinticTraj* temp)
{
 80013b8:	b5b0      	push	{r4, r5, r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	temp->displacement = temp->final_pos - temp->start_pos;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	ed93 7a01 	vldr	s14, [r3, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	edd3 7a00 	vldr	s15, [r3]
 80013cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	edc3 7a02 	vstr	s15, [r3, #8]
	if(temp->displacement<0)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80013dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e4:	d504      	bpl.n	80013f0 <QuinticGenerator+0x38>
	{
		temp->Dir = 1;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2201      	movs	r2, #1
 80013ea:	f883 2020 	strb.w	r2, [r3, #32]
 80013ee:	e00b      	b.n	8001408 <QuinticGenerator+0x50>
	}
	else if (temp->displacement>0)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80013f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fe:	dd03      	ble.n	8001408 <QuinticGenerator+0x50>
	{
		temp->Dir = 0;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2020 	strb.w	r2, [r3, #32]
	}
	temp->timeAcc = 0.5*sqrtf(23.094*fabs(temp->displacement)/temp->a_max);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	edd3 7a02 	vldr	s15, [r3, #8]
 800140e:	eef0 7ae7 	vabs.f32	s15, s15
 8001412:	ee17 0a90 	vmov	r0, s15
 8001416:	f7ff f843 	bl	80004a0 <__aeabi_f2d>
 800141a:	a382      	add	r3, pc, #520	; (adr r3, 8001624 <QuinticGenerator+0x26c>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	f7ff f896 	bl	8000550 <__aeabi_dmul>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4614      	mov	r4, r2
 800142a:	461d      	mov	r5, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69db      	ldr	r3, [r3, #28]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff f835 	bl	80004a0 <__aeabi_f2d>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4620      	mov	r0, r4
 800143c:	4629      	mov	r1, r5
 800143e:	f7ff f9b1 	bl	80007a4 <__aeabi_ddiv>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4610      	mov	r0, r2
 8001448:	4619      	mov	r1, r3
 800144a:	f7ff fa93 	bl	8000974 <__aeabi_d2f>
 800144e:	4603      	mov	r3, r0
 8001450:	ee00 3a10 	vmov	s0, r3
 8001454:	f004 f988 	bl	8005768 <sqrtf>
 8001458:	ee10 3a10 	vmov	r3, s0
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f81f 	bl	80004a0 <__aeabi_f2d>
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	4b6a      	ldr	r3, [pc, #424]	; (8001610 <QuinticGenerator+0x258>)
 8001468:	f7ff f872 	bl	8000550 <__aeabi_dmul>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4610      	mov	r0, r2
 8001472:	4619      	mov	r1, r3
 8001474:	f7ff fa7e 	bl	8000974 <__aeabi_d2f>
 8001478:	4602      	mov	r2, r0
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	645a      	str	r2, [r3, #68]	; 0x44
	temp->timeVelo = 1.875*fabs(temp->displacement)/temp->v_max;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	edd3 7a02 	vldr	s15, [r3, #8]
 8001484:	eef0 7ae7 	vabs.f32	s15, s15
 8001488:	ee17 0a90 	vmov	r0, s15
 800148c:	f7ff f808 	bl	80004a0 <__aeabi_f2d>
 8001490:	f04f 0200 	mov.w	r2, #0
 8001494:	4b5f      	ldr	r3, [pc, #380]	; (8001614 <QuinticGenerator+0x25c>)
 8001496:	f7ff f85b 	bl	8000550 <__aeabi_dmul>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4614      	mov	r4, r2
 80014a0:	461d      	mov	r5, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7fe fffa 	bl	80004a0 <__aeabi_f2d>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4620      	mov	r0, r4
 80014b2:	4629      	mov	r1, r5
 80014b4:	f7ff f976 	bl	80007a4 <__aeabi_ddiv>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4610      	mov	r0, r2
 80014be:	4619      	mov	r1, r3
 80014c0:	f7ff fa58 	bl	8000974 <__aeabi_d2f>
 80014c4:	4602      	mov	r2, r0
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	649a      	str	r2, [r3, #72]	; 0x48
	temp->TotalTime = MAX(temp->timeAcc,temp->timeVelo);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80014d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014de:	dd02      	ble.n	80014e6 <QuinticGenerator+0x12e>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e4:	e001      	b.n	80014ea <QuinticGenerator+0x132>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	63d3      	str	r3, [r2, #60]	; 0x3c
	temp->coeff[0] = temp->start_pos;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	625a      	str	r2, [r3, #36]	; 0x24
	temp->coeff[1] = 0;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	629a      	str	r2, [r3, #40]	; 0x28
	temp->coeff[2] = 0;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	62da      	str	r2, [r3, #44]	; 0x2c
	temp->coeff[3] = 10.0*temp->displacement/powf(temp->TotalTime,3);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe ffc8 	bl	80004a0 <__aeabi_f2d>
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	4b40      	ldr	r3, [pc, #256]	; (8001618 <QuinticGenerator+0x260>)
 8001516:	f7ff f81b 	bl	8000550 <__aeabi_dmul>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4614      	mov	r4, r2
 8001520:	461d      	mov	r5, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001528:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 800152c:	eeb0 0a67 	vmov.f32	s0, s15
 8001530:	f004 f8c2 	bl	80056b8 <powf>
 8001534:	ee10 3a10 	vmov	r3, s0
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe ffb1 	bl	80004a0 <__aeabi_f2d>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4620      	mov	r0, r4
 8001544:	4629      	mov	r1, r5
 8001546:	f7ff f92d 	bl	80007a4 <__aeabi_ddiv>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	f7ff fa0f 	bl	8000974 <__aeabi_d2f>
 8001556:	4602      	mov	r2, r0
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	631a      	str	r2, [r3, #48]	; 0x30
	temp->coeff[4] = -15.0*temp->displacement/powf(temp->TotalTime,4);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe ff9d 	bl	80004a0 <__aeabi_f2d>
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	4b2c      	ldr	r3, [pc, #176]	; (800161c <QuinticGenerator+0x264>)
 800156c:	f7fe fff0 	bl	8000550 <__aeabi_dmul>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4614      	mov	r4, r2
 8001576:	461d      	mov	r5, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800157e:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001582:	eeb0 0a67 	vmov.f32	s0, s15
 8001586:	f004 f897 	bl	80056b8 <powf>
 800158a:	ee10 3a10 	vmov	r3, s0
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe ff86 	bl	80004a0 <__aeabi_f2d>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4620      	mov	r0, r4
 800159a:	4629      	mov	r1, r5
 800159c:	f7ff f902 	bl	80007a4 <__aeabi_ddiv>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	f7ff f9e4 	bl	8000974 <__aeabi_d2f>
 80015ac:	4602      	mov	r2, r0
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	635a      	str	r2, [r3, #52]	; 0x34
	temp->coeff[5] = 6.0*temp->displacement/powf(temp->TotalTime,5);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ff72 	bl	80004a0 <__aeabi_f2d>
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	4b17      	ldr	r3, [pc, #92]	; (8001620 <QuinticGenerator+0x268>)
 80015c2:	f7fe ffc5 	bl	8000550 <__aeabi_dmul>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4614      	mov	r4, r2
 80015cc:	461d      	mov	r5, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80015d4:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80015d8:	eeb0 0a67 	vmov.f32	s0, s15
 80015dc:	f004 f86c 	bl	80056b8 <powf>
 80015e0:	ee10 3a10 	vmov	r3, s0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ff5b 	bl	80004a0 <__aeabi_f2d>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4620      	mov	r0, r4
 80015f0:	4629      	mov	r1, r5
 80015f2:	f7ff f8d7 	bl	80007a4 <__aeabi_ddiv>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4610      	mov	r0, r2
 80015fc:	4619      	mov	r1, r3
 80015fe:	f7ff f9b9 	bl	8000974 <__aeabi_d2f>
 8001602:	4602      	mov	r2, r0
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bdb0      	pop	{r4, r5, r7, pc}
 8001610:	3fe00000 	.word	0x3fe00000
 8001614:	3ffe0000 	.word	0x3ffe0000
 8001618:	40240000 	.word	0x40240000
 800161c:	c02e0000 	.word	0xc02e0000
 8001620:	40180000 	.word	0x40180000
 8001624:	624dd2f2 	.word	0x624dd2f2
 8001628:	40371810 	.word	0x40371810

0800162c <QuinticEvaluator>:
void QuinticEvaluator(QuinticTraj* temp)
{
 800162c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001630:	ed2d 8b02 	vpush	{d8}
 8001634:	b084      	sub	sp, #16
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
	float32_t time = temp->time;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	60fb      	str	r3, [r7, #12]
	temp->current_pos = temp->coeff[0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
						+ temp->coeff[1]*time
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800164c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001650:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001654:	ee37 8a27 	vadd.f32	s16, s14, s15
						+ temp->coeff[2]*powf(time,2)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	edd3 8a0b 	vldr	s17, [r3, #44]	; 0x2c
 800165e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001662:	ed97 0a03 	vldr	s0, [r7, #12]
 8001666:	f004 f827 	bl	80056b8 <powf>
 800166a:	eef0 7a40 	vmov.f32	s15, s0
 800166e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001672:	ee38 8a27 	vadd.f32	s16, s16, s15
						+ temp->coeff[3]*powf(time,3)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	edd3 8a0c 	vldr	s17, [r3, #48]	; 0x30
 800167c:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001680:	ed97 0a03 	vldr	s0, [r7, #12]
 8001684:	f004 f818 	bl	80056b8 <powf>
 8001688:	eef0 7a40 	vmov.f32	s15, s0
 800168c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001690:	ee38 8a27 	vadd.f32	s16, s16, s15
						+ temp->coeff[4]*powf(time,4)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	edd3 8a0d 	vldr	s17, [r3, #52]	; 0x34
 800169a:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800169e:	ed97 0a03 	vldr	s0, [r7, #12]
 80016a2:	f004 f809 	bl	80056b8 <powf>
 80016a6:	eef0 7a40 	vmov.f32	s15, s0
 80016aa:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80016ae:	ee38 8a27 	vadd.f32	s16, s16, s15
						+ temp->coeff[5]*powf(time,5);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	edd3 8a0e 	vldr	s17, [r3, #56]	; 0x38
 80016b8:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80016bc:	ed97 0a03 	vldr	s0, [r7, #12]
 80016c0:	f003 fffa 	bl	80056b8 <powf>
 80016c4:	eef0 7a40 	vmov.f32	s15, s0
 80016c8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80016cc:	ee78 7a27 	vadd.f32	s15, s16, s15
	temp->current_pos = temp->coeff[0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	edc3 7a03 	vstr	s15, [r3, #12]

	temp->current_velo = temp->coeff[1]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe fee0 	bl	80004a0 <__aeabi_f2d>
 80016e0:	4604      	mov	r4, r0
 80016e2:	460d      	mov	r5, r1
						+ 2.0*temp->coeff[2]*time
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe fed9 	bl	80004a0 <__aeabi_f2d>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	f7fe fd77 	bl	80001e4 <__adddf3>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	4690      	mov	r8, r2
 80016fc:	4699      	mov	r9, r3
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f7fe fece 	bl	80004a0 <__aeabi_f2d>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4640      	mov	r0, r8
 800170a:	4649      	mov	r1, r9
 800170c:	f7fe ff20 	bl	8000550 <__aeabi_dmul>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4620      	mov	r0, r4
 8001716:	4629      	mov	r1, r5
 8001718:	f7fe fd64 	bl	80001e4 <__adddf3>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	4614      	mov	r4, r2
 8001722:	461d      	mov	r5, r3
						+ 3.0*temp->coeff[3]*powf(time,2)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe feb9 	bl	80004a0 <__aeabi_f2d>
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	4b90      	ldr	r3, [pc, #576]	; (8001974 <QuinticEvaluator+0x348>)
 8001734:	f7fe ff0c 	bl	8000550 <__aeabi_dmul>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4690      	mov	r8, r2
 800173e:	4699      	mov	r9, r3
 8001740:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001744:	ed97 0a03 	vldr	s0, [r7, #12]
 8001748:	f003 ffb6 	bl	80056b8 <powf>
 800174c:	ee10 3a10 	vmov	r3, s0
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe fea5 	bl	80004a0 <__aeabi_f2d>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4640      	mov	r0, r8
 800175c:	4649      	mov	r1, r9
 800175e:	f7fe fef7 	bl	8000550 <__aeabi_dmul>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4620      	mov	r0, r4
 8001768:	4629      	mov	r1, r5
 800176a:	f7fe fd3b 	bl	80001e4 <__adddf3>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4614      	mov	r4, r2
 8001774:	461d      	mov	r5, r3
						+ 4.0*temp->coeff[4]*powf(time,3)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fe90 	bl	80004a0 <__aeabi_f2d>
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	4b7c      	ldr	r3, [pc, #496]	; (8001978 <QuinticEvaluator+0x34c>)
 8001786:	f7fe fee3 	bl	8000550 <__aeabi_dmul>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4690      	mov	r8, r2
 8001790:	4699      	mov	r9, r3
 8001792:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001796:	ed97 0a03 	vldr	s0, [r7, #12]
 800179a:	f003 ff8d 	bl	80056b8 <powf>
 800179e:	ee10 3a10 	vmov	r3, s0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fe7c 	bl	80004a0 <__aeabi_f2d>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4640      	mov	r0, r8
 80017ae:	4649      	mov	r1, r9
 80017b0:	f7fe fece 	bl	8000550 <__aeabi_dmul>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4620      	mov	r0, r4
 80017ba:	4629      	mov	r1, r5
 80017bc:	f7fe fd12 	bl	80001e4 <__adddf3>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4614      	mov	r4, r2
 80017c6:	461d      	mov	r5, r3
						+ 5.0*temp->coeff[5]*powf(time,4);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe fe67 	bl	80004a0 <__aeabi_f2d>
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	4b69      	ldr	r3, [pc, #420]	; (800197c <QuinticEvaluator+0x350>)
 80017d8:	f7fe feba 	bl	8000550 <__aeabi_dmul>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4690      	mov	r8, r2
 80017e2:	4699      	mov	r9, r3
 80017e4:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80017e8:	ed97 0a03 	vldr	s0, [r7, #12]
 80017ec:	f003 ff64 	bl	80056b8 <powf>
 80017f0:	ee10 3a10 	vmov	r3, s0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7fe fe53 	bl	80004a0 <__aeabi_f2d>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4640      	mov	r0, r8
 8001800:	4649      	mov	r1, r9
 8001802:	f7fe fea5 	bl	8000550 <__aeabi_dmul>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4620      	mov	r0, r4
 800180c:	4629      	mov	r1, r5
 800180e:	f7fe fce9 	bl	80001e4 <__adddf3>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4610      	mov	r0, r2
 8001818:	4619      	mov	r1, r3
 800181a:	f7ff f8ab 	bl	8000974 <__aeabi_d2f>
 800181e:	4602      	mov	r2, r0
	temp->current_velo = temp->coeff[1]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	611a      	str	r2, [r3, #16]

	temp->current_acc = 2.0*temp->coeff[2]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fe39 	bl	80004a0 <__aeabi_f2d>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	f7fe fcd7 	bl	80001e4 <__adddf3>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4614      	mov	r4, r2
 800183c:	461d      	mov	r5, r3
						+ 6.0*temp->coeff[3]*time
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fe2c 	bl	80004a0 <__aeabi_f2d>
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	4b4c      	ldr	r3, [pc, #304]	; (8001980 <QuinticEvaluator+0x354>)
 800184e:	f7fe fe7f 	bl	8000550 <__aeabi_dmul>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4690      	mov	r8, r2
 8001858:	4699      	mov	r9, r3
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f7fe fe20 	bl	80004a0 <__aeabi_f2d>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4640      	mov	r0, r8
 8001866:	4649      	mov	r1, r9
 8001868:	f7fe fe72 	bl	8000550 <__aeabi_dmul>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4620      	mov	r0, r4
 8001872:	4629      	mov	r1, r5
 8001874:	f7fe fcb6 	bl	80001e4 <__adddf3>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4614      	mov	r4, r2
 800187e:	461d      	mov	r5, r3
						+ 12.0*temp->coeff[4]*powf(time,2)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fe0b 	bl	80004a0 <__aeabi_f2d>
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	4b3d      	ldr	r3, [pc, #244]	; (8001984 <QuinticEvaluator+0x358>)
 8001890:	f7fe fe5e 	bl	8000550 <__aeabi_dmul>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4690      	mov	r8, r2
 800189a:	4699      	mov	r9, r3
 800189c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80018a0:	ed97 0a03 	vldr	s0, [r7, #12]
 80018a4:	f003 ff08 	bl	80056b8 <powf>
 80018a8:	ee10 3a10 	vmov	r3, s0
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fdf7 	bl	80004a0 <__aeabi_f2d>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4640      	mov	r0, r8
 80018b8:	4649      	mov	r1, r9
 80018ba:	f7fe fe49 	bl	8000550 <__aeabi_dmul>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4620      	mov	r0, r4
 80018c4:	4629      	mov	r1, r5
 80018c6:	f7fe fc8d 	bl	80001e4 <__adddf3>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4614      	mov	r4, r2
 80018d0:	461d      	mov	r5, r3
						+ 20.0*temp->coeff[5]*powf(time,3);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7fe fde2 	bl	80004a0 <__aeabi_f2d>
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	4b29      	ldr	r3, [pc, #164]	; (8001988 <QuinticEvaluator+0x35c>)
 80018e2:	f7fe fe35 	bl	8000550 <__aeabi_dmul>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4690      	mov	r8, r2
 80018ec:	4699      	mov	r9, r3
 80018ee:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80018f2:	ed97 0a03 	vldr	s0, [r7, #12]
 80018f6:	f003 fedf 	bl	80056b8 <powf>
 80018fa:	ee10 3a10 	vmov	r3, s0
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fdce 	bl	80004a0 <__aeabi_f2d>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4640      	mov	r0, r8
 800190a:	4649      	mov	r1, r9
 800190c:	f7fe fe20 	bl	8000550 <__aeabi_dmul>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4620      	mov	r0, r4
 8001916:	4629      	mov	r1, r5
 8001918:	f7fe fc64 	bl	80001e4 <__adddf3>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4610      	mov	r0, r2
 8001922:	4619      	mov	r1, r3
 8001924:	f7ff f826 	bl	8000974 <__aeabi_d2f>
 8001928:	4602      	mov	r2, r0
	temp->current_acc = 2.0*temp->coeff[2]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	615a      	str	r2, [r3, #20]
	if(time >= temp->TotalTime)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001934:	ed97 7a03 	vldr	s14, [r7, #12]
 8001938:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800193c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001940:	da00      	bge.n	8001944 <QuinticEvaluator+0x318>
//		else if(temp->start_pos == 300)
//		{
//			temp->final_pos = 0;
//		}
	}
}
 8001942:	e00f      	b.n	8001964 <QuinticEvaluator+0x338>
		temp->start_pos = temp->final_pos;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	601a      	str	r2, [r3, #0]
		temp->current_pos = temp->start_pos;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	60da      	str	r2, [r3, #12]
		temp->current_velo = 0;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	611a      	str	r2, [r3, #16]
		temp->current_acc = 0;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	615a      	str	r2, [r3, #20]
}
 8001964:	bf00      	nop
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	ecbd 8b02 	vpop	{d8}
 800196e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001972:	bf00      	nop
 8001974:	40080000 	.word	0x40080000
 8001978:	40100000 	.word	0x40100000
 800197c:	40140000 	.word	0x40140000
 8001980:	40180000 	.word	0x40180000
 8001984:	40280000 	.word	0x40280000
 8001988:	40340000 	.word	0x40340000

0800198c <QuinticRun>:
void QuinticRun(QuinticTraj* temp,float32_t dt)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	ed87 0a00 	vstr	s0, [r7]
	switch(temp->State)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d022      	beq.n	80019e8 <QuinticRun+0x5c>
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	dc3f      	bgt.n	8001a26 <QuinticRun+0x9a>
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d002      	beq.n	80019b0 <QuinticRun+0x24>
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d010      	beq.n	80019d0 <QuinticRun+0x44>
		{
			temp->State = Ready;
		}
		break;
	}
}
 80019ae:	e03a      	b.n	8001a26 <QuinticRun+0x9a>
		if(temp->start_pos != temp->final_pos)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	ed93 7a00 	vldr	s14, [r3]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80019bc:	eeb4 7a67 	vcmp.f32	s14, s15
 80019c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c4:	d02e      	beq.n	8001a24 <QuinticRun+0x98>
			temp->State = PreCal;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 80019ce:	e029      	b.n	8001a24 <QuinticRun+0x98>
		temp->time = 0;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	641a      	str	r2, [r3, #64]	; 0x40
		QuinticGenerator(temp);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff fced 	bl	80013b8 <QuinticGenerator>
		temp->State = Run;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2202      	movs	r2, #2
 80019e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 80019e6:	e01e      	b.n	8001a26 <QuinticRun+0x9a>
		temp->time = temp->time + dt;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80019ee:	edd7 7a00 	vldr	s15, [r7]
 80019f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		QuinticEvaluator(temp);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff fe15 	bl	800162c <QuinticEvaluator>
		if(temp->time > temp->TotalTime)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001a0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a16:	dc00      	bgt.n	8001a1a <QuinticRun+0x8e>
		break;
 8001a18:	e005      	b.n	8001a26 <QuinticRun+0x9a>
			temp->State = Ready;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8001a22:	e000      	b.n	8001a26 <QuinticRun+0x9a>
		break;
 8001a24:	bf00      	nop
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <InitReadEncoder>:
{ //get time in micros
	return __HAL_TIM_GET_COUNTER(&htim5)+ ReadEncoderParam._micros;
}

void InitReadEncoder(ReadEncoder* Read, uint32_t samplingtime)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	6039      	str	r1, [r7, #0]
	Read->_micros = 0;
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	e9c1 2300 	strd	r2, r3, [r1]
	Read->PPR = 8192;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a4c:	811a      	strh	r2, [r3, #8]
	Read->samplingTime = samplingtime;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	60da      	str	r2, [r3, #12]
	Read->MotorSetDuty = 0;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	741a      	strb	r2, [r3, #16]
	Read->Pulse_Compare = 0;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	825a      	strh	r2, [r3, #18]
	Read->DIR = 0;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	751a      	strb	r2, [r3, #20]
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
	...

08001a74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a78:	f001 fa30 	bl	8002edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a7c:	f000 f86a 	bl	8001b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a80:	f000 fa6e 	bl	8001f60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001a84:	f000 fa42 	bl	8001f0c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001a88:	f000 f8cc 	bl	8001c24 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001a8c:	f000 f94e 	bl	8001d2c <MX_TIM2_Init>
  MX_TIM5_Init();
 8001a90:	f000 f9ee 	bl	8001e70 <MX_TIM5_Init>
  MX_TIM3_Init();
 8001a94:	f000 f99e 	bl	8001dd4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //Setup Initial vaules
  InitKalmanStruct(&KF,Var_Q,Var_R);
 8001a98:	4b1f      	ldr	r3, [pc, #124]	; (8001b18 <main+0xa4>)
 8001a9a:	edd3 7a00 	vldr	s15, [r3]
 8001a9e:	4b1f      	ldr	r3, [pc, #124]	; (8001b1c <main+0xa8>)
 8001aa0:	ed93 7a00 	vldr	s14, [r3]
 8001aa4:	eef0 0a47 	vmov.f32	s1, s14
 8001aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8001aac:	481c      	ldr	r0, [pc, #112]	; (8001b20 <main+0xac>)
 8001aae:	f7ff fa41 	bl	8000f34 <InitKalmanStruct>
  InitReadEncoder(&ReadEncoderParam, 1000);
 8001ab2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ab6:	481b      	ldr	r0, [pc, #108]	; (8001b24 <main+0xb0>)
 8001ab8:	f7ff ffb9 	bl	8001a2e <InitReadEncoder>
  QuinticSetup(&QuinticVar, vmax, amax);
 8001abc:	4b1a      	ldr	r3, [pc, #104]	; (8001b28 <main+0xb4>)
 8001abe:	edd3 7a00 	vldr	s15, [r3]
 8001ac2:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <main+0xb8>)
 8001ac4:	ed93 7a00 	vldr	s14, [r3]
 8001ac8:	eef0 0a47 	vmov.f32	s1, s14
 8001acc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad0:	4817      	ldr	r0, [pc, #92]	; (8001b30 <main+0xbc>)
 8001ad2:	f7ff fc53 	bl	800137c <QuinticSetup>
  PIDSetup(&PositionLoop, 2.36, 0, 0);
 8001ad6:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8001b34 <main+0xc0>
 8001ada:	eddf 0a16 	vldr	s1, [pc, #88]	; 8001b34 <main+0xc0>
 8001ade:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8001b38 <main+0xc4>
 8001ae2:	4816      	ldr	r0, [pc, #88]	; (8001b3c <main+0xc8>)
 8001ae4:	f7ff fc1c 	bl	8001320 <PIDSetup>
  PIDSetup(&VelocityLoop, 2.36, 0, 0);
 8001ae8:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8001b34 <main+0xc0>
 8001aec:	eddf 0a11 	vldr	s1, [pc, #68]	; 8001b34 <main+0xc0>
 8001af0:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8001b38 <main+0xc4>
 8001af4:	4812      	ldr	r0, [pc, #72]	; (8001b40 <main+0xcc>)
 8001af6:	f7ff fc13 	bl	8001320 <PIDSetup>

  //Timers Start
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);//Start PWM
 8001afa:	2100      	movs	r1, #0
 8001afc:	4811      	ldr	r0, [pc, #68]	; (8001b44 <main+0xd0>)
 8001afe:	f002 faa9 	bl	8004054 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2); //Start QEI
 8001b02:	2104      	movs	r1, #4
 8001b04:	4810      	ldr	r0, [pc, #64]	; (8001b48 <main+0xd4>)
 8001b06:	f002 fbfb 	bl	8004300 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8001b0a:	4810      	ldr	r0, [pc, #64]	; (8001b4c <main+0xd8>)
 8001b0c:	f002 f9f0 	bl	8003ef0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8001b10:	480f      	ldr	r0, [pc, #60]	; (8001b50 <main+0xdc>)
 8001b12:	f002 f9ed 	bl	8003ef0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b16:	e7fe      	b.n	8001b16 <main+0xa2>
 8001b18:	20000008 	.word	0x20000008
 8001b1c:	2000000c 	.word	0x2000000c
 8001b20:	200002d8 	.word	0x200002d8
 8001b24:	20000200 	.word	0x20000200
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	20000004 	.word	0x20000004
 8001b30:	20000240 	.word	0x20000240
 8001b34:	00000000 	.word	0x00000000
 8001b38:	40170a3d 	.word	0x40170a3d
 8001b3c:	20000290 	.word	0x20000290
 8001b40:	200002b4 	.word	0x200002b4
 8001b44:	2000009c 	.word	0x2000009c
 8001b48:	200000e4 	.word	0x200000e4
 8001b4c:	2000012c 	.word	0x2000012c
 8001b50:	20000174 	.word	0x20000174

08001b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b094      	sub	sp, #80	; 0x50
 8001b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b5a:	f107 0320 	add.w	r3, r7, #32
 8001b5e:	2230      	movs	r2, #48	; 0x30
 8001b60:	2100      	movs	r1, #0
 8001b62:	4618      	mov	r0, r3
 8001b64:	f003 fda0 	bl	80056a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b68:	f107 030c 	add.w	r3, r7, #12
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	4b27      	ldr	r3, [pc, #156]	; (8001c1c <SystemClock_Config+0xc8>)
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	4a26      	ldr	r2, [pc, #152]	; (8001c1c <SystemClock_Config+0xc8>)
 8001b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b86:	6413      	str	r3, [r2, #64]	; 0x40
 8001b88:	4b24      	ldr	r3, [pc, #144]	; (8001c1c <SystemClock_Config+0xc8>)
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b94:	2300      	movs	r3, #0
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	4b21      	ldr	r3, [pc, #132]	; (8001c20 <SystemClock_Config+0xcc>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a20      	ldr	r2, [pc, #128]	; (8001c20 <SystemClock_Config+0xcc>)
 8001b9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	4b1e      	ldr	r3, [pc, #120]	; (8001c20 <SystemClock_Config+0xcc>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bb8:	2310      	movs	r3, #16
 8001bba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bc4:	2308      	movs	r3, #8
 8001bc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001bc8:	2364      	movs	r3, #100	; 0x64
 8001bca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001bd0:	2304      	movs	r3, #4
 8001bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bd4:	f107 0320 	add.w	r3, r7, #32
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f001 fca1 	bl	8003520 <HAL_RCC_OscConfig>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001be4:	f000 faac 	bl	8002140 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001be8:	230f      	movs	r3, #15
 8001bea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bec:	2302      	movs	r3, #2
 8001bee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001bfe:	f107 030c 	add.w	r3, r7, #12
 8001c02:	2103      	movs	r1, #3
 8001c04:	4618      	mov	r0, r3
 8001c06:	f001 ff03 	bl	8003a10 <HAL_RCC_ClockConfig>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c10:	f000 fa96 	bl	8002140 <Error_Handler>
  }
}
 8001c14:	bf00      	nop
 8001c16:	3750      	adds	r7, #80	; 0x50
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40007000 	.word	0x40007000

08001c24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b092      	sub	sp, #72	; 0x48
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
 8001c44:	615a      	str	r2, [r3, #20]
 8001c46:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	2220      	movs	r2, #32
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f003 fd2a 	bl	80056a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c54:	4b33      	ldr	r3, [pc, #204]	; (8001d24 <MX_TIM1_Init+0x100>)
 8001c56:	4a34      	ldr	r2, [pc, #208]	; (8001d28 <MX_TIM1_Init+0x104>)
 8001c58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c5a:	4b32      	ldr	r3, [pc, #200]	; (8001d24 <MX_TIM1_Init+0x100>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c60:	4b30      	ldr	r3, [pc, #192]	; (8001d24 <MX_TIM1_Init+0x100>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8001c66:	4b2f      	ldr	r3, [pc, #188]	; (8001d24 <MX_TIM1_Init+0x100>)
 8001c68:	f241 3287 	movw	r2, #4999	; 0x1387
 8001c6c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c6e:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <MX_TIM1_Init+0x100>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c74:	4b2b      	ldr	r3, [pc, #172]	; (8001d24 <MX_TIM1_Init+0x100>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c7a:	4b2a      	ldr	r3, [pc, #168]	; (8001d24 <MX_TIM1_Init+0x100>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c80:	4828      	ldr	r0, [pc, #160]	; (8001d24 <MX_TIM1_Init+0x100>)
 8001c82:	f002 f997 	bl	8003fb4 <HAL_TIM_PWM_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001c8c:	f000 fa58 	bl	8002140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c90:	2300      	movs	r3, #0
 8001c92:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c94:	2300      	movs	r3, #0
 8001c96:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4821      	ldr	r0, [pc, #132]	; (8001d24 <MX_TIM1_Init+0x100>)
 8001ca0:	f003 f942 	bl	8004f28 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001caa:	f000 fa49 	bl	8002140 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cae:	2360      	movs	r3, #96	; 0x60
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 8001cb2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4813      	ldr	r0, [pc, #76]	; (8001d24 <MX_TIM1_Init+0x100>)
 8001cd6:	f002 fca9 	bl	800462c <HAL_TIM_PWM_ConfigChannel>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001ce0:	f000 fa2e 	bl	8002140 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cfc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d02:	1d3b      	adds	r3, r7, #4
 8001d04:	4619      	mov	r1, r3
 8001d06:	4807      	ldr	r0, [pc, #28]	; (8001d24 <MX_TIM1_Init+0x100>)
 8001d08:	f003 f97c 	bl	8005004 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8001d12:	f000 fa15 	bl	8002140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d16:	4803      	ldr	r0, [pc, #12]	; (8001d24 <MX_TIM1_Init+0x100>)
 8001d18:	f000 faee 	bl	80022f8 <HAL_TIM_MspPostInit>

}
 8001d1c:	bf00      	nop
 8001d1e:	3748      	adds	r7, #72	; 0x48
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	2000009c 	.word	0x2000009c
 8001d28:	40010000 	.word	0x40010000

08001d2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08c      	sub	sp, #48	; 0x30
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d32:	f107 030c 	add.w	r3, r7, #12
 8001d36:	2224      	movs	r2, #36	; 0x24
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f003 fcb4 	bl	80056a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d40:	1d3b      	adds	r3, r7, #4
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d48:	4b21      	ldr	r3, [pc, #132]	; (8001dd0 <MX_TIM2_Init+0xa4>)
 8001d4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d50:	4b1f      	ldr	r3, [pc, #124]	; (8001dd0 <MX_TIM2_Init+0xa4>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d56:	4b1e      	ldr	r3, [pc, #120]	; (8001dd0 <MX_TIM2_Init+0xa4>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d5c:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <MX_TIM2_Init+0xa4>)
 8001d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d64:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <MX_TIM2_Init+0xa4>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d6a:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <MX_TIM2_Init+0xa4>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d70:	2303      	movs	r3, #3
 8001d72:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d74:	2300      	movs	r3, #0
 8001d76:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d84:	2300      	movs	r3, #0
 8001d86:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001d94:	f107 030c 	add.w	r3, r7, #12
 8001d98:	4619      	mov	r1, r3
 8001d9a:	480d      	ldr	r0, [pc, #52]	; (8001dd0 <MX_TIM2_Init+0xa4>)
 8001d9c:	f002 fa0a 	bl	80041b4 <HAL_TIM_Encoder_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001da6:	f000 f9cb 	bl	8002140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	4619      	mov	r1, r3
 8001db6:	4806      	ldr	r0, [pc, #24]	; (8001dd0 <MX_TIM2_Init+0xa4>)
 8001db8:	f003 f8b6 	bl	8004f28 <HAL_TIMEx_MasterConfigSynchronization>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001dc2:	f000 f9bd 	bl	8002140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dc6:	bf00      	nop
 8001dc8:	3730      	adds	r7, #48	; 0x30
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200000e4 	.word	0x200000e4

08001dd4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dda:	f107 0308 	add.w	r3, r7, #8
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de8:	463b      	mov	r3, r7
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001df0:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <MX_TIM3_Init+0x94>)
 8001df2:	4a1e      	ldr	r2, [pc, #120]	; (8001e6c <MX_TIM3_Init+0x98>)
 8001df4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8001df6:	4b1c      	ldr	r3, [pc, #112]	; (8001e68 <MX_TIM3_Init+0x94>)
 8001df8:	2263      	movs	r2, #99	; 0x63
 8001dfa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <MX_TIM3_Init+0x94>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 399;
 8001e02:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <MX_TIM3_Init+0x94>)
 8001e04:	f240 128f 	movw	r2, #399	; 0x18f
 8001e08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0a:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <MX_TIM3_Init+0x94>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e10:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <MX_TIM3_Init+0x94>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e16:	4814      	ldr	r0, [pc, #80]	; (8001e68 <MX_TIM3_Init+0x94>)
 8001e18:	f002 f81a 	bl	8003e50 <HAL_TIM_Base_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001e22:	f000 f98d 	bl	8002140 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e2c:	f107 0308 	add.w	r3, r7, #8
 8001e30:	4619      	mov	r1, r3
 8001e32:	480d      	ldr	r0, [pc, #52]	; (8001e68 <MX_TIM3_Init+0x94>)
 8001e34:	f002 fcbc 	bl	80047b0 <HAL_TIM_ConfigClockSource>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001e3e:	f000 f97f 	bl	8002140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e42:	2300      	movs	r3, #0
 8001e44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e4a:	463b      	mov	r3, r7
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4806      	ldr	r0, [pc, #24]	; (8001e68 <MX_TIM3_Init+0x94>)
 8001e50:	f003 f86a 	bl	8004f28 <HAL_TIMEx_MasterConfigSynchronization>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001e5a:	f000 f971 	bl	8002140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e5e:	bf00      	nop
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	2000012c 	.word	0x2000012c
 8001e6c:	40000400 	.word	0x40000400

08001e70 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e76:	f107 0308 	add.w	r3, r7, #8
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e84:	463b      	mov	r3, r7
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e8c:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <MX_TIM5_Init+0x94>)
 8001e8e:	4a1e      	ldr	r2, [pc, #120]	; (8001f08 <MX_TIM5_Init+0x98>)
 8001e90:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8001e92:	4b1c      	ldr	r3, [pc, #112]	; (8001f04 <MX_TIM5_Init+0x94>)
 8001e94:	2253      	movs	r2, #83	; 0x53
 8001e96:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e98:	4b1a      	ldr	r3, [pc, #104]	; (8001f04 <MX_TIM5_Init+0x94>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001e9e:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <MX_TIM5_Init+0x94>)
 8001ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea6:	4b17      	ldr	r3, [pc, #92]	; (8001f04 <MX_TIM5_Init+0x94>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eac:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <MX_TIM5_Init+0x94>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001eb2:	4814      	ldr	r0, [pc, #80]	; (8001f04 <MX_TIM5_Init+0x94>)
 8001eb4:	f001 ffcc 	bl	8003e50 <HAL_TIM_Base_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001ebe:	f000 f93f 	bl	8002140 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001ec8:	f107 0308 	add.w	r3, r7, #8
 8001ecc:	4619      	mov	r1, r3
 8001ece:	480d      	ldr	r0, [pc, #52]	; (8001f04 <MX_TIM5_Init+0x94>)
 8001ed0:	f002 fc6e 	bl	80047b0 <HAL_TIM_ConfigClockSource>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001eda:	f000 f931 	bl	8002140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ee6:	463b      	mov	r3, r7
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4806      	ldr	r0, [pc, #24]	; (8001f04 <MX_TIM5_Init+0x94>)
 8001eec:	f003 f81c 	bl	8004f28 <HAL_TIMEx_MasterConfigSynchronization>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001ef6:	f000 f923 	bl	8002140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001efa:	bf00      	nop
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000174 	.word	0x20000174
 8001f08:	40000c00 	.word	0x40000c00

08001f0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f10:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <MX_USART2_UART_Init+0x4c>)
 8001f12:	4a12      	ldr	r2, [pc, #72]	; (8001f5c <MX_USART2_UART_Init+0x50>)
 8001f14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <MX_USART2_UART_Init+0x4c>)
 8001f18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <MX_USART2_UART_Init+0x4c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <MX_USART2_UART_Init+0x4c>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <MX_USART2_UART_Init+0x4c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f30:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <MX_USART2_UART_Init+0x4c>)
 8001f32:	220c      	movs	r2, #12
 8001f34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f36:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <MX_USART2_UART_Init+0x4c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <MX_USART2_UART_Init+0x4c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f42:	4805      	ldr	r0, [pc, #20]	; (8001f58 <MX_USART2_UART_Init+0x4c>)
 8001f44:	f003 f8c4 	bl	80050d0 <HAL_UART_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f4e:	f000 f8f7 	bl	8002140 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	200001bc 	.word	0x200001bc
 8001f5c:	40004400 	.word	0x40004400

08001f60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f66:	f107 0314 	add.w	r3, r7, #20
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	605a      	str	r2, [r3, #4]
 8001f70:	609a      	str	r2, [r3, #8]
 8001f72:	60da      	str	r2, [r3, #12]
 8001f74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	4b38      	ldr	r3, [pc, #224]	; (800205c <MX_GPIO_Init+0xfc>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a37      	ldr	r2, [pc, #220]	; (800205c <MX_GPIO_Init+0xfc>)
 8001f80:	f043 0304 	orr.w	r3, r3, #4
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b35      	ldr	r3, [pc, #212]	; (800205c <MX_GPIO_Init+0xfc>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	4b31      	ldr	r3, [pc, #196]	; (800205c <MX_GPIO_Init+0xfc>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a30      	ldr	r2, [pc, #192]	; (800205c <MX_GPIO_Init+0xfc>)
 8001f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b2e      	ldr	r3, [pc, #184]	; (800205c <MX_GPIO_Init+0xfc>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	4b2a      	ldr	r3, [pc, #168]	; (800205c <MX_GPIO_Init+0xfc>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	4a29      	ldr	r2, [pc, #164]	; (800205c <MX_GPIO_Init+0xfc>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbe:	4b27      	ldr	r3, [pc, #156]	; (800205c <MX_GPIO_Init+0xfc>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	60bb      	str	r3, [r7, #8]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	4b23      	ldr	r3, [pc, #140]	; (800205c <MX_GPIO_Init+0xfc>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4a22      	ldr	r2, [pc, #136]	; (800205c <MX_GPIO_Init+0xfc>)
 8001fd4:	f043 0302 	orr.w	r3, r3, #2
 8001fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fda:	4b20      	ldr	r3, [pc, #128]	; (800205c <MX_GPIO_Init+0xfc>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2120      	movs	r1, #32
 8001fea:	481d      	ldr	r0, [pc, #116]	; (8002060 <MX_GPIO_Init+0x100>)
 8001fec:	f001 fa7e 	bl	80034ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ff6:	481b      	ldr	r0, [pc, #108]	; (8002064 <MX_GPIO_Init+0x104>)
 8001ff8:	f001 fa78 	bl	80034ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ffc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002002:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002006:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	4619      	mov	r1, r3
 8002012:	4815      	ldr	r0, [pc, #84]	; (8002068 <MX_GPIO_Init+0x108>)
 8002014:	f001 f8e6 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002018:	2320      	movs	r3, #32
 800201a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800201c:	2301      	movs	r3, #1
 800201e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002024:	2300      	movs	r3, #0
 8002026:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	4619      	mov	r1, r3
 800202e:	480c      	ldr	r0, [pc, #48]	; (8002060 <MX_GPIO_Init+0x100>)
 8002030:	f001 f8d8 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002034:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203a:	2301      	movs	r3, #1
 800203c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002042:	2300      	movs	r3, #0
 8002044:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002046:	f107 0314 	add.w	r3, r7, #20
 800204a:	4619      	mov	r1, r3
 800204c:	4805      	ldr	r0, [pc, #20]	; (8002064 <MX_GPIO_Init+0x104>)
 800204e:	f001 f8c9 	bl	80031e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002052:	bf00      	nop
 8002054:	3728      	adds	r7, #40	; 0x28
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40023800 	.word	0x40023800
 8002060:	40020000 	.word	0x40020000
 8002064:	40020400 	.word	0x40020400
 8002068:	40020800 	.word	0x40020800

0800206c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800206c:	b5b0      	push	{r4, r5, r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	4827      	ldr	r0, [pc, #156]	; (8002114 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002078:	4281      	cmp	r1, r0
 800207a:	d146      	bne.n	800210a <HAL_TIM_PeriodElapsedCallback+0x9e>
//		}
//		else
//		{
//			ReadEncoderParam.MotorSetDuty = 0;
//		}
		QEIData.data[0] = __HAL_TIM_GET_COUNTER(&htim2);
 800207c:	4926      	ldr	r1, [pc, #152]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800207e:	6809      	ldr	r1, [r1, #0]
 8002080:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8002082:	2000      	movs	r0, #0
 8002084:	460a      	mov	r2, r1
 8002086:	4603      	mov	r3, r0
 8002088:	4924      	ldr	r1, [pc, #144]	; (800211c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800208a:	e9c1 2300 	strd	r2, r3, [r1]
		QEIData.QEIPosition = QEIData.data[0]-QEIData.data[1];
 800208e:	4b23      	ldr	r3, [pc, #140]	; (800211c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002090:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002094:	4b21      	ldr	r3, [pc, #132]	; (800211c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002096:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800209a:	1a84      	subs	r4, r0, r2
 800209c:	eb61 0503 	sbc.w	r5, r1, r3
 80020a0:	4620      	mov	r0, r4
 80020a2:	4629      	mov	r1, r5
 80020a4:	f7fe fd86 	bl	8000bb4 <__aeabi_l2f>
 80020a8:	4603      	mov	r3, r0
 80020aa:	4a1c      	ldr	r2, [pc, #112]	; (800211c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80020ac:	6213      	str	r3, [r2, #32]
		QEIData.QEIVelocity = QEIData.QEIPosition*2500;
 80020ae:	4b1b      	ldr	r3, [pc, #108]	; (800211c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80020b0:	edd3 7a08 	vldr	s15, [r3, #32]
 80020b4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002120 <HAL_TIM_PeriodElapsedCallback+0xb4>
 80020b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020bc:	4b17      	ldr	r3, [pc, #92]	; (800211c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80020be:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		KF.z = QEIData.QEIVelocity;
 80020c2:	4b16      	ldr	r3, [pc, #88]	; (800211c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c6:	4a17      	ldr	r2, [pc, #92]	; (8002124 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80020c8:	65d3      	str	r3, [r2, #92]	; 0x5c
		kalman_filter();
 80020ca:	f7ff f88d 	bl	80011e8 <kalman_filter>
		ZEstimateVelocity = KF.x_hat[1];
 80020ce:	4b15      	ldr	r3, [pc, #84]	; (8002124 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	4a15      	ldr	r2, [pc, #84]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80020d4:	6013      	str	r3, [r2, #0]

		QuinticRun(&QuinticVar,0.0004);
 80020d6:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800212c <HAL_TIM_PeriodElapsedCallback+0xc0>
 80020da:	4815      	ldr	r0, [pc, #84]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80020dc:	f7ff fc56 	bl	800198c <QuinticRun>
		//PIDRun(&VelocityLoop, KF.x_hat[1], QuinticVar.current_velo);
		QEIData.data[1] = QEIData.data[0];
 80020e0:	4b0e      	ldr	r3, [pc, #56]	; (800211c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80020e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e6:	490d      	ldr	r1, [pc, #52]	; (800211c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80020e8:	e9c1 2302 	strd	r2, r3, [r1, #8]
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,VelocityLoop.U);
 80020ec:	4b11      	ldr	r3, [pc, #68]	; (8002134 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	4b11      	ldr	r3, [pc, #68]	; (8002138 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, QuinticVar.Dir);
 80020f6:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80020f8:	f993 3020 	ldrsb.w	r3, [r3, #32]
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	461a      	mov	r2, r3
 8002100:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002104:	480d      	ldr	r0, [pc, #52]	; (800213c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002106:	f001 f9f1 	bl	80034ec <HAL_GPIO_WritePin>
	}
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bdb0      	pop	{r4, r5, r7, pc}
 8002112:	bf00      	nop
 8002114:	2000012c 	.word	0x2000012c
 8002118:	200000e4 	.word	0x200000e4
 800211c:	20000218 	.word	0x20000218
 8002120:	451c4000 	.word	0x451c4000
 8002124:	200002d8 	.word	0x200002d8
 8002128:	200004f0 	.word	0x200004f0
 800212c:	39d1b717 	.word	0x39d1b717
 8002130:	20000240 	.word	0x20000240
 8002134:	200002b4 	.word	0x200002b4
 8002138:	2000009c 	.word	0x2000009c
 800213c:	40020400 	.word	0x40020400

08002140 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002144:	b672      	cpsid	i
}
 8002146:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002148:	e7fe      	b.n	8002148 <Error_Handler+0x8>
	...

0800214c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	607b      	str	r3, [r7, #4]
 8002156:	4b10      	ldr	r3, [pc, #64]	; (8002198 <HAL_MspInit+0x4c>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	4a0f      	ldr	r2, [pc, #60]	; (8002198 <HAL_MspInit+0x4c>)
 800215c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002160:	6453      	str	r3, [r2, #68]	; 0x44
 8002162:	4b0d      	ldr	r3, [pc, #52]	; (8002198 <HAL_MspInit+0x4c>)
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216a:	607b      	str	r3, [r7, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	603b      	str	r3, [r7, #0]
 8002172:	4b09      	ldr	r3, [pc, #36]	; (8002198 <HAL_MspInit+0x4c>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	4a08      	ldr	r2, [pc, #32]	; (8002198 <HAL_MspInit+0x4c>)
 8002178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800217c:	6413      	str	r3, [r2, #64]	; 0x40
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_MspInit+0x4c>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002186:	603b      	str	r3, [r7, #0]
 8002188:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800218a:	2007      	movs	r0, #7
 800218c:	f000 ffe8 	bl	8003160 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40023800 	.word	0x40023800

0800219c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a0b      	ldr	r2, [pc, #44]	; (80021d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d10d      	bne.n	80021ca <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <HAL_TIM_PWM_MspInit+0x40>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	4a09      	ldr	r2, [pc, #36]	; (80021dc <HAL_TIM_PWM_MspInit+0x40>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6453      	str	r3, [r2, #68]	; 0x44
 80021be:	4b07      	ldr	r3, [pc, #28]	; (80021dc <HAL_TIM_PWM_MspInit+0x40>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80021ca:	bf00      	nop
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40010000 	.word	0x40010000
 80021dc:	40023800 	.word	0x40023800

080021e0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08a      	sub	sp, #40	; 0x28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002200:	d133      	bne.n	800226a <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <HAL_TIM_Encoder_MspInit+0x94>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	4a1a      	ldr	r2, [pc, #104]	; (8002274 <HAL_TIM_Encoder_MspInit+0x94>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	6413      	str	r3, [r2, #64]	; 0x40
 8002212:	4b18      	ldr	r3, [pc, #96]	; (8002274 <HAL_TIM_Encoder_MspInit+0x94>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	4b14      	ldr	r3, [pc, #80]	; (8002274 <HAL_TIM_Encoder_MspInit+0x94>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a13      	ldr	r2, [pc, #76]	; (8002274 <HAL_TIM_Encoder_MspInit+0x94>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	4b11      	ldr	r3, [pc, #68]	; (8002274 <HAL_TIM_Encoder_MspInit+0x94>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800223a:	2303      	movs	r3, #3
 800223c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223e:	2302      	movs	r3, #2
 8002240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002246:	2300      	movs	r3, #0
 8002248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800224a:	2301      	movs	r3, #1
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224e:	f107 0314 	add.w	r3, r7, #20
 8002252:	4619      	mov	r1, r3
 8002254:	4808      	ldr	r0, [pc, #32]	; (8002278 <HAL_TIM_Encoder_MspInit+0x98>)
 8002256:	f000 ffc5 	bl	80031e4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800225a:	2200      	movs	r2, #0
 800225c:	2100      	movs	r1, #0
 800225e:	201c      	movs	r0, #28
 8002260:	f000 ff89 	bl	8003176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002264:	201c      	movs	r0, #28
 8002266:	f000 ffa2 	bl	80031ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800226a:	bf00      	nop
 800226c:	3728      	adds	r7, #40	; 0x28
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40023800 	.word	0x40023800
 8002278:	40020000 	.word	0x40020000

0800227c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a18      	ldr	r2, [pc, #96]	; (80022ec <HAL_TIM_Base_MspInit+0x70>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d116      	bne.n	80022bc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	4b17      	ldr	r3, [pc, #92]	; (80022f0 <HAL_TIM_Base_MspInit+0x74>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	4a16      	ldr	r2, [pc, #88]	; (80022f0 <HAL_TIM_Base_MspInit+0x74>)
 8002298:	f043 0302 	orr.w	r3, r3, #2
 800229c:	6413      	str	r3, [r2, #64]	; 0x40
 800229e:	4b14      	ldr	r3, [pc, #80]	; (80022f0 <HAL_TIM_Base_MspInit+0x74>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80022aa:	2200      	movs	r2, #0
 80022ac:	2100      	movs	r1, #0
 80022ae:	201d      	movs	r0, #29
 80022b0:	f000 ff61 	bl	8003176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022b4:	201d      	movs	r0, #29
 80022b6:	f000 ff7a 	bl	80031ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80022ba:	e012      	b.n	80022e2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a0c      	ldr	r2, [pc, #48]	; (80022f4 <HAL_TIM_Base_MspInit+0x78>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d10d      	bne.n	80022e2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <HAL_TIM_Base_MspInit+0x74>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	4a08      	ldr	r2, [pc, #32]	; (80022f0 <HAL_TIM_Base_MspInit+0x74>)
 80022d0:	f043 0308 	orr.w	r3, r3, #8
 80022d4:	6413      	str	r3, [r2, #64]	; 0x40
 80022d6:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_TIM_Base_MspInit+0x74>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	68bb      	ldr	r3, [r7, #8]
}
 80022e2:	bf00      	nop
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40000400 	.word	0x40000400
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40000c00 	.word	0x40000c00

080022f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002300:	f107 030c 	add.w	r3, r7, #12
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a12      	ldr	r2, [pc, #72]	; (8002360 <HAL_TIM_MspPostInit+0x68>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d11e      	bne.n	8002358 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	4b11      	ldr	r3, [pc, #68]	; (8002364 <HAL_TIM_MspPostInit+0x6c>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	4a10      	ldr	r2, [pc, #64]	; (8002364 <HAL_TIM_MspPostInit+0x6c>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	6313      	str	r3, [r2, #48]	; 0x30
 800232a:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <HAL_TIM_MspPostInit+0x6c>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800233a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233c:	2302      	movs	r3, #2
 800233e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002344:	2300      	movs	r3, #0
 8002346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002348:	2301      	movs	r3, #1
 800234a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234c:	f107 030c 	add.w	r3, r7, #12
 8002350:	4619      	mov	r1, r3
 8002352:	4805      	ldr	r0, [pc, #20]	; (8002368 <HAL_TIM_MspPostInit+0x70>)
 8002354:	f000 ff46 	bl	80031e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002358:	bf00      	nop
 800235a:	3720      	adds	r7, #32
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40010000 	.word	0x40010000
 8002364:	40023800 	.word	0x40023800
 8002368:	40020000 	.word	0x40020000

0800236c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	; 0x28
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002374:	f107 0314 	add.w	r3, r7, #20
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a19      	ldr	r2, [pc, #100]	; (80023f0 <HAL_UART_MspInit+0x84>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d12b      	bne.n	80023e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <HAL_UART_MspInit+0x88>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	4a17      	ldr	r2, [pc, #92]	; (80023f4 <HAL_UART_MspInit+0x88>)
 8002398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800239c:	6413      	str	r3, [r2, #64]	; 0x40
 800239e:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <HAL_UART_MspInit+0x88>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <HAL_UART_MspInit+0x88>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	4a10      	ldr	r2, [pc, #64]	; (80023f4 <HAL_UART_MspInit+0x88>)
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ba:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <HAL_UART_MspInit+0x88>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80023c6:	230c      	movs	r3, #12
 80023c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ca:	2302      	movs	r3, #2
 80023cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d2:	2303      	movs	r3, #3
 80023d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023d6:	2307      	movs	r3, #7
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023da:	f107 0314 	add.w	r3, r7, #20
 80023de:	4619      	mov	r1, r3
 80023e0:	4805      	ldr	r0, [pc, #20]	; (80023f8 <HAL_UART_MspInit+0x8c>)
 80023e2:	f000 feff 	bl	80031e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023e6:	bf00      	nop
 80023e8:	3728      	adds	r7, #40	; 0x28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40004400 	.word	0x40004400
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40020000 	.word	0x40020000

080023fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002400:	e7fe      	b.n	8002400 <NMI_Handler+0x4>

08002402 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002406:	e7fe      	b.n	8002406 <HardFault_Handler+0x4>

08002408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800240c:	e7fe      	b.n	800240c <MemManage_Handler+0x4>

0800240e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800240e:	b480      	push	{r7}
 8002410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002412:	e7fe      	b.n	8002412 <BusFault_Handler+0x4>

08002414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002418:	e7fe      	b.n	8002418 <UsageFault_Handler+0x4>

0800241a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002436:	b480      	push	{r7}
 8002438:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002448:	f000 fd9a 	bl	8002f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}

08002450 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002454:	4802      	ldr	r0, [pc, #8]	; (8002460 <TIM2_IRQHandler+0x10>)
 8002456:	f001 ffe1 	bl	800441c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	200000e4 	.word	0x200000e4

08002464 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002468:	4802      	ldr	r0, [pc, #8]	; (8002474 <TIM3_IRQHandler+0x10>)
 800246a:	f001 ffd7 	bl	800441c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	2000012c 	.word	0x2000012c

08002478 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <SystemInit+0x20>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002482:	4a05      	ldr	r2, [pc, #20]	; (8002498 <SystemInit+0x20>)
 8002484:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002488:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800249c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024a0:	480d      	ldr	r0, [pc, #52]	; (80024d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024a2:	490e      	ldr	r1, [pc, #56]	; (80024dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024a4:	4a0e      	ldr	r2, [pc, #56]	; (80024e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024a8:	e002      	b.n	80024b0 <LoopCopyDataInit>

080024aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ae:	3304      	adds	r3, #4

080024b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024b4:	d3f9      	bcc.n	80024aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024b6:	4a0b      	ldr	r2, [pc, #44]	; (80024e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024b8:	4c0b      	ldr	r4, [pc, #44]	; (80024e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024bc:	e001      	b.n	80024c2 <LoopFillZerobss>

080024be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024c0:	3204      	adds	r2, #4

080024c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024c4:	d3fb      	bcc.n	80024be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024c6:	f7ff ffd7 	bl	8002478 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024ca:	f003 f8c9 	bl	8005660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024ce:	f7ff fad1 	bl	8001a74 <main>
  bx  lr    
 80024d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024dc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80024e0:	08005f44 	.word	0x08005f44
  ldr r2, =_sbss
 80024e4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80024e8:	200004f8 	.word	0x200004f8

080024ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024ec:	e7fe      	b.n	80024ec <ADC_IRQHandler>

080024ee <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b08b      	sub	sp, #44	; 0x2c
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	461a      	mov	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	885b      	ldrh	r3, [r3, #2]
 8002516:	fb02 f303 	mul.w	r3, r2, r3
 800251a:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8002520:	e013      	b.n	800254a <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	1d1a      	adds	r2, r3, #4
 8002526:	627a      	str	r2, [r7, #36]	; 0x24
 8002528:	ed93 7a00 	vldr	s14, [r3]
 800252c:	6a3b      	ldr	r3, [r7, #32]
 800252e:	1d1a      	adds	r2, r3, #4
 8002530:	623a      	str	r2, [r7, #32]
 8002532:	edd3 7a00 	vldr	s15, [r3]
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	1d1a      	adds	r2, r3, #4
 800253a:	61fa      	str	r2, [r7, #28]
 800253c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002540:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	3b01      	subs	r3, #1
 8002548:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1e8      	bne.n	8002522 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8002550:	2300      	movs	r3, #0
 8002552:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8002554:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8002558:	4618      	mov	r0, r3
 800255a:	372c      	adds	r7, #44	; 0x2c
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	607b      	str	r3, [r7, #4]
 800256e:	460b      	mov	r3, r1
 8002570:	817b      	strh	r3, [r7, #10]
 8002572:	4613      	mov	r3, r2
 8002574:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	897a      	ldrh	r2, [r7, #10]
 800257a:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	893a      	ldrh	r2, [r7, #8]
 8002580:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	605a      	str	r2, [r3, #4]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8002594:	b480      	push	{r7}
 8002596:	b0bb      	sub	sp, #236	; 0xec
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	667b      	str	r3, [r7, #100]	; 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	663b      	str	r3, [r7, #96]	; 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	885b      	ldrh	r3, [r3, #2]
 80025b4:	65bb      	str	r3, [r7, #88]	; 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 80025b6:	f04f 0300 	mov.w	r3, #0
 80025ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80025be:	f04f 0300 	mov.w	r3, #0
 80025c2:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 80025c4:	2300      	movs	r3, #0
 80025c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 80025ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 80025d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 80025d6:	e03b      	b.n	8002650 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 80025d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80025da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 80025e4:	e00c      	b.n	8002600 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 80025e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ea:	1d1a      	adds	r2, r3, #4
 80025ec:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
        j--;
 80025f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80025fa:	3b01      	subs	r3, #1
 80025fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 8002600:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1ee      	bne.n	80025e6 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 8002608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800260c:	1d1a      	adds	r2, r3, #4
 800260e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8002612:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002616:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 8002618:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800261c:	3b01      	subs	r3, #1
 800261e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 8002622:	e00c      	b.n	800263e <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 8002624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002628:	1d1a      	adds	r2, r3, #4
 800262a:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
        j--;
 8002634:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002638:	3b01      	subs	r3, #1
 800263a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 800263e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1ee      	bne.n	8002624 <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 8002646:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800264a:	3b01      	subs	r3, #1
 800264c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    while (rowCnt > 0U)
 8002650:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1bf      	bne.n	80025d8 <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 8002658:	2300      	movs	r3, #0
 800265a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800265e:	e2c7      	b.n	8002bf0 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 8002660:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002664:	653b      	str	r3, [r7, #80]	; 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	885b      	ldrh	r3, [r3, #2]
 800266e:	3301      	adds	r3, #1
 8002670:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8002674:	fb01 f303 	mul.w	r3, r1, r3
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      pivot = *pTmp;
 8002680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      selectedRow = column;
 800268a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800268e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8002692:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002696:	3301      	adds	r3, #1
 8002698:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800269c:	e02c      	b.n	80026f8 <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	885b      	ldrh	r3, [r3, #2]
 80026a6:	4619      	mov	r1, r3
 80026a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026ac:	fb03 f101 	mul.w	r1, r3, r1
 80026b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026b4:	440b      	add	r3, r1
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
          newPivot = *pTmp;
 80026be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	657b      	str	r3, [r7, #84]	; 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 80026c6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80026ca:	eeb0 7ae7 	vabs.f32	s14, s15
 80026ce:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80026d2:	eef0 7ae7 	vabs.f32	s15, s15
 80026d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026de:	dd06      	ble.n	80026ee <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 80026e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            pivot = newPivot;
 80026e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 80026ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026f2:	3301      	adds	r3, #1
 80026f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80026f8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80026fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026fe:	429a      	cmp	r2, r3
 8002700:	d3cd      	bcc.n	800269e <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 8002702:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002706:	eef5 7a40 	vcmp.f32	s15, #0.0
 800270a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800270e:	f000 809b 	beq.w	8002848 <arm_mat_inverse_f32+0x2b4>
 8002712:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002716:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800271a:	429a      	cmp	r2, r3
 800271c:	f000 8094 	beq.w	8002848 <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	885b      	ldrh	r3, [r3, #2]
 8002734:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002736:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002738:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002742:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002744:	fb03 f202 	mul.w	r2, r3, r2
 8002748:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800274c:	4413      	add	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002754:	4413      	add	r3, r2
 8002756:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800275a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800275c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002760:	fb03 f202 	mul.w	r2, r3, r2
 8002764:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002770:	4413      	add	r3, r2
 8002772:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002776:	2300      	movs	r3, #0
 8002778:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800277c:	e018      	b.n	80027b0 <arm_mat_inverse_f32+0x21c>
 800277e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	63bb      	str	r3, [r7, #56]	; 0x38
 8002786:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800278a:	1d1a      	adds	r2, r3, #4
 800278c:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8002790:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002794:	6812      	ldr	r2, [r2, #0]
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800279c:	1d1a      	adds	r2, r3, #4
 800279e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80027a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027aa:	3301      	adds	r3, #1
 80027ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80027b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027b6:	429a      	cmp	r2, r3
 80027b8:	dbe1      	blt.n	800277e <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	885b      	ldrh	r3, [r3, #2]
 80027ce:	647b      	str	r3, [r7, #68]	; 0x44
 80027d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027d2:	643b      	str	r3, [r7, #64]	; 0x40
 80027d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80027d8:	fb02 f303 	mul.w	r3, r2, r3
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80027e2:	4413      	add	r3, r2
 80027e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80027e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80027ee:	fb02 f303 	mul.w	r3, r2, r3
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80027f8:	4413      	add	r3, r2
 80027fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80027fe:	2300      	movs	r3, #0
 8002800:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002804:	e018      	b.n	8002838 <arm_mat_inverse_f32+0x2a4>
 8002806:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800280e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002812:	1d1a      	adds	r2, r3, #4
 8002814:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002818:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800281c:	6812      	ldr	r2, [r2, #0]
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002824:	1d1a      	adds	r2, r3, #4
 8002826:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800282a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002832:	3301      	adds	r3, #1
 8002834:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002838:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800283c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800283e:	429a      	cmp	r2, r3
 8002840:	dbe1      	blt.n	8002806 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8002842:	2301      	movs	r3, #1
 8002844:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 8002848:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800284c:	2b01      	cmp	r3, #1
 800284e:	d009      	beq.n	8002864 <arm_mat_inverse_f32+0x2d0>
 8002850:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002854:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800285c:	d102      	bne.n	8002864 <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800285e:	f06f 0304 	mvn.w	r3, #4
 8002862:	e208      	b.n	8002c76 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 8002864:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002868:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 800286c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002870:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	885b      	ldrh	r3, [r3, #2]
 8002880:	637b      	str	r3, [r7, #52]	; 0x34
 8002882:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002884:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	633b      	str	r3, [r7, #48]	; 0x30
 800288c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800288e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002890:	fb03 f202 	mul.w	r2, r3, r2
 8002894:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002898:	4413      	add	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80028a0:	4413      	add	r3, r2
 80028a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80028a6:	2300      	movs	r3, #0
 80028a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80028ac:	e011      	b.n	80028d2 <arm_mat_inverse_f32+0x33e>
 80028ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028b2:	1d1a      	adds	r2, r3, #4
 80028b4:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80028b8:	ed93 7a00 	vldr	s14, [r3]
 80028bc:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80028c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028c4:	edc3 7a00 	vstr	s15, [r3]
 80028c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80028cc:	3301      	adds	r3, #1
 80028ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80028d2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80028d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d8:	429a      	cmp	r2, r3
 80028da:	dbe8      	blt.n	80028ae <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	885b      	ldrh	r3, [r3, #2]
 80028e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80028f2:	fb02 f303 	mul.w	r3, r2, r3
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80028fc:	4413      	add	r3, r2
 80028fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002902:	2300      	movs	r3, #0
 8002904:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002908:	e011      	b.n	800292e <arm_mat_inverse_f32+0x39a>
 800290a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800290e:	1d1a      	adds	r2, r3, #4
 8002910:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8002914:	ed93 7a00 	vldr	s14, [r3]
 8002918:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800291c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002920:	edc3 7a00 	vstr	s15, [r3]
 8002924:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002928:	3301      	adds	r3, #1
 800292a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800292e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002934:	429a      	cmp	r2, r3
 8002936:	dbe8      	blt.n	800290a <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 8002938:	2300      	movs	r3, #0
 800293a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800293e:	e0ae      	b.n	8002a9e <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	885b      	ldrh	r3, [r3, #2]
 8002948:	4619      	mov	r1, r3
 800294a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800294e:	fb03 f101 	mul.w	r1, r3, r1
 8002952:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002956:	440b      	add	r3, r1
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           pivot = *pTmp;
 8002960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	885b      	ldrh	r3, [r3, #2]
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002990:	fb03 f202 	mul.w	r2, r3, r2
 8002994:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002998:	4413      	add	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80029a0:	4413      	add	r3, r2
 80029a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80029aa:	fb03 f202 	mul.w	r2, r3, r2
 80029ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029b2:	4413      	add	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80029ba:	4413      	add	r3, r2
 80029bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80029c0:	2300      	movs	r3, #0
 80029c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80029c6:	e01a      	b.n	80029fe <arm_mat_inverse_f32+0x46a>
 80029c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029cc:	1d1a      	adds	r2, r3, #4
 80029ce:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80029d2:	ed93 7a00 	vldr	s14, [r3]
 80029d6:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80029da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029e2:	1d1a      	adds	r2, r3, #4
 80029e4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80029e8:	ed93 7a00 	vldr	s14, [r3]
 80029ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029f0:	edc3 7a00 	vstr	s15, [r3]
 80029f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029f8:	3301      	adds	r3, #1
 80029fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80029fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	dbdf      	blt.n	80029c8 <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	885b      	ldrh	r3, [r3, #2]
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002a28:	fb02 f303 	mul.w	r3, r2, r3
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002a32:	4413      	add	r3, r2
 8002a34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002a3c:	fb02 f303 	mul.w	r3, r2, r3
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a46:	4413      	add	r3, r2
 8002a48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a52:	e01a      	b.n	8002a8a <arm_mat_inverse_f32+0x4f6>
 8002a54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a58:	1d1a      	adds	r2, r3, #4
 8002a5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a5e:	ed93 7a00 	vldr	s14, [r3]
 8002a62:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a6e:	1d1a      	adds	r2, r3, #4
 8002a70:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002a74:	ed93 7a00 	vldr	s14, [r3]
 8002a78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a7c:	edc3 7a00 	vstr	s15, [r3]
 8002a80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a84:	3301      	adds	r3, #1
 8002a86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a8a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	dbdf      	blt.n	8002a54 <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 8002a94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a98:	3301      	adds	r3, #1
 8002a9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002a9e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	f4ff af4b 	bcc.w	8002940 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8002aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aac:	3301      	adds	r3, #1
 8002aae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002ab2:	e092      	b.n	8002bda <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	885b      	ldrh	r3, [r3, #2]
 8002abc:	4619      	mov	r1, r3
 8002abe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ac2:	fb03 f101 	mul.w	r1, r3, r1
 8002ac6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002aca:	440b      	add	r3, r1
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           pivot = *pTmp;
 8002ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	677b      	str	r3, [r7, #116]	; 0x74
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	885b      	ldrh	r3, [r3, #2]
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
 8002af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	623b      	str	r3, [r7, #32]
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002b00:	fb03 f202 	mul.w	r2, r3, r2
 8002b04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b08:	4413      	add	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002b0e:	4413      	add	r3, r2
 8002b10:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002b16:	fb03 f202 	mul.w	r2, r3, r2
 8002b1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002b24:	4413      	add	r3, r2
 8002b26:	677b      	str	r3, [r7, #116]	; 0x74
 8002b28:	2300      	movs	r3, #0
 8002b2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b2c:	e014      	b.n	8002b58 <arm_mat_inverse_f32+0x5c4>
 8002b2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b30:	1d1a      	adds	r2, r3, #4
 8002b32:	677a      	str	r2, [r7, #116]	; 0x74
 8002b34:	ed93 7a00 	vldr	s14, [r3]
 8002b38:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b42:	1d1a      	adds	r2, r3, #4
 8002b44:	67ba      	str	r2, [r7, #120]	; 0x78
 8002b46:	ed93 7a00 	vldr	s14, [r3]
 8002b4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b4e:	edc3 7a00 	vstr	s15, [r3]
 8002b52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b54:	3301      	adds	r3, #1
 8002b56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b58:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	dbe6      	blt.n	8002b2e <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	885b      	ldrh	r3, [r3, #2]
 8002b70:	61fb      	str	r3, [r7, #28]
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	61bb      	str	r3, [r7, #24]
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002b7c:	fb02 f303 	mul.w	r3, r2, r3
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b84:	4413      	add	r3, r2
 8002b86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002b8c:	fb02 f303 	mul.w	r3, r2, r3
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002b94:	4413      	add	r3, r2
 8002b96:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b98:	2300      	movs	r3, #0
 8002b9a:	673b      	str	r3, [r7, #112]	; 0x70
 8002b9c:	e014      	b.n	8002bc8 <arm_mat_inverse_f32+0x634>
 8002b9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ba0:	1d1a      	adds	r2, r3, #4
 8002ba2:	66ba      	str	r2, [r7, #104]	; 0x68
 8002ba4:	ed93 7a00 	vldr	s14, [r3]
 8002ba8:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb2:	1d1a      	adds	r2, r3, #4
 8002bb4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002bb6:	ed93 7a00 	vldr	s14, [r3]
 8002bba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bbe:	edc3 7a00 	vstr	s15, [r3]
 8002bc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	673b      	str	r3, [r7, #112]	; 0x70
 8002bc8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	dbe6      	blt.n	8002b9e <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8002bd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002bda:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002bde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002be0:	429a      	cmp	r2, r3
 8002be2:	f4ff af67 	bcc.w	8002ab4 <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 8002be6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bea:	3301      	adds	r3, #1
 8002bec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002bf0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002bf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	f4ff ad32 	bcc.w	8002660 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 8002c02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d033      	beq.n	8002c72 <arm_mat_inverse_f32+0x6de>
 8002c0a:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002c0e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c16:	d12c      	bne.n	8002c72 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	667b      	str	r3, [r7, #100]	; 0x64
      for (i = 0; i < numRows * numCols; i++)
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c24:	e010      	b.n	8002c48 <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 8002c26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002c2e:	4413      	add	r3, r2
 8002c30:	edd3 7a00 	vldr	s15, [r3]
 8002c34:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3c:	d10d      	bne.n	8002c5a <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 8002c3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c42:	3301      	adds	r3, #1
 8002c44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c4c:	fb02 f303 	mul.w	r3, r2, r3
 8002c50:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d3e6      	bcc.n	8002c26 <arm_mat_inverse_f32+0x692>
 8002c58:	e000      	b.n	8002c5c <arm_mat_inverse_f32+0x6c8>
            break;
 8002c5a:	bf00      	nop
      }

      if (i == numRows * numCols)
 8002c5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c60:	fb02 f303 	mul.w	r3, r2, r3
 8002c64:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d102      	bne.n	8002c72 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 8002c6c:	23fb      	movs	r3, #251	; 0xfb
 8002c6e:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
    }
  }

  /* Return to application */
  return (status);
 8002c72:	f997 30c3 	ldrsb.w	r3, [r7, #195]	; 0xc3
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	37ec      	adds	r7, #236	; 0xec
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b093      	sub	sp, #76	; 0x4c
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	643b      	str	r3, [r7, #64]	; 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	885b      	ldrh	r3, [r3, #2]
 8002cb6:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	885b      	ldrh	r3, [r3, #2]
 8002cbc:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cc2:	8b7b      	ldrh	r3, [r7, #26]
 8002cc4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 8002cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	69fa      	ldr	r2, [r7, #28]
 8002ccc:	4413      	add	r3, r2
 8002cce:	63bb      	str	r3, [r7, #56]	; 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 8002cd0:	8b3b      	ldrh	r3, [r7, #24]
 8002cd2:	633b      	str	r3, [r7, #48]	; 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	643b      	str	r3, [r7, #64]	; 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8002cda:	f04f 0300 	mov.w	r3, #0
 8002cde:	637b      	str	r3, [r7, #52]	; 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 8002ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ce2:	647b      	str	r3, [r7, #68]	; 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 8002ce4:	8afb      	ldrh	r3, [r7, #22]
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 8002ce8:	e017      	b.n	8002d1a <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 8002cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cec:	1d1a      	adds	r2, r3, #4
 8002cee:	647a      	str	r2, [r7, #68]	; 0x44
 8002cf0:	ed93 7a00 	vldr	s14, [r3]
 8002cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cf6:	edd3 7a00 	vldr	s15, [r3]
 8002cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cfe:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d06:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
          pIn2 += numColsB;
 8002d0a:	8b3b      	ldrh	r3, [r7, #24]
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d10:	4413      	add	r3, r2
 8002d12:	643b      	str	r3, [r7, #64]	; 0x40

          /* Decrement loop counter */
          colCnt--;
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	3b01      	subs	r3, #1
 8002d18:	627b      	str	r3, [r7, #36]	; 0x24
        while (colCnt > 0U)
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1e4      	bne.n	8002cea <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 8002d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d22:	1d1a      	adds	r2, r3, #4
 8002d24:	63ba      	str	r2, [r7, #56]	; 0x38
 8002d26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d28:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 8002d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	633b      	str	r3, [r7, #48]	; 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 8002d30:	8b3a      	ldrh	r2, [r7, #24]
 8002d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	6a3a      	ldr	r2, [r7, #32]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	643b      	str	r3, [r7, #64]	; 0x40

      } while (col > 0U);
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1ca      	bne.n	8002cda <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 8002d44:	8b3b      	ldrh	r3, [r7, #24]
 8002d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d48:	4413      	add	r3, r2
 8002d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pInA = pInA + numColsA;
 8002d4c:	8afb      	ldrh	r3, [r7, #22]
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d52:	4413      	add	r3, r2
 8002d54:	63fb      	str	r3, [r7, #60]	; 0x3c

      /* Decrement row loop counter */
      row--;
 8002d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	62bb      	str	r3, [r7, #40]	; 0x28

    } while (row > 0U);
 8002d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1b1      	bne.n	8002cc6 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8002d62:	2300      	movs	r3, #0
 8002d64:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 8002d66:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	374c      	adds	r7, #76	; 0x4c
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b08b      	sub	sp, #44	; 0x2c
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	ed87 0a02 	vstr	s0, [r7, #8]
 8002d82:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	885b      	ldrh	r3, [r3, #2]
 8002d9a:	fb02 f303 	mul.w	r3, r2, r3
 8002d9e:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8002da4:	e010      	b.n	8002dc8 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	1d1a      	adds	r2, r3, #4
 8002daa:	627a      	str	r2, [r7, #36]	; 0x24
 8002dac:	ed93 7a00 	vldr	s14, [r3]
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	1d1a      	adds	r2, r3, #4
 8002db4:	623a      	str	r2, [r7, #32]
 8002db6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dbe:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1eb      	bne.n	8002da6 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 8002dd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	372c      	adds	r7, #44	; 0x2c
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b08b      	sub	sp, #44	; 0x2c
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	461a      	mov	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	885b      	ldrh	r3, [r3, #2]
 8002e0a:	fb02 f303 	mul.w	r3, r2, r3
 8002e0e:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8002e14:	e013      	b.n	8002e3e <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	1d1a      	adds	r2, r3, #4
 8002e1a:	627a      	str	r2, [r7, #36]	; 0x24
 8002e1c:	ed93 7a00 	vldr	s14, [r3]
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	1d1a      	adds	r2, r3, #4
 8002e24:	623a      	str	r2, [r7, #32]
 8002e26:	edd3 7a00 	vldr	s15, [r3]
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	1d1a      	adds	r2, r3, #4
 8002e2e:	61fa      	str	r2, [r7, #28]
 8002e30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e34:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1e8      	bne.n	8002e16 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8002e44:	2300      	movs	r3, #0
 8002e46:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8002e48:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	372c      	adds	r7, #44	; 0x2c
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b08b      	sub	sp, #44	; 0x2c
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	885b      	ldrh	r3, [r3, #2]
 8002e78:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8002e7a:	89fb      	ldrh	r3, [r7, #14]
 8002e7c:	61bb      	str	r3, [r7, #24]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	4413      	add	r3, r2
 8002e8a:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8002e8c:	89bb      	ldrh	r3, [r7, #12]
 8002e8e:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8002e90:	e00d      	b.n	8002eae <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	1d1a      	adds	r2, r3, #4
 8002e96:	627a      	str	r2, [r7, #36]	; 0x24
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8002e9e:	89fb      	ldrh	r3, [r7, #14]
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	6a3a      	ldr	r2, [r7, #32]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1ee      	bne.n	8002e92 <arm_mat_trans_f32+0x3a>
      }

      i++;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1dd      	bne.n	8002e82 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 8002eca:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	372c      	adds	r7, #44	; 0x2c
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
	...

08002edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ee0:	4b0e      	ldr	r3, [pc, #56]	; (8002f1c <HAL_Init+0x40>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a0d      	ldr	r2, [pc, #52]	; (8002f1c <HAL_Init+0x40>)
 8002ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002eec:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <HAL_Init+0x40>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a0a      	ldr	r2, [pc, #40]	; (8002f1c <HAL_Init+0x40>)
 8002ef2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ef6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ef8:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <HAL_Init+0x40>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a07      	ldr	r2, [pc, #28]	; (8002f1c <HAL_Init+0x40>)
 8002efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f04:	2003      	movs	r0, #3
 8002f06:	f000 f92b 	bl	8003160 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f000 f808 	bl	8002f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f10:	f7ff f91c 	bl	800214c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023c00 	.word	0x40023c00

08002f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f28:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <HAL_InitTick+0x54>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	4b12      	ldr	r3, [pc, #72]	; (8002f78 <HAL_InitTick+0x58>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	4619      	mov	r1, r3
 8002f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 f943 	bl	80031ca <HAL_SYSTICK_Config>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e00e      	b.n	8002f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b0f      	cmp	r3, #15
 8002f52:	d80a      	bhi.n	8002f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f54:	2200      	movs	r2, #0
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	f04f 30ff 	mov.w	r0, #4294967295
 8002f5c:	f000 f90b 	bl	8003176 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f60:	4a06      	ldr	r2, [pc, #24]	; (8002f7c <HAL_InitTick+0x5c>)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
 8002f68:	e000      	b.n	8002f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	20000010 	.word	0x20000010
 8002f78:	20000018 	.word	0x20000018
 8002f7c:	20000014 	.word	0x20000014

08002f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f84:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <HAL_IncTick+0x20>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <HAL_IncTick+0x24>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4413      	add	r3, r2
 8002f90:	4a04      	ldr	r2, [pc, #16]	; (8002fa4 <HAL_IncTick+0x24>)
 8002f92:	6013      	str	r3, [r2, #0]
}
 8002f94:	bf00      	nop
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	20000018 	.word	0x20000018
 8002fa4:	200004f4 	.word	0x200004f4

08002fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  return uwTick;
 8002fac:	4b03      	ldr	r3, [pc, #12]	; (8002fbc <HAL_GetTick+0x14>)
 8002fae:	681b      	ldr	r3, [r3, #0]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	200004f4 	.word	0x200004f4

08002fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fd0:	4b0c      	ldr	r3, [pc, #48]	; (8003004 <__NVIC_SetPriorityGrouping+0x44>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fdc:	4013      	ands	r3, r2
 8002fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ff2:	4a04      	ldr	r2, [pc, #16]	; (8003004 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	60d3      	str	r3, [r2, #12]
}
 8002ff8:	bf00      	nop
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	e000ed00 	.word	0xe000ed00

08003008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800300c:	4b04      	ldr	r3, [pc, #16]	; (8003020 <__NVIC_GetPriorityGrouping+0x18>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	0a1b      	lsrs	r3, r3, #8
 8003012:	f003 0307 	and.w	r3, r3, #7
}
 8003016:	4618      	mov	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	e000ed00 	.word	0xe000ed00

08003024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800302e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003032:	2b00      	cmp	r3, #0
 8003034:	db0b      	blt.n	800304e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	f003 021f 	and.w	r2, r3, #31
 800303c:	4907      	ldr	r1, [pc, #28]	; (800305c <__NVIC_EnableIRQ+0x38>)
 800303e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003042:	095b      	lsrs	r3, r3, #5
 8003044:	2001      	movs	r0, #1
 8003046:	fa00 f202 	lsl.w	r2, r0, r2
 800304a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	e000e100 	.word	0xe000e100

08003060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	6039      	str	r1, [r7, #0]
 800306a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800306c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003070:	2b00      	cmp	r3, #0
 8003072:	db0a      	blt.n	800308a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	b2da      	uxtb	r2, r3
 8003078:	490c      	ldr	r1, [pc, #48]	; (80030ac <__NVIC_SetPriority+0x4c>)
 800307a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307e:	0112      	lsls	r2, r2, #4
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	440b      	add	r3, r1
 8003084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003088:	e00a      	b.n	80030a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	b2da      	uxtb	r2, r3
 800308e:	4908      	ldr	r1, [pc, #32]	; (80030b0 <__NVIC_SetPriority+0x50>)
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	3b04      	subs	r3, #4
 8003098:	0112      	lsls	r2, r2, #4
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	440b      	add	r3, r1
 800309e:	761a      	strb	r2, [r3, #24]
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	e000e100 	.word	0xe000e100
 80030b0:	e000ed00 	.word	0xe000ed00

080030b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b089      	sub	sp, #36	; 0x24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f1c3 0307 	rsb	r3, r3, #7
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	bf28      	it	cs
 80030d2:	2304      	movcs	r3, #4
 80030d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	3304      	adds	r3, #4
 80030da:	2b06      	cmp	r3, #6
 80030dc:	d902      	bls.n	80030e4 <NVIC_EncodePriority+0x30>
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	3b03      	subs	r3, #3
 80030e2:	e000      	b.n	80030e6 <NVIC_EncodePriority+0x32>
 80030e4:	2300      	movs	r3, #0
 80030e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e8:	f04f 32ff 	mov.w	r2, #4294967295
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43da      	mvns	r2, r3
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	401a      	ands	r2, r3
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	fa01 f303 	lsl.w	r3, r1, r3
 8003106:	43d9      	mvns	r1, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800310c:	4313      	orrs	r3, r2
         );
}
 800310e:	4618      	mov	r0, r3
 8003110:	3724      	adds	r7, #36	; 0x24
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
	...

0800311c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3b01      	subs	r3, #1
 8003128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800312c:	d301      	bcc.n	8003132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800312e:	2301      	movs	r3, #1
 8003130:	e00f      	b.n	8003152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003132:	4a0a      	ldr	r2, [pc, #40]	; (800315c <SysTick_Config+0x40>)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3b01      	subs	r3, #1
 8003138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800313a:	210f      	movs	r1, #15
 800313c:	f04f 30ff 	mov.w	r0, #4294967295
 8003140:	f7ff ff8e 	bl	8003060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003144:	4b05      	ldr	r3, [pc, #20]	; (800315c <SysTick_Config+0x40>)
 8003146:	2200      	movs	r2, #0
 8003148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800314a:	4b04      	ldr	r3, [pc, #16]	; (800315c <SysTick_Config+0x40>)
 800314c:	2207      	movs	r2, #7
 800314e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	e000e010 	.word	0xe000e010

08003160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f7ff ff29 	bl	8002fc0 <__NVIC_SetPriorityGrouping>
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003176:	b580      	push	{r7, lr}
 8003178:	b086      	sub	sp, #24
 800317a:	af00      	add	r7, sp, #0
 800317c:	4603      	mov	r3, r0
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	607a      	str	r2, [r7, #4]
 8003182:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003184:	2300      	movs	r3, #0
 8003186:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003188:	f7ff ff3e 	bl	8003008 <__NVIC_GetPriorityGrouping>
 800318c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	68b9      	ldr	r1, [r7, #8]
 8003192:	6978      	ldr	r0, [r7, #20]
 8003194:	f7ff ff8e 	bl	80030b4 <NVIC_EncodePriority>
 8003198:	4602      	mov	r2, r0
 800319a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800319e:	4611      	mov	r1, r2
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff ff5d 	bl	8003060 <__NVIC_SetPriority>
}
 80031a6:	bf00      	nop
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b082      	sub	sp, #8
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	4603      	mov	r3, r0
 80031b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff ff31 	bl	8003024 <__NVIC_EnableIRQ>
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7ff ffa2 	bl	800311c <SysTick_Config>
 80031d8:	4603      	mov	r3, r0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
	...

080031e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b089      	sub	sp, #36	; 0x24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031fa:	2300      	movs	r3, #0
 80031fc:	61fb      	str	r3, [r7, #28]
 80031fe:	e159      	b.n	80034b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003200:	2201      	movs	r2, #1
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	4013      	ands	r3, r2
 8003212:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	429a      	cmp	r2, r3
 800321a:	f040 8148 	bne.w	80034ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	2b01      	cmp	r3, #1
 8003228:	d005      	beq.n	8003236 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003232:	2b02      	cmp	r3, #2
 8003234:	d130      	bne.n	8003298 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	2203      	movs	r2, #3
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43db      	mvns	r3, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4013      	ands	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4313      	orrs	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800326c:	2201      	movs	r2, #1
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f003 0201 	and.w	r2, r3, #1
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4313      	orrs	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d017      	beq.n	80032d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	2203      	movs	r2, #3
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d123      	bne.n	8003328 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	08da      	lsrs	r2, r3, #3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3208      	adds	r2, #8
 80032e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	220f      	movs	r2, #15
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4013      	ands	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4313      	orrs	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	08da      	lsrs	r2, r3, #3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3208      	adds	r2, #8
 8003322:	69b9      	ldr	r1, [r7, #24]
 8003324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	2203      	movs	r2, #3
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f003 0203 	and.w	r2, r3, #3
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4313      	orrs	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 80a2 	beq.w	80034ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	4b57      	ldr	r3, [pc, #348]	; (80034cc <HAL_GPIO_Init+0x2e8>)
 8003370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003372:	4a56      	ldr	r2, [pc, #344]	; (80034cc <HAL_GPIO_Init+0x2e8>)
 8003374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003378:	6453      	str	r3, [r2, #68]	; 0x44
 800337a:	4b54      	ldr	r3, [pc, #336]	; (80034cc <HAL_GPIO_Init+0x2e8>)
 800337c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003386:	4a52      	ldr	r2, [pc, #328]	; (80034d0 <HAL_GPIO_Init+0x2ec>)
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	089b      	lsrs	r3, r3, #2
 800338c:	3302      	adds	r3, #2
 800338e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	220f      	movs	r2, #15
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4013      	ands	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a49      	ldr	r2, [pc, #292]	; (80034d4 <HAL_GPIO_Init+0x2f0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d019      	beq.n	80033e6 <HAL_GPIO_Init+0x202>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a48      	ldr	r2, [pc, #288]	; (80034d8 <HAL_GPIO_Init+0x2f4>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d013      	beq.n	80033e2 <HAL_GPIO_Init+0x1fe>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a47      	ldr	r2, [pc, #284]	; (80034dc <HAL_GPIO_Init+0x2f8>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d00d      	beq.n	80033de <HAL_GPIO_Init+0x1fa>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a46      	ldr	r2, [pc, #280]	; (80034e0 <HAL_GPIO_Init+0x2fc>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d007      	beq.n	80033da <HAL_GPIO_Init+0x1f6>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a45      	ldr	r2, [pc, #276]	; (80034e4 <HAL_GPIO_Init+0x300>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d101      	bne.n	80033d6 <HAL_GPIO_Init+0x1f2>
 80033d2:	2304      	movs	r3, #4
 80033d4:	e008      	b.n	80033e8 <HAL_GPIO_Init+0x204>
 80033d6:	2307      	movs	r3, #7
 80033d8:	e006      	b.n	80033e8 <HAL_GPIO_Init+0x204>
 80033da:	2303      	movs	r3, #3
 80033dc:	e004      	b.n	80033e8 <HAL_GPIO_Init+0x204>
 80033de:	2302      	movs	r3, #2
 80033e0:	e002      	b.n	80033e8 <HAL_GPIO_Init+0x204>
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <HAL_GPIO_Init+0x204>
 80033e6:	2300      	movs	r3, #0
 80033e8:	69fa      	ldr	r2, [r7, #28]
 80033ea:	f002 0203 	and.w	r2, r2, #3
 80033ee:	0092      	lsls	r2, r2, #2
 80033f0:	4093      	lsls	r3, r2
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033f8:	4935      	ldr	r1, [pc, #212]	; (80034d0 <HAL_GPIO_Init+0x2ec>)
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	089b      	lsrs	r3, r3, #2
 80033fe:	3302      	adds	r3, #2
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003406:	4b38      	ldr	r3, [pc, #224]	; (80034e8 <HAL_GPIO_Init+0x304>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	43db      	mvns	r3, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4013      	ands	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800342a:	4a2f      	ldr	r2, [pc, #188]	; (80034e8 <HAL_GPIO_Init+0x304>)
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003430:	4b2d      	ldr	r3, [pc, #180]	; (80034e8 <HAL_GPIO_Init+0x304>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	43db      	mvns	r3, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4013      	ands	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003454:	4a24      	ldr	r2, [pc, #144]	; (80034e8 <HAL_GPIO_Init+0x304>)
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800345a:	4b23      	ldr	r3, [pc, #140]	; (80034e8 <HAL_GPIO_Init+0x304>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	43db      	mvns	r3, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4013      	ands	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800347e:	4a1a      	ldr	r2, [pc, #104]	; (80034e8 <HAL_GPIO_Init+0x304>)
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003484:	4b18      	ldr	r3, [pc, #96]	; (80034e8 <HAL_GPIO_Init+0x304>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	43db      	mvns	r3, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4013      	ands	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034a8:	4a0f      	ldr	r2, [pc, #60]	; (80034e8 <HAL_GPIO_Init+0x304>)
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	3301      	adds	r3, #1
 80034b2:	61fb      	str	r3, [r7, #28]
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	2b0f      	cmp	r3, #15
 80034b8:	f67f aea2 	bls.w	8003200 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034bc:	bf00      	nop
 80034be:	bf00      	nop
 80034c0:	3724      	adds	r7, #36	; 0x24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	40023800 	.word	0x40023800
 80034d0:	40013800 	.word	0x40013800
 80034d4:	40020000 	.word	0x40020000
 80034d8:	40020400 	.word	0x40020400
 80034dc:	40020800 	.word	0x40020800
 80034e0:	40020c00 	.word	0x40020c00
 80034e4:	40021000 	.word	0x40021000
 80034e8:	40013c00 	.word	0x40013c00

080034ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	807b      	strh	r3, [r7, #2]
 80034f8:	4613      	mov	r3, r2
 80034fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034fc:	787b      	ldrb	r3, [r7, #1]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003502:	887a      	ldrh	r2, [r7, #2]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003508:	e003      	b.n	8003512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800350a:	887b      	ldrh	r3, [r7, #2]
 800350c:	041a      	lsls	r2, r3, #16
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	619a      	str	r2, [r3, #24]
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
	...

08003520 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e267      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d075      	beq.n	800362a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800353e:	4b88      	ldr	r3, [pc, #544]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 030c 	and.w	r3, r3, #12
 8003546:	2b04      	cmp	r3, #4
 8003548:	d00c      	beq.n	8003564 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800354a:	4b85      	ldr	r3, [pc, #532]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003552:	2b08      	cmp	r3, #8
 8003554:	d112      	bne.n	800357c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003556:	4b82      	ldr	r3, [pc, #520]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800355e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003562:	d10b      	bne.n	800357c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003564:	4b7e      	ldr	r3, [pc, #504]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d05b      	beq.n	8003628 <HAL_RCC_OscConfig+0x108>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d157      	bne.n	8003628 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e242      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003584:	d106      	bne.n	8003594 <HAL_RCC_OscConfig+0x74>
 8003586:	4b76      	ldr	r3, [pc, #472]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a75      	ldr	r2, [pc, #468]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 800358c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	e01d      	b.n	80035d0 <HAL_RCC_OscConfig+0xb0>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800359c:	d10c      	bne.n	80035b8 <HAL_RCC_OscConfig+0x98>
 800359e:	4b70      	ldr	r3, [pc, #448]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a6f      	ldr	r2, [pc, #444]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 80035a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	4b6d      	ldr	r3, [pc, #436]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a6c      	ldr	r2, [pc, #432]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 80035b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	e00b      	b.n	80035d0 <HAL_RCC_OscConfig+0xb0>
 80035b8:	4b69      	ldr	r3, [pc, #420]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a68      	ldr	r2, [pc, #416]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 80035be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035c2:	6013      	str	r3, [r2, #0]
 80035c4:	4b66      	ldr	r3, [pc, #408]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a65      	ldr	r2, [pc, #404]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 80035ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d013      	beq.n	8003600 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d8:	f7ff fce6 	bl	8002fa8 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035e0:	f7ff fce2 	bl	8002fa8 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b64      	cmp	r3, #100	; 0x64
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e207      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f2:	4b5b      	ldr	r3, [pc, #364]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0f0      	beq.n	80035e0 <HAL_RCC_OscConfig+0xc0>
 80035fe:	e014      	b.n	800362a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003600:	f7ff fcd2 	bl	8002fa8 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003608:	f7ff fcce 	bl	8002fa8 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b64      	cmp	r3, #100	; 0x64
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e1f3      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800361a:	4b51      	ldr	r3, [pc, #324]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f0      	bne.n	8003608 <HAL_RCC_OscConfig+0xe8>
 8003626:	e000      	b.n	800362a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d063      	beq.n	80036fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003636:	4b4a      	ldr	r3, [pc, #296]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 030c 	and.w	r3, r3, #12
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00b      	beq.n	800365a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003642:	4b47      	ldr	r3, [pc, #284]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800364a:	2b08      	cmp	r3, #8
 800364c:	d11c      	bne.n	8003688 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800364e:	4b44      	ldr	r3, [pc, #272]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d116      	bne.n	8003688 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800365a:	4b41      	ldr	r3, [pc, #260]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d005      	beq.n	8003672 <HAL_RCC_OscConfig+0x152>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d001      	beq.n	8003672 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e1c7      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003672:	4b3b      	ldr	r3, [pc, #236]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	4937      	ldr	r1, [pc, #220]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 8003682:	4313      	orrs	r3, r2
 8003684:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003686:	e03a      	b.n	80036fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d020      	beq.n	80036d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003690:	4b34      	ldr	r3, [pc, #208]	; (8003764 <HAL_RCC_OscConfig+0x244>)
 8003692:	2201      	movs	r2, #1
 8003694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003696:	f7ff fc87 	bl	8002fa8 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800369e:	f7ff fc83 	bl	8002fa8 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e1a8      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b0:	4b2b      	ldr	r3, [pc, #172]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0f0      	beq.n	800369e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036bc:	4b28      	ldr	r3, [pc, #160]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	4925      	ldr	r1, [pc, #148]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	600b      	str	r3, [r1, #0]
 80036d0:	e015      	b.n	80036fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036d2:	4b24      	ldr	r3, [pc, #144]	; (8003764 <HAL_RCC_OscConfig+0x244>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d8:	f7ff fc66 	bl	8002fa8 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036e0:	f7ff fc62 	bl	8002fa8 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e187      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036f2:	4b1b      	ldr	r3, [pc, #108]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f0      	bne.n	80036e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0308 	and.w	r3, r3, #8
 8003706:	2b00      	cmp	r3, #0
 8003708:	d036      	beq.n	8003778 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d016      	beq.n	8003740 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003712:	4b15      	ldr	r3, [pc, #84]	; (8003768 <HAL_RCC_OscConfig+0x248>)
 8003714:	2201      	movs	r2, #1
 8003716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003718:	f7ff fc46 	bl	8002fa8 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003720:	f7ff fc42 	bl	8002fa8 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e167      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003732:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 8003734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0f0      	beq.n	8003720 <HAL_RCC_OscConfig+0x200>
 800373e:	e01b      	b.n	8003778 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003740:	4b09      	ldr	r3, [pc, #36]	; (8003768 <HAL_RCC_OscConfig+0x248>)
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003746:	f7ff fc2f 	bl	8002fa8 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800374c:	e00e      	b.n	800376c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800374e:	f7ff fc2b 	bl	8002fa8 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d907      	bls.n	800376c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e150      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
 8003760:	40023800 	.word	0x40023800
 8003764:	42470000 	.word	0x42470000
 8003768:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800376c:	4b88      	ldr	r3, [pc, #544]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 800376e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1ea      	bne.n	800374e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 8097 	beq.w	80038b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003786:	2300      	movs	r3, #0
 8003788:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800378a:	4b81      	ldr	r3, [pc, #516]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10f      	bne.n	80037b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003796:	2300      	movs	r3, #0
 8003798:	60bb      	str	r3, [r7, #8]
 800379a:	4b7d      	ldr	r3, [pc, #500]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	4a7c      	ldr	r2, [pc, #496]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 80037a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a4:	6413      	str	r3, [r2, #64]	; 0x40
 80037a6:	4b7a      	ldr	r3, [pc, #488]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ae:	60bb      	str	r3, [r7, #8]
 80037b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037b2:	2301      	movs	r3, #1
 80037b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b6:	4b77      	ldr	r3, [pc, #476]	; (8003994 <HAL_RCC_OscConfig+0x474>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d118      	bne.n	80037f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037c2:	4b74      	ldr	r3, [pc, #464]	; (8003994 <HAL_RCC_OscConfig+0x474>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a73      	ldr	r2, [pc, #460]	; (8003994 <HAL_RCC_OscConfig+0x474>)
 80037c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ce:	f7ff fbeb 	bl	8002fa8 <HAL_GetTick>
 80037d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d4:	e008      	b.n	80037e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d6:	f7ff fbe7 	bl	8002fa8 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e10c      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e8:	4b6a      	ldr	r3, [pc, #424]	; (8003994 <HAL_RCC_OscConfig+0x474>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0f0      	beq.n	80037d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d106      	bne.n	800380a <HAL_RCC_OscConfig+0x2ea>
 80037fc:	4b64      	ldr	r3, [pc, #400]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 80037fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003800:	4a63      	ldr	r2, [pc, #396]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 8003802:	f043 0301 	orr.w	r3, r3, #1
 8003806:	6713      	str	r3, [r2, #112]	; 0x70
 8003808:	e01c      	b.n	8003844 <HAL_RCC_OscConfig+0x324>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	2b05      	cmp	r3, #5
 8003810:	d10c      	bne.n	800382c <HAL_RCC_OscConfig+0x30c>
 8003812:	4b5f      	ldr	r3, [pc, #380]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 8003814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003816:	4a5e      	ldr	r2, [pc, #376]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 8003818:	f043 0304 	orr.w	r3, r3, #4
 800381c:	6713      	str	r3, [r2, #112]	; 0x70
 800381e:	4b5c      	ldr	r3, [pc, #368]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 8003820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003822:	4a5b      	ldr	r2, [pc, #364]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 8003824:	f043 0301 	orr.w	r3, r3, #1
 8003828:	6713      	str	r3, [r2, #112]	; 0x70
 800382a:	e00b      	b.n	8003844 <HAL_RCC_OscConfig+0x324>
 800382c:	4b58      	ldr	r3, [pc, #352]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 800382e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003830:	4a57      	ldr	r2, [pc, #348]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 8003832:	f023 0301 	bic.w	r3, r3, #1
 8003836:	6713      	str	r3, [r2, #112]	; 0x70
 8003838:	4b55      	ldr	r3, [pc, #340]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 800383a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383c:	4a54      	ldr	r2, [pc, #336]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 800383e:	f023 0304 	bic.w	r3, r3, #4
 8003842:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d015      	beq.n	8003878 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384c:	f7ff fbac 	bl	8002fa8 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003852:	e00a      	b.n	800386a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003854:	f7ff fba8 	bl	8002fa8 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003862:	4293      	cmp	r3, r2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e0cb      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800386a:	4b49      	ldr	r3, [pc, #292]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 800386c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0ee      	beq.n	8003854 <HAL_RCC_OscConfig+0x334>
 8003876:	e014      	b.n	80038a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003878:	f7ff fb96 	bl	8002fa8 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800387e:	e00a      	b.n	8003896 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003880:	f7ff fb92 	bl	8002fa8 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	f241 3288 	movw	r2, #5000	; 0x1388
 800388e:	4293      	cmp	r3, r2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e0b5      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003896:	4b3e      	ldr	r3, [pc, #248]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 8003898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1ee      	bne.n	8003880 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038a2:	7dfb      	ldrb	r3, [r7, #23]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d105      	bne.n	80038b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a8:	4b39      	ldr	r3, [pc, #228]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	4a38      	ldr	r2, [pc, #224]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 80038ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 80a1 	beq.w	8003a00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038be:	4b34      	ldr	r3, [pc, #208]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 030c 	and.w	r3, r3, #12
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d05c      	beq.n	8003984 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d141      	bne.n	8003956 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d2:	4b31      	ldr	r3, [pc, #196]	; (8003998 <HAL_RCC_OscConfig+0x478>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d8:	f7ff fb66 	bl	8002fa8 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038e0:	f7ff fb62 	bl	8002fa8 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e087      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f2:	4b27      	ldr	r3, [pc, #156]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f0      	bne.n	80038e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	69da      	ldr	r2, [r3, #28]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	019b      	lsls	r3, r3, #6
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003914:	085b      	lsrs	r3, r3, #1
 8003916:	3b01      	subs	r3, #1
 8003918:	041b      	lsls	r3, r3, #16
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003920:	061b      	lsls	r3, r3, #24
 8003922:	491b      	ldr	r1, [pc, #108]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 8003924:	4313      	orrs	r3, r2
 8003926:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003928:	4b1b      	ldr	r3, [pc, #108]	; (8003998 <HAL_RCC_OscConfig+0x478>)
 800392a:	2201      	movs	r2, #1
 800392c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392e:	f7ff fb3b 	bl	8002fa8 <HAL_GetTick>
 8003932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003936:	f7ff fb37 	bl	8002fa8 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e05c      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003948:	4b11      	ldr	r3, [pc, #68]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0f0      	beq.n	8003936 <HAL_RCC_OscConfig+0x416>
 8003954:	e054      	b.n	8003a00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003956:	4b10      	ldr	r3, [pc, #64]	; (8003998 <HAL_RCC_OscConfig+0x478>)
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395c:	f7ff fb24 	bl	8002fa8 <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003964:	f7ff fb20 	bl	8002fa8 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e045      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003976:	4b06      	ldr	r3, [pc, #24]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1f0      	bne.n	8003964 <HAL_RCC_OscConfig+0x444>
 8003982:	e03d      	b.n	8003a00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d107      	bne.n	800399c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e038      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
 8003990:	40023800 	.word	0x40023800
 8003994:	40007000 	.word	0x40007000
 8003998:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800399c:	4b1b      	ldr	r3, [pc, #108]	; (8003a0c <HAL_RCC_OscConfig+0x4ec>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d028      	beq.n	80039fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d121      	bne.n	80039fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d11a      	bne.n	80039fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039cc:	4013      	ands	r3, r2
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d111      	bne.n	80039fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e2:	085b      	lsrs	r3, r3, #1
 80039e4:	3b01      	subs	r3, #1
 80039e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d107      	bne.n	80039fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d001      	beq.n	8003a00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e000      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40023800 	.word	0x40023800

08003a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0cc      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a24:	4b68      	ldr	r3, [pc, #416]	; (8003bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d90c      	bls.n	8003a4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a32:	4b65      	ldr	r3, [pc, #404]	; (8003bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a3a:	4b63      	ldr	r3, [pc, #396]	; (8003bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d001      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e0b8      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d020      	beq.n	8003a9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d005      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a64:	4b59      	ldr	r3, [pc, #356]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	4a58      	ldr	r2, [pc, #352]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0308 	and.w	r3, r3, #8
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d005      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a7c:	4b53      	ldr	r3, [pc, #332]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	4a52      	ldr	r2, [pc, #328]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a88:	4b50      	ldr	r3, [pc, #320]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	494d      	ldr	r1, [pc, #308]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d044      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d107      	bne.n	8003abe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aae:	4b47      	ldr	r3, [pc, #284]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d119      	bne.n	8003aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e07f      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d003      	beq.n	8003ace <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aca:	2b03      	cmp	r3, #3
 8003acc:	d107      	bne.n	8003ade <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ace:	4b3f      	ldr	r3, [pc, #252]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d109      	bne.n	8003aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e06f      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ade:	4b3b      	ldr	r3, [pc, #236]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e067      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aee:	4b37      	ldr	r3, [pc, #220]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f023 0203 	bic.w	r2, r3, #3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	4934      	ldr	r1, [pc, #208]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b00:	f7ff fa52 	bl	8002fa8 <HAL_GetTick>
 8003b04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b06:	e00a      	b.n	8003b1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b08:	f7ff fa4e 	bl	8002fa8 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e04f      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b1e:	4b2b      	ldr	r3, [pc, #172]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 020c 	and.w	r2, r3, #12
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d1eb      	bne.n	8003b08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b30:	4b25      	ldr	r3, [pc, #148]	; (8003bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d20c      	bcs.n	8003b58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3e:	4b22      	ldr	r3, [pc, #136]	; (8003bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b46:	4b20      	ldr	r3, [pc, #128]	; (8003bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d001      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e032      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d008      	beq.n	8003b76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b64:	4b19      	ldr	r3, [pc, #100]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	4916      	ldr	r1, [pc, #88]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d009      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b82:	4b12      	ldr	r3, [pc, #72]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	490e      	ldr	r1, [pc, #56]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b96:	f000 f821 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	091b      	lsrs	r3, r3, #4
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	490a      	ldr	r1, [pc, #40]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8003ba8:	5ccb      	ldrb	r3, [r1, r3]
 8003baa:	fa22 f303 	lsr.w	r3, r2, r3
 8003bae:	4a09      	ldr	r2, [pc, #36]	; (8003bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bb2:	4b09      	ldr	r3, [pc, #36]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff f9b2 	bl	8002f20 <HAL_InitTick>

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40023c00 	.word	0x40023c00
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	08005f04 	.word	0x08005f04
 8003bd4:	20000010 	.word	0x20000010
 8003bd8:	20000014 	.word	0x20000014

08003bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003be0:	b094      	sub	sp, #80	; 0x50
 8003be2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	647b      	str	r3, [r7, #68]	; 0x44
 8003be8:	2300      	movs	r3, #0
 8003bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bec:	2300      	movs	r3, #0
 8003bee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bf4:	4b79      	ldr	r3, [pc, #484]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 030c 	and.w	r3, r3, #12
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d00d      	beq.n	8003c1c <HAL_RCC_GetSysClockFreq+0x40>
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	f200 80e1 	bhi.w	8003dc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <HAL_RCC_GetSysClockFreq+0x34>
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d003      	beq.n	8003c16 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c0e:	e0db      	b.n	8003dc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c10:	4b73      	ldr	r3, [pc, #460]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c12:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003c14:	e0db      	b.n	8003dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c16:	4b73      	ldr	r3, [pc, #460]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c1a:	e0d8      	b.n	8003dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c1c:	4b6f      	ldr	r3, [pc, #444]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c24:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c26:	4b6d      	ldr	r3, [pc, #436]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d063      	beq.n	8003cfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c32:	4b6a      	ldr	r3, [pc, #424]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	099b      	lsrs	r3, r3, #6
 8003c38:	2200      	movs	r2, #0
 8003c3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c44:	633b      	str	r3, [r7, #48]	; 0x30
 8003c46:	2300      	movs	r3, #0
 8003c48:	637b      	str	r3, [r7, #52]	; 0x34
 8003c4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c4e:	4622      	mov	r2, r4
 8003c50:	462b      	mov	r3, r5
 8003c52:	f04f 0000 	mov.w	r0, #0
 8003c56:	f04f 0100 	mov.w	r1, #0
 8003c5a:	0159      	lsls	r1, r3, #5
 8003c5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c60:	0150      	lsls	r0, r2, #5
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4621      	mov	r1, r4
 8003c68:	1a51      	subs	r1, r2, r1
 8003c6a:	6139      	str	r1, [r7, #16]
 8003c6c:	4629      	mov	r1, r5
 8003c6e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	f04f 0200 	mov.w	r2, #0
 8003c78:	f04f 0300 	mov.w	r3, #0
 8003c7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c80:	4659      	mov	r1, fp
 8003c82:	018b      	lsls	r3, r1, #6
 8003c84:	4651      	mov	r1, sl
 8003c86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c8a:	4651      	mov	r1, sl
 8003c8c:	018a      	lsls	r2, r1, #6
 8003c8e:	4651      	mov	r1, sl
 8003c90:	ebb2 0801 	subs.w	r8, r2, r1
 8003c94:	4659      	mov	r1, fp
 8003c96:	eb63 0901 	sbc.w	r9, r3, r1
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	f04f 0300 	mov.w	r3, #0
 8003ca2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ca6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003caa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cae:	4690      	mov	r8, r2
 8003cb0:	4699      	mov	r9, r3
 8003cb2:	4623      	mov	r3, r4
 8003cb4:	eb18 0303 	adds.w	r3, r8, r3
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	462b      	mov	r3, r5
 8003cbc:	eb49 0303 	adc.w	r3, r9, r3
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	f04f 0300 	mov.w	r3, #0
 8003cca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003cce:	4629      	mov	r1, r5
 8003cd0:	024b      	lsls	r3, r1, #9
 8003cd2:	4621      	mov	r1, r4
 8003cd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cd8:	4621      	mov	r1, r4
 8003cda:	024a      	lsls	r2, r1, #9
 8003cdc:	4610      	mov	r0, r2
 8003cde:	4619      	mov	r1, r3
 8003ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ce6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ce8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cec:	f7fc ffa0 	bl	8000c30 <__aeabi_uldivmod>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cf8:	e058      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cfa:	4b38      	ldr	r3, [pc, #224]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	099b      	lsrs	r3, r3, #6
 8003d00:	2200      	movs	r2, #0
 8003d02:	4618      	mov	r0, r3
 8003d04:	4611      	mov	r1, r2
 8003d06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d0a:	623b      	str	r3, [r7, #32]
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d14:	4642      	mov	r2, r8
 8003d16:	464b      	mov	r3, r9
 8003d18:	f04f 0000 	mov.w	r0, #0
 8003d1c:	f04f 0100 	mov.w	r1, #0
 8003d20:	0159      	lsls	r1, r3, #5
 8003d22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d26:	0150      	lsls	r0, r2, #5
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4641      	mov	r1, r8
 8003d2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d32:	4649      	mov	r1, r9
 8003d34:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d4c:	ebb2 040a 	subs.w	r4, r2, sl
 8003d50:	eb63 050b 	sbc.w	r5, r3, fp
 8003d54:	f04f 0200 	mov.w	r2, #0
 8003d58:	f04f 0300 	mov.w	r3, #0
 8003d5c:	00eb      	lsls	r3, r5, #3
 8003d5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d62:	00e2      	lsls	r2, r4, #3
 8003d64:	4614      	mov	r4, r2
 8003d66:	461d      	mov	r5, r3
 8003d68:	4643      	mov	r3, r8
 8003d6a:	18e3      	adds	r3, r4, r3
 8003d6c:	603b      	str	r3, [r7, #0]
 8003d6e:	464b      	mov	r3, r9
 8003d70:	eb45 0303 	adc.w	r3, r5, r3
 8003d74:	607b      	str	r3, [r7, #4]
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	f04f 0300 	mov.w	r3, #0
 8003d7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d82:	4629      	mov	r1, r5
 8003d84:	028b      	lsls	r3, r1, #10
 8003d86:	4621      	mov	r1, r4
 8003d88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d8c:	4621      	mov	r1, r4
 8003d8e:	028a      	lsls	r2, r1, #10
 8003d90:	4610      	mov	r0, r2
 8003d92:	4619      	mov	r1, r3
 8003d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d96:	2200      	movs	r2, #0
 8003d98:	61bb      	str	r3, [r7, #24]
 8003d9a:	61fa      	str	r2, [r7, #28]
 8003d9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003da0:	f7fc ff46 	bl	8000c30 <__aeabi_uldivmod>
 8003da4:	4602      	mov	r2, r0
 8003da6:	460b      	mov	r3, r1
 8003da8:	4613      	mov	r3, r2
 8003daa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003dac:	4b0b      	ldr	r3, [pc, #44]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	0c1b      	lsrs	r3, r3, #16
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	3301      	adds	r3, #1
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003dbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dc6:	e002      	b.n	8003dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dc8:	4b05      	ldr	r3, [pc, #20]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3750      	adds	r7, #80	; 0x50
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dda:	bf00      	nop
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	00f42400 	.word	0x00f42400
 8003de4:	007a1200 	.word	0x007a1200

08003de8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dec:	4b03      	ldr	r3, [pc, #12]	; (8003dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8003dee:	681b      	ldr	r3, [r3, #0]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	20000010 	.word	0x20000010

08003e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e04:	f7ff fff0 	bl	8003de8 <HAL_RCC_GetHCLKFreq>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	0a9b      	lsrs	r3, r3, #10
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	4903      	ldr	r1, [pc, #12]	; (8003e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e16:	5ccb      	ldrb	r3, [r1, r3]
 8003e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40023800 	.word	0x40023800
 8003e24:	08005f14 	.word	0x08005f14

08003e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e2c:	f7ff ffdc 	bl	8003de8 <HAL_RCC_GetHCLKFreq>
 8003e30:	4602      	mov	r2, r0
 8003e32:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	0b5b      	lsrs	r3, r3, #13
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	4903      	ldr	r1, [pc, #12]	; (8003e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e3e:	5ccb      	ldrb	r3, [r1, r3]
 8003e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	08005f14 	.word	0x08005f14

08003e50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e041      	b.n	8003ee6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d106      	bne.n	8003e7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7fe fa00 	bl	800227c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4610      	mov	r0, r2
 8003e90:	f000 fd7e 	bl	8004990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
	...

08003ef0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d001      	beq.n	8003f08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e044      	b.n	8003f92 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f042 0201 	orr.w	r2, r2, #1
 8003f1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a1e      	ldr	r2, [pc, #120]	; (8003fa0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d018      	beq.n	8003f5c <HAL_TIM_Base_Start_IT+0x6c>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f32:	d013      	beq.n	8003f5c <HAL_TIM_Base_Start_IT+0x6c>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a1a      	ldr	r2, [pc, #104]	; (8003fa4 <HAL_TIM_Base_Start_IT+0xb4>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d00e      	beq.n	8003f5c <HAL_TIM_Base_Start_IT+0x6c>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a19      	ldr	r2, [pc, #100]	; (8003fa8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d009      	beq.n	8003f5c <HAL_TIM_Base_Start_IT+0x6c>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a17      	ldr	r2, [pc, #92]	; (8003fac <HAL_TIM_Base_Start_IT+0xbc>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d004      	beq.n	8003f5c <HAL_TIM_Base_Start_IT+0x6c>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a16      	ldr	r2, [pc, #88]	; (8003fb0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d111      	bne.n	8003f80 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2b06      	cmp	r3, #6
 8003f6c:	d010      	beq.n	8003f90 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f042 0201 	orr.w	r2, r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f7e:	e007      	b.n	8003f90 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0201 	orr.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	40010000 	.word	0x40010000
 8003fa4:	40000400 	.word	0x40000400
 8003fa8:	40000800 	.word	0x40000800
 8003fac:	40000c00 	.word	0x40000c00
 8003fb0:	40014000 	.word	0x40014000

08003fb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e041      	b.n	800404a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d106      	bne.n	8003fe0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fe f8de 	bl	800219c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	4610      	mov	r0, r2
 8003ff4:	f000 fccc 	bl	8004990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
	...

08004054 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d109      	bne.n	8004078 <HAL_TIM_PWM_Start+0x24>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b01      	cmp	r3, #1
 800406e:	bf14      	ite	ne
 8004070:	2301      	movne	r3, #1
 8004072:	2300      	moveq	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	e022      	b.n	80040be <HAL_TIM_PWM_Start+0x6a>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	2b04      	cmp	r3, #4
 800407c:	d109      	bne.n	8004092 <HAL_TIM_PWM_Start+0x3e>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b01      	cmp	r3, #1
 8004088:	bf14      	ite	ne
 800408a:	2301      	movne	r3, #1
 800408c:	2300      	moveq	r3, #0
 800408e:	b2db      	uxtb	r3, r3
 8004090:	e015      	b.n	80040be <HAL_TIM_PWM_Start+0x6a>
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	2b08      	cmp	r3, #8
 8004096:	d109      	bne.n	80040ac <HAL_TIM_PWM_Start+0x58>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	bf14      	ite	ne
 80040a4:	2301      	movne	r3, #1
 80040a6:	2300      	moveq	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	e008      	b.n	80040be <HAL_TIM_PWM_Start+0x6a>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	bf14      	ite	ne
 80040b8:	2301      	movne	r3, #1
 80040ba:	2300      	moveq	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e068      	b.n	8004198 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d104      	bne.n	80040d6 <HAL_TIM_PWM_Start+0x82>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040d4:	e013      	b.n	80040fe <HAL_TIM_PWM_Start+0xaa>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2b04      	cmp	r3, #4
 80040da:	d104      	bne.n	80040e6 <HAL_TIM_PWM_Start+0x92>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040e4:	e00b      	b.n	80040fe <HAL_TIM_PWM_Start+0xaa>
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	d104      	bne.n	80040f6 <HAL_TIM_PWM_Start+0xa2>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040f4:	e003      	b.n	80040fe <HAL_TIM_PWM_Start+0xaa>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2202      	movs	r2, #2
 80040fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2201      	movs	r2, #1
 8004104:	6839      	ldr	r1, [r7, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f000 fee8 	bl	8004edc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a23      	ldr	r2, [pc, #140]	; (80041a0 <HAL_TIM_PWM_Start+0x14c>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d107      	bne.n	8004126 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004124:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a1d      	ldr	r2, [pc, #116]	; (80041a0 <HAL_TIM_PWM_Start+0x14c>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d018      	beq.n	8004162 <HAL_TIM_PWM_Start+0x10e>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004138:	d013      	beq.n	8004162 <HAL_TIM_PWM_Start+0x10e>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a19      	ldr	r2, [pc, #100]	; (80041a4 <HAL_TIM_PWM_Start+0x150>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d00e      	beq.n	8004162 <HAL_TIM_PWM_Start+0x10e>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a17      	ldr	r2, [pc, #92]	; (80041a8 <HAL_TIM_PWM_Start+0x154>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d009      	beq.n	8004162 <HAL_TIM_PWM_Start+0x10e>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a16      	ldr	r2, [pc, #88]	; (80041ac <HAL_TIM_PWM_Start+0x158>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d004      	beq.n	8004162 <HAL_TIM_PWM_Start+0x10e>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a14      	ldr	r2, [pc, #80]	; (80041b0 <HAL_TIM_PWM_Start+0x15c>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d111      	bne.n	8004186 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2b06      	cmp	r3, #6
 8004172:	d010      	beq.n	8004196 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0201 	orr.w	r2, r2, #1
 8004182:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004184:	e007      	b.n	8004196 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f042 0201 	orr.w	r2, r2, #1
 8004194:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	40010000 	.word	0x40010000
 80041a4:	40000400 	.word	0x40000400
 80041a8:	40000800 	.word	0x40000800
 80041ac:	40000c00 	.word	0x40000c00
 80041b0:	40014000 	.word	0x40014000

080041b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e097      	b.n	80042f8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d106      	bne.n	80041e2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f7fd ffff 	bl	80021e0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2202      	movs	r2, #2
 80041e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6812      	ldr	r2, [r2, #0]
 80041f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041f8:	f023 0307 	bic.w	r3, r3, #7
 80041fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	3304      	adds	r3, #4
 8004206:	4619      	mov	r1, r3
 8004208:	4610      	mov	r0, r2
 800420a:	f000 fbc1 	bl	8004990 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	4313      	orrs	r3, r2
 800422e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004236:	f023 0303 	bic.w	r3, r3, #3
 800423a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	021b      	lsls	r3, r3, #8
 8004246:	4313      	orrs	r3, r2
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	4313      	orrs	r3, r2
 800424c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004254:	f023 030c 	bic.w	r3, r3, #12
 8004258:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004260:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004264:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	021b      	lsls	r3, r3, #8
 8004270:	4313      	orrs	r3, r2
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	4313      	orrs	r3, r2
 8004276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	011a      	lsls	r2, r3, #4
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	031b      	lsls	r3, r3, #12
 8004284:	4313      	orrs	r3, r2
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	4313      	orrs	r3, r2
 800428a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004292:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800429a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	4313      	orrs	r3, r2
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3718      	adds	r7, #24
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004310:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004318:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004320:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004328:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d110      	bne.n	8004352 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004330:	7bfb      	ldrb	r3, [r7, #15]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d102      	bne.n	800433c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004336:	7b7b      	ldrb	r3, [r7, #13]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d001      	beq.n	8004340 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e069      	b.n	8004414 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2202      	movs	r2, #2
 800434c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004350:	e031      	b.n	80043b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b04      	cmp	r3, #4
 8004356:	d110      	bne.n	800437a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004358:	7bbb      	ldrb	r3, [r7, #14]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d102      	bne.n	8004364 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800435e:	7b3b      	ldrb	r3, [r7, #12]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d001      	beq.n	8004368 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e055      	b.n	8004414 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004378:	e01d      	b.n	80043b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800437a:	7bfb      	ldrb	r3, [r7, #15]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d108      	bne.n	8004392 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004380:	7bbb      	ldrb	r3, [r7, #14]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d105      	bne.n	8004392 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004386:	7b7b      	ldrb	r3, [r7, #13]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d102      	bne.n	8004392 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800438c:	7b3b      	ldrb	r3, [r7, #12]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d001      	beq.n	8004396 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e03e      	b.n	8004414 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2202      	movs	r2, #2
 800439a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2202      	movs	r2, #2
 80043a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2202      	movs	r2, #2
 80043aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2202      	movs	r2, #2
 80043b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <HAL_TIM_Encoder_Start+0xc4>
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d008      	beq.n	80043d4 <HAL_TIM_Encoder_Start+0xd4>
 80043c2:	e00f      	b.n	80043e4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2201      	movs	r2, #1
 80043ca:	2100      	movs	r1, #0
 80043cc:	4618      	mov	r0, r3
 80043ce:	f000 fd85 	bl	8004edc <TIM_CCxChannelCmd>
      break;
 80043d2:	e016      	b.n	8004402 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2201      	movs	r2, #1
 80043da:	2104      	movs	r1, #4
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 fd7d 	bl	8004edc <TIM_CCxChannelCmd>
      break;
 80043e2:	e00e      	b.n	8004402 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2201      	movs	r2, #1
 80043ea:	2100      	movs	r1, #0
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 fd75 	bl	8004edc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2201      	movs	r2, #1
 80043f8:	2104      	movs	r1, #4
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 fd6e 	bl	8004edc <TIM_CCxChannelCmd>
      break;
 8004400:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f042 0201 	orr.w	r2, r2, #1
 8004410:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b02      	cmp	r3, #2
 8004430:	d122      	bne.n	8004478 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b02      	cmp	r3, #2
 800443e:	d11b      	bne.n	8004478 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f06f 0202 	mvn.w	r2, #2
 8004448:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	f003 0303 	and.w	r3, r3, #3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 fa77 	bl	8004952 <HAL_TIM_IC_CaptureCallback>
 8004464:	e005      	b.n	8004472 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 fa69 	bl	800493e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 fa7a 	bl	8004966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	f003 0304 	and.w	r3, r3, #4
 8004482:	2b04      	cmp	r3, #4
 8004484:	d122      	bne.n	80044cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b04      	cmp	r3, #4
 8004492:	d11b      	bne.n	80044cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f06f 0204 	mvn.w	r2, #4
 800449c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2202      	movs	r2, #2
 80044a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fa4d 	bl	8004952 <HAL_TIM_IC_CaptureCallback>
 80044b8:	e005      	b.n	80044c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fa3f 	bl	800493e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 fa50 	bl	8004966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	f003 0308 	and.w	r3, r3, #8
 80044d6:	2b08      	cmp	r3, #8
 80044d8:	d122      	bne.n	8004520 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	f003 0308 	and.w	r3, r3, #8
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d11b      	bne.n	8004520 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f06f 0208 	mvn.w	r2, #8
 80044f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2204      	movs	r2, #4
 80044f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fa23 	bl	8004952 <HAL_TIM_IC_CaptureCallback>
 800450c:	e005      	b.n	800451a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 fa15 	bl	800493e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 fa26 	bl	8004966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0310 	and.w	r3, r3, #16
 800452a:	2b10      	cmp	r3, #16
 800452c:	d122      	bne.n	8004574 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f003 0310 	and.w	r3, r3, #16
 8004538:	2b10      	cmp	r3, #16
 800453a:	d11b      	bne.n	8004574 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0210 	mvn.w	r2, #16
 8004544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2208      	movs	r2, #8
 800454a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f9f9 	bl	8004952 <HAL_TIM_IC_CaptureCallback>
 8004560:	e005      	b.n	800456e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f9eb 	bl	800493e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f9fc 	bl	8004966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b01      	cmp	r3, #1
 8004580:	d10e      	bne.n	80045a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b01      	cmp	r3, #1
 800458e:	d107      	bne.n	80045a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f06f 0201 	mvn.w	r2, #1
 8004598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7fd fd66 	bl	800206c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045aa:	2b80      	cmp	r3, #128	; 0x80
 80045ac:	d10e      	bne.n	80045cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b8:	2b80      	cmp	r3, #128	; 0x80
 80045ba:	d107      	bne.n	80045cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 fd78 	bl	80050bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d6:	2b40      	cmp	r3, #64	; 0x40
 80045d8:	d10e      	bne.n	80045f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e4:	2b40      	cmp	r3, #64	; 0x40
 80045e6:	d107      	bne.n	80045f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f9c1 	bl	800497a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b20      	cmp	r3, #32
 8004604:	d10e      	bne.n	8004624 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f003 0320 	and.w	r3, r3, #32
 8004610:	2b20      	cmp	r3, #32
 8004612:	d107      	bne.n	8004624 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f06f 0220 	mvn.w	r2, #32
 800461c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fd42 	bl	80050a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004624:	bf00      	nop
 8004626:	3708      	adds	r7, #8
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004638:	2300      	movs	r3, #0
 800463a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004642:	2b01      	cmp	r3, #1
 8004644:	d101      	bne.n	800464a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004646:	2302      	movs	r3, #2
 8004648:	e0ae      	b.n	80047a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b0c      	cmp	r3, #12
 8004656:	f200 809f 	bhi.w	8004798 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800465a:	a201      	add	r2, pc, #4	; (adr r2, 8004660 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800465c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004660:	08004695 	.word	0x08004695
 8004664:	08004799 	.word	0x08004799
 8004668:	08004799 	.word	0x08004799
 800466c:	08004799 	.word	0x08004799
 8004670:	080046d5 	.word	0x080046d5
 8004674:	08004799 	.word	0x08004799
 8004678:	08004799 	.word	0x08004799
 800467c:	08004799 	.word	0x08004799
 8004680:	08004717 	.word	0x08004717
 8004684:	08004799 	.word	0x08004799
 8004688:	08004799 	.word	0x08004799
 800468c:	08004799 	.word	0x08004799
 8004690:	08004757 	.word	0x08004757
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68b9      	ldr	r1, [r7, #8]
 800469a:	4618      	mov	r0, r3
 800469c:	f000 f9f8 	bl	8004a90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699a      	ldr	r2, [r3, #24]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0208 	orr.w	r2, r2, #8
 80046ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699a      	ldr	r2, [r3, #24]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0204 	bic.w	r2, r2, #4
 80046be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6999      	ldr	r1, [r3, #24]
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	691a      	ldr	r2, [r3, #16]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	619a      	str	r2, [r3, #24]
      break;
 80046d2:	e064      	b.n	800479e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68b9      	ldr	r1, [r7, #8]
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 fa3e 	bl	8004b5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699a      	ldr	r2, [r3, #24]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	699a      	ldr	r2, [r3, #24]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6999      	ldr	r1, [r3, #24]
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	021a      	lsls	r2, r3, #8
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	619a      	str	r2, [r3, #24]
      break;
 8004714:	e043      	b.n	800479e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68b9      	ldr	r1, [r7, #8]
 800471c:	4618      	mov	r0, r3
 800471e:	f000 fa89 	bl	8004c34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	69da      	ldr	r2, [r3, #28]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f042 0208 	orr.w	r2, r2, #8
 8004730:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	69da      	ldr	r2, [r3, #28]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 0204 	bic.w	r2, r2, #4
 8004740:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	69d9      	ldr	r1, [r3, #28]
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	691a      	ldr	r2, [r3, #16]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	61da      	str	r2, [r3, #28]
      break;
 8004754:	e023      	b.n	800479e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68b9      	ldr	r1, [r7, #8]
 800475c:	4618      	mov	r0, r3
 800475e:	f000 fad3 	bl	8004d08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	69da      	ldr	r2, [r3, #28]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004770:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	69da      	ldr	r2, [r3, #28]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004780:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	69d9      	ldr	r1, [r3, #28]
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	021a      	lsls	r2, r3, #8
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	61da      	str	r2, [r3, #28]
      break;
 8004796:	e002      	b.n	800479e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	75fb      	strb	r3, [r7, #23]
      break;
 800479c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3718      	adds	r7, #24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ba:	2300      	movs	r3, #0
 80047bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d101      	bne.n	80047cc <HAL_TIM_ConfigClockSource+0x1c>
 80047c8:	2302      	movs	r3, #2
 80047ca:	e0b4      	b.n	8004936 <HAL_TIM_ConfigClockSource+0x186>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004804:	d03e      	beq.n	8004884 <HAL_TIM_ConfigClockSource+0xd4>
 8004806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800480a:	f200 8087 	bhi.w	800491c <HAL_TIM_ConfigClockSource+0x16c>
 800480e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004812:	f000 8086 	beq.w	8004922 <HAL_TIM_ConfigClockSource+0x172>
 8004816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800481a:	d87f      	bhi.n	800491c <HAL_TIM_ConfigClockSource+0x16c>
 800481c:	2b70      	cmp	r3, #112	; 0x70
 800481e:	d01a      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0xa6>
 8004820:	2b70      	cmp	r3, #112	; 0x70
 8004822:	d87b      	bhi.n	800491c <HAL_TIM_ConfigClockSource+0x16c>
 8004824:	2b60      	cmp	r3, #96	; 0x60
 8004826:	d050      	beq.n	80048ca <HAL_TIM_ConfigClockSource+0x11a>
 8004828:	2b60      	cmp	r3, #96	; 0x60
 800482a:	d877      	bhi.n	800491c <HAL_TIM_ConfigClockSource+0x16c>
 800482c:	2b50      	cmp	r3, #80	; 0x50
 800482e:	d03c      	beq.n	80048aa <HAL_TIM_ConfigClockSource+0xfa>
 8004830:	2b50      	cmp	r3, #80	; 0x50
 8004832:	d873      	bhi.n	800491c <HAL_TIM_ConfigClockSource+0x16c>
 8004834:	2b40      	cmp	r3, #64	; 0x40
 8004836:	d058      	beq.n	80048ea <HAL_TIM_ConfigClockSource+0x13a>
 8004838:	2b40      	cmp	r3, #64	; 0x40
 800483a:	d86f      	bhi.n	800491c <HAL_TIM_ConfigClockSource+0x16c>
 800483c:	2b30      	cmp	r3, #48	; 0x30
 800483e:	d064      	beq.n	800490a <HAL_TIM_ConfigClockSource+0x15a>
 8004840:	2b30      	cmp	r3, #48	; 0x30
 8004842:	d86b      	bhi.n	800491c <HAL_TIM_ConfigClockSource+0x16c>
 8004844:	2b20      	cmp	r3, #32
 8004846:	d060      	beq.n	800490a <HAL_TIM_ConfigClockSource+0x15a>
 8004848:	2b20      	cmp	r3, #32
 800484a:	d867      	bhi.n	800491c <HAL_TIM_ConfigClockSource+0x16c>
 800484c:	2b00      	cmp	r3, #0
 800484e:	d05c      	beq.n	800490a <HAL_TIM_ConfigClockSource+0x15a>
 8004850:	2b10      	cmp	r3, #16
 8004852:	d05a      	beq.n	800490a <HAL_TIM_ConfigClockSource+0x15a>
 8004854:	e062      	b.n	800491c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6818      	ldr	r0, [r3, #0]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	6899      	ldr	r1, [r3, #8]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f000 fb19 	bl	8004e9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004878:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	609a      	str	r2, [r3, #8]
      break;
 8004882:	e04f      	b.n	8004924 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6818      	ldr	r0, [r3, #0]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	6899      	ldr	r1, [r3, #8]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f000 fb02 	bl	8004e9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048a6:	609a      	str	r2, [r3, #8]
      break;
 80048a8:	e03c      	b.n	8004924 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6818      	ldr	r0, [r3, #0]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	6859      	ldr	r1, [r3, #4]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	461a      	mov	r2, r3
 80048b8:	f000 fa76 	bl	8004da8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2150      	movs	r1, #80	; 0x50
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 facf 	bl	8004e66 <TIM_ITRx_SetConfig>
      break;
 80048c8:	e02c      	b.n	8004924 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6818      	ldr	r0, [r3, #0]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	6859      	ldr	r1, [r3, #4]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	461a      	mov	r2, r3
 80048d8:	f000 fa95 	bl	8004e06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2160      	movs	r1, #96	; 0x60
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fabf 	bl	8004e66 <TIM_ITRx_SetConfig>
      break;
 80048e8:	e01c      	b.n	8004924 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6818      	ldr	r0, [r3, #0]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	6859      	ldr	r1, [r3, #4]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	461a      	mov	r2, r3
 80048f8:	f000 fa56 	bl	8004da8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2140      	movs	r1, #64	; 0x40
 8004902:	4618      	mov	r0, r3
 8004904:	f000 faaf 	bl	8004e66 <TIM_ITRx_SetConfig>
      break;
 8004908:	e00c      	b.n	8004924 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4619      	mov	r1, r3
 8004914:	4610      	mov	r0, r2
 8004916:	f000 faa6 	bl	8004e66 <TIM_ITRx_SetConfig>
      break;
 800491a:	e003      	b.n	8004924 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	73fb      	strb	r3, [r7, #15]
      break;
 8004920:	e000      	b.n	8004924 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004922:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004934:	7bfb      	ldrb	r3, [r7, #15]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004952:	b480      	push	{r7}
 8004954:	b083      	sub	sp, #12
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
	...

08004990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a34      	ldr	r2, [pc, #208]	; (8004a74 <TIM_Base_SetConfig+0xe4>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d00f      	beq.n	80049c8 <TIM_Base_SetConfig+0x38>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ae:	d00b      	beq.n	80049c8 <TIM_Base_SetConfig+0x38>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a31      	ldr	r2, [pc, #196]	; (8004a78 <TIM_Base_SetConfig+0xe8>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d007      	beq.n	80049c8 <TIM_Base_SetConfig+0x38>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a30      	ldr	r2, [pc, #192]	; (8004a7c <TIM_Base_SetConfig+0xec>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d003      	beq.n	80049c8 <TIM_Base_SetConfig+0x38>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a2f      	ldr	r2, [pc, #188]	; (8004a80 <TIM_Base_SetConfig+0xf0>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d108      	bne.n	80049da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a25      	ldr	r2, [pc, #148]	; (8004a74 <TIM_Base_SetConfig+0xe4>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d01b      	beq.n	8004a1a <TIM_Base_SetConfig+0x8a>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e8:	d017      	beq.n	8004a1a <TIM_Base_SetConfig+0x8a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a22      	ldr	r2, [pc, #136]	; (8004a78 <TIM_Base_SetConfig+0xe8>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d013      	beq.n	8004a1a <TIM_Base_SetConfig+0x8a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a21      	ldr	r2, [pc, #132]	; (8004a7c <TIM_Base_SetConfig+0xec>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d00f      	beq.n	8004a1a <TIM_Base_SetConfig+0x8a>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a20      	ldr	r2, [pc, #128]	; (8004a80 <TIM_Base_SetConfig+0xf0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d00b      	beq.n	8004a1a <TIM_Base_SetConfig+0x8a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a1f      	ldr	r2, [pc, #124]	; (8004a84 <TIM_Base_SetConfig+0xf4>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d007      	beq.n	8004a1a <TIM_Base_SetConfig+0x8a>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a1e      	ldr	r2, [pc, #120]	; (8004a88 <TIM_Base_SetConfig+0xf8>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d003      	beq.n	8004a1a <TIM_Base_SetConfig+0x8a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a1d      	ldr	r2, [pc, #116]	; (8004a8c <TIM_Base_SetConfig+0xfc>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d108      	bne.n	8004a2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a08      	ldr	r2, [pc, #32]	; (8004a74 <TIM_Base_SetConfig+0xe4>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d103      	bne.n	8004a60 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	691a      	ldr	r2, [r3, #16]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	615a      	str	r2, [r3, #20]
}
 8004a66:	bf00      	nop
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	40010000 	.word	0x40010000
 8004a78:	40000400 	.word	0x40000400
 8004a7c:	40000800 	.word	0x40000800
 8004a80:	40000c00 	.word	0x40000c00
 8004a84:	40014000 	.word	0x40014000
 8004a88:	40014400 	.word	0x40014400
 8004a8c:	40014800 	.word	0x40014800

08004a90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	f023 0201 	bic.w	r2, r3, #1
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f023 0303 	bic.w	r3, r3, #3
 8004ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f023 0302 	bic.w	r3, r3, #2
 8004ad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a1c      	ldr	r2, [pc, #112]	; (8004b58 <TIM_OC1_SetConfig+0xc8>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d10c      	bne.n	8004b06 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f023 0308 	bic.w	r3, r3, #8
 8004af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f023 0304 	bic.w	r3, r3, #4
 8004b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a13      	ldr	r2, [pc, #76]	; (8004b58 <TIM_OC1_SetConfig+0xc8>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d111      	bne.n	8004b32 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	621a      	str	r2, [r3, #32]
}
 8004b4c:	bf00      	nop
 8004b4e:	371c      	adds	r7, #28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	40010000 	.word	0x40010000

08004b5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b087      	sub	sp, #28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	f023 0210 	bic.w	r2, r3, #16
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	021b      	lsls	r3, r3, #8
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f023 0320 	bic.w	r3, r3, #32
 8004ba6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	011b      	lsls	r3, r3, #4
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a1e      	ldr	r2, [pc, #120]	; (8004c30 <TIM_OC2_SetConfig+0xd4>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d10d      	bne.n	8004bd8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	011b      	lsls	r3, r3, #4
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a15      	ldr	r2, [pc, #84]	; (8004c30 <TIM_OC2_SetConfig+0xd4>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d113      	bne.n	8004c08 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004be6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	621a      	str	r2, [r3, #32]
}
 8004c22:	bf00      	nop
 8004c24:	371c      	adds	r7, #28
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	40010000 	.word	0x40010000

08004c34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f023 0303 	bic.w	r3, r3, #3
 8004c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	021b      	lsls	r3, r3, #8
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a1d      	ldr	r2, [pc, #116]	; (8004d04 <TIM_OC3_SetConfig+0xd0>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d10d      	bne.n	8004cae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	021b      	lsls	r3, r3, #8
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a14      	ldr	r2, [pc, #80]	; (8004d04 <TIM_OC3_SetConfig+0xd0>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d113      	bne.n	8004cde <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	011b      	lsls	r3, r3, #4
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	011b      	lsls	r3, r3, #4
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	621a      	str	r2, [r3, #32]
}
 8004cf8:	bf00      	nop
 8004cfa:	371c      	adds	r7, #28
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	40010000 	.word	0x40010000

08004d08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b087      	sub	sp, #28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	021b      	lsls	r3, r3, #8
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	031b      	lsls	r3, r3, #12
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a10      	ldr	r2, [pc, #64]	; (8004da4 <TIM_OC4_SetConfig+0x9c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d109      	bne.n	8004d7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	019b      	lsls	r3, r3, #6
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	621a      	str	r2, [r3, #32]
}
 8004d96:	bf00      	nop
 8004d98:	371c      	adds	r7, #28
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	40010000 	.word	0x40010000

08004da8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	f023 0201 	bic.w	r2, r3, #1
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	011b      	lsls	r3, r3, #4
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f023 030a 	bic.w	r3, r3, #10
 8004de4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	621a      	str	r2, [r3, #32]
}
 8004dfa:	bf00      	nop
 8004dfc:	371c      	adds	r7, #28
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b087      	sub	sp, #28
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	60f8      	str	r0, [r7, #12]
 8004e0e:	60b9      	str	r1, [r7, #8]
 8004e10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	f023 0210 	bic.w	r2, r3, #16
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	031b      	lsls	r3, r3, #12
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	011b      	lsls	r3, r3, #4
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	621a      	str	r2, [r3, #32]
}
 8004e5a:	bf00      	nop
 8004e5c:	371c      	adds	r7, #28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b085      	sub	sp, #20
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
 8004e6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f043 0307 	orr.w	r3, r3, #7
 8004e88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	609a      	str	r2, [r3, #8]
}
 8004e90:	bf00      	nop
 8004e92:	3714      	adds	r7, #20
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b087      	sub	sp, #28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
 8004ea8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	021a      	lsls	r2, r3, #8
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	609a      	str	r2, [r3, #8]
}
 8004ed0:	bf00      	nop
 8004ed2:	371c      	adds	r7, #28
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	f003 031f 	and.w	r3, r3, #31
 8004eee:	2201      	movs	r2, #1
 8004ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6a1a      	ldr	r2, [r3, #32]
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	43db      	mvns	r3, r3
 8004efe:	401a      	ands	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a1a      	ldr	r2, [r3, #32]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	f003 031f 	and.w	r3, r3, #31
 8004f0e:	6879      	ldr	r1, [r7, #4]
 8004f10:	fa01 f303 	lsl.w	r3, r1, r3
 8004f14:	431a      	orrs	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	621a      	str	r2, [r3, #32]
}
 8004f1a:	bf00      	nop
 8004f1c:	371c      	adds	r7, #28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
	...

08004f28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d101      	bne.n	8004f40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	e050      	b.n	8004fe2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a1c      	ldr	r2, [pc, #112]	; (8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d018      	beq.n	8004fb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f8c:	d013      	beq.n	8004fb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a18      	ldr	r2, [pc, #96]	; (8004ff4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d00e      	beq.n	8004fb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a16      	ldr	r2, [pc, #88]	; (8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d009      	beq.n	8004fb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a15      	ldr	r2, [pc, #84]	; (8004ffc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d004      	beq.n	8004fb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a13      	ldr	r2, [pc, #76]	; (8005000 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d10c      	bne.n	8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	40010000 	.word	0x40010000
 8004ff4:	40000400 	.word	0x40000400
 8004ff8:	40000800 	.word	0x40000800
 8004ffc:	40000c00 	.word	0x40000c00
 8005000:	40014000 	.word	0x40014000

08005004 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005018:	2b01      	cmp	r3, #1
 800501a:	d101      	bne.n	8005020 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800501c:	2302      	movs	r3, #2
 800501e:	e03d      	b.n	800509c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	4313      	orrs	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	4313      	orrs	r3, r2
 8005042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	4313      	orrs	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4313      	orrs	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	4313      	orrs	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	4313      	orrs	r3, r2
 800507a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e03f      	b.n	8005162 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d106      	bne.n	80050fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7fd f938 	bl	800236c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2224      	movs	r2, #36	; 0x24
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005112:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 f829 	bl	800516c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	691a      	ldr	r2, [r3, #16]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005128:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	695a      	ldr	r2, [r3, #20]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005138:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005148:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2220      	movs	r2, #32
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2220      	movs	r2, #32
 800515c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
	...

0800516c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800516c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005170:	b0c0      	sub	sp, #256	; 0x100
 8005172:	af00      	add	r7, sp, #0
 8005174:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005188:	68d9      	ldr	r1, [r3, #12]
 800518a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	ea40 0301 	orr.w	r3, r0, r1
 8005194:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	431a      	orrs	r2, r3
 80051a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	431a      	orrs	r2, r3
 80051ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80051b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80051c4:	f021 010c 	bic.w	r1, r1, #12
 80051c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051d2:	430b      	orrs	r3, r1
 80051d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80051e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e6:	6999      	ldr	r1, [r3, #24]
 80051e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	ea40 0301 	orr.w	r3, r0, r1
 80051f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	4b8f      	ldr	r3, [pc, #572]	; (8005438 <UART_SetConfig+0x2cc>)
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d005      	beq.n	800520c <UART_SetConfig+0xa0>
 8005200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	4b8d      	ldr	r3, [pc, #564]	; (800543c <UART_SetConfig+0x2d0>)
 8005208:	429a      	cmp	r2, r3
 800520a:	d104      	bne.n	8005216 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800520c:	f7fe fe0c 	bl	8003e28 <HAL_RCC_GetPCLK2Freq>
 8005210:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005214:	e003      	b.n	800521e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005216:	f7fe fdf3 	bl	8003e00 <HAL_RCC_GetPCLK1Freq>
 800521a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800521e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005222:	69db      	ldr	r3, [r3, #28]
 8005224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005228:	f040 810c 	bne.w	8005444 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800522c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005230:	2200      	movs	r2, #0
 8005232:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005236:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800523a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800523e:	4622      	mov	r2, r4
 8005240:	462b      	mov	r3, r5
 8005242:	1891      	adds	r1, r2, r2
 8005244:	65b9      	str	r1, [r7, #88]	; 0x58
 8005246:	415b      	adcs	r3, r3
 8005248:	65fb      	str	r3, [r7, #92]	; 0x5c
 800524a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800524e:	4621      	mov	r1, r4
 8005250:	eb12 0801 	adds.w	r8, r2, r1
 8005254:	4629      	mov	r1, r5
 8005256:	eb43 0901 	adc.w	r9, r3, r1
 800525a:	f04f 0200 	mov.w	r2, #0
 800525e:	f04f 0300 	mov.w	r3, #0
 8005262:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005266:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800526a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800526e:	4690      	mov	r8, r2
 8005270:	4699      	mov	r9, r3
 8005272:	4623      	mov	r3, r4
 8005274:	eb18 0303 	adds.w	r3, r8, r3
 8005278:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800527c:	462b      	mov	r3, r5
 800527e:	eb49 0303 	adc.w	r3, r9, r3
 8005282:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005292:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005296:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800529a:	460b      	mov	r3, r1
 800529c:	18db      	adds	r3, r3, r3
 800529e:	653b      	str	r3, [r7, #80]	; 0x50
 80052a0:	4613      	mov	r3, r2
 80052a2:	eb42 0303 	adc.w	r3, r2, r3
 80052a6:	657b      	str	r3, [r7, #84]	; 0x54
 80052a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80052ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80052b0:	f7fb fcbe 	bl	8000c30 <__aeabi_uldivmod>
 80052b4:	4602      	mov	r2, r0
 80052b6:	460b      	mov	r3, r1
 80052b8:	4b61      	ldr	r3, [pc, #388]	; (8005440 <UART_SetConfig+0x2d4>)
 80052ba:	fba3 2302 	umull	r2, r3, r3, r2
 80052be:	095b      	lsrs	r3, r3, #5
 80052c0:	011c      	lsls	r4, r3, #4
 80052c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052c6:	2200      	movs	r2, #0
 80052c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80052d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80052d4:	4642      	mov	r2, r8
 80052d6:	464b      	mov	r3, r9
 80052d8:	1891      	adds	r1, r2, r2
 80052da:	64b9      	str	r1, [r7, #72]	; 0x48
 80052dc:	415b      	adcs	r3, r3
 80052de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80052e4:	4641      	mov	r1, r8
 80052e6:	eb12 0a01 	adds.w	sl, r2, r1
 80052ea:	4649      	mov	r1, r9
 80052ec:	eb43 0b01 	adc.w	fp, r3, r1
 80052f0:	f04f 0200 	mov.w	r2, #0
 80052f4:	f04f 0300 	mov.w	r3, #0
 80052f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005300:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005304:	4692      	mov	sl, r2
 8005306:	469b      	mov	fp, r3
 8005308:	4643      	mov	r3, r8
 800530a:	eb1a 0303 	adds.w	r3, sl, r3
 800530e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005312:	464b      	mov	r3, r9
 8005314:	eb4b 0303 	adc.w	r3, fp, r3
 8005318:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800531c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005328:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800532c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005330:	460b      	mov	r3, r1
 8005332:	18db      	adds	r3, r3, r3
 8005334:	643b      	str	r3, [r7, #64]	; 0x40
 8005336:	4613      	mov	r3, r2
 8005338:	eb42 0303 	adc.w	r3, r2, r3
 800533c:	647b      	str	r3, [r7, #68]	; 0x44
 800533e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005342:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005346:	f7fb fc73 	bl	8000c30 <__aeabi_uldivmod>
 800534a:	4602      	mov	r2, r0
 800534c:	460b      	mov	r3, r1
 800534e:	4611      	mov	r1, r2
 8005350:	4b3b      	ldr	r3, [pc, #236]	; (8005440 <UART_SetConfig+0x2d4>)
 8005352:	fba3 2301 	umull	r2, r3, r3, r1
 8005356:	095b      	lsrs	r3, r3, #5
 8005358:	2264      	movs	r2, #100	; 0x64
 800535a:	fb02 f303 	mul.w	r3, r2, r3
 800535e:	1acb      	subs	r3, r1, r3
 8005360:	00db      	lsls	r3, r3, #3
 8005362:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005366:	4b36      	ldr	r3, [pc, #216]	; (8005440 <UART_SetConfig+0x2d4>)
 8005368:	fba3 2302 	umull	r2, r3, r3, r2
 800536c:	095b      	lsrs	r3, r3, #5
 800536e:	005b      	lsls	r3, r3, #1
 8005370:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005374:	441c      	add	r4, r3
 8005376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800537a:	2200      	movs	r2, #0
 800537c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005380:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005384:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005388:	4642      	mov	r2, r8
 800538a:	464b      	mov	r3, r9
 800538c:	1891      	adds	r1, r2, r2
 800538e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005390:	415b      	adcs	r3, r3
 8005392:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005394:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005398:	4641      	mov	r1, r8
 800539a:	1851      	adds	r1, r2, r1
 800539c:	6339      	str	r1, [r7, #48]	; 0x30
 800539e:	4649      	mov	r1, r9
 80053a0:	414b      	adcs	r3, r1
 80053a2:	637b      	str	r3, [r7, #52]	; 0x34
 80053a4:	f04f 0200 	mov.w	r2, #0
 80053a8:	f04f 0300 	mov.w	r3, #0
 80053ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80053b0:	4659      	mov	r1, fp
 80053b2:	00cb      	lsls	r3, r1, #3
 80053b4:	4651      	mov	r1, sl
 80053b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053ba:	4651      	mov	r1, sl
 80053bc:	00ca      	lsls	r2, r1, #3
 80053be:	4610      	mov	r0, r2
 80053c0:	4619      	mov	r1, r3
 80053c2:	4603      	mov	r3, r0
 80053c4:	4642      	mov	r2, r8
 80053c6:	189b      	adds	r3, r3, r2
 80053c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053cc:	464b      	mov	r3, r9
 80053ce:	460a      	mov	r2, r1
 80053d0:	eb42 0303 	adc.w	r3, r2, r3
 80053d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80053e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80053e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80053ec:	460b      	mov	r3, r1
 80053ee:	18db      	adds	r3, r3, r3
 80053f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80053f2:	4613      	mov	r3, r2
 80053f4:	eb42 0303 	adc.w	r3, r2, r3
 80053f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005402:	f7fb fc15 	bl	8000c30 <__aeabi_uldivmod>
 8005406:	4602      	mov	r2, r0
 8005408:	460b      	mov	r3, r1
 800540a:	4b0d      	ldr	r3, [pc, #52]	; (8005440 <UART_SetConfig+0x2d4>)
 800540c:	fba3 1302 	umull	r1, r3, r3, r2
 8005410:	095b      	lsrs	r3, r3, #5
 8005412:	2164      	movs	r1, #100	; 0x64
 8005414:	fb01 f303 	mul.w	r3, r1, r3
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	3332      	adds	r3, #50	; 0x32
 800541e:	4a08      	ldr	r2, [pc, #32]	; (8005440 <UART_SetConfig+0x2d4>)
 8005420:	fba2 2303 	umull	r2, r3, r2, r3
 8005424:	095b      	lsrs	r3, r3, #5
 8005426:	f003 0207 	and.w	r2, r3, #7
 800542a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4422      	add	r2, r4
 8005432:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005434:	e105      	b.n	8005642 <UART_SetConfig+0x4d6>
 8005436:	bf00      	nop
 8005438:	40011000 	.word	0x40011000
 800543c:	40011400 	.word	0x40011400
 8005440:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005448:	2200      	movs	r2, #0
 800544a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800544e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005452:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005456:	4642      	mov	r2, r8
 8005458:	464b      	mov	r3, r9
 800545a:	1891      	adds	r1, r2, r2
 800545c:	6239      	str	r1, [r7, #32]
 800545e:	415b      	adcs	r3, r3
 8005460:	627b      	str	r3, [r7, #36]	; 0x24
 8005462:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005466:	4641      	mov	r1, r8
 8005468:	1854      	adds	r4, r2, r1
 800546a:	4649      	mov	r1, r9
 800546c:	eb43 0501 	adc.w	r5, r3, r1
 8005470:	f04f 0200 	mov.w	r2, #0
 8005474:	f04f 0300 	mov.w	r3, #0
 8005478:	00eb      	lsls	r3, r5, #3
 800547a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800547e:	00e2      	lsls	r2, r4, #3
 8005480:	4614      	mov	r4, r2
 8005482:	461d      	mov	r5, r3
 8005484:	4643      	mov	r3, r8
 8005486:	18e3      	adds	r3, r4, r3
 8005488:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800548c:	464b      	mov	r3, r9
 800548e:	eb45 0303 	adc.w	r3, r5, r3
 8005492:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80054a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054a6:	f04f 0200 	mov.w	r2, #0
 80054aa:	f04f 0300 	mov.w	r3, #0
 80054ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80054b2:	4629      	mov	r1, r5
 80054b4:	008b      	lsls	r3, r1, #2
 80054b6:	4621      	mov	r1, r4
 80054b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054bc:	4621      	mov	r1, r4
 80054be:	008a      	lsls	r2, r1, #2
 80054c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80054c4:	f7fb fbb4 	bl	8000c30 <__aeabi_uldivmod>
 80054c8:	4602      	mov	r2, r0
 80054ca:	460b      	mov	r3, r1
 80054cc:	4b60      	ldr	r3, [pc, #384]	; (8005650 <UART_SetConfig+0x4e4>)
 80054ce:	fba3 2302 	umull	r2, r3, r3, r2
 80054d2:	095b      	lsrs	r3, r3, #5
 80054d4:	011c      	lsls	r4, r3, #4
 80054d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054da:	2200      	movs	r2, #0
 80054dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80054e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80054e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80054e8:	4642      	mov	r2, r8
 80054ea:	464b      	mov	r3, r9
 80054ec:	1891      	adds	r1, r2, r2
 80054ee:	61b9      	str	r1, [r7, #24]
 80054f0:	415b      	adcs	r3, r3
 80054f2:	61fb      	str	r3, [r7, #28]
 80054f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054f8:	4641      	mov	r1, r8
 80054fa:	1851      	adds	r1, r2, r1
 80054fc:	6139      	str	r1, [r7, #16]
 80054fe:	4649      	mov	r1, r9
 8005500:	414b      	adcs	r3, r1
 8005502:	617b      	str	r3, [r7, #20]
 8005504:	f04f 0200 	mov.w	r2, #0
 8005508:	f04f 0300 	mov.w	r3, #0
 800550c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005510:	4659      	mov	r1, fp
 8005512:	00cb      	lsls	r3, r1, #3
 8005514:	4651      	mov	r1, sl
 8005516:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800551a:	4651      	mov	r1, sl
 800551c:	00ca      	lsls	r2, r1, #3
 800551e:	4610      	mov	r0, r2
 8005520:	4619      	mov	r1, r3
 8005522:	4603      	mov	r3, r0
 8005524:	4642      	mov	r2, r8
 8005526:	189b      	adds	r3, r3, r2
 8005528:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800552c:	464b      	mov	r3, r9
 800552e:	460a      	mov	r2, r1
 8005530:	eb42 0303 	adc.w	r3, r2, r3
 8005534:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	67bb      	str	r3, [r7, #120]	; 0x78
 8005542:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005544:	f04f 0200 	mov.w	r2, #0
 8005548:	f04f 0300 	mov.w	r3, #0
 800554c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005550:	4649      	mov	r1, r9
 8005552:	008b      	lsls	r3, r1, #2
 8005554:	4641      	mov	r1, r8
 8005556:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800555a:	4641      	mov	r1, r8
 800555c:	008a      	lsls	r2, r1, #2
 800555e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005562:	f7fb fb65 	bl	8000c30 <__aeabi_uldivmod>
 8005566:	4602      	mov	r2, r0
 8005568:	460b      	mov	r3, r1
 800556a:	4b39      	ldr	r3, [pc, #228]	; (8005650 <UART_SetConfig+0x4e4>)
 800556c:	fba3 1302 	umull	r1, r3, r3, r2
 8005570:	095b      	lsrs	r3, r3, #5
 8005572:	2164      	movs	r1, #100	; 0x64
 8005574:	fb01 f303 	mul.w	r3, r1, r3
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	011b      	lsls	r3, r3, #4
 800557c:	3332      	adds	r3, #50	; 0x32
 800557e:	4a34      	ldr	r2, [pc, #208]	; (8005650 <UART_SetConfig+0x4e4>)
 8005580:	fba2 2303 	umull	r2, r3, r2, r3
 8005584:	095b      	lsrs	r3, r3, #5
 8005586:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800558a:	441c      	add	r4, r3
 800558c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005590:	2200      	movs	r2, #0
 8005592:	673b      	str	r3, [r7, #112]	; 0x70
 8005594:	677a      	str	r2, [r7, #116]	; 0x74
 8005596:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800559a:	4642      	mov	r2, r8
 800559c:	464b      	mov	r3, r9
 800559e:	1891      	adds	r1, r2, r2
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	415b      	adcs	r3, r3
 80055a4:	60fb      	str	r3, [r7, #12]
 80055a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055aa:	4641      	mov	r1, r8
 80055ac:	1851      	adds	r1, r2, r1
 80055ae:	6039      	str	r1, [r7, #0]
 80055b0:	4649      	mov	r1, r9
 80055b2:	414b      	adcs	r3, r1
 80055b4:	607b      	str	r3, [r7, #4]
 80055b6:	f04f 0200 	mov.w	r2, #0
 80055ba:	f04f 0300 	mov.w	r3, #0
 80055be:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80055c2:	4659      	mov	r1, fp
 80055c4:	00cb      	lsls	r3, r1, #3
 80055c6:	4651      	mov	r1, sl
 80055c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055cc:	4651      	mov	r1, sl
 80055ce:	00ca      	lsls	r2, r1, #3
 80055d0:	4610      	mov	r0, r2
 80055d2:	4619      	mov	r1, r3
 80055d4:	4603      	mov	r3, r0
 80055d6:	4642      	mov	r2, r8
 80055d8:	189b      	adds	r3, r3, r2
 80055da:	66bb      	str	r3, [r7, #104]	; 0x68
 80055dc:	464b      	mov	r3, r9
 80055de:	460a      	mov	r2, r1
 80055e0:	eb42 0303 	adc.w	r3, r2, r3
 80055e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	663b      	str	r3, [r7, #96]	; 0x60
 80055f0:	667a      	str	r2, [r7, #100]	; 0x64
 80055f2:	f04f 0200 	mov.w	r2, #0
 80055f6:	f04f 0300 	mov.w	r3, #0
 80055fa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80055fe:	4649      	mov	r1, r9
 8005600:	008b      	lsls	r3, r1, #2
 8005602:	4641      	mov	r1, r8
 8005604:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005608:	4641      	mov	r1, r8
 800560a:	008a      	lsls	r2, r1, #2
 800560c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005610:	f7fb fb0e 	bl	8000c30 <__aeabi_uldivmod>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	4b0d      	ldr	r3, [pc, #52]	; (8005650 <UART_SetConfig+0x4e4>)
 800561a:	fba3 1302 	umull	r1, r3, r3, r2
 800561e:	095b      	lsrs	r3, r3, #5
 8005620:	2164      	movs	r1, #100	; 0x64
 8005622:	fb01 f303 	mul.w	r3, r1, r3
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	011b      	lsls	r3, r3, #4
 800562a:	3332      	adds	r3, #50	; 0x32
 800562c:	4a08      	ldr	r2, [pc, #32]	; (8005650 <UART_SetConfig+0x4e4>)
 800562e:	fba2 2303 	umull	r2, r3, r2, r3
 8005632:	095b      	lsrs	r3, r3, #5
 8005634:	f003 020f 	and.w	r2, r3, #15
 8005638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4422      	add	r2, r4
 8005640:	609a      	str	r2, [r3, #8]
}
 8005642:	bf00      	nop
 8005644:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005648:	46bd      	mov	sp, r7
 800564a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800564e:	bf00      	nop
 8005650:	51eb851f 	.word	0x51eb851f

08005654 <__errno>:
 8005654:	4b01      	ldr	r3, [pc, #4]	; (800565c <__errno+0x8>)
 8005656:	6818      	ldr	r0, [r3, #0]
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	2000001c 	.word	0x2000001c

08005660 <__libc_init_array>:
 8005660:	b570      	push	{r4, r5, r6, lr}
 8005662:	4d0d      	ldr	r5, [pc, #52]	; (8005698 <__libc_init_array+0x38>)
 8005664:	4c0d      	ldr	r4, [pc, #52]	; (800569c <__libc_init_array+0x3c>)
 8005666:	1b64      	subs	r4, r4, r5
 8005668:	10a4      	asrs	r4, r4, #2
 800566a:	2600      	movs	r6, #0
 800566c:	42a6      	cmp	r6, r4
 800566e:	d109      	bne.n	8005684 <__libc_init_array+0x24>
 8005670:	4d0b      	ldr	r5, [pc, #44]	; (80056a0 <__libc_init_array+0x40>)
 8005672:	4c0c      	ldr	r4, [pc, #48]	; (80056a4 <__libc_init_array+0x44>)
 8005674:	f000 fc10 	bl	8005e98 <_init>
 8005678:	1b64      	subs	r4, r4, r5
 800567a:	10a4      	asrs	r4, r4, #2
 800567c:	2600      	movs	r6, #0
 800567e:	42a6      	cmp	r6, r4
 8005680:	d105      	bne.n	800568e <__libc_init_array+0x2e>
 8005682:	bd70      	pop	{r4, r5, r6, pc}
 8005684:	f855 3b04 	ldr.w	r3, [r5], #4
 8005688:	4798      	blx	r3
 800568a:	3601      	adds	r6, #1
 800568c:	e7ee      	b.n	800566c <__libc_init_array+0xc>
 800568e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005692:	4798      	blx	r3
 8005694:	3601      	adds	r6, #1
 8005696:	e7f2      	b.n	800567e <__libc_init_array+0x1e>
 8005698:	08005f3c 	.word	0x08005f3c
 800569c:	08005f3c 	.word	0x08005f3c
 80056a0:	08005f3c 	.word	0x08005f3c
 80056a4:	08005f40 	.word	0x08005f40

080056a8 <memset>:
 80056a8:	4402      	add	r2, r0
 80056aa:	4603      	mov	r3, r0
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d100      	bne.n	80056b2 <memset+0xa>
 80056b0:	4770      	bx	lr
 80056b2:	f803 1b01 	strb.w	r1, [r3], #1
 80056b6:	e7f9      	b.n	80056ac <memset+0x4>

080056b8 <powf>:
 80056b8:	b508      	push	{r3, lr}
 80056ba:	ed2d 8b04 	vpush	{d8-d9}
 80056be:	eeb0 8a60 	vmov.f32	s16, s1
 80056c2:	eeb0 9a40 	vmov.f32	s18, s0
 80056c6:	f000 f86d 	bl	80057a4 <__ieee754_powf>
 80056ca:	eeb4 8a48 	vcmp.f32	s16, s16
 80056ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056d2:	eef0 8a40 	vmov.f32	s17, s0
 80056d6:	d63e      	bvs.n	8005756 <powf+0x9e>
 80056d8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80056dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056e0:	d112      	bne.n	8005708 <powf+0x50>
 80056e2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80056e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ea:	d039      	beq.n	8005760 <powf+0xa8>
 80056ec:	eeb0 0a48 	vmov.f32	s0, s16
 80056f0:	f000 fb53 	bl	8005d9a <finitef>
 80056f4:	b378      	cbz	r0, 8005756 <powf+0x9e>
 80056f6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80056fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056fe:	d52a      	bpl.n	8005756 <powf+0x9e>
 8005700:	f7ff ffa8 	bl	8005654 <__errno>
 8005704:	2322      	movs	r3, #34	; 0x22
 8005706:	e014      	b.n	8005732 <powf+0x7a>
 8005708:	f000 fb47 	bl	8005d9a <finitef>
 800570c:	b998      	cbnz	r0, 8005736 <powf+0x7e>
 800570e:	eeb0 0a49 	vmov.f32	s0, s18
 8005712:	f000 fb42 	bl	8005d9a <finitef>
 8005716:	b170      	cbz	r0, 8005736 <powf+0x7e>
 8005718:	eeb0 0a48 	vmov.f32	s0, s16
 800571c:	f000 fb3d 	bl	8005d9a <finitef>
 8005720:	b148      	cbz	r0, 8005736 <powf+0x7e>
 8005722:	eef4 8a68 	vcmp.f32	s17, s17
 8005726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800572a:	d7e9      	bvc.n	8005700 <powf+0x48>
 800572c:	f7ff ff92 	bl	8005654 <__errno>
 8005730:	2321      	movs	r3, #33	; 0x21
 8005732:	6003      	str	r3, [r0, #0]
 8005734:	e00f      	b.n	8005756 <powf+0x9e>
 8005736:	eef5 8a40 	vcmp.f32	s17, #0.0
 800573a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800573e:	d10a      	bne.n	8005756 <powf+0x9e>
 8005740:	eeb0 0a49 	vmov.f32	s0, s18
 8005744:	f000 fb29 	bl	8005d9a <finitef>
 8005748:	b128      	cbz	r0, 8005756 <powf+0x9e>
 800574a:	eeb0 0a48 	vmov.f32	s0, s16
 800574e:	f000 fb24 	bl	8005d9a <finitef>
 8005752:	2800      	cmp	r0, #0
 8005754:	d1d4      	bne.n	8005700 <powf+0x48>
 8005756:	eeb0 0a68 	vmov.f32	s0, s17
 800575a:	ecbd 8b04 	vpop	{d8-d9}
 800575e:	bd08      	pop	{r3, pc}
 8005760:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8005764:	e7f7      	b.n	8005756 <powf+0x9e>
	...

08005768 <sqrtf>:
 8005768:	b508      	push	{r3, lr}
 800576a:	ed2d 8b02 	vpush	{d8}
 800576e:	eeb0 8a40 	vmov.f32	s16, s0
 8005772:	f000 fae5 	bl	8005d40 <__ieee754_sqrtf>
 8005776:	eeb4 8a48 	vcmp.f32	s16, s16
 800577a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800577e:	d60c      	bvs.n	800579a <sqrtf+0x32>
 8005780:	eddf 8a07 	vldr	s17, [pc, #28]	; 80057a0 <sqrtf+0x38>
 8005784:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800578c:	d505      	bpl.n	800579a <sqrtf+0x32>
 800578e:	f7ff ff61 	bl	8005654 <__errno>
 8005792:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8005796:	2321      	movs	r3, #33	; 0x21
 8005798:	6003      	str	r3, [r0, #0]
 800579a:	ecbd 8b02 	vpop	{d8}
 800579e:	bd08      	pop	{r3, pc}
 80057a0:	00000000 	.word	0x00000000

080057a4 <__ieee754_powf>:
 80057a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057a8:	ee10 4a90 	vmov	r4, s1
 80057ac:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 80057b0:	ed2d 8b02 	vpush	{d8}
 80057b4:	ee10 6a10 	vmov	r6, s0
 80057b8:	eeb0 8a40 	vmov.f32	s16, s0
 80057bc:	eef0 8a60 	vmov.f32	s17, s1
 80057c0:	d10c      	bne.n	80057dc <__ieee754_powf+0x38>
 80057c2:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 80057c6:	0076      	lsls	r6, r6, #1
 80057c8:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 80057cc:	f240 8296 	bls.w	8005cfc <__ieee754_powf+0x558>
 80057d0:	ee38 0a28 	vadd.f32	s0, s16, s17
 80057d4:	ecbd 8b02 	vpop	{d8}
 80057d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057dc:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80057e0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80057e4:	dcf4      	bgt.n	80057d0 <__ieee754_powf+0x2c>
 80057e6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80057ea:	dd08      	ble.n	80057fe <__ieee754_powf+0x5a>
 80057ec:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 80057f0:	d1ee      	bne.n	80057d0 <__ieee754_powf+0x2c>
 80057f2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 80057f6:	0064      	lsls	r4, r4, #1
 80057f8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80057fc:	e7e6      	b.n	80057cc <__ieee754_powf+0x28>
 80057fe:	2e00      	cmp	r6, #0
 8005800:	da20      	bge.n	8005844 <__ieee754_powf+0xa0>
 8005802:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8005806:	da2d      	bge.n	8005864 <__ieee754_powf+0xc0>
 8005808:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800580c:	f2c0 827f 	blt.w	8005d0e <__ieee754_powf+0x56a>
 8005810:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8005814:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8005818:	fa48 f703 	asr.w	r7, r8, r3
 800581c:	fa07 f303 	lsl.w	r3, r7, r3
 8005820:	4543      	cmp	r3, r8
 8005822:	f040 8274 	bne.w	8005d0e <__ieee754_powf+0x56a>
 8005826:	f007 0701 	and.w	r7, r7, #1
 800582a:	f1c7 0702 	rsb	r7, r7, #2
 800582e:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8005832:	d11f      	bne.n	8005874 <__ieee754_powf+0xd0>
 8005834:	2c00      	cmp	r4, #0
 8005836:	f280 8267 	bge.w	8005d08 <__ieee754_powf+0x564>
 800583a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800583e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8005842:	e7c7      	b.n	80057d4 <__ieee754_powf+0x30>
 8005844:	2700      	movs	r7, #0
 8005846:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800584a:	d1f0      	bne.n	800582e <__ieee754_powf+0x8a>
 800584c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8005850:	f000 8254 	beq.w	8005cfc <__ieee754_powf+0x558>
 8005854:	dd08      	ble.n	8005868 <__ieee754_powf+0xc4>
 8005856:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8005b60 <__ieee754_powf+0x3bc>
 800585a:	2c00      	cmp	r4, #0
 800585c:	bfa8      	it	ge
 800585e:	eeb0 0a68 	vmovge.f32	s0, s17
 8005862:	e7b7      	b.n	80057d4 <__ieee754_powf+0x30>
 8005864:	2702      	movs	r7, #2
 8005866:	e7ee      	b.n	8005846 <__ieee754_powf+0xa2>
 8005868:	2c00      	cmp	r4, #0
 800586a:	f280 824a 	bge.w	8005d02 <__ieee754_powf+0x55e>
 800586e:	eeb1 0a68 	vneg.f32	s0, s17
 8005872:	e7af      	b.n	80057d4 <__ieee754_powf+0x30>
 8005874:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8005878:	d102      	bne.n	8005880 <__ieee754_powf+0xdc>
 800587a:	ee28 0a08 	vmul.f32	s0, s16, s16
 800587e:	e7a9      	b.n	80057d4 <__ieee754_powf+0x30>
 8005880:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8005884:	eeb0 0a48 	vmov.f32	s0, s16
 8005888:	d107      	bne.n	800589a <__ieee754_powf+0xf6>
 800588a:	2e00      	cmp	r6, #0
 800588c:	db05      	blt.n	800589a <__ieee754_powf+0xf6>
 800588e:	ecbd 8b02 	vpop	{d8}
 8005892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005896:	f000 ba53 	b.w	8005d40 <__ieee754_sqrtf>
 800589a:	f000 fa77 	bl	8005d8c <fabsf>
 800589e:	b125      	cbz	r5, 80058aa <__ieee754_powf+0x106>
 80058a0:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 80058a4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80058a8:	d116      	bne.n	80058d8 <__ieee754_powf+0x134>
 80058aa:	2c00      	cmp	r4, #0
 80058ac:	bfbc      	itt	lt
 80058ae:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80058b2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80058b6:	2e00      	cmp	r6, #0
 80058b8:	da8c      	bge.n	80057d4 <__ieee754_powf+0x30>
 80058ba:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 80058be:	ea55 0307 	orrs.w	r3, r5, r7
 80058c2:	d104      	bne.n	80058ce <__ieee754_powf+0x12a>
 80058c4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80058c8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80058cc:	e782      	b.n	80057d4 <__ieee754_powf+0x30>
 80058ce:	2f01      	cmp	r7, #1
 80058d0:	d180      	bne.n	80057d4 <__ieee754_powf+0x30>
 80058d2:	eeb1 0a40 	vneg.f32	s0, s0
 80058d6:	e77d      	b.n	80057d4 <__ieee754_powf+0x30>
 80058d8:	0ff0      	lsrs	r0, r6, #31
 80058da:	3801      	subs	r0, #1
 80058dc:	ea57 0300 	orrs.w	r3, r7, r0
 80058e0:	d104      	bne.n	80058ec <__ieee754_powf+0x148>
 80058e2:	ee38 8a48 	vsub.f32	s16, s16, s16
 80058e6:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80058ea:	e773      	b.n	80057d4 <__ieee754_powf+0x30>
 80058ec:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 80058f0:	dd74      	ble.n	80059dc <__ieee754_powf+0x238>
 80058f2:	4b9c      	ldr	r3, [pc, #624]	; (8005b64 <__ieee754_powf+0x3c0>)
 80058f4:	429d      	cmp	r5, r3
 80058f6:	dc08      	bgt.n	800590a <__ieee754_powf+0x166>
 80058f8:	2c00      	cmp	r4, #0
 80058fa:	da0b      	bge.n	8005914 <__ieee754_powf+0x170>
 80058fc:	2000      	movs	r0, #0
 80058fe:	ecbd 8b02 	vpop	{d8}
 8005902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005906:	f000 ba3b 	b.w	8005d80 <__math_oflowf>
 800590a:	4b97      	ldr	r3, [pc, #604]	; (8005b68 <__ieee754_powf+0x3c4>)
 800590c:	429d      	cmp	r5, r3
 800590e:	dd08      	ble.n	8005922 <__ieee754_powf+0x17e>
 8005910:	2c00      	cmp	r4, #0
 8005912:	dcf3      	bgt.n	80058fc <__ieee754_powf+0x158>
 8005914:	2000      	movs	r0, #0
 8005916:	ecbd 8b02 	vpop	{d8}
 800591a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800591e:	f000 ba29 	b.w	8005d74 <__math_uflowf>
 8005922:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005926:	ee30 0a67 	vsub.f32	s0, s0, s15
 800592a:	eddf 6a90 	vldr	s13, [pc, #576]	; 8005b6c <__ieee754_powf+0x3c8>
 800592e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8005932:	eee0 6a67 	vfms.f32	s13, s0, s15
 8005936:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800593a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800593e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005946:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8005b70 <__ieee754_powf+0x3cc>
 800594a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800594e:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8005b74 <__ieee754_powf+0x3d0>
 8005952:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005956:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8005b78 <__ieee754_powf+0x3d4>
 800595a:	eef0 6a67 	vmov.f32	s13, s15
 800595e:	eee0 6a07 	vfma.f32	s13, s0, s14
 8005962:	ee16 3a90 	vmov	r3, s13
 8005966:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800596a:	f023 030f 	bic.w	r3, r3, #15
 800596e:	ee00 3a90 	vmov	s1, r3
 8005972:	eee0 0a47 	vfms.f32	s1, s0, s14
 8005976:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800597a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800597e:	f024 040f 	bic.w	r4, r4, #15
 8005982:	ee07 4a10 	vmov	s14, r4
 8005986:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800598a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800598e:	ee07 3a90 	vmov	s15, r3
 8005992:	eee7 0a27 	vfma.f32	s1, s14, s15
 8005996:	3f01      	subs	r7, #1
 8005998:	ea57 0200 	orrs.w	r2, r7, r0
 800599c:	ee07 4a10 	vmov	s14, r4
 80059a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059a4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80059a8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80059ac:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80059b0:	ee17 4a10 	vmov	r4, s14
 80059b4:	bf08      	it	eq
 80059b6:	eeb0 8a40 	vmoveq.f32	s16, s0
 80059ba:	2c00      	cmp	r4, #0
 80059bc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80059c0:	f340 817e 	ble.w	8005cc0 <__ieee754_powf+0x51c>
 80059c4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80059c8:	f340 80f8 	ble.w	8005bbc <__ieee754_powf+0x418>
 80059cc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80059d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059d4:	bf4c      	ite	mi
 80059d6:	2001      	movmi	r0, #1
 80059d8:	2000      	movpl	r0, #0
 80059da:	e790      	b.n	80058fe <__ieee754_powf+0x15a>
 80059dc:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 80059e0:	bf01      	itttt	eq
 80059e2:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8005b7c <__ieee754_powf+0x3d8>
 80059e6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80059ea:	f06f 0217 	mvneq.w	r2, #23
 80059ee:	ee17 5a90 	vmoveq	r5, s15
 80059f2:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80059f6:	bf18      	it	ne
 80059f8:	2200      	movne	r2, #0
 80059fa:	3b7f      	subs	r3, #127	; 0x7f
 80059fc:	4413      	add	r3, r2
 80059fe:	4a60      	ldr	r2, [pc, #384]	; (8005b80 <__ieee754_powf+0x3dc>)
 8005a00:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8005a04:	4295      	cmp	r5, r2
 8005a06:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8005a0a:	dd06      	ble.n	8005a1a <__ieee754_powf+0x276>
 8005a0c:	4a5d      	ldr	r2, [pc, #372]	; (8005b84 <__ieee754_powf+0x3e0>)
 8005a0e:	4295      	cmp	r5, r2
 8005a10:	f340 80a4 	ble.w	8005b5c <__ieee754_powf+0x3b8>
 8005a14:	3301      	adds	r3, #1
 8005a16:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8005a1a:	2500      	movs	r5, #0
 8005a1c:	4a5a      	ldr	r2, [pc, #360]	; (8005b88 <__ieee754_powf+0x3e4>)
 8005a1e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8005a22:	ee07 1a90 	vmov	s15, r1
 8005a26:	ed92 7a00 	vldr	s14, [r2]
 8005a2a:	4a58      	ldr	r2, [pc, #352]	; (8005b8c <__ieee754_powf+0x3e8>)
 8005a2c:	ee37 6a27 	vadd.f32	s12, s14, s15
 8005a30:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8005a34:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8005a38:	1049      	asrs	r1, r1, #1
 8005a3a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8005a3e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8005a42:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8005a46:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8005a4a:	ee06 1a10 	vmov	s12, r1
 8005a4e:	ee65 4a26 	vmul.f32	s9, s10, s13
 8005a52:	ee36 7a47 	vsub.f32	s14, s12, s14
 8005a56:	ee14 6a90 	vmov	r6, s9
 8005a5a:	4016      	ands	r6, r2
 8005a5c:	ee05 6a90 	vmov	s11, r6
 8005a60:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8005a64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a68:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8005b90 <__ieee754_powf+0x3ec>
 8005a6c:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8005a70:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8005a74:	ee25 6a26 	vmul.f32	s12, s10, s13
 8005a78:	eddf 6a46 	vldr	s13, [pc, #280]	; 8005b94 <__ieee754_powf+0x3f0>
 8005a7c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8005a80:	eddf 6a45 	vldr	s13, [pc, #276]	; 8005b98 <__ieee754_powf+0x3f4>
 8005a84:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005a88:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8005b6c <__ieee754_powf+0x3c8>
 8005a8c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005a90:	eddf 6a42 	vldr	s13, [pc, #264]	; 8005b9c <__ieee754_powf+0x3f8>
 8005a94:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005a98:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8005ba0 <__ieee754_powf+0x3fc>
 8005a9c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005aa0:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8005aa4:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8005aa8:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005aac:	eee5 6a07 	vfma.f32	s13, s10, s14
 8005ab0:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8005ab4:	eef0 7a45 	vmov.f32	s15, s10
 8005ab8:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8005abc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ac0:	ee17 1a90 	vmov	r1, s15
 8005ac4:	4011      	ands	r1, r2
 8005ac6:	ee07 1a90 	vmov	s15, r1
 8005aca:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8005ace:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8005ad2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005ad6:	ee27 7a24 	vmul.f32	s14, s14, s9
 8005ada:	eea6 7a27 	vfma.f32	s14, s12, s15
 8005ade:	eeb0 6a47 	vmov.f32	s12, s14
 8005ae2:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8005ae6:	ee16 1a10 	vmov	r1, s12
 8005aea:	4011      	ands	r1, r2
 8005aec:	ee06 1a90 	vmov	s13, r1
 8005af0:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8005af4:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8005ba4 <__ieee754_powf+0x400>
 8005af8:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8005ba8 <__ieee754_powf+0x404>
 8005afc:	ee37 7a66 	vsub.f32	s14, s14, s13
 8005b00:	ee06 1a10 	vmov	s12, r1
 8005b04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b08:	eddf 7a28 	vldr	s15, [pc, #160]	; 8005bac <__ieee754_powf+0x408>
 8005b0c:	4928      	ldr	r1, [pc, #160]	; (8005bb0 <__ieee754_powf+0x40c>)
 8005b0e:	eea6 7a27 	vfma.f32	s14, s12, s15
 8005b12:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8005b16:	edd1 7a00 	vldr	s15, [r1]
 8005b1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b1e:	ee07 3a90 	vmov	s15, r3
 8005b22:	4b24      	ldr	r3, [pc, #144]	; (8005bb4 <__ieee754_powf+0x410>)
 8005b24:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005b28:	eef0 7a47 	vmov.f32	s15, s14
 8005b2c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8005b30:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005b34:	edd5 0a00 	vldr	s1, [r5]
 8005b38:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8005b3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b40:	ee17 3a90 	vmov	r3, s15
 8005b44:	4013      	ands	r3, r2
 8005b46:	ee07 3a90 	vmov	s15, r3
 8005b4a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8005b4e:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8005b52:	eee6 6a65 	vfms.f32	s13, s12, s11
 8005b56:	ee77 7a66 	vsub.f32	s15, s14, s13
 8005b5a:	e70e      	b.n	800597a <__ieee754_powf+0x1d6>
 8005b5c:	2501      	movs	r5, #1
 8005b5e:	e75d      	b.n	8005a1c <__ieee754_powf+0x278>
 8005b60:	00000000 	.word	0x00000000
 8005b64:	3f7ffff3 	.word	0x3f7ffff3
 8005b68:	3f800007 	.word	0x3f800007
 8005b6c:	3eaaaaab 	.word	0x3eaaaaab
 8005b70:	3fb8aa3b 	.word	0x3fb8aa3b
 8005b74:	36eca570 	.word	0x36eca570
 8005b78:	3fb8aa00 	.word	0x3fb8aa00
 8005b7c:	4b800000 	.word	0x4b800000
 8005b80:	001cc471 	.word	0x001cc471
 8005b84:	005db3d6 	.word	0x005db3d6
 8005b88:	08005f1c 	.word	0x08005f1c
 8005b8c:	fffff000 	.word	0xfffff000
 8005b90:	3e6c3255 	.word	0x3e6c3255
 8005b94:	3e53f142 	.word	0x3e53f142
 8005b98:	3e8ba305 	.word	0x3e8ba305
 8005b9c:	3edb6db7 	.word	0x3edb6db7
 8005ba0:	3f19999a 	.word	0x3f19999a
 8005ba4:	3f76384f 	.word	0x3f76384f
 8005ba8:	3f763800 	.word	0x3f763800
 8005bac:	369dc3a0 	.word	0x369dc3a0
 8005bb0:	08005f2c 	.word	0x08005f2c
 8005bb4:	08005f24 	.word	0x08005f24
 8005bb8:	3338aa3c 	.word	0x3338aa3c
 8005bbc:	f040 8095 	bne.w	8005cea <__ieee754_powf+0x546>
 8005bc0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8005bb8 <__ieee754_powf+0x414>
 8005bc4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005bc8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8005bcc:	eef4 6ac7 	vcmpe.f32	s13, s14
 8005bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bd4:	f73f aefa 	bgt.w	80059cc <__ieee754_powf+0x228>
 8005bd8:	15db      	asrs	r3, r3, #23
 8005bda:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8005bde:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005be2:	4103      	asrs	r3, r0
 8005be4:	4423      	add	r3, r4
 8005be6:	494b      	ldr	r1, [pc, #300]	; (8005d14 <__ieee754_powf+0x570>)
 8005be8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005bec:	3a7f      	subs	r2, #127	; 0x7f
 8005bee:	4111      	asrs	r1, r2
 8005bf0:	ea23 0101 	bic.w	r1, r3, r1
 8005bf4:	ee07 1a10 	vmov	s14, r1
 8005bf8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8005bfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005c00:	f1c2 0217 	rsb	r2, r2, #23
 8005c04:	4110      	asrs	r0, r2
 8005c06:	2c00      	cmp	r4, #0
 8005c08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005c0c:	bfb8      	it	lt
 8005c0e:	4240      	neglt	r0, r0
 8005c10:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8005c14:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8005d18 <__ieee754_powf+0x574>
 8005c18:	eddf 6a40 	vldr	s13, [pc, #256]	; 8005d1c <__ieee754_powf+0x578>
 8005c1c:	ee17 3a10 	vmov	r3, s14
 8005c20:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005c24:	f023 030f 	bic.w	r3, r3, #15
 8005c28:	ee07 3a10 	vmov	s14, r3
 8005c2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c30:	ee27 0a00 	vmul.f32	s0, s14, s0
 8005c34:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8005c38:	eddf 7a39 	vldr	s15, [pc, #228]	; 8005d20 <__ieee754_powf+0x57c>
 8005c3c:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8005c40:	eef0 7a40 	vmov.f32	s15, s0
 8005c44:	eee7 7a26 	vfma.f32	s15, s14, s13
 8005c48:	eeb0 6a67 	vmov.f32	s12, s15
 8005c4c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8005c50:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005c54:	ee30 0a46 	vsub.f32	s0, s0, s12
 8005c58:	eddf 6a32 	vldr	s13, [pc, #200]	; 8005d24 <__ieee754_powf+0x580>
 8005c5c:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8005d28 <__ieee754_powf+0x584>
 8005c60:	eee7 6a06 	vfma.f32	s13, s14, s12
 8005c64:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8005d2c <__ieee754_powf+0x588>
 8005c68:	eea6 6a87 	vfma.f32	s12, s13, s14
 8005c6c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8005d30 <__ieee754_powf+0x58c>
 8005c70:	eee6 6a07 	vfma.f32	s13, s12, s14
 8005c74:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8005d34 <__ieee754_powf+0x590>
 8005c78:	eea6 6a87 	vfma.f32	s12, s13, s14
 8005c7c:	eef0 6a67 	vmov.f32	s13, s15
 8005c80:	eee6 6a47 	vfms.f32	s13, s12, s14
 8005c84:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005c88:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8005c8c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8005c90:	eea7 0a80 	vfma.f32	s0, s15, s0
 8005c94:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005c98:	ee37 0a40 	vsub.f32	s0, s14, s0
 8005c9c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8005ca0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005ca4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005ca8:	ee10 3a10 	vmov	r3, s0
 8005cac:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8005cb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cb4:	da1f      	bge.n	8005cf6 <__ieee754_powf+0x552>
 8005cb6:	f000 f87d 	bl	8005db4 <scalbnf>
 8005cba:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005cbe:	e589      	b.n	80057d4 <__ieee754_powf+0x30>
 8005cc0:	4a1d      	ldr	r2, [pc, #116]	; (8005d38 <__ieee754_powf+0x594>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	dd07      	ble.n	8005cd6 <__ieee754_powf+0x532>
 8005cc6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cce:	bf4c      	ite	mi
 8005cd0:	2001      	movmi	r0, #1
 8005cd2:	2000      	movpl	r0, #0
 8005cd4:	e61f      	b.n	8005916 <__ieee754_powf+0x172>
 8005cd6:	d108      	bne.n	8005cea <__ieee754_powf+0x546>
 8005cd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005cdc:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8005ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ce4:	f6ff af78 	blt.w	8005bd8 <__ieee754_powf+0x434>
 8005ce8:	e7ed      	b.n	8005cc6 <__ieee754_powf+0x522>
 8005cea:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8005cee:	f73f af73 	bgt.w	8005bd8 <__ieee754_powf+0x434>
 8005cf2:	2000      	movs	r0, #0
 8005cf4:	e78c      	b.n	8005c10 <__ieee754_powf+0x46c>
 8005cf6:	ee00 3a10 	vmov	s0, r3
 8005cfa:	e7de      	b.n	8005cba <__ieee754_powf+0x516>
 8005cfc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005d00:	e568      	b.n	80057d4 <__ieee754_powf+0x30>
 8005d02:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8005d3c <__ieee754_powf+0x598>
 8005d06:	e565      	b.n	80057d4 <__ieee754_powf+0x30>
 8005d08:	eeb0 0a48 	vmov.f32	s0, s16
 8005d0c:	e562      	b.n	80057d4 <__ieee754_powf+0x30>
 8005d0e:	2700      	movs	r7, #0
 8005d10:	e58d      	b.n	800582e <__ieee754_powf+0x8a>
 8005d12:	bf00      	nop
 8005d14:	007fffff 	.word	0x007fffff
 8005d18:	35bfbe8c 	.word	0x35bfbe8c
 8005d1c:	3f317200 	.word	0x3f317200
 8005d20:	3f317218 	.word	0x3f317218
 8005d24:	b5ddea0e 	.word	0xb5ddea0e
 8005d28:	3331bb4c 	.word	0x3331bb4c
 8005d2c:	388ab355 	.word	0x388ab355
 8005d30:	bb360b61 	.word	0xbb360b61
 8005d34:	3e2aaaab 	.word	0x3e2aaaab
 8005d38:	43160000 	.word	0x43160000
 8005d3c:	00000000 	.word	0x00000000

08005d40 <__ieee754_sqrtf>:
 8005d40:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8005d44:	4770      	bx	lr

08005d46 <with_errnof>:
 8005d46:	b513      	push	{r0, r1, r4, lr}
 8005d48:	4604      	mov	r4, r0
 8005d4a:	ed8d 0a01 	vstr	s0, [sp, #4]
 8005d4e:	f7ff fc81 	bl	8005654 <__errno>
 8005d52:	ed9d 0a01 	vldr	s0, [sp, #4]
 8005d56:	6004      	str	r4, [r0, #0]
 8005d58:	b002      	add	sp, #8
 8005d5a:	bd10      	pop	{r4, pc}

08005d5c <xflowf>:
 8005d5c:	b130      	cbz	r0, 8005d6c <xflowf+0x10>
 8005d5e:	eef1 7a40 	vneg.f32	s15, s0
 8005d62:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005d66:	2022      	movs	r0, #34	; 0x22
 8005d68:	f7ff bfed 	b.w	8005d46 <with_errnof>
 8005d6c:	eef0 7a40 	vmov.f32	s15, s0
 8005d70:	e7f7      	b.n	8005d62 <xflowf+0x6>
	...

08005d74 <__math_uflowf>:
 8005d74:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005d7c <__math_uflowf+0x8>
 8005d78:	f7ff bff0 	b.w	8005d5c <xflowf>
 8005d7c:	10000000 	.word	0x10000000

08005d80 <__math_oflowf>:
 8005d80:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005d88 <__math_oflowf+0x8>
 8005d84:	f7ff bfea 	b.w	8005d5c <xflowf>
 8005d88:	70000000 	.word	0x70000000

08005d8c <fabsf>:
 8005d8c:	ee10 3a10 	vmov	r3, s0
 8005d90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d94:	ee00 3a10 	vmov	s0, r3
 8005d98:	4770      	bx	lr

08005d9a <finitef>:
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8005da0:	9801      	ldr	r0, [sp, #4]
 8005da2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005da6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8005daa:	bfac      	ite	ge
 8005dac:	2000      	movge	r0, #0
 8005dae:	2001      	movlt	r0, #1
 8005db0:	b002      	add	sp, #8
 8005db2:	4770      	bx	lr

08005db4 <scalbnf>:
 8005db4:	ee10 3a10 	vmov	r3, s0
 8005db8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8005dbc:	d025      	beq.n	8005e0a <scalbnf+0x56>
 8005dbe:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005dc2:	d302      	bcc.n	8005dca <scalbnf+0x16>
 8005dc4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005dc8:	4770      	bx	lr
 8005dca:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8005dce:	d122      	bne.n	8005e16 <scalbnf+0x62>
 8005dd0:	4b2a      	ldr	r3, [pc, #168]	; (8005e7c <scalbnf+0xc8>)
 8005dd2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8005e80 <scalbnf+0xcc>
 8005dd6:	4298      	cmp	r0, r3
 8005dd8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005ddc:	db16      	blt.n	8005e0c <scalbnf+0x58>
 8005dde:	ee10 3a10 	vmov	r3, s0
 8005de2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005de6:	3a19      	subs	r2, #25
 8005de8:	4402      	add	r2, r0
 8005dea:	2afe      	cmp	r2, #254	; 0xfe
 8005dec:	dd15      	ble.n	8005e1a <scalbnf+0x66>
 8005dee:	ee10 3a10 	vmov	r3, s0
 8005df2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8005e84 <scalbnf+0xd0>
 8005df6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8005e88 <scalbnf+0xd4>
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	eeb0 7a67 	vmov.f32	s14, s15
 8005e00:	bfb8      	it	lt
 8005e02:	eef0 7a66 	vmovlt.f32	s15, s13
 8005e06:	ee27 0a27 	vmul.f32	s0, s14, s15
 8005e0a:	4770      	bx	lr
 8005e0c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005e8c <scalbnf+0xd8>
 8005e10:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005e14:	4770      	bx	lr
 8005e16:	0dd2      	lsrs	r2, r2, #23
 8005e18:	e7e6      	b.n	8005de8 <scalbnf+0x34>
 8005e1a:	2a00      	cmp	r2, #0
 8005e1c:	dd06      	ble.n	8005e2c <scalbnf+0x78>
 8005e1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005e22:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005e26:	ee00 3a10 	vmov	s0, r3
 8005e2a:	4770      	bx	lr
 8005e2c:	f112 0f16 	cmn.w	r2, #22
 8005e30:	da1a      	bge.n	8005e68 <scalbnf+0xb4>
 8005e32:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005e36:	4298      	cmp	r0, r3
 8005e38:	ee10 3a10 	vmov	r3, s0
 8005e3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e40:	dd0a      	ble.n	8005e58 <scalbnf+0xa4>
 8005e42:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005e84 <scalbnf+0xd0>
 8005e46:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005e88 <scalbnf+0xd4>
 8005e4a:	eef0 7a40 	vmov.f32	s15, s0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	bf18      	it	ne
 8005e52:	eeb0 0a47 	vmovne.f32	s0, s14
 8005e56:	e7db      	b.n	8005e10 <scalbnf+0x5c>
 8005e58:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8005e8c <scalbnf+0xd8>
 8005e5c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005e90 <scalbnf+0xdc>
 8005e60:	eef0 7a40 	vmov.f32	s15, s0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	e7f3      	b.n	8005e50 <scalbnf+0x9c>
 8005e68:	3219      	adds	r2, #25
 8005e6a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005e6e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005e72:	eddf 7a08 	vldr	s15, [pc, #32]	; 8005e94 <scalbnf+0xe0>
 8005e76:	ee07 3a10 	vmov	s14, r3
 8005e7a:	e7c4      	b.n	8005e06 <scalbnf+0x52>
 8005e7c:	ffff3cb0 	.word	0xffff3cb0
 8005e80:	4c000000 	.word	0x4c000000
 8005e84:	7149f2ca 	.word	0x7149f2ca
 8005e88:	f149f2ca 	.word	0xf149f2ca
 8005e8c:	0da24260 	.word	0x0da24260
 8005e90:	8da24260 	.word	0x8da24260
 8005e94:	33000000 	.word	0x33000000

08005e98 <_init>:
 8005e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9a:	bf00      	nop
 8005e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9e:	bc08      	pop	{r3}
 8005ea0:	469e      	mov	lr, r3
 8005ea2:	4770      	bx	lr

08005ea4 <_fini>:
 8005ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea6:	bf00      	nop
 8005ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eaa:	bc08      	pop	{r3}
 8005eac:	469e      	mov	lr, r3
 8005eae:	4770      	bx	lr
