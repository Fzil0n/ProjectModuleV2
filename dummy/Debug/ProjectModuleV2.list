
ProjectModuleV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004eb8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005050  08005050  00015050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050bc  080050bc  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080050bc  080050bc  000150bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050c4  080050c4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050c4  080050c4  000150c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050c8  080050c8  000150c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080050cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000045c  20000020  080050e8  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  080050e8  0002047c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f84a  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025f7  00000000  00000000  0002f896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00031e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  00032be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003398  00000000  00000000  000337f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001344a  00000000  00000000  00036b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ff1c  00000000  00000000  00049fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9ef6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036c0  00000000  00000000  000d9f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000020 	.word	0x20000020
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005038 	.word	0x08005038

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000024 	.word	0x20000024
 80001d4:	08005038 	.word	0x08005038

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_frsub>:
 8000a14:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a18:	e002      	b.n	8000a20 <__addsf3>
 8000a1a:	bf00      	nop

08000a1c <__aeabi_fsub>:
 8000a1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a20 <__addsf3>:
 8000a20:	0042      	lsls	r2, r0, #1
 8000a22:	bf1f      	itttt	ne
 8000a24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a28:	ea92 0f03 	teqne	r2, r3
 8000a2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a34:	d06a      	beq.n	8000b0c <__addsf3+0xec>
 8000a36:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a3e:	bfc1      	itttt	gt
 8000a40:	18d2      	addgt	r2, r2, r3
 8000a42:	4041      	eorgt	r1, r0
 8000a44:	4048      	eorgt	r0, r1
 8000a46:	4041      	eorgt	r1, r0
 8000a48:	bfb8      	it	lt
 8000a4a:	425b      	neglt	r3, r3
 8000a4c:	2b19      	cmp	r3, #25
 8000a4e:	bf88      	it	hi
 8000a50:	4770      	bxhi	lr
 8000a52:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a66:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a6a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a6e:	bf18      	it	ne
 8000a70:	4249      	negne	r1, r1
 8000a72:	ea92 0f03 	teq	r2, r3
 8000a76:	d03f      	beq.n	8000af8 <__addsf3+0xd8>
 8000a78:	f1a2 0201 	sub.w	r2, r2, #1
 8000a7c:	fa41 fc03 	asr.w	ip, r1, r3
 8000a80:	eb10 000c 	adds.w	r0, r0, ip
 8000a84:	f1c3 0320 	rsb	r3, r3, #32
 8000a88:	fa01 f103 	lsl.w	r1, r1, r3
 8000a8c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a90:	d502      	bpl.n	8000a98 <__addsf3+0x78>
 8000a92:	4249      	negs	r1, r1
 8000a94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a98:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a9c:	d313      	bcc.n	8000ac6 <__addsf3+0xa6>
 8000a9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aa2:	d306      	bcc.n	8000ab2 <__addsf3+0x92>
 8000aa4:	0840      	lsrs	r0, r0, #1
 8000aa6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aaa:	f102 0201 	add.w	r2, r2, #1
 8000aae:	2afe      	cmp	r2, #254	; 0xfe
 8000ab0:	d251      	bcs.n	8000b56 <__addsf3+0x136>
 8000ab2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ab6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aba:	bf08      	it	eq
 8000abc:	f020 0001 	biceq.w	r0, r0, #1
 8000ac0:	ea40 0003 	orr.w	r0, r0, r3
 8000ac4:	4770      	bx	lr
 8000ac6:	0049      	lsls	r1, r1, #1
 8000ac8:	eb40 0000 	adc.w	r0, r0, r0
 8000acc:	3a01      	subs	r2, #1
 8000ace:	bf28      	it	cs
 8000ad0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ad4:	d2ed      	bcs.n	8000ab2 <__addsf3+0x92>
 8000ad6:	fab0 fc80 	clz	ip, r0
 8000ada:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ade:	ebb2 020c 	subs.w	r2, r2, ip
 8000ae2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ae6:	bfaa      	itet	ge
 8000ae8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aec:	4252      	neglt	r2, r2
 8000aee:	4318      	orrge	r0, r3
 8000af0:	bfbc      	itt	lt
 8000af2:	40d0      	lsrlt	r0, r2
 8000af4:	4318      	orrlt	r0, r3
 8000af6:	4770      	bx	lr
 8000af8:	f092 0f00 	teq	r2, #0
 8000afc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b00:	bf06      	itte	eq
 8000b02:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b06:	3201      	addeq	r2, #1
 8000b08:	3b01      	subne	r3, #1
 8000b0a:	e7b5      	b.n	8000a78 <__addsf3+0x58>
 8000b0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b14:	bf18      	it	ne
 8000b16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b1a:	d021      	beq.n	8000b60 <__addsf3+0x140>
 8000b1c:	ea92 0f03 	teq	r2, r3
 8000b20:	d004      	beq.n	8000b2c <__addsf3+0x10c>
 8000b22:	f092 0f00 	teq	r2, #0
 8000b26:	bf08      	it	eq
 8000b28:	4608      	moveq	r0, r1
 8000b2a:	4770      	bx	lr
 8000b2c:	ea90 0f01 	teq	r0, r1
 8000b30:	bf1c      	itt	ne
 8000b32:	2000      	movne	r0, #0
 8000b34:	4770      	bxne	lr
 8000b36:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b3a:	d104      	bne.n	8000b46 <__addsf3+0x126>
 8000b3c:	0040      	lsls	r0, r0, #1
 8000b3e:	bf28      	it	cs
 8000b40:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b44:	4770      	bx	lr
 8000b46:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b4a:	bf3c      	itt	cc
 8000b4c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b50:	4770      	bxcc	lr
 8000b52:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b56:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	4770      	bx	lr
 8000b60:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b64:	bf16      	itet	ne
 8000b66:	4608      	movne	r0, r1
 8000b68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b6c:	4601      	movne	r1, r0
 8000b6e:	0242      	lsls	r2, r0, #9
 8000b70:	bf06      	itte	eq
 8000b72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b76:	ea90 0f01 	teqeq	r0, r1
 8000b7a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_ui2f>:
 8000b80:	f04f 0300 	mov.w	r3, #0
 8000b84:	e004      	b.n	8000b90 <__aeabi_i2f+0x8>
 8000b86:	bf00      	nop

08000b88 <__aeabi_i2f>:
 8000b88:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b8c:	bf48      	it	mi
 8000b8e:	4240      	negmi	r0, r0
 8000b90:	ea5f 0c00 	movs.w	ip, r0
 8000b94:	bf08      	it	eq
 8000b96:	4770      	bxeq	lr
 8000b98:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b9c:	4601      	mov	r1, r0
 8000b9e:	f04f 0000 	mov.w	r0, #0
 8000ba2:	e01c      	b.n	8000bde <__aeabi_l2f+0x2a>

08000ba4 <__aeabi_ul2f>:
 8000ba4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ba8:	bf08      	it	eq
 8000baa:	4770      	bxeq	lr
 8000bac:	f04f 0300 	mov.w	r3, #0
 8000bb0:	e00a      	b.n	8000bc8 <__aeabi_l2f+0x14>
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_l2f>:
 8000bb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bb8:	bf08      	it	eq
 8000bba:	4770      	bxeq	lr
 8000bbc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bc0:	d502      	bpl.n	8000bc8 <__aeabi_l2f+0x14>
 8000bc2:	4240      	negs	r0, r0
 8000bc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc8:	ea5f 0c01 	movs.w	ip, r1
 8000bcc:	bf02      	ittt	eq
 8000bce:	4684      	moveq	ip, r0
 8000bd0:	4601      	moveq	r1, r0
 8000bd2:	2000      	moveq	r0, #0
 8000bd4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bd8:	bf08      	it	eq
 8000bda:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bde:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000be2:	fabc f28c 	clz	r2, ip
 8000be6:	3a08      	subs	r2, #8
 8000be8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bec:	db10      	blt.n	8000c10 <__aeabi_l2f+0x5c>
 8000bee:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bf2:	4463      	add	r3, ip
 8000bf4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bf8:	f1c2 0220 	rsb	r2, r2, #32
 8000bfc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c00:	fa20 f202 	lsr.w	r2, r0, r2
 8000c04:	eb43 0002 	adc.w	r0, r3, r2
 8000c08:	bf08      	it	eq
 8000c0a:	f020 0001 	biceq.w	r0, r0, #1
 8000c0e:	4770      	bx	lr
 8000c10:	f102 0220 	add.w	r2, r2, #32
 8000c14:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c18:	f1c2 0220 	rsb	r2, r2, #32
 8000c1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c20:	fa21 f202 	lsr.w	r2, r1, r2
 8000c24:	eb43 0002 	adc.w	r0, r3, r2
 8000c28:	bf08      	it	eq
 8000c2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_uldivmod>:
 8000c30:	b953      	cbnz	r3, 8000c48 <__aeabi_uldivmod+0x18>
 8000c32:	b94a      	cbnz	r2, 8000c48 <__aeabi_uldivmod+0x18>
 8000c34:	2900      	cmp	r1, #0
 8000c36:	bf08      	it	eq
 8000c38:	2800      	cmpeq	r0, #0
 8000c3a:	bf1c      	itt	ne
 8000c3c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c40:	f04f 30ff 	movne.w	r0, #4294967295
 8000c44:	f000 b974 	b.w	8000f30 <__aeabi_idiv0>
 8000c48:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c50:	f000 f806 	bl	8000c60 <__udivmoddi4>
 8000c54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5c:	b004      	add	sp, #16
 8000c5e:	4770      	bx	lr

08000c60 <__udivmoddi4>:
 8000c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c64:	9d08      	ldr	r5, [sp, #32]
 8000c66:	4604      	mov	r4, r0
 8000c68:	468e      	mov	lr, r1
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d14d      	bne.n	8000d0a <__udivmoddi4+0xaa>
 8000c6e:	428a      	cmp	r2, r1
 8000c70:	4694      	mov	ip, r2
 8000c72:	d969      	bls.n	8000d48 <__udivmoddi4+0xe8>
 8000c74:	fab2 f282 	clz	r2, r2
 8000c78:	b152      	cbz	r2, 8000c90 <__udivmoddi4+0x30>
 8000c7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c7e:	f1c2 0120 	rsb	r1, r2, #32
 8000c82:	fa20 f101 	lsr.w	r1, r0, r1
 8000c86:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c8a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c8e:	4094      	lsls	r4, r2
 8000c90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c94:	0c21      	lsrs	r1, r4, #16
 8000c96:	fbbe f6f8 	udiv	r6, lr, r8
 8000c9a:	fa1f f78c 	uxth.w	r7, ip
 8000c9e:	fb08 e316 	mls	r3, r8, r6, lr
 8000ca2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ca6:	fb06 f107 	mul.w	r1, r6, r7
 8000caa:	4299      	cmp	r1, r3
 8000cac:	d90a      	bls.n	8000cc4 <__udivmoddi4+0x64>
 8000cae:	eb1c 0303 	adds.w	r3, ip, r3
 8000cb2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cb6:	f080 811f 	bcs.w	8000ef8 <__udivmoddi4+0x298>
 8000cba:	4299      	cmp	r1, r3
 8000cbc:	f240 811c 	bls.w	8000ef8 <__udivmoddi4+0x298>
 8000cc0:	3e02      	subs	r6, #2
 8000cc2:	4463      	add	r3, ip
 8000cc4:	1a5b      	subs	r3, r3, r1
 8000cc6:	b2a4      	uxth	r4, r4
 8000cc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ccc:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd4:	fb00 f707 	mul.w	r7, r0, r7
 8000cd8:	42a7      	cmp	r7, r4
 8000cda:	d90a      	bls.n	8000cf2 <__udivmoddi4+0x92>
 8000cdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce4:	f080 810a 	bcs.w	8000efc <__udivmoddi4+0x29c>
 8000ce8:	42a7      	cmp	r7, r4
 8000cea:	f240 8107 	bls.w	8000efc <__udivmoddi4+0x29c>
 8000cee:	4464      	add	r4, ip
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf6:	1be4      	subs	r4, r4, r7
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	b11d      	cbz	r5, 8000d04 <__udivmoddi4+0xa4>
 8000cfc:	40d4      	lsrs	r4, r2
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e9c5 4300 	strd	r4, r3, [r5]
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d909      	bls.n	8000d22 <__udivmoddi4+0xc2>
 8000d0e:	2d00      	cmp	r5, #0
 8000d10:	f000 80ef 	beq.w	8000ef2 <__udivmoddi4+0x292>
 8000d14:	2600      	movs	r6, #0
 8000d16:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1a:	4630      	mov	r0, r6
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	fab3 f683 	clz	r6, r3
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	d14a      	bne.n	8000dc0 <__udivmoddi4+0x160>
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d302      	bcc.n	8000d34 <__udivmoddi4+0xd4>
 8000d2e:	4282      	cmp	r2, r0
 8000d30:	f200 80f9 	bhi.w	8000f26 <__udivmoddi4+0x2c6>
 8000d34:	1a84      	subs	r4, r0, r2
 8000d36:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	469e      	mov	lr, r3
 8000d3e:	2d00      	cmp	r5, #0
 8000d40:	d0e0      	beq.n	8000d04 <__udivmoddi4+0xa4>
 8000d42:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d46:	e7dd      	b.n	8000d04 <__udivmoddi4+0xa4>
 8000d48:	b902      	cbnz	r2, 8000d4c <__udivmoddi4+0xec>
 8000d4a:	deff      	udf	#255	; 0xff
 8000d4c:	fab2 f282 	clz	r2, r2
 8000d50:	2a00      	cmp	r2, #0
 8000d52:	f040 8092 	bne.w	8000e7a <__udivmoddi4+0x21a>
 8000d56:	eba1 010c 	sub.w	r1, r1, ip
 8000d5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5e:	fa1f fe8c 	uxth.w	lr, ip
 8000d62:	2601      	movs	r6, #1
 8000d64:	0c20      	lsrs	r0, r4, #16
 8000d66:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d6a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d6e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d72:	fb0e f003 	mul.w	r0, lr, r3
 8000d76:	4288      	cmp	r0, r1
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x12c>
 8000d7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x12a>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f200 80cb 	bhi.w	8000f20 <__udivmoddi4+0x2c0>
 8000d8a:	4643      	mov	r3, r8
 8000d8c:	1a09      	subs	r1, r1, r0
 8000d8e:	b2a4      	uxth	r4, r4
 8000d90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d94:	fb07 1110 	mls	r1, r7, r0, r1
 8000d98:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d9c:	fb0e fe00 	mul.w	lr, lr, r0
 8000da0:	45a6      	cmp	lr, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x156>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dac:	d202      	bcs.n	8000db4 <__udivmoddi4+0x154>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f200 80bb 	bhi.w	8000f2a <__udivmoddi4+0x2ca>
 8000db4:	4608      	mov	r0, r1
 8000db6:	eba4 040e 	sub.w	r4, r4, lr
 8000dba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dbe:	e79c      	b.n	8000cfa <__udivmoddi4+0x9a>
 8000dc0:	f1c6 0720 	rsb	r7, r6, #32
 8000dc4:	40b3      	lsls	r3, r6
 8000dc6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dca:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dce:	fa20 f407 	lsr.w	r4, r0, r7
 8000dd2:	fa01 f306 	lsl.w	r3, r1, r6
 8000dd6:	431c      	orrs	r4, r3
 8000dd8:	40f9      	lsrs	r1, r7
 8000dda:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dde:	fa00 f306 	lsl.w	r3, r0, r6
 8000de2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000de6:	0c20      	lsrs	r0, r4, #16
 8000de8:	fa1f fe8c 	uxth.w	lr, ip
 8000dec:	fb09 1118 	mls	r1, r9, r8, r1
 8000df0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000df4:	fb08 f00e 	mul.w	r0, r8, lr
 8000df8:	4288      	cmp	r0, r1
 8000dfa:	fa02 f206 	lsl.w	r2, r2, r6
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b8>
 8000e00:	eb1c 0101 	adds.w	r1, ip, r1
 8000e04:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e08:	f080 8088 	bcs.w	8000f1c <__udivmoddi4+0x2bc>
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	f240 8085 	bls.w	8000f1c <__udivmoddi4+0x2bc>
 8000e12:	f1a8 0802 	sub.w	r8, r8, #2
 8000e16:	4461      	add	r1, ip
 8000e18:	1a09      	subs	r1, r1, r0
 8000e1a:	b2a4      	uxth	r4, r4
 8000e1c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e20:	fb09 1110 	mls	r1, r9, r0, r1
 8000e24:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e2c:	458e      	cmp	lr, r1
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1e2>
 8000e30:	eb1c 0101 	adds.w	r1, ip, r1
 8000e34:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e38:	d26c      	bcs.n	8000f14 <__udivmoddi4+0x2b4>
 8000e3a:	458e      	cmp	lr, r1
 8000e3c:	d96a      	bls.n	8000f14 <__udivmoddi4+0x2b4>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4461      	add	r1, ip
 8000e42:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e46:	fba0 9402 	umull	r9, r4, r0, r2
 8000e4a:	eba1 010e 	sub.w	r1, r1, lr
 8000e4e:	42a1      	cmp	r1, r4
 8000e50:	46c8      	mov	r8, r9
 8000e52:	46a6      	mov	lr, r4
 8000e54:	d356      	bcc.n	8000f04 <__udivmoddi4+0x2a4>
 8000e56:	d053      	beq.n	8000f00 <__udivmoddi4+0x2a0>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x212>
 8000e5a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e5e:	eb61 010e 	sbc.w	r1, r1, lr
 8000e62:	fa01 f707 	lsl.w	r7, r1, r7
 8000e66:	fa22 f306 	lsr.w	r3, r2, r6
 8000e6a:	40f1      	lsrs	r1, r6
 8000e6c:	431f      	orrs	r7, r3
 8000e6e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	f1c2 0320 	rsb	r3, r2, #32
 8000e7e:	40d8      	lsrs	r0, r3
 8000e80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e84:	fa21 f303 	lsr.w	r3, r1, r3
 8000e88:	4091      	lsls	r1, r2
 8000e8a:	4301      	orrs	r1, r0
 8000e8c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e90:	fa1f fe8c 	uxth.w	lr, ip
 8000e94:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e98:	fb07 3610 	mls	r6, r7, r0, r3
 8000e9c:	0c0b      	lsrs	r3, r1, #16
 8000e9e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ea2:	fb00 f60e 	mul.w	r6, r0, lr
 8000ea6:	429e      	cmp	r6, r3
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x260>
 8000eae:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eb6:	d22f      	bcs.n	8000f18 <__udivmoddi4+0x2b8>
 8000eb8:	429e      	cmp	r6, r3
 8000eba:	d92d      	bls.n	8000f18 <__udivmoddi4+0x2b8>
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	1b9b      	subs	r3, r3, r6
 8000ec2:	b289      	uxth	r1, r1
 8000ec4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ec8:	fb07 3316 	mls	r3, r7, r6, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb06 f30e 	mul.w	r3, r6, lr
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x28a>
 8000ed8:	eb1c 0101 	adds.w	r1, ip, r1
 8000edc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ee0:	d216      	bcs.n	8000f10 <__udivmoddi4+0x2b0>
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d914      	bls.n	8000f10 <__udivmoddi4+0x2b0>
 8000ee6:	3e02      	subs	r6, #2
 8000ee8:	4461      	add	r1, ip
 8000eea:	1ac9      	subs	r1, r1, r3
 8000eec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ef0:	e738      	b.n	8000d64 <__udivmoddi4+0x104>
 8000ef2:	462e      	mov	r6, r5
 8000ef4:	4628      	mov	r0, r5
 8000ef6:	e705      	b.n	8000d04 <__udivmoddi4+0xa4>
 8000ef8:	4606      	mov	r6, r0
 8000efa:	e6e3      	b.n	8000cc4 <__udivmoddi4+0x64>
 8000efc:	4618      	mov	r0, r3
 8000efe:	e6f8      	b.n	8000cf2 <__udivmoddi4+0x92>
 8000f00:	454b      	cmp	r3, r9
 8000f02:	d2a9      	bcs.n	8000e58 <__udivmoddi4+0x1f8>
 8000f04:	ebb9 0802 	subs.w	r8, r9, r2
 8000f08:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f0c:	3801      	subs	r0, #1
 8000f0e:	e7a3      	b.n	8000e58 <__udivmoddi4+0x1f8>
 8000f10:	4646      	mov	r6, r8
 8000f12:	e7ea      	b.n	8000eea <__udivmoddi4+0x28a>
 8000f14:	4620      	mov	r0, r4
 8000f16:	e794      	b.n	8000e42 <__udivmoddi4+0x1e2>
 8000f18:	4640      	mov	r0, r8
 8000f1a:	e7d1      	b.n	8000ec0 <__udivmoddi4+0x260>
 8000f1c:	46d0      	mov	r8, sl
 8000f1e:	e77b      	b.n	8000e18 <__udivmoddi4+0x1b8>
 8000f20:	3b02      	subs	r3, #2
 8000f22:	4461      	add	r1, ip
 8000f24:	e732      	b.n	8000d8c <__udivmoddi4+0x12c>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e709      	b.n	8000d3e <__udivmoddi4+0xde>
 8000f2a:	4464      	add	r4, ip
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	e742      	b.n	8000db6 <__udivmoddi4+0x156>

08000f30 <__aeabi_idiv0>:
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <InitKalmanStruct>:
extern arm_matrix_instance_f32 mat_P, mat_P_minus, mat_Q;
extern arm_matrix_instance_f32 mat_C, mat_R, mat_S, mat_K;
extern arm_matrix_instance_f32 mat_temp3x3A,mat_temp3x3B, mat_temp3x1,mat_temp1x3, mat_temp1x1;

void InitKalmanStruct(Kalman* KF,float q,float r)
{
 8000f34:	b4b0      	push	{r4, r5, r7}
 8000f36:	b0a1      	sub	sp, #132	; 0x84
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f40:	edc7 0a01 	vstr	s1, [r7, #4]
	KF->R = r;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	655a      	str	r2, [r3, #84]	; 0x54
	KF->var_Q = q;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	68ba      	ldr	r2, [r7, #8]
 8000f4e:	659a      	str	r2, [r3, #88]	; 0x58
	KF->D = 0;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f04f 0200 	mov.w	r2, #0
 8000f56:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	float32_t a[9] = {
 8000f5a:	4b48      	ldr	r3, [pc, #288]	; (800107c <InitKalmanStruct+0x148>)
 8000f5c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000f60:	461d      	mov	r5, r3
 8000f62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f6a:	682b      	ldr	r3, [r5, #0]
 8000f6c:	6023      	str	r3, [r4, #0]
			1, 0.001/5.0, 0.0000005/5.0,
			0, 1, 0.001/5.0,
			0, 0, 1
	};
	float iden[9] = {
 8000f6e:	4b44      	ldr	r3, [pc, #272]	; (8001080 <InitKalmanStruct+0x14c>)
 8000f70:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000f74:	461d      	mov	r5, r3
 8000f76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7e:	682b      	ldr	r3, [r5, #0]
 8000f80:	6023      	str	r3, [r4, #0]
			1, 0, 0,
			0, 1, 0,
			0, 0, 1
	};
	int i;
	for(i=0;i<9;i++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000f86:	e023      	b.n	8000fd0 <InitKalmanStruct+0x9c>
	{
		KF->A[i] = a[i];
 8000f88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	3380      	adds	r3, #128	; 0x80
 8000f8e:	443b      	add	r3, r7
 8000f90:	3b28      	subs	r3, #40	; 0x28
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	68f9      	ldr	r1, [r7, #12]
 8000f96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f98:	3318      	adds	r3, #24
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	601a      	str	r2, [r3, #0]
		KF->I[i] = iden[i];
 8000fa0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	3380      	adds	r3, #128	; 0x80
 8000fa6:	443b      	add	r3, r7
 8000fa8:	3b4c      	subs	r3, #76	; 0x4c
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	68f9      	ldr	r1, [r7, #12]
 8000fae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fb0:	332e      	adds	r3, #46	; 0x2e
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	601a      	str	r2, [r3, #0]
		KF->P[i] = 0;
 8000fb8:	68fa      	ldr	r2, [r7, #12]
 8000fba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fbc:	3302      	adds	r3, #2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	3304      	adds	r3, #4
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
	for(i=0;i<9;i++)
 8000fca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fcc:	3301      	adds	r3, #1
 8000fce:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000fd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fd2:	2b08      	cmp	r3, #8
 8000fd4:	ddd8      	ble.n	8000f88 <InitKalmanStruct+0x54>
	}
	float32_t b[3] = {
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fdc:	f04f 0300 	mov.w	r3, #0
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fe2:	f04f 0300 	mov.w	r3, #0
 8000fe6:	633b      	str	r3, [r7, #48]	; 0x30
			0, 0, 0
	};
	float32_t c[3] = {
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
 8000fee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000ff2:	623b      	str	r3, [r7, #32]
 8000ff4:	f04f 0300 	mov.w	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
			0, 1, 0
	};
	float32_t g[3] = {
 8000ffa:	4a22      	ldr	r2, [pc, #136]	; (8001084 <InitKalmanStruct+0x150>)
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	ca07      	ldmia	r2, {r0, r1, r2}
 8001002:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0.001 * 0.001 * 0.001 / 6*5.0,
			0.0000005/5.0,
			0.001/5.0
	};

	for(i=0;i<3;i++)
 8001006:	2300      	movs	r3, #0
 8001008:	67fb      	str	r3, [r7, #124]	; 0x7c
 800100a:	e02e      	b.n	800106a <InitKalmanStruct+0x136>
	{
		KF->B[i] = b[i];
 800100c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	3380      	adds	r3, #128	; 0x80
 8001012:	443b      	add	r3, r7
 8001014:	3b58      	subs	r3, #88	; 0x58
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	68f9      	ldr	r1, [r7, #12]
 800101a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800101c:	3320      	adds	r3, #32
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	440b      	add	r3, r1
 8001022:	3304      	adds	r3, #4
 8001024:	601a      	str	r2, [r3, #0]
		KF->C[i] = c[i];
 8001026:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	3380      	adds	r3, #128	; 0x80
 800102c:	443b      	add	r3, r7
 800102e:	3b64      	subs	r3, #100	; 0x64
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	68f9      	ldr	r1, [r7, #12]
 8001034:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001036:	3324      	adds	r3, #36	; 0x24
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	440b      	add	r3, r1
 800103c:	601a      	str	r2, [r3, #0]
		KF->G[i] = g[i];
 800103e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	3380      	adds	r3, #128	; 0x80
 8001044:	443b      	add	r3, r7
 8001046:	3b70      	subs	r3, #112	; 0x70
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	68f9      	ldr	r1, [r7, #12]
 800104c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800104e:	3328      	adds	r3, #40	; 0x28
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	440b      	add	r3, r1
 8001054:	601a      	str	r2, [r3, #0]
		KF->x_hat[i] = 0;
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
	for(i=0;i<3;i++)
 8001064:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001066:	3301      	adds	r3, #1
 8001068:	67fb      	str	r3, [r7, #124]	; 0x7c
 800106a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800106c:	2b02      	cmp	r3, #2
 800106e:	ddcd      	ble.n	800100c <InitKalmanStruct+0xd8>
	}

}
 8001070:	bf00      	nop
 8001072:	bf00      	nop
 8001074:	3784      	adds	r7, #132	; 0x84
 8001076:	46bd      	mov	sp, r7
 8001078:	bcb0      	pop	{r4, r5, r7}
 800107a:	4770      	bx	lr
 800107c:	08005050 	.word	0x08005050
 8001080:	08005074 	.word	0x08005074
 8001084:	08005098 	.word	0x08005098

08001088 <kalman_filter>:

void kalman_filter()
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
    //Process model: x_hat_minus = mat_A*x_hat
    arm_mat_mult_f32(&mat_A, &mat_x_hat, &mat_x_hat_minus);			//A*X
 800108c:	4a39      	ldr	r2, [pc, #228]	; (8001174 <kalman_filter+0xec>)
 800108e:	493a      	ldr	r1, [pc, #232]	; (8001178 <kalman_filter+0xf0>)
 8001090:	483a      	ldr	r0, [pc, #232]	; (800117c <kalman_filter+0xf4>)
 8001092:	f001 fabc 	bl	800260e <arm_mat_mult_f32>
    // If an input control vector is used:
    // arm_mat_mult_f32(&mat_B, &mat_u, &mat_temp3x3A);
    // arm_mat_add_f32(&mat_x_hat_minus, &mat_temp3x3A, &mat_x_hat_minus);

    // Predict covariance matrix: P_minus = A * P * A^T + Q
    arm_mat_trans_f32(&mat_A, &mat_temp3x3A);					    //AT
 8001096:	493a      	ldr	r1, [pc, #232]	; (8001180 <kalman_filter+0xf8>)
 8001098:	4838      	ldr	r0, [pc, #224]	; (800117c <kalman_filter+0xf4>)
 800109a:	f001 fba3 	bl	80027e4 <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_A, &mat_P, &mat_temp3x3B);			    //A*P
 800109e:	4a39      	ldr	r2, [pc, #228]	; (8001184 <kalman_filter+0xfc>)
 80010a0:	4939      	ldr	r1, [pc, #228]	; (8001188 <kalman_filter+0x100>)
 80010a2:	4836      	ldr	r0, [pc, #216]	; (800117c <kalman_filter+0xf4>)
 80010a4:	f001 fab3 	bl	800260e <arm_mat_mult_f32>
    arm_mat_mult_f32(&mat_temp3x3B, &mat_temp3x3A, &mat_P_minus);	//A*P*AT
 80010a8:	4a38      	ldr	r2, [pc, #224]	; (800118c <kalman_filter+0x104>)
 80010aa:	4935      	ldr	r1, [pc, #212]	; (8001180 <kalman_filter+0xf8>)
 80010ac:	4835      	ldr	r0, [pc, #212]	; (8001184 <kalman_filter+0xfc>)
 80010ae:	f001 faae 	bl	800260e <arm_mat_mult_f32>
    arm_mat_trans_f32(&mat_G, &mat_GT);								//GT
 80010b2:	4937      	ldr	r1, [pc, #220]	; (8001190 <kalman_filter+0x108>)
 80010b4:	4837      	ldr	r0, [pc, #220]	; (8001194 <kalman_filter+0x10c>)
 80010b6:	f001 fb95 	bl	80027e4 <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_G, &mat_GT, &mat_Q);						//G*GT
 80010ba:	4a37      	ldr	r2, [pc, #220]	; (8001198 <kalman_filter+0x110>)
 80010bc:	4934      	ldr	r1, [pc, #208]	; (8001190 <kalman_filter+0x108>)
 80010be:	4835      	ldr	r0, [pc, #212]	; (8001194 <kalman_filter+0x10c>)
 80010c0:	f001 faa5 	bl	800260e <arm_mat_mult_f32>
    arm_mat_scale_f32(&mat_Q,KF.var_Q, &mat_Q);						//G*GT*var_q
 80010c4:	4b35      	ldr	r3, [pc, #212]	; (800119c <kalman_filter+0x114>)
 80010c6:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80010ca:	4933      	ldr	r1, [pc, #204]	; (8001198 <kalman_filter+0x110>)
 80010cc:	eeb0 0a67 	vmov.f32	s0, s15
 80010d0:	4831      	ldr	r0, [pc, #196]	; (8001198 <kalman_filter+0x110>)
 80010d2:	f001 fb16 	bl	8002702 <arm_mat_scale_f32>
    arm_mat_add_f32(&mat_P_minus, &mat_Q, &mat_P_minus);			//A * P * A^T + Q
 80010d6:	4a2d      	ldr	r2, [pc, #180]	; (800118c <kalman_filter+0x104>)
 80010d8:	492f      	ldr	r1, [pc, #188]	; (8001198 <kalman_filter+0x110>)
 80010da:	482c      	ldr	r0, [pc, #176]	; (800118c <kalman_filter+0x104>)
 80010dc:	f000 fecd 	bl	8001e7a <arm_mat_add_f32>

    // Calculate innovation covariance: S = C * P_minus * C^T + R
    arm_mat_mult_f32(&mat_C, &mat_P_minus, &mat_temp1x3);			//C*P
 80010e0:	4a2f      	ldr	r2, [pc, #188]	; (80011a0 <kalman_filter+0x118>)
 80010e2:	492a      	ldr	r1, [pc, #168]	; (800118c <kalman_filter+0x104>)
 80010e4:	482f      	ldr	r0, [pc, #188]	; (80011a4 <kalman_filter+0x11c>)
 80010e6:	f001 fa92 	bl	800260e <arm_mat_mult_f32>
    arm_mat_trans_f32(&mat_C, &mat_temp3x1);						//CT
 80010ea:	492f      	ldr	r1, [pc, #188]	; (80011a8 <kalman_filter+0x120>)
 80010ec:	482d      	ldr	r0, [pc, #180]	; (80011a4 <kalman_filter+0x11c>)
 80010ee:	f001 fb79 	bl	80027e4 <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_temp1x3, &mat_temp3x1, &mat_temp1x1);		//C*P*C^T
 80010f2:	4a2e      	ldr	r2, [pc, #184]	; (80011ac <kalman_filter+0x124>)
 80010f4:	492c      	ldr	r1, [pc, #176]	; (80011a8 <kalman_filter+0x120>)
 80010f6:	482a      	ldr	r0, [pc, #168]	; (80011a0 <kalman_filter+0x118>)
 80010f8:	f001 fa89 	bl	800260e <arm_mat_mult_f32>
    arm_mat_add_f32(&mat_temp1x1, &mat_R, &mat_S);					//C*P*C^T + R
 80010fc:	4a2c      	ldr	r2, [pc, #176]	; (80011b0 <kalman_filter+0x128>)
 80010fe:	492d      	ldr	r1, [pc, #180]	; (80011b4 <kalman_filter+0x12c>)
 8001100:	482a      	ldr	r0, [pc, #168]	; (80011ac <kalman_filter+0x124>)
 8001102:	f000 feba 	bl	8001e7a <arm_mat_add_f32>

    //==> Calculate Kalman gain: K = P_minus * C^T * S^(-1)
    arm_mat_inverse_f32(&mat_S, &mat_temp1x1);						//inv(S)
 8001106:	4929      	ldr	r1, [pc, #164]	; (80011ac <kalman_filter+0x124>)
 8001108:	4829      	ldr	r0, [pc, #164]	; (80011b0 <kalman_filter+0x128>)
 800110a:	f000 ff09 	bl	8001f20 <arm_mat_inverse_f32>
    arm_mat_mult_f32(&mat_P_minus, &mat_temp3x1, &mat_temp3x3A);	//P*CT
 800110e:	4a1c      	ldr	r2, [pc, #112]	; (8001180 <kalman_filter+0xf8>)
 8001110:	4925      	ldr	r1, [pc, #148]	; (80011a8 <kalman_filter+0x120>)
 8001112:	481e      	ldr	r0, [pc, #120]	; (800118c <kalman_filter+0x104>)
 8001114:	f001 fa7b 	bl	800260e <arm_mat_mult_f32>
    arm_mat_mult_f32(&mat_temp3x3A, &mat_temp1x1, &mat_K);			//P*CT*inv(S)
 8001118:	4a27      	ldr	r2, [pc, #156]	; (80011b8 <kalman_filter+0x130>)
 800111a:	4924      	ldr	r1, [pc, #144]	; (80011ac <kalman_filter+0x124>)
 800111c:	4818      	ldr	r0, [pc, #96]	; (8001180 <kalman_filter+0xf8>)
 800111e:	f001 fa76 	bl	800260e <arm_mat_mult_f32>

    //==> Update state estimate: x_hat = x_hat_minus + K * (z - C * x_hat_minus)
    arm_mat_mult_f32(&mat_C, &mat_x_hat_minus, &mat_temp1x1);		//C*X
 8001122:	4a22      	ldr	r2, [pc, #136]	; (80011ac <kalman_filter+0x124>)
 8001124:	4913      	ldr	r1, [pc, #76]	; (8001174 <kalman_filter+0xec>)
 8001126:	481f      	ldr	r0, [pc, #124]	; (80011a4 <kalman_filter+0x11c>)
 8001128:	f001 fa71 	bl	800260e <arm_mat_mult_f32>
    //float32_t innovation = z - temp1x1;								//Z-C*X
    arm_mat_scale_f32(&mat_K, KF.z - KF.temp1x1, &mat_temp3x1);			//K*(Z-C*X)
 800112c:	4b1b      	ldr	r3, [pc, #108]	; (800119c <kalman_filter+0x114>)
 800112e:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8001132:	4b1a      	ldr	r3, [pc, #104]	; (800119c <kalman_filter+0x114>)
 8001134:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
 8001138:	ee77 7a67 	vsub.f32	s15, s14, s15
 800113c:	491a      	ldr	r1, [pc, #104]	; (80011a8 <kalman_filter+0x120>)
 800113e:	eeb0 0a67 	vmov.f32	s0, s15
 8001142:	481d      	ldr	r0, [pc, #116]	; (80011b8 <kalman_filter+0x130>)
 8001144:	f001 fadd 	bl	8002702 <arm_mat_scale_f32>
    arm_mat_add_f32(&mat_x_hat_minus, &mat_temp3x1, &mat_x_hat);	//X - K*(Z-C*X) ========> X estimate
 8001148:	4a0b      	ldr	r2, [pc, #44]	; (8001178 <kalman_filter+0xf0>)
 800114a:	4917      	ldr	r1, [pc, #92]	; (80011a8 <kalman_filter+0x120>)
 800114c:	4809      	ldr	r0, [pc, #36]	; (8001174 <kalman_filter+0xec>)
 800114e:	f000 fe94 	bl	8001e7a <arm_mat_add_f32>

    // Update covariance matrix: P = (I - K * C) * P_minus
    arm_mat_mult_f32(&mat_K, &mat_C, &mat_temp3x3B);				//K*C
 8001152:	4a0c      	ldr	r2, [pc, #48]	; (8001184 <kalman_filter+0xfc>)
 8001154:	4913      	ldr	r1, [pc, #76]	; (80011a4 <kalman_filter+0x11c>)
 8001156:	4818      	ldr	r0, [pc, #96]	; (80011b8 <kalman_filter+0x130>)
 8001158:	f001 fa59 	bl	800260e <arm_mat_mult_f32>
    arm_mat_sub_f32(&eye, &mat_P_minus, &mat_temp3x3A);				//I - K*C
 800115c:	4a08      	ldr	r2, [pc, #32]	; (8001180 <kalman_filter+0xf8>)
 800115e:	490b      	ldr	r1, [pc, #44]	; (800118c <kalman_filter+0x104>)
 8001160:	4816      	ldr	r0, [pc, #88]	; (80011bc <kalman_filter+0x134>)
 8001162:	f001 fb04 	bl	800276e <arm_mat_sub_f32>
    arm_mat_mult_f32(&mat_temp3x3A, &mat_P_minus, &mat_P);			//(I - K*C)*P ===========> P estimate
 8001166:	4a08      	ldr	r2, [pc, #32]	; (8001188 <kalman_filter+0x100>)
 8001168:	4908      	ldr	r1, [pc, #32]	; (800118c <kalman_filter+0x104>)
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <kalman_filter+0xf8>)
 800116c:	f001 fa4f 	bl	800260e <arm_mat_mult_f32>
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000330 	.word	0x20000330
 8001178:	20000328 	.word	0x20000328
 800117c:	20000320 	.word	0x20000320
 8001180:	20000390 	.word	0x20000390
 8001184:	20000398 	.word	0x20000398
 8001188:	20000358 	.word	0x20000358
 800118c:	20000360 	.word	0x20000360
 8001190:	20000340 	.word	0x20000340
 8001194:	20000348 	.word	0x20000348
 8001198:	20000368 	.word	0x20000368
 800119c:	200001a0 	.word	0x200001a0
 80011a0:	200003a8 	.word	0x200003a8
 80011a4:	20000370 	.word	0x20000370
 80011a8:	200003a0 	.word	0x200003a0
 80011ac:	200003b0 	.word	0x200003b0
 80011b0:	20000380 	.word	0x20000380
 80011b4:	20000378 	.word	0x20000378
 80011b8:	20000388 	.word	0x20000388
 80011bc:	20000350 	.word	0x20000350

080011c0 <QuinticSetup>:
 *      Author: tanawatp
 */
#include "QuinticTrajectory.h"

void QuinticSetup(QuinticTraj* temp, float32_t vmax, float32_t amax)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80011cc:	edc7 0a01 	vstr	s1, [r7, #4]
	temp->v_max = vmax;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	68ba      	ldr	r2, [r7, #8]
 80011d4:	619a      	str	r2, [r3, #24]
	temp->a_max = amax;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	61da      	str	r2, [r3, #28]
	temp->State = Ready;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <InitReadEncoder>:
{ //get time in micros
	return __HAL_TIM_GET_COUNTER(&htim5)+ ReadEncoderParam._micros;
}

void InitReadEncoder(ReadEncoder* Read, uint32_t samplingtime)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
	Read->_micros = 0;
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	f04f 0300 	mov.w	r3, #0
 8001204:	e9c1 2300 	strd	r2, r3, [r1]
	Read->PPR = 8192;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800120e:	811a      	strh	r2, [r3, #8]
	Read->samplingTime = samplingtime;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	60da      	str	r2, [r3, #12]
	Read->MotorSetDuty = 0;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	741a      	strb	r2, [r3, #16]
	Read->Pulse_Compare = 0;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	825a      	strh	r2, [r3, #18]
	Read->DIR = 0;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	751a      	strb	r2, [r3, #20]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <SetTrajectoryConstrainAndInit>:
 */
#include "Trajectory.h"
#include "math.h"

void SetTrajectoryConstrainAndInit(Trajectory* Tj, float32_t  vmax,float32_t  amax)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001240:	edc7 0a01 	vstr	s1, [r7, #4]
	Tj->complete = 1;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2201      	movs	r2, #1
 8001248:	629a      	str	r2, [r3, #40]	; 0x28
	Tj->v_max = vmax;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	60da      	str	r2, [r3, #12]
	Tj->a_max = amax;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	611a      	str	r2, [r3, #16]
	Tj->final_pos = 800;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4a05      	ldr	r2, [pc, #20]	; (8001270 <SetTrajectoryConstrainAndInit+0x3c>)
 800125a:	605a      	str	r2, [r3, #4]
	Tj->start_pos = 0;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f04f 0200 	mov.w	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
}
 8001264:	bf00      	nop
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	44480000 	.word	0x44480000

08001274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001278:	f001 faf6 	bl	8002868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800127c:	f000 f91a 	bl	80014b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001280:	f000 fb1e 	bl	80018c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001284:	f000 faf2 	bl	800186c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001288:	f000 f97e 	bl	8001588 <MX_TIM1_Init>
  MX_TIM2_Init();
 800128c:	f000 fa00 	bl	8001690 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001290:	f000 fa9e 	bl	80017d0 <MX_TIM5_Init>
  MX_TIM3_Init();
 8001294:	f000 fa50 	bl	8001738 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  InitKalmanStruct(&KF,Var_Q,Var_R);
 8001298:	4b53      	ldr	r3, [pc, #332]	; (80013e8 <main+0x174>)
 800129a:	edd3 7a00 	vldr	s15, [r3]
 800129e:	4b53      	ldr	r3, [pc, #332]	; (80013ec <main+0x178>)
 80012a0:	ed93 7a00 	vldr	s14, [r3]
 80012a4:	eef0 0a47 	vmov.f32	s1, s14
 80012a8:	eeb0 0a67 	vmov.f32	s0, s15
 80012ac:	4850      	ldr	r0, [pc, #320]	; (80013f0 <main+0x17c>)
 80012ae:	f7ff fe41 	bl	8000f34 <InitKalmanStruct>
  arm_mat_init_f32(&mat_A, 3, 3,KF.A);//3x3
 80012b2:	4b50      	ldr	r3, [pc, #320]	; (80013f4 <main+0x180>)
 80012b4:	2203      	movs	r2, #3
 80012b6:	2103      	movs	r1, #3
 80012b8:	484f      	ldr	r0, [pc, #316]	; (80013f8 <main+0x184>)
 80012ba:	f000 fe19 	bl	8001ef0 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_x_hat, 3, 1, KF.x_hat);
 80012be:	4b4c      	ldr	r3, [pc, #304]	; (80013f0 <main+0x17c>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	2103      	movs	r1, #3
 80012c4:	484d      	ldr	r0, [pc, #308]	; (80013fc <main+0x188>)
 80012c6:	f000 fe13 	bl	8001ef0 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_x_hat_minus, 3, 1, KF.x_hat_minus);
 80012ca:	4b4d      	ldr	r3, [pc, #308]	; (8001400 <main+0x18c>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	2103      	movs	r1, #3
 80012d0:	484c      	ldr	r0, [pc, #304]	; (8001404 <main+0x190>)
 80012d2:	f000 fe0d 	bl	8001ef0 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_B, 3, 1, KF.B);
 80012d6:	4b4c      	ldr	r3, [pc, #304]	; (8001408 <main+0x194>)
 80012d8:	2201      	movs	r2, #1
 80012da:	2103      	movs	r1, #3
 80012dc:	484b      	ldr	r0, [pc, #300]	; (800140c <main+0x198>)
 80012de:	f000 fe07 	bl	8001ef0 <arm_mat_init_f32>
  //arm_mat_init_f32(&mat_u, 1, 1, NULL);  // Set the input control vector if needed
  arm_mat_init_f32(&mat_P, 3, 3, KF.P);//3x3
 80012e2:	4b4b      	ldr	r3, [pc, #300]	; (8001410 <main+0x19c>)
 80012e4:	2203      	movs	r2, #3
 80012e6:	2103      	movs	r1, #3
 80012e8:	484a      	ldr	r0, [pc, #296]	; (8001414 <main+0x1a0>)
 80012ea:	f000 fe01 	bl	8001ef0 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_P_minus, 3, 3, KF.P_minus);//3x3
 80012ee:	4b4a      	ldr	r3, [pc, #296]	; (8001418 <main+0x1a4>)
 80012f0:	2203      	movs	r2, #3
 80012f2:	2103      	movs	r1, #3
 80012f4:	4849      	ldr	r0, [pc, #292]	; (800141c <main+0x1a8>)
 80012f6:	f000 fdfb 	bl	8001ef0 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_Q, 3, 3,KF.Q);//3x3
 80012fa:	4b49      	ldr	r3, [pc, #292]	; (8001420 <main+0x1ac>)
 80012fc:	2203      	movs	r2, #3
 80012fe:	2103      	movs	r1, #3
 8001300:	4848      	ldr	r0, [pc, #288]	; (8001424 <main+0x1b0>)
 8001302:	f000 fdf5 	bl	8001ef0 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_C, 1, 3, KF.C);//1x3
 8001306:	4b48      	ldr	r3, [pc, #288]	; (8001428 <main+0x1b4>)
 8001308:	2203      	movs	r2, #3
 800130a:	2101      	movs	r1, #1
 800130c:	4847      	ldr	r0, [pc, #284]	; (800142c <main+0x1b8>)
 800130e:	f000 fdef 	bl	8001ef0 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_R, 1, 1, &KF.R);//1x1
 8001312:	4b47      	ldr	r3, [pc, #284]	; (8001430 <main+0x1bc>)
 8001314:	2201      	movs	r2, #1
 8001316:	2101      	movs	r1, #1
 8001318:	4846      	ldr	r0, [pc, #280]	; (8001434 <main+0x1c0>)
 800131a:	f000 fde9 	bl	8001ef0 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_S, 1, 1, KF.S);//1x1
 800131e:	4b46      	ldr	r3, [pc, #280]	; (8001438 <main+0x1c4>)
 8001320:	2201      	movs	r2, #1
 8001322:	2101      	movs	r1, #1
 8001324:	4845      	ldr	r0, [pc, #276]	; (800143c <main+0x1c8>)
 8001326:	f000 fde3 	bl	8001ef0 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_K, 3, 1, KF.K);//3x1
 800132a:	4b45      	ldr	r3, [pc, #276]	; (8001440 <main+0x1cc>)
 800132c:	2201      	movs	r2, #1
 800132e:	2103      	movs	r1, #3
 8001330:	4844      	ldr	r0, [pc, #272]	; (8001444 <main+0x1d0>)
 8001332:	f000 fddd 	bl	8001ef0 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_temp3x3A, 3, 3, KF.temp3x3A);//3x3
 8001336:	4b44      	ldr	r3, [pc, #272]	; (8001448 <main+0x1d4>)
 8001338:	2203      	movs	r2, #3
 800133a:	2103      	movs	r1, #3
 800133c:	4843      	ldr	r0, [pc, #268]	; (800144c <main+0x1d8>)
 800133e:	f000 fdd7 	bl	8001ef0 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_temp3x3B, 3, 3, KF.temp3x3B);//3x3
 8001342:	4b43      	ldr	r3, [pc, #268]	; (8001450 <main+0x1dc>)
 8001344:	2203      	movs	r2, #3
 8001346:	2103      	movs	r1, #3
 8001348:	4842      	ldr	r0, [pc, #264]	; (8001454 <main+0x1e0>)
 800134a:	f000 fdd1 	bl	8001ef0 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_temp3x1, 3, 1, KF.temp3x1);//3x1
 800134e:	4b42      	ldr	r3, [pc, #264]	; (8001458 <main+0x1e4>)
 8001350:	2201      	movs	r2, #1
 8001352:	2103      	movs	r1, #3
 8001354:	4841      	ldr	r0, [pc, #260]	; (800145c <main+0x1e8>)
 8001356:	f000 fdcb 	bl	8001ef0 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_temp1x3, 1, 3, KF.temp1x3);//1x3
 800135a:	4b41      	ldr	r3, [pc, #260]	; (8001460 <main+0x1ec>)
 800135c:	2203      	movs	r2, #3
 800135e:	2101      	movs	r1, #1
 8001360:	4840      	ldr	r0, [pc, #256]	; (8001464 <main+0x1f0>)
 8001362:	f000 fdc5 	bl	8001ef0 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_temp1x1, 1, 1, &KF.temp1x1);//1x1
 8001366:	4b40      	ldr	r3, [pc, #256]	; (8001468 <main+0x1f4>)
 8001368:	2201      	movs	r2, #1
 800136a:	2101      	movs	r1, #1
 800136c:	483f      	ldr	r0, [pc, #252]	; (800146c <main+0x1f8>)
 800136e:	f000 fdbf 	bl	8001ef0 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_G, 3, 1, KF.G);//3x1
 8001372:	4b3f      	ldr	r3, [pc, #252]	; (8001470 <main+0x1fc>)
 8001374:	2201      	movs	r2, #1
 8001376:	2103      	movs	r1, #3
 8001378:	483e      	ldr	r0, [pc, #248]	; (8001474 <main+0x200>)
 800137a:	f000 fdb9 	bl	8001ef0 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_GT, 1, 3, KF.GT);//1x3
 800137e:	4b3e      	ldr	r3, [pc, #248]	; (8001478 <main+0x204>)
 8001380:	2203      	movs	r2, #3
 8001382:	2101      	movs	r1, #1
 8001384:	483d      	ldr	r0, [pc, #244]	; (800147c <main+0x208>)
 8001386:	f000 fdb3 	bl	8001ef0 <arm_mat_init_f32>
  arm_mat_init_f32(&eye, 3, 3, KF.I);//1x3
 800138a:	4b3d      	ldr	r3, [pc, #244]	; (8001480 <main+0x20c>)
 800138c:	2203      	movs	r2, #3
 800138e:	2103      	movs	r1, #3
 8001390:	483c      	ldr	r0, [pc, #240]	; (8001484 <main+0x210>)
 8001392:	f000 fdad 	bl	8001ef0 <arm_mat_init_f32>


  InitReadEncoder(&ReadEncoderParam, 1000);
 8001396:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800139a:	483b      	ldr	r0, [pc, #236]	; (8001488 <main+0x214>)
 800139c:	f7ff ff28 	bl	80011f0 <InitReadEncoder>
  SetTrajectoryConstrainAndInit(&Traj, 900, 1400);
 80013a0:	eddf 0a3a 	vldr	s1, [pc, #232]	; 800148c <main+0x218>
 80013a4:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8001490 <main+0x21c>
 80013a8:	483a      	ldr	r0, [pc, #232]	; (8001494 <main+0x220>)
 80013aa:	f7ff ff43 	bl	8001234 <SetTrajectoryConstrainAndInit>
  QuinticSetup(&QuinticVar, vmax, amax);
 80013ae:	4b3a      	ldr	r3, [pc, #232]	; (8001498 <main+0x224>)
 80013b0:	edd3 7a00 	vldr	s15, [r3]
 80013b4:	4b39      	ldr	r3, [pc, #228]	; (800149c <main+0x228>)
 80013b6:	ed93 7a00 	vldr	s14, [r3]
 80013ba:	eef0 0a47 	vmov.f32	s1, s14
 80013be:	eeb0 0a67 	vmov.f32	s0, s15
 80013c2:	4837      	ldr	r0, [pc, #220]	; (80014a0 <main+0x22c>)
 80013c4:	f7ff fefc 	bl	80011c0 <QuinticSetup>


  //Timers Start
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);//Start PWM
 80013c8:	2100      	movs	r1, #0
 80013ca:	4836      	ldr	r0, [pc, #216]	; (80014a4 <main+0x230>)
 80013cc:	f002 fb08 	bl	80039e0 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2); //Start QEI
 80013d0:	2104      	movs	r1, #4
 80013d2:	4835      	ldr	r0, [pc, #212]	; (80014a8 <main+0x234>)
 80013d4:	f002 fc5a 	bl	8003c8c <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 80013d8:	4834      	ldr	r0, [pc, #208]	; (80014ac <main+0x238>)
 80013da:	f002 fa4f 	bl	800387c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 80013de:	4834      	ldr	r0, [pc, #208]	; (80014b0 <main+0x23c>)
 80013e0:	f002 fa4c 	bl	800387c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <main+0x170>
 80013e6:	bf00      	nop
 80013e8:	20000000 	.word	0x20000000
 80013ec:	20000004 	.word	0x20000004
 80013f0:	200001a0 	.word	0x200001a0
 80013f4:	20000200 	.word	0x20000200
 80013f8:	20000320 	.word	0x20000320
 80013fc:	20000328 	.word	0x20000328
 8001400:	2000027c 	.word	0x2000027c
 8001404:	20000330 	.word	0x20000330
 8001408:	20000224 	.word	0x20000224
 800140c:	20000338 	.word	0x20000338
 8001410:	200001ac 	.word	0x200001ac
 8001414:	20000358 	.word	0x20000358
 8001418:	20000288 	.word	0x20000288
 800141c:	20000360 	.word	0x20000360
 8001420:	200001d0 	.word	0x200001d0
 8001424:	20000368 	.word	0x20000368
 8001428:	20000230 	.word	0x20000230
 800142c:	20000370 	.word	0x20000370
 8001430:	200001f4 	.word	0x200001f4
 8001434:	20000378 	.word	0x20000378
 8001438:	200002ac 	.word	0x200002ac
 800143c:	20000380 	.word	0x20000380
 8001440:	200002b0 	.word	0x200002b0
 8001444:	20000388 	.word	0x20000388
 8001448:	200002bc 	.word	0x200002bc
 800144c:	20000390 	.word	0x20000390
 8001450:	200002e0 	.word	0x200002e0
 8001454:	20000398 	.word	0x20000398
 8001458:	20000304 	.word	0x20000304
 800145c:	200003a0 	.word	0x200003a0
 8001460:	20000310 	.word	0x20000310
 8001464:	200003a8 	.word	0x200003a8
 8001468:	2000031c 	.word	0x2000031c
 800146c:	200003b0 	.word	0x200003b0
 8001470:	20000240 	.word	0x20000240
 8001474:	20000348 	.word	0x20000348
 8001478:	2000024c 	.word	0x2000024c
 800147c:	20000340 	.word	0x20000340
 8001480:	20000258 	.word	0x20000258
 8001484:	20000350 	.word	0x20000350
 8001488:	200003b8 	.word	0x200003b8
 800148c:	44af0000 	.word	0x44af0000
 8001490:	44610000 	.word	0x44610000
 8001494:	200003fc 	.word	0x200003fc
 8001498:	20000008 	.word	0x20000008
 800149c:	2000000c 	.word	0x2000000c
 80014a0:	2000042c 	.word	0x2000042c
 80014a4:	2000003c 	.word	0x2000003c
 80014a8:	20000084 	.word	0x20000084
 80014ac:	200000cc 	.word	0x200000cc
 80014b0:	20000114 	.word	0x20000114

080014b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b094      	sub	sp, #80	; 0x50
 80014b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ba:	f107 0320 	add.w	r3, r7, #32
 80014be:	2230      	movs	r2, #48	; 0x30
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f003 fdb0 	bl	8005028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c8:	f107 030c 	add.w	r3, r7, #12
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d8:	2300      	movs	r3, #0
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	4b28      	ldr	r3, [pc, #160]	; (8001580 <SystemClock_Config+0xcc>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	4a27      	ldr	r2, [pc, #156]	; (8001580 <SystemClock_Config+0xcc>)
 80014e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e6:	6413      	str	r3, [r2, #64]	; 0x40
 80014e8:	4b25      	ldr	r3, [pc, #148]	; (8001580 <SystemClock_Config+0xcc>)
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014f4:	2300      	movs	r3, #0
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	4b22      	ldr	r3, [pc, #136]	; (8001584 <SystemClock_Config+0xd0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a21      	ldr	r2, [pc, #132]	; (8001584 <SystemClock_Config+0xd0>)
 80014fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <SystemClock_Config+0xd0>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001510:	2302      	movs	r3, #2
 8001512:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001514:	2301      	movs	r3, #1
 8001516:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001518:	2310      	movs	r3, #16
 800151a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800151c:	2302      	movs	r3, #2
 800151e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001520:	2300      	movs	r3, #0
 8001522:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001524:	2310      	movs	r3, #16
 8001526:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001528:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800152c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800152e:	2304      	movs	r3, #4
 8001530:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001532:	2304      	movs	r3, #4
 8001534:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001536:	f107 0320 	add.w	r3, r7, #32
 800153a:	4618      	mov	r0, r3
 800153c:	f001 fcb6 	bl	8002eac <HAL_RCC_OscConfig>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001546:	f000 fac1 	bl	8001acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800154a:	230f      	movs	r3, #15
 800154c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800154e:	2302      	movs	r3, #2
 8001550:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001556:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800155a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	2102      	movs	r1, #2
 8001566:	4618      	mov	r0, r3
 8001568:	f001 ff18 	bl	800339c <HAL_RCC_ClockConfig>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001572:	f000 faab 	bl	8001acc <Error_Handler>
  }
}
 8001576:	bf00      	nop
 8001578:	3750      	adds	r7, #80	; 0x50
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800
 8001584:	40007000 	.word	0x40007000

08001588 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b092      	sub	sp, #72	; 0x48
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
 80015a8:	615a      	str	r2, [r3, #20]
 80015aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	2220      	movs	r2, #32
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f003 fd38 	bl	8005028 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015b8:	4b33      	ldr	r3, [pc, #204]	; (8001688 <MX_TIM1_Init+0x100>)
 80015ba:	4a34      	ldr	r2, [pc, #208]	; (800168c <MX_TIM1_Init+0x104>)
 80015bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80015be:	4b32      	ldr	r3, [pc, #200]	; (8001688 <MX_TIM1_Init+0x100>)
 80015c0:	2253      	movs	r2, #83	; 0x53
 80015c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c4:	4b30      	ldr	r3, [pc, #192]	; (8001688 <MX_TIM1_Init+0x100>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80015ca:	4b2f      	ldr	r3, [pc, #188]	; (8001688 <MX_TIM1_Init+0x100>)
 80015cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d2:	4b2d      	ldr	r3, [pc, #180]	; (8001688 <MX_TIM1_Init+0x100>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015d8:	4b2b      	ldr	r3, [pc, #172]	; (8001688 <MX_TIM1_Init+0x100>)
 80015da:	2200      	movs	r2, #0
 80015dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015de:	4b2a      	ldr	r3, [pc, #168]	; (8001688 <MX_TIM1_Init+0x100>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015e4:	4828      	ldr	r0, [pc, #160]	; (8001688 <MX_TIM1_Init+0x100>)
 80015e6:	f002 f9ab 	bl	8003940 <HAL_TIM_PWM_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80015f0:	f000 fa6c 	bl	8001acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f4:	2300      	movs	r3, #0
 80015f6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001600:	4619      	mov	r1, r3
 8001602:	4821      	ldr	r0, [pc, #132]	; (8001688 <MX_TIM1_Init+0x100>)
 8001604:	f003 f956 	bl	80048b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800160e:	f000 fa5d 	bl	8001acc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001612:	2360      	movs	r3, #96	; 0x60
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 8001616:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800161a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800161c:	2300      	movs	r3, #0
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001620:	2300      	movs	r3, #0
 8001622:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001624:	2300      	movs	r3, #0
 8001626:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001628:	2300      	movs	r3, #0
 800162a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800162c:	2300      	movs	r3, #0
 800162e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001634:	2200      	movs	r2, #0
 8001636:	4619      	mov	r1, r3
 8001638:	4813      	ldr	r0, [pc, #76]	; (8001688 <MX_TIM1_Init+0x100>)
 800163a:	f002 fcbd 	bl	8003fb8 <HAL_TIM_PWM_ConfigChannel>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001644:	f000 fa42 	bl	8001acc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001648:	2300      	movs	r3, #0
 800164a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800165c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001660:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	4619      	mov	r1, r3
 800166a:	4807      	ldr	r0, [pc, #28]	; (8001688 <MX_TIM1_Init+0x100>)
 800166c:	f003 f990 	bl	8004990 <HAL_TIMEx_ConfigBreakDeadTime>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8001676:	f000 fa29 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800167a:	4803      	ldr	r0, [pc, #12]	; (8001688 <MX_TIM1_Init+0x100>)
 800167c:	f000 fb02 	bl	8001c84 <HAL_TIM_MspPostInit>

}
 8001680:	bf00      	nop
 8001682:	3748      	adds	r7, #72	; 0x48
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	2000003c 	.word	0x2000003c
 800168c:	40010000 	.word	0x40010000

08001690 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08c      	sub	sp, #48	; 0x30
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	2224      	movs	r2, #36	; 0x24
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f003 fcc2 	bl	8005028 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016ac:	4b21      	ldr	r3, [pc, #132]	; (8001734 <MX_TIM2_Init+0xa4>)
 80016ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016b4:	4b1f      	ldr	r3, [pc, #124]	; (8001734 <MX_TIM2_Init+0xa4>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ba:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <MX_TIM2_Init+0xa4>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80016c0:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <MX_TIM2_Init+0xa4>)
 80016c2:	f04f 32ff 	mov.w	r2, #4294967295
 80016c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c8:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <MX_TIM2_Init+0xa4>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ce:	4b19      	ldr	r3, [pc, #100]	; (8001734 <MX_TIM2_Init+0xa4>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016d4:	2303      	movs	r3, #3
 80016d6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016d8:	2300      	movs	r3, #0
 80016da:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016dc:	2301      	movs	r3, #1
 80016de:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016e8:	2300      	movs	r3, #0
 80016ea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016ec:	2301      	movs	r3, #1
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	4619      	mov	r1, r3
 80016fe:	480d      	ldr	r0, [pc, #52]	; (8001734 <MX_TIM2_Init+0xa4>)
 8001700:	f002 fa1e 	bl	8003b40 <HAL_TIM_Encoder_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800170a:	f000 f9df 	bl	8001acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	4619      	mov	r1, r3
 800171a:	4806      	ldr	r0, [pc, #24]	; (8001734 <MX_TIM2_Init+0xa4>)
 800171c:	f003 f8ca 	bl	80048b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001726:	f000 f9d1 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	3730      	adds	r7, #48	; 0x30
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000084 	.word	0x20000084

08001738 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800173e:	f107 0308 	add.w	r3, r7, #8
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800174c:	463b      	mov	r3, r7
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001754:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <MX_TIM3_Init+0x90>)
 8001756:	4a1d      	ldr	r2, [pc, #116]	; (80017cc <MX_TIM3_Init+0x94>)
 8001758:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 800175a:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <MX_TIM3_Init+0x90>)
 800175c:	2253      	movs	r2, #83	; 0x53
 800175e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001760:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <MX_TIM3_Init+0x90>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8001766:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <MX_TIM3_Init+0x90>)
 8001768:	22c7      	movs	r2, #199	; 0xc7
 800176a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176c:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <MX_TIM3_Init+0x90>)
 800176e:	2200      	movs	r2, #0
 8001770:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <MX_TIM3_Init+0x90>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001778:	4813      	ldr	r0, [pc, #76]	; (80017c8 <MX_TIM3_Init+0x90>)
 800177a:	f002 f82f 	bl	80037dc <HAL_TIM_Base_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001784:	f000 f9a2 	bl	8001acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800178c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800178e:	f107 0308 	add.w	r3, r7, #8
 8001792:	4619      	mov	r1, r3
 8001794:	480c      	ldr	r0, [pc, #48]	; (80017c8 <MX_TIM3_Init+0x90>)
 8001796:	f002 fcd1 	bl	800413c <HAL_TIM_ConfigClockSource>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80017a0:	f000 f994 	bl	8001acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a4:	2300      	movs	r3, #0
 80017a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017ac:	463b      	mov	r3, r7
 80017ae:	4619      	mov	r1, r3
 80017b0:	4805      	ldr	r0, [pc, #20]	; (80017c8 <MX_TIM3_Init+0x90>)
 80017b2:	f003 f87f 	bl	80048b4 <HAL_TIMEx_MasterConfigSynchronization>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80017bc:	f000 f986 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	200000cc 	.word	0x200000cc
 80017cc:	40000400 	.word	0x40000400

080017d0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017d6:	f107 0308 	add.w	r3, r7, #8
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e4:	463b      	mov	r3, r7
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80017ec:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <MX_TIM5_Init+0x94>)
 80017ee:	4a1e      	ldr	r2, [pc, #120]	; (8001868 <MX_TIM5_Init+0x98>)
 80017f0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 80017f2:	4b1c      	ldr	r3, [pc, #112]	; (8001864 <MX_TIM5_Init+0x94>)
 80017f4:	2253      	movs	r2, #83	; 0x53
 80017f6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f8:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <MX_TIM5_Init+0x94>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80017fe:	4b19      	ldr	r3, [pc, #100]	; (8001864 <MX_TIM5_Init+0x94>)
 8001800:	f04f 32ff 	mov.w	r2, #4294967295
 8001804:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001806:	4b17      	ldr	r3, [pc, #92]	; (8001864 <MX_TIM5_Init+0x94>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800180c:	4b15      	ldr	r3, [pc, #84]	; (8001864 <MX_TIM5_Init+0x94>)
 800180e:	2200      	movs	r2, #0
 8001810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001812:	4814      	ldr	r0, [pc, #80]	; (8001864 <MX_TIM5_Init+0x94>)
 8001814:	f001 ffe2 	bl	80037dc <HAL_TIM_Base_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800181e:	f000 f955 	bl	8001acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001826:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001828:	f107 0308 	add.w	r3, r7, #8
 800182c:	4619      	mov	r1, r3
 800182e:	480d      	ldr	r0, [pc, #52]	; (8001864 <MX_TIM5_Init+0x94>)
 8001830:	f002 fc84 	bl	800413c <HAL_TIM_ConfigClockSource>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800183a:	f000 f947 	bl	8001acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183e:	2300      	movs	r3, #0
 8001840:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001846:	463b      	mov	r3, r7
 8001848:	4619      	mov	r1, r3
 800184a:	4806      	ldr	r0, [pc, #24]	; (8001864 <MX_TIM5_Init+0x94>)
 800184c:	f003 f832 	bl	80048b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001856:	f000 f939 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000114 	.word	0x20000114
 8001868:	40000c00 	.word	0x40000c00

0800186c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <MX_USART2_UART_Init+0x4c>)
 8001872:	4a12      	ldr	r2, [pc, #72]	; (80018bc <MX_USART2_UART_Init+0x50>)
 8001874:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <MX_USART2_UART_Init+0x4c>)
 8001878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800187c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <MX_USART2_UART_Init+0x4c>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <MX_USART2_UART_Init+0x4c>)
 8001886:	2200      	movs	r2, #0
 8001888:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800188a:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <MX_USART2_UART_Init+0x4c>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001890:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <MX_USART2_UART_Init+0x4c>)
 8001892:	220c      	movs	r2, #12
 8001894:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <MX_USART2_UART_Init+0x4c>)
 8001898:	2200      	movs	r2, #0
 800189a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <MX_USART2_UART_Init+0x4c>)
 800189e:	2200      	movs	r2, #0
 80018a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018a2:	4805      	ldr	r0, [pc, #20]	; (80018b8 <MX_USART2_UART_Init+0x4c>)
 80018a4:	f003 f8da 	bl	8004a5c <HAL_UART_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018ae:	f000 f90d 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	2000015c 	.word	0x2000015c
 80018bc:	40004400 	.word	0x40004400

080018c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08a      	sub	sp, #40	; 0x28
 80018c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c6:	f107 0314 	add.w	r3, r7, #20
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
 80018d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	4b38      	ldr	r3, [pc, #224]	; (80019bc <MX_GPIO_Init+0xfc>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a37      	ldr	r2, [pc, #220]	; (80019bc <MX_GPIO_Init+0xfc>)
 80018e0:	f043 0304 	orr.w	r3, r3, #4
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b35      	ldr	r3, [pc, #212]	; (80019bc <MX_GPIO_Init+0xfc>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0304 	and.w	r3, r3, #4
 80018ee:	613b      	str	r3, [r7, #16]
 80018f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	4b31      	ldr	r3, [pc, #196]	; (80019bc <MX_GPIO_Init+0xfc>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a30      	ldr	r2, [pc, #192]	; (80019bc <MX_GPIO_Init+0xfc>)
 80018fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b2e      	ldr	r3, [pc, #184]	; (80019bc <MX_GPIO_Init+0xfc>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	4b2a      	ldr	r3, [pc, #168]	; (80019bc <MX_GPIO_Init+0xfc>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a29      	ldr	r2, [pc, #164]	; (80019bc <MX_GPIO_Init+0xfc>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b27      	ldr	r3, [pc, #156]	; (80019bc <MX_GPIO_Init+0xfc>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	4b23      	ldr	r3, [pc, #140]	; (80019bc <MX_GPIO_Init+0xfc>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a22      	ldr	r2, [pc, #136]	; (80019bc <MX_GPIO_Init+0xfc>)
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b20      	ldr	r3, [pc, #128]	; (80019bc <MX_GPIO_Init+0xfc>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001946:	2200      	movs	r2, #0
 8001948:	2120      	movs	r1, #32
 800194a:	481d      	ldr	r0, [pc, #116]	; (80019c0 <MX_GPIO_Init+0x100>)
 800194c:	f001 fa94 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001950:	2200      	movs	r2, #0
 8001952:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001956:	481b      	ldr	r0, [pc, #108]	; (80019c4 <MX_GPIO_Init+0x104>)
 8001958:	f001 fa8e 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800195c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001962:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	4619      	mov	r1, r3
 8001972:	4815      	ldr	r0, [pc, #84]	; (80019c8 <MX_GPIO_Init+0x108>)
 8001974:	f001 f8fc 	bl	8002b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001978:	2320      	movs	r3, #32
 800197a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197c:	2301      	movs	r3, #1
 800197e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	2300      	movs	r3, #0
 8001986:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4619      	mov	r1, r3
 800198e:	480c      	ldr	r0, [pc, #48]	; (80019c0 <MX_GPIO_Init+0x100>)
 8001990:	f001 f8ee 	bl	8002b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199a:	2301      	movs	r3, #1
 800199c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2300      	movs	r3, #0
 80019a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	4619      	mov	r1, r3
 80019ac:	4805      	ldr	r0, [pc, #20]	; (80019c4 <MX_GPIO_Init+0x104>)
 80019ae:	f001 f8df 	bl	8002b70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019b2:	bf00      	nop
 80019b4:	3728      	adds	r7, #40	; 0x28
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40020000 	.word	0x40020000
 80019c4:	40020400 	.word	0x40020400
 80019c8:	40020800 	.word	0x40020800
 80019cc:	00000000 	.word	0x00000000

080019d0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{ //get time period
 80019d0:	b5b0      	push	{r4, r5, r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
//	if(htim->Instance == TIM5)
//	{
//		ReadEncoderParam._micros += UINT32_MAX;
//	}
	if(htim == &htim3)// 5 KHz(0.001/5 = 0.0002)
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	4833      	ldr	r0, [pc, #204]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80019dc:	4281      	cmp	r1, r0
 80019de:	d15b      	bne.n	8001a98 <HAL_TIM_PeriodElapsedCallback+0xc8>
//		}
//		else
//		{
//			ReadEncoderParam.MotorSetDuty = 0;
//		}
		QEIData.data[0] = __HAL_TIM_GET_COUNTER(&htim2);
 80019e0:	4932      	ldr	r1, [pc, #200]	; (8001aac <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80019e2:	6809      	ldr	r1, [r1, #0]
 80019e4:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80019e6:	2000      	movs	r0, #0
 80019e8:	460a      	mov	r2, r1
 80019ea:	4603      	mov	r3, r0
 80019ec:	4930      	ldr	r1, [pc, #192]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80019ee:	e9c1 2300 	strd	r2, r3, [r1]
		QEIData.QEIPosition = QEIData.data[0]-QEIData.data[1];
 80019f2:	4b2f      	ldr	r3, [pc, #188]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80019f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019f8:	4b2d      	ldr	r3, [pc, #180]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80019fa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80019fe:	1a84      	subs	r4, r0, r2
 8001a00:	eb61 0503 	sbc.w	r5, r1, r3
 8001a04:	4620      	mov	r0, r4
 8001a06:	4629      	mov	r1, r5
 8001a08:	f7ff f8d4 	bl	8000bb4 <__aeabi_l2f>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	4a28      	ldr	r2, [pc, #160]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001a10:	6213      	str	r3, [r2, #32]
		QEIData.QEIVelocity = ((QEIData.QEIPosition)*60.0)/(0.0002*8192.0);
 8001a12:	4b27      	ldr	r3, [pc, #156]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe fd42 	bl	80004a0 <__aeabi_f2d>
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001a22:	f7fe fd95 	bl	8000550 <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	a31c      	add	r3, pc, #112	; (adr r3, 8001aa0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a34:	f7fe feb6 	bl	80007a4 <__aeabi_ddiv>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f7fe ff98 	bl	8000974 <__aeabi_d2f>
 8001a44:	4603      	mov	r3, r0
 8001a46:	4a1a      	ldr	r2, [pc, #104]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001a48:	6253      	str	r3, [r2, #36]	; 0x24
		KF.z = QEIData.QEIVelocity;
 8001a4a:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	4a1a      	ldr	r2, [pc, #104]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001a50:	65d3      	str	r3, [r2, #92]	; 0x5c
		kalman_filter();
 8001a52:	f7ff fb19 	bl	8001088 <kalman_filter>
		ZEstimateVelocity = KF.x_hat[1];
 8001a56:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	4a18      	ldr	r2, [pc, #96]	; (8001abc <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001a5c:	6013      	str	r3, [r2, #0]

		//QuinticRun(&QuinticVar,0.001);
		QEIData.data[1] = QEIData.data[0];
 8001a5e:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a64:	4912      	ldr	r1, [pc, #72]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001a66:	e9c1 2302 	strd	r2, r3, [r1, #8]


		ReadEncoderParam.Pulse_Compare = ReadEncoderParam.MotorSetDuty * 10;
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001a6c:	7c1b      	ldrb	r3, [r3, #16]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	461a      	mov	r2, r3
 8001a72:	0092      	lsls	r2, r2, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001a7c:	825a      	strh	r2, [r3, #18]
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,ReadEncoderParam.Pulse_Compare);
 8001a7e:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001a80:	8a5a      	ldrh	r2, [r3, #18]
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, ReadEncoderParam.DIR);
 8001a88:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001a8a:	7d1b      	ldrb	r3, [r3, #20]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a92:	480d      	ldr	r0, [pc, #52]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001a94:	f001 f9f0 	bl	8002e78 <HAL_GPIO_WritePin>
	}
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bdb0      	pop	{r4, r5, r7, pc}
 8001aa0:	eb1c432d 	.word	0xeb1c432d
 8001aa4:	3ffa36e2 	.word	0x3ffa36e2
 8001aa8:	200000cc 	.word	0x200000cc
 8001aac:	20000084 	.word	0x20000084
 8001ab0:	200003d0 	.word	0x200003d0
 8001ab4:	404e0000 	.word	0x404e0000
 8001ab8:	200001a0 	.word	0x200001a0
 8001abc:	200003f8 	.word	0x200003f8
 8001ac0:	200003b8 	.word	0x200003b8
 8001ac4:	2000003c 	.word	0x2000003c
 8001ac8:	40020400 	.word	0x40020400

08001acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad0:	b672      	cpsid	i
}
 8001ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <Error_Handler+0x8>
	...

08001ad8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <HAL_MspInit+0x4c>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	4a0f      	ldr	r2, [pc, #60]	; (8001b24 <HAL_MspInit+0x4c>)
 8001ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aec:	6453      	str	r3, [r2, #68]	; 0x44
 8001aee:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <HAL_MspInit+0x4c>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	603b      	str	r3, [r7, #0]
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <HAL_MspInit+0x4c>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	4a08      	ldr	r2, [pc, #32]	; (8001b24 <HAL_MspInit+0x4c>)
 8001b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b08:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_MspInit+0x4c>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b12:	603b      	str	r3, [r7, #0]
 8001b14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b16:	2007      	movs	r0, #7
 8001b18:	f000 ffe8 	bl	8002aec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40023800 	.word	0x40023800

08001b28 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0b      	ldr	r2, [pc, #44]	; (8001b64 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d10d      	bne.n	8001b56 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <HAL_TIM_PWM_MspInit+0x40>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	4a09      	ldr	r2, [pc, #36]	; (8001b68 <HAL_TIM_PWM_MspInit+0x40>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4a:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <HAL_TIM_PWM_MspInit+0x40>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b56:	bf00      	nop
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40010000 	.word	0x40010000
 8001b68:	40023800 	.word	0x40023800

08001b6c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	; 0x28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b8c:	d133      	bne.n	8001bf6 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <HAL_TIM_Encoder_MspInit+0x94>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	4a1a      	ldr	r2, [pc, #104]	; (8001c00 <HAL_TIM_Encoder_MspInit+0x94>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9e:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <HAL_TIM_Encoder_MspInit+0x94>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <HAL_TIM_Encoder_MspInit+0x94>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a13      	ldr	r2, [pc, #76]	; (8001c00 <HAL_TIM_Encoder_MspInit+0x94>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <HAL_TIM_Encoder_MspInit+0x94>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bda:	f107 0314 	add.w	r3, r7, #20
 8001bde:	4619      	mov	r1, r3
 8001be0:	4808      	ldr	r0, [pc, #32]	; (8001c04 <HAL_TIM_Encoder_MspInit+0x98>)
 8001be2:	f000 ffc5 	bl	8002b70 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2100      	movs	r1, #0
 8001bea:	201c      	movs	r0, #28
 8001bec:	f000 ff89 	bl	8002b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bf0:	201c      	movs	r0, #28
 8001bf2:	f000 ffa2 	bl	8002b3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bf6:	bf00      	nop
 8001bf8:	3728      	adds	r7, #40	; 0x28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40020000 	.word	0x40020000

08001c08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a18      	ldr	r2, [pc, #96]	; (8001c78 <HAL_TIM_Base_MspInit+0x70>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d116      	bne.n	8001c48 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <HAL_TIM_Base_MspInit+0x74>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	4a16      	ldr	r2, [pc, #88]	; (8001c7c <HAL_TIM_Base_MspInit+0x74>)
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2a:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <HAL_TIM_Base_MspInit+0x74>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2100      	movs	r1, #0
 8001c3a:	201d      	movs	r0, #29
 8001c3c:	f000 ff61 	bl	8002b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c40:	201d      	movs	r0, #29
 8001c42:	f000 ff7a 	bl	8002b3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001c46:	e012      	b.n	8001c6e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a0c      	ldr	r2, [pc, #48]	; (8001c80 <HAL_TIM_Base_MspInit+0x78>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d10d      	bne.n	8001c6e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <HAL_TIM_Base_MspInit+0x74>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	4a08      	ldr	r2, [pc, #32]	; (8001c7c <HAL_TIM_Base_MspInit+0x74>)
 8001c5c:	f043 0308 	orr.w	r3, r3, #8
 8001c60:	6413      	str	r3, [r2, #64]	; 0x40
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_TIM_Base_MspInit+0x74>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
}
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40000400 	.word	0x40000400
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40000c00 	.word	0x40000c00

08001c84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b088      	sub	sp, #32
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a12      	ldr	r2, [pc, #72]	; (8001cec <HAL_TIM_MspPostInit+0x68>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d11e      	bne.n	8001ce4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <HAL_TIM_MspPostInit+0x6c>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a10      	ldr	r2, [pc, #64]	; (8001cf0 <HAL_TIM_MspPostInit+0x6c>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <HAL_TIM_MspPostInit+0x6c>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cc6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd8:	f107 030c 	add.w	r3, r7, #12
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4805      	ldr	r0, [pc, #20]	; (8001cf4 <HAL_TIM_MspPostInit+0x70>)
 8001ce0:	f000 ff46 	bl	8002b70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ce4:	bf00      	nop
 8001ce6:	3720      	adds	r7, #32
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40010000 	.word	0x40010000
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40020000 	.word	0x40020000

08001cf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	; 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a19      	ldr	r2, [pc, #100]	; (8001d7c <HAL_UART_MspInit+0x84>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d12b      	bne.n	8001d72 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <HAL_UART_MspInit+0x88>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	4a17      	ldr	r2, [pc, #92]	; (8001d80 <HAL_UART_MspInit+0x88>)
 8001d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d28:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <HAL_UART_MspInit+0x88>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <HAL_UART_MspInit+0x88>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a10      	ldr	r2, [pc, #64]	; (8001d80 <HAL_UART_MspInit+0x88>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <HAL_UART_MspInit+0x88>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d52:	230c      	movs	r3, #12
 8001d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d62:	2307      	movs	r3, #7
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4805      	ldr	r0, [pc, #20]	; (8001d84 <HAL_UART_MspInit+0x8c>)
 8001d6e:	f000 feff 	bl	8002b70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d72:	bf00      	nop
 8001d74:	3728      	adds	r7, #40	; 0x28
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40004400 	.word	0x40004400
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40020000 	.word	0x40020000

08001d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <NMI_Handler+0x4>

08001d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d92:	e7fe      	b.n	8001d92 <HardFault_Handler+0x4>

08001d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d98:	e7fe      	b.n	8001d98 <MemManage_Handler+0x4>

08001d9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d9e:	e7fe      	b.n	8001d9e <BusFault_Handler+0x4>

08001da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <UsageFault_Handler+0x4>

08001da6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dd4:	f000 fd9a 	bl	800290c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dd8:	bf00      	nop
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001de0:	4802      	ldr	r0, [pc, #8]	; (8001dec <TIM2_IRQHandler+0x10>)
 8001de2:	f001 ffe1 	bl	8003da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000084 	.word	0x20000084

08001df0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001df4:	4802      	ldr	r0, [pc, #8]	; (8001e00 <TIM3_IRQHandler+0x10>)
 8001df6:	f001 ffd7 	bl	8003da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	200000cc 	.word	0x200000cc

08001e04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <SystemInit+0x20>)
 8001e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e0e:	4a05      	ldr	r2, [pc, #20]	; (8001e24 <SystemInit+0x20>)
 8001e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e2c:	480d      	ldr	r0, [pc, #52]	; (8001e64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e2e:	490e      	ldr	r1, [pc, #56]	; (8001e68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e30:	4a0e      	ldr	r2, [pc, #56]	; (8001e6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e34:	e002      	b.n	8001e3c <LoopCopyDataInit>

08001e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3a:	3304      	adds	r3, #4

08001e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e40:	d3f9      	bcc.n	8001e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e42:	4a0b      	ldr	r2, [pc, #44]	; (8001e70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e44:	4c0b      	ldr	r4, [pc, #44]	; (8001e74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e48:	e001      	b.n	8001e4e <LoopFillZerobss>

08001e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e4c:	3204      	adds	r2, #4

08001e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e50:	d3fb      	bcc.n	8001e4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e52:	f7ff ffd7 	bl	8001e04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e56:	f003 f8c3 	bl	8004fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e5a:	f7ff fa0b 	bl	8001274 <main>
  bx  lr    
 8001e5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e68:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001e6c:	080050cc 	.word	0x080050cc
  ldr r2, =_sbss
 8001e70:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001e74:	2000047c 	.word	0x2000047c

08001e78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e78:	e7fe      	b.n	8001e78 <ADC_IRQHandler>

08001e7a <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b08b      	sub	sp, #44	; 0x2c
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	60f8      	str	r0, [r7, #12]
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	885b      	ldrh	r3, [r3, #2]
 8001ea2:	fb02 f303 	mul.w	r3, r2, r3
 8001ea6:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8001eac:	e013      	b.n	8001ed6 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	1d1a      	adds	r2, r3, #4
 8001eb2:	627a      	str	r2, [r7, #36]	; 0x24
 8001eb4:	ed93 7a00 	vldr	s14, [r3]
 8001eb8:	6a3b      	ldr	r3, [r7, #32]
 8001eba:	1d1a      	adds	r2, r3, #4
 8001ebc:	623a      	str	r2, [r7, #32]
 8001ebe:	edd3 7a00 	vldr	s15, [r3]
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	1d1a      	adds	r2, r3, #4
 8001ec6:	61fa      	str	r2, [r7, #28]
 8001ec8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ecc:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1e8      	bne.n	8001eae <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8001edc:	2300      	movs	r3, #0
 8001ede:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8001ee0:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	372c      	adds	r7, #44	; 0x2c
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	607b      	str	r3, [r7, #4]
 8001efa:	460b      	mov	r3, r1
 8001efc:	817b      	strh	r3, [r7, #10]
 8001efe:	4613      	mov	r3, r2
 8001f00:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	897a      	ldrh	r2, [r7, #10]
 8001f06:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	893a      	ldrh	r2, [r7, #8]
 8001f0c:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	605a      	str	r2, [r3, #4]
}
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b0bb      	sub	sp, #236	; 0xec
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	667b      	str	r3, [r7, #100]	; 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	663b      	str	r3, [r7, #96]	; 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	885b      	ldrh	r3, [r3, #2]
 8001f40:	65bb      	str	r3, [r7, #88]	; 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 8001f42:	f04f 0300 	mov.w	r3, #0
 8001f46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001f4a:	f04f 0300 	mov.w	r3, #0
 8001f4e:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 8001f50:	2300      	movs	r3, #0
 8001f52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 8001f56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f58:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 8001f5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f5e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8001f62:	e03b      	b.n	8001fdc <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 8001f64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001f66:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 8001f70:	e00c      	b.n	8001f8c <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 8001f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f76:	1d1a      	adds	r2, r3, #4
 8001f78:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
        j--;
 8001f82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f86:	3b01      	subs	r3, #1
 8001f88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 8001f8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1ee      	bne.n	8001f72 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 8001f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f98:	1d1a      	adds	r2, r3, #4
 8001f9a:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001f9e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001fa2:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 8001fa4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 8001fae:	e00c      	b.n	8001fca <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 8001fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fb4:	1d1a      	adds	r2, r3, #4
 8001fb6:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
        j--;
 8001fc0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 8001fca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1ee      	bne.n	8001fb0 <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 8001fd2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    while (rowCnt > 0U)
 8001fdc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1bf      	bne.n	8001f64 <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001fea:	e2c7      	b.n	800257c <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 8001fec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ff0:	653b      	str	r3, [r7, #80]	; 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	885b      	ldrh	r3, [r3, #2]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8002000:	fb01 f303 	mul.w	r3, r1, r3
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      pivot = *pTmp;
 800200c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      selectedRow = column;
 8002016:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800201a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800201e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002022:	3301      	adds	r3, #1
 8002024:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002028:	e02c      	b.n	8002084 <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	885b      	ldrh	r3, [r3, #2]
 8002032:	4619      	mov	r1, r3
 8002034:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002038:	fb03 f101 	mul.w	r1, r3, r1
 800203c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002040:	440b      	add	r3, r1
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
          newPivot = *pTmp;
 800204a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	657b      	str	r3, [r7, #84]	; 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 8002052:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002056:	eeb0 7ae7 	vabs.f32	s14, s15
 800205a:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800205e:	eef0 7ae7 	vabs.f32	s15, s15
 8002062:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206a:	dd06      	ble.n	800207a <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800206c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002070:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            pivot = newPivot;
 8002074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002076:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800207a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800207e:	3301      	adds	r3, #1
 8002080:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002084:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800208a:	429a      	cmp	r2, r3
 800208c:	d3cd      	bcc.n	800202a <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800208e:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002092:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800209a:	f000 809b 	beq.w	80021d4 <arm_mat_inverse_f32+0x2b4>
 800209e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80020a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020a6:	429a      	cmp	r2, r3
 80020a8:	f000 8094 	beq.w	80021d4 <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	885b      	ldrh	r3, [r3, #2]
 80020c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80020cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80020d0:	fb03 f202 	mul.w	r2, r3, r2
 80020d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80020e0:	4413      	add	r3, r2
 80020e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80020e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80020ec:	fb03 f202 	mul.w	r2, r3, r2
 80020f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80020fc:	4413      	add	r3, r2
 80020fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002102:	2300      	movs	r3, #0
 8002104:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002108:	e018      	b.n	800213c <arm_mat_inverse_f32+0x21c>
 800210a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	63bb      	str	r3, [r7, #56]	; 0x38
 8002112:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002116:	1d1a      	adds	r2, r3, #4
 8002118:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800211c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002120:	6812      	ldr	r2, [r2, #0]
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002128:	1d1a      	adds	r2, r3, #4
 800212a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800212e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002136:	3301      	adds	r3, #1
 8002138:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800213c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002142:	429a      	cmp	r2, r3
 8002144:	dbe1      	blt.n	800210a <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	885b      	ldrh	r3, [r3, #2]
 800215a:	647b      	str	r3, [r7, #68]	; 0x44
 800215c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800215e:	643b      	str	r3, [r7, #64]	; 0x40
 8002160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002162:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002164:	fb02 f303 	mul.w	r3, r2, r3
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800216e:	4413      	add	r3, r2
 8002170:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002176:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800217a:	fb02 f303 	mul.w	r3, r2, r3
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002184:	4413      	add	r3, r2
 8002186:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800218a:	2300      	movs	r3, #0
 800218c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002190:	e018      	b.n	80021c4 <arm_mat_inverse_f32+0x2a4>
 8002192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	63fb      	str	r3, [r7, #60]	; 0x3c
 800219a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800219e:	1d1a      	adds	r2, r3, #4
 80021a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80021a4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80021a8:	6812      	ldr	r2, [r2, #0]
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80021b0:	1d1a      	adds	r2, r3, #4
 80021b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80021b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80021be:	3301      	adds	r3, #1
 80021c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80021c4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80021c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021ca:	429a      	cmp	r2, r3
 80021cc:	dbe1      	blt.n	8002192 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 80021ce:	2301      	movs	r3, #1
 80021d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 80021d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d009      	beq.n	80021f0 <arm_mat_inverse_f32+0x2d0>
 80021dc:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80021e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e8:	d102      	bne.n	80021f0 <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 80021ea:	f06f 0304 	mvn.w	r3, #4
 80021ee:	e208      	b.n	8002602 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 80021f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021f4:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 80021f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021fc:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	885b      	ldrh	r3, [r3, #2]
 800220c:	637b      	str	r3, [r7, #52]	; 0x34
 800220e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002210:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	633b      	str	r3, [r7, #48]	; 0x30
 8002218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800221c:	fb03 f202 	mul.w	r2, r3, r2
 8002220:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002224:	4413      	add	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800222c:	4413      	add	r3, r2
 800222e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002232:	2300      	movs	r3, #0
 8002234:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002238:	e011      	b.n	800225e <arm_mat_inverse_f32+0x33e>
 800223a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800223e:	1d1a      	adds	r2, r3, #4
 8002240:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8002244:	ed93 7a00 	vldr	s14, [r3]
 8002248:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800224c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002250:	edc3 7a00 	vstr	s15, [r3]
 8002254:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002258:	3301      	adds	r3, #1
 800225a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800225e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002264:	429a      	cmp	r2, r3
 8002266:	dbe8      	blt.n	800223a <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	885b      	ldrh	r3, [r3, #2]
 8002274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002278:	62bb      	str	r3, [r7, #40]	; 0x28
 800227a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800227e:	fb02 f303 	mul.w	r3, r2, r3
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002288:	4413      	add	r3, r2
 800228a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800228e:	2300      	movs	r3, #0
 8002290:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002294:	e011      	b.n	80022ba <arm_mat_inverse_f32+0x39a>
 8002296:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800229a:	1d1a      	adds	r2, r3, #4
 800229c:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80022a0:	ed93 7a00 	vldr	s14, [r3]
 80022a4:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80022a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ac:	edc3 7a00 	vstr	s15, [r3]
 80022b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022b4:	3301      	adds	r3, #1
 80022b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80022ba:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80022be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c0:	429a      	cmp	r2, r3
 80022c2:	dbe8      	blt.n	8002296 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      for (;rowNb < pivotRow; rowNb++)
 80022ca:	e0ae      	b.n	800242a <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	885b      	ldrh	r3, [r3, #2]
 80022d4:	4619      	mov	r1, r3
 80022d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80022da:	fb03 f101 	mul.w	r1, r3, r1
 80022de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022e2:	440b      	add	r3, r1
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           pivot = *pTmp;
 80022ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	885b      	ldrh	r3, [r3, #2]
 800230a:	617b      	str	r3, [r7, #20]
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	613b      	str	r3, [r7, #16]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800231c:	fb03 f202 	mul.w	r2, r3, r2
 8002320:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002324:	4413      	add	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800232c:	4413      	add	r3, r2
 800232e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002336:	fb03 f202 	mul.w	r2, r3, r2
 800233a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800233e:	4413      	add	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002346:	4413      	add	r3, r2
 8002348:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800234c:	2300      	movs	r3, #0
 800234e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002352:	e01a      	b.n	800238a <arm_mat_inverse_f32+0x46a>
 8002354:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002358:	1d1a      	adds	r2, r3, #4
 800235a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800235e:	ed93 7a00 	vldr	s14, [r3]
 8002362:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800236a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800236e:	1d1a      	adds	r2, r3, #4
 8002370:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002374:	ed93 7a00 	vldr	s14, [r3]
 8002378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800237c:	edc3 7a00 	vstr	s15, [r3]
 8002380:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002384:	3301      	adds	r3, #1
 8002386:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800238a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	429a      	cmp	r2, r3
 8002392:	dbdf      	blt.n	8002354 <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	885b      	ldrh	r3, [r3, #2]
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80023b4:	fb02 f303 	mul.w	r3, r2, r3
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80023be:	4413      	add	r3, r2
 80023c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80023c8:	fb02 f303 	mul.w	r3, r2, r3
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80023d2:	4413      	add	r3, r2
 80023d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023d8:	2300      	movs	r3, #0
 80023da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80023de:	e01a      	b.n	8002416 <arm_mat_inverse_f32+0x4f6>
 80023e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023e4:	1d1a      	adds	r2, r3, #4
 80023e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80023ea:	ed93 7a00 	vldr	s14, [r3]
 80023ee:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80023f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023fa:	1d1a      	adds	r2, r3, #4
 80023fc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002400:	ed93 7a00 	vldr	s14, [r3]
 8002404:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002408:	edc3 7a00 	vstr	s15, [r3]
 800240c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002410:	3301      	adds	r3, #1
 8002412:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002416:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	429a      	cmp	r2, r3
 800241e:	dbdf      	blt.n	80023e0 <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 8002420:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002424:	3301      	adds	r3, #1
 8002426:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800242a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800242e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002430:	429a      	cmp	r2, r3
 8002432:	f4ff af4b 	bcc.w	80022cc <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8002436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002438:	3301      	adds	r3, #1
 800243a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800243e:	e092      	b.n	8002566 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	885b      	ldrh	r3, [r3, #2]
 8002448:	4619      	mov	r1, r3
 800244a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800244e:	fb03 f101 	mul.w	r1, r3, r1
 8002452:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002456:	440b      	add	r3, r1
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           pivot = *pTmp;
 8002460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	677b      	str	r3, [r7, #116]	; 0x74
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	885b      	ldrh	r3, [r3, #2]
 800247a:	627b      	str	r3, [r7, #36]	; 0x24
 800247c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800247e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	623b      	str	r3, [r7, #32]
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800248c:	fb03 f202 	mul.w	r2, r3, r2
 8002490:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002494:	4413      	add	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800249a:	4413      	add	r3, r2
 800249c:	67bb      	str	r3, [r7, #120]	; 0x78
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80024a2:	fb03 f202 	mul.w	r2, r3, r2
 80024a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80024b0:	4413      	add	r3, r2
 80024b2:	677b      	str	r3, [r7, #116]	; 0x74
 80024b4:	2300      	movs	r3, #0
 80024b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80024b8:	e014      	b.n	80024e4 <arm_mat_inverse_f32+0x5c4>
 80024ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024bc:	1d1a      	adds	r2, r3, #4
 80024be:	677a      	str	r2, [r7, #116]	; 0x74
 80024c0:	ed93 7a00 	vldr	s14, [r3]
 80024c4:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80024c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024ce:	1d1a      	adds	r2, r3, #4
 80024d0:	67ba      	str	r2, [r7, #120]	; 0x78
 80024d2:	ed93 7a00 	vldr	s14, [r3]
 80024d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024da:	edc3 7a00 	vstr	s15, [r3]
 80024de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024e0:	3301      	adds	r3, #1
 80024e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80024e4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	dbe6      	blt.n	80024ba <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	885b      	ldrh	r3, [r3, #2]
 80024fc:	61fb      	str	r3, [r7, #28]
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	61bb      	str	r3, [r7, #24]
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002508:	fb02 f303 	mul.w	r3, r2, r3
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002510:	4413      	add	r3, r2
 8002512:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002518:	fb02 f303 	mul.w	r3, r2, r3
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002520:	4413      	add	r3, r2
 8002522:	66bb      	str	r3, [r7, #104]	; 0x68
 8002524:	2300      	movs	r3, #0
 8002526:	673b      	str	r3, [r7, #112]	; 0x70
 8002528:	e014      	b.n	8002554 <arm_mat_inverse_f32+0x634>
 800252a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800252c:	1d1a      	adds	r2, r3, #4
 800252e:	66ba      	str	r2, [r7, #104]	; 0x68
 8002530:	ed93 7a00 	vldr	s14, [r3]
 8002534:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800253c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800253e:	1d1a      	adds	r2, r3, #4
 8002540:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002542:	ed93 7a00 	vldr	s14, [r3]
 8002546:	ee77 7a67 	vsub.f32	s15, s14, s15
 800254a:	edc3 7a00 	vstr	s15, [r3]
 800254e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002550:	3301      	adds	r3, #1
 8002552:	673b      	str	r3, [r7, #112]	; 0x70
 8002554:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	429a      	cmp	r2, r3
 800255a:	dbe6      	blt.n	800252a <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800255c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002560:	3301      	adds	r3, #1
 8002562:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002566:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800256a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800256c:	429a      	cmp	r2, r3
 800256e:	f4ff af67 	bcc.w	8002440 <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 8002572:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002576:	3301      	adds	r3, #1
 8002578:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800257c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002580:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002582:	429a      	cmp	r2, r3
 8002584:	f4ff ad32 	bcc.w	8001fec <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8002588:	2300      	movs	r3, #0
 800258a:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800258e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002592:	2b01      	cmp	r3, #1
 8002594:	d033      	beq.n	80025fe <arm_mat_inverse_f32+0x6de>
 8002596:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800259a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800259e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a2:	d12c      	bne.n	80025fe <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	667b      	str	r3, [r7, #100]	; 0x64
      for (i = 0; i < numRows * numCols; i++)
 80025aa:	2300      	movs	r3, #0
 80025ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80025b0:	e010      	b.n	80025d4 <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 80025b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80025ba:	4413      	add	r3, r2
 80025bc:	edd3 7a00 	vldr	s15, [r3]
 80025c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c8:	d10d      	bne.n	80025e6 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 80025ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025ce:	3301      	adds	r3, #1
 80025d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80025d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025d8:	fb02 f303 	mul.w	r3, r2, r3
 80025dc:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d3e6      	bcc.n	80025b2 <arm_mat_inverse_f32+0x692>
 80025e4:	e000      	b.n	80025e8 <arm_mat_inverse_f32+0x6c8>
            break;
 80025e6:	bf00      	nop
      }

      if (i == numRows * numCols)
 80025e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025ec:	fb02 f303 	mul.w	r3, r2, r3
 80025f0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d102      	bne.n	80025fe <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 80025f8:	23fb      	movs	r3, #251	; 0xfb
 80025fa:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
    }
  }

  /* Return to application */
  return (status);
 80025fe:	f997 30c3 	ldrsb.w	r3, [r7, #195]	; 0xc3
}
 8002602:	4618      	mov	r0, r3
 8002604:	37ec      	adds	r7, #236	; 0xec
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800260e:	b480      	push	{r7}
 8002610:	b093      	sub	sp, #76	; 0x4c
 8002612:	af00      	add	r7, sp, #0
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	643b      	str	r3, [r7, #64]	; 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	885b      	ldrh	r3, [r3, #2]
 8002642:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	885b      	ldrh	r3, [r3, #2]
 8002648:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800264a:	2300      	movs	r3, #0
 800264c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800264e:	8b7b      	ldrh	r3, [r7, #26]
 8002650:	62bb      	str	r3, [r7, #40]	; 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 8002652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	69fa      	ldr	r2, [r7, #28]
 8002658:	4413      	add	r3, r2
 800265a:	63bb      	str	r3, [r7, #56]	; 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800265c:	8b3b      	ldrh	r3, [r7, #24]
 800265e:	633b      	str	r3, [r7, #48]	; 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	643b      	str	r3, [r7, #64]	; 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8002666:	f04f 0300 	mov.w	r3, #0
 800266a:	637b      	str	r3, [r7, #52]	; 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800266c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800266e:	647b      	str	r3, [r7, #68]	; 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 8002670:	8afb      	ldrh	r3, [r7, #22]
 8002672:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 8002674:	e017      	b.n	80026a6 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 8002676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002678:	1d1a      	adds	r2, r3, #4
 800267a:	647a      	str	r2, [r7, #68]	; 0x44
 800267c:	ed93 7a00 	vldr	s14, [r3]
 8002680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002682:	edd3 7a00 	vldr	s15, [r3]
 8002686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800268a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800268e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002692:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
          pIn2 += numColsB;
 8002696:	8b3b      	ldrh	r3, [r7, #24]
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800269c:	4413      	add	r3, r2
 800269e:	643b      	str	r3, [r7, #64]	; 0x40

          /* Decrement loop counter */
          colCnt--;
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	3b01      	subs	r3, #1
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
        while (colCnt > 0U)
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1e4      	bne.n	8002676 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 80026ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ae:	1d1a      	adds	r2, r3, #4
 80026b0:	63ba      	str	r2, [r7, #56]	; 0x38
 80026b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026b4:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 80026b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b8:	3b01      	subs	r3, #1
 80026ba:	633b      	str	r3, [r7, #48]	; 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 80026bc:	8b3a      	ldrh	r2, [r7, #24]
 80026be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	6a3a      	ldr	r2, [r7, #32]
 80026c6:	4413      	add	r3, r2
 80026c8:	643b      	str	r3, [r7, #64]	; 0x40

      } while (col > 0U);
 80026ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1ca      	bne.n	8002666 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 80026d0:	8b3b      	ldrh	r3, [r7, #24]
 80026d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026d4:	4413      	add	r3, r2
 80026d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pInA = pInA + numColsA;
 80026d8:	8afb      	ldrh	r3, [r7, #22]
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026de:	4413      	add	r3, r2
 80026e0:	63fb      	str	r3, [r7, #60]	; 0x3c

      /* Decrement row loop counter */
      row--;
 80026e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e4:	3b01      	subs	r3, #1
 80026e6:	62bb      	str	r3, [r7, #40]	; 0x28

    } while (row > 0U);
 80026e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1b1      	bne.n	8002652 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80026ee:	2300      	movs	r3, #0
 80026f0:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 80026f2:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	374c      	adds	r7, #76	; 0x4c
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 8002702:	b480      	push	{r7}
 8002704:	b08b      	sub	sp, #44	; 0x2c
 8002706:	af00      	add	r7, sp, #0
 8002708:	60f8      	str	r0, [r7, #12]
 800270a:	ed87 0a02 	vstr	s0, [r7, #8]
 800270e:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	885b      	ldrh	r3, [r3, #2]
 8002726:	fb02 f303 	mul.w	r3, r2, r3
 800272a:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8002730:	e010      	b.n	8002754 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	1d1a      	adds	r2, r3, #4
 8002736:	627a      	str	r2, [r7, #36]	; 0x24
 8002738:	ed93 7a00 	vldr	s14, [r3]
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	1d1a      	adds	r2, r3, #4
 8002740:	623a      	str	r2, [r7, #32]
 8002742:	edd7 7a02 	vldr	s15, [r7, #8]
 8002746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800274a:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3b01      	subs	r3, #1
 8002752:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1eb      	bne.n	8002732 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800275a:	2300      	movs	r3, #0
 800275c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800275e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002762:	4618      	mov	r0, r3
 8002764:	372c      	adds	r7, #44	; 0x2c
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800276e:	b480      	push	{r7}
 8002770:	b08b      	sub	sp, #44	; 0x2c
 8002772:	af00      	add	r7, sp, #0
 8002774:	60f8      	str	r0, [r7, #12]
 8002776:	60b9      	str	r1, [r7, #8]
 8002778:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	461a      	mov	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	885b      	ldrh	r3, [r3, #2]
 8002796:	fb02 f303 	mul.w	r3, r2, r3
 800279a:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 80027a0:	e013      	b.n	80027ca <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	1d1a      	adds	r2, r3, #4
 80027a6:	627a      	str	r2, [r7, #36]	; 0x24
 80027a8:	ed93 7a00 	vldr	s14, [r3]
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	1d1a      	adds	r2, r3, #4
 80027b0:	623a      	str	r2, [r7, #32]
 80027b2:	edd3 7a00 	vldr	s15, [r3]
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	1d1a      	adds	r2, r3, #4
 80027ba:	61fa      	str	r2, [r7, #28]
 80027bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027c0:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1e8      	bne.n	80027a2 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80027d0:	2300      	movs	r3, #0
 80027d2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 80027d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	372c      	adds	r7, #44	; 0x2c
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b08b      	sub	sp, #44	; 0x2c
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	885b      	ldrh	r3, [r3, #2]
 8002804:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8002806:	89fb      	ldrh	r3, [r7, #14]
 8002808:	61bb      	str	r3, [r7, #24]
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4413      	add	r3, r2
 8002816:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8002818:	89bb      	ldrh	r3, [r7, #12]
 800281a:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800281c:	e00d      	b.n	800283a <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	1d1a      	adds	r2, r3, #4
 8002822:	627a      	str	r2, [r7, #36]	; 0x24
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800282a:	89fb      	ldrh	r3, [r7, #14]
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	6a3a      	ldr	r2, [r7, #32]
 8002830:	4413      	add	r3, r2
 8002832:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	3b01      	subs	r3, #1
 8002838:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1ee      	bne.n	800281e <arm_mat_trans_f32+0x3a>
      }

      i++;
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	3301      	adds	r3, #1
 8002844:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	3b01      	subs	r3, #1
 800284a:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1dd      	bne.n	800280e <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8002852:	2300      	movs	r3, #0
 8002854:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 8002856:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800285a:	4618      	mov	r0, r3
 800285c:	372c      	adds	r7, #44	; 0x2c
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
	...

08002868 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800286c:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <HAL_Init+0x40>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a0d      	ldr	r2, [pc, #52]	; (80028a8 <HAL_Init+0x40>)
 8002872:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002876:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002878:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <HAL_Init+0x40>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a0a      	ldr	r2, [pc, #40]	; (80028a8 <HAL_Init+0x40>)
 800287e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002882:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002884:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <HAL_Init+0x40>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a07      	ldr	r2, [pc, #28]	; (80028a8 <HAL_Init+0x40>)
 800288a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800288e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002890:	2003      	movs	r0, #3
 8002892:	f000 f92b 	bl	8002aec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002896:	2000      	movs	r0, #0
 8002898:	f000 f808 	bl	80028ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800289c:	f7ff f91c 	bl	8001ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40023c00 	.word	0x40023c00

080028ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028b4:	4b12      	ldr	r3, [pc, #72]	; (8002900 <HAL_InitTick+0x54>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4b12      	ldr	r3, [pc, #72]	; (8002904 <HAL_InitTick+0x58>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	4619      	mov	r1, r3
 80028be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 f943 	bl	8002b56 <HAL_SYSTICK_Config>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e00e      	b.n	80028f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b0f      	cmp	r3, #15
 80028de:	d80a      	bhi.n	80028f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028e0:	2200      	movs	r2, #0
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	f04f 30ff 	mov.w	r0, #4294967295
 80028e8:	f000 f90b 	bl	8002b02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028ec:	4a06      	ldr	r2, [pc, #24]	; (8002908 <HAL_InitTick+0x5c>)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	e000      	b.n	80028f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20000010 	.word	0x20000010
 8002904:	20000018 	.word	0x20000018
 8002908:	20000014 	.word	0x20000014

0800290c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002910:	4b06      	ldr	r3, [pc, #24]	; (800292c <HAL_IncTick+0x20>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	4b06      	ldr	r3, [pc, #24]	; (8002930 <HAL_IncTick+0x24>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4413      	add	r3, r2
 800291c:	4a04      	ldr	r2, [pc, #16]	; (8002930 <HAL_IncTick+0x24>)
 800291e:	6013      	str	r3, [r2, #0]
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	20000018 	.word	0x20000018
 8002930:	20000478 	.word	0x20000478

08002934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  return uwTick;
 8002938:	4b03      	ldr	r3, [pc, #12]	; (8002948 <HAL_GetTick+0x14>)
 800293a:	681b      	ldr	r3, [r3, #0]
}
 800293c:	4618      	mov	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	20000478 	.word	0x20000478

0800294c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800295c:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <__NVIC_SetPriorityGrouping+0x44>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002968:	4013      	ands	r3, r2
 800296a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800297c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800297e:	4a04      	ldr	r2, [pc, #16]	; (8002990 <__NVIC_SetPriorityGrouping+0x44>)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	60d3      	str	r3, [r2, #12]
}
 8002984:	bf00      	nop
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	e000ed00 	.word	0xe000ed00

08002994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002998:	4b04      	ldr	r3, [pc, #16]	; (80029ac <__NVIC_GetPriorityGrouping+0x18>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	0a1b      	lsrs	r3, r3, #8
 800299e:	f003 0307 	and.w	r3, r3, #7
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	e000ed00 	.word	0xe000ed00

080029b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	db0b      	blt.n	80029da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	f003 021f 	and.w	r2, r3, #31
 80029c8:	4907      	ldr	r1, [pc, #28]	; (80029e8 <__NVIC_EnableIRQ+0x38>)
 80029ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ce:	095b      	lsrs	r3, r3, #5
 80029d0:	2001      	movs	r0, #1
 80029d2:	fa00 f202 	lsl.w	r2, r0, r2
 80029d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	e000e100 	.word	0xe000e100

080029ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	6039      	str	r1, [r7, #0]
 80029f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	db0a      	blt.n	8002a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	490c      	ldr	r1, [pc, #48]	; (8002a38 <__NVIC_SetPriority+0x4c>)
 8002a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0a:	0112      	lsls	r2, r2, #4
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	440b      	add	r3, r1
 8002a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a14:	e00a      	b.n	8002a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	4908      	ldr	r1, [pc, #32]	; (8002a3c <__NVIC_SetPriority+0x50>)
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	3b04      	subs	r3, #4
 8002a24:	0112      	lsls	r2, r2, #4
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	440b      	add	r3, r1
 8002a2a:	761a      	strb	r2, [r3, #24]
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	e000e100 	.word	0xe000e100
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b089      	sub	sp, #36	; 0x24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f1c3 0307 	rsb	r3, r3, #7
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	bf28      	it	cs
 8002a5e:	2304      	movcs	r3, #4
 8002a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	3304      	adds	r3, #4
 8002a66:	2b06      	cmp	r3, #6
 8002a68:	d902      	bls.n	8002a70 <NVIC_EncodePriority+0x30>
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3b03      	subs	r3, #3
 8002a6e:	e000      	b.n	8002a72 <NVIC_EncodePriority+0x32>
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a74:	f04f 32ff 	mov.w	r2, #4294967295
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43da      	mvns	r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	401a      	ands	r2, r3
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a88:	f04f 31ff 	mov.w	r1, #4294967295
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a92:	43d9      	mvns	r1, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a98:	4313      	orrs	r3, r2
         );
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3724      	adds	r7, #36	; 0x24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ab8:	d301      	bcc.n	8002abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aba:	2301      	movs	r3, #1
 8002abc:	e00f      	b.n	8002ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002abe:	4a0a      	ldr	r2, [pc, #40]	; (8002ae8 <SysTick_Config+0x40>)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ac6:	210f      	movs	r1, #15
 8002ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8002acc:	f7ff ff8e 	bl	80029ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ad0:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <SysTick_Config+0x40>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ad6:	4b04      	ldr	r3, [pc, #16]	; (8002ae8 <SysTick_Config+0x40>)
 8002ad8:	2207      	movs	r2, #7
 8002ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	e000e010 	.word	0xe000e010

08002aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7ff ff29 	bl	800294c <__NVIC_SetPriorityGrouping>
}
 8002afa:	bf00      	nop
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b086      	sub	sp, #24
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	4603      	mov	r3, r0
 8002b0a:	60b9      	str	r1, [r7, #8]
 8002b0c:	607a      	str	r2, [r7, #4]
 8002b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b14:	f7ff ff3e 	bl	8002994 <__NVIC_GetPriorityGrouping>
 8002b18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	68b9      	ldr	r1, [r7, #8]
 8002b1e:	6978      	ldr	r0, [r7, #20]
 8002b20:	f7ff ff8e 	bl	8002a40 <NVIC_EncodePriority>
 8002b24:	4602      	mov	r2, r0
 8002b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff ff5d 	bl	80029ec <__NVIC_SetPriority>
}
 8002b32:	bf00      	nop
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	4603      	mov	r3, r0
 8002b42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ff31 	bl	80029b0 <__NVIC_EnableIRQ>
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7ff ffa2 	bl	8002aa8 <SysTick_Config>
 8002b64:	4603      	mov	r3, r0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b089      	sub	sp, #36	; 0x24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b86:	2300      	movs	r3, #0
 8002b88:	61fb      	str	r3, [r7, #28]
 8002b8a:	e159      	b.n	8002e40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	f040 8148 	bne.w	8002e3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d005      	beq.n	8002bc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d130      	bne.n	8002c24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	2203      	movs	r2, #3
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	091b      	lsrs	r3, r3, #4
 8002c0e:	f003 0201 	and.w	r2, r3, #1
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d017      	beq.n	8002c60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	2203      	movs	r2, #3
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	43db      	mvns	r3, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 0303 	and.w	r3, r3, #3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d123      	bne.n	8002cb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	08da      	lsrs	r2, r3, #3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3208      	adds	r2, #8
 8002c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	220f      	movs	r2, #15
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	08da      	lsrs	r2, r3, #3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3208      	adds	r2, #8
 8002cae:	69b9      	ldr	r1, [r7, #24]
 8002cb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 0203 	and.w	r2, r3, #3
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 80a2 	beq.w	8002e3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	4b57      	ldr	r3, [pc, #348]	; (8002e58 <HAL_GPIO_Init+0x2e8>)
 8002cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfe:	4a56      	ldr	r2, [pc, #344]	; (8002e58 <HAL_GPIO_Init+0x2e8>)
 8002d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d04:	6453      	str	r3, [r2, #68]	; 0x44
 8002d06:	4b54      	ldr	r3, [pc, #336]	; (8002e58 <HAL_GPIO_Init+0x2e8>)
 8002d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d12:	4a52      	ldr	r2, [pc, #328]	; (8002e5c <HAL_GPIO_Init+0x2ec>)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	089b      	lsrs	r3, r3, #2
 8002d18:	3302      	adds	r3, #2
 8002d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	220f      	movs	r2, #15
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4013      	ands	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a49      	ldr	r2, [pc, #292]	; (8002e60 <HAL_GPIO_Init+0x2f0>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d019      	beq.n	8002d72 <HAL_GPIO_Init+0x202>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a48      	ldr	r2, [pc, #288]	; (8002e64 <HAL_GPIO_Init+0x2f4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d013      	beq.n	8002d6e <HAL_GPIO_Init+0x1fe>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a47      	ldr	r2, [pc, #284]	; (8002e68 <HAL_GPIO_Init+0x2f8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d00d      	beq.n	8002d6a <HAL_GPIO_Init+0x1fa>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a46      	ldr	r2, [pc, #280]	; (8002e6c <HAL_GPIO_Init+0x2fc>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d007      	beq.n	8002d66 <HAL_GPIO_Init+0x1f6>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a45      	ldr	r2, [pc, #276]	; (8002e70 <HAL_GPIO_Init+0x300>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d101      	bne.n	8002d62 <HAL_GPIO_Init+0x1f2>
 8002d5e:	2304      	movs	r3, #4
 8002d60:	e008      	b.n	8002d74 <HAL_GPIO_Init+0x204>
 8002d62:	2307      	movs	r3, #7
 8002d64:	e006      	b.n	8002d74 <HAL_GPIO_Init+0x204>
 8002d66:	2303      	movs	r3, #3
 8002d68:	e004      	b.n	8002d74 <HAL_GPIO_Init+0x204>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e002      	b.n	8002d74 <HAL_GPIO_Init+0x204>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <HAL_GPIO_Init+0x204>
 8002d72:	2300      	movs	r3, #0
 8002d74:	69fa      	ldr	r2, [r7, #28]
 8002d76:	f002 0203 	and.w	r2, r2, #3
 8002d7a:	0092      	lsls	r2, r2, #2
 8002d7c:	4093      	lsls	r3, r2
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d84:	4935      	ldr	r1, [pc, #212]	; (8002e5c <HAL_GPIO_Init+0x2ec>)
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	089b      	lsrs	r3, r3, #2
 8002d8a:	3302      	adds	r3, #2
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d92:	4b38      	ldr	r3, [pc, #224]	; (8002e74 <HAL_GPIO_Init+0x304>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002db6:	4a2f      	ldr	r2, [pc, #188]	; (8002e74 <HAL_GPIO_Init+0x304>)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dbc:	4b2d      	ldr	r3, [pc, #180]	; (8002e74 <HAL_GPIO_Init+0x304>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002de0:	4a24      	ldr	r2, [pc, #144]	; (8002e74 <HAL_GPIO_Init+0x304>)
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002de6:	4b23      	ldr	r3, [pc, #140]	; (8002e74 <HAL_GPIO_Init+0x304>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	43db      	mvns	r3, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4013      	ands	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e0a:	4a1a      	ldr	r2, [pc, #104]	; (8002e74 <HAL_GPIO_Init+0x304>)
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e10:	4b18      	ldr	r3, [pc, #96]	; (8002e74 <HAL_GPIO_Init+0x304>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e34:	4a0f      	ldr	r2, [pc, #60]	; (8002e74 <HAL_GPIO_Init+0x304>)
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	61fb      	str	r3, [r7, #28]
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	2b0f      	cmp	r3, #15
 8002e44:	f67f aea2 	bls.w	8002b8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e48:	bf00      	nop
 8002e4a:	bf00      	nop
 8002e4c:	3724      	adds	r7, #36	; 0x24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	40013800 	.word	0x40013800
 8002e60:	40020000 	.word	0x40020000
 8002e64:	40020400 	.word	0x40020400
 8002e68:	40020800 	.word	0x40020800
 8002e6c:	40020c00 	.word	0x40020c00
 8002e70:	40021000 	.word	0x40021000
 8002e74:	40013c00 	.word	0x40013c00

08002e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	807b      	strh	r3, [r7, #2]
 8002e84:	4613      	mov	r3, r2
 8002e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e88:	787b      	ldrb	r3, [r7, #1]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e8e:	887a      	ldrh	r2, [r7, #2]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e94:	e003      	b.n	8002e9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e96:	887b      	ldrh	r3, [r7, #2]
 8002e98:	041a      	lsls	r2, r3, #16
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	619a      	str	r2, [r3, #24]
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
	...

08002eac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e267      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d075      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eca:	4b88      	ldr	r3, [pc, #544]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 030c 	and.w	r3, r3, #12
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d00c      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ed6:	4b85      	ldr	r3, [pc, #532]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ede:	2b08      	cmp	r3, #8
 8002ee0:	d112      	bne.n	8002f08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ee2:	4b82      	ldr	r3, [pc, #520]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eee:	d10b      	bne.n	8002f08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef0:	4b7e      	ldr	r3, [pc, #504]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d05b      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x108>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d157      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e242      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f10:	d106      	bne.n	8002f20 <HAL_RCC_OscConfig+0x74>
 8002f12:	4b76      	ldr	r3, [pc, #472]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a75      	ldr	r2, [pc, #468]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	e01d      	b.n	8002f5c <HAL_RCC_OscConfig+0xb0>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f28:	d10c      	bne.n	8002f44 <HAL_RCC_OscConfig+0x98>
 8002f2a:	4b70      	ldr	r3, [pc, #448]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a6f      	ldr	r2, [pc, #444]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	4b6d      	ldr	r3, [pc, #436]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a6c      	ldr	r2, [pc, #432]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	e00b      	b.n	8002f5c <HAL_RCC_OscConfig+0xb0>
 8002f44:	4b69      	ldr	r3, [pc, #420]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a68      	ldr	r2, [pc, #416]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f4e:	6013      	str	r3, [r2, #0]
 8002f50:	4b66      	ldr	r3, [pc, #408]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a65      	ldr	r2, [pc, #404]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d013      	beq.n	8002f8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f64:	f7ff fce6 	bl	8002934 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f6c:	f7ff fce2 	bl	8002934 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b64      	cmp	r3, #100	; 0x64
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e207      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7e:	4b5b      	ldr	r3, [pc, #364]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCC_OscConfig+0xc0>
 8002f8a:	e014      	b.n	8002fb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8c:	f7ff fcd2 	bl	8002934 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f94:	f7ff fcce 	bl	8002934 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b64      	cmp	r3, #100	; 0x64
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e1f3      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fa6:	4b51      	ldr	r3, [pc, #324]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f0      	bne.n	8002f94 <HAL_RCC_OscConfig+0xe8>
 8002fb2:	e000      	b.n	8002fb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d063      	beq.n	800308a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fc2:	4b4a      	ldr	r3, [pc, #296]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00b      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fce:	4b47      	ldr	r3, [pc, #284]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d11c      	bne.n	8003014 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fda:	4b44      	ldr	r3, [pc, #272]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d116      	bne.n	8003014 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe6:	4b41      	ldr	r3, [pc, #260]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d005      	beq.n	8002ffe <HAL_RCC_OscConfig+0x152>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d001      	beq.n	8002ffe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e1c7      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffe:	4b3b      	ldr	r3, [pc, #236]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4937      	ldr	r1, [pc, #220]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 800300e:	4313      	orrs	r3, r2
 8003010:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003012:	e03a      	b.n	800308a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d020      	beq.n	800305e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800301c:	4b34      	ldr	r3, [pc, #208]	; (80030f0 <HAL_RCC_OscConfig+0x244>)
 800301e:	2201      	movs	r2, #1
 8003020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003022:	f7ff fc87 	bl	8002934 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800302a:	f7ff fc83 	bl	8002934 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e1a8      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303c:	4b2b      	ldr	r3, [pc, #172]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0f0      	beq.n	800302a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003048:	4b28      	ldr	r3, [pc, #160]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4925      	ldr	r1, [pc, #148]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8003058:	4313      	orrs	r3, r2
 800305a:	600b      	str	r3, [r1, #0]
 800305c:	e015      	b.n	800308a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800305e:	4b24      	ldr	r3, [pc, #144]	; (80030f0 <HAL_RCC_OscConfig+0x244>)
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003064:	f7ff fc66 	bl	8002934 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800306c:	f7ff fc62 	bl	8002934 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e187      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800307e:	4b1b      	ldr	r3, [pc, #108]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b00      	cmp	r3, #0
 8003094:	d036      	beq.n	8003104 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d016      	beq.n	80030cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800309e:	4b15      	ldr	r3, [pc, #84]	; (80030f4 <HAL_RCC_OscConfig+0x248>)
 80030a0:	2201      	movs	r2, #1
 80030a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a4:	f7ff fc46 	bl	8002934 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ac:	f7ff fc42 	bl	8002934 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e167      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030be:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 80030c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0f0      	beq.n	80030ac <HAL_RCC_OscConfig+0x200>
 80030ca:	e01b      	b.n	8003104 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030cc:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <HAL_RCC_OscConfig+0x248>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d2:	f7ff fc2f 	bl	8002934 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d8:	e00e      	b.n	80030f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030da:	f7ff fc2b 	bl	8002934 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d907      	bls.n	80030f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e150      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
 80030ec:	40023800 	.word	0x40023800
 80030f0:	42470000 	.word	0x42470000
 80030f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f8:	4b88      	ldr	r3, [pc, #544]	; (800331c <HAL_RCC_OscConfig+0x470>)
 80030fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1ea      	bne.n	80030da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 8097 	beq.w	8003240 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003112:	2300      	movs	r3, #0
 8003114:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003116:	4b81      	ldr	r3, [pc, #516]	; (800331c <HAL_RCC_OscConfig+0x470>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10f      	bne.n	8003142 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	60bb      	str	r3, [r7, #8]
 8003126:	4b7d      	ldr	r3, [pc, #500]	; (800331c <HAL_RCC_OscConfig+0x470>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	4a7c      	ldr	r2, [pc, #496]	; (800331c <HAL_RCC_OscConfig+0x470>)
 800312c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003130:	6413      	str	r3, [r2, #64]	; 0x40
 8003132:	4b7a      	ldr	r3, [pc, #488]	; (800331c <HAL_RCC_OscConfig+0x470>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800313e:	2301      	movs	r3, #1
 8003140:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003142:	4b77      	ldr	r3, [pc, #476]	; (8003320 <HAL_RCC_OscConfig+0x474>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314a:	2b00      	cmp	r3, #0
 800314c:	d118      	bne.n	8003180 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800314e:	4b74      	ldr	r3, [pc, #464]	; (8003320 <HAL_RCC_OscConfig+0x474>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a73      	ldr	r2, [pc, #460]	; (8003320 <HAL_RCC_OscConfig+0x474>)
 8003154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003158:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800315a:	f7ff fbeb 	bl	8002934 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003162:	f7ff fbe7 	bl	8002934 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e10c      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003174:	4b6a      	ldr	r3, [pc, #424]	; (8003320 <HAL_RCC_OscConfig+0x474>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0f0      	beq.n	8003162 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d106      	bne.n	8003196 <HAL_RCC_OscConfig+0x2ea>
 8003188:	4b64      	ldr	r3, [pc, #400]	; (800331c <HAL_RCC_OscConfig+0x470>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318c:	4a63      	ldr	r2, [pc, #396]	; (800331c <HAL_RCC_OscConfig+0x470>)
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	6713      	str	r3, [r2, #112]	; 0x70
 8003194:	e01c      	b.n	80031d0 <HAL_RCC_OscConfig+0x324>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b05      	cmp	r3, #5
 800319c:	d10c      	bne.n	80031b8 <HAL_RCC_OscConfig+0x30c>
 800319e:	4b5f      	ldr	r3, [pc, #380]	; (800331c <HAL_RCC_OscConfig+0x470>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a2:	4a5e      	ldr	r2, [pc, #376]	; (800331c <HAL_RCC_OscConfig+0x470>)
 80031a4:	f043 0304 	orr.w	r3, r3, #4
 80031a8:	6713      	str	r3, [r2, #112]	; 0x70
 80031aa:	4b5c      	ldr	r3, [pc, #368]	; (800331c <HAL_RCC_OscConfig+0x470>)
 80031ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ae:	4a5b      	ldr	r2, [pc, #364]	; (800331c <HAL_RCC_OscConfig+0x470>)
 80031b0:	f043 0301 	orr.w	r3, r3, #1
 80031b4:	6713      	str	r3, [r2, #112]	; 0x70
 80031b6:	e00b      	b.n	80031d0 <HAL_RCC_OscConfig+0x324>
 80031b8:	4b58      	ldr	r3, [pc, #352]	; (800331c <HAL_RCC_OscConfig+0x470>)
 80031ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031bc:	4a57      	ldr	r2, [pc, #348]	; (800331c <HAL_RCC_OscConfig+0x470>)
 80031be:	f023 0301 	bic.w	r3, r3, #1
 80031c2:	6713      	str	r3, [r2, #112]	; 0x70
 80031c4:	4b55      	ldr	r3, [pc, #340]	; (800331c <HAL_RCC_OscConfig+0x470>)
 80031c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c8:	4a54      	ldr	r2, [pc, #336]	; (800331c <HAL_RCC_OscConfig+0x470>)
 80031ca:	f023 0304 	bic.w	r3, r3, #4
 80031ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d015      	beq.n	8003204 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d8:	f7ff fbac 	bl	8002934 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031de:	e00a      	b.n	80031f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e0:	f7ff fba8 	bl	8002934 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e0cb      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f6:	4b49      	ldr	r3, [pc, #292]	; (800331c <HAL_RCC_OscConfig+0x470>)
 80031f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0ee      	beq.n	80031e0 <HAL_RCC_OscConfig+0x334>
 8003202:	e014      	b.n	800322e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003204:	f7ff fb96 	bl	8002934 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800320a:	e00a      	b.n	8003222 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800320c:	f7ff fb92 	bl	8002934 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	f241 3288 	movw	r2, #5000	; 0x1388
 800321a:	4293      	cmp	r3, r2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e0b5      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003222:	4b3e      	ldr	r3, [pc, #248]	; (800331c <HAL_RCC_OscConfig+0x470>)
 8003224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1ee      	bne.n	800320c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800322e:	7dfb      	ldrb	r3, [r7, #23]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d105      	bne.n	8003240 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003234:	4b39      	ldr	r3, [pc, #228]	; (800331c <HAL_RCC_OscConfig+0x470>)
 8003236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003238:	4a38      	ldr	r2, [pc, #224]	; (800331c <HAL_RCC_OscConfig+0x470>)
 800323a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800323e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 80a1 	beq.w	800338c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800324a:	4b34      	ldr	r3, [pc, #208]	; (800331c <HAL_RCC_OscConfig+0x470>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
 8003252:	2b08      	cmp	r3, #8
 8003254:	d05c      	beq.n	8003310 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d141      	bne.n	80032e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325e:	4b31      	ldr	r3, [pc, #196]	; (8003324 <HAL_RCC_OscConfig+0x478>)
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003264:	f7ff fb66 	bl	8002934 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800326c:	f7ff fb62 	bl	8002934 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e087      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327e:	4b27      	ldr	r3, [pc, #156]	; (800331c <HAL_RCC_OscConfig+0x470>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f0      	bne.n	800326c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69da      	ldr	r2, [r3, #28]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	019b      	lsls	r3, r3, #6
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	085b      	lsrs	r3, r3, #1
 80032a2:	3b01      	subs	r3, #1
 80032a4:	041b      	lsls	r3, r3, #16
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ac:	061b      	lsls	r3, r3, #24
 80032ae:	491b      	ldr	r1, [pc, #108]	; (800331c <HAL_RCC_OscConfig+0x470>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032b4:	4b1b      	ldr	r3, [pc, #108]	; (8003324 <HAL_RCC_OscConfig+0x478>)
 80032b6:	2201      	movs	r2, #1
 80032b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ba:	f7ff fb3b 	bl	8002934 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c2:	f7ff fb37 	bl	8002934 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e05c      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d4:	4b11      	ldr	r3, [pc, #68]	; (800331c <HAL_RCC_OscConfig+0x470>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x416>
 80032e0:	e054      	b.n	800338c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e2:	4b10      	ldr	r3, [pc, #64]	; (8003324 <HAL_RCC_OscConfig+0x478>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e8:	f7ff fb24 	bl	8002934 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032f0:	f7ff fb20 	bl	8002934 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e045      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003302:	4b06      	ldr	r3, [pc, #24]	; (800331c <HAL_RCC_OscConfig+0x470>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f0      	bne.n	80032f0 <HAL_RCC_OscConfig+0x444>
 800330e:	e03d      	b.n	800338c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d107      	bne.n	8003328 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e038      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
 800331c:	40023800 	.word	0x40023800
 8003320:	40007000 	.word	0x40007000
 8003324:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003328:	4b1b      	ldr	r3, [pc, #108]	; (8003398 <HAL_RCC_OscConfig+0x4ec>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d028      	beq.n	8003388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003340:	429a      	cmp	r2, r3
 8003342:	d121      	bne.n	8003388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800334e:	429a      	cmp	r2, r3
 8003350:	d11a      	bne.n	8003388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003358:	4013      	ands	r3, r2
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800335e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003360:	4293      	cmp	r3, r2
 8003362:	d111      	bne.n	8003388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336e:	085b      	lsrs	r3, r3, #1
 8003370:	3b01      	subs	r3, #1
 8003372:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003374:	429a      	cmp	r2, r3
 8003376:	d107      	bne.n	8003388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003382:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003384:	429a      	cmp	r2, r3
 8003386:	d001      	beq.n	800338c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e000      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40023800 	.word	0x40023800

0800339c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e0cc      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033b0:	4b68      	ldr	r3, [pc, #416]	; (8003554 <HAL_RCC_ClockConfig+0x1b8>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d90c      	bls.n	80033d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033be:	4b65      	ldr	r3, [pc, #404]	; (8003554 <HAL_RCC_ClockConfig+0x1b8>)
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c6:	4b63      	ldr	r3, [pc, #396]	; (8003554 <HAL_RCC_ClockConfig+0x1b8>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0b8      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d020      	beq.n	8003426 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033f0:	4b59      	ldr	r3, [pc, #356]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	4a58      	ldr	r2, [pc, #352]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b00      	cmp	r3, #0
 8003406:	d005      	beq.n	8003414 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003408:	4b53      	ldr	r3, [pc, #332]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	4a52      	ldr	r2, [pc, #328]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003412:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003414:	4b50      	ldr	r3, [pc, #320]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	494d      	ldr	r1, [pc, #308]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 8003422:	4313      	orrs	r3, r2
 8003424:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d044      	beq.n	80034bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d107      	bne.n	800344a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343a:	4b47      	ldr	r3, [pc, #284]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d119      	bne.n	800347a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e07f      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b02      	cmp	r3, #2
 8003450:	d003      	beq.n	800345a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003456:	2b03      	cmp	r3, #3
 8003458:	d107      	bne.n	800346a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800345a:	4b3f      	ldr	r3, [pc, #252]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d109      	bne.n	800347a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e06f      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800346a:	4b3b      	ldr	r3, [pc, #236]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e067      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800347a:	4b37      	ldr	r3, [pc, #220]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f023 0203 	bic.w	r2, r3, #3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	4934      	ldr	r1, [pc, #208]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 8003488:	4313      	orrs	r3, r2
 800348a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800348c:	f7ff fa52 	bl	8002934 <HAL_GetTick>
 8003490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003492:	e00a      	b.n	80034aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003494:	f7ff fa4e 	bl	8002934 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e04f      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034aa:	4b2b      	ldr	r3, [pc, #172]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 020c 	and.w	r2, r3, #12
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d1eb      	bne.n	8003494 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034bc:	4b25      	ldr	r3, [pc, #148]	; (8003554 <HAL_RCC_ClockConfig+0x1b8>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d20c      	bcs.n	80034e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ca:	4b22      	ldr	r3, [pc, #136]	; (8003554 <HAL_RCC_ClockConfig+0x1b8>)
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d2:	4b20      	ldr	r3, [pc, #128]	; (8003554 <HAL_RCC_ClockConfig+0x1b8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d001      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e032      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d008      	beq.n	8003502 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034f0:	4b19      	ldr	r3, [pc, #100]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	4916      	ldr	r1, [pc, #88]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b00      	cmp	r3, #0
 800350c:	d009      	beq.n	8003522 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800350e:	4b12      	ldr	r3, [pc, #72]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	490e      	ldr	r1, [pc, #56]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	4313      	orrs	r3, r2
 8003520:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003522:	f000 f821 	bl	8003568 <HAL_RCC_GetSysClockFreq>
 8003526:	4602      	mov	r2, r0
 8003528:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	091b      	lsrs	r3, r3, #4
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	490a      	ldr	r1, [pc, #40]	; (800355c <HAL_RCC_ClockConfig+0x1c0>)
 8003534:	5ccb      	ldrb	r3, [r1, r3]
 8003536:	fa22 f303 	lsr.w	r3, r2, r3
 800353a:	4a09      	ldr	r2, [pc, #36]	; (8003560 <HAL_RCC_ClockConfig+0x1c4>)
 800353c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800353e:	4b09      	ldr	r3, [pc, #36]	; (8003564 <HAL_RCC_ClockConfig+0x1c8>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff f9b2 	bl	80028ac <HAL_InitTick>

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40023c00 	.word	0x40023c00
 8003558:	40023800 	.word	0x40023800
 800355c:	080050a4 	.word	0x080050a4
 8003560:	20000010 	.word	0x20000010
 8003564:	20000014 	.word	0x20000014

08003568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800356c:	b094      	sub	sp, #80	; 0x50
 800356e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	647b      	str	r3, [r7, #68]	; 0x44
 8003574:	2300      	movs	r3, #0
 8003576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003578:	2300      	movs	r3, #0
 800357a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003580:	4b79      	ldr	r3, [pc, #484]	; (8003768 <HAL_RCC_GetSysClockFreq+0x200>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 030c 	and.w	r3, r3, #12
 8003588:	2b08      	cmp	r3, #8
 800358a:	d00d      	beq.n	80035a8 <HAL_RCC_GetSysClockFreq+0x40>
 800358c:	2b08      	cmp	r3, #8
 800358e:	f200 80e1 	bhi.w	8003754 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <HAL_RCC_GetSysClockFreq+0x34>
 8003596:	2b04      	cmp	r3, #4
 8003598:	d003      	beq.n	80035a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800359a:	e0db      	b.n	8003754 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800359c:	4b73      	ldr	r3, [pc, #460]	; (800376c <HAL_RCC_GetSysClockFreq+0x204>)
 800359e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80035a0:	e0db      	b.n	800375a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035a2:	4b73      	ldr	r3, [pc, #460]	; (8003770 <HAL_RCC_GetSysClockFreq+0x208>)
 80035a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035a6:	e0d8      	b.n	800375a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035a8:	4b6f      	ldr	r3, [pc, #444]	; (8003768 <HAL_RCC_GetSysClockFreq+0x200>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035b2:	4b6d      	ldr	r3, [pc, #436]	; (8003768 <HAL_RCC_GetSysClockFreq+0x200>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d063      	beq.n	8003686 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035be:	4b6a      	ldr	r3, [pc, #424]	; (8003768 <HAL_RCC_GetSysClockFreq+0x200>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	099b      	lsrs	r3, r3, #6
 80035c4:	2200      	movs	r2, #0
 80035c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80035c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035d0:	633b      	str	r3, [r7, #48]	; 0x30
 80035d2:	2300      	movs	r3, #0
 80035d4:	637b      	str	r3, [r7, #52]	; 0x34
 80035d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035da:	4622      	mov	r2, r4
 80035dc:	462b      	mov	r3, r5
 80035de:	f04f 0000 	mov.w	r0, #0
 80035e2:	f04f 0100 	mov.w	r1, #0
 80035e6:	0159      	lsls	r1, r3, #5
 80035e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035ec:	0150      	lsls	r0, r2, #5
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4621      	mov	r1, r4
 80035f4:	1a51      	subs	r1, r2, r1
 80035f6:	6139      	str	r1, [r7, #16]
 80035f8:	4629      	mov	r1, r5
 80035fa:	eb63 0301 	sbc.w	r3, r3, r1
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800360c:	4659      	mov	r1, fp
 800360e:	018b      	lsls	r3, r1, #6
 8003610:	4651      	mov	r1, sl
 8003612:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003616:	4651      	mov	r1, sl
 8003618:	018a      	lsls	r2, r1, #6
 800361a:	4651      	mov	r1, sl
 800361c:	ebb2 0801 	subs.w	r8, r2, r1
 8003620:	4659      	mov	r1, fp
 8003622:	eb63 0901 	sbc.w	r9, r3, r1
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	f04f 0300 	mov.w	r3, #0
 800362e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003632:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003636:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800363a:	4690      	mov	r8, r2
 800363c:	4699      	mov	r9, r3
 800363e:	4623      	mov	r3, r4
 8003640:	eb18 0303 	adds.w	r3, r8, r3
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	462b      	mov	r3, r5
 8003648:	eb49 0303 	adc.w	r3, r9, r3
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	f04f 0300 	mov.w	r3, #0
 8003656:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800365a:	4629      	mov	r1, r5
 800365c:	024b      	lsls	r3, r1, #9
 800365e:	4621      	mov	r1, r4
 8003660:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003664:	4621      	mov	r1, r4
 8003666:	024a      	lsls	r2, r1, #9
 8003668:	4610      	mov	r0, r2
 800366a:	4619      	mov	r1, r3
 800366c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800366e:	2200      	movs	r2, #0
 8003670:	62bb      	str	r3, [r7, #40]	; 0x28
 8003672:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003674:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003678:	f7fd fada 	bl	8000c30 <__aeabi_uldivmod>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4613      	mov	r3, r2
 8003682:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003684:	e058      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003686:	4b38      	ldr	r3, [pc, #224]	; (8003768 <HAL_RCC_GetSysClockFreq+0x200>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	099b      	lsrs	r3, r3, #6
 800368c:	2200      	movs	r2, #0
 800368e:	4618      	mov	r0, r3
 8003690:	4611      	mov	r1, r2
 8003692:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003696:	623b      	str	r3, [r7, #32]
 8003698:	2300      	movs	r3, #0
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
 800369c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036a0:	4642      	mov	r2, r8
 80036a2:	464b      	mov	r3, r9
 80036a4:	f04f 0000 	mov.w	r0, #0
 80036a8:	f04f 0100 	mov.w	r1, #0
 80036ac:	0159      	lsls	r1, r3, #5
 80036ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036b2:	0150      	lsls	r0, r2, #5
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	4641      	mov	r1, r8
 80036ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80036be:	4649      	mov	r1, r9
 80036c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036d8:	ebb2 040a 	subs.w	r4, r2, sl
 80036dc:	eb63 050b 	sbc.w	r5, r3, fp
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	f04f 0300 	mov.w	r3, #0
 80036e8:	00eb      	lsls	r3, r5, #3
 80036ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036ee:	00e2      	lsls	r2, r4, #3
 80036f0:	4614      	mov	r4, r2
 80036f2:	461d      	mov	r5, r3
 80036f4:	4643      	mov	r3, r8
 80036f6:	18e3      	adds	r3, r4, r3
 80036f8:	603b      	str	r3, [r7, #0]
 80036fa:	464b      	mov	r3, r9
 80036fc:	eb45 0303 	adc.w	r3, r5, r3
 8003700:	607b      	str	r3, [r7, #4]
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800370e:	4629      	mov	r1, r5
 8003710:	028b      	lsls	r3, r1, #10
 8003712:	4621      	mov	r1, r4
 8003714:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003718:	4621      	mov	r1, r4
 800371a:	028a      	lsls	r2, r1, #10
 800371c:	4610      	mov	r0, r2
 800371e:	4619      	mov	r1, r3
 8003720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003722:	2200      	movs	r2, #0
 8003724:	61bb      	str	r3, [r7, #24]
 8003726:	61fa      	str	r2, [r7, #28]
 8003728:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800372c:	f7fd fa80 	bl	8000c30 <__aeabi_uldivmod>
 8003730:	4602      	mov	r2, r0
 8003732:	460b      	mov	r3, r1
 8003734:	4613      	mov	r3, r2
 8003736:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003738:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <HAL_RCC_GetSysClockFreq+0x200>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	0c1b      	lsrs	r3, r3, #16
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	3301      	adds	r3, #1
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003748:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800374a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800374c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003750:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003752:	e002      	b.n	800375a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003754:	4b05      	ldr	r3, [pc, #20]	; (800376c <HAL_RCC_GetSysClockFreq+0x204>)
 8003756:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003758:	bf00      	nop
    }
  }
  return sysclockfreq;
 800375a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800375c:	4618      	mov	r0, r3
 800375e:	3750      	adds	r7, #80	; 0x50
 8003760:	46bd      	mov	sp, r7
 8003762:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003766:	bf00      	nop
 8003768:	40023800 	.word	0x40023800
 800376c:	00f42400 	.word	0x00f42400
 8003770:	007a1200 	.word	0x007a1200

08003774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003778:	4b03      	ldr	r3, [pc, #12]	; (8003788 <HAL_RCC_GetHCLKFreq+0x14>)
 800377a:	681b      	ldr	r3, [r3, #0]
}
 800377c:	4618      	mov	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	20000010 	.word	0x20000010

0800378c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003790:	f7ff fff0 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 8003794:	4602      	mov	r2, r0
 8003796:	4b05      	ldr	r3, [pc, #20]	; (80037ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	0a9b      	lsrs	r3, r3, #10
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	4903      	ldr	r1, [pc, #12]	; (80037b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037a2:	5ccb      	ldrb	r3, [r1, r3]
 80037a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40023800 	.word	0x40023800
 80037b0:	080050b4 	.word	0x080050b4

080037b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037b8:	f7ff ffdc 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 80037bc:	4602      	mov	r2, r0
 80037be:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	0b5b      	lsrs	r3, r3, #13
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	4903      	ldr	r1, [pc, #12]	; (80037d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037ca:	5ccb      	ldrb	r3, [r1, r3]
 80037cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40023800 	.word	0x40023800
 80037d8:	080050b4 	.word	0x080050b4

080037dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e041      	b.n	8003872 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7fe fa00 	bl	8001c08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3304      	adds	r3, #4
 8003818:	4619      	mov	r1, r3
 800381a:	4610      	mov	r0, r2
 800381c:	f000 fd7e 	bl	800431c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b01      	cmp	r3, #1
 800388e:	d001      	beq.n	8003894 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e044      	b.n	800391e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0201 	orr.w	r2, r2, #1
 80038aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a1e      	ldr	r2, [pc, #120]	; (800392c <HAL_TIM_Base_Start_IT+0xb0>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d018      	beq.n	80038e8 <HAL_TIM_Base_Start_IT+0x6c>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038be:	d013      	beq.n	80038e8 <HAL_TIM_Base_Start_IT+0x6c>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a1a      	ldr	r2, [pc, #104]	; (8003930 <HAL_TIM_Base_Start_IT+0xb4>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00e      	beq.n	80038e8 <HAL_TIM_Base_Start_IT+0x6c>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a19      	ldr	r2, [pc, #100]	; (8003934 <HAL_TIM_Base_Start_IT+0xb8>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d009      	beq.n	80038e8 <HAL_TIM_Base_Start_IT+0x6c>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a17      	ldr	r2, [pc, #92]	; (8003938 <HAL_TIM_Base_Start_IT+0xbc>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d004      	beq.n	80038e8 <HAL_TIM_Base_Start_IT+0x6c>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a16      	ldr	r2, [pc, #88]	; (800393c <HAL_TIM_Base_Start_IT+0xc0>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d111      	bne.n	800390c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2b06      	cmp	r3, #6
 80038f8:	d010      	beq.n	800391c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f042 0201 	orr.w	r2, r2, #1
 8003908:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800390a:	e007      	b.n	800391c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0201 	orr.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	40010000 	.word	0x40010000
 8003930:	40000400 	.word	0x40000400
 8003934:	40000800 	.word	0x40000800
 8003938:	40000c00 	.word	0x40000c00
 800393c:	40014000 	.word	0x40014000

08003940 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e041      	b.n	80039d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d106      	bne.n	800396c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7fe f8de 	bl	8001b28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3304      	adds	r3, #4
 800397c:	4619      	mov	r1, r3
 800397e:	4610      	mov	r0, r2
 8003980:	f000 fccc 	bl	800431c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
	...

080039e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d109      	bne.n	8003a04 <HAL_TIM_PWM_Start+0x24>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	bf14      	ite	ne
 80039fc:	2301      	movne	r3, #1
 80039fe:	2300      	moveq	r3, #0
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	e022      	b.n	8003a4a <HAL_TIM_PWM_Start+0x6a>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d109      	bne.n	8003a1e <HAL_TIM_PWM_Start+0x3e>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	bf14      	ite	ne
 8003a16:	2301      	movne	r3, #1
 8003a18:	2300      	moveq	r3, #0
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	e015      	b.n	8003a4a <HAL_TIM_PWM_Start+0x6a>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d109      	bne.n	8003a38 <HAL_TIM_PWM_Start+0x58>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	bf14      	ite	ne
 8003a30:	2301      	movne	r3, #1
 8003a32:	2300      	moveq	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	e008      	b.n	8003a4a <HAL_TIM_PWM_Start+0x6a>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	bf14      	ite	ne
 8003a44:	2301      	movne	r3, #1
 8003a46:	2300      	moveq	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e068      	b.n	8003b24 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d104      	bne.n	8003a62 <HAL_TIM_PWM_Start+0x82>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a60:	e013      	b.n	8003a8a <HAL_TIM_PWM_Start+0xaa>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d104      	bne.n	8003a72 <HAL_TIM_PWM_Start+0x92>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a70:	e00b      	b.n	8003a8a <HAL_TIM_PWM_Start+0xaa>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d104      	bne.n	8003a82 <HAL_TIM_PWM_Start+0xa2>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a80:	e003      	b.n	8003a8a <HAL_TIM_PWM_Start+0xaa>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2202      	movs	r2, #2
 8003a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	6839      	ldr	r1, [r7, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 fee8 	bl	8004868 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a23      	ldr	r2, [pc, #140]	; (8003b2c <HAL_TIM_PWM_Start+0x14c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d107      	bne.n	8003ab2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ab0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a1d      	ldr	r2, [pc, #116]	; (8003b2c <HAL_TIM_PWM_Start+0x14c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d018      	beq.n	8003aee <HAL_TIM_PWM_Start+0x10e>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac4:	d013      	beq.n	8003aee <HAL_TIM_PWM_Start+0x10e>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a19      	ldr	r2, [pc, #100]	; (8003b30 <HAL_TIM_PWM_Start+0x150>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00e      	beq.n	8003aee <HAL_TIM_PWM_Start+0x10e>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a17      	ldr	r2, [pc, #92]	; (8003b34 <HAL_TIM_PWM_Start+0x154>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d009      	beq.n	8003aee <HAL_TIM_PWM_Start+0x10e>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a16      	ldr	r2, [pc, #88]	; (8003b38 <HAL_TIM_PWM_Start+0x158>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d004      	beq.n	8003aee <HAL_TIM_PWM_Start+0x10e>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a14      	ldr	r2, [pc, #80]	; (8003b3c <HAL_TIM_PWM_Start+0x15c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d111      	bne.n	8003b12 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2b06      	cmp	r3, #6
 8003afe:	d010      	beq.n	8003b22 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b10:	e007      	b.n	8003b22 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f042 0201 	orr.w	r2, r2, #1
 8003b20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40010000 	.word	0x40010000
 8003b30:	40000400 	.word	0x40000400
 8003b34:	40000800 	.word	0x40000800
 8003b38:	40000c00 	.word	0x40000c00
 8003b3c:	40014000 	.word	0x40014000

08003b40 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e097      	b.n	8003c84 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d106      	bne.n	8003b6e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7fd ffff 	bl	8001b6c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2202      	movs	r2, #2
 8003b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6812      	ldr	r2, [r2, #0]
 8003b80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b84:	f023 0307 	bic.w	r3, r3, #7
 8003b88:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3304      	adds	r3, #4
 8003b92:	4619      	mov	r1, r3
 8003b94:	4610      	mov	r0, r2
 8003b96:	f000 fbc1 	bl	800431c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc2:	f023 0303 	bic.w	r3, r3, #3
 8003bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	021b      	lsls	r3, r3, #8
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003be0:	f023 030c 	bic.w	r3, r3, #12
 8003be4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	68da      	ldr	r2, [r3, #12]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	021b      	lsls	r3, r3, #8
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	011a      	lsls	r2, r3, #4
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	031b      	lsls	r3, r3, #12
 8003c10:	4313      	orrs	r3, r2
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003c1e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003c26:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	4313      	orrs	r3, r2
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c9c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ca4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003cac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003cb4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d110      	bne.n	8003cde <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d102      	bne.n	8003cc8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003cc2:	7b7b      	ldrb	r3, [r7, #13]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d001      	beq.n	8003ccc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e069      	b.n	8003da0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cdc:	e031      	b.n	8003d42 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d110      	bne.n	8003d06 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ce4:	7bbb      	ldrb	r3, [r7, #14]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d102      	bne.n	8003cf0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003cea:	7b3b      	ldrb	r3, [r7, #12]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d001      	beq.n	8003cf4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e055      	b.n	8003da0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d04:	e01d      	b.n	8003d42 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d06:	7bfb      	ldrb	r3, [r7, #15]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d108      	bne.n	8003d1e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d0c:	7bbb      	ldrb	r3, [r7, #14]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d105      	bne.n	8003d1e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d12:	7b7b      	ldrb	r3, [r7, #13]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d102      	bne.n	8003d1e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d18:	7b3b      	ldrb	r3, [r7, #12]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d001      	beq.n	8003d22 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e03e      	b.n	8003da0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2202      	movs	r2, #2
 8003d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2202      	movs	r2, #2
 8003d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <HAL_TIM_Encoder_Start+0xc4>
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d008      	beq.n	8003d60 <HAL_TIM_Encoder_Start+0xd4>
 8003d4e:	e00f      	b.n	8003d70 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2201      	movs	r2, #1
 8003d56:	2100      	movs	r1, #0
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 fd85 	bl	8004868 <TIM_CCxChannelCmd>
      break;
 8003d5e:	e016      	b.n	8003d8e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2201      	movs	r2, #1
 8003d66:	2104      	movs	r1, #4
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fd7d 	bl	8004868 <TIM_CCxChannelCmd>
      break;
 8003d6e:	e00e      	b.n	8003d8e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2201      	movs	r2, #1
 8003d76:	2100      	movs	r1, #0
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 fd75 	bl	8004868 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2201      	movs	r2, #1
 8003d84:	2104      	movs	r1, #4
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 fd6e 	bl	8004868 <TIM_CCxChannelCmd>
      break;
 8003d8c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 0201 	orr.w	r2, r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d122      	bne.n	8003e04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d11b      	bne.n	8003e04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f06f 0202 	mvn.w	r2, #2
 8003dd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	f003 0303 	and.w	r3, r3, #3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 fa77 	bl	80042de <HAL_TIM_IC_CaptureCallback>
 8003df0:	e005      	b.n	8003dfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fa69 	bl	80042ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fa7a 	bl	80042f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	f003 0304 	and.w	r3, r3, #4
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d122      	bne.n	8003e58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d11b      	bne.n	8003e58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f06f 0204 	mvn.w	r2, #4
 8003e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 fa4d 	bl	80042de <HAL_TIM_IC_CaptureCallback>
 8003e44:	e005      	b.n	8003e52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 fa3f 	bl	80042ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 fa50 	bl	80042f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d122      	bne.n	8003eac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f003 0308 	and.w	r3, r3, #8
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d11b      	bne.n	8003eac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f06f 0208 	mvn.w	r2, #8
 8003e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2204      	movs	r2, #4
 8003e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 fa23 	bl	80042de <HAL_TIM_IC_CaptureCallback>
 8003e98:	e005      	b.n	8003ea6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 fa15 	bl	80042ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 fa26 	bl	80042f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f003 0310 	and.w	r3, r3, #16
 8003eb6:	2b10      	cmp	r3, #16
 8003eb8:	d122      	bne.n	8003f00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f003 0310 	and.w	r3, r3, #16
 8003ec4:	2b10      	cmp	r3, #16
 8003ec6:	d11b      	bne.n	8003f00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f06f 0210 	mvn.w	r2, #16
 8003ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2208      	movs	r2, #8
 8003ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f9f9 	bl	80042de <HAL_TIM_IC_CaptureCallback>
 8003eec:	e005      	b.n	8003efa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f9eb 	bl	80042ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 f9fc 	bl	80042f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d10e      	bne.n	8003f2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d107      	bne.n	8003f2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f06f 0201 	mvn.w	r2, #1
 8003f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7fd fd52 	bl	80019d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f36:	2b80      	cmp	r3, #128	; 0x80
 8003f38:	d10e      	bne.n	8003f58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f44:	2b80      	cmp	r3, #128	; 0x80
 8003f46:	d107      	bne.n	8003f58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fd78 	bl	8004a48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f62:	2b40      	cmp	r3, #64	; 0x40
 8003f64:	d10e      	bne.n	8003f84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f70:	2b40      	cmp	r3, #64	; 0x40
 8003f72:	d107      	bne.n	8003f84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f9c1 	bl	8004306 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	d10e      	bne.n	8003fb0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f003 0320 	and.w	r3, r3, #32
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d107      	bne.n	8003fb0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f06f 0220 	mvn.w	r2, #32
 8003fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fd42 	bl	8004a34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fb0:	bf00      	nop
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d101      	bne.n	8003fd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	e0ae      	b.n	8004134 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b0c      	cmp	r3, #12
 8003fe2:	f200 809f 	bhi.w	8004124 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003fe6:	a201      	add	r2, pc, #4	; (adr r2, 8003fec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fec:	08004021 	.word	0x08004021
 8003ff0:	08004125 	.word	0x08004125
 8003ff4:	08004125 	.word	0x08004125
 8003ff8:	08004125 	.word	0x08004125
 8003ffc:	08004061 	.word	0x08004061
 8004000:	08004125 	.word	0x08004125
 8004004:	08004125 	.word	0x08004125
 8004008:	08004125 	.word	0x08004125
 800400c:	080040a3 	.word	0x080040a3
 8004010:	08004125 	.word	0x08004125
 8004014:	08004125 	.word	0x08004125
 8004018:	08004125 	.word	0x08004125
 800401c:	080040e3 	.word	0x080040e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68b9      	ldr	r1, [r7, #8]
 8004026:	4618      	mov	r0, r3
 8004028:	f000 f9f8 	bl	800441c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699a      	ldr	r2, [r3, #24]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0208 	orr.w	r2, r2, #8
 800403a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699a      	ldr	r2, [r3, #24]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0204 	bic.w	r2, r2, #4
 800404a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6999      	ldr	r1, [r3, #24]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	691a      	ldr	r2, [r3, #16]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	619a      	str	r2, [r3, #24]
      break;
 800405e:	e064      	b.n	800412a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68b9      	ldr	r1, [r7, #8]
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fa3e 	bl	80044e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699a      	ldr	r2, [r3, #24]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800407a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800408a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6999      	ldr	r1, [r3, #24]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	021a      	lsls	r2, r3, #8
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	430a      	orrs	r2, r1
 800409e:	619a      	str	r2, [r3, #24]
      break;
 80040a0:	e043      	b.n	800412a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68b9      	ldr	r1, [r7, #8]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 fa89 	bl	80045c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69da      	ldr	r2, [r3, #28]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f042 0208 	orr.w	r2, r2, #8
 80040bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69da      	ldr	r2, [r3, #28]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0204 	bic.w	r2, r2, #4
 80040cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69d9      	ldr	r1, [r3, #28]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	61da      	str	r2, [r3, #28]
      break;
 80040e0:	e023      	b.n	800412a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68b9      	ldr	r1, [r7, #8]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 fad3 	bl	8004694 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69da      	ldr	r2, [r3, #28]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69da      	ldr	r2, [r3, #28]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800410c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	69d9      	ldr	r1, [r3, #28]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	021a      	lsls	r2, r3, #8
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	61da      	str	r2, [r3, #28]
      break;
 8004122:	e002      	b.n	800412a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	75fb      	strb	r3, [r7, #23]
      break;
 8004128:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004132:	7dfb      	ldrb	r3, [r7, #23]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004150:	2b01      	cmp	r3, #1
 8004152:	d101      	bne.n	8004158 <HAL_TIM_ConfigClockSource+0x1c>
 8004154:	2302      	movs	r3, #2
 8004156:	e0b4      	b.n	80042c2 <HAL_TIM_ConfigClockSource+0x186>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004176:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800417e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004190:	d03e      	beq.n	8004210 <HAL_TIM_ConfigClockSource+0xd4>
 8004192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004196:	f200 8087 	bhi.w	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
 800419a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800419e:	f000 8086 	beq.w	80042ae <HAL_TIM_ConfigClockSource+0x172>
 80041a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a6:	d87f      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
 80041a8:	2b70      	cmp	r3, #112	; 0x70
 80041aa:	d01a      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0xa6>
 80041ac:	2b70      	cmp	r3, #112	; 0x70
 80041ae:	d87b      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
 80041b0:	2b60      	cmp	r3, #96	; 0x60
 80041b2:	d050      	beq.n	8004256 <HAL_TIM_ConfigClockSource+0x11a>
 80041b4:	2b60      	cmp	r3, #96	; 0x60
 80041b6:	d877      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
 80041b8:	2b50      	cmp	r3, #80	; 0x50
 80041ba:	d03c      	beq.n	8004236 <HAL_TIM_ConfigClockSource+0xfa>
 80041bc:	2b50      	cmp	r3, #80	; 0x50
 80041be:	d873      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
 80041c0:	2b40      	cmp	r3, #64	; 0x40
 80041c2:	d058      	beq.n	8004276 <HAL_TIM_ConfigClockSource+0x13a>
 80041c4:	2b40      	cmp	r3, #64	; 0x40
 80041c6:	d86f      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
 80041c8:	2b30      	cmp	r3, #48	; 0x30
 80041ca:	d064      	beq.n	8004296 <HAL_TIM_ConfigClockSource+0x15a>
 80041cc:	2b30      	cmp	r3, #48	; 0x30
 80041ce:	d86b      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
 80041d0:	2b20      	cmp	r3, #32
 80041d2:	d060      	beq.n	8004296 <HAL_TIM_ConfigClockSource+0x15a>
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	d867      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d05c      	beq.n	8004296 <HAL_TIM_ConfigClockSource+0x15a>
 80041dc:	2b10      	cmp	r3, #16
 80041de:	d05a      	beq.n	8004296 <HAL_TIM_ConfigClockSource+0x15a>
 80041e0:	e062      	b.n	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6818      	ldr	r0, [r3, #0]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	6899      	ldr	r1, [r3, #8]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f000 fb19 	bl	8004828 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004204:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	609a      	str	r2, [r3, #8]
      break;
 800420e:	e04f      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6818      	ldr	r0, [r3, #0]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	6899      	ldr	r1, [r3, #8]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f000 fb02 	bl	8004828 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689a      	ldr	r2, [r3, #8]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004232:	609a      	str	r2, [r3, #8]
      break;
 8004234:	e03c      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6818      	ldr	r0, [r3, #0]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	6859      	ldr	r1, [r3, #4]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	461a      	mov	r2, r3
 8004244:	f000 fa76 	bl	8004734 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2150      	movs	r1, #80	; 0x50
 800424e:	4618      	mov	r0, r3
 8004250:	f000 facf 	bl	80047f2 <TIM_ITRx_SetConfig>
      break;
 8004254:	e02c      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6818      	ldr	r0, [r3, #0]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	6859      	ldr	r1, [r3, #4]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	461a      	mov	r2, r3
 8004264:	f000 fa95 	bl	8004792 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2160      	movs	r1, #96	; 0x60
 800426e:	4618      	mov	r0, r3
 8004270:	f000 fabf 	bl	80047f2 <TIM_ITRx_SetConfig>
      break;
 8004274:	e01c      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6818      	ldr	r0, [r3, #0]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	6859      	ldr	r1, [r3, #4]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	461a      	mov	r2, r3
 8004284:	f000 fa56 	bl	8004734 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2140      	movs	r1, #64	; 0x40
 800428e:	4618      	mov	r0, r3
 8004290:	f000 faaf 	bl	80047f2 <TIM_ITRx_SetConfig>
      break;
 8004294:	e00c      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4619      	mov	r1, r3
 80042a0:	4610      	mov	r0, r2
 80042a2:	f000 faa6 	bl	80047f2 <TIM_ITRx_SetConfig>
      break;
 80042a6:	e003      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	73fb      	strb	r3, [r7, #15]
      break;
 80042ac:	e000      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b083      	sub	sp, #12
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b083      	sub	sp, #12
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042fa:	bf00      	nop
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
	...

0800431c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a34      	ldr	r2, [pc, #208]	; (8004400 <TIM_Base_SetConfig+0xe4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d00f      	beq.n	8004354 <TIM_Base_SetConfig+0x38>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800433a:	d00b      	beq.n	8004354 <TIM_Base_SetConfig+0x38>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a31      	ldr	r2, [pc, #196]	; (8004404 <TIM_Base_SetConfig+0xe8>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d007      	beq.n	8004354 <TIM_Base_SetConfig+0x38>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a30      	ldr	r2, [pc, #192]	; (8004408 <TIM_Base_SetConfig+0xec>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d003      	beq.n	8004354 <TIM_Base_SetConfig+0x38>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a2f      	ldr	r2, [pc, #188]	; (800440c <TIM_Base_SetConfig+0xf0>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d108      	bne.n	8004366 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a25      	ldr	r2, [pc, #148]	; (8004400 <TIM_Base_SetConfig+0xe4>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d01b      	beq.n	80043a6 <TIM_Base_SetConfig+0x8a>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004374:	d017      	beq.n	80043a6 <TIM_Base_SetConfig+0x8a>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a22      	ldr	r2, [pc, #136]	; (8004404 <TIM_Base_SetConfig+0xe8>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d013      	beq.n	80043a6 <TIM_Base_SetConfig+0x8a>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a21      	ldr	r2, [pc, #132]	; (8004408 <TIM_Base_SetConfig+0xec>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d00f      	beq.n	80043a6 <TIM_Base_SetConfig+0x8a>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a20      	ldr	r2, [pc, #128]	; (800440c <TIM_Base_SetConfig+0xf0>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d00b      	beq.n	80043a6 <TIM_Base_SetConfig+0x8a>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a1f      	ldr	r2, [pc, #124]	; (8004410 <TIM_Base_SetConfig+0xf4>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d007      	beq.n	80043a6 <TIM_Base_SetConfig+0x8a>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a1e      	ldr	r2, [pc, #120]	; (8004414 <TIM_Base_SetConfig+0xf8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d003      	beq.n	80043a6 <TIM_Base_SetConfig+0x8a>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a1d      	ldr	r2, [pc, #116]	; (8004418 <TIM_Base_SetConfig+0xfc>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d108      	bne.n	80043b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a08      	ldr	r2, [pc, #32]	; (8004400 <TIM_Base_SetConfig+0xe4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d103      	bne.n	80043ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	691a      	ldr	r2, [r3, #16]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	615a      	str	r2, [r3, #20]
}
 80043f2:	bf00      	nop
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	40010000 	.word	0x40010000
 8004404:	40000400 	.word	0x40000400
 8004408:	40000800 	.word	0x40000800
 800440c:	40000c00 	.word	0x40000c00
 8004410:	40014000 	.word	0x40014000
 8004414:	40014400 	.word	0x40014400
 8004418:	40014800 	.word	0x40014800

0800441c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	f023 0201 	bic.w	r2, r3, #1
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800444a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f023 0303 	bic.w	r3, r3, #3
 8004452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	4313      	orrs	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f023 0302 	bic.w	r3, r3, #2
 8004464:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	4313      	orrs	r3, r2
 800446e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a1c      	ldr	r2, [pc, #112]	; (80044e4 <TIM_OC1_SetConfig+0xc8>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d10c      	bne.n	8004492 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f023 0308 	bic.w	r3, r3, #8
 800447e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	4313      	orrs	r3, r2
 8004488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f023 0304 	bic.w	r3, r3, #4
 8004490:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a13      	ldr	r2, [pc, #76]	; (80044e4 <TIM_OC1_SetConfig+0xc8>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d111      	bne.n	80044be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	621a      	str	r2, [r3, #32]
}
 80044d8:	bf00      	nop
 80044da:	371c      	adds	r7, #28
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	40010000 	.word	0x40010000

080044e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	f023 0210 	bic.w	r2, r3, #16
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800451e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	021b      	lsls	r3, r3, #8
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	4313      	orrs	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f023 0320 	bic.w	r3, r3, #32
 8004532:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	4313      	orrs	r3, r2
 800453e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a1e      	ldr	r2, [pc, #120]	; (80045bc <TIM_OC2_SetConfig+0xd4>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d10d      	bne.n	8004564 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800454e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	4313      	orrs	r3, r2
 800455a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004562:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a15      	ldr	r2, [pc, #84]	; (80045bc <TIM_OC2_SetConfig+0xd4>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d113      	bne.n	8004594 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004572:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800457a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	4313      	orrs	r3, r2
 8004586:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	4313      	orrs	r3, r2
 8004592:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	621a      	str	r2, [r3, #32]
}
 80045ae:	bf00      	nop
 80045b0:	371c      	adds	r7, #28
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	40010000 	.word	0x40010000

080045c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b087      	sub	sp, #28
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f023 0303 	bic.w	r3, r3, #3
 80045f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	4313      	orrs	r3, r2
 8004600:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004608:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	021b      	lsls	r3, r3, #8
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	4313      	orrs	r3, r2
 8004614:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a1d      	ldr	r2, [pc, #116]	; (8004690 <TIM_OC3_SetConfig+0xd0>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d10d      	bne.n	800463a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004624:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	021b      	lsls	r3, r3, #8
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	4313      	orrs	r3, r2
 8004630:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004638:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a14      	ldr	r2, [pc, #80]	; (8004690 <TIM_OC3_SetConfig+0xd0>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d113      	bne.n	800466a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004648:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004650:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	4313      	orrs	r3, r2
 800465c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	621a      	str	r2, [r3, #32]
}
 8004684:	bf00      	nop
 8004686:	371c      	adds	r7, #28
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	40010000 	.word	0x40010000

08004694 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004694:	b480      	push	{r7}
 8004696:	b087      	sub	sp, #28
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	021b      	lsls	r3, r3, #8
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	031b      	lsls	r3, r3, #12
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a10      	ldr	r2, [pc, #64]	; (8004730 <TIM_OC4_SetConfig+0x9c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d109      	bne.n	8004708 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	019b      	lsls	r3, r3, #6
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	4313      	orrs	r3, r2
 8004706:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	621a      	str	r2, [r3, #32]
}
 8004722:	bf00      	nop
 8004724:	371c      	adds	r7, #28
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	40010000 	.word	0x40010000

08004734 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	f023 0201 	bic.w	r2, r3, #1
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800475e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	4313      	orrs	r3, r2
 8004768:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f023 030a 	bic.w	r3, r3, #10
 8004770:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	4313      	orrs	r3, r2
 8004778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	621a      	str	r2, [r3, #32]
}
 8004786:	bf00      	nop
 8004788:	371c      	adds	r7, #28
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004792:	b480      	push	{r7}
 8004794:	b087      	sub	sp, #28
 8004796:	af00      	add	r7, sp, #0
 8004798:	60f8      	str	r0, [r7, #12]
 800479a:	60b9      	str	r1, [r7, #8]
 800479c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	f023 0210 	bic.w	r2, r3, #16
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	031b      	lsls	r3, r3, #12
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	621a      	str	r2, [r3, #32]
}
 80047e6:	bf00      	nop
 80047e8:	371c      	adds	r7, #28
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b085      	sub	sp, #20
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004808:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4313      	orrs	r3, r2
 8004810:	f043 0307 	orr.w	r3, r3, #7
 8004814:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	609a      	str	r2, [r3, #8]
}
 800481c:	bf00      	nop
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004828:	b480      	push	{r7}
 800482a:	b087      	sub	sp, #28
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
 8004834:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004842:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	021a      	lsls	r2, r3, #8
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	431a      	orrs	r2, r3
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	4313      	orrs	r3, r2
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	4313      	orrs	r3, r2
 8004854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	609a      	str	r2, [r3, #8]
}
 800485c:	bf00      	nop
 800485e:	371c      	adds	r7, #28
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f003 031f 	and.w	r3, r3, #31
 800487a:	2201      	movs	r2, #1
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a1a      	ldr	r2, [r3, #32]
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	43db      	mvns	r3, r3
 800488a:	401a      	ands	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a1a      	ldr	r2, [r3, #32]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f003 031f 	and.w	r3, r3, #31
 800489a:	6879      	ldr	r1, [r7, #4]
 800489c:	fa01 f303 	lsl.w	r3, r1, r3
 80048a0:	431a      	orrs	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	621a      	str	r2, [r3, #32]
}
 80048a6:	bf00      	nop
 80048a8:	371c      	adds	r7, #28
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
	...

080048b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d101      	bne.n	80048cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048c8:	2302      	movs	r3, #2
 80048ca:	e050      	b.n	800496e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a1c      	ldr	r2, [pc, #112]	; (800497c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d018      	beq.n	8004942 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004918:	d013      	beq.n	8004942 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a18      	ldr	r2, [pc, #96]	; (8004980 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d00e      	beq.n	8004942 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a16      	ldr	r2, [pc, #88]	; (8004984 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d009      	beq.n	8004942 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a15      	ldr	r2, [pc, #84]	; (8004988 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d004      	beq.n	8004942 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a13      	ldr	r2, [pc, #76]	; (800498c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d10c      	bne.n	800495c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004948:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	4313      	orrs	r3, r2
 8004952:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	40010000 	.word	0x40010000
 8004980:	40000400 	.word	0x40000400
 8004984:	40000800 	.word	0x40000800
 8004988:	40000c00 	.word	0x40000c00
 800498c:	40014000 	.word	0x40014000

08004990 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800499a:	2300      	movs	r3, #0
 800499c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d101      	bne.n	80049ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80049a8:	2302      	movs	r3, #2
 80049aa:	e03d      	b.n	8004a28 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	4313      	orrs	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	4313      	orrs	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e03f      	b.n	8004aee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d106      	bne.n	8004a88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fd f938 	bl	8001cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2224      	movs	r2, #36	; 0x24
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f829 	bl	8004af8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	691a      	ldr	r2, [r3, #16]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ab4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	695a      	ldr	r2, [r3, #20]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ac4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68da      	ldr	r2, [r3, #12]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ad4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
	...

08004af8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004afc:	b0c0      	sub	sp, #256	; 0x100
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b14:	68d9      	ldr	r1, [r3, #12]
 8004b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	ea40 0301 	orr.w	r3, r0, r1
 8004b20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	431a      	orrs	r2, r3
 8004b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b50:	f021 010c 	bic.w	r1, r1, #12
 8004b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b5e:	430b      	orrs	r3, r1
 8004b60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b72:	6999      	ldr	r1, [r3, #24]
 8004b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	ea40 0301 	orr.w	r3, r0, r1
 8004b7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	4b8f      	ldr	r3, [pc, #572]	; (8004dc4 <UART_SetConfig+0x2cc>)
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d005      	beq.n	8004b98 <UART_SetConfig+0xa0>
 8004b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	4b8d      	ldr	r3, [pc, #564]	; (8004dc8 <UART_SetConfig+0x2d0>)
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d104      	bne.n	8004ba2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b98:	f7fe fe0c 	bl	80037b4 <HAL_RCC_GetPCLK2Freq>
 8004b9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ba0:	e003      	b.n	8004baa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ba2:	f7fe fdf3 	bl	800378c <HAL_RCC_GetPCLK1Freq>
 8004ba6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bb4:	f040 810c 	bne.w	8004dd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004bc2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004bc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004bca:	4622      	mov	r2, r4
 8004bcc:	462b      	mov	r3, r5
 8004bce:	1891      	adds	r1, r2, r2
 8004bd0:	65b9      	str	r1, [r7, #88]	; 0x58
 8004bd2:	415b      	adcs	r3, r3
 8004bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004bda:	4621      	mov	r1, r4
 8004bdc:	eb12 0801 	adds.w	r8, r2, r1
 8004be0:	4629      	mov	r1, r5
 8004be2:	eb43 0901 	adc.w	r9, r3, r1
 8004be6:	f04f 0200 	mov.w	r2, #0
 8004bea:	f04f 0300 	mov.w	r3, #0
 8004bee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bfa:	4690      	mov	r8, r2
 8004bfc:	4699      	mov	r9, r3
 8004bfe:	4623      	mov	r3, r4
 8004c00:	eb18 0303 	adds.w	r3, r8, r3
 8004c04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c08:	462b      	mov	r3, r5
 8004c0a:	eb49 0303 	adc.w	r3, r9, r3
 8004c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c1e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c26:	460b      	mov	r3, r1
 8004c28:	18db      	adds	r3, r3, r3
 8004c2a:	653b      	str	r3, [r7, #80]	; 0x50
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	eb42 0303 	adc.w	r3, r2, r3
 8004c32:	657b      	str	r3, [r7, #84]	; 0x54
 8004c34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c3c:	f7fb fff8 	bl	8000c30 <__aeabi_uldivmod>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	4b61      	ldr	r3, [pc, #388]	; (8004dcc <UART_SetConfig+0x2d4>)
 8004c46:	fba3 2302 	umull	r2, r3, r3, r2
 8004c4a:	095b      	lsrs	r3, r3, #5
 8004c4c:	011c      	lsls	r4, r3, #4
 8004c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c52:	2200      	movs	r2, #0
 8004c54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c58:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c60:	4642      	mov	r2, r8
 8004c62:	464b      	mov	r3, r9
 8004c64:	1891      	adds	r1, r2, r2
 8004c66:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c68:	415b      	adcs	r3, r3
 8004c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c70:	4641      	mov	r1, r8
 8004c72:	eb12 0a01 	adds.w	sl, r2, r1
 8004c76:	4649      	mov	r1, r9
 8004c78:	eb43 0b01 	adc.w	fp, r3, r1
 8004c7c:	f04f 0200 	mov.w	r2, #0
 8004c80:	f04f 0300 	mov.w	r3, #0
 8004c84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c90:	4692      	mov	sl, r2
 8004c92:	469b      	mov	fp, r3
 8004c94:	4643      	mov	r3, r8
 8004c96:	eb1a 0303 	adds.w	r3, sl, r3
 8004c9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c9e:	464b      	mov	r3, r9
 8004ca0:	eb4b 0303 	adc.w	r3, fp, r3
 8004ca4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cb4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004cb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	18db      	adds	r3, r3, r3
 8004cc0:	643b      	str	r3, [r7, #64]	; 0x40
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	eb42 0303 	adc.w	r3, r2, r3
 8004cc8:	647b      	str	r3, [r7, #68]	; 0x44
 8004cca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004cce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004cd2:	f7fb ffad 	bl	8000c30 <__aeabi_uldivmod>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	460b      	mov	r3, r1
 8004cda:	4611      	mov	r1, r2
 8004cdc:	4b3b      	ldr	r3, [pc, #236]	; (8004dcc <UART_SetConfig+0x2d4>)
 8004cde:	fba3 2301 	umull	r2, r3, r3, r1
 8004ce2:	095b      	lsrs	r3, r3, #5
 8004ce4:	2264      	movs	r2, #100	; 0x64
 8004ce6:	fb02 f303 	mul.w	r3, r2, r3
 8004cea:	1acb      	subs	r3, r1, r3
 8004cec:	00db      	lsls	r3, r3, #3
 8004cee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004cf2:	4b36      	ldr	r3, [pc, #216]	; (8004dcc <UART_SetConfig+0x2d4>)
 8004cf4:	fba3 2302 	umull	r2, r3, r3, r2
 8004cf8:	095b      	lsrs	r3, r3, #5
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d00:	441c      	add	r4, r3
 8004d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d06:	2200      	movs	r2, #0
 8004d08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d0c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004d10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004d14:	4642      	mov	r2, r8
 8004d16:	464b      	mov	r3, r9
 8004d18:	1891      	adds	r1, r2, r2
 8004d1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d1c:	415b      	adcs	r3, r3
 8004d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d24:	4641      	mov	r1, r8
 8004d26:	1851      	adds	r1, r2, r1
 8004d28:	6339      	str	r1, [r7, #48]	; 0x30
 8004d2a:	4649      	mov	r1, r9
 8004d2c:	414b      	adcs	r3, r1
 8004d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d3c:	4659      	mov	r1, fp
 8004d3e:	00cb      	lsls	r3, r1, #3
 8004d40:	4651      	mov	r1, sl
 8004d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d46:	4651      	mov	r1, sl
 8004d48:	00ca      	lsls	r2, r1, #3
 8004d4a:	4610      	mov	r0, r2
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	4603      	mov	r3, r0
 8004d50:	4642      	mov	r2, r8
 8004d52:	189b      	adds	r3, r3, r2
 8004d54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d58:	464b      	mov	r3, r9
 8004d5a:	460a      	mov	r2, r1
 8004d5c:	eb42 0303 	adc.w	r3, r2, r3
 8004d60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d70:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d78:	460b      	mov	r3, r1
 8004d7a:	18db      	adds	r3, r3, r3
 8004d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d7e:	4613      	mov	r3, r2
 8004d80:	eb42 0303 	adc.w	r3, r2, r3
 8004d84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d8e:	f7fb ff4f 	bl	8000c30 <__aeabi_uldivmod>
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	4b0d      	ldr	r3, [pc, #52]	; (8004dcc <UART_SetConfig+0x2d4>)
 8004d98:	fba3 1302 	umull	r1, r3, r3, r2
 8004d9c:	095b      	lsrs	r3, r3, #5
 8004d9e:	2164      	movs	r1, #100	; 0x64
 8004da0:	fb01 f303 	mul.w	r3, r1, r3
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	3332      	adds	r3, #50	; 0x32
 8004daa:	4a08      	ldr	r2, [pc, #32]	; (8004dcc <UART_SetConfig+0x2d4>)
 8004dac:	fba2 2303 	umull	r2, r3, r2, r3
 8004db0:	095b      	lsrs	r3, r3, #5
 8004db2:	f003 0207 	and.w	r2, r3, #7
 8004db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4422      	add	r2, r4
 8004dbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004dc0:	e105      	b.n	8004fce <UART_SetConfig+0x4d6>
 8004dc2:	bf00      	nop
 8004dc4:	40011000 	.word	0x40011000
 8004dc8:	40011400 	.word	0x40011400
 8004dcc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004dd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004dda:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004dde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004de2:	4642      	mov	r2, r8
 8004de4:	464b      	mov	r3, r9
 8004de6:	1891      	adds	r1, r2, r2
 8004de8:	6239      	str	r1, [r7, #32]
 8004dea:	415b      	adcs	r3, r3
 8004dec:	627b      	str	r3, [r7, #36]	; 0x24
 8004dee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004df2:	4641      	mov	r1, r8
 8004df4:	1854      	adds	r4, r2, r1
 8004df6:	4649      	mov	r1, r9
 8004df8:	eb43 0501 	adc.w	r5, r3, r1
 8004dfc:	f04f 0200 	mov.w	r2, #0
 8004e00:	f04f 0300 	mov.w	r3, #0
 8004e04:	00eb      	lsls	r3, r5, #3
 8004e06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e0a:	00e2      	lsls	r2, r4, #3
 8004e0c:	4614      	mov	r4, r2
 8004e0e:	461d      	mov	r5, r3
 8004e10:	4643      	mov	r3, r8
 8004e12:	18e3      	adds	r3, r4, r3
 8004e14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e18:	464b      	mov	r3, r9
 8004e1a:	eb45 0303 	adc.w	r3, r5, r3
 8004e1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e32:	f04f 0200 	mov.w	r2, #0
 8004e36:	f04f 0300 	mov.w	r3, #0
 8004e3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e3e:	4629      	mov	r1, r5
 8004e40:	008b      	lsls	r3, r1, #2
 8004e42:	4621      	mov	r1, r4
 8004e44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e48:	4621      	mov	r1, r4
 8004e4a:	008a      	lsls	r2, r1, #2
 8004e4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e50:	f7fb feee 	bl	8000c30 <__aeabi_uldivmod>
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	4b60      	ldr	r3, [pc, #384]	; (8004fdc <UART_SetConfig+0x4e4>)
 8004e5a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e5e:	095b      	lsrs	r3, r3, #5
 8004e60:	011c      	lsls	r4, r3, #4
 8004e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e66:	2200      	movs	r2, #0
 8004e68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e74:	4642      	mov	r2, r8
 8004e76:	464b      	mov	r3, r9
 8004e78:	1891      	adds	r1, r2, r2
 8004e7a:	61b9      	str	r1, [r7, #24]
 8004e7c:	415b      	adcs	r3, r3
 8004e7e:	61fb      	str	r3, [r7, #28]
 8004e80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e84:	4641      	mov	r1, r8
 8004e86:	1851      	adds	r1, r2, r1
 8004e88:	6139      	str	r1, [r7, #16]
 8004e8a:	4649      	mov	r1, r9
 8004e8c:	414b      	adcs	r3, r1
 8004e8e:	617b      	str	r3, [r7, #20]
 8004e90:	f04f 0200 	mov.w	r2, #0
 8004e94:	f04f 0300 	mov.w	r3, #0
 8004e98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e9c:	4659      	mov	r1, fp
 8004e9e:	00cb      	lsls	r3, r1, #3
 8004ea0:	4651      	mov	r1, sl
 8004ea2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ea6:	4651      	mov	r1, sl
 8004ea8:	00ca      	lsls	r2, r1, #3
 8004eaa:	4610      	mov	r0, r2
 8004eac:	4619      	mov	r1, r3
 8004eae:	4603      	mov	r3, r0
 8004eb0:	4642      	mov	r2, r8
 8004eb2:	189b      	adds	r3, r3, r2
 8004eb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004eb8:	464b      	mov	r3, r9
 8004eba:	460a      	mov	r2, r1
 8004ebc:	eb42 0303 	adc.w	r3, r2, r3
 8004ec0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ece:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ed0:	f04f 0200 	mov.w	r2, #0
 8004ed4:	f04f 0300 	mov.w	r3, #0
 8004ed8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004edc:	4649      	mov	r1, r9
 8004ede:	008b      	lsls	r3, r1, #2
 8004ee0:	4641      	mov	r1, r8
 8004ee2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ee6:	4641      	mov	r1, r8
 8004ee8:	008a      	lsls	r2, r1, #2
 8004eea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004eee:	f7fb fe9f 	bl	8000c30 <__aeabi_uldivmod>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	4b39      	ldr	r3, [pc, #228]	; (8004fdc <UART_SetConfig+0x4e4>)
 8004ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8004efc:	095b      	lsrs	r3, r3, #5
 8004efe:	2164      	movs	r1, #100	; 0x64
 8004f00:	fb01 f303 	mul.w	r3, r1, r3
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	011b      	lsls	r3, r3, #4
 8004f08:	3332      	adds	r3, #50	; 0x32
 8004f0a:	4a34      	ldr	r2, [pc, #208]	; (8004fdc <UART_SetConfig+0x4e4>)
 8004f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f10:	095b      	lsrs	r3, r3, #5
 8004f12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f16:	441c      	add	r4, r3
 8004f18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	673b      	str	r3, [r7, #112]	; 0x70
 8004f20:	677a      	str	r2, [r7, #116]	; 0x74
 8004f22:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f26:	4642      	mov	r2, r8
 8004f28:	464b      	mov	r3, r9
 8004f2a:	1891      	adds	r1, r2, r2
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	415b      	adcs	r3, r3
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f36:	4641      	mov	r1, r8
 8004f38:	1851      	adds	r1, r2, r1
 8004f3a:	6039      	str	r1, [r7, #0]
 8004f3c:	4649      	mov	r1, r9
 8004f3e:	414b      	adcs	r3, r1
 8004f40:	607b      	str	r3, [r7, #4]
 8004f42:	f04f 0200 	mov.w	r2, #0
 8004f46:	f04f 0300 	mov.w	r3, #0
 8004f4a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f4e:	4659      	mov	r1, fp
 8004f50:	00cb      	lsls	r3, r1, #3
 8004f52:	4651      	mov	r1, sl
 8004f54:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f58:	4651      	mov	r1, sl
 8004f5a:	00ca      	lsls	r2, r1, #3
 8004f5c:	4610      	mov	r0, r2
 8004f5e:	4619      	mov	r1, r3
 8004f60:	4603      	mov	r3, r0
 8004f62:	4642      	mov	r2, r8
 8004f64:	189b      	adds	r3, r3, r2
 8004f66:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f68:	464b      	mov	r3, r9
 8004f6a:	460a      	mov	r2, r1
 8004f6c:	eb42 0303 	adc.w	r3, r2, r3
 8004f70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	663b      	str	r3, [r7, #96]	; 0x60
 8004f7c:	667a      	str	r2, [r7, #100]	; 0x64
 8004f7e:	f04f 0200 	mov.w	r2, #0
 8004f82:	f04f 0300 	mov.w	r3, #0
 8004f86:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f8a:	4649      	mov	r1, r9
 8004f8c:	008b      	lsls	r3, r1, #2
 8004f8e:	4641      	mov	r1, r8
 8004f90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f94:	4641      	mov	r1, r8
 8004f96:	008a      	lsls	r2, r1, #2
 8004f98:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f9c:	f7fb fe48 	bl	8000c30 <__aeabi_uldivmod>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	4b0d      	ldr	r3, [pc, #52]	; (8004fdc <UART_SetConfig+0x4e4>)
 8004fa6:	fba3 1302 	umull	r1, r3, r3, r2
 8004faa:	095b      	lsrs	r3, r3, #5
 8004fac:	2164      	movs	r1, #100	; 0x64
 8004fae:	fb01 f303 	mul.w	r3, r1, r3
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	011b      	lsls	r3, r3, #4
 8004fb6:	3332      	adds	r3, #50	; 0x32
 8004fb8:	4a08      	ldr	r2, [pc, #32]	; (8004fdc <UART_SetConfig+0x4e4>)
 8004fba:	fba2 2303 	umull	r2, r3, r2, r3
 8004fbe:	095b      	lsrs	r3, r3, #5
 8004fc0:	f003 020f 	and.w	r2, r3, #15
 8004fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4422      	add	r2, r4
 8004fcc:	609a      	str	r2, [r3, #8]
}
 8004fce:	bf00      	nop
 8004fd0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fda:	bf00      	nop
 8004fdc:	51eb851f 	.word	0x51eb851f

08004fe0 <__libc_init_array>:
 8004fe0:	b570      	push	{r4, r5, r6, lr}
 8004fe2:	4d0d      	ldr	r5, [pc, #52]	; (8005018 <__libc_init_array+0x38>)
 8004fe4:	4c0d      	ldr	r4, [pc, #52]	; (800501c <__libc_init_array+0x3c>)
 8004fe6:	1b64      	subs	r4, r4, r5
 8004fe8:	10a4      	asrs	r4, r4, #2
 8004fea:	2600      	movs	r6, #0
 8004fec:	42a6      	cmp	r6, r4
 8004fee:	d109      	bne.n	8005004 <__libc_init_array+0x24>
 8004ff0:	4d0b      	ldr	r5, [pc, #44]	; (8005020 <__libc_init_array+0x40>)
 8004ff2:	4c0c      	ldr	r4, [pc, #48]	; (8005024 <__libc_init_array+0x44>)
 8004ff4:	f000 f820 	bl	8005038 <_init>
 8004ff8:	1b64      	subs	r4, r4, r5
 8004ffa:	10a4      	asrs	r4, r4, #2
 8004ffc:	2600      	movs	r6, #0
 8004ffe:	42a6      	cmp	r6, r4
 8005000:	d105      	bne.n	800500e <__libc_init_array+0x2e>
 8005002:	bd70      	pop	{r4, r5, r6, pc}
 8005004:	f855 3b04 	ldr.w	r3, [r5], #4
 8005008:	4798      	blx	r3
 800500a:	3601      	adds	r6, #1
 800500c:	e7ee      	b.n	8004fec <__libc_init_array+0xc>
 800500e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005012:	4798      	blx	r3
 8005014:	3601      	adds	r6, #1
 8005016:	e7f2      	b.n	8004ffe <__libc_init_array+0x1e>
 8005018:	080050c4 	.word	0x080050c4
 800501c:	080050c4 	.word	0x080050c4
 8005020:	080050c4 	.word	0x080050c4
 8005024:	080050c8 	.word	0x080050c8

08005028 <memset>:
 8005028:	4402      	add	r2, r0
 800502a:	4603      	mov	r3, r0
 800502c:	4293      	cmp	r3, r2
 800502e:	d100      	bne.n	8005032 <memset+0xa>
 8005030:	4770      	bx	lr
 8005032:	f803 1b01 	strb.w	r1, [r3], #1
 8005036:	e7f9      	b.n	800502c <memset+0x4>

08005038 <_init>:
 8005038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800503a:	bf00      	nop
 800503c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800503e:	bc08      	pop	{r3}
 8005040:	469e      	mov	lr, r3
 8005042:	4770      	bx	lr

08005044 <_fini>:
 8005044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005046:	bf00      	nop
 8005048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800504a:	bc08      	pop	{r3}
 800504c:	469e      	mov	lr, r3
 800504e:	4770      	bx	lr
