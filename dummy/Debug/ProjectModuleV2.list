
ProjectModuleV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006464  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08006600  08006600  00016600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066a0  080066a0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080066a0  080066a0  000166a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066a8  080066a8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066a8  080066a8  000166a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066ac  080066ac  000166ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080066b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000424  20000080  08006730  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  08006730  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ecbe  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002364  00000000  00000000  0002ed6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d08  00000000  00000000  000310d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be0  00000000  00000000  00031de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e72  00000000  00000000  000329c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012638  00000000  00000000  0004a832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fe36  00000000  00000000  0005ce6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ecca0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a2c  00000000  00000000  000eccf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080065e4 	.word	0x080065e4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	080065e4 	.word	0x080065e4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	; 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c60:	d2ed      	bcs.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_uldivmod>:
 8000dbc:	b953      	cbnz	r3, 8000dd4 <__aeabi_uldivmod+0x18>
 8000dbe:	b94a      	cbnz	r2, 8000dd4 <__aeabi_uldivmod+0x18>
 8000dc0:	2900      	cmp	r1, #0
 8000dc2:	bf08      	it	eq
 8000dc4:	2800      	cmpeq	r0, #0
 8000dc6:	bf1c      	itt	ne
 8000dc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd0:	f000 b974 	b.w	80010bc <__aeabi_idiv0>
 8000dd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ddc:	f000 f806 	bl	8000dec <__udivmoddi4>
 8000de0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000de4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000de8:	b004      	add	sp, #16
 8000dea:	4770      	bx	lr

08000dec <__udivmoddi4>:
 8000dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df0:	9d08      	ldr	r5, [sp, #32]
 8000df2:	4604      	mov	r4, r0
 8000df4:	468e      	mov	lr, r1
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d14d      	bne.n	8000e96 <__udivmoddi4+0xaa>
 8000dfa:	428a      	cmp	r2, r1
 8000dfc:	4694      	mov	ip, r2
 8000dfe:	d969      	bls.n	8000ed4 <__udivmoddi4+0xe8>
 8000e00:	fab2 f282 	clz	r2, r2
 8000e04:	b152      	cbz	r2, 8000e1c <__udivmoddi4+0x30>
 8000e06:	fa01 f302 	lsl.w	r3, r1, r2
 8000e0a:	f1c2 0120 	rsb	r1, r2, #32
 8000e0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000e12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e16:	ea41 0e03 	orr.w	lr, r1, r3
 8000e1a:	4094      	lsls	r4, r2
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	0c21      	lsrs	r1, r4, #16
 8000e22:	fbbe f6f8 	udiv	r6, lr, r8
 8000e26:	fa1f f78c 	uxth.w	r7, ip
 8000e2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000e2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e32:	fb06 f107 	mul.w	r1, r6, r7
 8000e36:	4299      	cmp	r1, r3
 8000e38:	d90a      	bls.n	8000e50 <__udivmoddi4+0x64>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e42:	f080 811f 	bcs.w	8001084 <__udivmoddi4+0x298>
 8000e46:	4299      	cmp	r1, r3
 8000e48:	f240 811c 	bls.w	8001084 <__udivmoddi4+0x298>
 8000e4c:	3e02      	subs	r6, #2
 8000e4e:	4463      	add	r3, ip
 8000e50:	1a5b      	subs	r3, r3, r1
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e58:	fb08 3310 	mls	r3, r8, r0, r3
 8000e5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e60:	fb00 f707 	mul.w	r7, r0, r7
 8000e64:	42a7      	cmp	r7, r4
 8000e66:	d90a      	bls.n	8000e7e <__udivmoddi4+0x92>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e70:	f080 810a 	bcs.w	8001088 <__udivmoddi4+0x29c>
 8000e74:	42a7      	cmp	r7, r4
 8000e76:	f240 8107 	bls.w	8001088 <__udivmoddi4+0x29c>
 8000e7a:	4464      	add	r4, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	1be4      	subs	r4, r4, r7
 8000e84:	2600      	movs	r6, #0
 8000e86:	b11d      	cbz	r5, 8000e90 <__udivmoddi4+0xa4>
 8000e88:	40d4      	lsrs	r4, r2
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000e90:	4631      	mov	r1, r6
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d909      	bls.n	8000eae <__udivmoddi4+0xc2>
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	f000 80ef 	beq.w	800107e <__udivmoddi4+0x292>
 8000ea0:	2600      	movs	r6, #0
 8000ea2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	4631      	mov	r1, r6
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	fab3 f683 	clz	r6, r3
 8000eb2:	2e00      	cmp	r6, #0
 8000eb4:	d14a      	bne.n	8000f4c <__udivmoddi4+0x160>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d302      	bcc.n	8000ec0 <__udivmoddi4+0xd4>
 8000eba:	4282      	cmp	r2, r0
 8000ebc:	f200 80f9 	bhi.w	80010b2 <__udivmoddi4+0x2c6>
 8000ec0:	1a84      	subs	r4, r0, r2
 8000ec2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	469e      	mov	lr, r3
 8000eca:	2d00      	cmp	r5, #0
 8000ecc:	d0e0      	beq.n	8000e90 <__udivmoddi4+0xa4>
 8000ece:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ed2:	e7dd      	b.n	8000e90 <__udivmoddi4+0xa4>
 8000ed4:	b902      	cbnz	r2, 8000ed8 <__udivmoddi4+0xec>
 8000ed6:	deff      	udf	#255	; 0xff
 8000ed8:	fab2 f282 	clz	r2, r2
 8000edc:	2a00      	cmp	r2, #0
 8000ede:	f040 8092 	bne.w	8001006 <__udivmoddi4+0x21a>
 8000ee2:	eba1 010c 	sub.w	r1, r1, ip
 8000ee6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eea:	fa1f fe8c 	uxth.w	lr, ip
 8000eee:	2601      	movs	r6, #1
 8000ef0:	0c20      	lsrs	r0, r4, #16
 8000ef2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ef6:	fb07 1113 	mls	r1, r7, r3, r1
 8000efa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000efe:	fb0e f003 	mul.w	r0, lr, r3
 8000f02:	4288      	cmp	r0, r1
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x12c>
 8000f06:	eb1c 0101 	adds.w	r1, ip, r1
 8000f0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f0e:	d202      	bcs.n	8000f16 <__udivmoddi4+0x12a>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f200 80cb 	bhi.w	80010ac <__udivmoddi4+0x2c0>
 8000f16:	4643      	mov	r3, r8
 8000f18:	1a09      	subs	r1, r1, r0
 8000f1a:	b2a4      	uxth	r4, r4
 8000f1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f20:	fb07 1110 	mls	r1, r7, r0, r1
 8000f24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f28:	fb0e fe00 	mul.w	lr, lr, r0
 8000f2c:	45a6      	cmp	lr, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x156>
 8000f30:	eb1c 0404 	adds.w	r4, ip, r4
 8000f34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f38:	d202      	bcs.n	8000f40 <__udivmoddi4+0x154>
 8000f3a:	45a6      	cmp	lr, r4
 8000f3c:	f200 80bb 	bhi.w	80010b6 <__udivmoddi4+0x2ca>
 8000f40:	4608      	mov	r0, r1
 8000f42:	eba4 040e 	sub.w	r4, r4, lr
 8000f46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f4a:	e79c      	b.n	8000e86 <__udivmoddi4+0x9a>
 8000f4c:	f1c6 0720 	rsb	r7, r6, #32
 8000f50:	40b3      	lsls	r3, r6
 8000f52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000f5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000f62:	431c      	orrs	r4, r3
 8000f64:	40f9      	lsrs	r1, r7
 8000f66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000f6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f72:	0c20      	lsrs	r0, r4, #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fb09 1118 	mls	r1, r9, r8, r1
 8000f7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f80:	fb08 f00e 	mul.w	r0, r8, lr
 8000f84:	4288      	cmp	r0, r1
 8000f86:	fa02 f206 	lsl.w	r2, r2, r6
 8000f8a:	d90b      	bls.n	8000fa4 <__udivmoddi4+0x1b8>
 8000f8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f94:	f080 8088 	bcs.w	80010a8 <__udivmoddi4+0x2bc>
 8000f98:	4288      	cmp	r0, r1
 8000f9a:	f240 8085 	bls.w	80010a8 <__udivmoddi4+0x2bc>
 8000f9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000fa2:	4461      	add	r1, ip
 8000fa4:	1a09      	subs	r1, r1, r0
 8000fa6:	b2a4      	uxth	r4, r4
 8000fa8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fac:	fb09 1110 	mls	r1, r9, r0, r1
 8000fb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fb8:	458e      	cmp	lr, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x1e2>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fc4:	d26c      	bcs.n	80010a0 <__udivmoddi4+0x2b4>
 8000fc6:	458e      	cmp	lr, r1
 8000fc8:	d96a      	bls.n	80010a0 <__udivmoddi4+0x2b4>
 8000fca:	3802      	subs	r0, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000fd6:	eba1 010e 	sub.w	r1, r1, lr
 8000fda:	42a1      	cmp	r1, r4
 8000fdc:	46c8      	mov	r8, r9
 8000fde:	46a6      	mov	lr, r4
 8000fe0:	d356      	bcc.n	8001090 <__udivmoddi4+0x2a4>
 8000fe2:	d053      	beq.n	800108c <__udivmoddi4+0x2a0>
 8000fe4:	b15d      	cbz	r5, 8000ffe <__udivmoddi4+0x212>
 8000fe6:	ebb3 0208 	subs.w	r2, r3, r8
 8000fea:	eb61 010e 	sbc.w	r1, r1, lr
 8000fee:	fa01 f707 	lsl.w	r7, r1, r7
 8000ff2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ff6:	40f1      	lsrs	r1, r6
 8000ff8:	431f      	orrs	r7, r3
 8000ffa:	e9c5 7100 	strd	r7, r1, [r5]
 8000ffe:	2600      	movs	r6, #0
 8001000:	4631      	mov	r1, r6
 8001002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001006:	f1c2 0320 	rsb	r3, r2, #32
 800100a:	40d8      	lsrs	r0, r3
 800100c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001010:	fa21 f303 	lsr.w	r3, r1, r3
 8001014:	4091      	lsls	r1, r2
 8001016:	4301      	orrs	r1, r0
 8001018:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800101c:	fa1f fe8c 	uxth.w	lr, ip
 8001020:	fbb3 f0f7 	udiv	r0, r3, r7
 8001024:	fb07 3610 	mls	r6, r7, r0, r3
 8001028:	0c0b      	lsrs	r3, r1, #16
 800102a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800102e:	fb00 f60e 	mul.w	r6, r0, lr
 8001032:	429e      	cmp	r6, r3
 8001034:	fa04 f402 	lsl.w	r4, r4, r2
 8001038:	d908      	bls.n	800104c <__udivmoddi4+0x260>
 800103a:	eb1c 0303 	adds.w	r3, ip, r3
 800103e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001042:	d22f      	bcs.n	80010a4 <__udivmoddi4+0x2b8>
 8001044:	429e      	cmp	r6, r3
 8001046:	d92d      	bls.n	80010a4 <__udivmoddi4+0x2b8>
 8001048:	3802      	subs	r0, #2
 800104a:	4463      	add	r3, ip
 800104c:	1b9b      	subs	r3, r3, r6
 800104e:	b289      	uxth	r1, r1
 8001050:	fbb3 f6f7 	udiv	r6, r3, r7
 8001054:	fb07 3316 	mls	r3, r7, r6, r3
 8001058:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800105c:	fb06 f30e 	mul.w	r3, r6, lr
 8001060:	428b      	cmp	r3, r1
 8001062:	d908      	bls.n	8001076 <__udivmoddi4+0x28a>
 8001064:	eb1c 0101 	adds.w	r1, ip, r1
 8001068:	f106 38ff 	add.w	r8, r6, #4294967295
 800106c:	d216      	bcs.n	800109c <__udivmoddi4+0x2b0>
 800106e:	428b      	cmp	r3, r1
 8001070:	d914      	bls.n	800109c <__udivmoddi4+0x2b0>
 8001072:	3e02      	subs	r6, #2
 8001074:	4461      	add	r1, ip
 8001076:	1ac9      	subs	r1, r1, r3
 8001078:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800107c:	e738      	b.n	8000ef0 <__udivmoddi4+0x104>
 800107e:	462e      	mov	r6, r5
 8001080:	4628      	mov	r0, r5
 8001082:	e705      	b.n	8000e90 <__udivmoddi4+0xa4>
 8001084:	4606      	mov	r6, r0
 8001086:	e6e3      	b.n	8000e50 <__udivmoddi4+0x64>
 8001088:	4618      	mov	r0, r3
 800108a:	e6f8      	b.n	8000e7e <__udivmoddi4+0x92>
 800108c:	454b      	cmp	r3, r9
 800108e:	d2a9      	bcs.n	8000fe4 <__udivmoddi4+0x1f8>
 8001090:	ebb9 0802 	subs.w	r8, r9, r2
 8001094:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001098:	3801      	subs	r0, #1
 800109a:	e7a3      	b.n	8000fe4 <__udivmoddi4+0x1f8>
 800109c:	4646      	mov	r6, r8
 800109e:	e7ea      	b.n	8001076 <__udivmoddi4+0x28a>
 80010a0:	4620      	mov	r0, r4
 80010a2:	e794      	b.n	8000fce <__udivmoddi4+0x1e2>
 80010a4:	4640      	mov	r0, r8
 80010a6:	e7d1      	b.n	800104c <__udivmoddi4+0x260>
 80010a8:	46d0      	mov	r8, sl
 80010aa:	e77b      	b.n	8000fa4 <__udivmoddi4+0x1b8>
 80010ac:	3b02      	subs	r3, #2
 80010ae:	4461      	add	r1, ip
 80010b0:	e732      	b.n	8000f18 <__udivmoddi4+0x12c>
 80010b2:	4630      	mov	r0, r6
 80010b4:	e709      	b.n	8000eca <__udivmoddi4+0xde>
 80010b6:	4464      	add	r4, ip
 80010b8:	3802      	subs	r0, #2
 80010ba:	e742      	b.n	8000f42 <__udivmoddi4+0x156>

080010bc <__aeabi_idiv0>:
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <InitKalmanStruct>:
extern arm_matrix_instance_f32 mat_P, mat_P_minus, mat_Q;
extern arm_matrix_instance_f32 mat_C, mat_R, mat_S, mat_K;
extern arm_matrix_instance_f32 mat_temp3x3A,mat_temp3x3B, mat_temp3x1,mat_temp1x3, mat_temp1x1;

void InitKalmanStruct(Kalman* KF,float q,float r)
{
 80010c0:	b4b0      	push	{r4, r5, r7}
 80010c2:	b0a7      	sub	sp, #156	; 0x9c
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80010cc:	edc7 0a01 	vstr	s1, [r7, #4]
	KF->R = r;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	655a      	str	r2, [r3, #84]	; 0x54
	KF->var_Q = q;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	659a      	str	r2, [r3, #88]	; 0x58
	KF->D = 0;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f04f 0200 	mov.w	r2, #0
 80010e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	float32_t a[9] = {
 80010e6:	4b5b      	ldr	r3, [pc, #364]	; (8001254 <InitKalmanStruct+0x194>)
 80010e8:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80010ec:	461d      	mov	r5, r3
 80010ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f6:	682b      	ldr	r3, [r5, #0]
 80010f8:	6023      	str	r3, [r4, #0]
			1, 0.001, 0.0000005,
			0, 1, 0.001,
			0, 0, 1
	};
	float iden[9] = {
 80010fa:	4b57      	ldr	r3, [pc, #348]	; (8001258 <InitKalmanStruct+0x198>)
 80010fc:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001100:	461d      	mov	r5, r3
 8001102:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001104:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001106:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001108:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800110a:	682b      	ldr	r3, [r5, #0]
 800110c:	6023      	str	r3, [r4, #0]
			1, 0, 0,
			0, 1, 0,
			0, 0, 1
	};
	int i;
	for(i=0;i<9;i++)
 800110e:	2300      	movs	r3, #0
 8001110:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001114:	e02a      	b.n	800116c <InitKalmanStruct+0xac>
	{
		KF->A[i] = a[i];
 8001116:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	3398      	adds	r3, #152	; 0x98
 800111e:	443b      	add	r3, r7
 8001120:	3b28      	subs	r3, #40	; 0x28
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	68f9      	ldr	r1, [r7, #12]
 8001126:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800112a:	3318      	adds	r3, #24
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	440b      	add	r3, r1
 8001130:	601a      	str	r2, [r3, #0]
		KF->I[i] = iden[i];
 8001132:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	3398      	adds	r3, #152	; 0x98
 800113a:	443b      	add	r3, r7
 800113c:	3b4c      	subs	r3, #76	; 0x4c
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	68f9      	ldr	r1, [r7, #12]
 8001142:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001146:	332e      	adds	r3, #46	; 0x2e
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	440b      	add	r3, r1
 800114c:	601a      	str	r2, [r3, #0]
		KF->P[i] = 0;
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001154:	3302      	adds	r3, #2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	3304      	adds	r3, #4
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
	for(i=0;i<9;i++)
 8001162:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001166:	3301      	adds	r3, #1
 8001168:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800116c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001170:	2b08      	cmp	r3, #8
 8001172:	ddd0      	ble.n	8001116 <InitKalmanStruct+0x56>
	}
	float32_t b[3] = {
 8001174:	f04f 0300 	mov.w	r3, #0
 8001178:	643b      	str	r3, [r7, #64]	; 0x40
 800117a:	f04f 0300 	mov.w	r3, #0
 800117e:	647b      	str	r3, [r7, #68]	; 0x44
 8001180:	f04f 0300 	mov.w	r3, #0
 8001184:	64bb      	str	r3, [r7, #72]	; 0x48
			0, 0, 0
	};
	float32_t c[3] = {
 8001186:	f04f 0300 	mov.w	r3, #0
 800118a:	637b      	str	r3, [r7, #52]	; 0x34
 800118c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001190:	63bb      	str	r3, [r7, #56]	; 0x38
 8001192:	f04f 0300 	mov.w	r3, #0
 8001196:	63fb      	str	r3, [r7, #60]	; 0x3c
			0, 1, 0
	};
	float32_t x[3] = {
 8001198:	f04f 0300 	mov.w	r3, #0
 800119c:	62bb      	str	r3, [r7, #40]	; 0x28
 800119e:	f04f 0300 	mov.w	r3, #0
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011a4:	f04f 0300 	mov.w	r3, #0
 80011a8:	633b      	str	r3, [r7, #48]	; 0x30
			0, 0, 0
	};
	float32_t p[3] = {
 80011aa:	f04f 0300 	mov.w	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]
 80011b0:	f04f 0300 	mov.w	r3, #0
 80011b4:	623b      	str	r3, [r7, #32]
 80011b6:	f04f 0300 	mov.w	r3, #0
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
				0, 0, 0
		};
	float32_t g[3] = {
 80011bc:	4a27      	ldr	r2, [pc, #156]	; (800125c <InitKalmanStruct+0x19c>)
 80011be:	f107 0310 	add.w	r3, r7, #16
 80011c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80011c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0.001 * 0.001 * 0.001 / 6,
			0.0000005,
			0.001
	};
	for(i=0;i<3;i++)
 80011c8:	2300      	movs	r3, #0
 80011ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80011ce:	e037      	b.n	8001240 <InitKalmanStruct+0x180>
	{
		KF->B[i] = b[i];
 80011d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	3398      	adds	r3, #152	; 0x98
 80011d8:	443b      	add	r3, r7
 80011da:	3b58      	subs	r3, #88	; 0x58
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	68f9      	ldr	r1, [r7, #12]
 80011e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80011e4:	3320      	adds	r3, #32
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	440b      	add	r3, r1
 80011ea:	3304      	adds	r3, #4
 80011ec:	601a      	str	r2, [r3, #0]
		KF->C[i] = c[i];
 80011ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	3398      	adds	r3, #152	; 0x98
 80011f6:	443b      	add	r3, r7
 80011f8:	3b64      	subs	r3, #100	; 0x64
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	68f9      	ldr	r1, [r7, #12]
 80011fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001202:	3324      	adds	r3, #36	; 0x24
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	440b      	add	r3, r1
 8001208:	601a      	str	r2, [r3, #0]
		KF->G[i] = g[i];
 800120a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	3398      	adds	r3, #152	; 0x98
 8001212:	443b      	add	r3, r7
 8001214:	3b88      	subs	r3, #136	; 0x88
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	68f9      	ldr	r1, [r7, #12]
 800121a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800121e:	3328      	adds	r3, #40	; 0x28
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	440b      	add	r3, r1
 8001224:	601a      	str	r2, [r3, #0]
		KF->x_hat[i] = 0;
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
	for(i=0;i<3;i++)
 8001236:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800123a:	3301      	adds	r3, #1
 800123c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001240:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001244:	2b02      	cmp	r3, #2
 8001246:	ddc3      	ble.n	80011d0 <InitKalmanStruct+0x110>
	}
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	379c      	adds	r7, #156	; 0x9c
 800124e:	46bd      	mov	sp, r7
 8001250:	bcb0      	pop	{r4, r5, r7}
 8001252:	4770      	bx	lr
 8001254:	08006600 	.word	0x08006600
 8001258:	08006624 	.word	0x08006624
 800125c:	08006648 	.word	0x08006648

08001260 <kalman_filter>:

void kalman_filter()
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
    //Process model: x_hat_minus = mat_A*x_hat
    arm_mat_mult_f32(&mat_A, &mat_x_hat, &mat_x_hat_minus);			//A*X
 8001264:	4a39      	ldr	r2, [pc, #228]	; (800134c <kalman_filter+0xec>)
 8001266:	493a      	ldr	r1, [pc, #232]	; (8001350 <kalman_filter+0xf0>)
 8001268:	483a      	ldr	r0, [pc, #232]	; (8001354 <kalman_filter+0xf4>)
 800126a:	f001 fed2 	bl	8003012 <arm_mat_mult_f32>
    // If an input control vector is used:
    // arm_mat_mult_f32(&mat_B, &mat_u, &mat_temp3x3A);
    // arm_mat_add_f32(&mat_x_hat_minus, &mat_temp3x3A, &mat_x_hat_minus);

    // Predict covariance matrix: P_minus = A * P * A^T + Q
    arm_mat_trans_f32(&mat_A, &mat_temp3x3A);					    //AT
 800126e:	493a      	ldr	r1, [pc, #232]	; (8001358 <kalman_filter+0xf8>)
 8001270:	4838      	ldr	r0, [pc, #224]	; (8001354 <kalman_filter+0xf4>)
 8001272:	f001 ffb9 	bl	80031e8 <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_A, &mat_P, &mat_temp3x3B);			    //A*P
 8001276:	4a39      	ldr	r2, [pc, #228]	; (800135c <kalman_filter+0xfc>)
 8001278:	4939      	ldr	r1, [pc, #228]	; (8001360 <kalman_filter+0x100>)
 800127a:	4836      	ldr	r0, [pc, #216]	; (8001354 <kalman_filter+0xf4>)
 800127c:	f001 fec9 	bl	8003012 <arm_mat_mult_f32>
    arm_mat_mult_f32(&mat_temp3x3B, &mat_temp3x3A, &mat_P_minus);	//A*P*AT
 8001280:	4a38      	ldr	r2, [pc, #224]	; (8001364 <kalman_filter+0x104>)
 8001282:	4935      	ldr	r1, [pc, #212]	; (8001358 <kalman_filter+0xf8>)
 8001284:	4835      	ldr	r0, [pc, #212]	; (800135c <kalman_filter+0xfc>)
 8001286:	f001 fec4 	bl	8003012 <arm_mat_mult_f32>
    arm_mat_trans_f32(&mat_G, &mat_GT);								//GT
 800128a:	4937      	ldr	r1, [pc, #220]	; (8001368 <kalman_filter+0x108>)
 800128c:	4837      	ldr	r0, [pc, #220]	; (800136c <kalman_filter+0x10c>)
 800128e:	f001 ffab 	bl	80031e8 <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_G, &mat_GT, &mat_Q);						//G*GT
 8001292:	4a37      	ldr	r2, [pc, #220]	; (8001370 <kalman_filter+0x110>)
 8001294:	4934      	ldr	r1, [pc, #208]	; (8001368 <kalman_filter+0x108>)
 8001296:	4835      	ldr	r0, [pc, #212]	; (800136c <kalman_filter+0x10c>)
 8001298:	f001 febb 	bl	8003012 <arm_mat_mult_f32>
    arm_mat_scale_f32(&mat_Q,KF.var_Q, &mat_Q);						//G*GT*var_q
 800129c:	4b35      	ldr	r3, [pc, #212]	; (8001374 <kalman_filter+0x114>)
 800129e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80012a2:	4933      	ldr	r1, [pc, #204]	; (8001370 <kalman_filter+0x110>)
 80012a4:	eeb0 0a67 	vmov.f32	s0, s15
 80012a8:	4831      	ldr	r0, [pc, #196]	; (8001370 <kalman_filter+0x110>)
 80012aa:	f001 ff2c 	bl	8003106 <arm_mat_scale_f32>
    arm_mat_add_f32(&mat_P_minus, &mat_Q, &mat_P_minus);			//A * P * A^T + Q
 80012ae:	4a2d      	ldr	r2, [pc, #180]	; (8001364 <kalman_filter+0x104>)
 80012b0:	492f      	ldr	r1, [pc, #188]	; (8001370 <kalman_filter+0x110>)
 80012b2:	482c      	ldr	r0, [pc, #176]	; (8001364 <kalman_filter+0x104>)
 80012b4:	f001 fae3 	bl	800287e <arm_mat_add_f32>

    // Calculate innovation covariance: S = C * P_minus * C^T + R
    arm_mat_mult_f32(&mat_C, &mat_P_minus, &mat_temp1x3);			//C*P
 80012b8:	4a2f      	ldr	r2, [pc, #188]	; (8001378 <kalman_filter+0x118>)
 80012ba:	492a      	ldr	r1, [pc, #168]	; (8001364 <kalman_filter+0x104>)
 80012bc:	482f      	ldr	r0, [pc, #188]	; (800137c <kalman_filter+0x11c>)
 80012be:	f001 fea8 	bl	8003012 <arm_mat_mult_f32>
    arm_mat_trans_f32(&mat_C, &mat_temp3x1);						//CT
 80012c2:	492f      	ldr	r1, [pc, #188]	; (8001380 <kalman_filter+0x120>)
 80012c4:	482d      	ldr	r0, [pc, #180]	; (800137c <kalman_filter+0x11c>)
 80012c6:	f001 ff8f 	bl	80031e8 <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_temp1x3, &mat_temp3x1, &mat_temp1x1);		//C*P*C^T
 80012ca:	4a2e      	ldr	r2, [pc, #184]	; (8001384 <kalman_filter+0x124>)
 80012cc:	492c      	ldr	r1, [pc, #176]	; (8001380 <kalman_filter+0x120>)
 80012ce:	482a      	ldr	r0, [pc, #168]	; (8001378 <kalman_filter+0x118>)
 80012d0:	f001 fe9f 	bl	8003012 <arm_mat_mult_f32>
    arm_mat_add_f32(&mat_temp1x1, &mat_R, &mat_S);					//C*P*C^T + R
 80012d4:	4a2c      	ldr	r2, [pc, #176]	; (8001388 <kalman_filter+0x128>)
 80012d6:	492d      	ldr	r1, [pc, #180]	; (800138c <kalman_filter+0x12c>)
 80012d8:	482a      	ldr	r0, [pc, #168]	; (8001384 <kalman_filter+0x124>)
 80012da:	f001 fad0 	bl	800287e <arm_mat_add_f32>

    //==> Calculate Kalman gain: K = P_minus * C^T * S^(-1)
    arm_mat_inverse_f32(&mat_S, &mat_temp1x1);						//inv(S)
 80012de:	4929      	ldr	r1, [pc, #164]	; (8001384 <kalman_filter+0x124>)
 80012e0:	4829      	ldr	r0, [pc, #164]	; (8001388 <kalman_filter+0x128>)
 80012e2:	f001 fb1f 	bl	8002924 <arm_mat_inverse_f32>
    arm_mat_mult_f32(&mat_P_minus, &mat_temp3x1, &mat_temp3x3A);	//P*CT
 80012e6:	4a1c      	ldr	r2, [pc, #112]	; (8001358 <kalman_filter+0xf8>)
 80012e8:	4925      	ldr	r1, [pc, #148]	; (8001380 <kalman_filter+0x120>)
 80012ea:	481e      	ldr	r0, [pc, #120]	; (8001364 <kalman_filter+0x104>)
 80012ec:	f001 fe91 	bl	8003012 <arm_mat_mult_f32>
    arm_mat_mult_f32(&mat_temp3x3A, &mat_temp1x1, &mat_K);			//P*CT*inv(S)
 80012f0:	4a27      	ldr	r2, [pc, #156]	; (8001390 <kalman_filter+0x130>)
 80012f2:	4924      	ldr	r1, [pc, #144]	; (8001384 <kalman_filter+0x124>)
 80012f4:	4818      	ldr	r0, [pc, #96]	; (8001358 <kalman_filter+0xf8>)
 80012f6:	f001 fe8c 	bl	8003012 <arm_mat_mult_f32>

    //==> Update state estimate: x_hat = x_hat_minus + K * (z - C * x_hat_minus)
    arm_mat_mult_f32(&mat_C, &mat_x_hat_minus, &mat_temp1x1);		//C*X
 80012fa:	4a22      	ldr	r2, [pc, #136]	; (8001384 <kalman_filter+0x124>)
 80012fc:	4913      	ldr	r1, [pc, #76]	; (800134c <kalman_filter+0xec>)
 80012fe:	481f      	ldr	r0, [pc, #124]	; (800137c <kalman_filter+0x11c>)
 8001300:	f001 fe87 	bl	8003012 <arm_mat_mult_f32>
    //float32_t innovation = z - temp1x1;								//Z-C*X
    arm_mat_scale_f32(&mat_K, KF.z - KF.temp1x1, &mat_temp3x1);			//K*(Z-C*X)
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <kalman_filter+0x114>)
 8001306:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800130a:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <kalman_filter+0x114>)
 800130c:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
 8001310:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001314:	491a      	ldr	r1, [pc, #104]	; (8001380 <kalman_filter+0x120>)
 8001316:	eeb0 0a67 	vmov.f32	s0, s15
 800131a:	481d      	ldr	r0, [pc, #116]	; (8001390 <kalman_filter+0x130>)
 800131c:	f001 fef3 	bl	8003106 <arm_mat_scale_f32>
    arm_mat_add_f32(&mat_x_hat_minus, &mat_temp3x1, &mat_x_hat);	//X - K*(Z-C*X) ========> X estimate
 8001320:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <kalman_filter+0xf0>)
 8001322:	4917      	ldr	r1, [pc, #92]	; (8001380 <kalman_filter+0x120>)
 8001324:	4809      	ldr	r0, [pc, #36]	; (800134c <kalman_filter+0xec>)
 8001326:	f001 faaa 	bl	800287e <arm_mat_add_f32>

    // Update covariance matrix: P = (I - K * C) * P_minus
    arm_mat_mult_f32(&mat_K, &mat_C, &mat_temp3x3B);				//K*C
 800132a:	4a0c      	ldr	r2, [pc, #48]	; (800135c <kalman_filter+0xfc>)
 800132c:	4913      	ldr	r1, [pc, #76]	; (800137c <kalman_filter+0x11c>)
 800132e:	4818      	ldr	r0, [pc, #96]	; (8001390 <kalman_filter+0x130>)
 8001330:	f001 fe6f 	bl	8003012 <arm_mat_mult_f32>
    arm_mat_sub_f32(&eye, &mat_P_minus, &mat_temp3x3A);				//I - K*C
 8001334:	4a08      	ldr	r2, [pc, #32]	; (8001358 <kalman_filter+0xf8>)
 8001336:	490b      	ldr	r1, [pc, #44]	; (8001364 <kalman_filter+0x104>)
 8001338:	4816      	ldr	r0, [pc, #88]	; (8001394 <kalman_filter+0x134>)
 800133a:	f001 ff1a 	bl	8003172 <arm_mat_sub_f32>
    arm_mat_mult_f32(&mat_temp3x3A, &mat_P_minus, &mat_P);			//(I - K*C)*P ===========> P estimate
 800133e:	4a08      	ldr	r2, [pc, #32]	; (8001360 <kalman_filter+0x100>)
 8001340:	4908      	ldr	r1, [pc, #32]	; (8001364 <kalman_filter+0x104>)
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <kalman_filter+0xf8>)
 8001344:	f001 fe65 	bl	8003012 <arm_mat_mult_f32>
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000390 	.word	0x20000390
 8001350:	20000388 	.word	0x20000388
 8001354:	20000380 	.word	0x20000380
 8001358:	200003f0 	.word	0x200003f0
 800135c:	200003f8 	.word	0x200003f8
 8001360:	200003b8 	.word	0x200003b8
 8001364:	200003c0 	.word	0x200003c0
 8001368:	200003a0 	.word	0x200003a0
 800136c:	200003a8 	.word	0x200003a8
 8001370:	200003c8 	.word	0x200003c8
 8001374:	20000200 	.word	0x20000200
 8001378:	20000408 	.word	0x20000408
 800137c:	200003d0 	.word	0x200003d0
 8001380:	20000400 	.word	0x20000400
 8001384:	20000410 	.word	0x20000410
 8001388:	200003e0 	.word	0x200003e0
 800138c:	200003d8 	.word	0x200003d8
 8001390:	200003e8 	.word	0x200003e8
 8001394:	200003b0 	.word	0x200003b0

08001398 <micros>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ //get time period
	if(htim == & htim5){
		ReadEncoderParam._micros += UINT32_MAX;
	}
}
uint64_t micros(){ //get time in micros
 8001398:	b4b0      	push	{r4, r5, r7}
 800139a:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+ ReadEncoderParam._micros;
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <micros+0x2c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a2:	2200      	movs	r2, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	4611      	mov	r1, r2
 80013a8:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <micros+0x30>)
 80013aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ae:	1884      	adds	r4, r0, r2
 80013b0:	eb41 0503 	adc.w	r5, r1, r3
 80013b4:	4622      	mov	r2, r4
 80013b6:	462b      	mov	r3, r5
}
 80013b8:	4610      	mov	r0, r2
 80013ba:	4619      	mov	r1, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	bcb0      	pop	{r4, r5, r7}
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000174 	.word	0x20000174
 80013c8:	20000418 	.word	0x20000418

080013cc <InitReadEncoder>:

void InitReadEncoder(ReadEncoder* Read, uint32_t samplingtime)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
	Read->_micros = 0;
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	f04f 0300 	mov.w	r3, #0
 80013e0:	e9c1 2300 	strd	r2, r3, [r1]
	Read->PPR = 8192;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ea:	811a      	strh	r2, [r3, #8]
	Read->samplingTime = samplingtime;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	60da      	str	r2, [r3, #12]
	Read->MotorSetDuty = 60;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	223c      	movs	r2, #60	; 0x3c
 80013f6:	741a      	strb	r2, [r3, #16]
	Read->Pulse_Compare = 0;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	825a      	strh	r2, [r3, #18]
	Read->DIR = 0;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	751a      	strb	r2, [r3, #20]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <QEIEncoderPositionVelocity_Update>:

void QEIEncoderPositionVelocity_Update(){
 8001410:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001414:	b084      	sub	sp, #16
 8001416:	af00      	add	r7, sp, #0
	//collect data
	QEIData.timestamp[0] = micros();
 8001418:	f7ff ffbe 	bl	8001398 <micros>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4937      	ldr	r1, [pc, #220]	; (8001500 <QEIEncoderPositionVelocity_Update+0xf0>)
 8001422:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uint32_t couterPosition = __HAL_TIM_GET_COUNTER(&htim2);
 8001426:	4b37      	ldr	r3, [pc, #220]	; (8001504 <QEIEncoderPositionVelocity_Update+0xf4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142c:	60fb      	str	r3, [r7, #12]
	QEIData.data[0] = couterPosition;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2200      	movs	r2, #0
 8001432:	4698      	mov	r8, r3
 8001434:	4691      	mov	r9, r2
 8001436:	4b32      	ldr	r3, [pc, #200]	; (8001500 <QEIEncoderPositionVelocity_Update+0xf0>)
 8001438:	e9c3 8900 	strd	r8, r9, [r3]

	//calculation
	QEIData.QEIPosition = couterPosition % ReadEncoderParam.PPR;
 800143c:	4b32      	ldr	r3, [pc, #200]	; (8001508 <QEIEncoderPositionVelocity_Update+0xf8>)
 800143e:	891b      	ldrh	r3, [r3, #8]
 8001440:	461a      	mov	r2, r3
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	fbb3 f1f2 	udiv	r1, r3, r2
 8001448:	fb01 f202 	mul.w	r2, r1, r2
 800144c:	1a9b      	subs	r3, r3, r2
 800144e:	ee07 3a90 	vmov	s15, r3
 8001452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001456:	4b2a      	ldr	r3, [pc, #168]	; (8001500 <QEIEncoderPositionVelocity_Update+0xf0>)
 8001458:	edc3 7a08 	vstr	s15, [r3, #32]

	int32_t diffPosition = QEIData.data[0] - QEIData.data[1];
 800145c:	4b28      	ldr	r3, [pc, #160]	; (8001500 <QEIEncoderPositionVelocity_Update+0xf0>)
 800145e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001462:	4611      	mov	r1, r2
 8001464:	4b26      	ldr	r3, [pc, #152]	; (8001500 <QEIEncoderPositionVelocity_Update+0xf0>)
 8001466:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800146a:	4613      	mov	r3, r2
 800146c:	1acb      	subs	r3, r1, r3
 800146e:	60bb      	str	r3, [r7, #8]
	float difftime = (QEIData.timestamp[0] - QEIData.timestamp[1]);
 8001470:	4b23      	ldr	r3, [pc, #140]	; (8001500 <QEIEncoderPositionVelocity_Update+0xf0>)
 8001472:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001476:	4b22      	ldr	r3, [pc, #136]	; (8001500 <QEIEncoderPositionVelocity_Update+0xf0>)
 8001478:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800147c:	1a84      	subs	r4, r0, r2
 800147e:	eb61 0503 	sbc.w	r5, r1, r3
 8001482:	4620      	mov	r0, r4
 8001484:	4629      	mov	r1, r5
 8001486:	f7ff fc53 	bl	8000d30 <__aeabi_ul2f>
 800148a:	4603      	mov	r3, r0
 800148c:	607b      	str	r3, [r7, #4]


	//calculate
	QEIData.QEIVelocity = (diffPosition * 1000000*60.0)/(difftime*8192.0);
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	4a1e      	ldr	r2, [pc, #120]	; (800150c <QEIEncoderPositionVelocity_Update+0xfc>)
 8001492:	fb02 f303 	mul.w	r3, r2, r3
 8001496:	4618      	mov	r0, r3
 8001498:	f7fe fff0 	bl	800047c <__aeabi_i2d>
 800149c:	f04f 0200 	mov.w	r2, #0
 80014a0:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <QEIEncoderPositionVelocity_Update+0x100>)
 80014a2:	f7ff f855 	bl	8000550 <__aeabi_dmul>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4614      	mov	r4, r2
 80014ac:	461d      	mov	r5, r3
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7fe fff6 	bl	80004a0 <__aeabi_f2d>
 80014b4:	f04f 0200 	mov.w	r2, #0
 80014b8:	4b16      	ldr	r3, [pc, #88]	; (8001514 <QEIEncoderPositionVelocity_Update+0x104>)
 80014ba:	f7ff f849 	bl	8000550 <__aeabi_dmul>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4620      	mov	r0, r4
 80014c4:	4629      	mov	r1, r5
 80014c6:	f7ff f96d 	bl	80007a4 <__aeabi_ddiv>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	f7ff fb15 	bl	8000b00 <__aeabi_d2f>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4a09      	ldr	r2, [pc, #36]	; (8001500 <QEIEncoderPositionVelocity_Update+0xf0>)
 80014da:	6253      	str	r3, [r2, #36]	; 0x24

	//Delay
	QEIData.data[1] = QEIData.data[0];
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <QEIEncoderPositionVelocity_Update+0xf0>)
 80014de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e2:	4907      	ldr	r1, [pc, #28]	; (8001500 <QEIEncoderPositionVelocity_Update+0xf0>)
 80014e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	QEIData.timestamp[1] = QEIData.timestamp[0];
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <QEIEncoderPositionVelocity_Update+0xf0>)
 80014ea:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80014ee:	4904      	ldr	r1, [pc, #16]	; (8001500 <QEIEncoderPositionVelocity_Update+0xf0>)
 80014f0:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80014f4:	bf00      	nop
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014fe:	bf00      	nop
 8001500:	20000430 	.word	0x20000430
 8001504:	200000e4 	.word	0x200000e4
 8001508:	20000418 	.word	0x20000418
 800150c:	000f4240 	.word	0x000f4240
 8001510:	404e0000 	.word	0x404e0000
 8001514:	40c00000 	.word	0x40c00000

08001518 <SetTrajectoryConstrainAndInit>:
 */
#include "Trajectory.h"
#include "math.h"

void SetTrajectoryConstrainAndInit(Trajectory* Tj, int32_t  vmax,int32_t  amax)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
	Tj->complete = 1;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2201      	movs	r2, #1
 8001528:	629a      	str	r2, [r3, #40]	; 0x28
	Tj->v_max = vmax;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	68ba      	ldr	r2, [r7, #8]
 800152e:	60da      	str	r2, [r3, #12]
	Tj->a_max = amax;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	611a      	str	r2, [r3, #16]
	Tj->final_pos = 0;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	605a      	str	r2, [r3, #4]
	Tj->start_pos = 0;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
}
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	0000      	movs	r0, r0
 8001554:	0000      	movs	r0, r0
	...

08001558 <TrajectoryGenerator>:

void TrajectoryGenerator(Trajectory* Tj)
{
 8001558:	b5b0      	push	{r4, r5, r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	if(Tj->final_pos == Tj->start_pos)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	ed93 7a01 	vldr	s14, [r3, #4]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	edd3 7a00 	vldr	s15, [r3]
 800156c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001574:	d103      	bne.n	800157e <TrajectoryGenerator+0x26>
	{
		Tj->complete = 2;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2202      	movs	r2, #2
 800157a:	629a      	str	r2, [r3, #40]	; 0x28
			Tj->profile = 1;	//Trapizoid
		}
	}


}
 800157c:	e0af      	b.n	80016de <TrajectoryGenerator+0x186>
		Tj->complete = 0;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	629a      	str	r2, [r3, #40]	; 0x28
		Tj->displacement = Tj->final_pos - Tj->start_pos;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	ed93 7a01 	vldr	s14, [r3, #4]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	edd3 7a00 	vldr	s15, [r3]
 8001590:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	edc3 7a02 	vstr	s15, [r3, #8]
		if(Tj->displacement < 0)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	edd3 7a02 	vldr	s15, [r3, #8]
 80015a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a8:	d510      	bpl.n	80015cc <TrajectoryGenerator+0x74>
			Tj->a_max = -1.0*Tj->a_max;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe ff64 	bl	800047c <__aeabi_i2d>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4614      	mov	r4, r2
 80015ba:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80015be:	4620      	mov	r0, r4
 80015c0:	4629      	mov	r1, r5
 80015c2:	f7ff fa75 	bl	8000ab0 <__aeabi_d2iz>
 80015c6:	4602      	mov	r2, r0
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	611a      	str	r2, [r3, #16]
		Tj->displacement = fabs(Tj->displacement);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80015d2:	eef0 7ae7 	vabs.f32	s15, s15
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	edc3 7a02 	vstr	s15, [r3, #8]
		if(sqrtf(Tj->displacement/Tj->a_max) < Tj->v_max/Tj->a_max)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	ed93 7a02 	vldr	s14, [r3, #8]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	ee07 3a90 	vmov	s15, r3
 80015ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80015f2:	eeb0 0a66 	vmov.f32	s0, s13
 80015f6:	f004 f927 	bl	8005848 <sqrtf>
 80015fa:	eeb0 7a40 	vmov.f32	s14, s0
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	fb92 f3f3 	sdiv	r3, r2, r3
 800160a:	ee07 3a90 	vmov	s15, r3
 800160e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001612:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161a:	d536      	bpl.n	800168a <TrajectoryGenerator+0x132>
			Tj->TimeAcc = sqrtf(Tj->displacement/Tj->a_max)*100000;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	ee07 3a90 	vmov	s15, r3
 800162a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800162e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001632:	eeb0 0a66 	vmov.f32	s0, s13
 8001636:	f004 f907 	bl	8005848 <sqrtf>
 800163a:	eef0 7a40 	vmov.f32	s15, s0
 800163e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80016f0 <TrajectoryGenerator+0x198>
 8001642:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			Tj->TotalTime = 2.0*Tj->TimeAcc*100000;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe ff25 	bl	80004a0 <__aeabi_f2d>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	f7fe fdc3 	bl	80001e4 <__adddf3>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4610      	mov	r0, r2
 8001664:	4619      	mov	r1, r3
 8001666:	a320      	add	r3, pc, #128	; (adr r3, 80016e8 <TrajectoryGenerator+0x190>)
 8001668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166c:	f7fe ff70 	bl	8000550 <__aeabi_dmul>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4610      	mov	r0, r2
 8001676:	4619      	mov	r1, r3
 8001678:	f7ff fa42 	bl	8000b00 <__aeabi_d2f>
 800167c:	4602      	mov	r2, r0
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	621a      	str	r2, [r3, #32]
			Tj->profile = 0;	//Triangle
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001688:	e029      	b.n	80016de <TrajectoryGenerator+0x186>
			Tj->TimeAcc = Tj->v_max/Tj->a_max *100000;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68da      	ldr	r2, [r3, #12]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	fb92 f3f3 	sdiv	r3, r2, r3
 8001696:	4a17      	ldr	r2, [pc, #92]	; (80016f4 <TrajectoryGenerator+0x19c>)
 8001698:	fb02 f303 	mul.w	r3, r2, r3
 800169c:	ee07 3a90 	vmov	s15, r3
 80016a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			Tj->TotalTime = Tj->TimeAcc + Tj->displacement/Tj->v_max *100000;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	ed93 6a02 	vldr	s12, [r3, #8]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	ee07 3a90 	vmov	s15, r3
 80016be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016c2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80016c6:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80016f0 <TrajectoryGenerator+0x198>
 80016ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80016ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	edc3 7a08 	vstr	s15, [r3, #32]
			Tj->profile = 1;	//Trapizoid
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bdb0      	pop	{r4, r5, r7, pc}
 80016e6:	bf00      	nop
 80016e8:	00000000 	.word	0x00000000
 80016ec:	40f86a00 	.word	0x40f86a00
 80016f0:	47c35000 	.word	0x47c35000
 80016f4:	000186a0 	.word	0x000186a0

080016f8 <TrajectoryEvaluator>:

void TrajectoryEvaluator(Trajectory* Tj,uint64_t time)
{
 80016f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016fc:	ed2d 8b02 	vpush	{d8}
 8001700:	b092      	sub	sp, #72	; 0x48
 8001702:	af00      	add	r7, sp, #0
 8001704:	6478      	str	r0, [r7, #68]	; 0x44
 8001706:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	switch(Tj->profile)
 800170a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <TrajectoryEvaluator+0x22>
 8001712:	2b01      	cmp	r3, #1
 8001714:	f000 8120 	beq.w	8001958 <TrajectoryEvaluator+0x260>
			Tj->current_velo = 0;
			Tj->current_acc = 0;
		}
		break;
	}
}
 8001718:	e2d8      	b.n	8001ccc <TrajectoryEvaluator+0x5d4>
		if(time<=Tj->TimeAcc)
 800171a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800171e:	f7ff fb07 	bl	8000d30 <__aeabi_ul2f>
 8001722:	ee07 0a10 	vmov	s14, r0
 8001726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001728:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800172c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001734:	d860      	bhi.n	80017f8 <TrajectoryEvaluator+0x100>
			Tj->current_pos = Tj->start_pos + 0.5*Tj->a_max*pow(time,2);
 8001736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe feb0 	bl	80004a0 <__aeabi_f2d>
 8001740:	4604      	mov	r4, r0
 8001742:	460d      	mov	r5, r1
 8001744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fe97 	bl	800047c <__aeabi_i2d>
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	4bbb      	ldr	r3, [pc, #748]	; (8001a40 <TrajectoryEvaluator+0x348>)
 8001754:	f7fe fefc 	bl	8000550 <__aeabi_dmul>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4690      	mov	r8, r2
 800175e:	4699      	mov	r9, r3
 8001760:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001764:	f7fe febe 	bl	80004e4 <__aeabi_ul2d>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	ed9f 1bb2 	vldr	d1, [pc, #712]	; 8001a38 <TrajectoryEvaluator+0x340>
 8001770:	ec43 2b10 	vmov	d0, r2, r3
 8001774:	f003 fff8 	bl	8005768 <pow>
 8001778:	ec53 2b10 	vmov	r2, r3, d0
 800177c:	4640      	mov	r0, r8
 800177e:	4649      	mov	r1, r9
 8001780:	f7fe fee6 	bl	8000550 <__aeabi_dmul>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4620      	mov	r0, r4
 800178a:	4629      	mov	r1, r5
 800178c:	f7fe fd2a 	bl	80001e4 <__adddf3>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f7ff f9b2 	bl	8000b00 <__aeabi_d2f>
 800179c:	4602      	mov	r2, r0
 800179e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017a0:	615a      	str	r2, [r3, #20]
			Tj->current_velo = Tj->a_max*time;
 80017a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	17da      	asrs	r2, r3, #31
 80017a8:	61bb      	str	r3, [r7, #24]
 80017aa:	61fa      	str	r2, [r7, #28]
 80017ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017ae:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80017b2:	462a      	mov	r2, r5
 80017b4:	fb02 f203 	mul.w	r2, r2, r3
 80017b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017ba:	4621      	mov	r1, r4
 80017bc:	fb01 f303 	mul.w	r3, r1, r3
 80017c0:	4413      	add	r3, r2
 80017c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017c4:	4621      	mov	r1, r4
 80017c6:	fba2 1201 	umull	r1, r2, r2, r1
 80017ca:	637a      	str	r2, [r7, #52]	; 0x34
 80017cc:	460a      	mov	r2, r1
 80017ce:	633a      	str	r2, [r7, #48]	; 0x30
 80017d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017d2:	4413      	add	r3, r2
 80017d4:	637b      	str	r3, [r7, #52]	; 0x34
 80017d6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80017da:	f7ff faa9 	bl	8000d30 <__aeabi_ul2f>
 80017de:	4602      	mov	r2, r0
 80017e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017e2:	619a      	str	r2, [r3, #24]
			Tj->current_acc = Tj->a_max;
 80017e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	ee07 3a90 	vmov	s15, r3
 80017ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017f2:	edc3 7a07 	vstr	s15, [r3, #28]
		break;
 80017f6:	e269      	b.n	8001ccc <TrajectoryEvaluator+0x5d4>
		else if((Tj->TimeAcc < time)&&(time < Tj->TotalTime))
 80017f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017fa:	ed93 8a09 	vldr	s16, [r3, #36]	; 0x24
 80017fe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001802:	f7ff fa95 	bl	8000d30 <__aeabi_ul2f>
 8001806:	ee07 0a90 	vmov	s15, r0
 800180a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800180e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001812:	d57e      	bpl.n	8001912 <TrajectoryEvaluator+0x21a>
 8001814:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001818:	f7ff fa8a 	bl	8000d30 <__aeabi_ul2f>
 800181c:	ee07 0a10 	vmov	s14, r0
 8001820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001822:	edd3 7a08 	vldr	s15, [r3, #32]
 8001826:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800182a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182e:	d570      	bpl.n	8001912 <TrajectoryEvaluator+0x21a>
			Tj->current_pos = Tj->start_pos + 0.5*Tj->a_max*pow(time,2);
 8001830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f7fe fe33 	bl	80004a0 <__aeabi_f2d>
 800183a:	4604      	mov	r4, r0
 800183c:	460d      	mov	r5, r1
 800183e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fe1a 	bl	800047c <__aeabi_i2d>
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	4b7c      	ldr	r3, [pc, #496]	; (8001a40 <TrajectoryEvaluator+0x348>)
 800184e:	f7fe fe7f 	bl	8000550 <__aeabi_dmul>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4690      	mov	r8, r2
 8001858:	4699      	mov	r9, r3
 800185a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800185e:	f7fe fe41 	bl	80004e4 <__aeabi_ul2d>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8001a38 <TrajectoryEvaluator+0x340>
 800186a:	ec43 2b10 	vmov	d0, r2, r3
 800186e:	f003 ff7b 	bl	8005768 <pow>
 8001872:	ec53 2b10 	vmov	r2, r3, d0
 8001876:	4640      	mov	r0, r8
 8001878:	4649      	mov	r1, r9
 800187a:	f7fe fe69 	bl	8000550 <__aeabi_dmul>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4620      	mov	r0, r4
 8001884:	4629      	mov	r1, r5
 8001886:	f7fe fcad 	bl	80001e4 <__adddf3>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4610      	mov	r0, r2
 8001890:	4619      	mov	r1, r3
 8001892:	f7ff f935 	bl	8000b00 <__aeabi_d2f>
 8001896:	4602      	mov	r2, r0
 8001898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800189a:	615a      	str	r2, [r3, #20]
			Tj->current_velo = Tj->a_max*Tj->TotalTime - Tj->a_max*time;
 800189c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	ee07 3a90 	vmov	s15, r3
 80018a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018aa:	edd3 7a08 	vldr	s15, [r3, #32]
 80018ae:	ee27 8a27 	vmul.f32	s16, s14, s15
 80018b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	17da      	asrs	r2, r3, #31
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	617a      	str	r2, [r7, #20]
 80018bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018be:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80018c2:	462a      	mov	r2, r5
 80018c4:	fb02 f203 	mul.w	r2, r2, r3
 80018c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018ca:	4621      	mov	r1, r4
 80018cc:	fb01 f303 	mul.w	r3, r1, r3
 80018d0:	4413      	add	r3, r2
 80018d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018d4:	4621      	mov	r1, r4
 80018d6:	fba2 1201 	umull	r1, r2, r2, r1
 80018da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018dc:	460a      	mov	r2, r1
 80018de:	62ba      	str	r2, [r7, #40]	; 0x28
 80018e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018e2:	4413      	add	r3, r2
 80018e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018ea:	f7ff fa21 	bl	8000d30 <__aeabi_ul2f>
 80018ee:	ee07 0a90 	vmov	s15, r0
 80018f2:	ee78 7a67 	vsub.f32	s15, s16, s15
 80018f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018f8:	edc3 7a06 	vstr	s15, [r3, #24]
			Tj->current_acc = -Tj->a_max;
 80018fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	425b      	negs	r3, r3
 8001902:	ee07 3a90 	vmov	s15, r3
 8001906:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800190a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800190c:	edc3 7a07 	vstr	s15, [r3, #28]
		break;
 8001910:	e1dc      	b.n	8001ccc <TrajectoryEvaluator+0x5d4>
		else if(time >= Tj->TotalTime)
 8001912:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001916:	f7ff fa0b 	bl	8000d30 <__aeabi_ul2f>
 800191a:	ee07 0a10 	vmov	s14, r0
 800191e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001920:	edd3 7a08 	vldr	s15, [r3, #32]
 8001924:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192c:	da00      	bge.n	8001930 <TrajectoryEvaluator+0x238>
		break;
 800192e:	e1cd      	b.n	8001ccc <TrajectoryEvaluator+0x5d4>
			Tj->complete = 1;
 8001930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001932:	2201      	movs	r2, #1
 8001934:	629a      	str	r2, [r3, #40]	; 0x28
			Tj->start_pos = Tj->final_pos;
 8001936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800193c:	601a      	str	r2, [r3, #0]
			Tj->current_pos = Tj->final_pos;
 800193e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001944:	615a      	str	r2, [r3, #20]
			Tj->current_velo = 0;
 8001946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	619a      	str	r2, [r3, #24]
			Tj->current_acc = 0;
 800194e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	61da      	str	r2, [r3, #28]
		break;
 8001956:	e1b9      	b.n	8001ccc <TrajectoryEvaluator+0x5d4>
		if(time <= Tj->TimeAcc)
 8001958:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800195c:	f7ff f9e8 	bl	8000d30 <__aeabi_ul2f>
 8001960:	ee07 0a10 	vmov	s14, r0
 8001964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001966:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800196a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800196e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001972:	d867      	bhi.n	8001a44 <TrajectoryEvaluator+0x34c>
			Tj->current_pos = Tj->start_pos + 0.5*Tj->a_max*pow(time,2);
 8001974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f7fe fd91 	bl	80004a0 <__aeabi_f2d>
 800197e:	4604      	mov	r4, r0
 8001980:	460d      	mov	r5, r1
 8001982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	4618      	mov	r0, r3
 8001988:	f7fe fd78 	bl	800047c <__aeabi_i2d>
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	4b2b      	ldr	r3, [pc, #172]	; (8001a40 <TrajectoryEvaluator+0x348>)
 8001992:	f7fe fddd 	bl	8000550 <__aeabi_dmul>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4690      	mov	r8, r2
 800199c:	4699      	mov	r9, r3
 800199e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80019a2:	f7fe fd9f 	bl	80004e4 <__aeabi_ul2d>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8001a38 <TrajectoryEvaluator+0x340>
 80019ae:	ec43 2b10 	vmov	d0, r2, r3
 80019b2:	f003 fed9 	bl	8005768 <pow>
 80019b6:	ec53 2b10 	vmov	r2, r3, d0
 80019ba:	4640      	mov	r0, r8
 80019bc:	4649      	mov	r1, r9
 80019be:	f7fe fdc7 	bl	8000550 <__aeabi_dmul>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4620      	mov	r0, r4
 80019c8:	4629      	mov	r1, r5
 80019ca:	f7fe fc0b 	bl	80001e4 <__adddf3>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4610      	mov	r0, r2
 80019d4:	4619      	mov	r1, r3
 80019d6:	f7ff f893 	bl	8000b00 <__aeabi_d2f>
 80019da:	4602      	mov	r2, r0
 80019dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019de:	615a      	str	r2, [r3, #20]
			Tj->current_velo = Tj->a_max*time;
 80019e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	17da      	asrs	r2, r3, #31
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	60fa      	str	r2, [r7, #12]
 80019ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ec:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019f0:	462a      	mov	r2, r5
 80019f2:	fb02 f203 	mul.w	r2, r2, r3
 80019f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019f8:	4621      	mov	r1, r4
 80019fa:	fb01 f303 	mul.w	r3, r1, r3
 80019fe:	4413      	add	r3, r2
 8001a00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a02:	4621      	mov	r1, r4
 8001a04:	fba2 1201 	umull	r1, r2, r2, r1
 8001a08:	627a      	str	r2, [r7, #36]	; 0x24
 8001a0a:	460a      	mov	r2, r1
 8001a0c:	623a      	str	r2, [r7, #32]
 8001a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a10:	4413      	add	r3, r2
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
 8001a14:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a18:	f7ff f98a 	bl	8000d30 <__aeabi_ul2f>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a20:	619a      	str	r2, [r3, #24]
			Tj->current_acc = Tj->a_max;
 8001a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	ee07 3a90 	vmov	s15, r3
 8001a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a30:	edc3 7a07 	vstr	s15, [r3, #28]
		break;
 8001a34:	e149      	b.n	8001cca <TrajectoryEvaluator+0x5d2>
 8001a36:	bf00      	nop
 8001a38:	00000000 	.word	0x00000000
 8001a3c:	40000000 	.word	0x40000000
 8001a40:	3fe00000 	.word	0x3fe00000
		else if ((Tj->TimeAcc < time) && (time < Tj->TotalTime - Tj->TimeAcc))
 8001a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a46:	ed93 8a09 	vldr	s16, [r3, #36]	; 0x24
 8001a4a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001a4e:	f7ff f96f 	bl	8000d30 <__aeabi_ul2f>
 8001a52:	ee07 0a90 	vmov	s15, r0
 8001a56:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5e:	f140 8083 	bpl.w	8001b68 <TrajectoryEvaluator+0x470>
 8001a62:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001a66:	f7ff f963 	bl	8000d30 <__aeabi_ul2f>
 8001a6a:	ee06 0a90 	vmov	s13, r0
 8001a6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a70:	ed93 7a08 	vldr	s14, [r3, #32]
 8001a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a76:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a7e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8001a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a86:	d56f      	bpl.n	8001b68 <TrajectoryEvaluator+0x470>
			Tj->current_pos = Tj->start_pos + 0.5*Tj->a_max*pow(Tj->TimeAcc,2) + Tj->a_max*Tj->TimeAcc*(time - Tj->TimeAcc);
 8001a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7fe fd07 	bl	80004a0 <__aeabi_f2d>
 8001a92:	4604      	mov	r4, r0
 8001a94:	460d      	mov	r5, r1
 8001a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe fcee 	bl	800047c <__aeabi_i2d>
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	4b90      	ldr	r3, [pc, #576]	; (8001ce8 <TrajectoryEvaluator+0x5f0>)
 8001aa6:	f7fe fd53 	bl	8000550 <__aeabi_dmul>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4690      	mov	r8, r2
 8001ab0:	4699      	mov	r9, r3
 8001ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fcf2 	bl	80004a0 <__aeabi_f2d>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	ed9f 1b87 	vldr	d1, [pc, #540]	; 8001ce0 <TrajectoryEvaluator+0x5e8>
 8001ac4:	ec43 2b10 	vmov	d0, r2, r3
 8001ac8:	f003 fe4e 	bl	8005768 <pow>
 8001acc:	ec53 2b10 	vmov	r2, r3, d0
 8001ad0:	4640      	mov	r0, r8
 8001ad2:	4649      	mov	r1, r9
 8001ad4:	f7fe fd3c 	bl	8000550 <__aeabi_dmul>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4620      	mov	r0, r4
 8001ade:	4629      	mov	r1, r5
 8001ae0:	f7fe fb80 	bl	80001e4 <__adddf3>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4614      	mov	r4, r2
 8001aea:	461d      	mov	r5, r3
 8001aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	ee07 3a90 	vmov	s15, r3
 8001af4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001afa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001afe:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001b02:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001b06:	f7ff f913 	bl	8000d30 <__aeabi_ul2f>
 8001b0a:	ee07 0a10 	vmov	s14, r0
 8001b0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b10:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b18:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001b1c:	ee17 0a90 	vmov	r0, s15
 8001b20:	f7fe fcbe 	bl	80004a0 <__aeabi_f2d>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4620      	mov	r0, r4
 8001b2a:	4629      	mov	r1, r5
 8001b2c:	f7fe fb5a 	bl	80001e4 <__adddf3>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4610      	mov	r0, r2
 8001b36:	4619      	mov	r1, r3
 8001b38:	f7fe ffe2 	bl	8000b00 <__aeabi_d2f>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b40:	615a      	str	r2, [r3, #20]
			Tj->current_velo = Tj->a_max*Tj->TimeAcc;
 8001b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	ee07 3a90 	vmov	s15, r3
 8001b4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b50:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b5a:	edc3 7a06 	vstr	s15, [r3, #24]
			Tj->current_acc = 0;
 8001b5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	61da      	str	r2, [r3, #28]
 8001b66:	e0b0      	b.n	8001cca <TrajectoryEvaluator+0x5d2>
		else if ((Tj->TotalTime - Tj->TimeAcc < time)&&(time < Tj->TotalTime))
 8001b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b6a:	ed93 7a08 	vldr	s14, [r3, #32]
 8001b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b70:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001b74:	ee37 8a67 	vsub.f32	s16, s14, s15
 8001b78:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001b7c:	f7ff f8d8 	bl	8000d30 <__aeabi_ul2f>
 8001b80:	ee07 0a90 	vmov	s15, r0
 8001b84:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8c:	d57a      	bpl.n	8001c84 <TrajectoryEvaluator+0x58c>
 8001b8e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001b92:	f7ff f8cd 	bl	8000d30 <__aeabi_ul2f>
 8001b96:	ee07 0a10 	vmov	s14, r0
 8001b9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b9c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ba0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba8:	d56c      	bpl.n	8001c84 <TrajectoryEvaluator+0x58c>
			Tj->current_pos = Tj->start_pos + 0.5*Tj->a_max*pow(time,2);
 8001baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fc76 	bl	80004a0 <__aeabi_f2d>
 8001bb4:	4604      	mov	r4, r0
 8001bb6:	460d      	mov	r5, r1
 8001bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe fc5d 	bl	800047c <__aeabi_i2d>
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	4b48      	ldr	r3, [pc, #288]	; (8001ce8 <TrajectoryEvaluator+0x5f0>)
 8001bc8:	f7fe fcc2 	bl	8000550 <__aeabi_dmul>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4690      	mov	r8, r2
 8001bd2:	4699      	mov	r9, r3
 8001bd4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001bd8:	f7fe fc84 	bl	80004e4 <__aeabi_ul2d>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 8001ce0 <TrajectoryEvaluator+0x5e8>
 8001be4:	ec43 2b10 	vmov	d0, r2, r3
 8001be8:	f003 fdbe 	bl	8005768 <pow>
 8001bec:	ec53 2b10 	vmov	r2, r3, d0
 8001bf0:	4640      	mov	r0, r8
 8001bf2:	4649      	mov	r1, r9
 8001bf4:	f7fe fcac 	bl	8000550 <__aeabi_dmul>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4620      	mov	r0, r4
 8001bfe:	4629      	mov	r1, r5
 8001c00:	f7fe faf0 	bl	80001e4 <__adddf3>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4610      	mov	r0, r2
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f7fe ff78 	bl	8000b00 <__aeabi_d2f>
 8001c10:	4602      	mov	r2, r0
 8001c12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c14:	615a      	str	r2, [r3, #20]
			Tj->current_velo = Tj->a_max*Tj->TotalTime - Tj->a_max*time;
 8001c16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	ee07 3a90 	vmov	s15, r3
 8001c1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c24:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c28:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	17da      	asrs	r2, r3, #31
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	607a      	str	r2, [r7, #4]
 8001c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c38:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c3c:	462a      	mov	r2, r5
 8001c3e:	fb02 f203 	mul.w	r2, r2, r3
 8001c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c44:	4621      	mov	r1, r4
 8001c46:	fb01 f303 	mul.w	r3, r1, r3
 8001c4a:	4413      	add	r3, r2
 8001c4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c4e:	4621      	mov	r1, r4
 8001c50:	fba2 ab01 	umull	sl, fp, r2, r1
 8001c54:	445b      	add	r3, fp
 8001c56:	469b      	mov	fp, r3
 8001c58:	4650      	mov	r0, sl
 8001c5a:	4659      	mov	r1, fp
 8001c5c:	f7ff f868 	bl	8000d30 <__aeabi_ul2f>
 8001c60:	ee07 0a90 	vmov	s15, r0
 8001c64:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c6a:	edc3 7a06 	vstr	s15, [r3, #24]
			Tj->current_acc = -Tj->a_max;
 8001c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	425b      	negs	r3, r3
 8001c74:	ee07 3a90 	vmov	s15, r3
 8001c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c7e:	edc3 7a07 	vstr	s15, [r3, #28]
 8001c82:	e022      	b.n	8001cca <TrajectoryEvaluator+0x5d2>
		else if(time >= Tj->TotalTime)
 8001c84:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001c88:	f7ff f852 	bl	8000d30 <__aeabi_ul2f>
 8001c8c:	ee07 0a10 	vmov	s14, r0
 8001c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c92:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9e:	da00      	bge.n	8001ca2 <TrajectoryEvaluator+0x5aa>
		break;
 8001ca0:	e013      	b.n	8001cca <TrajectoryEvaluator+0x5d2>
			Tj->complete = 1;
 8001ca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	629a      	str	r2, [r3, #40]	; 0x28
			Tj->start_pos = Tj->final_pos;
 8001ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cae:	601a      	str	r2, [r3, #0]
			Tj->current_pos = Tj->final_pos;
 8001cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cb6:	615a      	str	r2, [r3, #20]
			Tj->current_velo = 0;
 8001cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	619a      	str	r2, [r3, #24]
			Tj->current_acc = 0;
 8001cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	61da      	str	r2, [r3, #28]
		break;
 8001cc8:	e7ff      	b.n	8001cca <TrajectoryEvaluator+0x5d2>
 8001cca:	bf00      	nop
}
 8001ccc:	bf00      	nop
 8001cce:	3748      	adds	r7, #72	; 0x48
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	ecbd 8b02 	vpop	{d8}
 8001cd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cda:	bf00      	nop
 8001cdc:	f3af 8000 	nop.w
 8001ce0:	00000000 	.word	0x00000000
 8001ce4:	40000000 	.word	0x40000000
 8001ce8:	3fe00000 	.word	0x3fe00000

08001cec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cf0:	b084      	sub	sp, #16
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cf4:	f001 faba 	bl	800326c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cf8:	f000 f996 	bl	8002028 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cfc:	f000 fb9c 	bl	8002438 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001d00:	f000 fb70 	bl	80023e4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001d04:	f000 f9fa 	bl	80020fc <MX_TIM1_Init>
  MX_TIM2_Init();
 8001d08:	f000 fa7c 	bl	8002204 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001d0c:	f000 fb1c 	bl	8002348 <MX_TIM5_Init>
  MX_TIM3_Init();-
 8001d10:	f000 facc 	bl	80022ac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);//Start PWM
 8001d14:	2100      	movs	r1, #0
 8001d16:	488f      	ldr	r0, [pc, #572]	; (8001f54 <main+0x268>)
 8001d18:	f002 fb38 	bl	800438c <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2); //Start QEI
 8001d1c:	2104      	movs	r1, #4
 8001d1e:	488e      	ldr	r0, [pc, #568]	; (8001f58 <main+0x26c>)
 8001d20:	f002 fc8a 	bl	8004638 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8001d24:	488d      	ldr	r0, [pc, #564]	; (8001f5c <main+0x270>)
 8001d26:	f002 fa7f 	bl	8004228 <HAL_TIM_Base_Start_IT>

  InitKalmanStruct(&KF,Var_Q,Var_R);
 8001d2a:	4b8d      	ldr	r3, [pc, #564]	; (8001f60 <main+0x274>)
 8001d2c:	edd3 7a00 	vldr	s15, [r3]
 8001d30:	4b8c      	ldr	r3, [pc, #560]	; (8001f64 <main+0x278>)
 8001d32:	ed93 7a00 	vldr	s14, [r3]
 8001d36:	eef0 0a47 	vmov.f32	s1, s14
 8001d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d3e:	488a      	ldr	r0, [pc, #552]	; (8001f68 <main+0x27c>)
 8001d40:	f7ff f9be 	bl	80010c0 <InitKalmanStruct>
  InitReadEncoder(&ReadEncoderParam, 1000);
 8001d44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d48:	4888      	ldr	r0, [pc, #544]	; (8001f6c <main+0x280>)
 8001d4a:	f7ff fb3f 	bl	80013cc <InitReadEncoder>
  SetTrajectoryConstrainAndInit(&Traj, vmax, amax);
 8001d4e:	4b88      	ldr	r3, [pc, #544]	; (8001f70 <main+0x284>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a88      	ldr	r2, [pc, #544]	; (8001f74 <main+0x288>)
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	4619      	mov	r1, r3
 8001d58:	4887      	ldr	r0, [pc, #540]	; (8001f78 <main+0x28c>)
 8001d5a:	f7ff fbdd 	bl	8001518 <SetTrajectoryConstrainAndInit>

  arm_mat_init_f32(&mat_A, 3, 3,KF.A);//3x3
 8001d5e:	4b87      	ldr	r3, [pc, #540]	; (8001f7c <main+0x290>)
 8001d60:	2203      	movs	r2, #3
 8001d62:	2103      	movs	r1, #3
 8001d64:	4886      	ldr	r0, [pc, #536]	; (8001f80 <main+0x294>)
 8001d66:	f000 fdc5 	bl	80028f4 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_x_hat, 3, 1, KF.x_hat);
 8001d6a:	4b7f      	ldr	r3, [pc, #508]	; (8001f68 <main+0x27c>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	2103      	movs	r1, #3
 8001d70:	4884      	ldr	r0, [pc, #528]	; (8001f84 <main+0x298>)
 8001d72:	f000 fdbf 	bl	80028f4 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_x_hat_minus, 3, 1, KF.x_hat_minus);
 8001d76:	4b84      	ldr	r3, [pc, #528]	; (8001f88 <main+0x29c>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	2103      	movs	r1, #3
 8001d7c:	4883      	ldr	r0, [pc, #524]	; (8001f8c <main+0x2a0>)
 8001d7e:	f000 fdb9 	bl	80028f4 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_B, 3, 1, KF.B);
 8001d82:	4b83      	ldr	r3, [pc, #524]	; (8001f90 <main+0x2a4>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	2103      	movs	r1, #3
 8001d88:	4882      	ldr	r0, [pc, #520]	; (8001f94 <main+0x2a8>)
 8001d8a:	f000 fdb3 	bl	80028f4 <arm_mat_init_f32>
  //arm_mat_init_f32(&mat_u, 1, 1, NULL);  // Set the input control vector if needed
  arm_mat_init_f32(&mat_P, 3, 3, KF.P);//3x3
 8001d8e:	4b82      	ldr	r3, [pc, #520]	; (8001f98 <main+0x2ac>)
 8001d90:	2203      	movs	r2, #3
 8001d92:	2103      	movs	r1, #3
 8001d94:	4881      	ldr	r0, [pc, #516]	; (8001f9c <main+0x2b0>)
 8001d96:	f000 fdad 	bl	80028f4 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_P_minus, 3, 3, KF.P_minus);//3x3
 8001d9a:	4b81      	ldr	r3, [pc, #516]	; (8001fa0 <main+0x2b4>)
 8001d9c:	2203      	movs	r2, #3
 8001d9e:	2103      	movs	r1, #3
 8001da0:	4880      	ldr	r0, [pc, #512]	; (8001fa4 <main+0x2b8>)
 8001da2:	f000 fda7 	bl	80028f4 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_Q, 3, 3,KF.Q);//3x3
 8001da6:	4b80      	ldr	r3, [pc, #512]	; (8001fa8 <main+0x2bc>)
 8001da8:	2203      	movs	r2, #3
 8001daa:	2103      	movs	r1, #3
 8001dac:	487f      	ldr	r0, [pc, #508]	; (8001fac <main+0x2c0>)
 8001dae:	f000 fda1 	bl	80028f4 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_C, 1, 3, KF.C);//1x3
 8001db2:	4b7f      	ldr	r3, [pc, #508]	; (8001fb0 <main+0x2c4>)
 8001db4:	2203      	movs	r2, #3
 8001db6:	2101      	movs	r1, #1
 8001db8:	487e      	ldr	r0, [pc, #504]	; (8001fb4 <main+0x2c8>)
 8001dba:	f000 fd9b 	bl	80028f4 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_R, 1, 1, &KF.R);//1x1
 8001dbe:	4b7e      	ldr	r3, [pc, #504]	; (8001fb8 <main+0x2cc>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	487d      	ldr	r0, [pc, #500]	; (8001fbc <main+0x2d0>)
 8001dc6:	f000 fd95 	bl	80028f4 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_S, 1, 1, KF.S);//1x1
 8001dca:	4b7d      	ldr	r3, [pc, #500]	; (8001fc0 <main+0x2d4>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	2101      	movs	r1, #1
 8001dd0:	487c      	ldr	r0, [pc, #496]	; (8001fc4 <main+0x2d8>)
 8001dd2:	f000 fd8f 	bl	80028f4 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_K, 3, 1, KF.K);//3x1
 8001dd6:	4b7c      	ldr	r3, [pc, #496]	; (8001fc8 <main+0x2dc>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	2103      	movs	r1, #3
 8001ddc:	487b      	ldr	r0, [pc, #492]	; (8001fcc <main+0x2e0>)
 8001dde:	f000 fd89 	bl	80028f4 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_temp3x3A, 3, 3, KF.temp3x3A);//3x3
 8001de2:	4b7b      	ldr	r3, [pc, #492]	; (8001fd0 <main+0x2e4>)
 8001de4:	2203      	movs	r2, #3
 8001de6:	2103      	movs	r1, #3
 8001de8:	487a      	ldr	r0, [pc, #488]	; (8001fd4 <main+0x2e8>)
 8001dea:	f000 fd83 	bl	80028f4 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_temp3x3B, 3, 3, KF.temp3x3B);//3x3
 8001dee:	4b7a      	ldr	r3, [pc, #488]	; (8001fd8 <main+0x2ec>)
 8001df0:	2203      	movs	r2, #3
 8001df2:	2103      	movs	r1, #3
 8001df4:	4879      	ldr	r0, [pc, #484]	; (8001fdc <main+0x2f0>)
 8001df6:	f000 fd7d 	bl	80028f4 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_temp3x1, 3, 1, KF.temp3x1);//3x1
 8001dfa:	4b79      	ldr	r3, [pc, #484]	; (8001fe0 <main+0x2f4>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	2103      	movs	r1, #3
 8001e00:	4878      	ldr	r0, [pc, #480]	; (8001fe4 <main+0x2f8>)
 8001e02:	f000 fd77 	bl	80028f4 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_temp1x3, 1, 3, KF.temp1x3);//1x3
 8001e06:	4b78      	ldr	r3, [pc, #480]	; (8001fe8 <main+0x2fc>)
 8001e08:	2203      	movs	r2, #3
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	4877      	ldr	r0, [pc, #476]	; (8001fec <main+0x300>)
 8001e0e:	f000 fd71 	bl	80028f4 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_temp1x1, 1, 1, &KF.temp1x1);//1x1
 8001e12:	4b77      	ldr	r3, [pc, #476]	; (8001ff0 <main+0x304>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	2101      	movs	r1, #1
 8001e18:	4876      	ldr	r0, [pc, #472]	; (8001ff4 <main+0x308>)
 8001e1a:	f000 fd6b 	bl	80028f4 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_G, 3, 1, KF.G);//3x1
 8001e1e:	4b76      	ldr	r3, [pc, #472]	; (8001ff8 <main+0x30c>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	2103      	movs	r1, #3
 8001e24:	4875      	ldr	r0, [pc, #468]	; (8001ffc <main+0x310>)
 8001e26:	f000 fd65 	bl	80028f4 <arm_mat_init_f32>
  arm_mat_init_f32(&mat_GT, 1, 3, KF.GT);//1x3
 8001e2a:	4b75      	ldr	r3, [pc, #468]	; (8002000 <main+0x314>)
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	2101      	movs	r1, #1
 8001e30:	4874      	ldr	r0, [pc, #464]	; (8002004 <main+0x318>)
 8001e32:	f000 fd5f 	bl	80028f4 <arm_mat_init_f32>
  arm_mat_init_f32(&eye, 3, 3, KF.I);//1x3
 8001e36:	4b74      	ldr	r3, [pc, #464]	; (8002008 <main+0x31c>)
 8001e38:	2203      	movs	r2, #3
 8001e3a:	2103      	movs	r1, #3
 8001e3c:	4873      	ldr	r0, [pc, #460]	; (800200c <main+0x320>)
 8001e3e:	f000 fd59 	bl	80028f4 <arm_mat_init_f32>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint64_t timestamp = 0;

	  int64_t currentTime = micros();
 8001e42:	f7ff faa9 	bl	8001398 <micros>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	  if(currentTime > timestamp)
 8001e4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e52:	496f      	ldr	r1, [pc, #444]	; (8002010 <main+0x324>)
 8001e54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e58:	4290      	cmp	r0, r2
 8001e5a:	eb71 0303 	sbcs.w	r3, r1, r3
 8001e5e:	d261      	bcs.n	8001f24 <main+0x238>
	  {
		  switch(Traj.complete)
 8001e60:	4b45      	ldr	r3, [pc, #276]	; (8001f78 <main+0x28c>)
 8001e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d026      	beq.n	8001eb6 <main+0x1ca>
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	dc33      	bgt.n	8001ed4 <main+0x1e8>
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00c      	beq.n	8001e8a <main+0x19e>
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d12f      	bne.n	8001ed4 <main+0x1e8>
		  {
		  case 1:	//complete
			  time = 0;
 8001e74:	4967      	ldr	r1, [pc, #412]	; (8002014 <main+0x328>)
 8001e76:	f04f 0200 	mov.w	r2, #0
 8001e7a:	f04f 0300 	mov.w	r3, #0
 8001e7e:	e9c1 2300 	strd	r2, r3, [r1]
			  TrajectoryGenerator(&Traj);
 8001e82:	483d      	ldr	r0, [pc, #244]	; (8001f78 <main+0x28c>)
 8001e84:	f7ff fb68 	bl	8001558 <TrajectoryGenerator>
			  break;
 8001e88:	e024      	b.n	8001ed4 <main+0x1e8>
		  case 0:	//incomplete
			  TrajectoryEvaluator(&Traj,time);
 8001e8a:	4b62      	ldr	r3, [pc, #392]	; (8002014 <main+0x328>)
 8001e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e90:	4839      	ldr	r0, [pc, #228]	; (8001f78 <main+0x28c>)
 8001e92:	f7ff fc31 	bl	80016f8 <TrajectoryEvaluator>
			  time += ReadEncoderParam.samplingTime;
 8001e96:	4b35      	ldr	r3, [pc, #212]	; (8001f6c <main+0x280>)
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	461c      	mov	r4, r3
 8001e9e:	4615      	mov	r5, r2
 8001ea0:	4b5c      	ldr	r3, [pc, #368]	; (8002014 <main+0x328>)
 8001ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea6:	eb14 0a02 	adds.w	sl, r4, r2
 8001eaa:	eb45 0b03 	adc.w	fp, r5, r3
 8001eae:	4b59      	ldr	r3, [pc, #356]	; (8002014 <main+0x328>)
 8001eb0:	e9c3 ab00 	strd	sl, fp, [r3]
			  break;
 8001eb4:	e00e      	b.n	8001ed4 <main+0x1e8>
		  case 2:	//idle
			  if(Traj.final_pos != Traj.start_pos)
 8001eb6:	4b30      	ldr	r3, [pc, #192]	; (8001f78 <main+0x28c>)
 8001eb8:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ebc:	4b2e      	ldr	r3, [pc, #184]	; (8001f78 <main+0x28c>)
 8001ebe:	edd3 7a00 	vldr	s15, [r3]
 8001ec2:	eeb4 7a67 	vcmp.f32	s14, s15
 8001ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eca:	d002      	beq.n	8001ed2 <main+0x1e6>
			  	{
				  Traj.complete = 1;
 8001ecc:	4b2a      	ldr	r3, [pc, #168]	; (8001f78 <main+0x28c>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	629a      	str	r2, [r3, #40]	; 0x28
			  	}
			  break;
 8001ed2:	bf00      	nop
		  }
		  timestamp = currentTime + ReadEncoderParam.samplingTime;
 8001ed4:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <main+0x280>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	4698      	mov	r8, r3
 8001edc:	4691      	mov	r9, r2
 8001ede:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ee2:	eb18 0102 	adds.w	r1, r8, r2
 8001ee6:	6039      	str	r1, [r7, #0]
 8001ee8:	eb49 0303 	adc.w	r3, r9, r3
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ef2:	4947      	ldr	r1, [pc, #284]	; (8002010 <main+0x324>)
 8001ef4:	e9c1 2300 	strd	r2, r3, [r1]
		  QEIEncoderPositionVelocity_Update();
 8001ef8:	f7ff fa8a 	bl	8001410 <QEIEncoderPositionVelocity_Update>
		  ReadPos = __HAL_TIM_GET_COUNTER(&htim2);
 8001efc:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <main+0x26c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	ee07 3a90 	vmov	s15, r3
 8001f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f0a:	4b43      	ldr	r3, [pc, #268]	; (8002018 <main+0x32c>)
 8001f0c:	edc3 7a00 	vstr	s15, [r3]
		  KF.z = QEIData.QEIVelocity;
 8001f10:	4b42      	ldr	r3, [pc, #264]	; (800201c <main+0x330>)
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	4a14      	ldr	r2, [pc, #80]	; (8001f68 <main+0x27c>)
 8001f16:	65d3      	str	r3, [r2, #92]	; 0x5c
		  kalman_filter();
 8001f18:	f7ff f9a2 	bl	8001260 <kalman_filter>
		  EstimateVelocity = KF.x_hat[1];
 8001f1c:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <main+0x27c>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	4a3f      	ldr	r2, [pc, #252]	; (8002020 <main+0x334>)
 8001f22:	6013      	str	r3, [r2, #0]
	  }
	  //--------------------------------------------------------------------PWM
	  ReadEncoderParam.Pulse_Compare = ReadEncoderParam.MotorSetDuty * 10;
 8001f24:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <main+0x280>)
 8001f26:	7c1b      	ldrb	r3, [r3, #16]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	0092      	lsls	r2, r2, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <main+0x280>)
 8001f36:	825a      	strh	r2, [r3, #18]
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,ReadEncoderParam.Pulse_Compare);
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <main+0x280>)
 8001f3a:	8a5a      	ldrh	r2, [r3, #18]
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <main+0x268>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, ReadEncoderParam.DIR);
 8001f42:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <main+0x280>)
 8001f44:	7d1b      	ldrb	r3, [r3, #20]
 8001f46:	461a      	mov	r2, r3
 8001f48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f4c:	4835      	ldr	r0, [pc, #212]	; (8002024 <main+0x338>)
 8001f4e:	f001 fc69 	bl	8003824 <HAL_GPIO_WritePin>
  {
 8001f52:	e776      	b.n	8001e42 <main+0x156>
 8001f54:	2000009c 	.word	0x2000009c
 8001f58:	200000e4 	.word	0x200000e4
 8001f5c:	20000174 	.word	0x20000174
 8001f60:	20000004 	.word	0x20000004
 8001f64:	20000000 	.word	0x20000000
 8001f68:	20000200 	.word	0x20000200
 8001f6c:	20000418 	.word	0x20000418
 8001f70:	20000008 	.word	0x20000008
 8001f74:	2000000c 	.word	0x2000000c
 8001f78:	20000460 	.word	0x20000460
 8001f7c:	20000260 	.word	0x20000260
 8001f80:	20000380 	.word	0x20000380
 8001f84:	20000388 	.word	0x20000388
 8001f88:	200002dc 	.word	0x200002dc
 8001f8c:	20000390 	.word	0x20000390
 8001f90:	20000284 	.word	0x20000284
 8001f94:	20000398 	.word	0x20000398
 8001f98:	2000020c 	.word	0x2000020c
 8001f9c:	200003b8 	.word	0x200003b8
 8001fa0:	200002e8 	.word	0x200002e8
 8001fa4:	200003c0 	.word	0x200003c0
 8001fa8:	20000230 	.word	0x20000230
 8001fac:	200003c8 	.word	0x200003c8
 8001fb0:	20000290 	.word	0x20000290
 8001fb4:	200003d0 	.word	0x200003d0
 8001fb8:	20000254 	.word	0x20000254
 8001fbc:	200003d8 	.word	0x200003d8
 8001fc0:	2000030c 	.word	0x2000030c
 8001fc4:	200003e0 	.word	0x200003e0
 8001fc8:	20000310 	.word	0x20000310
 8001fcc:	200003e8 	.word	0x200003e8
 8001fd0:	2000031c 	.word	0x2000031c
 8001fd4:	200003f0 	.word	0x200003f0
 8001fd8:	20000340 	.word	0x20000340
 8001fdc:	200003f8 	.word	0x200003f8
 8001fe0:	20000364 	.word	0x20000364
 8001fe4:	20000400 	.word	0x20000400
 8001fe8:	20000370 	.word	0x20000370
 8001fec:	20000408 	.word	0x20000408
 8001ff0:	2000037c 	.word	0x2000037c
 8001ff4:	20000410 	.word	0x20000410
 8001ff8:	200002a0 	.word	0x200002a0
 8001ffc:	200003a8 	.word	0x200003a8
 8002000:	200002ac 	.word	0x200002ac
 8002004:	200003a0 	.word	0x200003a0
 8002008:	200002b8 	.word	0x200002b8
 800200c:	200003b0 	.word	0x200003b0
 8002010:	20000498 	.word	0x20000498
 8002014:	20000490 	.word	0x20000490
 8002018:	20000458 	.word	0x20000458
 800201c:	20000430 	.word	0x20000430
 8002020:	2000045c 	.word	0x2000045c
 8002024:	40020400 	.word	0x40020400

08002028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b094      	sub	sp, #80	; 0x50
 800202c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800202e:	f107 0320 	add.w	r3, r7, #32
 8002032:	2230      	movs	r2, #48	; 0x30
 8002034:	2100      	movs	r1, #0
 8002036:	4618      	mov	r0, r3
 8002038:	f003 fb8e 	bl	8005758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800203c:	f107 030c 	add.w	r3, r7, #12
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800204c:	2300      	movs	r3, #0
 800204e:	60bb      	str	r3, [r7, #8]
 8002050:	4b28      	ldr	r3, [pc, #160]	; (80020f4 <SystemClock_Config+0xcc>)
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	4a27      	ldr	r2, [pc, #156]	; (80020f4 <SystemClock_Config+0xcc>)
 8002056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205a:	6413      	str	r3, [r2, #64]	; 0x40
 800205c:	4b25      	ldr	r3, [pc, #148]	; (80020f4 <SystemClock_Config+0xcc>)
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002068:	2300      	movs	r3, #0
 800206a:	607b      	str	r3, [r7, #4]
 800206c:	4b22      	ldr	r3, [pc, #136]	; (80020f8 <SystemClock_Config+0xd0>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a21      	ldr	r2, [pc, #132]	; (80020f8 <SystemClock_Config+0xd0>)
 8002072:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	4b1f      	ldr	r3, [pc, #124]	; (80020f8 <SystemClock_Config+0xd0>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002080:	607b      	str	r3, [r7, #4]
 8002082:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002084:	2302      	movs	r3, #2
 8002086:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002088:	2301      	movs	r3, #1
 800208a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800208c:	2310      	movs	r3, #16
 800208e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002090:	2302      	movs	r3, #2
 8002092:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002094:	2300      	movs	r3, #0
 8002096:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002098:	2310      	movs	r3, #16
 800209a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800209c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80020a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80020a2:	2304      	movs	r3, #4
 80020a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80020a6:	2304      	movs	r3, #4
 80020a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020aa:	f107 0320 	add.w	r3, r7, #32
 80020ae:	4618      	mov	r0, r3
 80020b0:	f001 fbd2 	bl	8003858 <HAL_RCC_OscConfig>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80020ba:	f000 fa2b 	bl	8002514 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020be:	230f      	movs	r3, #15
 80020c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020c2:	2302      	movs	r3, #2
 80020c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020d4:	f107 030c 	add.w	r3, r7, #12
 80020d8:	2102      	movs	r1, #2
 80020da:	4618      	mov	r0, r3
 80020dc:	f001 fe34 	bl	8003d48 <HAL_RCC_ClockConfig>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80020e6:	f000 fa15 	bl	8002514 <Error_Handler>
  }
}
 80020ea:	bf00      	nop
 80020ec:	3750      	adds	r7, #80	; 0x50
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40007000 	.word	0x40007000

080020fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b092      	sub	sp, #72	; 0x48
 8002100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002102:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800210c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]
 800211c:	615a      	str	r2, [r3, #20]
 800211e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002120:	1d3b      	adds	r3, r7, #4
 8002122:	2220      	movs	r2, #32
 8002124:	2100      	movs	r1, #0
 8002126:	4618      	mov	r0, r3
 8002128:	f003 fb16 	bl	8005758 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800212c:	4b33      	ldr	r3, [pc, #204]	; (80021fc <MX_TIM1_Init+0x100>)
 800212e:	4a34      	ldr	r2, [pc, #208]	; (8002200 <MX_TIM1_Init+0x104>)
 8002130:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8002132:	4b32      	ldr	r3, [pc, #200]	; (80021fc <MX_TIM1_Init+0x100>)
 8002134:	2253      	movs	r2, #83	; 0x53
 8002136:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002138:	4b30      	ldr	r3, [pc, #192]	; (80021fc <MX_TIM1_Init+0x100>)
 800213a:	2200      	movs	r2, #0
 800213c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800213e:	4b2f      	ldr	r3, [pc, #188]	; (80021fc <MX_TIM1_Init+0x100>)
 8002140:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002144:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002146:	4b2d      	ldr	r3, [pc, #180]	; (80021fc <MX_TIM1_Init+0x100>)
 8002148:	2200      	movs	r2, #0
 800214a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800214c:	4b2b      	ldr	r3, [pc, #172]	; (80021fc <MX_TIM1_Init+0x100>)
 800214e:	2200      	movs	r2, #0
 8002150:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002152:	4b2a      	ldr	r3, [pc, #168]	; (80021fc <MX_TIM1_Init+0x100>)
 8002154:	2200      	movs	r2, #0
 8002156:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002158:	4828      	ldr	r0, [pc, #160]	; (80021fc <MX_TIM1_Init+0x100>)
 800215a:	f002 f8c7 	bl	80042ec <HAL_TIM_PWM_Init>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002164:	f000 f9d6 	bl	8002514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002168:	2300      	movs	r3, #0
 800216a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800216c:	2300      	movs	r3, #0
 800216e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002170:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002174:	4619      	mov	r1, r3
 8002176:	4821      	ldr	r0, [pc, #132]	; (80021fc <MX_TIM1_Init+0x100>)
 8002178:	f002 ff42 	bl	8005000 <HAL_TIMEx_MasterConfigSynchronization>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002182:	f000 f9c7 	bl	8002514 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002186:	2360      	movs	r3, #96	; 0x60
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 800218a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800218e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002190:	2300      	movs	r3, #0
 8002192:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002194:	2300      	movs	r3, #0
 8002196:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002198:	2300      	movs	r3, #0
 800219a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800219c:	2300      	movs	r3, #0
 800219e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021a0:	2300      	movs	r3, #0
 80021a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a8:	2200      	movs	r2, #0
 80021aa:	4619      	mov	r1, r3
 80021ac:	4813      	ldr	r0, [pc, #76]	; (80021fc <MX_TIM1_Init+0x100>)
 80021ae:	f002 fad1 	bl	8004754 <HAL_TIM_PWM_ConfigChannel>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80021b8:	f000 f9ac 	bl	8002514 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021bc:	2300      	movs	r3, #0
 80021be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021c0:	2300      	movs	r3, #0
 80021c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021c4:	2300      	movs	r3, #0
 80021c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021d6:	2300      	movs	r3, #0
 80021d8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021da:	1d3b      	adds	r3, r7, #4
 80021dc:	4619      	mov	r1, r3
 80021de:	4807      	ldr	r0, [pc, #28]	; (80021fc <MX_TIM1_Init+0x100>)
 80021e0:	f002 ff7c 	bl	80050dc <HAL_TIMEx_ConfigBreakDeadTime>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 80021ea:	f000 f993 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80021ee:	4803      	ldr	r0, [pc, #12]	; (80021fc <MX_TIM1_Init+0x100>)
 80021f0:	f000 fa5e 	bl	80026b0 <HAL_TIM_MspPostInit>

}
 80021f4:	bf00      	nop
 80021f6:	3748      	adds	r7, #72	; 0x48
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	2000009c 	.word	0x2000009c
 8002200:	40010000 	.word	0x40010000

08002204 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08c      	sub	sp, #48	; 0x30
 8002208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800220a:	f107 030c 	add.w	r3, r7, #12
 800220e:	2224      	movs	r2, #36	; 0x24
 8002210:	2100      	movs	r1, #0
 8002212:	4618      	mov	r0, r3
 8002214:	f003 faa0 	bl	8005758 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002218:	1d3b      	adds	r3, r7, #4
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002220:	4b21      	ldr	r3, [pc, #132]	; (80022a8 <MX_TIM2_Init+0xa4>)
 8002222:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002226:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002228:	4b1f      	ldr	r3, [pc, #124]	; (80022a8 <MX_TIM2_Init+0xa4>)
 800222a:	2200      	movs	r2, #0
 800222c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800222e:	4b1e      	ldr	r3, [pc, #120]	; (80022a8 <MX_TIM2_Init+0xa4>)
 8002230:	2200      	movs	r2, #0
 8002232:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002234:	4b1c      	ldr	r3, [pc, #112]	; (80022a8 <MX_TIM2_Init+0xa4>)
 8002236:	f04f 32ff 	mov.w	r2, #4294967295
 800223a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800223c:	4b1a      	ldr	r3, [pc, #104]	; (80022a8 <MX_TIM2_Init+0xa4>)
 800223e:	2200      	movs	r2, #0
 8002240:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002242:	4b19      	ldr	r3, [pc, #100]	; (80022a8 <MX_TIM2_Init+0xa4>)
 8002244:	2200      	movs	r2, #0
 8002246:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002248:	2303      	movs	r3, #3
 800224a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800224c:	2300      	movs	r3, #0
 800224e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002250:	2301      	movs	r3, #1
 8002252:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002254:	2300      	movs	r3, #0
 8002256:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800225c:	2300      	movs	r3, #0
 800225e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002260:	2301      	movs	r3, #1
 8002262:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002264:	2300      	movs	r3, #0
 8002266:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800226c:	f107 030c 	add.w	r3, r7, #12
 8002270:	4619      	mov	r1, r3
 8002272:	480d      	ldr	r0, [pc, #52]	; (80022a8 <MX_TIM2_Init+0xa4>)
 8002274:	f002 f93a 	bl	80044ec <HAL_TIM_Encoder_Init>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800227e:	f000 f949 	bl	8002514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002282:	2300      	movs	r3, #0
 8002284:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002286:	2300      	movs	r3, #0
 8002288:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800228a:	1d3b      	adds	r3, r7, #4
 800228c:	4619      	mov	r1, r3
 800228e:	4806      	ldr	r0, [pc, #24]	; (80022a8 <MX_TIM2_Init+0xa4>)
 8002290:	f002 feb6 	bl	8005000 <HAL_TIMEx_MasterConfigSynchronization>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800229a:	f000 f93b 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800229e:	bf00      	nop
 80022a0:	3730      	adds	r7, #48	; 0x30
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	200000e4 	.word	0x200000e4

080022ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022b2:	f107 0308 	add.w	r3, r7, #8
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	605a      	str	r2, [r3, #4]
 80022bc:	609a      	str	r2, [r3, #8]
 80022be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022c0:	463b      	mov	r3, r7
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022c8:	4b1d      	ldr	r3, [pc, #116]	; (8002340 <MX_TIM3_Init+0x94>)
 80022ca:	4a1e      	ldr	r2, [pc, #120]	; (8002344 <MX_TIM3_Init+0x98>)
 80022cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80022ce:	4b1c      	ldr	r3, [pc, #112]	; (8002340 <MX_TIM3_Init+0x94>)
 80022d0:	2253      	movs	r2, #83	; 0x53
 80022d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d4:	4b1a      	ldr	r3, [pc, #104]	; (8002340 <MX_TIM3_Init+0x94>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80022da:	4b19      	ldr	r3, [pc, #100]	; (8002340 <MX_TIM3_Init+0x94>)
 80022dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022e2:	4b17      	ldr	r3, [pc, #92]	; (8002340 <MX_TIM3_Init+0x94>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022e8:	4b15      	ldr	r3, [pc, #84]	; (8002340 <MX_TIM3_Init+0x94>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022ee:	4814      	ldr	r0, [pc, #80]	; (8002340 <MX_TIM3_Init+0x94>)
 80022f0:	f001 ff4a 	bl	8004188 <HAL_TIM_Base_Init>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80022fa:	f000 f90b 	bl	8002514 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002302:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002304:	f107 0308 	add.w	r3, r7, #8
 8002308:	4619      	mov	r1, r3
 800230a:	480d      	ldr	r0, [pc, #52]	; (8002340 <MX_TIM3_Init+0x94>)
 800230c:	f002 fae4 	bl	80048d8 <HAL_TIM_ConfigClockSource>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002316:	f000 f8fd 	bl	8002514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800231a:	2300      	movs	r3, #0
 800231c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800231e:	2300      	movs	r3, #0
 8002320:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002322:	463b      	mov	r3, r7
 8002324:	4619      	mov	r1, r3
 8002326:	4806      	ldr	r0, [pc, #24]	; (8002340 <MX_TIM3_Init+0x94>)
 8002328:	f002 fe6a 	bl	8005000 <HAL_TIMEx_MasterConfigSynchronization>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002332:	f000 f8ef 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002336:	bf00      	nop
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	2000012c 	.word	0x2000012c
 8002344:	40000400 	.word	0x40000400

08002348 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800234e:	f107 0308 	add.w	r3, r7, #8
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	605a      	str	r2, [r3, #4]
 8002358:	609a      	str	r2, [r3, #8]
 800235a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800235c:	463b      	mov	r3, r7
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002364:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <MX_TIM5_Init+0x94>)
 8002366:	4a1e      	ldr	r2, [pc, #120]	; (80023e0 <MX_TIM5_Init+0x98>)
 8002368:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 800236a:	4b1c      	ldr	r3, [pc, #112]	; (80023dc <MX_TIM5_Init+0x94>)
 800236c:	2253      	movs	r2, #83	; 0x53
 800236e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002370:	4b1a      	ldr	r3, [pc, #104]	; (80023dc <MX_TIM5_Init+0x94>)
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002376:	4b19      	ldr	r3, [pc, #100]	; (80023dc <MX_TIM5_Init+0x94>)
 8002378:	f04f 32ff 	mov.w	r2, #4294967295
 800237c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800237e:	4b17      	ldr	r3, [pc, #92]	; (80023dc <MX_TIM5_Init+0x94>)
 8002380:	2200      	movs	r2, #0
 8002382:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002384:	4b15      	ldr	r3, [pc, #84]	; (80023dc <MX_TIM5_Init+0x94>)
 8002386:	2200      	movs	r2, #0
 8002388:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800238a:	4814      	ldr	r0, [pc, #80]	; (80023dc <MX_TIM5_Init+0x94>)
 800238c:	f001 fefc 	bl	8004188 <HAL_TIM_Base_Init>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002396:	f000 f8bd 	bl	8002514 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800239a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800239e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80023a0:	f107 0308 	add.w	r3, r7, #8
 80023a4:	4619      	mov	r1, r3
 80023a6:	480d      	ldr	r0, [pc, #52]	; (80023dc <MX_TIM5_Init+0x94>)
 80023a8:	f002 fa96 	bl	80048d8 <HAL_TIM_ConfigClockSource>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80023b2:	f000 f8af 	bl	8002514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b6:	2300      	movs	r3, #0
 80023b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ba:	2300      	movs	r3, #0
 80023bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80023be:	463b      	mov	r3, r7
 80023c0:	4619      	mov	r1, r3
 80023c2:	4806      	ldr	r0, [pc, #24]	; (80023dc <MX_TIM5_Init+0x94>)
 80023c4:	f002 fe1c 	bl	8005000 <HAL_TIMEx_MasterConfigSynchronization>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80023ce:	f000 f8a1 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80023d2:	bf00      	nop
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000174 	.word	0x20000174
 80023e0:	40000c00 	.word	0x40000c00

080023e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023e8:	4b11      	ldr	r3, [pc, #68]	; (8002430 <MX_USART2_UART_Init+0x4c>)
 80023ea:	4a12      	ldr	r2, [pc, #72]	; (8002434 <MX_USART2_UART_Init+0x50>)
 80023ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023ee:	4b10      	ldr	r3, [pc, #64]	; (8002430 <MX_USART2_UART_Init+0x4c>)
 80023f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023f6:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <MX_USART2_UART_Init+0x4c>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023fc:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <MX_USART2_UART_Init+0x4c>)
 80023fe:	2200      	movs	r2, #0
 8002400:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002402:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <MX_USART2_UART_Init+0x4c>)
 8002404:	2200      	movs	r2, #0
 8002406:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002408:	4b09      	ldr	r3, [pc, #36]	; (8002430 <MX_USART2_UART_Init+0x4c>)
 800240a:	220c      	movs	r2, #12
 800240c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800240e:	4b08      	ldr	r3, [pc, #32]	; (8002430 <MX_USART2_UART_Init+0x4c>)
 8002410:	2200      	movs	r2, #0
 8002412:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002414:	4b06      	ldr	r3, [pc, #24]	; (8002430 <MX_USART2_UART_Init+0x4c>)
 8002416:	2200      	movs	r2, #0
 8002418:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800241a:	4805      	ldr	r0, [pc, #20]	; (8002430 <MX_USART2_UART_Init+0x4c>)
 800241c:	f002 feb0 	bl	8005180 <HAL_UART_Init>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002426:	f000 f875 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	200001bc 	.word	0x200001bc
 8002434:	40004400 	.word	0x40004400

08002438 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08a      	sub	sp, #40	; 0x28
 800243c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800243e:	f107 0314 	add.w	r3, r7, #20
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	605a      	str	r2, [r3, #4]
 8002448:	609a      	str	r2, [r3, #8]
 800244a:	60da      	str	r2, [r3, #12]
 800244c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	613b      	str	r3, [r7, #16]
 8002452:	4b2d      	ldr	r3, [pc, #180]	; (8002508 <MX_GPIO_Init+0xd0>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	4a2c      	ldr	r2, [pc, #176]	; (8002508 <MX_GPIO_Init+0xd0>)
 8002458:	f043 0304 	orr.w	r3, r3, #4
 800245c:	6313      	str	r3, [r2, #48]	; 0x30
 800245e:	4b2a      	ldr	r3, [pc, #168]	; (8002508 <MX_GPIO_Init+0xd0>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	613b      	str	r3, [r7, #16]
 8002468:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	4b26      	ldr	r3, [pc, #152]	; (8002508 <MX_GPIO_Init+0xd0>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	4a25      	ldr	r2, [pc, #148]	; (8002508 <MX_GPIO_Init+0xd0>)
 8002474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002478:	6313      	str	r3, [r2, #48]	; 0x30
 800247a:	4b23      	ldr	r3, [pc, #140]	; (8002508 <MX_GPIO_Init+0xd0>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	4b1f      	ldr	r3, [pc, #124]	; (8002508 <MX_GPIO_Init+0xd0>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	4a1e      	ldr	r2, [pc, #120]	; (8002508 <MX_GPIO_Init+0xd0>)
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	6313      	str	r3, [r2, #48]	; 0x30
 8002496:	4b1c      	ldr	r3, [pc, #112]	; (8002508 <MX_GPIO_Init+0xd0>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	60bb      	str	r3, [r7, #8]
 80024a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	607b      	str	r3, [r7, #4]
 80024a6:	4b18      	ldr	r3, [pc, #96]	; (8002508 <MX_GPIO_Init+0xd0>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	4a17      	ldr	r2, [pc, #92]	; (8002508 <MX_GPIO_Init+0xd0>)
 80024ac:	f043 0302 	orr.w	r3, r3, #2
 80024b0:	6313      	str	r3, [r2, #48]	; 0x30
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <MX_GPIO_Init+0xd0>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	607b      	str	r3, [r7, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80024be:	2200      	movs	r2, #0
 80024c0:	2120      	movs	r1, #32
 80024c2:	4812      	ldr	r0, [pc, #72]	; (800250c <MX_GPIO_Init+0xd4>)
 80024c4:	f001 f9ae 	bl	8003824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80024c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024ce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80024d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80024d8:	f107 0314 	add.w	r3, r7, #20
 80024dc:	4619      	mov	r1, r3
 80024de:	480c      	ldr	r0, [pc, #48]	; (8002510 <MX_GPIO_Init+0xd8>)
 80024e0:	f001 f81c 	bl	800351c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80024e4:	2320      	movs	r3, #32
 80024e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e8:	2301      	movs	r3, #1
 80024ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f0:	2300      	movs	r3, #0
 80024f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80024f4:	f107 0314 	add.w	r3, r7, #20
 80024f8:	4619      	mov	r1, r3
 80024fa:	4804      	ldr	r0, [pc, #16]	; (800250c <MX_GPIO_Init+0xd4>)
 80024fc:	f001 f80e 	bl	800351c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002500:	bf00      	nop
 8002502:	3728      	adds	r7, #40	; 0x28
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40023800 	.word	0x40023800
 800250c:	40020000 	.word	0x40020000
 8002510:	40020800 	.word	0x40020800

08002514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002518:	b672      	cpsid	i
}
 800251a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800251c:	e7fe      	b.n	800251c <Error_Handler+0x8>
	...

08002520 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	607b      	str	r3, [r7, #4]
 800252a:	4b10      	ldr	r3, [pc, #64]	; (800256c <HAL_MspInit+0x4c>)
 800252c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252e:	4a0f      	ldr	r2, [pc, #60]	; (800256c <HAL_MspInit+0x4c>)
 8002530:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002534:	6453      	str	r3, [r2, #68]	; 0x44
 8002536:	4b0d      	ldr	r3, [pc, #52]	; (800256c <HAL_MspInit+0x4c>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800253e:	607b      	str	r3, [r7, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	603b      	str	r3, [r7, #0]
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <HAL_MspInit+0x4c>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	4a08      	ldr	r2, [pc, #32]	; (800256c <HAL_MspInit+0x4c>)
 800254c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002550:	6413      	str	r3, [r2, #64]	; 0x40
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_MspInit+0x4c>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255a:	603b      	str	r3, [r7, #0]
 800255c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800255e:	2007      	movs	r0, #7
 8002560:	f000 ffa8 	bl	80034b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002564:	bf00      	nop
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40023800 	.word	0x40023800

08002570 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a0b      	ldr	r2, [pc, #44]	; (80025ac <HAL_TIM_PWM_MspInit+0x3c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d10d      	bne.n	800259e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <HAL_TIM_PWM_MspInit+0x40>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	4a09      	ldr	r2, [pc, #36]	; (80025b0 <HAL_TIM_PWM_MspInit+0x40>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	6453      	str	r3, [r2, #68]	; 0x44
 8002592:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <HAL_TIM_PWM_MspInit+0x40>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800259e:	bf00      	nop
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40010000 	.word	0x40010000
 80025b0:	40023800 	.word	0x40023800

080025b4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08a      	sub	sp, #40	; 0x28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025bc:	f107 0314 	add.w	r3, r7, #20
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d4:	d12b      	bne.n	800262e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	4b17      	ldr	r3, [pc, #92]	; (8002638 <HAL_TIM_Encoder_MspInit+0x84>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	4a16      	ldr	r2, [pc, #88]	; (8002638 <HAL_TIM_Encoder_MspInit+0x84>)
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	6413      	str	r3, [r2, #64]	; 0x40
 80025e6:	4b14      	ldr	r3, [pc, #80]	; (8002638 <HAL_TIM_Encoder_MspInit+0x84>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	613b      	str	r3, [r7, #16]
 80025f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	4b10      	ldr	r3, [pc, #64]	; (8002638 <HAL_TIM_Encoder_MspInit+0x84>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	4a0f      	ldr	r2, [pc, #60]	; (8002638 <HAL_TIM_Encoder_MspInit+0x84>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	6313      	str	r3, [r2, #48]	; 0x30
 8002602:	4b0d      	ldr	r3, [pc, #52]	; (8002638 <HAL_TIM_Encoder_MspInit+0x84>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800260e:	2303      	movs	r3, #3
 8002610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002612:	2302      	movs	r3, #2
 8002614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261a:	2300      	movs	r3, #0
 800261c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800261e:	2301      	movs	r3, #1
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002622:	f107 0314 	add.w	r3, r7, #20
 8002626:	4619      	mov	r1, r3
 8002628:	4804      	ldr	r0, [pc, #16]	; (800263c <HAL_TIM_Encoder_MspInit+0x88>)
 800262a:	f000 ff77 	bl	800351c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800262e:	bf00      	nop
 8002630:	3728      	adds	r7, #40	; 0x28
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40023800 	.word	0x40023800
 800263c:	40020000 	.word	0x40020000

08002640 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a15      	ldr	r2, [pc, #84]	; (80026a4 <HAL_TIM_Base_MspInit+0x64>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d10e      	bne.n	8002670 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	4b14      	ldr	r3, [pc, #80]	; (80026a8 <HAL_TIM_Base_MspInit+0x68>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	4a13      	ldr	r2, [pc, #76]	; (80026a8 <HAL_TIM_Base_MspInit+0x68>)
 800265c:	f043 0302 	orr.w	r3, r3, #2
 8002660:	6413      	str	r3, [r2, #64]	; 0x40
 8002662:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <HAL_TIM_Base_MspInit+0x68>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800266e:	e012      	b.n	8002696 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM5)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a0d      	ldr	r2, [pc, #52]	; (80026ac <HAL_TIM_Base_MspInit+0x6c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d10d      	bne.n	8002696 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <HAL_TIM_Base_MspInit+0x68>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	4a09      	ldr	r2, [pc, #36]	; (80026a8 <HAL_TIM_Base_MspInit+0x68>)
 8002684:	f043 0308 	orr.w	r3, r3, #8
 8002688:	6413      	str	r3, [r2, #64]	; 0x40
 800268a:	4b07      	ldr	r3, [pc, #28]	; (80026a8 <HAL_TIM_Base_MspInit+0x68>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	68bb      	ldr	r3, [r7, #8]
}
 8002696:	bf00      	nop
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40000400 	.word	0x40000400
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40000c00 	.word	0x40000c00

080026b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b8:	f107 030c 	add.w	r3, r7, #12
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	60da      	str	r2, [r3, #12]
 80026c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a12      	ldr	r2, [pc, #72]	; (8002718 <HAL_TIM_MspPostInit+0x68>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d11e      	bne.n	8002710 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	4b11      	ldr	r3, [pc, #68]	; (800271c <HAL_TIM_MspPostInit+0x6c>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	4a10      	ldr	r2, [pc, #64]	; (800271c <HAL_TIM_MspPostInit+0x6c>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	6313      	str	r3, [r2, #48]	; 0x30
 80026e2:	4b0e      	ldr	r3, [pc, #56]	; (800271c <HAL_TIM_MspPostInit+0x6c>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f4:	2302      	movs	r3, #2
 80026f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002700:	2301      	movs	r3, #1
 8002702:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002704:	f107 030c 	add.w	r3, r7, #12
 8002708:	4619      	mov	r1, r3
 800270a:	4805      	ldr	r0, [pc, #20]	; (8002720 <HAL_TIM_MspPostInit+0x70>)
 800270c:	f000 ff06 	bl	800351c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002710:	bf00      	nop
 8002712:	3720      	adds	r7, #32
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40010000 	.word	0x40010000
 800271c:	40023800 	.word	0x40023800
 8002720:	40020000 	.word	0x40020000

08002724 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08a      	sub	sp, #40	; 0x28
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272c:	f107 0314 	add.w	r3, r7, #20
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	60da      	str	r2, [r3, #12]
 800273a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a19      	ldr	r2, [pc, #100]	; (80027a8 <HAL_UART_MspInit+0x84>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d12b      	bne.n	800279e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	4b18      	ldr	r3, [pc, #96]	; (80027ac <HAL_UART_MspInit+0x88>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	4a17      	ldr	r2, [pc, #92]	; (80027ac <HAL_UART_MspInit+0x88>)
 8002750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002754:	6413      	str	r3, [r2, #64]	; 0x40
 8002756:	4b15      	ldr	r3, [pc, #84]	; (80027ac <HAL_UART_MspInit+0x88>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	4b11      	ldr	r3, [pc, #68]	; (80027ac <HAL_UART_MspInit+0x88>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	4a10      	ldr	r2, [pc, #64]	; (80027ac <HAL_UART_MspInit+0x88>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	6313      	str	r3, [r2, #48]	; 0x30
 8002772:	4b0e      	ldr	r3, [pc, #56]	; (80027ac <HAL_UART_MspInit+0x88>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800277e:	230c      	movs	r3, #12
 8002780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002782:	2302      	movs	r3, #2
 8002784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800278a:	2303      	movs	r3, #3
 800278c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800278e:	2307      	movs	r3, #7
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002792:	f107 0314 	add.w	r3, r7, #20
 8002796:	4619      	mov	r1, r3
 8002798:	4805      	ldr	r0, [pc, #20]	; (80027b0 <HAL_UART_MspInit+0x8c>)
 800279a:	f000 febf 	bl	800351c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800279e:	bf00      	nop
 80027a0:	3728      	adds	r7, #40	; 0x28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40004400 	.word	0x40004400
 80027ac:	40023800 	.word	0x40023800
 80027b0:	40020000 	.word	0x40020000

080027b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027b8:	e7fe      	b.n	80027b8 <NMI_Handler+0x4>

080027ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ba:	b480      	push	{r7}
 80027bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027be:	e7fe      	b.n	80027be <HardFault_Handler+0x4>

080027c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027c4:	e7fe      	b.n	80027c4 <MemManage_Handler+0x4>

080027c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027c6:	b480      	push	{r7}
 80027c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027ca:	e7fe      	b.n	80027ca <BusFault_Handler+0x4>

080027cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027d0:	e7fe      	b.n	80027d0 <UsageFault_Handler+0x4>

080027d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027d2:	b480      	push	{r7}
 80027d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002800:	f000 fd86 	bl	8003310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002804:	bf00      	nop
 8002806:	bd80      	pop	{r7, pc}

08002808 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <SystemInit+0x20>)
 800280e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002812:	4a05      	ldr	r2, [pc, #20]	; (8002828 <SystemInit+0x20>)
 8002814:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002818:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800282c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002864 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002830:	480d      	ldr	r0, [pc, #52]	; (8002868 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002832:	490e      	ldr	r1, [pc, #56]	; (800286c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002834:	4a0e      	ldr	r2, [pc, #56]	; (8002870 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002838:	e002      	b.n	8002840 <LoopCopyDataInit>

0800283a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800283a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800283c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800283e:	3304      	adds	r3, #4

08002840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002844:	d3f9      	bcc.n	800283a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002846:	4a0b      	ldr	r2, [pc, #44]	; (8002874 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002848:	4c0b      	ldr	r4, [pc, #44]	; (8002878 <LoopFillZerobss+0x26>)
  movs r3, #0
 800284a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800284c:	e001      	b.n	8002852 <LoopFillZerobss>

0800284e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800284e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002850:	3204      	adds	r2, #4

08002852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002854:	d3fb      	bcc.n	800284e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002856:	f7ff ffd7 	bl	8002808 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800285a:	f002 ff59 	bl	8005710 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800285e:	f7ff fa45 	bl	8001cec <main>
  bx  lr    
 8002862:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002864:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800286c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002870:	080066b0 	.word	0x080066b0
  ldr r2, =_sbss
 8002874:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002878:	200004a4 	.word	0x200004a4

0800287c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800287c:	e7fe      	b.n	800287c <ADC_IRQHandler>

0800287e <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800287e:	b480      	push	{r7}
 8002880:	b08b      	sub	sp, #44	; 0x2c
 8002882:	af00      	add	r7, sp, #0
 8002884:	60f8      	str	r0, [r7, #12]
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	885b      	ldrh	r3, [r3, #2]
 80028a6:	fb02 f303 	mul.w	r3, r2, r3
 80028aa:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 80028b0:	e013      	b.n	80028da <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	1d1a      	adds	r2, r3, #4
 80028b6:	627a      	str	r2, [r7, #36]	; 0x24
 80028b8:	ed93 7a00 	vldr	s14, [r3]
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	1d1a      	adds	r2, r3, #4
 80028c0:	623a      	str	r2, [r7, #32]
 80028c2:	edd3 7a00 	vldr	s15, [r3]
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	1d1a      	adds	r2, r3, #4
 80028ca:	61fa      	str	r2, [r7, #28]
 80028cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028d0:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1e8      	bne.n	80028b2 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80028e0:	2300      	movs	r3, #0
 80028e2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 80028e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	372c      	adds	r7, #44	; 0x2c
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	607b      	str	r3, [r7, #4]
 80028fe:	460b      	mov	r3, r1
 8002900:	817b      	strh	r3, [r7, #10]
 8002902:	4613      	mov	r3, r2
 8002904:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	897a      	ldrh	r2, [r7, #10]
 800290a:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	893a      	ldrh	r2, [r7, #8]
 8002910:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	605a      	str	r2, [r3, #4]
}
 8002918:	bf00      	nop
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8002924:	b480      	push	{r7}
 8002926:	b0bb      	sub	sp, #236	; 0xec
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	667b      	str	r3, [r7, #100]	; 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	663b      	str	r3, [r7, #96]	; 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	885b      	ldrh	r3, [r3, #2]
 8002944:	65bb      	str	r3, [r7, #88]	; 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 8002946:	f04f 0300 	mov.w	r3, #0
 800294a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800294e:	f04f 0300 	mov.w	r3, #0
 8002952:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 8002954:	2300      	movs	r3, #0
 8002956:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800295a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800295c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 8002960:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002962:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8002966:	e03b      	b.n	80029e0 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 8002968:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800296a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 8002974:	e00c      	b.n	8002990 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 8002976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800297a:	1d1a      	adds	r2, r3, #4
 800297c:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8002980:	f04f 0200 	mov.w	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
        j--;
 8002986:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800298a:	3b01      	subs	r3, #1
 800298c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 8002990:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1ee      	bne.n	8002976 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 8002998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800299c:	1d1a      	adds	r2, r3, #4
 800299e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80029a2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80029a6:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 80029a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80029ac:	3b01      	subs	r3, #1
 80029ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 80029b2:	e00c      	b.n	80029ce <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 80029b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029b8:	1d1a      	adds	r2, r3, #4
 80029ba:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
        j--;
 80029c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029c8:	3b01      	subs	r3, #1
 80029ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 80029ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1ee      	bne.n	80029b4 <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 80029d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80029da:	3b01      	subs	r3, #1
 80029dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    while (rowCnt > 0U)
 80029e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1bf      	bne.n	8002968 <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 80029e8:	2300      	movs	r3, #0
 80029ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80029ee:	e2c7      	b.n	8002f80 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 80029f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029f4:	653b      	str	r3, [r7, #80]	; 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	885b      	ldrh	r3, [r3, #2]
 80029fe:	3301      	adds	r3, #1
 8002a00:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8002a04:	fb01 f303 	mul.w	r3, r1, r3
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      pivot = *pTmp;
 8002a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      selectedRow = column;
 8002a1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8002a22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a26:	3301      	adds	r3, #1
 8002a28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002a2c:	e02c      	b.n	8002a88 <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	885b      	ldrh	r3, [r3, #2]
 8002a36:	4619      	mov	r1, r3
 8002a38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a3c:	fb03 f101 	mul.w	r1, r3, r1
 8002a40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a44:	440b      	add	r3, r1
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
          newPivot = *pTmp;
 8002a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	657b      	str	r3, [r7, #84]	; 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 8002a56:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002a5a:	eeb0 7ae7 	vabs.f32	s14, s15
 8002a5e:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002a62:	eef0 7ae7 	vabs.f32	s15, s15
 8002a66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a6e:	dd06      	ble.n	8002a7e <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 8002a70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            pivot = newPivot;
 8002a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8002a7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a82:	3301      	adds	r3, #1
 8002a84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002a88:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002a8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d3cd      	bcc.n	8002a2e <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 8002a92:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002a96:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a9e:	f000 809b 	beq.w	8002bd8 <arm_mat_inverse_f32+0x2b4>
 8002aa2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002aa6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	f000 8094 	beq.w	8002bd8 <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	885b      	ldrh	r3, [r3, #2]
 8002ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ac6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ac8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ad2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002ad4:	fb03 f202 	mul.w	r2, r3, r2
 8002ad8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002adc:	4413      	add	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002af0:	fb03 f202 	mul.w	r2, r3, r2
 8002af4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002af8:	4413      	add	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b00:	4413      	add	r3, r2
 8002b02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b06:	2300      	movs	r3, #0
 8002b08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002b0c:	e018      	b.n	8002b40 <arm_mat_inverse_f32+0x21c>
 8002b0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b1a:	1d1a      	adds	r2, r3, #4
 8002b1c:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8002b20:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b24:	6812      	ldr	r2, [r2, #0]
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b2c:	1d1a      	adds	r2, r3, #4
 8002b2e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002b32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002b40:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b46:	429a      	cmp	r2, r3
 8002b48:	dbe1      	blt.n	8002b0e <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	885b      	ldrh	r3, [r3, #2]
 8002b5e:	647b      	str	r3, [r7, #68]	; 0x44
 8002b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b62:	643b      	str	r3, [r7, #64]	; 0x40
 8002b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002b68:	fb02 f303 	mul.w	r3, r2, r3
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002b72:	4413      	add	r3, r2
 8002b74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b7a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002b7e:	fb02 f303 	mul.w	r3, r2, r3
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b88:	4413      	add	r3, r2
 8002b8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b94:	e018      	b.n	8002bc8 <arm_mat_inverse_f32+0x2a4>
 8002b96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ba2:	1d1a      	adds	r2, r3, #4
 8002ba4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002ba8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002bac:	6812      	ldr	r2, [r2, #0]
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002bb4:	1d1a      	adds	r2, r3, #4
 8002bb6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002bba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bc8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	dbe1      	blt.n	8002b96 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 8002bd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d009      	beq.n	8002bf4 <arm_mat_inverse_f32+0x2d0>
 8002be0:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002be4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bec:	d102      	bne.n	8002bf4 <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 8002bee:	f06f 0304 	mvn.w	r3, #4
 8002bf2:	e208      	b.n	8003006 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 8002bf4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002bf8:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 8002bfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c00:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	885b      	ldrh	r3, [r3, #2]
 8002c10:	637b      	str	r3, [r7, #52]	; 0x34
 8002c12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	633b      	str	r3, [r7, #48]	; 0x30
 8002c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c1e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c20:	fb03 f202 	mul.w	r2, r3, r2
 8002c24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002c30:	4413      	add	r3, r2
 8002c32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c36:	2300      	movs	r3, #0
 8002c38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002c3c:	e011      	b.n	8002c62 <arm_mat_inverse_f32+0x33e>
 8002c3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c42:	1d1a      	adds	r2, r3, #4
 8002c44:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8002c48:	ed93 7a00 	vldr	s14, [r3]
 8002c4c:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c54:	edc3 7a00 	vstr	s15, [r3]
 8002c58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002c62:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	dbe8      	blt.n	8002c3e <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	885b      	ldrh	r3, [r3, #2]
 8002c78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c82:	fb02 f303 	mul.w	r3, r2, r3
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c92:	2300      	movs	r3, #0
 8002c94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c98:	e011      	b.n	8002cbe <arm_mat_inverse_f32+0x39a>
 8002c9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c9e:	1d1a      	adds	r2, r3, #4
 8002ca0:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8002ca4:	ed93 7a00 	vldr	s14, [r3]
 8002ca8:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002cac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cb0:	edc3 7a00 	vstr	s15, [r3]
 8002cb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cb8:	3301      	adds	r3, #1
 8002cba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002cbe:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	dbe8      	blt.n	8002c9a <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      for (;rowNb < pivotRow; rowNb++)
 8002cce:	e0ae      	b.n	8002e2e <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	885b      	ldrh	r3, [r3, #2]
 8002cd8:	4619      	mov	r1, r3
 8002cda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002cde:	fb03 f101 	mul.w	r1, r3, r1
 8002ce2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ce6:	440b      	add	r3, r1
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           pivot = *pTmp;
 8002cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	885b      	ldrh	r3, [r3, #2]
 8002d0e:	617b      	str	r3, [r7, #20]
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002d20:	fb03 f202 	mul.w	r2, r3, r2
 8002d24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d28:	4413      	add	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002d30:	4413      	add	r3, r2
 8002d32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002d3a:	fb03 f202 	mul.w	r2, r3, r2
 8002d3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002d50:	2300      	movs	r3, #0
 8002d52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d56:	e01a      	b.n	8002d8e <arm_mat_inverse_f32+0x46a>
 8002d58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d5c:	1d1a      	adds	r2, r3, #4
 8002d5e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d62:	ed93 7a00 	vldr	s14, [r3]
 8002d66:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d72:	1d1a      	adds	r2, r3, #4
 8002d74:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002d78:	ed93 7a00 	vldr	s14, [r3]
 8002d7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d80:	edc3 7a00 	vstr	s15, [r3]
 8002d84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d88:	3301      	adds	r3, #1
 8002d8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	dbdf      	blt.n	8002d58 <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	885b      	ldrh	r3, [r3, #2]
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	60bb      	str	r3, [r7, #8]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002db8:	fb02 f303 	mul.w	r3, r2, r3
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002dcc:	fb02 f303 	mul.w	r3, r2, r3
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002de2:	e01a      	b.n	8002e1a <arm_mat_inverse_f32+0x4f6>
 8002de4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002de8:	1d1a      	adds	r2, r3, #4
 8002dea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002dee:	ed93 7a00 	vldr	s14, [r3]
 8002df2:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dfe:	1d1a      	adds	r2, r3, #4
 8002e00:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002e04:	ed93 7a00 	vldr	s14, [r3]
 8002e08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e0c:	edc3 7a00 	vstr	s15, [r3]
 8002e10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e14:	3301      	adds	r3, #1
 8002e16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e1a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	dbdf      	blt.n	8002de4 <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 8002e24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e28:	3301      	adds	r3, #1
 8002e2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002e2e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e34:	429a      	cmp	r2, r3
 8002e36:	f4ff af4b 	bcc.w	8002cd0 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8002e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002e42:	e092      	b.n	8002f6a <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	885b      	ldrh	r3, [r3, #2]
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e52:	fb03 f101 	mul.w	r1, r3, r1
 8002e56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e5a:	440b      	add	r3, r1
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           pivot = *pTmp;
 8002e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	677b      	str	r3, [r7, #116]	; 0x74
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	885b      	ldrh	r3, [r3, #2]
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	623b      	str	r3, [r7, #32]
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002e90:	fb03 f202 	mul.w	r2, r3, r2
 8002e94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e98:	4413      	add	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002e9e:	4413      	add	r3, r2
 8002ea0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002ea6:	fb03 f202 	mul.w	r2, r3, r2
 8002eaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002eb4:	4413      	add	r3, r2
 8002eb6:	677b      	str	r3, [r7, #116]	; 0x74
 8002eb8:	2300      	movs	r3, #0
 8002eba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ebc:	e014      	b.n	8002ee8 <arm_mat_inverse_f32+0x5c4>
 8002ebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ec0:	1d1a      	adds	r2, r3, #4
 8002ec2:	677a      	str	r2, [r7, #116]	; 0x74
 8002ec4:	ed93 7a00 	vldr	s14, [r3]
 8002ec8:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ed0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ed2:	1d1a      	adds	r2, r3, #4
 8002ed4:	67ba      	str	r2, [r7, #120]	; 0x78
 8002ed6:	ed93 7a00 	vldr	s14, [r3]
 8002eda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ede:	edc3 7a00 	vstr	s15, [r3]
 8002ee2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ee8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	dbe6      	blt.n	8002ebe <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	66bb      	str	r3, [r7, #104]	; 0x68
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	885b      	ldrh	r3, [r3, #2]
 8002f00:	61fb      	str	r3, [r7, #28]
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	61bb      	str	r3, [r7, #24]
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002f0c:	fb02 f303 	mul.w	r3, r2, r3
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f14:	4413      	add	r3, r2
 8002f16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f1c:	fb02 f303 	mul.w	r3, r2, r3
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002f24:	4413      	add	r3, r2
 8002f26:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f28:	2300      	movs	r3, #0
 8002f2a:	673b      	str	r3, [r7, #112]	; 0x70
 8002f2c:	e014      	b.n	8002f58 <arm_mat_inverse_f32+0x634>
 8002f2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f30:	1d1a      	adds	r2, r3, #4
 8002f32:	66ba      	str	r2, [r7, #104]	; 0x68
 8002f34:	ed93 7a00 	vldr	s14, [r3]
 8002f38:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f42:	1d1a      	adds	r2, r3, #4
 8002f44:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f46:	ed93 7a00 	vldr	s14, [r3]
 8002f4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f4e:	edc3 7a00 	vstr	s15, [r3]
 8002f52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f54:	3301      	adds	r3, #1
 8002f56:	673b      	str	r3, [r7, #112]	; 0x70
 8002f58:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	dbe6      	blt.n	8002f2e <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8002f60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f64:	3301      	adds	r3, #1
 8002f66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002f6a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f70:	429a      	cmp	r2, r3
 8002f72:	f4ff af67 	bcc.w	8002e44 <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 8002f76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f80:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f86:	429a      	cmp	r2, r3
 8002f88:	f4ff ad32 	bcc.w	80029f0 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 8002f92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d033      	beq.n	8003002 <arm_mat_inverse_f32+0x6de>
 8002f9a:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002f9e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa6:	d12c      	bne.n	8003002 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	667b      	str	r3, [r7, #100]	; 0x64
      for (i = 0; i < numRows * numCols; i++)
 8002fae:	2300      	movs	r3, #0
 8002fb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002fb4:	e010      	b.n	8002fd8 <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 8002fb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002fbe:	4413      	add	r3, r2
 8002fc0:	edd3 7a00 	vldr	s15, [r3]
 8002fc4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fcc:	d10d      	bne.n	8002fea <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 8002fce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002fd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fdc:	fb02 f303 	mul.w	r3, r2, r3
 8002fe0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d3e6      	bcc.n	8002fb6 <arm_mat_inverse_f32+0x692>
 8002fe8:	e000      	b.n	8002fec <arm_mat_inverse_f32+0x6c8>
            break;
 8002fea:	bf00      	nop
      }

      if (i == numRows * numCols)
 8002fec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ff0:	fb02 f303 	mul.w	r3, r2, r3
 8002ff4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d102      	bne.n	8003002 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 8002ffc:	23fb      	movs	r3, #251	; 0xfb
 8002ffe:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
    }
  }

  /* Return to application */
  return (status);
 8003002:	f997 30c3 	ldrsb.w	r3, [r7, #195]	; 0xc3
}
 8003006:	4618      	mov	r0, r3
 8003008:	37ec      	adds	r7, #236	; 0xec
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8003012:	b480      	push	{r7}
 8003014:	b093      	sub	sp, #76	; 0x4c
 8003016:	af00      	add	r7, sp, #0
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	643b      	str	r3, [r7, #64]	; 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	885b      	ldrh	r3, [r3, #2]
 8003046:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	885b      	ldrh	r3, [r3, #2]
 800304c:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800304e:	2300      	movs	r3, #0
 8003050:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003052:	8b7b      	ldrh	r3, [r7, #26]
 8003054:	62bb      	str	r3, [r7, #40]	; 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 8003056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	69fa      	ldr	r2, [r7, #28]
 800305c:	4413      	add	r3, r2
 800305e:	63bb      	str	r3, [r7, #56]	; 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 8003060:	8b3b      	ldrh	r3, [r7, #24]
 8003062:	633b      	str	r3, [r7, #48]	; 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	643b      	str	r3, [r7, #64]	; 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800306a:	f04f 0300 	mov.w	r3, #0
 800306e:	637b      	str	r3, [r7, #52]	; 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 8003070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003072:	647b      	str	r3, [r7, #68]	; 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 8003074:	8afb      	ldrh	r3, [r7, #22]
 8003076:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 8003078:	e017      	b.n	80030aa <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800307a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800307c:	1d1a      	adds	r2, r3, #4
 800307e:	647a      	str	r2, [r7, #68]	; 0x44
 8003080:	ed93 7a00 	vldr	s14, [r3]
 8003084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003086:	edd3 7a00 	vldr	s15, [r3]
 800308a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800308e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003092:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003096:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
          pIn2 += numColsB;
 800309a:	8b3b      	ldrh	r3, [r7, #24]
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030a0:	4413      	add	r3, r2
 80030a2:	643b      	str	r3, [r7, #64]	; 0x40

          /* Decrement loop counter */
          colCnt--;
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	3b01      	subs	r3, #1
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24
        while (colCnt > 0U)
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1e4      	bne.n	800307a <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 80030b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b2:	1d1a      	adds	r2, r3, #4
 80030b4:	63ba      	str	r2, [r7, #56]	; 0x38
 80030b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030b8:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 80030ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030bc:	3b01      	subs	r3, #1
 80030be:	633b      	str	r3, [r7, #48]	; 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 80030c0:	8b3a      	ldrh	r2, [r7, #24]
 80030c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	6a3a      	ldr	r2, [r7, #32]
 80030ca:	4413      	add	r3, r2
 80030cc:	643b      	str	r3, [r7, #64]	; 0x40

      } while (col > 0U);
 80030ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1ca      	bne.n	800306a <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 80030d4:	8b3b      	ldrh	r3, [r7, #24]
 80030d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030d8:	4413      	add	r3, r2
 80030da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pInA = pInA + numColsA;
 80030dc:	8afb      	ldrh	r3, [r7, #22]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030e2:	4413      	add	r3, r2
 80030e4:	63fb      	str	r3, [r7, #60]	; 0x3c

      /* Decrement row loop counter */
      row--;
 80030e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e8:	3b01      	subs	r3, #1
 80030ea:	62bb      	str	r3, [r7, #40]	; 0x28

    } while (row > 0U);
 80030ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1b1      	bne.n	8003056 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80030f2:	2300      	movs	r3, #0
 80030f4:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 80030f6:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	374c      	adds	r7, #76	; 0x4c
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 8003106:	b480      	push	{r7}
 8003108:	b08b      	sub	sp, #44	; 0x2c
 800310a:	af00      	add	r7, sp, #0
 800310c:	60f8      	str	r0, [r7, #12]
 800310e:	ed87 0a02 	vstr	s0, [r7, #8]
 8003112:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	461a      	mov	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	885b      	ldrh	r3, [r3, #2]
 800312a:	fb02 f303 	mul.w	r3, r2, r3
 800312e:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8003134:	e010      	b.n	8003158 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	1d1a      	adds	r2, r3, #4
 800313a:	627a      	str	r2, [r7, #36]	; 0x24
 800313c:	ed93 7a00 	vldr	s14, [r3]
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	1d1a      	adds	r2, r3, #4
 8003144:	623a      	str	r2, [r7, #32]
 8003146:	edd7 7a02 	vldr	s15, [r7, #8]
 800314a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800314e:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	3b01      	subs	r3, #1
 8003156:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1eb      	bne.n	8003136 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800315e:	2300      	movs	r3, #0
 8003160:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 8003162:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003166:	4618      	mov	r0, r3
 8003168:	372c      	adds	r7, #44	; 0x2c
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8003172:	b480      	push	{r7}
 8003174:	b08b      	sub	sp, #44	; 0x2c
 8003176:	af00      	add	r7, sp, #0
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	461a      	mov	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	885b      	ldrh	r3, [r3, #2]
 800319a:	fb02 f303 	mul.w	r3, r2, r3
 800319e:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 80031a4:	e013      	b.n	80031ce <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	1d1a      	adds	r2, r3, #4
 80031aa:	627a      	str	r2, [r7, #36]	; 0x24
 80031ac:	ed93 7a00 	vldr	s14, [r3]
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	1d1a      	adds	r2, r3, #4
 80031b4:	623a      	str	r2, [r7, #32]
 80031b6:	edd3 7a00 	vldr	s15, [r3]
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	1d1a      	adds	r2, r3, #4
 80031be:	61fa      	str	r2, [r7, #28]
 80031c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031c4:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1e8      	bne.n	80031a6 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80031d4:	2300      	movs	r3, #0
 80031d6:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 80031d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	372c      	adds	r7, #44	; 0x2c
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b08b      	sub	sp, #44	; 0x2c
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	885b      	ldrh	r3, [r3, #2]
 8003208:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800320a:	89fb      	ldrh	r3, [r7, #14]
 800320c:	61bb      	str	r3, [r7, #24]
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4413      	add	r3, r2
 800321a:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800321c:	89bb      	ldrh	r3, [r7, #12]
 800321e:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8003220:	e00d      	b.n	800323e <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	1d1a      	adds	r2, r3, #4
 8003226:	627a      	str	r2, [r7, #36]	; 0x24
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800322e:	89fb      	ldrh	r3, [r7, #14]
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	6a3a      	ldr	r2, [r7, #32]
 8003234:	4413      	add	r3, r2
 8003236:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	3b01      	subs	r3, #1
 800323c:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1ee      	bne.n	8003222 <arm_mat_trans_f32+0x3a>
      }

      i++;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	3301      	adds	r3, #1
 8003248:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	3b01      	subs	r3, #1
 800324e:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1dd      	bne.n	8003212 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8003256:	2300      	movs	r3, #0
 8003258:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800325a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800325e:	4618      	mov	r0, r3
 8003260:	372c      	adds	r7, #44	; 0x2c
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
	...

0800326c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003270:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <HAL_Init+0x40>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a0d      	ldr	r2, [pc, #52]	; (80032ac <HAL_Init+0x40>)
 8003276:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800327a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <HAL_Init+0x40>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a0a      	ldr	r2, [pc, #40]	; (80032ac <HAL_Init+0x40>)
 8003282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003286:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003288:	4b08      	ldr	r3, [pc, #32]	; (80032ac <HAL_Init+0x40>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a07      	ldr	r2, [pc, #28]	; (80032ac <HAL_Init+0x40>)
 800328e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003292:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003294:	2003      	movs	r0, #3
 8003296:	f000 f90d 	bl	80034b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800329a:	2000      	movs	r0, #0
 800329c:	f000 f808 	bl	80032b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032a0:	f7ff f93e 	bl	8002520 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40023c00 	.word	0x40023c00

080032b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032b8:	4b12      	ldr	r3, [pc, #72]	; (8003304 <HAL_InitTick+0x54>)
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	4b12      	ldr	r3, [pc, #72]	; (8003308 <HAL_InitTick+0x58>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	4619      	mov	r1, r3
 80032c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 f917 	bl	8003502 <HAL_SYSTICK_Config>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e00e      	b.n	80032fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b0f      	cmp	r3, #15
 80032e2:	d80a      	bhi.n	80032fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032e4:	2200      	movs	r2, #0
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	f04f 30ff 	mov.w	r0, #4294967295
 80032ec:	f000 f8ed 	bl	80034ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032f0:	4a06      	ldr	r2, [pc, #24]	; (800330c <HAL_InitTick+0x5c>)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
 80032f8:	e000      	b.n	80032fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	20000010 	.word	0x20000010
 8003308:	20000018 	.word	0x20000018
 800330c:	20000014 	.word	0x20000014

08003310 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003314:	4b06      	ldr	r3, [pc, #24]	; (8003330 <HAL_IncTick+0x20>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	461a      	mov	r2, r3
 800331a:	4b06      	ldr	r3, [pc, #24]	; (8003334 <HAL_IncTick+0x24>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4413      	add	r3, r2
 8003320:	4a04      	ldr	r2, [pc, #16]	; (8003334 <HAL_IncTick+0x24>)
 8003322:	6013      	str	r3, [r2, #0]
}
 8003324:	bf00      	nop
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	20000018 	.word	0x20000018
 8003334:	200004a0 	.word	0x200004a0

08003338 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  return uwTick;
 800333c:	4b03      	ldr	r3, [pc, #12]	; (800334c <HAL_GetTick+0x14>)
 800333e:	681b      	ldr	r3, [r3, #0]
}
 8003340:	4618      	mov	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	200004a0 	.word	0x200004a0

08003350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003360:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <__NVIC_SetPriorityGrouping+0x44>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800336c:	4013      	ands	r3, r2
 800336e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003378:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800337c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003382:	4a04      	ldr	r2, [pc, #16]	; (8003394 <__NVIC_SetPriorityGrouping+0x44>)
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	60d3      	str	r3, [r2, #12]
}
 8003388:	bf00      	nop
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	e000ed00 	.word	0xe000ed00

08003398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800339c:	4b04      	ldr	r3, [pc, #16]	; (80033b0 <__NVIC_GetPriorityGrouping+0x18>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	0a1b      	lsrs	r3, r3, #8
 80033a2:	f003 0307 	and.w	r3, r3, #7
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	e000ed00 	.word	0xe000ed00

080033b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	6039      	str	r1, [r7, #0]
 80033be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	db0a      	blt.n	80033de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	490c      	ldr	r1, [pc, #48]	; (8003400 <__NVIC_SetPriority+0x4c>)
 80033ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d2:	0112      	lsls	r2, r2, #4
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	440b      	add	r3, r1
 80033d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033dc:	e00a      	b.n	80033f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	4908      	ldr	r1, [pc, #32]	; (8003404 <__NVIC_SetPriority+0x50>)
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	3b04      	subs	r3, #4
 80033ec:	0112      	lsls	r2, r2, #4
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	440b      	add	r3, r1
 80033f2:	761a      	strb	r2, [r3, #24]
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	e000e100 	.word	0xe000e100
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003408:	b480      	push	{r7}
 800340a:	b089      	sub	sp, #36	; 0x24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f1c3 0307 	rsb	r3, r3, #7
 8003422:	2b04      	cmp	r3, #4
 8003424:	bf28      	it	cs
 8003426:	2304      	movcs	r3, #4
 8003428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	3304      	adds	r3, #4
 800342e:	2b06      	cmp	r3, #6
 8003430:	d902      	bls.n	8003438 <NVIC_EncodePriority+0x30>
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	3b03      	subs	r3, #3
 8003436:	e000      	b.n	800343a <NVIC_EncodePriority+0x32>
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800343c:	f04f 32ff 	mov.w	r2, #4294967295
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	43da      	mvns	r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	401a      	ands	r2, r3
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003450:	f04f 31ff 	mov.w	r1, #4294967295
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	fa01 f303 	lsl.w	r3, r1, r3
 800345a:	43d9      	mvns	r1, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003460:	4313      	orrs	r3, r2
         );
}
 8003462:	4618      	mov	r0, r3
 8003464:	3724      	adds	r7, #36	; 0x24
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3b01      	subs	r3, #1
 800347c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003480:	d301      	bcc.n	8003486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003482:	2301      	movs	r3, #1
 8003484:	e00f      	b.n	80034a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003486:	4a0a      	ldr	r2, [pc, #40]	; (80034b0 <SysTick_Config+0x40>)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3b01      	subs	r3, #1
 800348c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800348e:	210f      	movs	r1, #15
 8003490:	f04f 30ff 	mov.w	r0, #4294967295
 8003494:	f7ff ff8e 	bl	80033b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003498:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <SysTick_Config+0x40>)
 800349a:	2200      	movs	r2, #0
 800349c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800349e:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <SysTick_Config+0x40>)
 80034a0:	2207      	movs	r2, #7
 80034a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	e000e010 	.word	0xe000e010

080034b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7ff ff47 	bl	8003350 <__NVIC_SetPriorityGrouping>
}
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b086      	sub	sp, #24
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	4603      	mov	r3, r0
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	607a      	str	r2, [r7, #4]
 80034d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034dc:	f7ff ff5c 	bl	8003398 <__NVIC_GetPriorityGrouping>
 80034e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	68b9      	ldr	r1, [r7, #8]
 80034e6:	6978      	ldr	r0, [r7, #20]
 80034e8:	f7ff ff8e 	bl	8003408 <NVIC_EncodePriority>
 80034ec:	4602      	mov	r2, r0
 80034ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034f2:	4611      	mov	r1, r2
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff ff5d 	bl	80033b4 <__NVIC_SetPriority>
}
 80034fa:	bf00      	nop
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7ff ffb0 	bl	8003470 <SysTick_Config>
 8003510:	4603      	mov	r3, r0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800351c:	b480      	push	{r7}
 800351e:	b089      	sub	sp, #36	; 0x24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003526:	2300      	movs	r3, #0
 8003528:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800352a:	2300      	movs	r3, #0
 800352c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800352e:	2300      	movs	r3, #0
 8003530:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003532:	2300      	movs	r3, #0
 8003534:	61fb      	str	r3, [r7, #28]
 8003536:	e159      	b.n	80037ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003538:	2201      	movs	r2, #1
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	4013      	ands	r3, r2
 800354a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	429a      	cmp	r2, r3
 8003552:	f040 8148 	bne.w	80037e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	2b01      	cmp	r3, #1
 8003560:	d005      	beq.n	800356e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800356a:	2b02      	cmp	r3, #2
 800356c:	d130      	bne.n	80035d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	2203      	movs	r2, #3
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	43db      	mvns	r3, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4013      	ands	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4313      	orrs	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035a4:	2201      	movs	r2, #1
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	43db      	mvns	r3, r3
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4013      	ands	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	091b      	lsrs	r3, r3, #4
 80035ba:	f003 0201 	and.w	r2, r3, #1
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 0303 	and.w	r3, r3, #3
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d017      	beq.n	800360c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	2203      	movs	r2, #3
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	43db      	mvns	r3, r3
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4013      	ands	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4313      	orrs	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f003 0303 	and.w	r3, r3, #3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d123      	bne.n	8003660 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	08da      	lsrs	r2, r3, #3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3208      	adds	r2, #8
 8003620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003624:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	220f      	movs	r2, #15
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	43db      	mvns	r3, r3
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4013      	ands	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	691a      	ldr	r2, [r3, #16]
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4313      	orrs	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	08da      	lsrs	r2, r3, #3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3208      	adds	r2, #8
 800365a:	69b9      	ldr	r1, [r7, #24]
 800365c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	2203      	movs	r2, #3
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	43db      	mvns	r3, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4013      	ands	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f003 0203 	and.w	r2, r3, #3
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4313      	orrs	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 80a2 	beq.w	80037e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036a2:	2300      	movs	r3, #0
 80036a4:	60fb      	str	r3, [r7, #12]
 80036a6:	4b57      	ldr	r3, [pc, #348]	; (8003804 <HAL_GPIO_Init+0x2e8>)
 80036a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036aa:	4a56      	ldr	r2, [pc, #344]	; (8003804 <HAL_GPIO_Init+0x2e8>)
 80036ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036b0:	6453      	str	r3, [r2, #68]	; 0x44
 80036b2:	4b54      	ldr	r3, [pc, #336]	; (8003804 <HAL_GPIO_Init+0x2e8>)
 80036b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036be:	4a52      	ldr	r2, [pc, #328]	; (8003808 <HAL_GPIO_Init+0x2ec>)
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	089b      	lsrs	r3, r3, #2
 80036c4:	3302      	adds	r3, #2
 80036c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	220f      	movs	r2, #15
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	43db      	mvns	r3, r3
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	4013      	ands	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a49      	ldr	r2, [pc, #292]	; (800380c <HAL_GPIO_Init+0x2f0>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d019      	beq.n	800371e <HAL_GPIO_Init+0x202>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a48      	ldr	r2, [pc, #288]	; (8003810 <HAL_GPIO_Init+0x2f4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d013      	beq.n	800371a <HAL_GPIO_Init+0x1fe>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a47      	ldr	r2, [pc, #284]	; (8003814 <HAL_GPIO_Init+0x2f8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d00d      	beq.n	8003716 <HAL_GPIO_Init+0x1fa>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a46      	ldr	r2, [pc, #280]	; (8003818 <HAL_GPIO_Init+0x2fc>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d007      	beq.n	8003712 <HAL_GPIO_Init+0x1f6>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a45      	ldr	r2, [pc, #276]	; (800381c <HAL_GPIO_Init+0x300>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d101      	bne.n	800370e <HAL_GPIO_Init+0x1f2>
 800370a:	2304      	movs	r3, #4
 800370c:	e008      	b.n	8003720 <HAL_GPIO_Init+0x204>
 800370e:	2307      	movs	r3, #7
 8003710:	e006      	b.n	8003720 <HAL_GPIO_Init+0x204>
 8003712:	2303      	movs	r3, #3
 8003714:	e004      	b.n	8003720 <HAL_GPIO_Init+0x204>
 8003716:	2302      	movs	r3, #2
 8003718:	e002      	b.n	8003720 <HAL_GPIO_Init+0x204>
 800371a:	2301      	movs	r3, #1
 800371c:	e000      	b.n	8003720 <HAL_GPIO_Init+0x204>
 800371e:	2300      	movs	r3, #0
 8003720:	69fa      	ldr	r2, [r7, #28]
 8003722:	f002 0203 	and.w	r2, r2, #3
 8003726:	0092      	lsls	r2, r2, #2
 8003728:	4093      	lsls	r3, r2
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	4313      	orrs	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003730:	4935      	ldr	r1, [pc, #212]	; (8003808 <HAL_GPIO_Init+0x2ec>)
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	089b      	lsrs	r3, r3, #2
 8003736:	3302      	adds	r3, #2
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800373e:	4b38      	ldr	r3, [pc, #224]	; (8003820 <HAL_GPIO_Init+0x304>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	43db      	mvns	r3, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4013      	ands	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	4313      	orrs	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003762:	4a2f      	ldr	r2, [pc, #188]	; (8003820 <HAL_GPIO_Init+0x304>)
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003768:	4b2d      	ldr	r3, [pc, #180]	; (8003820 <HAL_GPIO_Init+0x304>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	43db      	mvns	r3, r3
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	4013      	ands	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d003      	beq.n	800378c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	4313      	orrs	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800378c:	4a24      	ldr	r2, [pc, #144]	; (8003820 <HAL_GPIO_Init+0x304>)
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003792:	4b23      	ldr	r3, [pc, #140]	; (8003820 <HAL_GPIO_Init+0x304>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	43db      	mvns	r3, r3
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4013      	ands	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037b6:	4a1a      	ldr	r2, [pc, #104]	; (8003820 <HAL_GPIO_Init+0x304>)
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037bc:	4b18      	ldr	r3, [pc, #96]	; (8003820 <HAL_GPIO_Init+0x304>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	43db      	mvns	r3, r3
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	4013      	ands	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d003      	beq.n	80037e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	4313      	orrs	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037e0:	4a0f      	ldr	r2, [pc, #60]	; (8003820 <HAL_GPIO_Init+0x304>)
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	3301      	adds	r3, #1
 80037ea:	61fb      	str	r3, [r7, #28]
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	2b0f      	cmp	r3, #15
 80037f0:	f67f aea2 	bls.w	8003538 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037f4:	bf00      	nop
 80037f6:	bf00      	nop
 80037f8:	3724      	adds	r7, #36	; 0x24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	40023800 	.word	0x40023800
 8003808:	40013800 	.word	0x40013800
 800380c:	40020000 	.word	0x40020000
 8003810:	40020400 	.word	0x40020400
 8003814:	40020800 	.word	0x40020800
 8003818:	40020c00 	.word	0x40020c00
 800381c:	40021000 	.word	0x40021000
 8003820:	40013c00 	.word	0x40013c00

08003824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	460b      	mov	r3, r1
 800382e:	807b      	strh	r3, [r7, #2]
 8003830:	4613      	mov	r3, r2
 8003832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003834:	787b      	ldrb	r3, [r7, #1]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800383a:	887a      	ldrh	r2, [r7, #2]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003840:	e003      	b.n	800384a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003842:	887b      	ldrh	r3, [r7, #2]
 8003844:	041a      	lsls	r2, r3, #16
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	619a      	str	r2, [r3, #24]
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
	...

08003858 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e267      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d075      	beq.n	8003962 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003876:	4b88      	ldr	r3, [pc, #544]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 030c 	and.w	r3, r3, #12
 800387e:	2b04      	cmp	r3, #4
 8003880:	d00c      	beq.n	800389c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003882:	4b85      	ldr	r3, [pc, #532]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800388a:	2b08      	cmp	r3, #8
 800388c:	d112      	bne.n	80038b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800388e:	4b82      	ldr	r3, [pc, #520]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003896:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800389a:	d10b      	bne.n	80038b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800389c:	4b7e      	ldr	r3, [pc, #504]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d05b      	beq.n	8003960 <HAL_RCC_OscConfig+0x108>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d157      	bne.n	8003960 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e242      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038bc:	d106      	bne.n	80038cc <HAL_RCC_OscConfig+0x74>
 80038be:	4b76      	ldr	r3, [pc, #472]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a75      	ldr	r2, [pc, #468]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 80038c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	e01d      	b.n	8003908 <HAL_RCC_OscConfig+0xb0>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038d4:	d10c      	bne.n	80038f0 <HAL_RCC_OscConfig+0x98>
 80038d6:	4b70      	ldr	r3, [pc, #448]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a6f      	ldr	r2, [pc, #444]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 80038dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038e0:	6013      	str	r3, [r2, #0]
 80038e2:	4b6d      	ldr	r3, [pc, #436]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a6c      	ldr	r2, [pc, #432]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 80038e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	e00b      	b.n	8003908 <HAL_RCC_OscConfig+0xb0>
 80038f0:	4b69      	ldr	r3, [pc, #420]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a68      	ldr	r2, [pc, #416]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 80038f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038fa:	6013      	str	r3, [r2, #0]
 80038fc:	4b66      	ldr	r3, [pc, #408]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a65      	ldr	r2, [pc, #404]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 8003902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003906:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d013      	beq.n	8003938 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003910:	f7ff fd12 	bl	8003338 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003918:	f7ff fd0e 	bl	8003338 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b64      	cmp	r3, #100	; 0x64
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e207      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800392a:	4b5b      	ldr	r3, [pc, #364]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCC_OscConfig+0xc0>
 8003936:	e014      	b.n	8003962 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003938:	f7ff fcfe 	bl	8003338 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003940:	f7ff fcfa 	bl	8003338 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b64      	cmp	r3, #100	; 0x64
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e1f3      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003952:	4b51      	ldr	r3, [pc, #324]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0xe8>
 800395e:	e000      	b.n	8003962 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d063      	beq.n	8003a36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800396e:	4b4a      	ldr	r3, [pc, #296]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 030c 	and.w	r3, r3, #12
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00b      	beq.n	8003992 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800397a:	4b47      	ldr	r3, [pc, #284]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003982:	2b08      	cmp	r3, #8
 8003984:	d11c      	bne.n	80039c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003986:	4b44      	ldr	r3, [pc, #272]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d116      	bne.n	80039c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003992:	4b41      	ldr	r3, [pc, #260]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d005      	beq.n	80039aa <HAL_RCC_OscConfig+0x152>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d001      	beq.n	80039aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e1c7      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039aa:	4b3b      	ldr	r3, [pc, #236]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	4937      	ldr	r1, [pc, #220]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039be:	e03a      	b.n	8003a36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d020      	beq.n	8003a0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039c8:	4b34      	ldr	r3, [pc, #208]	; (8003a9c <HAL_RCC_OscConfig+0x244>)
 80039ca:	2201      	movs	r2, #1
 80039cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ce:	f7ff fcb3 	bl	8003338 <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039d6:	f7ff fcaf 	bl	8003338 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e1a8      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e8:	4b2b      	ldr	r3, [pc, #172]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0f0      	beq.n	80039d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f4:	4b28      	ldr	r3, [pc, #160]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4925      	ldr	r1, [pc, #148]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	600b      	str	r3, [r1, #0]
 8003a08:	e015      	b.n	8003a36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a0a:	4b24      	ldr	r3, [pc, #144]	; (8003a9c <HAL_RCC_OscConfig+0x244>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a10:	f7ff fc92 	bl	8003338 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a18:	f7ff fc8e 	bl	8003338 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e187      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a2a:	4b1b      	ldr	r3, [pc, #108]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f0      	bne.n	8003a18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d036      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d016      	beq.n	8003a78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a4a:	4b15      	ldr	r3, [pc, #84]	; (8003aa0 <HAL_RCC_OscConfig+0x248>)
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a50:	f7ff fc72 	bl	8003338 <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a58:	f7ff fc6e 	bl	8003338 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e167      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a6a:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 8003a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0f0      	beq.n	8003a58 <HAL_RCC_OscConfig+0x200>
 8003a76:	e01b      	b.n	8003ab0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a78:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <HAL_RCC_OscConfig+0x248>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a7e:	f7ff fc5b 	bl	8003338 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a84:	e00e      	b.n	8003aa4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a86:	f7ff fc57 	bl	8003338 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d907      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e150      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	42470000 	.word	0x42470000
 8003aa0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aa4:	4b88      	ldr	r3, [pc, #544]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1ea      	bne.n	8003a86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 8097 	beq.w	8003bec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ac2:	4b81      	ldr	r3, [pc, #516]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10f      	bne.n	8003aee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60bb      	str	r3, [r7, #8]
 8003ad2:	4b7d      	ldr	r3, [pc, #500]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	4a7c      	ldr	r2, [pc, #496]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003adc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ade:	4b7a      	ldr	r3, [pc, #488]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae6:	60bb      	str	r3, [r7, #8]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aea:	2301      	movs	r3, #1
 8003aec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aee:	4b77      	ldr	r3, [pc, #476]	; (8003ccc <HAL_RCC_OscConfig+0x474>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d118      	bne.n	8003b2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003afa:	4b74      	ldr	r3, [pc, #464]	; (8003ccc <HAL_RCC_OscConfig+0x474>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a73      	ldr	r2, [pc, #460]	; (8003ccc <HAL_RCC_OscConfig+0x474>)
 8003b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b06:	f7ff fc17 	bl	8003338 <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0c:	e008      	b.n	8003b20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b0e:	f7ff fc13 	bl	8003338 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e10c      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b20:	4b6a      	ldr	r3, [pc, #424]	; (8003ccc <HAL_RCC_OscConfig+0x474>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0f0      	beq.n	8003b0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d106      	bne.n	8003b42 <HAL_RCC_OscConfig+0x2ea>
 8003b34:	4b64      	ldr	r3, [pc, #400]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b38:	4a63      	ldr	r2, [pc, #396]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003b3a:	f043 0301 	orr.w	r3, r3, #1
 8003b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b40:	e01c      	b.n	8003b7c <HAL_RCC_OscConfig+0x324>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2b05      	cmp	r3, #5
 8003b48:	d10c      	bne.n	8003b64 <HAL_RCC_OscConfig+0x30c>
 8003b4a:	4b5f      	ldr	r3, [pc, #380]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4e:	4a5e      	ldr	r2, [pc, #376]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003b50:	f043 0304 	orr.w	r3, r3, #4
 8003b54:	6713      	str	r3, [r2, #112]	; 0x70
 8003b56:	4b5c      	ldr	r3, [pc, #368]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5a:	4a5b      	ldr	r2, [pc, #364]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003b5c:	f043 0301 	orr.w	r3, r3, #1
 8003b60:	6713      	str	r3, [r2, #112]	; 0x70
 8003b62:	e00b      	b.n	8003b7c <HAL_RCC_OscConfig+0x324>
 8003b64:	4b58      	ldr	r3, [pc, #352]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b68:	4a57      	ldr	r2, [pc, #348]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003b6a:	f023 0301 	bic.w	r3, r3, #1
 8003b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b70:	4b55      	ldr	r3, [pc, #340]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b74:	4a54      	ldr	r2, [pc, #336]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003b76:	f023 0304 	bic.w	r3, r3, #4
 8003b7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d015      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b84:	f7ff fbd8 	bl	8003338 <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8a:	e00a      	b.n	8003ba2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b8c:	f7ff fbd4 	bl	8003338 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e0cb      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba2:	4b49      	ldr	r3, [pc, #292]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0ee      	beq.n	8003b8c <HAL_RCC_OscConfig+0x334>
 8003bae:	e014      	b.n	8003bda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb0:	f7ff fbc2 	bl	8003338 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb6:	e00a      	b.n	8003bce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bb8:	f7ff fbbe 	bl	8003338 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e0b5      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bce:	4b3e      	ldr	r3, [pc, #248]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1ee      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bda:	7dfb      	ldrb	r3, [r7, #23]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d105      	bne.n	8003bec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be0:	4b39      	ldr	r3, [pc, #228]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be4:	4a38      	ldr	r2, [pc, #224]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 80a1 	beq.w	8003d38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bf6:	4b34      	ldr	r3, [pc, #208]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 030c 	and.w	r3, r3, #12
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d05c      	beq.n	8003cbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d141      	bne.n	8003c8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c0a:	4b31      	ldr	r3, [pc, #196]	; (8003cd0 <HAL_RCC_OscConfig+0x478>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c10:	f7ff fb92 	bl	8003338 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c18:	f7ff fb8e 	bl	8003338 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e087      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c2a:	4b27      	ldr	r3, [pc, #156]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f0      	bne.n	8003c18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69da      	ldr	r2, [r3, #28]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	019b      	lsls	r3, r3, #6
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4c:	085b      	lsrs	r3, r3, #1
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	041b      	lsls	r3, r3, #16
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c58:	061b      	lsls	r3, r3, #24
 8003c5a:	491b      	ldr	r1, [pc, #108]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c60:	4b1b      	ldr	r3, [pc, #108]	; (8003cd0 <HAL_RCC_OscConfig+0x478>)
 8003c62:	2201      	movs	r2, #1
 8003c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c66:	f7ff fb67 	bl	8003338 <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c6e:	f7ff fb63 	bl	8003338 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e05c      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c80:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0f0      	beq.n	8003c6e <HAL_RCC_OscConfig+0x416>
 8003c8c:	e054      	b.n	8003d38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c8e:	4b10      	ldr	r3, [pc, #64]	; (8003cd0 <HAL_RCC_OscConfig+0x478>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c94:	f7ff fb50 	bl	8003338 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c9c:	f7ff fb4c 	bl	8003338 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e045      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cae:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1f0      	bne.n	8003c9c <HAL_RCC_OscConfig+0x444>
 8003cba:	e03d      	b.n	8003d38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d107      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e038      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	40007000 	.word	0x40007000
 8003cd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cd4:	4b1b      	ldr	r3, [pc, #108]	; (8003d44 <HAL_RCC_OscConfig+0x4ec>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d028      	beq.n	8003d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d121      	bne.n	8003d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d11a      	bne.n	8003d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d04:	4013      	ands	r3, r2
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d111      	bne.n	8003d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1a:	085b      	lsrs	r3, r3, #1
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d107      	bne.n	8003d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d001      	beq.n	8003d38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3718      	adds	r7, #24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	40023800 	.word	0x40023800

08003d48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e0cc      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d5c:	4b68      	ldr	r3, [pc, #416]	; (8003f00 <HAL_RCC_ClockConfig+0x1b8>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d90c      	bls.n	8003d84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d6a:	4b65      	ldr	r3, [pc, #404]	; (8003f00 <HAL_RCC_ClockConfig+0x1b8>)
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d72:	4b63      	ldr	r3, [pc, #396]	; (8003f00 <HAL_RCC_ClockConfig+0x1b8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d001      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e0b8      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d020      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d005      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d9c:	4b59      	ldr	r3, [pc, #356]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	4a58      	ldr	r2, [pc, #352]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003da2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003da6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0308 	and.w	r3, r3, #8
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003db4:	4b53      	ldr	r3, [pc, #332]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	4a52      	ldr	r2, [pc, #328]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dc0:	4b50      	ldr	r3, [pc, #320]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	494d      	ldr	r1, [pc, #308]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d044      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d107      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de6:	4b47      	ldr	r3, [pc, #284]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d119      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e07f      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d003      	beq.n	8003e06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e02:	2b03      	cmp	r3, #3
 8003e04:	d107      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e06:	4b3f      	ldr	r3, [pc, #252]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d109      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e06f      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e16:	4b3b      	ldr	r3, [pc, #236]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e067      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e26:	4b37      	ldr	r3, [pc, #220]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f023 0203 	bic.w	r2, r3, #3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	4934      	ldr	r1, [pc, #208]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e38:	f7ff fa7e 	bl	8003338 <HAL_GetTick>
 8003e3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3e:	e00a      	b.n	8003e56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e40:	f7ff fa7a 	bl	8003338 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e04f      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e56:	4b2b      	ldr	r3, [pc, #172]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 020c 	and.w	r2, r3, #12
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d1eb      	bne.n	8003e40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e68:	4b25      	ldr	r3, [pc, #148]	; (8003f00 <HAL_RCC_ClockConfig+0x1b8>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d20c      	bcs.n	8003e90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e76:	4b22      	ldr	r3, [pc, #136]	; (8003f00 <HAL_RCC_ClockConfig+0x1b8>)
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7e:	4b20      	ldr	r3, [pc, #128]	; (8003f00 <HAL_RCC_ClockConfig+0x1b8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d001      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e032      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d008      	beq.n	8003eae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e9c:	4b19      	ldr	r3, [pc, #100]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	4916      	ldr	r1, [pc, #88]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0308 	and.w	r3, r3, #8
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d009      	beq.n	8003ece <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eba:	4b12      	ldr	r3, [pc, #72]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	490e      	ldr	r1, [pc, #56]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ece:	f000 f821 	bl	8003f14 <HAL_RCC_GetSysClockFreq>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	091b      	lsrs	r3, r3, #4
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	490a      	ldr	r1, [pc, #40]	; (8003f08 <HAL_RCC_ClockConfig+0x1c0>)
 8003ee0:	5ccb      	ldrb	r3, [r1, r3]
 8003ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee6:	4a09      	ldr	r2, [pc, #36]	; (8003f0c <HAL_RCC_ClockConfig+0x1c4>)
 8003ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003eea:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <HAL_RCC_ClockConfig+0x1c8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff f9de 	bl	80032b0 <HAL_InitTick>

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	40023c00 	.word	0x40023c00
 8003f04:	40023800 	.word	0x40023800
 8003f08:	08006654 	.word	0x08006654
 8003f0c:	20000010 	.word	0x20000010
 8003f10:	20000014 	.word	0x20000014

08003f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f18:	b094      	sub	sp, #80	; 0x50
 8003f1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f20:	2300      	movs	r3, #0
 8003f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f24:	2300      	movs	r3, #0
 8003f26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f2c:	4b79      	ldr	r3, [pc, #484]	; (8004114 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f003 030c 	and.w	r3, r3, #12
 8003f34:	2b08      	cmp	r3, #8
 8003f36:	d00d      	beq.n	8003f54 <HAL_RCC_GetSysClockFreq+0x40>
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	f200 80e1 	bhi.w	8004100 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <HAL_RCC_GetSysClockFreq+0x34>
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d003      	beq.n	8003f4e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f46:	e0db      	b.n	8004100 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f48:	4b73      	ldr	r3, [pc, #460]	; (8004118 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f4a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f4c:	e0db      	b.n	8004106 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f4e:	4b73      	ldr	r3, [pc, #460]	; (800411c <HAL_RCC_GetSysClockFreq+0x208>)
 8003f50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f52:	e0d8      	b.n	8004106 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f54:	4b6f      	ldr	r3, [pc, #444]	; (8004114 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f5c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f5e:	4b6d      	ldr	r3, [pc, #436]	; (8004114 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d063      	beq.n	8004032 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f6a:	4b6a      	ldr	r3, [pc, #424]	; (8004114 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	099b      	lsrs	r3, r3, #6
 8003f70:	2200      	movs	r2, #0
 8003f72:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f7c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f7e:	2300      	movs	r3, #0
 8003f80:	637b      	str	r3, [r7, #52]	; 0x34
 8003f82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f86:	4622      	mov	r2, r4
 8003f88:	462b      	mov	r3, r5
 8003f8a:	f04f 0000 	mov.w	r0, #0
 8003f8e:	f04f 0100 	mov.w	r1, #0
 8003f92:	0159      	lsls	r1, r3, #5
 8003f94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f98:	0150      	lsls	r0, r2, #5
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4621      	mov	r1, r4
 8003fa0:	1a51      	subs	r1, r2, r1
 8003fa2:	6139      	str	r1, [r7, #16]
 8003fa4:	4629      	mov	r1, r5
 8003fa6:	eb63 0301 	sbc.w	r3, r3, r1
 8003faa:	617b      	str	r3, [r7, #20]
 8003fac:	f04f 0200 	mov.w	r2, #0
 8003fb0:	f04f 0300 	mov.w	r3, #0
 8003fb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fb8:	4659      	mov	r1, fp
 8003fba:	018b      	lsls	r3, r1, #6
 8003fbc:	4651      	mov	r1, sl
 8003fbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fc2:	4651      	mov	r1, sl
 8003fc4:	018a      	lsls	r2, r1, #6
 8003fc6:	4651      	mov	r1, sl
 8003fc8:	ebb2 0801 	subs.w	r8, r2, r1
 8003fcc:	4659      	mov	r1, fp
 8003fce:	eb63 0901 	sbc.w	r9, r3, r1
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	f04f 0300 	mov.w	r3, #0
 8003fda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fe2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fe6:	4690      	mov	r8, r2
 8003fe8:	4699      	mov	r9, r3
 8003fea:	4623      	mov	r3, r4
 8003fec:	eb18 0303 	adds.w	r3, r8, r3
 8003ff0:	60bb      	str	r3, [r7, #8]
 8003ff2:	462b      	mov	r3, r5
 8003ff4:	eb49 0303 	adc.w	r3, r9, r3
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	f04f 0200 	mov.w	r2, #0
 8003ffe:	f04f 0300 	mov.w	r3, #0
 8004002:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004006:	4629      	mov	r1, r5
 8004008:	024b      	lsls	r3, r1, #9
 800400a:	4621      	mov	r1, r4
 800400c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004010:	4621      	mov	r1, r4
 8004012:	024a      	lsls	r2, r1, #9
 8004014:	4610      	mov	r0, r2
 8004016:	4619      	mov	r1, r3
 8004018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800401a:	2200      	movs	r2, #0
 800401c:	62bb      	str	r3, [r7, #40]	; 0x28
 800401e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004020:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004024:	f7fc feca 	bl	8000dbc <__aeabi_uldivmod>
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	4613      	mov	r3, r2
 800402e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004030:	e058      	b.n	80040e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004032:	4b38      	ldr	r3, [pc, #224]	; (8004114 <HAL_RCC_GetSysClockFreq+0x200>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	099b      	lsrs	r3, r3, #6
 8004038:	2200      	movs	r2, #0
 800403a:	4618      	mov	r0, r3
 800403c:	4611      	mov	r1, r2
 800403e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004042:	623b      	str	r3, [r7, #32]
 8004044:	2300      	movs	r3, #0
 8004046:	627b      	str	r3, [r7, #36]	; 0x24
 8004048:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800404c:	4642      	mov	r2, r8
 800404e:	464b      	mov	r3, r9
 8004050:	f04f 0000 	mov.w	r0, #0
 8004054:	f04f 0100 	mov.w	r1, #0
 8004058:	0159      	lsls	r1, r3, #5
 800405a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800405e:	0150      	lsls	r0, r2, #5
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	4641      	mov	r1, r8
 8004066:	ebb2 0a01 	subs.w	sl, r2, r1
 800406a:	4649      	mov	r1, r9
 800406c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	f04f 0300 	mov.w	r3, #0
 8004078:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800407c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004080:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004084:	ebb2 040a 	subs.w	r4, r2, sl
 8004088:	eb63 050b 	sbc.w	r5, r3, fp
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	f04f 0300 	mov.w	r3, #0
 8004094:	00eb      	lsls	r3, r5, #3
 8004096:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800409a:	00e2      	lsls	r2, r4, #3
 800409c:	4614      	mov	r4, r2
 800409e:	461d      	mov	r5, r3
 80040a0:	4643      	mov	r3, r8
 80040a2:	18e3      	adds	r3, r4, r3
 80040a4:	603b      	str	r3, [r7, #0]
 80040a6:	464b      	mov	r3, r9
 80040a8:	eb45 0303 	adc.w	r3, r5, r3
 80040ac:	607b      	str	r3, [r7, #4]
 80040ae:	f04f 0200 	mov.w	r2, #0
 80040b2:	f04f 0300 	mov.w	r3, #0
 80040b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040ba:	4629      	mov	r1, r5
 80040bc:	028b      	lsls	r3, r1, #10
 80040be:	4621      	mov	r1, r4
 80040c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040c4:	4621      	mov	r1, r4
 80040c6:	028a      	lsls	r2, r1, #10
 80040c8:	4610      	mov	r0, r2
 80040ca:	4619      	mov	r1, r3
 80040cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040ce:	2200      	movs	r2, #0
 80040d0:	61bb      	str	r3, [r7, #24]
 80040d2:	61fa      	str	r2, [r7, #28]
 80040d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040d8:	f7fc fe70 	bl	8000dbc <__aeabi_uldivmod>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4613      	mov	r3, r2
 80040e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040e4:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <HAL_RCC_GetSysClockFreq+0x200>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	0c1b      	lsrs	r3, r3, #16
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	3301      	adds	r3, #1
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80040f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040fe:	e002      	b.n	8004106 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004100:	4b05      	ldr	r3, [pc, #20]	; (8004118 <HAL_RCC_GetSysClockFreq+0x204>)
 8004102:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004108:	4618      	mov	r0, r3
 800410a:	3750      	adds	r7, #80	; 0x50
 800410c:	46bd      	mov	sp, r7
 800410e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004112:	bf00      	nop
 8004114:	40023800 	.word	0x40023800
 8004118:	00f42400 	.word	0x00f42400
 800411c:	007a1200 	.word	0x007a1200

08004120 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004124:	4b03      	ldr	r3, [pc, #12]	; (8004134 <HAL_RCC_GetHCLKFreq+0x14>)
 8004126:	681b      	ldr	r3, [r3, #0]
}
 8004128:	4618      	mov	r0, r3
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	20000010 	.word	0x20000010

08004138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800413c:	f7ff fff0 	bl	8004120 <HAL_RCC_GetHCLKFreq>
 8004140:	4602      	mov	r2, r0
 8004142:	4b05      	ldr	r3, [pc, #20]	; (8004158 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	0a9b      	lsrs	r3, r3, #10
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	4903      	ldr	r1, [pc, #12]	; (800415c <HAL_RCC_GetPCLK1Freq+0x24>)
 800414e:	5ccb      	ldrb	r3, [r1, r3]
 8004150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004154:	4618      	mov	r0, r3
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40023800 	.word	0x40023800
 800415c:	08006664 	.word	0x08006664

08004160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004164:	f7ff ffdc 	bl	8004120 <HAL_RCC_GetHCLKFreq>
 8004168:	4602      	mov	r2, r0
 800416a:	4b05      	ldr	r3, [pc, #20]	; (8004180 <HAL_RCC_GetPCLK2Freq+0x20>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	0b5b      	lsrs	r3, r3, #13
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	4903      	ldr	r1, [pc, #12]	; (8004184 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004176:	5ccb      	ldrb	r3, [r1, r3]
 8004178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800417c:	4618      	mov	r0, r3
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40023800 	.word	0x40023800
 8004184:	08006664 	.word	0x08006664

08004188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e041      	b.n	800421e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d106      	bne.n	80041b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7fe fa46 	bl	8002640 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3304      	adds	r3, #4
 80041c4:	4619      	mov	r1, r3
 80041c6:	4610      	mov	r0, r2
 80041c8:	f000 fc4e 	bl	8004a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
	...

08004228 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b01      	cmp	r3, #1
 800423a:	d001      	beq.n	8004240 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e044      	b.n	80042ca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a1e      	ldr	r2, [pc, #120]	; (80042d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d018      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x6c>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800426a:	d013      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x6c>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a1a      	ldr	r2, [pc, #104]	; (80042dc <HAL_TIM_Base_Start_IT+0xb4>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d00e      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x6c>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a19      	ldr	r2, [pc, #100]	; (80042e0 <HAL_TIM_Base_Start_IT+0xb8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d009      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x6c>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a17      	ldr	r2, [pc, #92]	; (80042e4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d004      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x6c>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a16      	ldr	r2, [pc, #88]	; (80042e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d111      	bne.n	80042b8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b06      	cmp	r3, #6
 80042a4:	d010      	beq.n	80042c8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0201 	orr.w	r2, r2, #1
 80042b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b6:	e007      	b.n	80042c8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	40010000 	.word	0x40010000
 80042dc:	40000400 	.word	0x40000400
 80042e0:	40000800 	.word	0x40000800
 80042e4:	40000c00 	.word	0x40000c00
 80042e8:	40014000 	.word	0x40014000

080042ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e041      	b.n	8004382 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d106      	bne.n	8004318 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7fe f92c 	bl	8002570 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3304      	adds	r3, #4
 8004328:	4619      	mov	r1, r3
 800432a:	4610      	mov	r0, r2
 800432c:	f000 fb9c 	bl	8004a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
	...

0800438c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d109      	bne.n	80043b0 <HAL_TIM_PWM_Start+0x24>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	bf14      	ite	ne
 80043a8:	2301      	movne	r3, #1
 80043aa:	2300      	moveq	r3, #0
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	e022      	b.n	80043f6 <HAL_TIM_PWM_Start+0x6a>
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	d109      	bne.n	80043ca <HAL_TIM_PWM_Start+0x3e>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b01      	cmp	r3, #1
 80043c0:	bf14      	ite	ne
 80043c2:	2301      	movne	r3, #1
 80043c4:	2300      	moveq	r3, #0
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	e015      	b.n	80043f6 <HAL_TIM_PWM_Start+0x6a>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d109      	bne.n	80043e4 <HAL_TIM_PWM_Start+0x58>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b01      	cmp	r3, #1
 80043da:	bf14      	ite	ne
 80043dc:	2301      	movne	r3, #1
 80043de:	2300      	moveq	r3, #0
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	e008      	b.n	80043f6 <HAL_TIM_PWM_Start+0x6a>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	bf14      	ite	ne
 80043f0:	2301      	movne	r3, #1
 80043f2:	2300      	moveq	r3, #0
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e068      	b.n	80044d0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d104      	bne.n	800440e <HAL_TIM_PWM_Start+0x82>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800440c:	e013      	b.n	8004436 <HAL_TIM_PWM_Start+0xaa>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b04      	cmp	r3, #4
 8004412:	d104      	bne.n	800441e <HAL_TIM_PWM_Start+0x92>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800441c:	e00b      	b.n	8004436 <HAL_TIM_PWM_Start+0xaa>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b08      	cmp	r3, #8
 8004422:	d104      	bne.n	800442e <HAL_TIM_PWM_Start+0xa2>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800442c:	e003      	b.n	8004436 <HAL_TIM_PWM_Start+0xaa>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2202      	movs	r2, #2
 8004432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2201      	movs	r2, #1
 800443c:	6839      	ldr	r1, [r7, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f000 fdb8 	bl	8004fb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a23      	ldr	r2, [pc, #140]	; (80044d8 <HAL_TIM_PWM_Start+0x14c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d107      	bne.n	800445e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800445c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a1d      	ldr	r2, [pc, #116]	; (80044d8 <HAL_TIM_PWM_Start+0x14c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d018      	beq.n	800449a <HAL_TIM_PWM_Start+0x10e>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004470:	d013      	beq.n	800449a <HAL_TIM_PWM_Start+0x10e>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a19      	ldr	r2, [pc, #100]	; (80044dc <HAL_TIM_PWM_Start+0x150>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d00e      	beq.n	800449a <HAL_TIM_PWM_Start+0x10e>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a17      	ldr	r2, [pc, #92]	; (80044e0 <HAL_TIM_PWM_Start+0x154>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d009      	beq.n	800449a <HAL_TIM_PWM_Start+0x10e>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a16      	ldr	r2, [pc, #88]	; (80044e4 <HAL_TIM_PWM_Start+0x158>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d004      	beq.n	800449a <HAL_TIM_PWM_Start+0x10e>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a14      	ldr	r2, [pc, #80]	; (80044e8 <HAL_TIM_PWM_Start+0x15c>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d111      	bne.n	80044be <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2b06      	cmp	r3, #6
 80044aa:	d010      	beq.n	80044ce <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0201 	orr.w	r2, r2, #1
 80044ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044bc:	e007      	b.n	80044ce <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f042 0201 	orr.w	r2, r2, #1
 80044cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40010000 	.word	0x40010000
 80044dc:	40000400 	.word	0x40000400
 80044e0:	40000800 	.word	0x40000800
 80044e4:	40000c00 	.word	0x40000c00
 80044e8:	40014000 	.word	0x40014000

080044ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e097      	b.n	8004630 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b00      	cmp	r3, #0
 800450a:	d106      	bne.n	800451a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7fe f84d 	bl	80025b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2202      	movs	r2, #2
 800451e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6812      	ldr	r2, [r2, #0]
 800452c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004530:	f023 0307 	bic.w	r3, r3, #7
 8004534:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3304      	adds	r3, #4
 800453e:	4619      	mov	r1, r3
 8004540:	4610      	mov	r0, r2
 8004542:	f000 fa91 	bl	8004a68 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	4313      	orrs	r3, r2
 8004566:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800456e:	f023 0303 	bic.w	r3, r3, #3
 8004572:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	021b      	lsls	r3, r3, #8
 800457e:	4313      	orrs	r3, r2
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	4313      	orrs	r3, r2
 8004584:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800458c:	f023 030c 	bic.w	r3, r3, #12
 8004590:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004598:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800459c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	68da      	ldr	r2, [r3, #12]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	021b      	lsls	r3, r3, #8
 80045a8:	4313      	orrs	r3, r2
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	011a      	lsls	r2, r3, #4
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	031b      	lsls	r3, r3, #12
 80045bc:	4313      	orrs	r3, r2
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80045ca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80045d2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	011b      	lsls	r3, r3, #4
 80045de:	4313      	orrs	r3, r2
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3718      	adds	r7, #24
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004648:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004650:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004658:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004660:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d110      	bne.n	800468a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004668:	7bfb      	ldrb	r3, [r7, #15]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d102      	bne.n	8004674 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800466e:	7b7b      	ldrb	r3, [r7, #13]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d001      	beq.n	8004678 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e069      	b.n	800474c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2202      	movs	r2, #2
 800467c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004688:	e031      	b.n	80046ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b04      	cmp	r3, #4
 800468e:	d110      	bne.n	80046b2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004690:	7bbb      	ldrb	r3, [r7, #14]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d102      	bne.n	800469c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004696:	7b3b      	ldrb	r3, [r7, #12]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d001      	beq.n	80046a0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e055      	b.n	800474c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046b0:	e01d      	b.n	80046ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d108      	bne.n	80046ca <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046b8:	7bbb      	ldrb	r3, [r7, #14]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d105      	bne.n	80046ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046be:	7b7b      	ldrb	r3, [r7, #13]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d102      	bne.n	80046ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046c4:	7b3b      	ldrb	r3, [r7, #12]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d001      	beq.n	80046ce <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e03e      	b.n	800474c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2202      	movs	r2, #2
 80046d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2202      	movs	r2, #2
 80046da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2202      	movs	r2, #2
 80046e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2202      	movs	r2, #2
 80046ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d003      	beq.n	80046fc <HAL_TIM_Encoder_Start+0xc4>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	d008      	beq.n	800470c <HAL_TIM_Encoder_Start+0xd4>
 80046fa:	e00f      	b.n	800471c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2201      	movs	r2, #1
 8004702:	2100      	movs	r1, #0
 8004704:	4618      	mov	r0, r3
 8004706:	f000 fc55 	bl	8004fb4 <TIM_CCxChannelCmd>
      break;
 800470a:	e016      	b.n	800473a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2201      	movs	r2, #1
 8004712:	2104      	movs	r1, #4
 8004714:	4618      	mov	r0, r3
 8004716:	f000 fc4d 	bl	8004fb4 <TIM_CCxChannelCmd>
      break;
 800471a:	e00e      	b.n	800473a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2201      	movs	r2, #1
 8004722:	2100      	movs	r1, #0
 8004724:	4618      	mov	r0, r3
 8004726:	f000 fc45 	bl	8004fb4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2201      	movs	r2, #1
 8004730:	2104      	movs	r1, #4
 8004732:	4618      	mov	r0, r3
 8004734:	f000 fc3e 	bl	8004fb4 <TIM_CCxChannelCmd>
      break;
 8004738:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f042 0201 	orr.w	r2, r2, #1
 8004748:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004760:	2300      	movs	r3, #0
 8004762:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800476a:	2b01      	cmp	r3, #1
 800476c:	d101      	bne.n	8004772 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800476e:	2302      	movs	r3, #2
 8004770:	e0ae      	b.n	80048d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b0c      	cmp	r3, #12
 800477e:	f200 809f 	bhi.w	80048c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004782:	a201      	add	r2, pc, #4	; (adr r2, 8004788 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004788:	080047bd 	.word	0x080047bd
 800478c:	080048c1 	.word	0x080048c1
 8004790:	080048c1 	.word	0x080048c1
 8004794:	080048c1 	.word	0x080048c1
 8004798:	080047fd 	.word	0x080047fd
 800479c:	080048c1 	.word	0x080048c1
 80047a0:	080048c1 	.word	0x080048c1
 80047a4:	080048c1 	.word	0x080048c1
 80047a8:	0800483f 	.word	0x0800483f
 80047ac:	080048c1 	.word	0x080048c1
 80047b0:	080048c1 	.word	0x080048c1
 80047b4:	080048c1 	.word	0x080048c1
 80047b8:	0800487f 	.word	0x0800487f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68b9      	ldr	r1, [r7, #8]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 f9d0 	bl	8004b68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699a      	ldr	r2, [r3, #24]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f042 0208 	orr.w	r2, r2, #8
 80047d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	699a      	ldr	r2, [r3, #24]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 0204 	bic.w	r2, r2, #4
 80047e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6999      	ldr	r1, [r3, #24]
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	691a      	ldr	r2, [r3, #16]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	619a      	str	r2, [r3, #24]
      break;
 80047fa:	e064      	b.n	80048c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68b9      	ldr	r1, [r7, #8]
 8004802:	4618      	mov	r0, r3
 8004804:	f000 fa16 	bl	8004c34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699a      	ldr	r2, [r3, #24]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004816:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	699a      	ldr	r2, [r3, #24]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004826:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6999      	ldr	r1, [r3, #24]
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	021a      	lsls	r2, r3, #8
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	619a      	str	r2, [r3, #24]
      break;
 800483c:	e043      	b.n	80048c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68b9      	ldr	r1, [r7, #8]
 8004844:	4618      	mov	r0, r3
 8004846:	f000 fa61 	bl	8004d0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69da      	ldr	r2, [r3, #28]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f042 0208 	orr.w	r2, r2, #8
 8004858:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	69da      	ldr	r2, [r3, #28]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 0204 	bic.w	r2, r2, #4
 8004868:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	69d9      	ldr	r1, [r3, #28]
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	691a      	ldr	r2, [r3, #16]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	61da      	str	r2, [r3, #28]
      break;
 800487c:	e023      	b.n	80048c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68b9      	ldr	r1, [r7, #8]
 8004884:	4618      	mov	r0, r3
 8004886:	f000 faab 	bl	8004de0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	69da      	ldr	r2, [r3, #28]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004898:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	69da      	ldr	r2, [r3, #28]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	69d9      	ldr	r1, [r3, #28]
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	021a      	lsls	r2, r3, #8
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	61da      	str	r2, [r3, #28]
      break;
 80048be:	e002      	b.n	80048c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	75fb      	strb	r3, [r7, #23]
      break;
 80048c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d101      	bne.n	80048f4 <HAL_TIM_ConfigClockSource+0x1c>
 80048f0:	2302      	movs	r3, #2
 80048f2:	e0b4      	b.n	8004a5e <HAL_TIM_ConfigClockSource+0x186>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800491a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800492c:	d03e      	beq.n	80049ac <HAL_TIM_ConfigClockSource+0xd4>
 800492e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004932:	f200 8087 	bhi.w	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
 8004936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800493a:	f000 8086 	beq.w	8004a4a <HAL_TIM_ConfigClockSource+0x172>
 800493e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004942:	d87f      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
 8004944:	2b70      	cmp	r3, #112	; 0x70
 8004946:	d01a      	beq.n	800497e <HAL_TIM_ConfigClockSource+0xa6>
 8004948:	2b70      	cmp	r3, #112	; 0x70
 800494a:	d87b      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
 800494c:	2b60      	cmp	r3, #96	; 0x60
 800494e:	d050      	beq.n	80049f2 <HAL_TIM_ConfigClockSource+0x11a>
 8004950:	2b60      	cmp	r3, #96	; 0x60
 8004952:	d877      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
 8004954:	2b50      	cmp	r3, #80	; 0x50
 8004956:	d03c      	beq.n	80049d2 <HAL_TIM_ConfigClockSource+0xfa>
 8004958:	2b50      	cmp	r3, #80	; 0x50
 800495a:	d873      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
 800495c:	2b40      	cmp	r3, #64	; 0x40
 800495e:	d058      	beq.n	8004a12 <HAL_TIM_ConfigClockSource+0x13a>
 8004960:	2b40      	cmp	r3, #64	; 0x40
 8004962:	d86f      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
 8004964:	2b30      	cmp	r3, #48	; 0x30
 8004966:	d064      	beq.n	8004a32 <HAL_TIM_ConfigClockSource+0x15a>
 8004968:	2b30      	cmp	r3, #48	; 0x30
 800496a:	d86b      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
 800496c:	2b20      	cmp	r3, #32
 800496e:	d060      	beq.n	8004a32 <HAL_TIM_ConfigClockSource+0x15a>
 8004970:	2b20      	cmp	r3, #32
 8004972:	d867      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
 8004974:	2b00      	cmp	r3, #0
 8004976:	d05c      	beq.n	8004a32 <HAL_TIM_ConfigClockSource+0x15a>
 8004978:	2b10      	cmp	r3, #16
 800497a:	d05a      	beq.n	8004a32 <HAL_TIM_ConfigClockSource+0x15a>
 800497c:	e062      	b.n	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6818      	ldr	r0, [r3, #0]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	6899      	ldr	r1, [r3, #8]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f000 faf1 	bl	8004f74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	609a      	str	r2, [r3, #8]
      break;
 80049aa:	e04f      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6818      	ldr	r0, [r3, #0]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	6899      	ldr	r1, [r3, #8]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f000 fada 	bl	8004f74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689a      	ldr	r2, [r3, #8]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049ce:	609a      	str	r2, [r3, #8]
      break;
 80049d0:	e03c      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6818      	ldr	r0, [r3, #0]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	6859      	ldr	r1, [r3, #4]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	461a      	mov	r2, r3
 80049e0:	f000 fa4e 	bl	8004e80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2150      	movs	r1, #80	; 0x50
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 faa7 	bl	8004f3e <TIM_ITRx_SetConfig>
      break;
 80049f0:	e02c      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6818      	ldr	r0, [r3, #0]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	6859      	ldr	r1, [r3, #4]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	461a      	mov	r2, r3
 8004a00:	f000 fa6d 	bl	8004ede <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2160      	movs	r1, #96	; 0x60
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 fa97 	bl	8004f3e <TIM_ITRx_SetConfig>
      break;
 8004a10:	e01c      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6818      	ldr	r0, [r3, #0]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	6859      	ldr	r1, [r3, #4]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	f000 fa2e 	bl	8004e80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2140      	movs	r1, #64	; 0x40
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 fa87 	bl	8004f3e <TIM_ITRx_SetConfig>
      break;
 8004a30:	e00c      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	4610      	mov	r0, r2
 8004a3e:	f000 fa7e 	bl	8004f3e <TIM_ITRx_SetConfig>
      break;
 8004a42:	e003      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	73fb      	strb	r3, [r7, #15]
      break;
 8004a48:	e000      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
	...

08004a68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a34      	ldr	r2, [pc, #208]	; (8004b4c <TIM_Base_SetConfig+0xe4>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d00f      	beq.n	8004aa0 <TIM_Base_SetConfig+0x38>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a86:	d00b      	beq.n	8004aa0 <TIM_Base_SetConfig+0x38>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a31      	ldr	r2, [pc, #196]	; (8004b50 <TIM_Base_SetConfig+0xe8>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d007      	beq.n	8004aa0 <TIM_Base_SetConfig+0x38>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a30      	ldr	r2, [pc, #192]	; (8004b54 <TIM_Base_SetConfig+0xec>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d003      	beq.n	8004aa0 <TIM_Base_SetConfig+0x38>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a2f      	ldr	r2, [pc, #188]	; (8004b58 <TIM_Base_SetConfig+0xf0>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d108      	bne.n	8004ab2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a25      	ldr	r2, [pc, #148]	; (8004b4c <TIM_Base_SetConfig+0xe4>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d01b      	beq.n	8004af2 <TIM_Base_SetConfig+0x8a>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac0:	d017      	beq.n	8004af2 <TIM_Base_SetConfig+0x8a>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a22      	ldr	r2, [pc, #136]	; (8004b50 <TIM_Base_SetConfig+0xe8>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d013      	beq.n	8004af2 <TIM_Base_SetConfig+0x8a>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a21      	ldr	r2, [pc, #132]	; (8004b54 <TIM_Base_SetConfig+0xec>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d00f      	beq.n	8004af2 <TIM_Base_SetConfig+0x8a>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a20      	ldr	r2, [pc, #128]	; (8004b58 <TIM_Base_SetConfig+0xf0>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d00b      	beq.n	8004af2 <TIM_Base_SetConfig+0x8a>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a1f      	ldr	r2, [pc, #124]	; (8004b5c <TIM_Base_SetConfig+0xf4>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d007      	beq.n	8004af2 <TIM_Base_SetConfig+0x8a>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a1e      	ldr	r2, [pc, #120]	; (8004b60 <TIM_Base_SetConfig+0xf8>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d003      	beq.n	8004af2 <TIM_Base_SetConfig+0x8a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a1d      	ldr	r2, [pc, #116]	; (8004b64 <TIM_Base_SetConfig+0xfc>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d108      	bne.n	8004b04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a08      	ldr	r2, [pc, #32]	; (8004b4c <TIM_Base_SetConfig+0xe4>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d103      	bne.n	8004b38 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	691a      	ldr	r2, [r3, #16]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	615a      	str	r2, [r3, #20]
}
 8004b3e:	bf00      	nop
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	40010000 	.word	0x40010000
 8004b50:	40000400 	.word	0x40000400
 8004b54:	40000800 	.word	0x40000800
 8004b58:	40000c00 	.word	0x40000c00
 8004b5c:	40014000 	.word	0x40014000
 8004b60:	40014400 	.word	0x40014400
 8004b64:	40014800 	.word	0x40014800

08004b68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b087      	sub	sp, #28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	f023 0201 	bic.w	r2, r3, #1
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 0303 	bic.w	r3, r3, #3
 8004b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f023 0302 	bic.w	r3, r3, #2
 8004bb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a1c      	ldr	r2, [pc, #112]	; (8004c30 <TIM_OC1_SetConfig+0xc8>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d10c      	bne.n	8004bde <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f023 0308 	bic.w	r3, r3, #8
 8004bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f023 0304 	bic.w	r3, r3, #4
 8004bdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a13      	ldr	r2, [pc, #76]	; (8004c30 <TIM_OC1_SetConfig+0xc8>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d111      	bne.n	8004c0a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	621a      	str	r2, [r3, #32]
}
 8004c24:	bf00      	nop
 8004c26:	371c      	adds	r7, #28
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	40010000 	.word	0x40010000

08004c34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	f023 0210 	bic.w	r2, r3, #16
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	021b      	lsls	r3, r3, #8
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f023 0320 	bic.w	r3, r3, #32
 8004c7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	011b      	lsls	r3, r3, #4
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a1e      	ldr	r2, [pc, #120]	; (8004d08 <TIM_OC2_SetConfig+0xd4>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d10d      	bne.n	8004cb0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	011b      	lsls	r3, r3, #4
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a15      	ldr	r2, [pc, #84]	; (8004d08 <TIM_OC2_SetConfig+0xd4>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d113      	bne.n	8004ce0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	621a      	str	r2, [r3, #32]
}
 8004cfa:	bf00      	nop
 8004cfc:	371c      	adds	r7, #28
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	40010000 	.word	0x40010000

08004d0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f023 0303 	bic.w	r3, r3, #3
 8004d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	021b      	lsls	r3, r3, #8
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a1d      	ldr	r2, [pc, #116]	; (8004ddc <TIM_OC3_SetConfig+0xd0>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d10d      	bne.n	8004d86 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	021b      	lsls	r3, r3, #8
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a14      	ldr	r2, [pc, #80]	; (8004ddc <TIM_OC3_SetConfig+0xd0>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d113      	bne.n	8004db6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	011b      	lsls	r3, r3, #4
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	011b      	lsls	r3, r3, #4
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	621a      	str	r2, [r3, #32]
}
 8004dd0:	bf00      	nop
 8004dd2:	371c      	adds	r7, #28
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	40010000 	.word	0x40010000

08004de0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	021b      	lsls	r3, r3, #8
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	031b      	lsls	r3, r3, #12
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a10      	ldr	r2, [pc, #64]	; (8004e7c <TIM_OC4_SetConfig+0x9c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d109      	bne.n	8004e54 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	019b      	lsls	r3, r3, #6
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	621a      	str	r2, [r3, #32]
}
 8004e6e:	bf00      	nop
 8004e70:	371c      	adds	r7, #28
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	40010000 	.word	0x40010000

08004e80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	f023 0201 	bic.w	r2, r3, #1
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f023 030a 	bic.w	r3, r3, #10
 8004ebc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	621a      	str	r2, [r3, #32]
}
 8004ed2:	bf00      	nop
 8004ed4:	371c      	adds	r7, #28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b087      	sub	sp, #28
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	60f8      	str	r0, [r7, #12]
 8004ee6:	60b9      	str	r1, [r7, #8]
 8004ee8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	f023 0210 	bic.w	r2, r3, #16
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	031b      	lsls	r3, r3, #12
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	011b      	lsls	r3, r3, #4
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	621a      	str	r2, [r3, #32]
}
 8004f32:	bf00      	nop
 8004f34:	371c      	adds	r7, #28
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b085      	sub	sp, #20
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
 8004f46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	f043 0307 	orr.w	r3, r3, #7
 8004f60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	609a      	str	r2, [r3, #8]
}
 8004f68:	bf00      	nop
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
 8004f80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	021a      	lsls	r2, r3, #8
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	431a      	orrs	r2, r3
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	609a      	str	r2, [r3, #8]
}
 8004fa8:	bf00      	nop
 8004faa:	371c      	adds	r7, #28
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f003 031f 	and.w	r3, r3, #31
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6a1a      	ldr	r2, [r3, #32]
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	43db      	mvns	r3, r3
 8004fd6:	401a      	ands	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a1a      	ldr	r2, [r3, #32]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f003 031f 	and.w	r3, r3, #31
 8004fe6:	6879      	ldr	r1, [r7, #4]
 8004fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8004fec:	431a      	orrs	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	621a      	str	r2, [r3, #32]
}
 8004ff2:	bf00      	nop
 8004ff4:	371c      	adds	r7, #28
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
	...

08005000 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005014:	2302      	movs	r3, #2
 8005016:	e050      	b.n	80050ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	4313      	orrs	r3, r2
 8005048:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a1c      	ldr	r2, [pc, #112]	; (80050c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d018      	beq.n	800508e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005064:	d013      	beq.n	800508e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a18      	ldr	r2, [pc, #96]	; (80050cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d00e      	beq.n	800508e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a16      	ldr	r2, [pc, #88]	; (80050d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d009      	beq.n	800508e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a15      	ldr	r2, [pc, #84]	; (80050d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d004      	beq.n	800508e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a13      	ldr	r2, [pc, #76]	; (80050d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d10c      	bne.n	80050a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005094:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	4313      	orrs	r3, r2
 800509e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40010000 	.word	0x40010000
 80050cc:	40000400 	.word	0x40000400
 80050d0:	40000800 	.word	0x40000800
 80050d4:	40000c00 	.word	0x40000c00
 80050d8:	40014000 	.word	0x40014000

080050dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d101      	bne.n	80050f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80050f4:	2302      	movs	r3, #2
 80050f6:	e03d      	b.n	8005174 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	4313      	orrs	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	4313      	orrs	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	4313      	orrs	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4313      	orrs	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	4313      	orrs	r3, r2
 8005144:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	4313      	orrs	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e03f      	b.n	8005212 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7fd fabc 	bl	8002724 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2224      	movs	r2, #36	; 0x24
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 f829 	bl	800521c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	691a      	ldr	r2, [r3, #16]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	695a      	ldr	r2, [r3, #20]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68da      	ldr	r2, [r3, #12]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2220      	movs	r2, #32
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2220      	movs	r2, #32
 800520c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3708      	adds	r7, #8
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
	...

0800521c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800521c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005220:	b0c0      	sub	sp, #256	; 0x100
 8005222:	af00      	add	r7, sp, #0
 8005224:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005238:	68d9      	ldr	r1, [r3, #12]
 800523a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	ea40 0301 	orr.w	r3, r0, r1
 8005244:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800524a:	689a      	ldr	r2, [r3, #8]
 800524c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	431a      	orrs	r2, r3
 8005254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	431a      	orrs	r2, r3
 800525c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	4313      	orrs	r3, r2
 8005264:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005274:	f021 010c 	bic.w	r1, r1, #12
 8005278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005282:	430b      	orrs	r3, r1
 8005284:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005296:	6999      	ldr	r1, [r3, #24]
 8005298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	ea40 0301 	orr.w	r3, r0, r1
 80052a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	4b8f      	ldr	r3, [pc, #572]	; (80054e8 <UART_SetConfig+0x2cc>)
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d005      	beq.n	80052bc <UART_SetConfig+0xa0>
 80052b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	4b8d      	ldr	r3, [pc, #564]	; (80054ec <UART_SetConfig+0x2d0>)
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d104      	bne.n	80052c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052bc:	f7fe ff50 	bl	8004160 <HAL_RCC_GetPCLK2Freq>
 80052c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80052c4:	e003      	b.n	80052ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052c6:	f7fe ff37 	bl	8004138 <HAL_RCC_GetPCLK1Freq>
 80052ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052d8:	f040 810c 	bne.w	80054f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052e0:	2200      	movs	r2, #0
 80052e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80052e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80052ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80052ee:	4622      	mov	r2, r4
 80052f0:	462b      	mov	r3, r5
 80052f2:	1891      	adds	r1, r2, r2
 80052f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80052f6:	415b      	adcs	r3, r3
 80052f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80052fe:	4621      	mov	r1, r4
 8005300:	eb12 0801 	adds.w	r8, r2, r1
 8005304:	4629      	mov	r1, r5
 8005306:	eb43 0901 	adc.w	r9, r3, r1
 800530a:	f04f 0200 	mov.w	r2, #0
 800530e:	f04f 0300 	mov.w	r3, #0
 8005312:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005316:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800531a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800531e:	4690      	mov	r8, r2
 8005320:	4699      	mov	r9, r3
 8005322:	4623      	mov	r3, r4
 8005324:	eb18 0303 	adds.w	r3, r8, r3
 8005328:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800532c:	462b      	mov	r3, r5
 800532e:	eb49 0303 	adc.w	r3, r9, r3
 8005332:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005342:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005346:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800534a:	460b      	mov	r3, r1
 800534c:	18db      	adds	r3, r3, r3
 800534e:	653b      	str	r3, [r7, #80]	; 0x50
 8005350:	4613      	mov	r3, r2
 8005352:	eb42 0303 	adc.w	r3, r2, r3
 8005356:	657b      	str	r3, [r7, #84]	; 0x54
 8005358:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800535c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005360:	f7fb fd2c 	bl	8000dbc <__aeabi_uldivmod>
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	4b61      	ldr	r3, [pc, #388]	; (80054f0 <UART_SetConfig+0x2d4>)
 800536a:	fba3 2302 	umull	r2, r3, r3, r2
 800536e:	095b      	lsrs	r3, r3, #5
 8005370:	011c      	lsls	r4, r3, #4
 8005372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005376:	2200      	movs	r2, #0
 8005378:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800537c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005380:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005384:	4642      	mov	r2, r8
 8005386:	464b      	mov	r3, r9
 8005388:	1891      	adds	r1, r2, r2
 800538a:	64b9      	str	r1, [r7, #72]	; 0x48
 800538c:	415b      	adcs	r3, r3
 800538e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005390:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005394:	4641      	mov	r1, r8
 8005396:	eb12 0a01 	adds.w	sl, r2, r1
 800539a:	4649      	mov	r1, r9
 800539c:	eb43 0b01 	adc.w	fp, r3, r1
 80053a0:	f04f 0200 	mov.w	r2, #0
 80053a4:	f04f 0300 	mov.w	r3, #0
 80053a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053b4:	4692      	mov	sl, r2
 80053b6:	469b      	mov	fp, r3
 80053b8:	4643      	mov	r3, r8
 80053ba:	eb1a 0303 	adds.w	r3, sl, r3
 80053be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053c2:	464b      	mov	r3, r9
 80053c4:	eb4b 0303 	adc.w	r3, fp, r3
 80053c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80053cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80053dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80053e0:	460b      	mov	r3, r1
 80053e2:	18db      	adds	r3, r3, r3
 80053e4:	643b      	str	r3, [r7, #64]	; 0x40
 80053e6:	4613      	mov	r3, r2
 80053e8:	eb42 0303 	adc.w	r3, r2, r3
 80053ec:	647b      	str	r3, [r7, #68]	; 0x44
 80053ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80053f6:	f7fb fce1 	bl	8000dbc <__aeabi_uldivmod>
 80053fa:	4602      	mov	r2, r0
 80053fc:	460b      	mov	r3, r1
 80053fe:	4611      	mov	r1, r2
 8005400:	4b3b      	ldr	r3, [pc, #236]	; (80054f0 <UART_SetConfig+0x2d4>)
 8005402:	fba3 2301 	umull	r2, r3, r3, r1
 8005406:	095b      	lsrs	r3, r3, #5
 8005408:	2264      	movs	r2, #100	; 0x64
 800540a:	fb02 f303 	mul.w	r3, r2, r3
 800540e:	1acb      	subs	r3, r1, r3
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005416:	4b36      	ldr	r3, [pc, #216]	; (80054f0 <UART_SetConfig+0x2d4>)
 8005418:	fba3 2302 	umull	r2, r3, r3, r2
 800541c:	095b      	lsrs	r3, r3, #5
 800541e:	005b      	lsls	r3, r3, #1
 8005420:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005424:	441c      	add	r4, r3
 8005426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800542a:	2200      	movs	r2, #0
 800542c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005430:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005434:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005438:	4642      	mov	r2, r8
 800543a:	464b      	mov	r3, r9
 800543c:	1891      	adds	r1, r2, r2
 800543e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005440:	415b      	adcs	r3, r3
 8005442:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005444:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005448:	4641      	mov	r1, r8
 800544a:	1851      	adds	r1, r2, r1
 800544c:	6339      	str	r1, [r7, #48]	; 0x30
 800544e:	4649      	mov	r1, r9
 8005450:	414b      	adcs	r3, r1
 8005452:	637b      	str	r3, [r7, #52]	; 0x34
 8005454:	f04f 0200 	mov.w	r2, #0
 8005458:	f04f 0300 	mov.w	r3, #0
 800545c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005460:	4659      	mov	r1, fp
 8005462:	00cb      	lsls	r3, r1, #3
 8005464:	4651      	mov	r1, sl
 8005466:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800546a:	4651      	mov	r1, sl
 800546c:	00ca      	lsls	r2, r1, #3
 800546e:	4610      	mov	r0, r2
 8005470:	4619      	mov	r1, r3
 8005472:	4603      	mov	r3, r0
 8005474:	4642      	mov	r2, r8
 8005476:	189b      	adds	r3, r3, r2
 8005478:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800547c:	464b      	mov	r3, r9
 800547e:	460a      	mov	r2, r1
 8005480:	eb42 0303 	adc.w	r3, r2, r3
 8005484:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005494:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005498:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800549c:	460b      	mov	r3, r1
 800549e:	18db      	adds	r3, r3, r3
 80054a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80054a2:	4613      	mov	r3, r2
 80054a4:	eb42 0303 	adc.w	r3, r2, r3
 80054a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80054b2:	f7fb fc83 	bl	8000dbc <__aeabi_uldivmod>
 80054b6:	4602      	mov	r2, r0
 80054b8:	460b      	mov	r3, r1
 80054ba:	4b0d      	ldr	r3, [pc, #52]	; (80054f0 <UART_SetConfig+0x2d4>)
 80054bc:	fba3 1302 	umull	r1, r3, r3, r2
 80054c0:	095b      	lsrs	r3, r3, #5
 80054c2:	2164      	movs	r1, #100	; 0x64
 80054c4:	fb01 f303 	mul.w	r3, r1, r3
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	00db      	lsls	r3, r3, #3
 80054cc:	3332      	adds	r3, #50	; 0x32
 80054ce:	4a08      	ldr	r2, [pc, #32]	; (80054f0 <UART_SetConfig+0x2d4>)
 80054d0:	fba2 2303 	umull	r2, r3, r2, r3
 80054d4:	095b      	lsrs	r3, r3, #5
 80054d6:	f003 0207 	and.w	r2, r3, #7
 80054da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4422      	add	r2, r4
 80054e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054e4:	e105      	b.n	80056f2 <UART_SetConfig+0x4d6>
 80054e6:	bf00      	nop
 80054e8:	40011000 	.word	0x40011000
 80054ec:	40011400 	.word	0x40011400
 80054f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054f8:	2200      	movs	r2, #0
 80054fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80054fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005502:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005506:	4642      	mov	r2, r8
 8005508:	464b      	mov	r3, r9
 800550a:	1891      	adds	r1, r2, r2
 800550c:	6239      	str	r1, [r7, #32]
 800550e:	415b      	adcs	r3, r3
 8005510:	627b      	str	r3, [r7, #36]	; 0x24
 8005512:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005516:	4641      	mov	r1, r8
 8005518:	1854      	adds	r4, r2, r1
 800551a:	4649      	mov	r1, r9
 800551c:	eb43 0501 	adc.w	r5, r3, r1
 8005520:	f04f 0200 	mov.w	r2, #0
 8005524:	f04f 0300 	mov.w	r3, #0
 8005528:	00eb      	lsls	r3, r5, #3
 800552a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800552e:	00e2      	lsls	r2, r4, #3
 8005530:	4614      	mov	r4, r2
 8005532:	461d      	mov	r5, r3
 8005534:	4643      	mov	r3, r8
 8005536:	18e3      	adds	r3, r4, r3
 8005538:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800553c:	464b      	mov	r3, r9
 800553e:	eb45 0303 	adc.w	r3, r5, r3
 8005542:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005552:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005556:	f04f 0200 	mov.w	r2, #0
 800555a:	f04f 0300 	mov.w	r3, #0
 800555e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005562:	4629      	mov	r1, r5
 8005564:	008b      	lsls	r3, r1, #2
 8005566:	4621      	mov	r1, r4
 8005568:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800556c:	4621      	mov	r1, r4
 800556e:	008a      	lsls	r2, r1, #2
 8005570:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005574:	f7fb fc22 	bl	8000dbc <__aeabi_uldivmod>
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
 800557c:	4b60      	ldr	r3, [pc, #384]	; (8005700 <UART_SetConfig+0x4e4>)
 800557e:	fba3 2302 	umull	r2, r3, r3, r2
 8005582:	095b      	lsrs	r3, r3, #5
 8005584:	011c      	lsls	r4, r3, #4
 8005586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800558a:	2200      	movs	r2, #0
 800558c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005590:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005594:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005598:	4642      	mov	r2, r8
 800559a:	464b      	mov	r3, r9
 800559c:	1891      	adds	r1, r2, r2
 800559e:	61b9      	str	r1, [r7, #24]
 80055a0:	415b      	adcs	r3, r3
 80055a2:	61fb      	str	r3, [r7, #28]
 80055a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055a8:	4641      	mov	r1, r8
 80055aa:	1851      	adds	r1, r2, r1
 80055ac:	6139      	str	r1, [r7, #16]
 80055ae:	4649      	mov	r1, r9
 80055b0:	414b      	adcs	r3, r1
 80055b2:	617b      	str	r3, [r7, #20]
 80055b4:	f04f 0200 	mov.w	r2, #0
 80055b8:	f04f 0300 	mov.w	r3, #0
 80055bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055c0:	4659      	mov	r1, fp
 80055c2:	00cb      	lsls	r3, r1, #3
 80055c4:	4651      	mov	r1, sl
 80055c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055ca:	4651      	mov	r1, sl
 80055cc:	00ca      	lsls	r2, r1, #3
 80055ce:	4610      	mov	r0, r2
 80055d0:	4619      	mov	r1, r3
 80055d2:	4603      	mov	r3, r0
 80055d4:	4642      	mov	r2, r8
 80055d6:	189b      	adds	r3, r3, r2
 80055d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055dc:	464b      	mov	r3, r9
 80055de:	460a      	mov	r2, r1
 80055e0:	eb42 0303 	adc.w	r3, r2, r3
 80055e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80055f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80055f4:	f04f 0200 	mov.w	r2, #0
 80055f8:	f04f 0300 	mov.w	r3, #0
 80055fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005600:	4649      	mov	r1, r9
 8005602:	008b      	lsls	r3, r1, #2
 8005604:	4641      	mov	r1, r8
 8005606:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800560a:	4641      	mov	r1, r8
 800560c:	008a      	lsls	r2, r1, #2
 800560e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005612:	f7fb fbd3 	bl	8000dbc <__aeabi_uldivmod>
 8005616:	4602      	mov	r2, r0
 8005618:	460b      	mov	r3, r1
 800561a:	4b39      	ldr	r3, [pc, #228]	; (8005700 <UART_SetConfig+0x4e4>)
 800561c:	fba3 1302 	umull	r1, r3, r3, r2
 8005620:	095b      	lsrs	r3, r3, #5
 8005622:	2164      	movs	r1, #100	; 0x64
 8005624:	fb01 f303 	mul.w	r3, r1, r3
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	011b      	lsls	r3, r3, #4
 800562c:	3332      	adds	r3, #50	; 0x32
 800562e:	4a34      	ldr	r2, [pc, #208]	; (8005700 <UART_SetConfig+0x4e4>)
 8005630:	fba2 2303 	umull	r2, r3, r2, r3
 8005634:	095b      	lsrs	r3, r3, #5
 8005636:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800563a:	441c      	add	r4, r3
 800563c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005640:	2200      	movs	r2, #0
 8005642:	673b      	str	r3, [r7, #112]	; 0x70
 8005644:	677a      	str	r2, [r7, #116]	; 0x74
 8005646:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800564a:	4642      	mov	r2, r8
 800564c:	464b      	mov	r3, r9
 800564e:	1891      	adds	r1, r2, r2
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	415b      	adcs	r3, r3
 8005654:	60fb      	str	r3, [r7, #12]
 8005656:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800565a:	4641      	mov	r1, r8
 800565c:	1851      	adds	r1, r2, r1
 800565e:	6039      	str	r1, [r7, #0]
 8005660:	4649      	mov	r1, r9
 8005662:	414b      	adcs	r3, r1
 8005664:	607b      	str	r3, [r7, #4]
 8005666:	f04f 0200 	mov.w	r2, #0
 800566a:	f04f 0300 	mov.w	r3, #0
 800566e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005672:	4659      	mov	r1, fp
 8005674:	00cb      	lsls	r3, r1, #3
 8005676:	4651      	mov	r1, sl
 8005678:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800567c:	4651      	mov	r1, sl
 800567e:	00ca      	lsls	r2, r1, #3
 8005680:	4610      	mov	r0, r2
 8005682:	4619      	mov	r1, r3
 8005684:	4603      	mov	r3, r0
 8005686:	4642      	mov	r2, r8
 8005688:	189b      	adds	r3, r3, r2
 800568a:	66bb      	str	r3, [r7, #104]	; 0x68
 800568c:	464b      	mov	r3, r9
 800568e:	460a      	mov	r2, r1
 8005690:	eb42 0303 	adc.w	r3, r2, r3
 8005694:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	663b      	str	r3, [r7, #96]	; 0x60
 80056a0:	667a      	str	r2, [r7, #100]	; 0x64
 80056a2:	f04f 0200 	mov.w	r2, #0
 80056a6:	f04f 0300 	mov.w	r3, #0
 80056aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80056ae:	4649      	mov	r1, r9
 80056b0:	008b      	lsls	r3, r1, #2
 80056b2:	4641      	mov	r1, r8
 80056b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056b8:	4641      	mov	r1, r8
 80056ba:	008a      	lsls	r2, r1, #2
 80056bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80056c0:	f7fb fb7c 	bl	8000dbc <__aeabi_uldivmod>
 80056c4:	4602      	mov	r2, r0
 80056c6:	460b      	mov	r3, r1
 80056c8:	4b0d      	ldr	r3, [pc, #52]	; (8005700 <UART_SetConfig+0x4e4>)
 80056ca:	fba3 1302 	umull	r1, r3, r3, r2
 80056ce:	095b      	lsrs	r3, r3, #5
 80056d0:	2164      	movs	r1, #100	; 0x64
 80056d2:	fb01 f303 	mul.w	r3, r1, r3
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	3332      	adds	r3, #50	; 0x32
 80056dc:	4a08      	ldr	r2, [pc, #32]	; (8005700 <UART_SetConfig+0x4e4>)
 80056de:	fba2 2303 	umull	r2, r3, r2, r3
 80056e2:	095b      	lsrs	r3, r3, #5
 80056e4:	f003 020f 	and.w	r2, r3, #15
 80056e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4422      	add	r2, r4
 80056f0:	609a      	str	r2, [r3, #8]
}
 80056f2:	bf00      	nop
 80056f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80056f8:	46bd      	mov	sp, r7
 80056fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056fe:	bf00      	nop
 8005700:	51eb851f 	.word	0x51eb851f

08005704 <__errno>:
 8005704:	4b01      	ldr	r3, [pc, #4]	; (800570c <__errno+0x8>)
 8005706:	6818      	ldr	r0, [r3, #0]
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	2000001c 	.word	0x2000001c

08005710 <__libc_init_array>:
 8005710:	b570      	push	{r4, r5, r6, lr}
 8005712:	4d0d      	ldr	r5, [pc, #52]	; (8005748 <__libc_init_array+0x38>)
 8005714:	4c0d      	ldr	r4, [pc, #52]	; (800574c <__libc_init_array+0x3c>)
 8005716:	1b64      	subs	r4, r4, r5
 8005718:	10a4      	asrs	r4, r4, #2
 800571a:	2600      	movs	r6, #0
 800571c:	42a6      	cmp	r6, r4
 800571e:	d109      	bne.n	8005734 <__libc_init_array+0x24>
 8005720:	4d0b      	ldr	r5, [pc, #44]	; (8005750 <__libc_init_array+0x40>)
 8005722:	4c0c      	ldr	r4, [pc, #48]	; (8005754 <__libc_init_array+0x44>)
 8005724:	f000 ff5e 	bl	80065e4 <_init>
 8005728:	1b64      	subs	r4, r4, r5
 800572a:	10a4      	asrs	r4, r4, #2
 800572c:	2600      	movs	r6, #0
 800572e:	42a6      	cmp	r6, r4
 8005730:	d105      	bne.n	800573e <__libc_init_array+0x2e>
 8005732:	bd70      	pop	{r4, r5, r6, pc}
 8005734:	f855 3b04 	ldr.w	r3, [r5], #4
 8005738:	4798      	blx	r3
 800573a:	3601      	adds	r6, #1
 800573c:	e7ee      	b.n	800571c <__libc_init_array+0xc>
 800573e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005742:	4798      	blx	r3
 8005744:	3601      	adds	r6, #1
 8005746:	e7f2      	b.n	800572e <__libc_init_array+0x1e>
 8005748:	080066a8 	.word	0x080066a8
 800574c:	080066a8 	.word	0x080066a8
 8005750:	080066a8 	.word	0x080066a8
 8005754:	080066ac 	.word	0x080066ac

08005758 <memset>:
 8005758:	4402      	add	r2, r0
 800575a:	4603      	mov	r3, r0
 800575c:	4293      	cmp	r3, r2
 800575e:	d100      	bne.n	8005762 <memset+0xa>
 8005760:	4770      	bx	lr
 8005762:	f803 1b01 	strb.w	r1, [r3], #1
 8005766:	e7f9      	b.n	800575c <memset+0x4>

08005768 <pow>:
 8005768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800576a:	ed2d 8b02 	vpush	{d8}
 800576e:	eeb0 8a40 	vmov.f32	s16, s0
 8005772:	eef0 8a60 	vmov.f32	s17, s1
 8005776:	ec55 4b11 	vmov	r4, r5, d1
 800577a:	f000 f885 	bl	8005888 <__ieee754_pow>
 800577e:	4622      	mov	r2, r4
 8005780:	462b      	mov	r3, r5
 8005782:	4620      	mov	r0, r4
 8005784:	4629      	mov	r1, r5
 8005786:	ec57 6b10 	vmov	r6, r7, d0
 800578a:	f7fb f97b 	bl	8000a84 <__aeabi_dcmpun>
 800578e:	2800      	cmp	r0, #0
 8005790:	d13b      	bne.n	800580a <pow+0xa2>
 8005792:	ec51 0b18 	vmov	r0, r1, d8
 8005796:	2200      	movs	r2, #0
 8005798:	2300      	movs	r3, #0
 800579a:	f7fb f941 	bl	8000a20 <__aeabi_dcmpeq>
 800579e:	b1b8      	cbz	r0, 80057d0 <pow+0x68>
 80057a0:	2200      	movs	r2, #0
 80057a2:	2300      	movs	r3, #0
 80057a4:	4620      	mov	r0, r4
 80057a6:	4629      	mov	r1, r5
 80057a8:	f7fb f93a 	bl	8000a20 <__aeabi_dcmpeq>
 80057ac:	2800      	cmp	r0, #0
 80057ae:	d146      	bne.n	800583e <pow+0xd6>
 80057b0:	ec45 4b10 	vmov	d0, r4, r5
 80057b4:	f000 fe84 	bl	80064c0 <finite>
 80057b8:	b338      	cbz	r0, 800580a <pow+0xa2>
 80057ba:	2200      	movs	r2, #0
 80057bc:	2300      	movs	r3, #0
 80057be:	4620      	mov	r0, r4
 80057c0:	4629      	mov	r1, r5
 80057c2:	f7fb f937 	bl	8000a34 <__aeabi_dcmplt>
 80057c6:	b300      	cbz	r0, 800580a <pow+0xa2>
 80057c8:	f7ff ff9c 	bl	8005704 <__errno>
 80057cc:	2322      	movs	r3, #34	; 0x22
 80057ce:	e01b      	b.n	8005808 <pow+0xa0>
 80057d0:	ec47 6b10 	vmov	d0, r6, r7
 80057d4:	f000 fe74 	bl	80064c0 <finite>
 80057d8:	b9e0      	cbnz	r0, 8005814 <pow+0xac>
 80057da:	eeb0 0a48 	vmov.f32	s0, s16
 80057de:	eef0 0a68 	vmov.f32	s1, s17
 80057e2:	f000 fe6d 	bl	80064c0 <finite>
 80057e6:	b1a8      	cbz	r0, 8005814 <pow+0xac>
 80057e8:	ec45 4b10 	vmov	d0, r4, r5
 80057ec:	f000 fe68 	bl	80064c0 <finite>
 80057f0:	b180      	cbz	r0, 8005814 <pow+0xac>
 80057f2:	4632      	mov	r2, r6
 80057f4:	463b      	mov	r3, r7
 80057f6:	4630      	mov	r0, r6
 80057f8:	4639      	mov	r1, r7
 80057fa:	f7fb f943 	bl	8000a84 <__aeabi_dcmpun>
 80057fe:	2800      	cmp	r0, #0
 8005800:	d0e2      	beq.n	80057c8 <pow+0x60>
 8005802:	f7ff ff7f 	bl	8005704 <__errno>
 8005806:	2321      	movs	r3, #33	; 0x21
 8005808:	6003      	str	r3, [r0, #0]
 800580a:	ecbd 8b02 	vpop	{d8}
 800580e:	ec47 6b10 	vmov	d0, r6, r7
 8005812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005814:	2200      	movs	r2, #0
 8005816:	2300      	movs	r3, #0
 8005818:	4630      	mov	r0, r6
 800581a:	4639      	mov	r1, r7
 800581c:	f7fb f900 	bl	8000a20 <__aeabi_dcmpeq>
 8005820:	2800      	cmp	r0, #0
 8005822:	d0f2      	beq.n	800580a <pow+0xa2>
 8005824:	eeb0 0a48 	vmov.f32	s0, s16
 8005828:	eef0 0a68 	vmov.f32	s1, s17
 800582c:	f000 fe48 	bl	80064c0 <finite>
 8005830:	2800      	cmp	r0, #0
 8005832:	d0ea      	beq.n	800580a <pow+0xa2>
 8005834:	ec45 4b10 	vmov	d0, r4, r5
 8005838:	f000 fe42 	bl	80064c0 <finite>
 800583c:	e7c3      	b.n	80057c6 <pow+0x5e>
 800583e:	4f01      	ldr	r7, [pc, #4]	; (8005844 <pow+0xdc>)
 8005840:	2600      	movs	r6, #0
 8005842:	e7e2      	b.n	800580a <pow+0xa2>
 8005844:	3ff00000 	.word	0x3ff00000

08005848 <sqrtf>:
 8005848:	b508      	push	{r3, lr}
 800584a:	ed2d 8b02 	vpush	{d8}
 800584e:	eeb0 8a40 	vmov.f32	s16, s0
 8005852:	f000 fdf9 	bl	8006448 <__ieee754_sqrtf>
 8005856:	eeb4 8a48 	vcmp.f32	s16, s16
 800585a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800585e:	d60c      	bvs.n	800587a <sqrtf+0x32>
 8005860:	eddf 8a07 	vldr	s17, [pc, #28]	; 8005880 <sqrtf+0x38>
 8005864:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800586c:	d505      	bpl.n	800587a <sqrtf+0x32>
 800586e:	f7ff ff49 	bl	8005704 <__errno>
 8005872:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8005876:	2321      	movs	r3, #33	; 0x21
 8005878:	6003      	str	r3, [r0, #0]
 800587a:	ecbd 8b02 	vpop	{d8}
 800587e:	bd08      	pop	{r3, pc}
	...

08005888 <__ieee754_pow>:
 8005888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800588c:	ed2d 8b06 	vpush	{d8-d10}
 8005890:	b089      	sub	sp, #36	; 0x24
 8005892:	ed8d 1b00 	vstr	d1, [sp]
 8005896:	e9dd 2900 	ldrd	r2, r9, [sp]
 800589a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800589e:	ea58 0102 	orrs.w	r1, r8, r2
 80058a2:	ec57 6b10 	vmov	r6, r7, d0
 80058a6:	d115      	bne.n	80058d4 <__ieee754_pow+0x4c>
 80058a8:	19b3      	adds	r3, r6, r6
 80058aa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80058ae:	4152      	adcs	r2, r2
 80058b0:	4299      	cmp	r1, r3
 80058b2:	4b89      	ldr	r3, [pc, #548]	; (8005ad8 <__ieee754_pow+0x250>)
 80058b4:	4193      	sbcs	r3, r2
 80058b6:	f080 84d2 	bcs.w	800625e <__ieee754_pow+0x9d6>
 80058ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058be:	4630      	mov	r0, r6
 80058c0:	4639      	mov	r1, r7
 80058c2:	f7fa fc8f 	bl	80001e4 <__adddf3>
 80058c6:	ec41 0b10 	vmov	d0, r0, r1
 80058ca:	b009      	add	sp, #36	; 0x24
 80058cc:	ecbd 8b06 	vpop	{d8-d10}
 80058d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058d4:	4b81      	ldr	r3, [pc, #516]	; (8005adc <__ieee754_pow+0x254>)
 80058d6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80058da:	429c      	cmp	r4, r3
 80058dc:	ee10 aa10 	vmov	sl, s0
 80058e0:	463d      	mov	r5, r7
 80058e2:	dc06      	bgt.n	80058f2 <__ieee754_pow+0x6a>
 80058e4:	d101      	bne.n	80058ea <__ieee754_pow+0x62>
 80058e6:	2e00      	cmp	r6, #0
 80058e8:	d1e7      	bne.n	80058ba <__ieee754_pow+0x32>
 80058ea:	4598      	cmp	r8, r3
 80058ec:	dc01      	bgt.n	80058f2 <__ieee754_pow+0x6a>
 80058ee:	d10f      	bne.n	8005910 <__ieee754_pow+0x88>
 80058f0:	b172      	cbz	r2, 8005910 <__ieee754_pow+0x88>
 80058f2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80058f6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80058fa:	ea55 050a 	orrs.w	r5, r5, sl
 80058fe:	d1dc      	bne.n	80058ba <__ieee754_pow+0x32>
 8005900:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005904:	18db      	adds	r3, r3, r3
 8005906:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800590a:	4152      	adcs	r2, r2
 800590c:	429d      	cmp	r5, r3
 800590e:	e7d0      	b.n	80058b2 <__ieee754_pow+0x2a>
 8005910:	2d00      	cmp	r5, #0
 8005912:	da3b      	bge.n	800598c <__ieee754_pow+0x104>
 8005914:	4b72      	ldr	r3, [pc, #456]	; (8005ae0 <__ieee754_pow+0x258>)
 8005916:	4598      	cmp	r8, r3
 8005918:	dc51      	bgt.n	80059be <__ieee754_pow+0x136>
 800591a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800591e:	4598      	cmp	r8, r3
 8005920:	f340 84ac 	ble.w	800627c <__ieee754_pow+0x9f4>
 8005924:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005928:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800592c:	2b14      	cmp	r3, #20
 800592e:	dd0f      	ble.n	8005950 <__ieee754_pow+0xc8>
 8005930:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005934:	fa22 f103 	lsr.w	r1, r2, r3
 8005938:	fa01 f303 	lsl.w	r3, r1, r3
 800593c:	4293      	cmp	r3, r2
 800593e:	f040 849d 	bne.w	800627c <__ieee754_pow+0x9f4>
 8005942:	f001 0101 	and.w	r1, r1, #1
 8005946:	f1c1 0302 	rsb	r3, r1, #2
 800594a:	9304      	str	r3, [sp, #16]
 800594c:	b182      	cbz	r2, 8005970 <__ieee754_pow+0xe8>
 800594e:	e05f      	b.n	8005a10 <__ieee754_pow+0x188>
 8005950:	2a00      	cmp	r2, #0
 8005952:	d15b      	bne.n	8005a0c <__ieee754_pow+0x184>
 8005954:	f1c3 0314 	rsb	r3, r3, #20
 8005958:	fa48 f103 	asr.w	r1, r8, r3
 800595c:	fa01 f303 	lsl.w	r3, r1, r3
 8005960:	4543      	cmp	r3, r8
 8005962:	f040 8488 	bne.w	8006276 <__ieee754_pow+0x9ee>
 8005966:	f001 0101 	and.w	r1, r1, #1
 800596a:	f1c1 0302 	rsb	r3, r1, #2
 800596e:	9304      	str	r3, [sp, #16]
 8005970:	4b5c      	ldr	r3, [pc, #368]	; (8005ae4 <__ieee754_pow+0x25c>)
 8005972:	4598      	cmp	r8, r3
 8005974:	d132      	bne.n	80059dc <__ieee754_pow+0x154>
 8005976:	f1b9 0f00 	cmp.w	r9, #0
 800597a:	f280 8478 	bge.w	800626e <__ieee754_pow+0x9e6>
 800597e:	4959      	ldr	r1, [pc, #356]	; (8005ae4 <__ieee754_pow+0x25c>)
 8005980:	4632      	mov	r2, r6
 8005982:	463b      	mov	r3, r7
 8005984:	2000      	movs	r0, #0
 8005986:	f7fa ff0d 	bl	80007a4 <__aeabi_ddiv>
 800598a:	e79c      	b.n	80058c6 <__ieee754_pow+0x3e>
 800598c:	2300      	movs	r3, #0
 800598e:	9304      	str	r3, [sp, #16]
 8005990:	2a00      	cmp	r2, #0
 8005992:	d13d      	bne.n	8005a10 <__ieee754_pow+0x188>
 8005994:	4b51      	ldr	r3, [pc, #324]	; (8005adc <__ieee754_pow+0x254>)
 8005996:	4598      	cmp	r8, r3
 8005998:	d1ea      	bne.n	8005970 <__ieee754_pow+0xe8>
 800599a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800599e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80059a2:	ea53 030a 	orrs.w	r3, r3, sl
 80059a6:	f000 845a 	beq.w	800625e <__ieee754_pow+0x9d6>
 80059aa:	4b4f      	ldr	r3, [pc, #316]	; (8005ae8 <__ieee754_pow+0x260>)
 80059ac:	429c      	cmp	r4, r3
 80059ae:	dd08      	ble.n	80059c2 <__ieee754_pow+0x13a>
 80059b0:	f1b9 0f00 	cmp.w	r9, #0
 80059b4:	f2c0 8457 	blt.w	8006266 <__ieee754_pow+0x9de>
 80059b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059bc:	e783      	b.n	80058c6 <__ieee754_pow+0x3e>
 80059be:	2302      	movs	r3, #2
 80059c0:	e7e5      	b.n	800598e <__ieee754_pow+0x106>
 80059c2:	f1b9 0f00 	cmp.w	r9, #0
 80059c6:	f04f 0000 	mov.w	r0, #0
 80059ca:	f04f 0100 	mov.w	r1, #0
 80059ce:	f6bf af7a 	bge.w	80058c6 <__ieee754_pow+0x3e>
 80059d2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80059d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80059da:	e774      	b.n	80058c6 <__ieee754_pow+0x3e>
 80059dc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80059e0:	d106      	bne.n	80059f0 <__ieee754_pow+0x168>
 80059e2:	4632      	mov	r2, r6
 80059e4:	463b      	mov	r3, r7
 80059e6:	4630      	mov	r0, r6
 80059e8:	4639      	mov	r1, r7
 80059ea:	f7fa fdb1 	bl	8000550 <__aeabi_dmul>
 80059ee:	e76a      	b.n	80058c6 <__ieee754_pow+0x3e>
 80059f0:	4b3e      	ldr	r3, [pc, #248]	; (8005aec <__ieee754_pow+0x264>)
 80059f2:	4599      	cmp	r9, r3
 80059f4:	d10c      	bne.n	8005a10 <__ieee754_pow+0x188>
 80059f6:	2d00      	cmp	r5, #0
 80059f8:	db0a      	blt.n	8005a10 <__ieee754_pow+0x188>
 80059fa:	ec47 6b10 	vmov	d0, r6, r7
 80059fe:	b009      	add	sp, #36	; 0x24
 8005a00:	ecbd 8b06 	vpop	{d8-d10}
 8005a04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a08:	f000 bc6c 	b.w	80062e4 <__ieee754_sqrt>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	9304      	str	r3, [sp, #16]
 8005a10:	ec47 6b10 	vmov	d0, r6, r7
 8005a14:	f000 fd4b 	bl	80064ae <fabs>
 8005a18:	ec51 0b10 	vmov	r0, r1, d0
 8005a1c:	f1ba 0f00 	cmp.w	sl, #0
 8005a20:	d129      	bne.n	8005a76 <__ieee754_pow+0x1ee>
 8005a22:	b124      	cbz	r4, 8005a2e <__ieee754_pow+0x1a6>
 8005a24:	4b2f      	ldr	r3, [pc, #188]	; (8005ae4 <__ieee754_pow+0x25c>)
 8005a26:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d123      	bne.n	8005a76 <__ieee754_pow+0x1ee>
 8005a2e:	f1b9 0f00 	cmp.w	r9, #0
 8005a32:	da05      	bge.n	8005a40 <__ieee754_pow+0x1b8>
 8005a34:	4602      	mov	r2, r0
 8005a36:	460b      	mov	r3, r1
 8005a38:	2000      	movs	r0, #0
 8005a3a:	492a      	ldr	r1, [pc, #168]	; (8005ae4 <__ieee754_pow+0x25c>)
 8005a3c:	f7fa feb2 	bl	80007a4 <__aeabi_ddiv>
 8005a40:	2d00      	cmp	r5, #0
 8005a42:	f6bf af40 	bge.w	80058c6 <__ieee754_pow+0x3e>
 8005a46:	9b04      	ldr	r3, [sp, #16]
 8005a48:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005a4c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005a50:	4323      	orrs	r3, r4
 8005a52:	d108      	bne.n	8005a66 <__ieee754_pow+0x1de>
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4610      	mov	r0, r2
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	f7fa fbc0 	bl	80001e0 <__aeabi_dsub>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	e78f      	b.n	8005986 <__ieee754_pow+0xfe>
 8005a66:	9b04      	ldr	r3, [sp, #16]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	f47f af2c 	bne.w	80058c6 <__ieee754_pow+0x3e>
 8005a6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a72:	4619      	mov	r1, r3
 8005a74:	e727      	b.n	80058c6 <__ieee754_pow+0x3e>
 8005a76:	0feb      	lsrs	r3, r5, #31
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	9306      	str	r3, [sp, #24]
 8005a7c:	9a06      	ldr	r2, [sp, #24]
 8005a7e:	9b04      	ldr	r3, [sp, #16]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	d102      	bne.n	8005a8a <__ieee754_pow+0x202>
 8005a84:	4632      	mov	r2, r6
 8005a86:	463b      	mov	r3, r7
 8005a88:	e7e6      	b.n	8005a58 <__ieee754_pow+0x1d0>
 8005a8a:	4b19      	ldr	r3, [pc, #100]	; (8005af0 <__ieee754_pow+0x268>)
 8005a8c:	4598      	cmp	r8, r3
 8005a8e:	f340 80fb 	ble.w	8005c88 <__ieee754_pow+0x400>
 8005a92:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005a96:	4598      	cmp	r8, r3
 8005a98:	4b13      	ldr	r3, [pc, #76]	; (8005ae8 <__ieee754_pow+0x260>)
 8005a9a:	dd0c      	ble.n	8005ab6 <__ieee754_pow+0x22e>
 8005a9c:	429c      	cmp	r4, r3
 8005a9e:	dc0f      	bgt.n	8005ac0 <__ieee754_pow+0x238>
 8005aa0:	f1b9 0f00 	cmp.w	r9, #0
 8005aa4:	da0f      	bge.n	8005ac6 <__ieee754_pow+0x23e>
 8005aa6:	2000      	movs	r0, #0
 8005aa8:	b009      	add	sp, #36	; 0x24
 8005aaa:	ecbd 8b06 	vpop	{d8-d10}
 8005aae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab2:	f000 bcf3 	b.w	800649c <__math_oflow>
 8005ab6:	429c      	cmp	r4, r3
 8005ab8:	dbf2      	blt.n	8005aa0 <__ieee754_pow+0x218>
 8005aba:	4b0a      	ldr	r3, [pc, #40]	; (8005ae4 <__ieee754_pow+0x25c>)
 8005abc:	429c      	cmp	r4, r3
 8005abe:	dd19      	ble.n	8005af4 <__ieee754_pow+0x26c>
 8005ac0:	f1b9 0f00 	cmp.w	r9, #0
 8005ac4:	dcef      	bgt.n	8005aa6 <__ieee754_pow+0x21e>
 8005ac6:	2000      	movs	r0, #0
 8005ac8:	b009      	add	sp, #36	; 0x24
 8005aca:	ecbd 8b06 	vpop	{d8-d10}
 8005ace:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad2:	f000 bcda 	b.w	800648a <__math_uflow>
 8005ad6:	bf00      	nop
 8005ad8:	fff00000 	.word	0xfff00000
 8005adc:	7ff00000 	.word	0x7ff00000
 8005ae0:	433fffff 	.word	0x433fffff
 8005ae4:	3ff00000 	.word	0x3ff00000
 8005ae8:	3fefffff 	.word	0x3fefffff
 8005aec:	3fe00000 	.word	0x3fe00000
 8005af0:	41e00000 	.word	0x41e00000
 8005af4:	4b60      	ldr	r3, [pc, #384]	; (8005c78 <__ieee754_pow+0x3f0>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	f7fa fb72 	bl	80001e0 <__aeabi_dsub>
 8005afc:	a354      	add	r3, pc, #336	; (adr r3, 8005c50 <__ieee754_pow+0x3c8>)
 8005afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b02:	4604      	mov	r4, r0
 8005b04:	460d      	mov	r5, r1
 8005b06:	f7fa fd23 	bl	8000550 <__aeabi_dmul>
 8005b0a:	a353      	add	r3, pc, #332	; (adr r3, 8005c58 <__ieee754_pow+0x3d0>)
 8005b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b10:	4606      	mov	r6, r0
 8005b12:	460f      	mov	r7, r1
 8005b14:	4620      	mov	r0, r4
 8005b16:	4629      	mov	r1, r5
 8005b18:	f7fa fd1a 	bl	8000550 <__aeabi_dmul>
 8005b1c:	4b57      	ldr	r3, [pc, #348]	; (8005c7c <__ieee754_pow+0x3f4>)
 8005b1e:	4682      	mov	sl, r0
 8005b20:	468b      	mov	fp, r1
 8005b22:	2200      	movs	r2, #0
 8005b24:	4620      	mov	r0, r4
 8005b26:	4629      	mov	r1, r5
 8005b28:	f7fa fd12 	bl	8000550 <__aeabi_dmul>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	a14b      	add	r1, pc, #300	; (adr r1, 8005c60 <__ieee754_pow+0x3d8>)
 8005b32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b36:	f7fa fb53 	bl	80001e0 <__aeabi_dsub>
 8005b3a:	4622      	mov	r2, r4
 8005b3c:	462b      	mov	r3, r5
 8005b3e:	f7fa fd07 	bl	8000550 <__aeabi_dmul>
 8005b42:	4602      	mov	r2, r0
 8005b44:	460b      	mov	r3, r1
 8005b46:	2000      	movs	r0, #0
 8005b48:	494d      	ldr	r1, [pc, #308]	; (8005c80 <__ieee754_pow+0x3f8>)
 8005b4a:	f7fa fb49 	bl	80001e0 <__aeabi_dsub>
 8005b4e:	4622      	mov	r2, r4
 8005b50:	4680      	mov	r8, r0
 8005b52:	4689      	mov	r9, r1
 8005b54:	462b      	mov	r3, r5
 8005b56:	4620      	mov	r0, r4
 8005b58:	4629      	mov	r1, r5
 8005b5a:	f7fa fcf9 	bl	8000550 <__aeabi_dmul>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	460b      	mov	r3, r1
 8005b62:	4640      	mov	r0, r8
 8005b64:	4649      	mov	r1, r9
 8005b66:	f7fa fcf3 	bl	8000550 <__aeabi_dmul>
 8005b6a:	a33f      	add	r3, pc, #252	; (adr r3, 8005c68 <__ieee754_pow+0x3e0>)
 8005b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b70:	f7fa fcee 	bl	8000550 <__aeabi_dmul>
 8005b74:	4602      	mov	r2, r0
 8005b76:	460b      	mov	r3, r1
 8005b78:	4650      	mov	r0, sl
 8005b7a:	4659      	mov	r1, fp
 8005b7c:	f7fa fb30 	bl	80001e0 <__aeabi_dsub>
 8005b80:	4602      	mov	r2, r0
 8005b82:	460b      	mov	r3, r1
 8005b84:	4680      	mov	r8, r0
 8005b86:	4689      	mov	r9, r1
 8005b88:	4630      	mov	r0, r6
 8005b8a:	4639      	mov	r1, r7
 8005b8c:	f7fa fb2a 	bl	80001e4 <__adddf3>
 8005b90:	2000      	movs	r0, #0
 8005b92:	4632      	mov	r2, r6
 8005b94:	463b      	mov	r3, r7
 8005b96:	4604      	mov	r4, r0
 8005b98:	460d      	mov	r5, r1
 8005b9a:	f7fa fb21 	bl	80001e0 <__aeabi_dsub>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	4640      	mov	r0, r8
 8005ba4:	4649      	mov	r1, r9
 8005ba6:	f7fa fb1b 	bl	80001e0 <__aeabi_dsub>
 8005baa:	9b04      	ldr	r3, [sp, #16]
 8005bac:	9a06      	ldr	r2, [sp, #24]
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	4682      	mov	sl, r0
 8005bb4:	468b      	mov	fp, r1
 8005bb6:	f040 81e7 	bne.w	8005f88 <__ieee754_pow+0x700>
 8005bba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005c70 <__ieee754_pow+0x3e8>
 8005bbe:	eeb0 8a47 	vmov.f32	s16, s14
 8005bc2:	eef0 8a67 	vmov.f32	s17, s15
 8005bc6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005bca:	2600      	movs	r6, #0
 8005bcc:	4632      	mov	r2, r6
 8005bce:	463b      	mov	r3, r7
 8005bd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bd4:	f7fa fb04 	bl	80001e0 <__aeabi_dsub>
 8005bd8:	4622      	mov	r2, r4
 8005bda:	462b      	mov	r3, r5
 8005bdc:	f7fa fcb8 	bl	8000550 <__aeabi_dmul>
 8005be0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005be4:	4680      	mov	r8, r0
 8005be6:	4689      	mov	r9, r1
 8005be8:	4650      	mov	r0, sl
 8005bea:	4659      	mov	r1, fp
 8005bec:	f7fa fcb0 	bl	8000550 <__aeabi_dmul>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	4640      	mov	r0, r8
 8005bf6:	4649      	mov	r1, r9
 8005bf8:	f7fa faf4 	bl	80001e4 <__adddf3>
 8005bfc:	4632      	mov	r2, r6
 8005bfe:	463b      	mov	r3, r7
 8005c00:	4680      	mov	r8, r0
 8005c02:	4689      	mov	r9, r1
 8005c04:	4620      	mov	r0, r4
 8005c06:	4629      	mov	r1, r5
 8005c08:	f7fa fca2 	bl	8000550 <__aeabi_dmul>
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	4604      	mov	r4, r0
 8005c10:	460d      	mov	r5, r1
 8005c12:	4602      	mov	r2, r0
 8005c14:	4649      	mov	r1, r9
 8005c16:	4640      	mov	r0, r8
 8005c18:	f7fa fae4 	bl	80001e4 <__adddf3>
 8005c1c:	4b19      	ldr	r3, [pc, #100]	; (8005c84 <__ieee754_pow+0x3fc>)
 8005c1e:	4299      	cmp	r1, r3
 8005c20:	ec45 4b19 	vmov	d9, r4, r5
 8005c24:	4606      	mov	r6, r0
 8005c26:	460f      	mov	r7, r1
 8005c28:	468b      	mov	fp, r1
 8005c2a:	f340 82f1 	ble.w	8006210 <__ieee754_pow+0x988>
 8005c2e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005c32:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005c36:	4303      	orrs	r3, r0
 8005c38:	f000 81e4 	beq.w	8006004 <__ieee754_pow+0x77c>
 8005c3c:	ec51 0b18 	vmov	r0, r1, d8
 8005c40:	2200      	movs	r2, #0
 8005c42:	2300      	movs	r3, #0
 8005c44:	f7fa fef6 	bl	8000a34 <__aeabi_dcmplt>
 8005c48:	3800      	subs	r0, #0
 8005c4a:	bf18      	it	ne
 8005c4c:	2001      	movne	r0, #1
 8005c4e:	e72b      	b.n	8005aa8 <__ieee754_pow+0x220>
 8005c50:	60000000 	.word	0x60000000
 8005c54:	3ff71547 	.word	0x3ff71547
 8005c58:	f85ddf44 	.word	0xf85ddf44
 8005c5c:	3e54ae0b 	.word	0x3e54ae0b
 8005c60:	55555555 	.word	0x55555555
 8005c64:	3fd55555 	.word	0x3fd55555
 8005c68:	652b82fe 	.word	0x652b82fe
 8005c6c:	3ff71547 	.word	0x3ff71547
 8005c70:	00000000 	.word	0x00000000
 8005c74:	bff00000 	.word	0xbff00000
 8005c78:	3ff00000 	.word	0x3ff00000
 8005c7c:	3fd00000 	.word	0x3fd00000
 8005c80:	3fe00000 	.word	0x3fe00000
 8005c84:	408fffff 	.word	0x408fffff
 8005c88:	4bd5      	ldr	r3, [pc, #852]	; (8005fe0 <__ieee754_pow+0x758>)
 8005c8a:	402b      	ands	r3, r5
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	b92b      	cbnz	r3, 8005c9c <__ieee754_pow+0x414>
 8005c90:	4bd4      	ldr	r3, [pc, #848]	; (8005fe4 <__ieee754_pow+0x75c>)
 8005c92:	f7fa fc5d 	bl	8000550 <__aeabi_dmul>
 8005c96:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005c9a:	460c      	mov	r4, r1
 8005c9c:	1523      	asrs	r3, r4, #20
 8005c9e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005ca2:	4413      	add	r3, r2
 8005ca4:	9305      	str	r3, [sp, #20]
 8005ca6:	4bd0      	ldr	r3, [pc, #832]	; (8005fe8 <__ieee754_pow+0x760>)
 8005ca8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005cac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005cb0:	429c      	cmp	r4, r3
 8005cb2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005cb6:	dd08      	ble.n	8005cca <__ieee754_pow+0x442>
 8005cb8:	4bcc      	ldr	r3, [pc, #816]	; (8005fec <__ieee754_pow+0x764>)
 8005cba:	429c      	cmp	r4, r3
 8005cbc:	f340 8162 	ble.w	8005f84 <__ieee754_pow+0x6fc>
 8005cc0:	9b05      	ldr	r3, [sp, #20]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	9305      	str	r3, [sp, #20]
 8005cc6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005cca:	2400      	movs	r4, #0
 8005ccc:	00e3      	lsls	r3, r4, #3
 8005cce:	9307      	str	r3, [sp, #28]
 8005cd0:	4bc7      	ldr	r3, [pc, #796]	; (8005ff0 <__ieee754_pow+0x768>)
 8005cd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005cd6:	ed93 7b00 	vldr	d7, [r3]
 8005cda:	4629      	mov	r1, r5
 8005cdc:	ec53 2b17 	vmov	r2, r3, d7
 8005ce0:	eeb0 9a47 	vmov.f32	s18, s14
 8005ce4:	eef0 9a67 	vmov.f32	s19, s15
 8005ce8:	4682      	mov	sl, r0
 8005cea:	f7fa fa79 	bl	80001e0 <__aeabi_dsub>
 8005cee:	4652      	mov	r2, sl
 8005cf0:	4606      	mov	r6, r0
 8005cf2:	460f      	mov	r7, r1
 8005cf4:	462b      	mov	r3, r5
 8005cf6:	ec51 0b19 	vmov	r0, r1, d9
 8005cfa:	f7fa fa73 	bl	80001e4 <__adddf3>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	460b      	mov	r3, r1
 8005d02:	2000      	movs	r0, #0
 8005d04:	49bb      	ldr	r1, [pc, #748]	; (8005ff4 <__ieee754_pow+0x76c>)
 8005d06:	f7fa fd4d 	bl	80007a4 <__aeabi_ddiv>
 8005d0a:	ec41 0b1a 	vmov	d10, r0, r1
 8005d0e:	4602      	mov	r2, r0
 8005d10:	460b      	mov	r3, r1
 8005d12:	4630      	mov	r0, r6
 8005d14:	4639      	mov	r1, r7
 8005d16:	f7fa fc1b 	bl	8000550 <__aeabi_dmul>
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d20:	9302      	str	r3, [sp, #8]
 8005d22:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005d26:	46ab      	mov	fp, r5
 8005d28:	106d      	asrs	r5, r5, #1
 8005d2a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005d2e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005d32:	ec41 0b18 	vmov	d8, r0, r1
 8005d36:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	4640      	mov	r0, r8
 8005d3e:	4649      	mov	r1, r9
 8005d40:	4614      	mov	r4, r2
 8005d42:	461d      	mov	r5, r3
 8005d44:	f7fa fc04 	bl	8000550 <__aeabi_dmul>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	4630      	mov	r0, r6
 8005d4e:	4639      	mov	r1, r7
 8005d50:	f7fa fa46 	bl	80001e0 <__aeabi_dsub>
 8005d54:	ec53 2b19 	vmov	r2, r3, d9
 8005d58:	4606      	mov	r6, r0
 8005d5a:	460f      	mov	r7, r1
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	4629      	mov	r1, r5
 8005d60:	f7fa fa3e 	bl	80001e0 <__aeabi_dsub>
 8005d64:	4602      	mov	r2, r0
 8005d66:	460b      	mov	r3, r1
 8005d68:	4650      	mov	r0, sl
 8005d6a:	4659      	mov	r1, fp
 8005d6c:	f7fa fa38 	bl	80001e0 <__aeabi_dsub>
 8005d70:	4642      	mov	r2, r8
 8005d72:	464b      	mov	r3, r9
 8005d74:	f7fa fbec 	bl	8000550 <__aeabi_dmul>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	4630      	mov	r0, r6
 8005d7e:	4639      	mov	r1, r7
 8005d80:	f7fa fa2e 	bl	80001e0 <__aeabi_dsub>
 8005d84:	ec53 2b1a 	vmov	r2, r3, d10
 8005d88:	f7fa fbe2 	bl	8000550 <__aeabi_dmul>
 8005d8c:	ec53 2b18 	vmov	r2, r3, d8
 8005d90:	ec41 0b19 	vmov	d9, r0, r1
 8005d94:	ec51 0b18 	vmov	r0, r1, d8
 8005d98:	f7fa fbda 	bl	8000550 <__aeabi_dmul>
 8005d9c:	a37c      	add	r3, pc, #496	; (adr r3, 8005f90 <__ieee754_pow+0x708>)
 8005d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da2:	4604      	mov	r4, r0
 8005da4:	460d      	mov	r5, r1
 8005da6:	f7fa fbd3 	bl	8000550 <__aeabi_dmul>
 8005daa:	a37b      	add	r3, pc, #492	; (adr r3, 8005f98 <__ieee754_pow+0x710>)
 8005dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db0:	f7fa fa18 	bl	80001e4 <__adddf3>
 8005db4:	4622      	mov	r2, r4
 8005db6:	462b      	mov	r3, r5
 8005db8:	f7fa fbca 	bl	8000550 <__aeabi_dmul>
 8005dbc:	a378      	add	r3, pc, #480	; (adr r3, 8005fa0 <__ieee754_pow+0x718>)
 8005dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc2:	f7fa fa0f 	bl	80001e4 <__adddf3>
 8005dc6:	4622      	mov	r2, r4
 8005dc8:	462b      	mov	r3, r5
 8005dca:	f7fa fbc1 	bl	8000550 <__aeabi_dmul>
 8005dce:	a376      	add	r3, pc, #472	; (adr r3, 8005fa8 <__ieee754_pow+0x720>)
 8005dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd4:	f7fa fa06 	bl	80001e4 <__adddf3>
 8005dd8:	4622      	mov	r2, r4
 8005dda:	462b      	mov	r3, r5
 8005ddc:	f7fa fbb8 	bl	8000550 <__aeabi_dmul>
 8005de0:	a373      	add	r3, pc, #460	; (adr r3, 8005fb0 <__ieee754_pow+0x728>)
 8005de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de6:	f7fa f9fd 	bl	80001e4 <__adddf3>
 8005dea:	4622      	mov	r2, r4
 8005dec:	462b      	mov	r3, r5
 8005dee:	f7fa fbaf 	bl	8000550 <__aeabi_dmul>
 8005df2:	a371      	add	r3, pc, #452	; (adr r3, 8005fb8 <__ieee754_pow+0x730>)
 8005df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df8:	f7fa f9f4 	bl	80001e4 <__adddf3>
 8005dfc:	4622      	mov	r2, r4
 8005dfe:	4606      	mov	r6, r0
 8005e00:	460f      	mov	r7, r1
 8005e02:	462b      	mov	r3, r5
 8005e04:	4620      	mov	r0, r4
 8005e06:	4629      	mov	r1, r5
 8005e08:	f7fa fba2 	bl	8000550 <__aeabi_dmul>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	460b      	mov	r3, r1
 8005e10:	4630      	mov	r0, r6
 8005e12:	4639      	mov	r1, r7
 8005e14:	f7fa fb9c 	bl	8000550 <__aeabi_dmul>
 8005e18:	4642      	mov	r2, r8
 8005e1a:	4604      	mov	r4, r0
 8005e1c:	460d      	mov	r5, r1
 8005e1e:	464b      	mov	r3, r9
 8005e20:	ec51 0b18 	vmov	r0, r1, d8
 8005e24:	f7fa f9de 	bl	80001e4 <__adddf3>
 8005e28:	ec53 2b19 	vmov	r2, r3, d9
 8005e2c:	f7fa fb90 	bl	8000550 <__aeabi_dmul>
 8005e30:	4622      	mov	r2, r4
 8005e32:	462b      	mov	r3, r5
 8005e34:	f7fa f9d6 	bl	80001e4 <__adddf3>
 8005e38:	4642      	mov	r2, r8
 8005e3a:	4682      	mov	sl, r0
 8005e3c:	468b      	mov	fp, r1
 8005e3e:	464b      	mov	r3, r9
 8005e40:	4640      	mov	r0, r8
 8005e42:	4649      	mov	r1, r9
 8005e44:	f7fa fb84 	bl	8000550 <__aeabi_dmul>
 8005e48:	4b6b      	ldr	r3, [pc, #428]	; (8005ff8 <__ieee754_pow+0x770>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	4606      	mov	r6, r0
 8005e4e:	460f      	mov	r7, r1
 8005e50:	f7fa f9c8 	bl	80001e4 <__adddf3>
 8005e54:	4652      	mov	r2, sl
 8005e56:	465b      	mov	r3, fp
 8005e58:	f7fa f9c4 	bl	80001e4 <__adddf3>
 8005e5c:	2000      	movs	r0, #0
 8005e5e:	4604      	mov	r4, r0
 8005e60:	460d      	mov	r5, r1
 8005e62:	4602      	mov	r2, r0
 8005e64:	460b      	mov	r3, r1
 8005e66:	4640      	mov	r0, r8
 8005e68:	4649      	mov	r1, r9
 8005e6a:	f7fa fb71 	bl	8000550 <__aeabi_dmul>
 8005e6e:	4b62      	ldr	r3, [pc, #392]	; (8005ff8 <__ieee754_pow+0x770>)
 8005e70:	4680      	mov	r8, r0
 8005e72:	4689      	mov	r9, r1
 8005e74:	2200      	movs	r2, #0
 8005e76:	4620      	mov	r0, r4
 8005e78:	4629      	mov	r1, r5
 8005e7a:	f7fa f9b1 	bl	80001e0 <__aeabi_dsub>
 8005e7e:	4632      	mov	r2, r6
 8005e80:	463b      	mov	r3, r7
 8005e82:	f7fa f9ad 	bl	80001e0 <__aeabi_dsub>
 8005e86:	4602      	mov	r2, r0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	4650      	mov	r0, sl
 8005e8c:	4659      	mov	r1, fp
 8005e8e:	f7fa f9a7 	bl	80001e0 <__aeabi_dsub>
 8005e92:	ec53 2b18 	vmov	r2, r3, d8
 8005e96:	f7fa fb5b 	bl	8000550 <__aeabi_dmul>
 8005e9a:	4622      	mov	r2, r4
 8005e9c:	4606      	mov	r6, r0
 8005e9e:	460f      	mov	r7, r1
 8005ea0:	462b      	mov	r3, r5
 8005ea2:	ec51 0b19 	vmov	r0, r1, d9
 8005ea6:	f7fa fb53 	bl	8000550 <__aeabi_dmul>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	460b      	mov	r3, r1
 8005eae:	4630      	mov	r0, r6
 8005eb0:	4639      	mov	r1, r7
 8005eb2:	f7fa f997 	bl	80001e4 <__adddf3>
 8005eb6:	4606      	mov	r6, r0
 8005eb8:	460f      	mov	r7, r1
 8005eba:	4602      	mov	r2, r0
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	4640      	mov	r0, r8
 8005ec0:	4649      	mov	r1, r9
 8005ec2:	f7fa f98f 	bl	80001e4 <__adddf3>
 8005ec6:	a33e      	add	r3, pc, #248	; (adr r3, 8005fc0 <__ieee754_pow+0x738>)
 8005ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ecc:	2000      	movs	r0, #0
 8005ece:	4604      	mov	r4, r0
 8005ed0:	460d      	mov	r5, r1
 8005ed2:	f7fa fb3d 	bl	8000550 <__aeabi_dmul>
 8005ed6:	4642      	mov	r2, r8
 8005ed8:	ec41 0b18 	vmov	d8, r0, r1
 8005edc:	464b      	mov	r3, r9
 8005ede:	4620      	mov	r0, r4
 8005ee0:	4629      	mov	r1, r5
 8005ee2:	f7fa f97d 	bl	80001e0 <__aeabi_dsub>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	460b      	mov	r3, r1
 8005eea:	4630      	mov	r0, r6
 8005eec:	4639      	mov	r1, r7
 8005eee:	f7fa f977 	bl	80001e0 <__aeabi_dsub>
 8005ef2:	a335      	add	r3, pc, #212	; (adr r3, 8005fc8 <__ieee754_pow+0x740>)
 8005ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef8:	f7fa fb2a 	bl	8000550 <__aeabi_dmul>
 8005efc:	a334      	add	r3, pc, #208	; (adr r3, 8005fd0 <__ieee754_pow+0x748>)
 8005efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f02:	4606      	mov	r6, r0
 8005f04:	460f      	mov	r7, r1
 8005f06:	4620      	mov	r0, r4
 8005f08:	4629      	mov	r1, r5
 8005f0a:	f7fa fb21 	bl	8000550 <__aeabi_dmul>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	460b      	mov	r3, r1
 8005f12:	4630      	mov	r0, r6
 8005f14:	4639      	mov	r1, r7
 8005f16:	f7fa f965 	bl	80001e4 <__adddf3>
 8005f1a:	9a07      	ldr	r2, [sp, #28]
 8005f1c:	4b37      	ldr	r3, [pc, #220]	; (8005ffc <__ieee754_pow+0x774>)
 8005f1e:	4413      	add	r3, r2
 8005f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f24:	f7fa f95e 	bl	80001e4 <__adddf3>
 8005f28:	4682      	mov	sl, r0
 8005f2a:	9805      	ldr	r0, [sp, #20]
 8005f2c:	468b      	mov	fp, r1
 8005f2e:	f7fa faa5 	bl	800047c <__aeabi_i2d>
 8005f32:	9a07      	ldr	r2, [sp, #28]
 8005f34:	4b32      	ldr	r3, [pc, #200]	; (8006000 <__ieee754_pow+0x778>)
 8005f36:	4413      	add	r3, r2
 8005f38:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f3c:	4606      	mov	r6, r0
 8005f3e:	460f      	mov	r7, r1
 8005f40:	4652      	mov	r2, sl
 8005f42:	465b      	mov	r3, fp
 8005f44:	ec51 0b18 	vmov	r0, r1, d8
 8005f48:	f7fa f94c 	bl	80001e4 <__adddf3>
 8005f4c:	4642      	mov	r2, r8
 8005f4e:	464b      	mov	r3, r9
 8005f50:	f7fa f948 	bl	80001e4 <__adddf3>
 8005f54:	4632      	mov	r2, r6
 8005f56:	463b      	mov	r3, r7
 8005f58:	f7fa f944 	bl	80001e4 <__adddf3>
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	4632      	mov	r2, r6
 8005f60:	463b      	mov	r3, r7
 8005f62:	4604      	mov	r4, r0
 8005f64:	460d      	mov	r5, r1
 8005f66:	f7fa f93b 	bl	80001e0 <__aeabi_dsub>
 8005f6a:	4642      	mov	r2, r8
 8005f6c:	464b      	mov	r3, r9
 8005f6e:	f7fa f937 	bl	80001e0 <__aeabi_dsub>
 8005f72:	ec53 2b18 	vmov	r2, r3, d8
 8005f76:	f7fa f933 	bl	80001e0 <__aeabi_dsub>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	4650      	mov	r0, sl
 8005f80:	4659      	mov	r1, fp
 8005f82:	e610      	b.n	8005ba6 <__ieee754_pow+0x31e>
 8005f84:	2401      	movs	r4, #1
 8005f86:	e6a1      	b.n	8005ccc <__ieee754_pow+0x444>
 8005f88:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8005fd8 <__ieee754_pow+0x750>
 8005f8c:	e617      	b.n	8005bbe <__ieee754_pow+0x336>
 8005f8e:	bf00      	nop
 8005f90:	4a454eef 	.word	0x4a454eef
 8005f94:	3fca7e28 	.word	0x3fca7e28
 8005f98:	93c9db65 	.word	0x93c9db65
 8005f9c:	3fcd864a 	.word	0x3fcd864a
 8005fa0:	a91d4101 	.word	0xa91d4101
 8005fa4:	3fd17460 	.word	0x3fd17460
 8005fa8:	518f264d 	.word	0x518f264d
 8005fac:	3fd55555 	.word	0x3fd55555
 8005fb0:	db6fabff 	.word	0xdb6fabff
 8005fb4:	3fdb6db6 	.word	0x3fdb6db6
 8005fb8:	33333303 	.word	0x33333303
 8005fbc:	3fe33333 	.word	0x3fe33333
 8005fc0:	e0000000 	.word	0xe0000000
 8005fc4:	3feec709 	.word	0x3feec709
 8005fc8:	dc3a03fd 	.word	0xdc3a03fd
 8005fcc:	3feec709 	.word	0x3feec709
 8005fd0:	145b01f5 	.word	0x145b01f5
 8005fd4:	be3e2fe0 	.word	0xbe3e2fe0
 8005fd8:	00000000 	.word	0x00000000
 8005fdc:	3ff00000 	.word	0x3ff00000
 8005fe0:	7ff00000 	.word	0x7ff00000
 8005fe4:	43400000 	.word	0x43400000
 8005fe8:	0003988e 	.word	0x0003988e
 8005fec:	000bb679 	.word	0x000bb679
 8005ff0:	08006670 	.word	0x08006670
 8005ff4:	3ff00000 	.word	0x3ff00000
 8005ff8:	40080000 	.word	0x40080000
 8005ffc:	08006690 	.word	0x08006690
 8006000:	08006680 	.word	0x08006680
 8006004:	a3b5      	add	r3, pc, #724	; (adr r3, 80062dc <__ieee754_pow+0xa54>)
 8006006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600a:	4640      	mov	r0, r8
 800600c:	4649      	mov	r1, r9
 800600e:	f7fa f8e9 	bl	80001e4 <__adddf3>
 8006012:	4622      	mov	r2, r4
 8006014:	ec41 0b1a 	vmov	d10, r0, r1
 8006018:	462b      	mov	r3, r5
 800601a:	4630      	mov	r0, r6
 800601c:	4639      	mov	r1, r7
 800601e:	f7fa f8df 	bl	80001e0 <__aeabi_dsub>
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	ec51 0b1a 	vmov	r0, r1, d10
 800602a:	f7fa fd21 	bl	8000a70 <__aeabi_dcmpgt>
 800602e:	2800      	cmp	r0, #0
 8006030:	f47f ae04 	bne.w	8005c3c <__ieee754_pow+0x3b4>
 8006034:	4aa4      	ldr	r2, [pc, #656]	; (80062c8 <__ieee754_pow+0xa40>)
 8006036:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800603a:	4293      	cmp	r3, r2
 800603c:	f340 8108 	ble.w	8006250 <__ieee754_pow+0x9c8>
 8006040:	151b      	asrs	r3, r3, #20
 8006042:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006046:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800604a:	fa4a f303 	asr.w	r3, sl, r3
 800604e:	445b      	add	r3, fp
 8006050:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006054:	4e9d      	ldr	r6, [pc, #628]	; (80062cc <__ieee754_pow+0xa44>)
 8006056:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800605a:	4116      	asrs	r6, r2
 800605c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006060:	2000      	movs	r0, #0
 8006062:	ea23 0106 	bic.w	r1, r3, r6
 8006066:	f1c2 0214 	rsb	r2, r2, #20
 800606a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800606e:	fa4a fa02 	asr.w	sl, sl, r2
 8006072:	f1bb 0f00 	cmp.w	fp, #0
 8006076:	4602      	mov	r2, r0
 8006078:	460b      	mov	r3, r1
 800607a:	4620      	mov	r0, r4
 800607c:	4629      	mov	r1, r5
 800607e:	bfb8      	it	lt
 8006080:	f1ca 0a00 	rsblt	sl, sl, #0
 8006084:	f7fa f8ac 	bl	80001e0 <__aeabi_dsub>
 8006088:	ec41 0b19 	vmov	d9, r0, r1
 800608c:	4642      	mov	r2, r8
 800608e:	464b      	mov	r3, r9
 8006090:	ec51 0b19 	vmov	r0, r1, d9
 8006094:	f7fa f8a6 	bl	80001e4 <__adddf3>
 8006098:	a37b      	add	r3, pc, #492	; (adr r3, 8006288 <__ieee754_pow+0xa00>)
 800609a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609e:	2000      	movs	r0, #0
 80060a0:	4604      	mov	r4, r0
 80060a2:	460d      	mov	r5, r1
 80060a4:	f7fa fa54 	bl	8000550 <__aeabi_dmul>
 80060a8:	ec53 2b19 	vmov	r2, r3, d9
 80060ac:	4606      	mov	r6, r0
 80060ae:	460f      	mov	r7, r1
 80060b0:	4620      	mov	r0, r4
 80060b2:	4629      	mov	r1, r5
 80060b4:	f7fa f894 	bl	80001e0 <__aeabi_dsub>
 80060b8:	4602      	mov	r2, r0
 80060ba:	460b      	mov	r3, r1
 80060bc:	4640      	mov	r0, r8
 80060be:	4649      	mov	r1, r9
 80060c0:	f7fa f88e 	bl	80001e0 <__aeabi_dsub>
 80060c4:	a372      	add	r3, pc, #456	; (adr r3, 8006290 <__ieee754_pow+0xa08>)
 80060c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ca:	f7fa fa41 	bl	8000550 <__aeabi_dmul>
 80060ce:	a372      	add	r3, pc, #456	; (adr r3, 8006298 <__ieee754_pow+0xa10>)
 80060d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d4:	4680      	mov	r8, r0
 80060d6:	4689      	mov	r9, r1
 80060d8:	4620      	mov	r0, r4
 80060da:	4629      	mov	r1, r5
 80060dc:	f7fa fa38 	bl	8000550 <__aeabi_dmul>
 80060e0:	4602      	mov	r2, r0
 80060e2:	460b      	mov	r3, r1
 80060e4:	4640      	mov	r0, r8
 80060e6:	4649      	mov	r1, r9
 80060e8:	f7fa f87c 	bl	80001e4 <__adddf3>
 80060ec:	4604      	mov	r4, r0
 80060ee:	460d      	mov	r5, r1
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4630      	mov	r0, r6
 80060f6:	4639      	mov	r1, r7
 80060f8:	f7fa f874 	bl	80001e4 <__adddf3>
 80060fc:	4632      	mov	r2, r6
 80060fe:	463b      	mov	r3, r7
 8006100:	4680      	mov	r8, r0
 8006102:	4689      	mov	r9, r1
 8006104:	f7fa f86c 	bl	80001e0 <__aeabi_dsub>
 8006108:	4602      	mov	r2, r0
 800610a:	460b      	mov	r3, r1
 800610c:	4620      	mov	r0, r4
 800610e:	4629      	mov	r1, r5
 8006110:	f7fa f866 	bl	80001e0 <__aeabi_dsub>
 8006114:	4642      	mov	r2, r8
 8006116:	4606      	mov	r6, r0
 8006118:	460f      	mov	r7, r1
 800611a:	464b      	mov	r3, r9
 800611c:	4640      	mov	r0, r8
 800611e:	4649      	mov	r1, r9
 8006120:	f7fa fa16 	bl	8000550 <__aeabi_dmul>
 8006124:	a35e      	add	r3, pc, #376	; (adr r3, 80062a0 <__ieee754_pow+0xa18>)
 8006126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612a:	4604      	mov	r4, r0
 800612c:	460d      	mov	r5, r1
 800612e:	f7fa fa0f 	bl	8000550 <__aeabi_dmul>
 8006132:	a35d      	add	r3, pc, #372	; (adr r3, 80062a8 <__ieee754_pow+0xa20>)
 8006134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006138:	f7fa f852 	bl	80001e0 <__aeabi_dsub>
 800613c:	4622      	mov	r2, r4
 800613e:	462b      	mov	r3, r5
 8006140:	f7fa fa06 	bl	8000550 <__aeabi_dmul>
 8006144:	a35a      	add	r3, pc, #360	; (adr r3, 80062b0 <__ieee754_pow+0xa28>)
 8006146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614a:	f7fa f84b 	bl	80001e4 <__adddf3>
 800614e:	4622      	mov	r2, r4
 8006150:	462b      	mov	r3, r5
 8006152:	f7fa f9fd 	bl	8000550 <__aeabi_dmul>
 8006156:	a358      	add	r3, pc, #352	; (adr r3, 80062b8 <__ieee754_pow+0xa30>)
 8006158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615c:	f7fa f840 	bl	80001e0 <__aeabi_dsub>
 8006160:	4622      	mov	r2, r4
 8006162:	462b      	mov	r3, r5
 8006164:	f7fa f9f4 	bl	8000550 <__aeabi_dmul>
 8006168:	a355      	add	r3, pc, #340	; (adr r3, 80062c0 <__ieee754_pow+0xa38>)
 800616a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616e:	f7fa f839 	bl	80001e4 <__adddf3>
 8006172:	4622      	mov	r2, r4
 8006174:	462b      	mov	r3, r5
 8006176:	f7fa f9eb 	bl	8000550 <__aeabi_dmul>
 800617a:	4602      	mov	r2, r0
 800617c:	460b      	mov	r3, r1
 800617e:	4640      	mov	r0, r8
 8006180:	4649      	mov	r1, r9
 8006182:	f7fa f82d 	bl	80001e0 <__aeabi_dsub>
 8006186:	4604      	mov	r4, r0
 8006188:	460d      	mov	r5, r1
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	4640      	mov	r0, r8
 8006190:	4649      	mov	r1, r9
 8006192:	f7fa f9dd 	bl	8000550 <__aeabi_dmul>
 8006196:	2200      	movs	r2, #0
 8006198:	ec41 0b19 	vmov	d9, r0, r1
 800619c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80061a0:	4620      	mov	r0, r4
 80061a2:	4629      	mov	r1, r5
 80061a4:	f7fa f81c 	bl	80001e0 <__aeabi_dsub>
 80061a8:	4602      	mov	r2, r0
 80061aa:	460b      	mov	r3, r1
 80061ac:	ec51 0b19 	vmov	r0, r1, d9
 80061b0:	f7fa faf8 	bl	80007a4 <__aeabi_ddiv>
 80061b4:	4632      	mov	r2, r6
 80061b6:	4604      	mov	r4, r0
 80061b8:	460d      	mov	r5, r1
 80061ba:	463b      	mov	r3, r7
 80061bc:	4640      	mov	r0, r8
 80061be:	4649      	mov	r1, r9
 80061c0:	f7fa f9c6 	bl	8000550 <__aeabi_dmul>
 80061c4:	4632      	mov	r2, r6
 80061c6:	463b      	mov	r3, r7
 80061c8:	f7fa f80c 	bl	80001e4 <__adddf3>
 80061cc:	4602      	mov	r2, r0
 80061ce:	460b      	mov	r3, r1
 80061d0:	4620      	mov	r0, r4
 80061d2:	4629      	mov	r1, r5
 80061d4:	f7fa f804 	bl	80001e0 <__aeabi_dsub>
 80061d8:	4642      	mov	r2, r8
 80061da:	464b      	mov	r3, r9
 80061dc:	f7fa f800 	bl	80001e0 <__aeabi_dsub>
 80061e0:	460b      	mov	r3, r1
 80061e2:	4602      	mov	r2, r0
 80061e4:	493a      	ldr	r1, [pc, #232]	; (80062d0 <__ieee754_pow+0xa48>)
 80061e6:	2000      	movs	r0, #0
 80061e8:	f7f9 fffa 	bl	80001e0 <__aeabi_dsub>
 80061ec:	ec41 0b10 	vmov	d0, r0, r1
 80061f0:	ee10 3a90 	vmov	r3, s1
 80061f4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80061f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061fc:	da2b      	bge.n	8006256 <__ieee754_pow+0x9ce>
 80061fe:	4650      	mov	r0, sl
 8006200:	f000 f96a 	bl	80064d8 <scalbn>
 8006204:	ec51 0b10 	vmov	r0, r1, d0
 8006208:	ec53 2b18 	vmov	r2, r3, d8
 800620c:	f7ff bbed 	b.w	80059ea <__ieee754_pow+0x162>
 8006210:	4b30      	ldr	r3, [pc, #192]	; (80062d4 <__ieee754_pow+0xa4c>)
 8006212:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006216:	429e      	cmp	r6, r3
 8006218:	f77f af0c 	ble.w	8006034 <__ieee754_pow+0x7ac>
 800621c:	4b2e      	ldr	r3, [pc, #184]	; (80062d8 <__ieee754_pow+0xa50>)
 800621e:	440b      	add	r3, r1
 8006220:	4303      	orrs	r3, r0
 8006222:	d009      	beq.n	8006238 <__ieee754_pow+0x9b0>
 8006224:	ec51 0b18 	vmov	r0, r1, d8
 8006228:	2200      	movs	r2, #0
 800622a:	2300      	movs	r3, #0
 800622c:	f7fa fc02 	bl	8000a34 <__aeabi_dcmplt>
 8006230:	3800      	subs	r0, #0
 8006232:	bf18      	it	ne
 8006234:	2001      	movne	r0, #1
 8006236:	e447      	b.n	8005ac8 <__ieee754_pow+0x240>
 8006238:	4622      	mov	r2, r4
 800623a:	462b      	mov	r3, r5
 800623c:	f7f9 ffd0 	bl	80001e0 <__aeabi_dsub>
 8006240:	4642      	mov	r2, r8
 8006242:	464b      	mov	r3, r9
 8006244:	f7fa fc0a 	bl	8000a5c <__aeabi_dcmpge>
 8006248:	2800      	cmp	r0, #0
 800624a:	f43f aef3 	beq.w	8006034 <__ieee754_pow+0x7ac>
 800624e:	e7e9      	b.n	8006224 <__ieee754_pow+0x99c>
 8006250:	f04f 0a00 	mov.w	sl, #0
 8006254:	e71a      	b.n	800608c <__ieee754_pow+0x804>
 8006256:	ec51 0b10 	vmov	r0, r1, d0
 800625a:	4619      	mov	r1, r3
 800625c:	e7d4      	b.n	8006208 <__ieee754_pow+0x980>
 800625e:	491c      	ldr	r1, [pc, #112]	; (80062d0 <__ieee754_pow+0xa48>)
 8006260:	2000      	movs	r0, #0
 8006262:	f7ff bb30 	b.w	80058c6 <__ieee754_pow+0x3e>
 8006266:	2000      	movs	r0, #0
 8006268:	2100      	movs	r1, #0
 800626a:	f7ff bb2c 	b.w	80058c6 <__ieee754_pow+0x3e>
 800626e:	4630      	mov	r0, r6
 8006270:	4639      	mov	r1, r7
 8006272:	f7ff bb28 	b.w	80058c6 <__ieee754_pow+0x3e>
 8006276:	9204      	str	r2, [sp, #16]
 8006278:	f7ff bb7a 	b.w	8005970 <__ieee754_pow+0xe8>
 800627c:	2300      	movs	r3, #0
 800627e:	f7ff bb64 	b.w	800594a <__ieee754_pow+0xc2>
 8006282:	bf00      	nop
 8006284:	f3af 8000 	nop.w
 8006288:	00000000 	.word	0x00000000
 800628c:	3fe62e43 	.word	0x3fe62e43
 8006290:	fefa39ef 	.word	0xfefa39ef
 8006294:	3fe62e42 	.word	0x3fe62e42
 8006298:	0ca86c39 	.word	0x0ca86c39
 800629c:	be205c61 	.word	0xbe205c61
 80062a0:	72bea4d0 	.word	0x72bea4d0
 80062a4:	3e663769 	.word	0x3e663769
 80062a8:	c5d26bf1 	.word	0xc5d26bf1
 80062ac:	3ebbbd41 	.word	0x3ebbbd41
 80062b0:	af25de2c 	.word	0xaf25de2c
 80062b4:	3f11566a 	.word	0x3f11566a
 80062b8:	16bebd93 	.word	0x16bebd93
 80062bc:	3f66c16c 	.word	0x3f66c16c
 80062c0:	5555553e 	.word	0x5555553e
 80062c4:	3fc55555 	.word	0x3fc55555
 80062c8:	3fe00000 	.word	0x3fe00000
 80062cc:	000fffff 	.word	0x000fffff
 80062d0:	3ff00000 	.word	0x3ff00000
 80062d4:	4090cbff 	.word	0x4090cbff
 80062d8:	3f6f3400 	.word	0x3f6f3400
 80062dc:	652b82fe 	.word	0x652b82fe
 80062e0:	3c971547 	.word	0x3c971547

080062e4 <__ieee754_sqrt>:
 80062e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062e8:	ec55 4b10 	vmov	r4, r5, d0
 80062ec:	4e55      	ldr	r6, [pc, #340]	; (8006444 <__ieee754_sqrt+0x160>)
 80062ee:	43ae      	bics	r6, r5
 80062f0:	ee10 0a10 	vmov	r0, s0
 80062f4:	ee10 3a10 	vmov	r3, s0
 80062f8:	462a      	mov	r2, r5
 80062fa:	4629      	mov	r1, r5
 80062fc:	d110      	bne.n	8006320 <__ieee754_sqrt+0x3c>
 80062fe:	ee10 2a10 	vmov	r2, s0
 8006302:	462b      	mov	r3, r5
 8006304:	f7fa f924 	bl	8000550 <__aeabi_dmul>
 8006308:	4602      	mov	r2, r0
 800630a:	460b      	mov	r3, r1
 800630c:	4620      	mov	r0, r4
 800630e:	4629      	mov	r1, r5
 8006310:	f7f9 ff68 	bl	80001e4 <__adddf3>
 8006314:	4604      	mov	r4, r0
 8006316:	460d      	mov	r5, r1
 8006318:	ec45 4b10 	vmov	d0, r4, r5
 800631c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006320:	2d00      	cmp	r5, #0
 8006322:	dc10      	bgt.n	8006346 <__ieee754_sqrt+0x62>
 8006324:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006328:	4330      	orrs	r0, r6
 800632a:	d0f5      	beq.n	8006318 <__ieee754_sqrt+0x34>
 800632c:	b15d      	cbz	r5, 8006346 <__ieee754_sqrt+0x62>
 800632e:	ee10 2a10 	vmov	r2, s0
 8006332:	462b      	mov	r3, r5
 8006334:	ee10 0a10 	vmov	r0, s0
 8006338:	f7f9 ff52 	bl	80001e0 <__aeabi_dsub>
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	f7fa fa30 	bl	80007a4 <__aeabi_ddiv>
 8006344:	e7e6      	b.n	8006314 <__ieee754_sqrt+0x30>
 8006346:	1512      	asrs	r2, r2, #20
 8006348:	d074      	beq.n	8006434 <__ieee754_sqrt+0x150>
 800634a:	07d4      	lsls	r4, r2, #31
 800634c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006350:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8006354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006358:	bf5e      	ittt	pl
 800635a:	0fda      	lsrpl	r2, r3, #31
 800635c:	005b      	lslpl	r3, r3, #1
 800635e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8006362:	2400      	movs	r4, #0
 8006364:	0fda      	lsrs	r2, r3, #31
 8006366:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800636a:	107f      	asrs	r7, r7, #1
 800636c:	005b      	lsls	r3, r3, #1
 800636e:	2516      	movs	r5, #22
 8006370:	4620      	mov	r0, r4
 8006372:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006376:	1886      	adds	r6, r0, r2
 8006378:	428e      	cmp	r6, r1
 800637a:	bfde      	ittt	le
 800637c:	1b89      	suble	r1, r1, r6
 800637e:	18b0      	addle	r0, r6, r2
 8006380:	18a4      	addle	r4, r4, r2
 8006382:	0049      	lsls	r1, r1, #1
 8006384:	3d01      	subs	r5, #1
 8006386:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800638a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800638e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006392:	d1f0      	bne.n	8006376 <__ieee754_sqrt+0x92>
 8006394:	462a      	mov	r2, r5
 8006396:	f04f 0e20 	mov.w	lr, #32
 800639a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800639e:	4281      	cmp	r1, r0
 80063a0:	eb06 0c05 	add.w	ip, r6, r5
 80063a4:	dc02      	bgt.n	80063ac <__ieee754_sqrt+0xc8>
 80063a6:	d113      	bne.n	80063d0 <__ieee754_sqrt+0xec>
 80063a8:	459c      	cmp	ip, r3
 80063aa:	d811      	bhi.n	80063d0 <__ieee754_sqrt+0xec>
 80063ac:	f1bc 0f00 	cmp.w	ip, #0
 80063b0:	eb0c 0506 	add.w	r5, ip, r6
 80063b4:	da43      	bge.n	800643e <__ieee754_sqrt+0x15a>
 80063b6:	2d00      	cmp	r5, #0
 80063b8:	db41      	blt.n	800643e <__ieee754_sqrt+0x15a>
 80063ba:	f100 0801 	add.w	r8, r0, #1
 80063be:	1a09      	subs	r1, r1, r0
 80063c0:	459c      	cmp	ip, r3
 80063c2:	bf88      	it	hi
 80063c4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80063c8:	eba3 030c 	sub.w	r3, r3, ip
 80063cc:	4432      	add	r2, r6
 80063ce:	4640      	mov	r0, r8
 80063d0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80063d4:	f1be 0e01 	subs.w	lr, lr, #1
 80063d8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80063dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80063e0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80063e4:	d1db      	bne.n	800639e <__ieee754_sqrt+0xba>
 80063e6:	430b      	orrs	r3, r1
 80063e8:	d006      	beq.n	80063f8 <__ieee754_sqrt+0x114>
 80063ea:	1c50      	adds	r0, r2, #1
 80063ec:	bf13      	iteet	ne
 80063ee:	3201      	addne	r2, #1
 80063f0:	3401      	addeq	r4, #1
 80063f2:	4672      	moveq	r2, lr
 80063f4:	f022 0201 	bicne.w	r2, r2, #1
 80063f8:	1063      	asrs	r3, r4, #1
 80063fa:	0852      	lsrs	r2, r2, #1
 80063fc:	07e1      	lsls	r1, r4, #31
 80063fe:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006402:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006406:	bf48      	it	mi
 8006408:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800640c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006410:	4614      	mov	r4, r2
 8006412:	e781      	b.n	8006318 <__ieee754_sqrt+0x34>
 8006414:	0ad9      	lsrs	r1, r3, #11
 8006416:	3815      	subs	r0, #21
 8006418:	055b      	lsls	r3, r3, #21
 800641a:	2900      	cmp	r1, #0
 800641c:	d0fa      	beq.n	8006414 <__ieee754_sqrt+0x130>
 800641e:	02cd      	lsls	r5, r1, #11
 8006420:	d50a      	bpl.n	8006438 <__ieee754_sqrt+0x154>
 8006422:	f1c2 0420 	rsb	r4, r2, #32
 8006426:	fa23 f404 	lsr.w	r4, r3, r4
 800642a:	1e55      	subs	r5, r2, #1
 800642c:	4093      	lsls	r3, r2
 800642e:	4321      	orrs	r1, r4
 8006430:	1b42      	subs	r2, r0, r5
 8006432:	e78a      	b.n	800634a <__ieee754_sqrt+0x66>
 8006434:	4610      	mov	r0, r2
 8006436:	e7f0      	b.n	800641a <__ieee754_sqrt+0x136>
 8006438:	0049      	lsls	r1, r1, #1
 800643a:	3201      	adds	r2, #1
 800643c:	e7ef      	b.n	800641e <__ieee754_sqrt+0x13a>
 800643e:	4680      	mov	r8, r0
 8006440:	e7bd      	b.n	80063be <__ieee754_sqrt+0xda>
 8006442:	bf00      	nop
 8006444:	7ff00000 	.word	0x7ff00000

08006448 <__ieee754_sqrtf>:
 8006448:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800644c:	4770      	bx	lr

0800644e <with_errno>:
 800644e:	b570      	push	{r4, r5, r6, lr}
 8006450:	4604      	mov	r4, r0
 8006452:	460d      	mov	r5, r1
 8006454:	4616      	mov	r6, r2
 8006456:	f7ff f955 	bl	8005704 <__errno>
 800645a:	4629      	mov	r1, r5
 800645c:	6006      	str	r6, [r0, #0]
 800645e:	4620      	mov	r0, r4
 8006460:	bd70      	pop	{r4, r5, r6, pc}

08006462 <xflow>:
 8006462:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006464:	4614      	mov	r4, r2
 8006466:	461d      	mov	r5, r3
 8006468:	b108      	cbz	r0, 800646e <xflow+0xc>
 800646a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800646e:	e9cd 2300 	strd	r2, r3, [sp]
 8006472:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006476:	4620      	mov	r0, r4
 8006478:	4629      	mov	r1, r5
 800647a:	f7fa f869 	bl	8000550 <__aeabi_dmul>
 800647e:	2222      	movs	r2, #34	; 0x22
 8006480:	b003      	add	sp, #12
 8006482:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006486:	f7ff bfe2 	b.w	800644e <with_errno>

0800648a <__math_uflow>:
 800648a:	b508      	push	{r3, lr}
 800648c:	2200      	movs	r2, #0
 800648e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006492:	f7ff ffe6 	bl	8006462 <xflow>
 8006496:	ec41 0b10 	vmov	d0, r0, r1
 800649a:	bd08      	pop	{r3, pc}

0800649c <__math_oflow>:
 800649c:	b508      	push	{r3, lr}
 800649e:	2200      	movs	r2, #0
 80064a0:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80064a4:	f7ff ffdd 	bl	8006462 <xflow>
 80064a8:	ec41 0b10 	vmov	d0, r0, r1
 80064ac:	bd08      	pop	{r3, pc}

080064ae <fabs>:
 80064ae:	ec51 0b10 	vmov	r0, r1, d0
 80064b2:	ee10 2a10 	vmov	r2, s0
 80064b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80064ba:	ec43 2b10 	vmov	d0, r2, r3
 80064be:	4770      	bx	lr

080064c0 <finite>:
 80064c0:	b082      	sub	sp, #8
 80064c2:	ed8d 0b00 	vstr	d0, [sp]
 80064c6:	9801      	ldr	r0, [sp, #4]
 80064c8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80064cc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80064d0:	0fc0      	lsrs	r0, r0, #31
 80064d2:	b002      	add	sp, #8
 80064d4:	4770      	bx	lr
	...

080064d8 <scalbn>:
 80064d8:	b570      	push	{r4, r5, r6, lr}
 80064da:	ec55 4b10 	vmov	r4, r5, d0
 80064de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80064e2:	4606      	mov	r6, r0
 80064e4:	462b      	mov	r3, r5
 80064e6:	b99a      	cbnz	r2, 8006510 <scalbn+0x38>
 80064e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80064ec:	4323      	orrs	r3, r4
 80064ee:	d036      	beq.n	800655e <scalbn+0x86>
 80064f0:	4b39      	ldr	r3, [pc, #228]	; (80065d8 <scalbn+0x100>)
 80064f2:	4629      	mov	r1, r5
 80064f4:	ee10 0a10 	vmov	r0, s0
 80064f8:	2200      	movs	r2, #0
 80064fa:	f7fa f829 	bl	8000550 <__aeabi_dmul>
 80064fe:	4b37      	ldr	r3, [pc, #220]	; (80065dc <scalbn+0x104>)
 8006500:	429e      	cmp	r6, r3
 8006502:	4604      	mov	r4, r0
 8006504:	460d      	mov	r5, r1
 8006506:	da10      	bge.n	800652a <scalbn+0x52>
 8006508:	a32b      	add	r3, pc, #172	; (adr r3, 80065b8 <scalbn+0xe0>)
 800650a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650e:	e03a      	b.n	8006586 <scalbn+0xae>
 8006510:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006514:	428a      	cmp	r2, r1
 8006516:	d10c      	bne.n	8006532 <scalbn+0x5a>
 8006518:	ee10 2a10 	vmov	r2, s0
 800651c:	4620      	mov	r0, r4
 800651e:	4629      	mov	r1, r5
 8006520:	f7f9 fe60 	bl	80001e4 <__adddf3>
 8006524:	4604      	mov	r4, r0
 8006526:	460d      	mov	r5, r1
 8006528:	e019      	b.n	800655e <scalbn+0x86>
 800652a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800652e:	460b      	mov	r3, r1
 8006530:	3a36      	subs	r2, #54	; 0x36
 8006532:	4432      	add	r2, r6
 8006534:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006538:	428a      	cmp	r2, r1
 800653a:	dd08      	ble.n	800654e <scalbn+0x76>
 800653c:	2d00      	cmp	r5, #0
 800653e:	a120      	add	r1, pc, #128	; (adr r1, 80065c0 <scalbn+0xe8>)
 8006540:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006544:	da1c      	bge.n	8006580 <scalbn+0xa8>
 8006546:	a120      	add	r1, pc, #128	; (adr r1, 80065c8 <scalbn+0xf0>)
 8006548:	e9d1 0100 	ldrd	r0, r1, [r1]
 800654c:	e018      	b.n	8006580 <scalbn+0xa8>
 800654e:	2a00      	cmp	r2, #0
 8006550:	dd08      	ble.n	8006564 <scalbn+0x8c>
 8006552:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006556:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800655a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800655e:	ec45 4b10 	vmov	d0, r4, r5
 8006562:	bd70      	pop	{r4, r5, r6, pc}
 8006564:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006568:	da19      	bge.n	800659e <scalbn+0xc6>
 800656a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800656e:	429e      	cmp	r6, r3
 8006570:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006574:	dd0a      	ble.n	800658c <scalbn+0xb4>
 8006576:	a112      	add	r1, pc, #72	; (adr r1, 80065c0 <scalbn+0xe8>)
 8006578:	e9d1 0100 	ldrd	r0, r1, [r1]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1e2      	bne.n	8006546 <scalbn+0x6e>
 8006580:	a30f      	add	r3, pc, #60	; (adr r3, 80065c0 <scalbn+0xe8>)
 8006582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006586:	f7f9 ffe3 	bl	8000550 <__aeabi_dmul>
 800658a:	e7cb      	b.n	8006524 <scalbn+0x4c>
 800658c:	a10a      	add	r1, pc, #40	; (adr r1, 80065b8 <scalbn+0xe0>)
 800658e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d0b8      	beq.n	8006508 <scalbn+0x30>
 8006596:	a10e      	add	r1, pc, #56	; (adr r1, 80065d0 <scalbn+0xf8>)
 8006598:	e9d1 0100 	ldrd	r0, r1, [r1]
 800659c:	e7b4      	b.n	8006508 <scalbn+0x30>
 800659e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80065a2:	3236      	adds	r2, #54	; 0x36
 80065a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80065a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80065ac:	4620      	mov	r0, r4
 80065ae:	4b0c      	ldr	r3, [pc, #48]	; (80065e0 <scalbn+0x108>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	e7e8      	b.n	8006586 <scalbn+0xae>
 80065b4:	f3af 8000 	nop.w
 80065b8:	c2f8f359 	.word	0xc2f8f359
 80065bc:	01a56e1f 	.word	0x01a56e1f
 80065c0:	8800759c 	.word	0x8800759c
 80065c4:	7e37e43c 	.word	0x7e37e43c
 80065c8:	8800759c 	.word	0x8800759c
 80065cc:	fe37e43c 	.word	0xfe37e43c
 80065d0:	c2f8f359 	.word	0xc2f8f359
 80065d4:	81a56e1f 	.word	0x81a56e1f
 80065d8:	43500000 	.word	0x43500000
 80065dc:	ffff3cb0 	.word	0xffff3cb0
 80065e0:	3c900000 	.word	0x3c900000

080065e4 <_init>:
 80065e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065e6:	bf00      	nop
 80065e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ea:	bc08      	pop	{r3}
 80065ec:	469e      	mov	lr, r3
 80065ee:	4770      	bx	lr

080065f0 <_fini>:
 80065f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f2:	bf00      	nop
 80065f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065f6:	bc08      	pop	{r3}
 80065f8:	469e      	mov	lr, r3
 80065fa:	4770      	bx	lr
